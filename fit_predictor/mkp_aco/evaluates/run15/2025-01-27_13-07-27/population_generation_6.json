[
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    max_prize_per_dim = np.max(prize) / m\n    max_weight_per_item = np.max(weight, axis=1)\n    heuristics_matrix = (prize - max_prize_per_dim * np.ones(n)) / max_weight_per_item\n    return heuristics_matrix",
          "objective": -22.48136,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        weighted_diff = (prize[i] - max_prize_per_dim) / np.sum(weight[i])\n        heuristics_matrix[i] = weighted_diff / np.max(weight[i])\n    return heuristics_matrix",
          "objective": -22.45531,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_weight = np.max(weight[i])\n        heuristics_matrix[i] = prize[i] / (max_weight * (m + 1))\n    return heuristics_matrix",
          "objective": -22.45334,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_dim_prize = np.max(prize[i])\n        max_dim_weight = np.max(weight[i])\n        heuristics_matrix[i] = max_dim_prize / max_dim_weight\n    return heuristics_matrix",
          "objective": -22.45302,
          "other_inf": null
     },
     {
          "algorithm": "Common Backbone Idea:\nThe algorithms calculate a score for each item based on its prize and weight, which is then used to determine its attractiveness or potential value for the knapsack.\n\nNew Algorithm in One Sentence:\nUtilize the difference between the maximum prize per dimension and each item's prize per dimension, normalized by the item's maximum weight across all dimensions, to evaluate the heuristic value of each item.\n\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        heuristics_matrix[i] = (prize[i] - max_prize_per_dim) / np.max(weight[i])\n    return heuristics_matrix",
          "objective": -22.43631,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_weight_ratio = np.max(weight[i])\n        heuristics_matrix[i] = prize[i] / (max_weight_ratio * (m / 2 + 1))\n    return heuristics_matrix",
          "objective": -22.42748,
          "other_inf": null
     },
     {
          "algorithm": "Compute heuristics by evaluating the ratio of maximum prize over all dimensions to the maximum weight for each item.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_max_prize = np.max(prize[i])\n        item_max_weight = np.max(weight[i])\n        heuristics_matrix[i] = item_max_prize / item_max_weight\n    return heuristics_matrix",
          "objective": -22.42083,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        avg_prize_per_dim = np.mean(prize) / m\n        weighted_diff = (prize[i] - avg_prize_per_dim) / np.sum(weight[i])\n        heuristics_matrix[i] = weighted_diff / np.max(weight[i])\n    return heuristics_matrix",
          "objective": -22.41894,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_weight_ratio = max(weight[i])\n        heuristics_matrix[i] = prize[i] / (max_weight_ratio * (m / 10 + 1))\n    return heuristics_matrix",
          "objective": -22.41083,
          "other_inf": null
     },
     {
          "algorithm": "\nImplement an improved heuristic algorithm that assigns a higher score to items with a better prize-to-weight ratio, adjusted by the number of weight dimensions and a scaling factor.\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight, factor=10, bonus_scale=1):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Calculate the ratio between prize and maximum weight ratio\n        max_weight_ratio = np.max(weight[i])\n        ratio = prize[i] / max_weight_ratio\n        # Adjust the ratio based on the number of dimensions and scaling factor\n        adjusted_ratio = ratio / (m * (factor / (bonus_scale + 1)))\n        heuristics_matrix[i] = adjusted_ratio\n    return heuristics_matrix",
          "objective": -22.40918,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_weight = np.max(weight[i])\n        heuristics_matrix[i] = prize[i] / (max_weight * (m / 2 + 0.5))\n    return heuristics_matrix",
          "objective": -22.39473,
          "other_inf": null
     },
     {
          "algorithm": "\n    \"Algorithm Description:\": \"The algorithm computes a heuristics matrix based on the ratio of item prize to the sum of normalized weights for each item.\"\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    norm_weights = np.sqrt(np.sum(weight**2, axis=1))\n    heuristics_matrix = prize / (norm_weights * np.ones(n))\n    return heuristics_matrix",
          "objective": -22.39422,
          "other_inf": null
     },
     {
          "algorithm": "Generate heuristics by calculating the sum of the maximum prize over all dimensions, divided by the product of all maximum weights of each item's dimensions.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_max_prize_sum = np.sum(np.max(prize[i]))\n        item_max_weight_product = np.prod(np.max(weight[i]))\n        heuristics_matrix[i] = item_max_prize_sum / item_max_weight_product\n    return heuristics_matrix",
          "objective": -22.39194,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    max_weight = np.max(weight, axis=1)\n    min_weight = np.min(weight, axis=1)\n    heuristics_matrix = (prize / max_weight) + (min_weight / min_weight)\n    return heuristics_matrix",
          "objective": -22.38335,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.sqrt(np.sum(weight[i] ** 2))\n        heuristics_matrix[i] = normalized_prize * (1 + 0.1 * (1 - np.sum(weight[i])))\n    return heuristics_matrix",
          "objective": -22.37418,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = np.sum(prize[i]) / np.sqrt(np.sum(weight[i] ** 2))\n    return heuristics_matrix",
          "objective": -22.37331,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.sqrt(np.sum(weight[i] ** 2))\n        heuristics_matrix[i] = normalized_prize * (1 - 0.1 * np.sum(weight[i] * np.random.rand(m)))\n    return heuristics_matrix",
          "objective": -22.37115,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Normalize the prize by the maximum weight in the dimension\n        normalized_prize = prize[i] / np.max(weight[i])\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.3703,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the maximum normalized prize for each item by dividing the item's total prize by the maximum sum of weights for the corresponding dimensions.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_total_prize = np.sum(prize[i])\n        max_weight_sum = np.sum(np.max(weight[i]))\n        if max_weight_sum != 0:  # Avoid division by zero\n            normalized_prize = item_total_prize / max_weight_sum\n            heuristics_matrix[i] = normalized_prize\n        else:\n            heuristics_matrix[i] = 0\n    return heuristics_matrix",
          "objective": -22.36916,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Normalize the prize by the sum of the square roots of weights\n        normalized_prize = prize[i] / np.sqrt(np.sum(weight[i]**2))\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.36383,
          "other_inf": null
     },
     {
          "algorithm": "Calculate heuristics by dividing the sum of individual item prizes by the sum of the maximum weights across all dimensions for each item.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_max_prize_sum = np.sum(prize[i])\n        item_max_weight_sum = np.sum(np.max(weight[i], axis=0))\n        heuristics_matrix[i] = item_max_prize_sum / item_max_weight_sum\n    return heuristics_matrix",
          "objective": -22.35364,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.sqrt(np.mean(weight[i] ** 2))\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.35332,
          "other_inf": null
     },
     {
          "algorithm": "\n    \"Calculate the heuristics as the ratio of the maximum prize over all dimensions to the sum of all individual maximum weights for each item.\"\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_max_prize_sum = np.sum(np.max(prize[i]))\n        item_max_weight_sum = np.sum(np.max(weight[i]))\n        heuristics_matrix[i] = item_max_prize_sum / item_max_weight_sum\n    return heuristics_matrix",
          "objective": -22.35275,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Calculate the average prize per dimension and normalize\n        average_prize = np.mean(prize[i])\n        normalized_prize = average_prize / np.sqrt(np.mean(weight[i]**2))\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.35253,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_weight = np.sqrt(np.mean(weight[i] ** 2))\n        heuristics_matrix[i] = prize[i] / (normalized_weight * (m / 10 + 1))\n    return heuristics_matrix",
          "objective": -22.35133,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = prize[i] / (np.linalg.norm(weight[i]) * (m / 10 + 1))\n    return heuristics_matrix",
          "objective": -22.34249,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = np.mean(prize[i]) / np.std(weight[i]) * (m + 1)\n    return heuristics_matrix",
          "objective": -22.34073,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    norm_weights = np.linalg.norm(weight, axis=1)\n    heuristics_matrix = prize / (norm_weights * np.ones(n))\n    return heuristics_matrix",
          "objective": -22.33886,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = np.sum(prize[i]) / np.sum(weight[i] ** 2)\n    return heuristics_matrix",
          "objective": -22.33434,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    max_weight = np.max(weight, axis=1)\n    min_weight = np.min(weight, axis=1)\n    heuristics_matrix = (prize - min_weight) / (max_weight - min_weight)\n    return heuristics_matrix",
          "objective": -22.33002,
          "other_inf": null
     }
]