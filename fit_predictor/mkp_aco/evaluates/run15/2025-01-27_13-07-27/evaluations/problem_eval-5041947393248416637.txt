import numpy as np

def heuristics_v2(prize, weight):
    n = len(prize)
    m = len(weight[0])
    # Define the exponent that balances the influence of prize and weight
    exponent = 2
    adjusted_weights = np.power(weight, exponent)
    heuristics_matrix = np.zeros(n)
    for i in range(n):
        # Calculate weighted geometric mean with adjusted weights
        adjusted_weight_product = np.prod(adjusted_weights[i])
        if adjusted_weight_product > 0:
            adjusted_weight_mean = np.power(adjusted_weight_product, 1 / (n + m - 1))
        # Exponentiate the prize and subtract 1 to create a score
        heuristics_matrix[i] = np.exp(prize[i] / adjusted_weight_mean) - 1
    return heuristics_matrix
