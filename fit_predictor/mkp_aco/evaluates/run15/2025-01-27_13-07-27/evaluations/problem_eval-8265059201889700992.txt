import numpy as np

def heuristics_v2(prize, weight):
    n, m = prize.shape[0], weight.shape[1]
    # Initialize heuristics matrix
    heuristics = np.zeros((n,))
    # Iterate through each item
    for i in range(n):
        # Calculate the weighted sum of the item for each dimension
        weighted_sum = np.sum(weight[i] * prize[i])
        # Calculate the sum of the minimum of the item weights in each dimension
        min_weight_sum = np.sum(np.min(weight, axis=0) * prize[i])
        # Compute heuristic based on prize to weighted sum ratio, emphasizing dimensions with lower capacity
        heuristics[i] = (prize[i] / weighted_sum) * ((np.sum(np.max(weight, axis=0) * prize) - min_weight_sum) / (n - 1))
    return heuristics_matrix
