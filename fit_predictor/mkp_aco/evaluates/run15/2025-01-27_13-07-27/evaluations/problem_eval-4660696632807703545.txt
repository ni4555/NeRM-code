import numpy as np

def heuristics_v2(prize, weight):
    n, m = prize.shape[0], weight.shape[1]
    # Calculate the sum of weights for each item
    sum_weights = np.sum(weight, axis=1)
    # Normalize the sum of weights by the sum of all weights to ensure the constraint of fixed weight sum to 1
    normalized_sum_weights = sum_weights / np.sum(sum_weights)
    # Compute the weighted sum of prizes for each item
    weighted_prize = np.dot(prize, normalized_sum_weights)
    # Compute the heuristics as the weighted prize divided by the inverse of the normalized sum of weights
    heuristics_matrix = weighted_prize / normalized_sum_weights
    return heuristics_matrix
