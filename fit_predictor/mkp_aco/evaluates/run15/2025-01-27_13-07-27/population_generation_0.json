[
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if weight[j].sum() <= 1 and prize[j].sum() > 0:\n                heuristics_matrix[i, j] = prize[j].sum() / weight[j].sum()\n    return heuristics_matrix",
          "objective": -21.14407,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        heuristics[i] = (prize[i] / np.sum(weight[i])) * (1 / m)\n    return heuristics_matrix",
          "objective": -19.38368,
          "other_inf": null
     },
     {
          "algorithm": "n, m",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    {n, m} = prize.shape\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_weight = np.prod(weight[i])\n        if prize[i] > 0:\n            heuristics[i] = prize[i] / max_weight\n    return heuristics_matrix",
          "objective": -18.83628,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        heuristics[i] = np.mean((prize[i] / weight[i, :]) > np.random.rand(m))\n    return heuristics_matrix",
          "objective": Infinity,
          "other_inf": null
     }
]