{
     "algorithm": "Common Backbone Idea:\nThe algorithms calculate a score for each item based on its prize and weight, which is then used to determine its attractiveness or potential value for the knapsack.\n\nNew Algorithm in One Sentence:\nUtilize the difference between the maximum prize per dimension and each item's prize per dimension, normalized by the item's maximum weight across all dimensions, to evaluate the heuristic value of each item.\n\n```",
     "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        heuristics_matrix[i] = (prize[i] - max_prize_per_dim) / np.max(weight[i])\n    return heuristics_matrix",
     "objective": -22.43631,
     "other_inf": null
}