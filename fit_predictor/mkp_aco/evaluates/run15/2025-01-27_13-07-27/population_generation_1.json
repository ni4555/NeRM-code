[
     {
          "algorithm": "Common Backbone Idea:\nThe algorithms calculate a score for each item based on its prize and weight, which is then used to determine its attractiveness or potential value for the knapsack.\n\nNew Algorithm in One Sentence:\nUtilize the difference between the maximum prize per dimension and each item's prize per dimension, normalized by the item's maximum weight across all dimensions, to evaluate the heuristic value of each item.\n\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        heuristics_matrix[i] = (prize[i] - max_prize_per_dim) / np.max(weight[i])\n    return heuristics_matrix",
          "objective": -22.43631,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) / (total_weight / m)\n    return heuristics_matrix",
          "objective": -22.2699,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Using a product of weighted prizes and a normalized sum of weights\n        item_heuristics = np.prod(prize[i] * weight[i]) / np.sum(weight[i])\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -22.17717,
          "other_inf": null
     },
     {
          "algorithm": "\nUtilize the normalized ratio of the prize to the sum of weights across dimensions to compute item attractiveness.\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        weight_sum = np.sum(weight[i])\n        if weight_sum > 0:\n            heuristics_matrix[i] = prize[i] / weight_sum\n    return heuristics_matrix",
          "objective": -22.1241,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm evaluates the potential of each item for inclusion in the solution by comparing its prize to the sum of its weight across all dimensions, then normalizes this value to a score that indicates its relative attractiveness.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = prize[i] / total_weight\n    return heuristics_matrix",
          "objective": -22.11719,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        min_weight_per_dim = np.min(weight[i])\n        heuristics_matrix[i] = (prize[i] - min_weight_per_dim * max_prize_per_dim) / np.sum(weight[i])\n    return heuristics_matrix",
          "objective": -22.11569,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Using a weighted average of prizes divided by the sum of each weight's square\n        item_heuristics = np.sum(prize[i] * weight[i]**2) / np.sum(weight[i]**2)\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -21.74957,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        min_weight = np.min(weight[i])\n        heuristics_matrix[i] = prize[i] / (1 if min_weight > 0 else 1e-10)\n    return heuristics_matrix",
          "objective": -21.58841,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) / (1 / (m + 1))\n    return heuristics_matrix",
          "objective": -21.57602,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) * (1 / (m + 1))\n    return heuristics_matrix",
          "objective": -21.48082,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Using item-specific weighted average of prize to weight ratios\n        item_heuristics = (prize[i] * np.mean(weight[i])) / np.sum(weight[i])\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -21.45717,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) / (1 / m)\n    return heuristics_matrix",
          "objective": -21.33755,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Using a weighted sum of prizes divided by the sum of weights\n        item_heuristics = np.sum(prize[i] * weight[i]) / np.sum(weight[i])\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -21.30534,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if weight[j].sum() <= 1 and prize[j].sum() > 0:\n                heuristics_matrix[i, j] = prize[j].sum() / weight[j].sum()\n    return heuristics_matrix",
          "objective": -21.14407,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Using item-specific weighted average of prize to weight ratio for each dimension\n        item_heuristics = np.prod([prize[i] / weight[i, j] for j in range(m)])\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -20.92817,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) * np.mean(weight[i])\n    return heuristics_matrix",
          "objective": -19.71472,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = prize.shape[0]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        if np.all(weight[i] <= 1):\n            heuristics[i] = (np.prod(1 / (weight[i] + 1e-6)) - 1) * prize[i]\n    return heuristics_matrix",
          "objective": -19.60634,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_ratio = sum(prize[i] / w for w in weight[i])\n        heuristics_matrix[i] = total_ratio\n    return heuristics_matrix",
          "objective": -19.59854,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        heuristics[i] = np.mean(prize[i] * (1 - np.random.rand(m)))\n    return heuristics_matrix",
          "objective": -19.59417,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm evaluates the potential of each item for inclusion in the solution by normalizing its prize-to-weight ratio across all dimensions, adjusting for the number of constraints each item has, and sums these normalized ratios to form the heuristics matrix.\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        total_ratio = sum(prize[i] / w for w in weight[i] if w > 0)\n        heuristics_matrix[i] = total_ratio / max(1, total_weight)\n    return heuristics_matrix",
          "objective": -19.58252,
          "other_inf": null
     },
     {
          "algorithm": "The common backbone idea in the provided algorithms is the concept of \"promising\" to include an item, measured by some metric such as average prize per weight.\n\nNew Algorithm: Calculate heuristics as the weighted sum of each item's maximum prize over a subset of random items, with the weight being the total prize of the selected random items.\n\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = len(prize), len(weight)\n    heuristics = np.zeros(n)\n    for i in range(n):\n        total_prize = np.sum(prize[np.random.choice(n, 3, replace=False)])\n        weighted_prize = np.sum(prize * (np.random.choice(n, 3, replace=False) == i))\n        heuristics[i] = weighted_prize / total_prize\n    return heuristics_matrix",
          "objective": -19.53925,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        heuristics[i] = np.sum((prize[i] / np.maximum(weight[i, :], 1e-10)) * (np.random.rand(m) < (prize[i] / np.sum(np.maximum(weight[i, :], 1e-10)))))\n    return heuristics_matrix",
          "objective": -19.43321,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        heuristics[i] = (prize[i] / np.sum(weight[i])) * (1 / m)\n    return heuristics_matrix",
          "objective": -19.38368,
          "other_inf": null
     },
     {
          "algorithm": "n, m",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    {n, m} = prize.shape\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_weight = np.prod(weight[i])\n        if prize[i] > 0:\n            heuristics[i] = prize[i] / max_weight\n    return heuristics_matrix",
          "objective": -18.83628,
          "other_inf": null
     },
     {
          "algorithm": "Common Backbone Idea:\nBoth provided algorithms evaluate the relative attractiveness of each item based on its prize in relation to the weight or a measure of the weight across dimensions.\n\nNew Algorithm Sentence:\n\"Utilize the ratio of the prize to the minimum weight among all dimensions to calculate item attractiveness.\"\n\nImplementation:\n\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        min_weight = np.min(weight[i])\n        if min_weight > 0:\n            heuristics_matrix[i] = prize[i] / min_weight\n    return heuristics_matrix",
          "objective": -18.58691,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        if np.any(weight[i] == 1):\n            total_weight = np.sum(weight[i] * prize[i])\n            if total_weight > 0:\n                heuristics_matrix[i] = total_weight / np.sum(prize)\n    return heuristics_matrix",
          "objective": -18.50661,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) / (total_weight / m) * np.var(prize[i])\n    return heuristics_matrix",
          "objective": -18.25383,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.sum(weight[i])\n        heuristics_matrix[i] = 1 / (1 + normalized_prize)\n    return heuristics_matrix",
          "objective": -11.48819,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        heuristics[i] = np.mean((prize[i] / weight[i, :]) > np.random.rand(m))\n    return heuristics_matrix",
          "objective": Infinity,
          "other_inf": null
     }
]