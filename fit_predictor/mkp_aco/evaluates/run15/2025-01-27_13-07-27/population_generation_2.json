[
     {
          "algorithm": "Common Backbone Idea:\nThe algorithms calculate a score for each item based on its prize and weight, which is then used to determine its attractiveness or potential value for the knapsack.\n\nNew Algorithm in One Sentence:\nUtilize the difference between the maximum prize per dimension and each item's prize per dimension, normalized by the item's maximum weight across all dimensions, to evaluate the heuristic value of each item.\n\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        heuristics_matrix[i] = (prize[i] - max_prize_per_dim) / np.max(weight[i])\n    return heuristics_matrix",
          "objective": -22.43631,
          "other_inf": null
     },
     {
          "algorithm": "\n    \"Algorithm Description:\": \"The algorithm computes a heuristics matrix based on the ratio of item prize to the sum of normalized weights for each item.\"\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    norm_weights = np.sqrt(np.sum(weight**2, axis=1))\n    heuristics_matrix = prize / (norm_weights * np.ones(n))\n    return heuristics_matrix",
          "objective": -22.39422,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Normalize the prize by the sum of the square roots of weights\n        normalized_prize = prize[i] / np.sqrt(np.sum(weight[i]**2))\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.36383,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    max_weight = np.max(weight, axis=1)\n    min_weight = np.min(weight, axis=1)\n    heuristics_matrix = (prize - min_weight) / (max_weight - min_weight)\n    return heuristics_matrix",
          "objective": -22.33002,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Calculate the ratio of the sum of weights to the sum of squares of weights\n        weight_ratio = np.sum(weight[i]) / np.sum(weight[i]**2)\n        # Use a weighted sum of prizes, weighted by the inverse of the item's weight\n        item_heuristics = np.sum(prize[i] * weight_ratio)\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -22.32458,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) * (1 / (m * total_weight))\n    return heuristics_matrix",
          "objective": -22.29724,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) / (total_weight / m)\n    return heuristics_matrix",
          "objective": -22.2699,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_prize = np.sum(prize[i])\n        avg_prize_per_dim = total_prize / m\n        heuristics_matrix[i] = avg_prize_per_dim / (np.sum(weight[i]) / m)\n    return heuristics_matrix",
          "objective": -22.23089,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        heuristics_matrix[i] = (prize[i] - max_prize_per_dim) / np.mean(weight[i])\n    return heuristics_matrix",
          "objective": -22.19447,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_sum = np.sum(prize[i])\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = item_sum / total_weight\n    return heuristics_matrix",
          "objective": -22.18142,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Using a product of weighted prizes and a normalized sum of weights\n        item_heuristics = np.prod(prize[i] * weight[i]) / np.sum(weight[i])\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -22.17717,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = np.mean(prize[i]) / np.mean(weight[i])\n    return heuristics_matrix",
          "objective": -22.17402,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        sum_weight = np.sum(weight[i])\n        heuristics_matrix[i] = prize[i] / (sum_weight if sum_weight > 0 else 1e-10)\n    return heuristics_matrix",
          "objective": -22.15508,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) * (m / total_weight)\n    return heuristics_matrix",
          "objective": -22.14301,
          "other_inf": null
     },
     {
          "algorithm": "\nUtilize the normalized ratio of the prize to the sum of weights across dimensions to compute item attractiveness.\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        weight_sum = np.sum(weight[i])\n        if weight_sum > 0:\n            heuristics_matrix[i] = prize[i] / weight_sum\n    return heuristics_matrix",
          "objective": -22.1241,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm evaluates the potential of each item for inclusion in the solution by comparing its prize to the sum of its weight across all dimensions, then normalizes this value to a score that indicates its relative attractiveness.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = prize[i] / total_weight\n    return heuristics_matrix",
          "objective": -22.11719,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        min_weight_per_dim = np.min(weight[i])\n        heuristics_matrix[i] = (prize[i] - min_weight_per_dim * max_prize_per_dim) / np.sum(weight[i])\n    return heuristics_matrix",
          "objective": -22.11569,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = np.mean(prize[i]) / np.mean(weight[i] * np.where(weight[i] > 0, 1, 0))\n    return heuristics_matrix",
          "objective": -22.09745,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) * (1 / total_weight)\n    return heuristics_matrix",
          "objective": -22.09631,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_heuristics = 1 / (np.mean(weight[i]) ** 2 * np.sum(1 / (prize[i] + 1e-10)))\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -22.08636,
          "other_inf": null
     },
     {
          "algorithm": "{\n\"Improve the item attractiveness by incorporating a dimension-specific normalization and penalizing items with higher overall weights.\"\n\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        weight_sum = np.sum(weight[i])\n        if weight_sum > 0:\n            # Normalize by sum of weights and penalize high weight\n            heuristics_matrix[i] = prize[i] / weight_sum * (1 - 0.1 * weight_sum)\n    return heuristics_matrix",
          "objective": -22.07132,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_ratio = np.max([prize[i] / np.sum(weight[i][j] for j in range(m)) for j in range(m)])\n        heuristics_matrix[i] = max_ratio\n    return heuristics_matrix",
          "objective": -22.0292,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        heuristics_matrix[i] = prize[i] / np.sqrt(total_weight)\n    return heuristics_matrix",
          "objective": -21.91135,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        heuristics_matrix[i] = np.mean(prize[i] * np.random.rand(m)) / total_weight\n    return heuristics_matrix",
          "objective": -21.81215,
          "other_inf": null
     },
     {
          "algorithm": "{\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = prize[i] / (1 + m * np.mean(weight[i]))\n    return heuristics_matrix",
          "objective": -21.80752,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        average_weight = np.mean(weight[i])\n        heuristics_matrix[i] = prize[i] / (1 / m + average_weight)\n    return heuristics_matrix",
          "objective": -21.75856,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Using a weighted average of prizes divided by the sum of each weight's square\n        item_heuristics = np.sum(prize[i] * weight[i]**2) / np.sum(weight[i]**2)\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -21.74957,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    mean_prize = np.mean(prize)\n    max_weight = np.sum(weight, axis=1)\n    std_deviation = np.std(prize)\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = prize[i] / (mean_prize + max_weight[i] * std_deviation)\n    return heuristics_matrix",
          "objective": -21.74813,
          "other_inf": null
     },
     {
          "algorithm": "{\nNew Algorithm: This algorithm evaluates the promisingness of each item for inclusion in the solution by calculating a weighted score that considers the average prize per random weight dimension divided by the item's total weight.\n\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        weighted_prize_sum = np.sum(prize[i] * np.random.rand(m))\n        total_weight = np.sum(weight[i])\n        heuristics_matrix[i] = weighted_prize_sum / total_weight\n    return heuristics_matrix",
          "objective": -21.74636,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = (prize / m) - np.min(weight, axis=1)\n    return heuristics_matrix",
          "objective": -21.68502,
          "other_inf": null
     }
]