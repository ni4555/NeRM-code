[
    {
        "objective": -22.48136,
        "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    max_prize_per_dim = np.max(prize) / m\n    max_weight_per_item = np.max(weight, axis=1)\n    heuristics_matrix = (prize - max_prize_per_dim * np.ones(n)) / max_weight_per_item\n    return heuristics_matrix",
        "algorithm": "```"
    },
    {
        "objective": -22.45531,
        "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        weighted_diff = (prize[i] - max_prize_per_dim) / np.sum(weight[i])\n        heuristics_matrix[i] = weighted_diff / np.max(weight[i])\n    return heuristics_matrix",
        "algorithm": "```"
    },
    {
        "objective": -22.45334,
        "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_weight = np.max(weight[i])\n        heuristics_matrix[i] = prize[i] / (max_weight * (m + 1))\n    return heuristics_matrix",
        "algorithm": "```"
    },
    {
        "objective": -22.45302,
        "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_dim_prize = np.max(prize[i])\n        max_dim_weight = np.max(weight[i])\n        heuristics_matrix[i] = max_dim_prize / max_dim_weight\n    return heuristics_matrix",
        "algorithm": "```"
    },
    {
        "objective": -22.43685,
        "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_max_weight = np.max(weight[i])\n        heuristics_matrix[i] = (prize[i] / item_max_weight) / (np.sum(prize) / n)\n    return heuristics_matrix",
        "algorithm": "```"
    }
]