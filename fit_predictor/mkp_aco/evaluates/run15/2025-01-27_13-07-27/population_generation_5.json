[
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        weighted_diff = (prize[i] - max_prize_per_dim) / np.sum(weight[i])\n        heuristics_matrix[i] = weighted_diff / np.max(weight[i])\n    return heuristics_matrix",
          "objective": -22.45531,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_dim_prize = np.max(prize[i])\n        max_dim_weight = np.max(weight[i])\n        heuristics_matrix[i] = max_dim_prize / max_dim_weight\n    return heuristics_matrix",
          "objective": -22.45302,
          "other_inf": null
     },
     {
          "algorithm": "Common Backbone Idea:\nThe algorithms calculate a score for each item based on its prize and weight, which is then used to determine its attractiveness or potential value for the knapsack.\n\nNew Algorithm in One Sentence:\nUtilize the difference between the maximum prize per dimension and each item's prize per dimension, normalized by the item's maximum weight across all dimensions, to evaluate the heuristic value of each item.\n\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        heuristics_matrix[i] = (prize[i] - max_prize_per_dim) / np.max(weight[i])\n    return heuristics_matrix",
          "objective": -22.43631,
          "other_inf": null
     },
     {
          "algorithm": "Compute heuristics by evaluating the ratio of maximum prize over all dimensions to the maximum weight for each item.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_max_prize = np.max(prize[i])\n        item_max_weight = np.max(weight[i])\n        heuristics_matrix[i] = item_max_prize / item_max_weight\n    return heuristics_matrix",
          "objective": -22.42083,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        avg_prize_per_dim = np.mean(prize) / m\n        weighted_diff = (prize[i] - avg_prize_per_dim) / np.sum(weight[i])\n        heuristics_matrix[i] = weighted_diff / np.max(weight[i])\n    return heuristics_matrix",
          "objective": -22.41894,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_weight_ratio = max(weight[i])\n        heuristics_matrix[i] = prize[i] / (max_weight_ratio * (m / 10 + 1))\n    return heuristics_matrix",
          "objective": -22.41083,
          "other_inf": null
     },
     {
          "algorithm": "\n    \"Algorithm Description:\": \"The algorithm computes a heuristics matrix based on the ratio of item prize to the sum of normalized weights for each item.\"\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    norm_weights = np.sqrt(np.sum(weight**2, axis=1))\n    heuristics_matrix = prize / (norm_weights * np.ones(n))\n    return heuristics_matrix",
          "objective": -22.39422,
          "other_inf": null
     },
     {
          "algorithm": "Generate heuristics by calculating the sum of the maximum prize over all dimensions, divided by the product of all maximum weights of each item's dimensions.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_max_prize_sum = np.sum(np.max(prize[i]))\n        item_max_weight_product = np.prod(np.max(weight[i]))\n        heuristics_matrix[i] = item_max_prize_sum / item_max_weight_product\n    return heuristics_matrix",
          "objective": -22.39194,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.sqrt(np.sum(weight[i] ** 2))\n        heuristics_matrix[i] = normalized_prize * (1 + 0.1 * (1 - np.sum(weight[i])))\n    return heuristics_matrix",
          "objective": -22.37418,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = np.sum(prize[i]) / np.sqrt(np.sum(weight[i] ** 2))\n    return heuristics_matrix",
          "objective": -22.37331,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.sqrt(np.sum(weight[i] ** 2))\n        heuristics_matrix[i] = normalized_prize * (1 - 0.1 * np.sum(weight[i] * np.random.rand(m)))\n    return heuristics_matrix",
          "objective": -22.37115,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Normalize the prize by the maximum weight in the dimension\n        normalized_prize = prize[i] / np.max(weight[i])\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.3703,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Normalize the prize by the sum of the square roots of weights\n        normalized_prize = prize[i] / np.sqrt(np.sum(weight[i]**2))\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.36383,
          "other_inf": null
     },
     {
          "algorithm": "Calculate heuristics by dividing the sum of individual item prizes by the sum of the maximum weights across all dimensions for each item.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_max_prize_sum = np.sum(prize[i])\n        item_max_weight_sum = np.sum(np.max(weight[i], axis=0))\n        heuristics_matrix[i] = item_max_prize_sum / item_max_weight_sum\n    return heuristics_matrix",
          "objective": -22.35364,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.sqrt(np.mean(weight[i] ** 2))\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.35332,
          "other_inf": null
     },
     {
          "algorithm": "\n    \"Calculate the heuristics as the ratio of the maximum prize over all dimensions to the sum of all individual maximum weights for each item.\"\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_max_prize_sum = np.sum(np.max(prize[i]))\n        item_max_weight_sum = np.sum(np.max(weight[i]))\n        heuristics_matrix[i] = item_max_prize_sum / item_max_weight_sum\n    return heuristics_matrix",
          "objective": -22.35275,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Calculate the average prize per dimension and normalize\n        average_prize = np.mean(prize[i])\n        normalized_prize = average_prize / np.sqrt(np.mean(weight[i]**2))\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.35253,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = prize[i] / (np.linalg.norm(weight[i]) * (m / 10 + 1))\n    return heuristics_matrix",
          "objective": -22.34249,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    norm_weights = np.linalg.norm(weight, axis=1)\n    heuristics_matrix = prize / (norm_weights * np.ones(n))\n    return heuristics_matrix",
          "objective": -22.33886,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = np.sum(prize[i]) / np.sum(weight[i] ** 2)\n    return heuristics_matrix",
          "objective": -22.33434,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    max_weight = np.max(weight, axis=1)\n    min_weight = np.min(weight, axis=1)\n    heuristics_matrix = (prize - min_weight) / (max_weight - min_weight)\n    return heuristics_matrix",
          "objective": -22.33002,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Calculate the ratio of the sum of weights to the sum of squares of weights\n        weight_ratio = np.sum(weight[i]) / np.sum(weight[i]**2)\n        # Use a weighted sum of prizes, weighted by the inverse of the item's weight\n        item_heuristics = np.sum(prize[i] * weight_ratio)\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -22.32458,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        heuristics_matrix[i] = (prize[i] / total_weight) * (m / np.sum(weight[i] > 0))\n    return heuristics_matrix",
          "objective": -22.31279,
          "other_inf": null
     },
     {
          "algorithm": "{\nAlgorithm: Utilize a weighted sum method combined with a Gaussian noise term to calculate the heuristics for each item.\n\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.sqrt(np.sum(weight[i] ** 2))\n        noise = 0.1 * np.random.randn(m)\n        heuristics_matrix[i] = normalized_prize * (1 - np.dot(noise, weight[i]))\n    return heuristics_matrix",
          "objective": -22.30466,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        heuristics_matrix[i] = (prize[i] - max_prize_per_dim) / np.sum(weight[i])\n    return heuristics_matrix",
          "objective": -22.30187,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Calculate the total prize for each item\n        item_prize = np.sum(prize[i])\n        # Calculate the average weight for each item\n        item_avg_weight = np.mean(weight[i])\n        # Normalize prize by the average weight\n        heuristics_matrix[i] = item_prize / item_avg_weight\n    return heuristics_matrix",
          "objective": -22.29994,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) * (1 / (m * total_weight))\n    return heuristics_matrix",
          "objective": -22.29724,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        sum_of_weight = np.sum(weight[i])\n        normalized_prize = prize[i] / sum_of_weight\n        heuristics_matrix[i] = normalized_prize * (1 + 0.2 * (1 - sum_of_weight))\n    return heuristics_matrix",
          "objective": -22.2933,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) / (total_weight / m)\n    return heuristics_matrix",
          "objective": -22.2699,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.mean(weight[i])\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.25145,
          "other_inf": null
     }
]