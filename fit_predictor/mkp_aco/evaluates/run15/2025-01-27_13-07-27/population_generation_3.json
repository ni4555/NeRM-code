[
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        weighted_diff = (prize[i] - max_prize_per_dim) / np.sum(weight[i])\n        heuristics_matrix[i] = weighted_diff / np.max(weight[i])\n    return heuristics_matrix",
          "objective": -22.45531,
          "other_inf": null
     },
     {
          "algorithm": "Common Backbone Idea:\nThe algorithms calculate a score for each item based on its prize and weight, which is then used to determine its attractiveness or potential value for the knapsack.\n\nNew Algorithm in One Sentence:\nUtilize the difference between the maximum prize per dimension and each item's prize per dimension, normalized by the item's maximum weight across all dimensions, to evaluate the heuristic value of each item.\n\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        heuristics_matrix[i] = (prize[i] - max_prize_per_dim) / np.max(weight[i])\n    return heuristics_matrix",
          "objective": -22.43631,
          "other_inf": null
     },
     {
          "algorithm": "Compute heuristics by evaluating the ratio of maximum prize over all dimensions to the maximum weight for each item.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_max_prize = np.max(prize[i])\n        item_max_weight = np.max(weight[i])\n        heuristics_matrix[i] = item_max_prize / item_max_weight\n    return heuristics_matrix",
          "objective": -22.42083,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        avg_prize_per_dim = np.mean(prize) / m\n        weighted_diff = (prize[i] - avg_prize_per_dim) / np.sum(weight[i])\n        heuristics_matrix[i] = weighted_diff / np.max(weight[i])\n    return heuristics_matrix",
          "objective": -22.41894,
          "other_inf": null
     },
     {
          "algorithm": "\n    \"Algorithm Description:\": \"The algorithm computes a heuristics matrix based on the ratio of item prize to the sum of normalized weights for each item.\"\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    norm_weights = np.sqrt(np.sum(weight**2, axis=1))\n    heuristics_matrix = prize / (norm_weights * np.ones(n))\n    return heuristics_matrix",
          "objective": -22.39422,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.sqrt(np.sum(weight[i] ** 2))\n        heuristics_matrix[i] = normalized_prize * (1 + 0.1 * (1 - np.sum(weight[i])))\n    return heuristics_matrix",
          "objective": -22.37418,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = np.sum(prize[i]) / np.sqrt(np.sum(weight[i] ** 2))\n    return heuristics_matrix",
          "objective": -22.37331,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.sqrt(np.sum(weight[i] ** 2))\n        heuristics_matrix[i] = normalized_prize * (1 - 0.1 * np.sum(weight[i] * np.random.rand(m)))\n    return heuristics_matrix",
          "objective": -22.37115,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Normalize the prize by the maximum weight in the dimension\n        normalized_prize = prize[i] / np.max(weight[i])\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.3703,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Normalize the prize by the sum of the square roots of weights\n        normalized_prize = prize[i] / np.sqrt(np.sum(weight[i]**2))\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.36383,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        normalized_prize = prize[i] / np.sqrt(np.mean(weight[i] ** 2))\n        heuristics_matrix[i] = normalized_prize\n    return heuristics_matrix",
          "objective": -22.35332,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    norm_weights = np.linalg.norm(weight, axis=1)\n    heuristics_matrix = prize / (norm_weights * np.ones(n))\n    return heuristics_matrix",
          "objective": -22.33886,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = np.sum(prize[i]) / np.sum(weight[i] ** 2)\n    return heuristics_matrix",
          "objective": -22.33434,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    max_weight = np.max(weight, axis=1)\n    min_weight = np.min(weight, axis=1)\n    heuristics_matrix = (prize - min_weight) / (max_weight - min_weight)\n    return heuristics_matrix",
          "objective": -22.33002,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Calculate the ratio of the sum of weights to the sum of squares of weights\n        weight_ratio = np.sum(weight[i]) / np.sum(weight[i]**2)\n        # Use a weighted sum of prizes, weighted by the inverse of the item's weight\n        item_heuristics = np.sum(prize[i] * weight_ratio)\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -22.32458,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        heuristics_matrix[i] = (prize[i] / total_weight) * (m / np.sum(weight[i] > 0))\n    return heuristics_matrix",
          "objective": -22.31279,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        heuristics_matrix[i] = (prize[i] - max_prize_per_dim) / np.sum(weight[i])\n    return heuristics_matrix",
          "objective": -22.30187,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) * (1 / (m * total_weight))\n    return heuristics_matrix",
          "objective": -22.29724,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = np.mean(prize[i]) / (total_weight / m)\n    return heuristics_matrix",
          "objective": -22.2699,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_prize = np.sum(prize[i])\n        avg_prize_per_dim = total_prize / m\n        heuristics_matrix[i] = avg_prize_per_dim / (np.sum(weight[i]) / m)\n    return heuristics_matrix",
          "objective": -22.23089,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        avg_prize_per_dim = np.mean(prize) / m\n        heuristics_matrix[i] = (prize[i] - avg_prize_per_dim) / np.sum(weight[i])\n    return heuristics_matrix",
          "objective": -22.20558,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        max_prize_per_dim = np.max(prize) / m\n        heuristics_matrix[i] = (prize[i] - max_prize_per_dim) / np.mean(weight[i])\n    return heuristics_matrix",
          "objective": -22.19447,
          "other_inf": null
     },
     {
          "algorithm": "Common Backbone Idea:\nThe algorithms use a normalized ratio of some item characteristic (prize or profit-to-weight) to determine the attractiveness of an item for inclusion in the knapsack.\n\nNew Algorithm in One Sentence:\nEmploy a combination of the maximum prize-to-weight ratio across dimensions for each item and the minimum ratio across all items to calculate a normalized heuristic value.\n\n```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    max_prize_to_weight_ratio = np.max(prize / weight.sum(axis=1))\n    min_prize_to_weight_ratio = np.min(prize / weight.sum(axis=1))\n    heuristics_matrix = (prize / weight.sum(axis=1) - min_prize_to_weight_ratio) / (max_prize_to_weight_ratio - min_prize_to_weight_ratio)\n    return heuristics_matrix",
          "objective": -22.19281,
          "other_inf": null
     },
     {
          "algorithm": "\n    \"Algorithm Description\": \"The algorithm ranks items based on the prize to weight ratio, adjusting the denominator with a small value to avoid division by zero.\"\n\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Adjust the denominator by the sum of weights to emphasize heavier items more.\n        adjusted_weight_sum = np.sum(weight[i])\n        if adjusted_weight_sum > 0:\n            heuristics_matrix[i] = prize[i] / (adjusted_weight_sum + 1e-6)\n    return heuristics_matrix",
          "objective": -22.1903,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        item_sum = np.sum(prize[i])\n        total_weight = np.sum(weight[i])\n        if total_weight > 0:\n            heuristics_matrix[i] = item_sum / total_weight\n    return heuristics_matrix",
          "objective": -22.18142,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        # Using a product of weighted prizes and a normalized sum of weights\n        item_heuristics = np.prod(prize[i] * weight[i]) / np.sum(weight[i])\n        heuristics_matrix[i] = item_heuristics\n    return heuristics_matrix",
          "objective": -22.17717,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        heuristics_matrix[i] = np.mean(prize[i]) / np.mean(weight[i])\n    return heuristics_matrix",
          "objective": -22.17402,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    max_prize_dim_weight = np.max(prize) / m\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        heuristics_matrix[i] = (prize[i] / max_prize_dim_weight) * (m / total_weight)\n    return heuristics_matrix",
          "objective": -22.16562,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    max_prize = np.max(prize)\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        heuristics_matrix[i] = (prize[i] / max_prize) * (m / total_weight)\n    return heuristics_matrix",
          "objective": -22.16226,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n = len(prize)\n    m = len(weight[0])\n    heuristics_matrix = np.zeros(n)\n    for i in range(n):\n        sum_weight = np.sum(weight[i])\n        heuristics_matrix[i] = prize[i] / (sum_weight if sum_weight > 0 else 1e-10)\n    return heuristics_matrix",
          "objective": -22.15508,
          "other_inf": null
     }
]