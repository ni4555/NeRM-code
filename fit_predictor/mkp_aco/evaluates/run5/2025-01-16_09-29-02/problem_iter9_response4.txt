```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    heuristic_score = value_per_weight * diversity_factor * normalized_prize * sparsity
    heuristic_score[heuristic_score < 0] = 0
    max_score = np.max(heuristic_score)
    if max_score == 0:
        return np.ones_like(heuristic_score)
    heuristics = heuristic_score / max_score
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    return heuristics
```
