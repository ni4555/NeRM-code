```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Adjust heuristics based on deviation from average weight
    average_weight = np.mean(np.sum(weight, axis=1))
    weight_deviation = np.abs(np.sum(weight, axis=1) - average_weight)
    heuristics = value_per_weight * diversity_factor * normalized_prize * sparsity * (1 + weight_deviation / (average_weight + 1e-8))
    
    # Apply a sparsity threshold to set unpromising elements to zero
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize the heuristics to a 0-1 scale
    heuristics /= np.max(heuristics)
    
    # Adjust heuristics based on the balance between high value and low diversity
    balance_factor = 0.5
    balance_adjustment = balance_factor * (np.sum(prize) / np.sum(value_per_weight**2))
    heuristics *= balance_adjustment
    
    return heuristics
```
