```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to the range of 0 to 1
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    # Calculate the sum of the squares of weights per dimension to give more weight to diverse items
    sum_weight_squares = np.sum(weight**2, axis=1)
    # Normalize the sum of squares to get an inverse diversity factor
    diversity_factor = 1.0 / (np.sqrt(sum_weight_squares) / np.mean(np.sqrt(sum_weight_squares)))
    # Combine normalized prize and diversity factor
    heuristics = prize_normalized * diversity_factor
    # Cap the heuristics to be non-negative and scale them to a [0, 1] range
    heuristics = np.clip(heuristics, 0, 1)
    # Apply a sparsity threshold to set unpromising elements to zero
    sparsity_threshold = 0.3  # Adjust this threshold based on problem characteristics
    heuristics[heuristics < sparsity_threshold] = 0
    # Normalize heuristics to have a mean of 1
    heuristics /= np.mean(heuristics)
    return heuristics
```
