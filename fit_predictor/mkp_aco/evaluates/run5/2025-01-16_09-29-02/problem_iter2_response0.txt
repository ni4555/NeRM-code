```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.min(weight, axis=1) / np.sum(weight, axis=1)
    heuristics = value_per_weight * diversity_factor
    # Applying a non-linear shaping to promote diversity and balance trade-offs
    heuristics = np.log1p(heuristics)
    sparsified_heuristics = np.where(heuristics > np.mean(heuristics), heuristics, 0)
    # Adjusting to balance the trade-off between risk and reward
    adjusted_heuristics = sparsified_heuristics * (1 - np.std(heuristics) / np.mean(heuristics))
    return adjusted_heuristics
```
