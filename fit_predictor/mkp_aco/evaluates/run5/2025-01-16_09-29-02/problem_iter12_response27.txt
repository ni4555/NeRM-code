```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combine factors with normalization
    combined_factors = value_per_weight * diversity_factor * normalized_prize * sparsity
    
    # Balance the factors with normalization
    balanced_factors = combined_factors / np.sum(combined_factors)
    
    # Adjust diversity factor to emphasize diversity
    adjusted_diversity_factor = diversity_factor / (np.max(diversity_factor) + 1e-8)
    
    # Combine the adjusted factors
    adjusted_factors = balanced_factors * adjusted_diversity_factor
    
    # Cap individual heuristics to prevent any from being too dominant
    capped_factors = np.clip(adjusted_factors, 0, 1)
    
    # Filter out items with very low heuristics
    final_heuristics = capped_factors[capped_factors >= 0.01]
    
    return final_heuristics
```
