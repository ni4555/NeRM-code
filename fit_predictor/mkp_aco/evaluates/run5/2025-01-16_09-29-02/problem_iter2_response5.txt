```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to the range of 0 to 1
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    # Calculate the inverse of the sum of weights per dimension
    sum_weight_inverse = 1.0 / np.sum(weight, axis=1)
    # Combine normalized prize and inverse sum of weights
    heuristics = prize_normalized * sum_weight_inverse
    # Apply a sparsity threshold to set unpromising elements to zero
    sparsity_threshold = 0.5
    heuristics[heuristics < sparsity_threshold] = 0
    return heuristics
```
