```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Using a weighted sum of factors to determine the heuristics
    heuristics = 0.6 * value_per_weight + 0.2 * diversity_factor + 0.1 * normalized_prize + 0.1 * sparsity
    
    # Apply sparsity threshold
    heuristics[heuristics < 0.1] = 0
    
    # Normalize the heuristics
    heuristics = heuristics / np.max(heuristics)
    
    # Mutation: Introduce randomness to enhance diversity
    random_factor = np.random.rand(*heuristics.shape)
    heuristics = heuristics * random_factor
    
    # Additional improvement: penalize low diversity
    low_diversity_penalty = 1 / (1 + np.sum(weight, axis=1) / np.min(weight, axis=1))
    heuristics *= low_diversity_penalty
    
    return heuristics
```
