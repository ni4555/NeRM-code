```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Adjusted balance factor
    balance_factor = (np.max(value_per_weight) - np.min(value_per_weight)) / np.std(value_per_weight)
    
    # Combine factors with careful normalization
    combined_heuristics = (value_per_weight * diversity_factor * normalized_prize * sparsity * balance_factor)
    
    # Prune sparsity more effectively
    sparsity_threshold = 0.1
    heuristics = np.where(combined_heuristics >= sparsity_threshold, combined_heuristics, 0)
    
    return heuristics
```
