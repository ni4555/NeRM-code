```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the weighted density for each item
    weighted_density = np.sum(prize * weight, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the sparsity by considering the number of dimensions per item
    sparsity = np.count_nonzero(weight, axis=1) / weight.shape[1]
    
    # Combine density and sparsity with a logarithmic scaling to stabilize the heuristic values
    heuristics = np.log(weighted_density * sparsity + 1)
    
    # Clip small values to zero to avoid numerical issues when applying heuristics
    heuristics[heuristics < np.finfo(float).eps] = 0
    
    return heuristics
```
