```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Adjust diversity factor to avoid items with low diversity being undervalued
    diversity_factor = 1 / (1 + np.exp(-diversity_factor))
    
    # Combine factors using a weighted sum approach
    combined_heuristics = 0.5 * value_per_weight + 0.3 * diversity_factor + 0.2 * normalized_prize + 0.1 * sparsity
    
    # Apply sparsity heuristic
    sparsity_threshold = 0.1
    combined_heuristics[combined_heuristics < sparsity_threshold] = 0
    
    # Normalize heuristics to ensure non-negativity and boundedness
    combined_heuristics = combined_heuristics / np.max(combined_heuristics)
    return combined_heuristics
```
