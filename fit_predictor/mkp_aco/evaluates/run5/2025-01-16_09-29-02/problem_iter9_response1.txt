```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Adjust the balance between diversity and value
    adjusted_diversity = diversity_factor * 0.5
    
    # Introduce a sparsity factor that penalizes items with high weight-to-prize ratio
    sparsity_factor = np.sum(weight, axis=1) / prize
    adjusted_sparsity = sparsity_factor / (np.max(sparsity_factor) + 1e-8)
    
    heuristics = (value_per_weight * adjusted_diversity * normalized_prize * adjusted_sparsity)
    
    # Apply sparsification
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize heuristics to ensure they sum to 1
    heuristics = heuristics / np.sum(heuristics)
    
    return heuristics
```
