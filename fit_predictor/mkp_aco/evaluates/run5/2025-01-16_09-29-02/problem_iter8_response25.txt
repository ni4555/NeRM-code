```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Weights for the factors, reflecting their importance
    weight_value_per_weight = 0.4
    weight_diversity_factor = 0.2
    weight_normalized_prize = 0.2
    weight_sparsity = 0.2
    
    # Using a weighted sum of factors to determine the heuristics
    heuristics = (weight_value_per_weight * value_per_weight +
                  weight_diversity_factor * diversity_factor +
                  weight_normalized_prize * normalized_prize +
                  weight_sparsity * sparsity)
    
    # Apply sparsity threshold
    heuristics[heuristics < 0.1] = 0
    
    # Normalize the heuristics
    heuristics = heuristics / np.max(heuristics)
    
    return heuristics
```
