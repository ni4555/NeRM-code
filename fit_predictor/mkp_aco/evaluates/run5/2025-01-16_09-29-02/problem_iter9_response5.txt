```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    heuristic_score = (value_per_weight * diversity_factor * normalized_prize * sparsity)
    heuristic_score = heuristic_score + (np.random.rand(n) * 0.1)  # Adding randomness to promote diversity
    heuristic_score[weight.sum(axis=1) > n * 0.9] = 0  # Sparsify by setting high density items to 0
    heuristic_score = heuristic_score / np.max(heuristic_score)
    return heuristic_score
```
