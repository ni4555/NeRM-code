```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Normalize factors
    factor_sum = np.sum([value_per_weight, diversity_factor, normalized_prize, sparsity], axis=0)
    heuristics = (value_per_weight * diversity_factor * normalized_prize * sparsity) / factor_sum
    
    # Adjust diversity factor to emphasize diversity
    adjusted_diversity_factor = diversity_factor / (np.max(diversity_factor) + 1e-8)
    
    # Combine the adjusted factors
    heuristics = heuristics * adjusted_diversity_factor
    
    # Cap individual heuristics to prevent any from being too dominant
    heuristics = np.clip(heuristics, 0, 1)
    
    # Filter out items with very low heuristics
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
