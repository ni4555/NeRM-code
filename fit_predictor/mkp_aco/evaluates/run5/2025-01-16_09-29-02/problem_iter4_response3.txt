```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to the range of 0 to 1
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    # Calculate the sum of weights per item and normalize it
    weight_sum_normalized = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))
    # Calculate the sum of the product of prize and weight per dimension
    sum_prize_weight = np.sum(prize_normalized * weight, axis=1)
    # Combine the normalized prize, normalized weight sum, and sum of prize-weight product
    heuristics = prize_normalized * weight_sum_normalized * (sum_prize_weight / np.mean(sum_prize_weight))
    # Apply a logarithmic transformation to reduce the impact of high heuristics values
    heuristics = np.log(1 + heuristics)
    # Apply sparsity to set unpromising elements to zero
    sparsity_threshold = 0.01
    heuristics[heuristics < sparsity_threshold] = 0
    return heuristics
```
