```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.sqrt(weight**2).sum(axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.sqrt(weight**2).sum(axis=1) + 1e-8)
    heuristics = value_per_weight * diversity_factor * normalized_prize * sparsity
    # Apply non-linear scaling to enhance the effect of high-value items
    heuristics = np.tanh(heuristics)
    # Apply bounds to ensure non-negative values and prevent overflow
    heuristics = np.clip(heuristics, 0, 1)
    # Set low-potential elements to zero to sparsify the heuristics
    heuristics[heuristics < 0.1] = 0
    return heuristics
```
