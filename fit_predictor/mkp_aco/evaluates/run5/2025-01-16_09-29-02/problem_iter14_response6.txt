```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    balance_factor = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))
    
    # Combining factors to create a composite heuristic score
    composite_score = value_per_weight * diversity_factor * normalized_prize * sparsity * balance_factor
    
    # Thresholding based on a normalized sparsity factor to filter low-scoring items
    sparsity_threshold = 0.1
    composite_score[composite_score < sparsity_threshold] = 0
    
    # Normalize the heuristic scores to a range [0, 1]
    normalized_scores = composite_score / np.max(composite_score)
    
    # Adjust the scale of scores to improve interpretability and ensure that all values are comparable
    scaled_scores = normalized_scores * 100
    
    return scaled_scores
```
