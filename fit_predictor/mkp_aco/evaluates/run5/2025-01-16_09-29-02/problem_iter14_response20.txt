```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    heuristic_score = value_per_weight * diversity_factor * normalized_prize * sparsity

    # Apply a logarithm to non-linearly scale values and avoid issues with very small numbers
    heuristic_score = np.log(heuristic_score + 1e-8)

    # Normalize the heuristics using the softmax function to avoid rounding issues
    exp_scores = np.exp(heuristic_score - np.max(heuristic_score))
    heuristics = exp_scores / np.sum(exp_scores)

    return heuristics
```
