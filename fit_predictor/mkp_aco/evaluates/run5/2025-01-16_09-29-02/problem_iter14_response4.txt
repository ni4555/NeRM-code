```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    
    # Combine features with appropriate weights
    heuristics = value_per_weight * 0.4 + diversity_factor * 0.3 + normalized_prize * 0.2 + 1 / (np.linalg.norm(weight, axis=1) + 1e-8) * 0.1
    
    # Prune outliers: remove items with a heuristic below a certain threshold
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize heuristics to a scale that makes sense for the problem context
    heuristics = heuristics / np.max(heuristics)
    
    # Ensure non-negativity
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
