```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / np.sqrt(np.sum(weight**2, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / np.sqrt(np.sum(weight**2, axis=1) + 1e-8)
    
    # Apply non-linear transformations
    value_per_weight = np.log(1 + value_per_weight)
    diversity_factor = np.log(1 + diversity_factor)
    normalized_prize = np.log(1 + normalized_prize)
    sparsity = np.log(1 + sparsity)
    
    # Consider feature interactions
    heuristics = value_per_weight * diversity_factor * normalized_prize * sparsity
    
    # Apply adaptive normalization
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Ensure non-negativity and boundedness
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
