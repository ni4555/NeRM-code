```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item
    item_density = prize / np.sum(weight, axis=1)
    
    # Calculate the normalized weights (each dimension weight is fixed to 1)
    normalized_weight = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))
    
    # Calculate a heuristic score based on density, normalized weight, and entropy
    entropy = -np.sum(normalized_weight * np.log(normalized_weight + 1e-10))
    heuristics = item_density / (normalized_weight ** 0.5) * np.exp(-entropy / 1000)
    
    # Cap the heuristics to be non-negative and scale them to a [0, 1] range
    heuristics = np.clip(heuristics, 0, 1)
    
    # Optionally, normalize heuristics to have a mean of 1
    heuristics /= np.mean(heuristics)
    
    return heuristics
```
