```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Adjusting the weights of the factors to reflect their importance
    adjusted_factors = {
        'value_per_weight': 0.6,
        'diversity_factor': 0.3,
        'normalized_prize': 0.1,
        'sparsity': 0.1
    }
    
    # Calculate the weighted sum of the factors
    balanced_factor = sum(adjusted_factors[f] * factor for f, factor in zip(adjusted_factors, [value_per_weight, diversity_factor, normalized_prize, sparsity]))
    
    # Use a dynamic threshold based on the maximum value of the balanced factor
    max_balanced_factor = np.max(balanced_factor)
    threshold = max_balanced_factor * 0.1  # Set threshold as 10% of the max value
    
    # Clip values below the threshold to 0
    heuristics = np.clip(balanced_factor, a_min=threshold, a_max=None)
    
    return heuristics
```
