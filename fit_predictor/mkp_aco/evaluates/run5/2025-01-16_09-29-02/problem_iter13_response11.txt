```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    balance_factor = np.mean(weight, axis=1) / np.std(weight, axis=1)
    heuristics = (value_per_weight * diversity_factor * normalized_prize * sparsity * balance_factor)
    
    # Applying cap dominance to ensure no item has a heuristic value over a certain threshold
    cap_threshold = 0.9
    heuristics[heuristics > cap_threshold] = cap_threshold
    
    # Pruning sparsity
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Scaling heuristics to be between 0 and 1
    heuristics = heuristics / np.max(heuristics)
    return heuristics
```
