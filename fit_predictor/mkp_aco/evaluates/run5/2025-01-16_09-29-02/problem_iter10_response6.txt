```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Incorporate multiplicative interactions for synergistic effects
    heuristics = value_per_weight * diversity_factor * normalized_prize * sparsity
    
    # Use thresholds to avoid sparsity traps and normalize to maintain scale
    min_val = np.min(heuristics)
    max_val = np.max(heuristics)
    threshold = 0.1
    heuristics[heuristics < threshold] = threshold
    
    # Normalize to maintain scale
    heuristics = (heuristics - min_val) / (max_val - min_val)
    
    # Ensure boundedness
    heuristics[heuristics > 1] = 1
    return heuristics
```
