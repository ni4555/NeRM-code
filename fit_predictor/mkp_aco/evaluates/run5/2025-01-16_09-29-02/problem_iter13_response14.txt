```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combining multiple factors with a weighted sum
    balance_factor = (value_per_weight * 0.5) + (diversity_factor * 0.3)
    cap_dominance = np.sum(prize * weight, axis=1) / np.sum(prize)
    
    # Normalize the balance factor by cap dominance
    balance_factor = balance_factor / (cap_dominance + 1e-8)
    
    # Normalize by normalized prize and sparsity
    balance_factor = balance_factor * normalized_prize * sparsity
    
    # Prune the sparsity by setting a threshold
    sparsity_threshold = 0.1
    balance_factor[balance_factor < sparsity_threshold] = 0
    
    # Scale the heuristics
    balance_factor = balance_factor / np.max(balance_factor)
    
    return balance_factor
```
