```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Introduce a balance factor to prevent over-reliance on any single metric
    balance_factor = 0.5
    heuristics = (balance_factor * value_per_weight +
                  (1 - balance_factor) * diversity_factor)
    
    # Normalize the heuristics to prevent large values dominating the selection
    heuristics = heuristics / np.max(heuristics)
    
    # Introduce an adaptive scaling factor that could be used to fine-tune the heuristic strength
    adaptive_scaling = np.sqrt(prize / np.sum(prize))
    heuristics *= adaptive_scaling
    
    # Penalize items with low diversity and cap the values to avoid infinite loop
    diversity_cap = 0.1
    heuristics[diversity_factor < diversity_cap] *= diversity_cap / diversity_factor
    
    # Cap the heuristics to a maximum value to ensure sparsity
    max_heuristic = np.max(heuristics)
    heuristics[heuristics > max_heuristic * 0.1] = max_heuristic * 0.1
    
    return heuristics
```
