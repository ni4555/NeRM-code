```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to a log-scale to reduce the impact of large prizes
    prize_log_scaled = np.log(prize / np.min(prize))
    prize_log_scaled -= np.log(np.max(prize_log_scaled) - np.min(prize_log_scaled))
    
    # Calculate the inverse of the average weight per dimension
    avg_weight_inverse = 1.0 / np.mean(weight, axis=1)
    
    # Combine log-scaled prize and inverse average weight
    heuristics = prize_log_scaled * avg_weight_inverse
    
    # Apply a sparsity threshold to set unpromising elements to zero
    sparsity_threshold = 0.2
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
