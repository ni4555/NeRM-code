```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value-to-weight ratio for each item
    value_per_weight = prize / np.sum(weight, axis=1)
    
    # Calculate the normalized prize to ensure all prizes contribute to the heuristic
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor, ensuring no division by zero
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Calculate sparsity to encourage selection of items with distinct weights
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combine the metrics into a single heuristic score
    heuristics = value_per_weight * normalized_prize * diversity_factor * sparsity
    
    # Apply a logarithmic transformation to emphasize differences in heuristics
    heuristics = np.log(heuristics + 1e-8)  # Adding a small constant to avoid log(0)
    
    # Sparsify the heuristics to promote sparsity in the solution
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize the heuristics to a 0-1 scale
    heuristics /= np.max(heuristics)
    
    return heuristics
```
