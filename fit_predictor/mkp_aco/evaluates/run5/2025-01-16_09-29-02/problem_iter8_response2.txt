```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value per weight for each item
    value_per_weight = prize / np.sum(weight, axis=1)
    # Calculate diversity factor for each item
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    # Normalize prize to the range of 0 to 1
    normalized_prize = prize / np.sum(prize)
    # Calculate sparsity factor for each item
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    # Calculate penalty for items that are close to exceeding their weight limit
    penalty = np.exp(-weight_sum_inverse)
    
    # Combine factors with weights to balance their influence
    factor_weights = {
        'value_per_weight': 0.4,
        'diversity_factor': 0.3,
        'normalized_prize': 0.2,
        'sparsity': 0.1,
        'penalty': 0.1
    }
    
    # Calculate the heuristic for each item
    heuristics = (
        value_per_weight * factor_weights['value_per_weight'] +
        diversity_factor * factor_weights['diversity_factor'] +
        normalized_prize * factor_weights['normalized_prize'] +
        sparsity * factor_weights['sparsity'] +
        penalty * factor_weights['penalty']
    )
    
    # Normalize the heuristics to be between 0 and 1
    heuristics = heuristics / np.max(heuristics)
    
    return heuristics
```
