```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Calculate utility factor based on multiple criteria
    utility_factor = value_per_weight * diversity_factor * normalized_prize
    
    # Normalize utility factor to ensure comparability
    max_utility = np.max(utility_factor)
    if max_utility > 0:
        adjusted_utility = utility_factor / (max_utility + 1e-8)
    else:
        adjusted_utility = np.zeros_like(utility_factor)
    
    # Emphasize diversity by penalizing excessive similarity
    similarity_penalty = np.sum(weight ** 2, axis=1) / (np.sum(weight, axis=1) ** 2)
    penalty_factor = np.log(1 + similarity_penalty)
    
    # Combine the factors and normalize heuristics
    heuristics = adjusted_utility * sparsity - penalty_factor
    heuristics = np.maximum(heuristics, 0)  # Ensure non-negative
    heuristics /= np.sum(heuristics)  # Normalize to sum to 1
    return heuristics
```
