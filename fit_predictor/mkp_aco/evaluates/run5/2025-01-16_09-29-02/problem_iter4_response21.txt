```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item considering the sum of weights for each item
    item_density = prize / np.sum(weight, axis=1)
    
    # Calculate the average density to use as a sparsity threshold
    sparsity_threshold = np.mean(item_density)
    
    # Heuristics are based on the ratio of the item's density to the average density
    heuristics = item_density / sparsity_threshold
    
    # Adjust heuristics for items that are too dense compared to the average
    # We subtract from the heuristic value if the item's density is more than twice the average
    adjusted_heuristics = heuristics - (heuristics > 2 * sparsity_threshold) * (2 * sparsity_threshold)
    
    # Cap the heuristics to a minimum value to ensure all are positive and not too small
    heuristics = np.clip(adjusted_heuristics, 0.01, 1)
    
    return heuristics
```
