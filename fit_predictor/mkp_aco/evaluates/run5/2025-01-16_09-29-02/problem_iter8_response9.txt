```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / np.sqrt(np.sum(weight**2, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / np.sqrt(np.sum(weight**2, axis=1) + 1e-8)
    non_linear_factor = np.log(1 + sparsity)
    # Interaction between features is considered using a simple product of normalized factors
    heuristics = value_per_weight * diversity_factor * normalized_prize * non_linear_factor
    # Apply dimension-aware normalization
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    return heuristics
```
