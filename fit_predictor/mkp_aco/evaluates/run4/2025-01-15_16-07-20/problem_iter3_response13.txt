```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    normalized_prize = prize / np.sum(prize)
    density = prize / np.sum(weight, axis=1)
    complexity = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    sparsity = np.sum(weight, axis=1) / weight.shape[1]
    dimension_specific = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Combine metrics and normalize
    combined_score = (normalized_prize + density - complexity) * (1 - sparsity) * dimension_specific
    
    # Sparsify by setting low-scoring items to zero
    sparsified_combined_score = np.where(combined_score > 0, combined_score, 0)
    
    return sparsified_combined_score
```
