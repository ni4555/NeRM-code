```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate a value-to-weight ratio
    value_to_weight_ratio = prize / np.mean(weight, axis=1)
    
    # Calculate a density score considering the sum of weights
    density_score = np.sum(weight, axis=1) / np.sum(weight)
    
    # Calculate a sparsity score by identifying items with zero weight in each dimension
    sparsity_score = np.mean(weight.sum(axis=1) == 0)
    
    # Calculate a balance score considering the sum of squared weights and the sum of weights
    balance_score = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine the scores into a heuristic
    heuristic_score = value_to_weight_ratio * density_score * (1 - sparsity_score) * balance_score
    
    # Apply a non-linear transformation to enhance the effect of high value-to-weight ratio
    heuristic_score = np.tanh(heuristic_score)
    
    # Normalize the heuristic scores
    normalized_heuristic_score = heuristic_score / np.sum(heuristic_score)
    
    # Return the heuristics scores
    return normalized_heuristic_score
```
