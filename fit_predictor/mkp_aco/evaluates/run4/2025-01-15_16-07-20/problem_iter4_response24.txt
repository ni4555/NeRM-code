```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the inverse sparsity for each item
    sparsity = 1 - np.prod(weight, axis=1)
    
    # Normalize the prize by the sum of the sparsity values to account for the dimensionality
    normalized_prize = prize / np.sum(sparsity)
    
    # Calculate the heuristic score based on normalized prize and inverse sparsity
    heuristic_score = normalized_prize / sparsity
    
    # Apply a threshold to filter out less promising items
    threshold = np.percentile(heuristic_score, 70)  # 70th percentile as a threshold
    sparsified_score = np.where(heuristic_score > threshold, heuristic_score, 0)
    
    return sparsified_score
```
