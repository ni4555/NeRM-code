```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the sum of prizes for items with zero weight in each dimension
    non_zero_weight_sum = np.sum(prize[weight.sum(axis=1) > 0])
    sparsity_bonus = (np.sum(prize) - non_zero_weight_sum) / max_prize
    
    # Calculate density based on prize and average weight
    density = prize / np.mean(weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Adjust utility with sparsity bonus
    adjusted_utility = utility + sparsity_bonus
    
    # Normalize the adjusted utility scores
    adjusted_utility_normalized = adjusted_utility / np.max(adjusted_utility)
    
    # Introduce a stochastic element to encourage diversity in the solution
    # Add a random factor that can be positive or negative
    random_factor = np.random.rand(len(adjusted_utility_normalized))
    adjusted_utility_normalized += random_factor - random_factor.mean()
    
    # Cap the heuristics scores to ensure they are within [0, 1]
    heuristics = np.clip(adjusted_utility_normalized, 0, 1)
    
    # Return the heuristics scores
    return heuristics
```
