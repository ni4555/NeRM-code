```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the relative importance of items based on the ratio of prize to sum of each item's weight
    relative_importance = np.log(prize / np.sum(prize) + 1)
    
    # Measure the sparsity by calculating the proportion of non-zero weights in each item
    sparsity = 1 - np.mean(weight, axis=1)
    
    # Calculate the diversity score by considering the standard deviation across dimensions
    diversity = np.mean(np.std(weight, axis=1))
    
    # Ensure balance by normalizing the weights sum over all dimensions and use it as a score
    balance_score = np.mean(weight / np.sum(weight, axis=1))
    
    # Combine the scores with appropriate weights
    utility = 0.6 * relative_importance
    sparsity_weight = 0.3 * sparsity
    diversity_weight = 0.5 * diversity
    balance_weight = 0.6 * balance_score
    
    # The final heuristic score is a weighted combination of the above scores
    heuristics = utility + sparsity_weight + diversity_weight - balance_weight
    
    # Apply a softening function (e.g., sigmoid) to the heuristic to smooth out values
    heuristics = 1 / (1 + np.exp(-heuristics))
    
    return heuristics
```
