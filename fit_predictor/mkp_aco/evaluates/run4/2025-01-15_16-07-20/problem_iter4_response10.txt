```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Calculate the remaining capacity for each item
    remaining_capacity = 1 - total_weight
    
    # Calculate the density based on prize and remaining capacity
    density = prize / remaining_capacity
    
    # Calculate the combined score as a weighted sum of density and prize
    combined_score = density * prize
    
    # Apply a threshold to filter out less promising items
    threshold = np.percentile(combined_score, 70)  # 70th percentile as a threshold
    sparsified_score = np.where(combined_score > threshold, combined_score, 0)
    
    return sparsified_score
```
