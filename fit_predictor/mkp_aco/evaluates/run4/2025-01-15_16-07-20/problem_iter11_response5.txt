```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the sum of prizes for items with zero weight in each dimension
    non_zero_weight_sum = np.sum(prize[weight.sum(axis=1) > 0])
    sparsity_bonus = (np.sum(prize) - non_zero_weight_sum) / max_prize
    
    # Calculate density based on prize and average weight
    density = prize / np.mean(weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Adjust utility with sparsity bonus and domain insights
    adjusted_utility = utility + sparsity_bonus * 0.5
    
    # Dynamically adapt the utility by considering the number of non-zero weights
    num_non_zero_weights = weight.sum(axis=1) > 0
    domain_adaptation = num_non_zero_weights.sum(axis=1) / n
    
    # Combine adjusted utility with domain adaptation
    final_utility = adjusted_utility * domain_adaptation
    
    # Normalize the final utility scores
    final_utility_normalized = final_utility / np.max(final_utility)
    
    # Sparsify the heuristics by setting unpromising elements to zero
    final_utility_normalized[final_utility_normalized < 0.2] = 0
    
    # Return the heuristics scores
    return final_utility_normalized
```
