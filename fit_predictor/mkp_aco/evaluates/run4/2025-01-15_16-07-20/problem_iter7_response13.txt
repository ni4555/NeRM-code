```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Non-linear transformation of prize using logarithm to emphasize lower values
    non_linear_prize = np.log(prize + 1)  # Adding 1 to avoid log of zero
    
    # Normalize density to consider balance and relevance
    normalized_density = (prize / np.sum(prize)) * non_linear_prize
    
    # Leverage non-linear transformation of weight to highlight important features
    non_linear_weight = np.sqrt(weight)  # Using square root as an example transformation
    
    # Adjust heuristics based on transformed prize and weighted weight
    heuristics = normalized_density * non_linear_weight.sum(axis=1)
    
    # Sparsify the heuristics by setting values below a threshold to zero
    threshold = np.sum(heuristics) / heuristics.size
    sparsity_mask = (heuristics >= threshold) * 1.0
    
    # Return the sparsified heuristics scores
    return heuristics * sparsity_mask
```
