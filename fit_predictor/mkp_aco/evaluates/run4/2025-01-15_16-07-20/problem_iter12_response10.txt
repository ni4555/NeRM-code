```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate score as the ratio of prize to the sum of weights in each dimension
    score = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity as the sum of (1 - weight) for each item
    sparsity = np.sum(1 - weight, axis=1)
    
    # Calculate sparsity factor as the ratio of sparsity to the total sparsity
    sparsity_factor = sparsity / np.sum(sparsity)
    
    # Calculate dimension variance as the exponential of the negative standard deviation of weights in each dimension
    dimension_variance = np.exp(-np.std(weight, axis=1))
    
    # Calculate utility considering the score, sparsity, and dimension variance
    utility = score * sparsity_factor * dimension_variance
    
    # Normalize the utility to focus on balance and relevance
    normalized_utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    
    # Apply a non-linear transformation to the normalized utility to emphasize important items
    transformed_utility = np.log1p(normalized_utility)
    
    # Introduce a stochastic element to encourage diversity in the solution
    random_factor = np.random.rand(len(transformed_utility))
    transformed_utility += random_factor - random_factor.mean()
    
    # Cap the heuristics scores to ensure they are within [0, 1]
    heuristics = np.clip(transformed_utility, 0, 1)
    
    return heuristics
```
