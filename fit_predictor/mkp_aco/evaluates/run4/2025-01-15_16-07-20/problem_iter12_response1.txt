```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the prize per unit weight for each item
    score = prize / np.sum(weight, axis=1)
    
    # Enhanced score based on a non-linear transformation (power law)
    enhanced_score = score ** 2
    
    # Sparsity score considering the number of non-zero dimensions
    sparsity = np.sum(1 - weight, axis=1)
    sparsity_factor = sparsity / np.sum(sparsity)
    
    # Dimension-specific factors based on the maximum value of each dimension
    dimension_factors = np.max(weight, axis=1)
    
    # Constraint balance to ensure even distribution of weights across dimensions
    constraint_balance = np.mean(weight, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the diversity of the scores to encourage a more uniform distribution
    diversity_score = np.exp(-np.sum((enhanced_score - np.mean(enhanced_score))**2, axis=1))
    
    # Combine the factors into a single heuristic score
    heuristic_score = enhanced_score * sparsity_factor * dimension_factors * diversity_score * (1 - constraint_balance)
    
    # Apply a small random perturbation to avoid local optima
    perturbation = np.random.normal(0, 0.01, size=heuristic_score.shape)
    
    # Final adjustment to heuristics
    heuristics = heuristic_score + perturbation
    
    # Normalize the heuristic scores to ensure they are within a reasonable range
    max_score = np.max(heuristic_score)
    heuristics = heuristics / max_score
    
    # Return the normalized heuristic scores
    return heuristics
```
