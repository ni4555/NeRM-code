```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the sum of prizes for items with zero weight in each dimension
    non_zero_weight_sum = np.sum(prize[weight.sum(axis=1) > 0])
    sparsity_bonus = (np.sum(prize) - non_zero_weight_sum) / max_prize
    
    # Calculate density based on prize and average weight
    density = prize / np.mean(weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine the utility factors with domain insights
    utility = density * constraint_balance * (1 - constraint_balance)
    
    # Adjust utility with sparsity bonus
    adjusted_utility = utility + sparsity_bonus
    
    # Dynamically adapt the importance of density and constraint balance
    density_weight = np.mean(density)
    balance_weight = np.mean(constraint_balance)
    
    # Final utility considering the weights of density and constraint balance
    final_utility = adjusted_utility * (density_weight + balance_weight)
    
    # Normalize the final utility scores
    final_utility_normalized = final_utility / np.max(final_utility)
    
    # Sparsify the heuristics by setting low scores to zero
    sparsified_heuristics = np.where(final_utility_normalized > 0.5, final_utility_normalized, 0)
    
    # Return the heuristics scores
    return sparsified_heuristics
```
