```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the average density based on prize and average weight
    density = prize / np.mean(weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate sparsity bonus based on items with zero weight in each dimension
    sparsity_bonus = np.where(weight.sum(axis=1) == 0, 1, 0)
    
    # Calculate utility considering both density, constraint balance, and sparsity bonus
    utility = density * (1 - constraint_balance) * sparsity_bonus
    
    # Adjust utility with a normalization factor to leverage domain knowledge
    utility = utility / np.max(utility)
    
    # Return the heuristics scores
    return utility
```
