```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    normalized_prize = prize / np.sum(prize)
    density = prize / np.sum(weight, axis=1)
    complexity = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    dimension_specific_factor = (weight**2 / np.sum(weight, axis=1)).reshape(-1, 1)
    combined_score = normalized_prize + density - complexity + dimension_specific_factor
    # Sparsifying the heuristics by setting a threshold, here 0 for demonstration purposes
    sparsity_threshold = 0
    heuristics = np.where(combined_score > sparsity_threshold, combined_score, 0)
    return heuristics
```
