```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize values to a range [0, 1]
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate density based on normalized prize values and average weight
    density = prize_normalized / np.mean(weight, axis=1)
    
    # Calculate a sparsity factor that rewards items with lower weight in each dimension
    sparsity_factor = 1 / np.sum(weight, axis=1)
    
    # Calculate a balance factor that encourages items with a uniform distribution of weights across dimensions
    balance_factor = np.mean(weight, axis=1) / np.sum(weight, axis=1)
    
    # Combine the factors to create a heuristic score for each item
    heuristic_scores = density * sparsity_factor * balance_factor
    
    # Normalize the heuristic scores to ensure they sum to 1
    heuristic_scores /= np.sum(heuristic_scores)
    
    # Return the heuristics scores
    return heuristic_scores
```
