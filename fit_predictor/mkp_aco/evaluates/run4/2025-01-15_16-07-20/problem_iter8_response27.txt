```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item based on its prize relative to the total prize
    total_prize = np.sum(prize)
    density = prize / total_prize
    
    # Calculate the sparsity score by considering the number of dimensions with non-zero weight
    sparsity_score = np.sum(1 - np.any(weight == 0, axis=1), axis=1)
    
    # Calculate the dimension-specific score based on the squared weight
    # and normalize by the sum of weights to give more weight to items with higher total weight
    dimension_specific_score = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the balance score by considering the variance of weights in each dimension
    balance_score = 1 - np.var(weight, axis=1)
    
    # Combine the scores with a weight that emphasizes density
    combined_score = density * (1 - sparsity_score) * dimension_specific_score * balance_score
    
    # Apply a logarithmic transformation to reduce the impact of outliers and to highlight items with higher scores
    transformed_combined_score = np.log1p(combined_score)
    
    # Normalize the transformed scores to ensure they are between 0 and 1
    max_transformed_combined_score = np.max(transformed_combined_score)
    min_transformed_combined_score = np.min(transformed_combined_score)
    normalized_combined_score = (transformed_combined_score - min_transformed_combined_score) / (max_transformed_combined_score - min_transformed_combined_score)
    
    # Dynamically adjust the heuristics by applying a sparsity threshold
    sparsity_threshold = np.percentile(normalized_combined_score, 50)
    heuristics = (normalized_combined_score >= sparsity_threshold) * 1.0
    
    return heuristics
```
