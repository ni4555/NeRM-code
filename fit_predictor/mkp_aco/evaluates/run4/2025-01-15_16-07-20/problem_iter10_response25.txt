```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    score = prize / np.sum(weight, axis=1)
    sparsity = np.sum(1 - weight, axis=1)
    sparsity_factor = sparsity / np.sum(sparsity)
    
    transformed_prize = np.log1p(prize)
    
    dimension_factors = np.exp(-np.std(weight, axis=1))
    
    # Incorporate diversity by considering the sparsity factor and dimension factors
    diversity_factor = (1 + sparsity_factor * dimension_factors)
    
    # Combine all factors to calculate a comprehensive utility score
    utility = score * transformed_prize * diversity_factor
    
    # Normalize the utility to ensure all values are positive
    positive_utility = np.maximum(utility, 0)
    
    # Apply a non-linear transformation to emphasize important features
    transformed_utility = np.log1p(positive_utility)
    
    # Normalize the transformed utility to focus on balance and relevance
    min_value = np.min(transformed_utility)
    max_value = np.max(transformed_utility)
    normalized_utility = (transformed_utility - min_value) / (max_value - min_value)
    
    # Apply a small random perturbation to avoid local optima
    perturbation = np.random.normal(0, 0.01, size=normalized_utility.shape)
    
    # Final adjustment to heuristics
    heuristics = normalized_utility + perturbation
    
    # Ensure the heuristics are within a certain range
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
