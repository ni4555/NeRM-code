```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate density based on normalized prize and average weight
    normalized_prize = prize / max_prize
    density = normalized_prize / np.mean(weight, axis=1)
    
    # Calculate utility considering density and a non-linear weight factor
    utility = density * np.exp(-np.sum(weight, axis=1)**2)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Balance the utility with constraint balance
    balanced_utility = utility * constraint_balance
    
    # Apply a sparsity factor to encourage choosing items with zero weight in some dimensions
    sparsity_factor = np.exp(-np.sum(weight == 0, axis=1))
    
    # Combine sparsity with the balanced utility
    combined_utility = balanced_utility * sparsity_factor
    
    # Normalize the combined utility scores
    normalized_utility = combined_utility / np.sum(combined_utility)
    
    # Return the heuristics scores
    return normalized_utility
```
