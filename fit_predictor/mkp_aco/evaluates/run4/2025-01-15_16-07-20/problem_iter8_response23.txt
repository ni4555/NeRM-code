```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to a range [0, 1]
    normalized_prize = prize / np.sum(prize)
    
    # Normalize the weights for each item to be between 0 and 1
    normalized_weight = np.sum(weight, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the utility score considering the normalized prize and weight
    utility_score = normalized_prize * normalized_weight
    
    # Incorporate diversity by considering the variance of weights
    variance = np.var(weight, axis=1)
    diversity_score = 1 / (variance + 1e-6)  # Adding a small constant to avoid division by zero
    
    # Incorporate complexity by considering the entropy of the weights
    # Calculate the probability distribution for each item
    weight_probs = weight / np.sum(weight, axis=1)[:, np.newaxis]
    entropy = -np.sum(weight_probs * np.log(weight_probs + 1e-6))  # Adding a small constant to avoid log(0)
    
    complexity_score = entropy
    
    # The final heuristic combines the utility, diversity, and complexity scores
    heuristics = utility_score * diversity_score * complexity_score
    
    # Apply a non-linear transformation to the heuristic values to emphasize differences
    heuristics = np.tanh(heuristics)
    
    return heuristics
```
