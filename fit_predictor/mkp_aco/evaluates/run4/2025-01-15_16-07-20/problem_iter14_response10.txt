```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize based on the maximum prize
    normalized_prize = prize / np.max(prize)
    
    # Calculate sparsity bonus for items with at least one zero weight
    sparsity_bonus = np.mean(weight == 0)
    
    # Calculate density based on normalized prize and average weight
    density = normalized_prize / np.mean(weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate a weighted utility score combining density and constraint balance
    utility = density * constraint_balance
    
    # Adjust utility with sparsity bonus
    adjusted_utility = utility + sparsity_bonus
    
    # Normalize the adjusted utility scores
    normalized_utility = adjusted_utility / np.sum(adjusted_utility)
    
    # Calculate a diversity score to prevent overrepresentation in any dimension
    diversity_score = np.mean(weight, axis=1)
    
    # Calculate a penalty for items that are overrepresented in any dimension
    overrepresentation_penalty = np.sum(diversity_score > 1)
    
    # Adjust the normalized utility with the overrepresentation penalty
    adjusted_utility -= overrepresentation_penalty
    
    # Normalize the adjusted utility scores
    normalized_utility = adjusted_utility / np.sum(adjusted_utility)
    
    # Introduce a stochastic element to encourage diversity in the solution
    random_factor = np.random.rand(len(normalized_utility))
    normalized_utility += random_factor - random_factor.mean()
    
    # Cap the heuristics scores to ensure they are within [0, 1]
    heuristics = np.clip(normalized_utility, 0, 1)
    
    return heuristics
```
