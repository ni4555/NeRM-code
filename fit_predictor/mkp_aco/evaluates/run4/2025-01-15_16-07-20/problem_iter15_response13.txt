```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to a range between 0 and 1
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Normalize weight to a range between 0 and 1
    weight_normalized = (weight - np.min(weight, axis=0)) / (np.max(weight, axis=0) - np.min(weight, axis=0))
    
    # Calculate sparsity factor, penalizing items with high density
    sparsity_factor = 1 / (1 + np.sum(weight_normalized, axis=1))
    
    # Calculate a dynamic feature that rewards diversity
    diversity = np.mean(weight_normalized, axis=1)
    
    # Combine the normalized prize and sparsity factor with diversity
    heuristic_scores = prize_normalized * sparsity_factor + diversity
    
    # Normalize the heuristic scores to ensure they sum to 1
    heuristic_scores /= np.sum(heuristic_scores)
    
    # Return the heuristics scores
    return heuristic_scores
```
