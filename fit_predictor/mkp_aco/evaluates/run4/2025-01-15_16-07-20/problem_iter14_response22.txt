```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the score based on prize
    score = prize / np.sum(prize)
    
    # Calculate sparsity score by considering the number of dimensions with weight 0
    sparsity_score = np.prod(np.sum(weight, axis=1) > 0)
    
    # Calculate the balance score based on the standard deviation of weights per item
    balance_score = np.exp(-np.std(weight, axis=1))
    
    # Combine the scores into a single heuristic value
    combined_score = score * sparsity_score * balance_score
    
    # Normalize the combined score to ensure all values are positive
    normalized_combined_score = np.maximum(combined_score, 0)
    
    # Adjust the score based on the average weight to favor lighter items
    average_weight = np.mean(weight, axis=1)
    adjusted_score = normalized_combined_score * (1 - average_weight)
    
    # Normalize the adjusted score to focus on balance and relevance
    max_heuristic = np.max(adjusted_score)
    min_heuristic = np.min(adjusted_score)
    normalized_heuristics = (adjusted_score - min_heuristic) / (max_heuristic - min_heuristic)
    
    return normalized_heuristics
```
