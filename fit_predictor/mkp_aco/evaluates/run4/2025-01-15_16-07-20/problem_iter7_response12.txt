```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Normalize the prize values to have a maximum of 1
    normalized_prize = prize / max_prize
    
    # Apply a non-linear transformation to the normalized prize values
    transformed_prize = np.log1p(normalized_prize)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine the transformed prize and constraint balance into a utility score
    utility = transformed_prize * (1 - constraint_balance)
    
    # Dynamically adjust the heuristics based on item properties
    adjusted_utility = utility * (prize / np.sum(prize))
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = max_prize / np.sum(prize)
    sparsity = (adjusted_utility > threshold) * 1.0
    
    # Return the heuristics scores
    return adjusted_utility * sparsity
```
