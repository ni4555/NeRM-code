```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate dimension-specific factors
    dimension_factors = np.prod(weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering density, dimension-specific factors, and constraint balance
    utility = density * dimension_factors * (1 - constraint_balance)
    
    # Normalize utility by the maximum utility value
    normalized_utility = utility / np.max(utility)
    
    # Sparsify by setting utility below a threshold to zero
    sparsity_threshold = 0.1
    sparsity = (normalized_utility > sparsity_threshold) * 1.0
    
    # Return the heuristics scores
    return normalized_utility * sparsity
```
