```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight per dimension
    normalized_prize = prize / np.sum(prize)
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate density based on normalized prize and weight
    density = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(normalized_weight, axis=1)
    
    # Calculate the contribution of each item based on the product of its density and sparsity
    contribution = density * sparsity
    
    # Normalize the contribution by the sum of all contributions
    normalized_contribution = contribution / np.sum(contribution)
    
    # Apply a threshold to filter out less promising items
    threshold = np.percentile(normalized_contribution, 70)  # 70th percentile as a threshold
    sparsified_score = np.where(normalized_contribution > threshold, normalized_contribution, 0)
    
    return sparsified_score
```
