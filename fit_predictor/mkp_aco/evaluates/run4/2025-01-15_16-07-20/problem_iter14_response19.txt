```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate density based on prize and average weight
    density = prize / np.mean(weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate sparsity bonus for items with zero weight in any dimension
    sparsity_bonus = np.sum(prize[weight.sum(axis=1) == 0]) / max_prize
    
    # Calculate utility considering density, constraint balance, and sparsity bonus
    utility = density * (1 - constraint_balance) + sparsity_bonus
    
    # Calculate overrepresentation penalty for items that are overrepresented in any dimension
    overrepresentation_penalty = np.sum((np.sum(weight, axis=1) > 1) * np.max(weight, axis=1))
    
    # Adjust utility with overrepresentation penalty
    adjusted_utility = utility - overrepresentation_penalty
    
    # Normalize the adjusted utility scores
    normalized_utility = adjusted_utility / np.sum(adjusted_utility)
    
    # Return the heuristics scores
    return normalized_utility
```
