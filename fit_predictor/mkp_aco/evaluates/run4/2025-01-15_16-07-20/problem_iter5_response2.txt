```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing by the maximum prize
    normalized_prize = prize / np.max(prize)
    
    # Calculate average weight for each dimension
    average_weight = np.mean(weight, axis=1)
    
    # Calculate normalized density based on average weight
    normalized_density = normalized_prize / average_weight
    
    # Calculate normalized constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine density and balance into a weighted sum
    weighted_sum = normalized_density * 0.5 + (1 - constraint_balance) * 0.5
    
    # Apply a sparsification factor based on a threshold
    sparsity_factor = np.where(weighted_sum > 0.9, 1.0, 0.0)
    
    # Return the heuristics scores
    return weighted_sum * sparsity_factor
```
