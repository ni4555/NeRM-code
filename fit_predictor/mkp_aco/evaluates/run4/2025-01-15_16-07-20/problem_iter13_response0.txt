```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the average prize to normalize
    average_prize = np.mean(prize)
    
    # Calculate the sparsity score
    sparsity_score = np.sum(1 - weight.sum(axis=1) > 0) / prize.size
    
    # Calculate the density based on normalized prize
    normalized_density = prize / average_prize
    
    # Calculate the balance score
    balance_score = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Combine factors for a utility score
    utility_score = sparsity_score * normalized_density * balance_score
    
    # Normalize the utility scores to get heuristics
    heuristics = utility_score / np.sum(utility_score)
    
    # Apply a non-linear transformation to enhance the effect of high utility
    heuristics = np.log(1 + heuristics)
    
    # Return the heuristics scores
    return heuristics
```
