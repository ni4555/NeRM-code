```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the sum of prizes for items with zero weight in each dimension
    non_zero_weight_sum = np.sum(prize[weight.sum(axis=1) > 0])
    sparsity_bonus = (np.sum(prize) - non_zero_weight_sum) / max_prize
    
    # Calculate density based on prize and average weight
    density = prize / np.mean(weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Adjust utility with sparsity bonus
    adjusted_utility = utility + sparsity_bonus
    
    # Integrate domain insights by considering the inverse of the weight as a factor
    inverse_weight_factor = np.sum(weight**2, axis=1) / (np.sum(weight, axis=1) + 1e-6)
    
    # Combine factors to determine the final heuristic score
    final_score = adjusted_utility * inverse_weight_factor
    
    # Normalize the final scores
    final_score_normalized = final_score / np.max(final_score)
    
    # Sparsify the heuristics by setting low-value elements to zero
    sparsity_threshold = np.percentile(final_score_normalized, 25)
    final_score_normalized[final_score_normalized < sparsity_threshold] = 0
    
    # Return the heuristics scores
    return final_score_normalized
```
