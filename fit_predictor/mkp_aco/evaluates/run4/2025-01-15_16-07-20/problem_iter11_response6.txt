```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight in each dimension
    prize_to_weight_ratio = prize / np.mean(weight, axis=1)
    
    # Calculate the sum of weights in each dimension
    total_weight_per_dimension = np.sum(weight, axis=0)
    
    # Calculate the sum of prizes for items with zero weight in each dimension
    non_zero_weight_sum = np.sum(prize[weight.sum(axis=1) > 0])
    
    # Calculate sparsity bonus
    sparsity_bonus = (np.sum(prize) - non_zero_weight_sum) / np.sum(prize)
    
    # Calculate the number of zero weight items
    zero_weight_count = np.sum(weight.sum(axis=1) == 0)
    
    # Calculate the average weight per item
    average_weight_per_item = np.mean(weight.sum(axis=1))
    
    # Calculate the utility score based on the ratio and bonus
    utility = prize_to_weight_ratio + sparsity_bonus
    
    # Adjust the utility score by penalizing high weight items and rewarding sparsity
    utility -= (total_weight_per_dimension - average_weight_per_item) * (1 - zero_weight_count / n)
    
    # Normalize the utility scores
    utility_normalized = utility / np.max(utility)
    
    # Return the heuristics scores
    return utility_normalized
```
