```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Calculate the remaining capacity for each item
    remaining_capacity = 1 - total_weight
    
    # Calculate the density based on prize and remaining capacity
    density = prize / remaining_capacity
    
    # Non-linear transformation to enhance the impact of high-value items
    transformed_prize = np.log(1 + prize)
    
    # Dimension-specific factors based on the standard deviation of each dimension
    dimension_factors = np.exp(-np.std(weight, axis=1))
    
    # Factor to account for sparsity
    sparsity_factor = np.sum(1 - weight, axis=1) / np.sum(np.sum(1 - weight, axis=1))
    
    # Combining all factors to create the heuristic
    heuristics = transformed_prize * (density + sparsity_factor * dimension_factors)
    
    return heuristics
```
