```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Normalize the prize values
    normalized_prize = prize / max_prize
    
    # Calculate the average weight for each dimension
    average_weight = np.mean(weight, axis=0)
    
    # Calculate the deviation from average weight for each item
    deviation = np.abs(weight - average_weight)
    
    # Calculate a score based on the inverse of the deviation
    deviation_score = 1 / (1 + deviation)
    
    # Calculate the sparsity bonus
    sparsity_bonus = np.mean(deviation_score, axis=1)
    
    # Calculate the constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine the scores into a utility score
    utility = normalized_prize * deviation_score * (1 - constraint_balance)
    
    # Adjust the utility with the sparsity bonus
    adjusted_utility = utility + sparsity_bonus
    
    # Normalize the adjusted utility scores
    normalized_utility = adjusted_utility / np.sum(adjusted_utility)
    
    # Return the heuristics scores
    return normalized_utility
```
