```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    density = prize / average_weight
    sparsity = (density > max_prize / np.sum(weight)) * 1.0
    
    # Calculate a factor that emphasizes high-value items with lower average weight
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    value_factor = (value_to_weight_ratio > max_prize / np.sum(prize)) * value_to_weight_ratio
    
    # Calculate a factor that emphasizes sparsity
    sparsity_factor = (1 - average_weight / np.sum(weight)) * sparsity
    
    # Combine factors to create a heuristic
    heuristics = value_factor + sparsity_factor
    heuristics = heuristics / np.sum(heuristics)  # Normalize to sum to 1
    
    return heuristics
```
