```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize values
    normalized_prize = prize / np.sum(prize)
    
    # Calculate density based on average weight
    density = prize / np.sum(weight, axis=1)
    
    # Calculate complexity based on squared weight
    complexity = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate sparsity based on the number of dimensions
    sparsity = np.sum(weight, axis=1) / weight.shape[1]
    
    # Calculate dimension-specific score
    dimension_specific = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Combine all metrics into a single score
    combined_score = (normalized_prize + density - complexity) * (1 - sparsity) * dimension_specific
    
    # Normalize the combined score to ensure it is between 0 and 1
    max_combined_score = np.max(combined_score)
    min_combined_score = np.min(combined_score)
    normalized_combined_score = (combined_score - min_combined_score) / (max_combined_score - min_combined_score)
    
    # Sparsify the score by setting low-scoring items to zero
    sparsified_combined_score = np.where(normalized_combined_score > 0.5, normalized_combined_score, 0)
    
    return sparsified_combined_score
```
