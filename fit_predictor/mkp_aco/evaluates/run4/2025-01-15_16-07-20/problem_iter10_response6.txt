```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the average density across dimensions for each item
    density = np.sum(prize / weight, axis=1)
    
    # Calculate the sparsity score based on the number of non-zero dimensions
    sparsity_score = np.sum(weight > 0, axis=1)
    
    # Calculate the selective weighting score based on the standard deviation
    selective_weighting_score = np.std(weight, axis=1)
    
    # Combine scores using a weighted sum approach
    heuristic_scores = (density * 0.5) + (sparsity_score * 0.3) + (selective_weighting_score * 0.2)
    
    # Normalize scores to ensure all values are positive and sum to 1
    normalized_heuristics = heuristic_scores / np.sum(heuristic_scores)
    
    return normalized_heuristics
```
