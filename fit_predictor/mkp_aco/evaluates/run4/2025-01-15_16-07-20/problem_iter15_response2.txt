```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate density based on prize and average weight
    density = prize / np.mean(weight, axis=1)
    
    # Calculate sparsity score by penalizing items with high weights
    sparsity_score = 1 / (1 + np.sum(weight, axis=1))
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine density, sparsity, and constraint balance to form utility
    utility = density * sparsity_score * (1 - constraint_balance)
    
    # Normalize the utility scores
    normalized_utility = utility / np.sum(utility)
    
    # Return the heuristics scores
    return normalized_utility
```
