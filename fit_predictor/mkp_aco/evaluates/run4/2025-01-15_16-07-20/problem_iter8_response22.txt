```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item as a fraction of the total prize per unit weight
    density = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity by considering the proportion of each item that would remain if selected
    sparsity = np.prod(1 - weight, axis=1)
    
    # Incorporate additional features: balance across dimensions, inverse of the maximum weight,
    # and a penalty for high sparsity
    balance_feature = np.sum(weight, axis=1) / n
    weight_feature = 1 / np.sum(weight, axis=1)
    sparsity_penalty = 1 - sparsity
    
    # Combine the features into a single heuristic score
    heuristic_score = density * sparsity * balance_feature * weight_feature * sparsity_penalty
    
    # Normalize the heuristic scores to ensure they sum to 1
    normalized_scores = heuristic_score / np.sum(heuristic_score)
    
    # Return the normalized scores
    return normalized_scores
```
