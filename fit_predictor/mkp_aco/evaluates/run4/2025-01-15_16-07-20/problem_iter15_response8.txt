```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize values to a 0-1 scale
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Normalize weight values to a 0-1 scale
    normalized_weight = (weight - np.min(weight)) / (np.max(weight) - np.min(weight))
    
    # Calculate a sparsity factor for items with zero weight in each dimension
    sparsity_factor = 1 / (1 + np.sum(weight, axis=1))
    
    # Calculate a diversity factor based on the distribution of weights across dimensions
    diversity_factor = np.sum(weight**2, axis=1) / np.sum(weight**2)
    
    # Calculate a balance factor for each item considering the variance of its weights across dimensions
    balance_factor = 1 / (1 + np.std(weight, axis=1))
    
    # Combine factors to create a heuristic score for each item
    heuristic_score = normalized_prize * sparsity_factor * diversity_factor * balance_factor
    
    # Normalize the heuristic scores to sum to 1
    heuristic_score /= np.sum(heuristic_score)
    
    # Return the heuristics scores
    return heuristic_score
```
