```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize for each item
    max_prize = np.max(prize)
    
    # Calculate the average prize per unit weight for each item
    average_prize_per_weight = prize / np.sum(weight, axis=1)
    
    # Calculate the constraint violation ratio for each item
    constraint_violation_ratio = np.sum(weight, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate the heuristic score based on the average prize per unit weight
    heuristic_score = average_prize_per_weight
    
    # Adjust the heuristic score to account for constraint violation
    heuristic_score = heuristic_score * (1 - constraint_violation_ratio)
    
    # Normalize the heuristic scores to be between 0 and 1
    heuristic_normalized = (heuristic_score - np.min(heuristic_score)) / (np.max(heuristic_score) - np.min(heuristic_score))
    
    return heuristic_normalized
```
