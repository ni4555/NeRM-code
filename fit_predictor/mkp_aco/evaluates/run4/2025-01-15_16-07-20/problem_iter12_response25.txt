```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the score based on the ratio of prize to the sum of weights per item
    score = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity score by considering the number of non-zero dimensions per item
    sparsity_score = 1 / np.sum(weight > 0, axis=1)
    
    # Combine both scores using a weighted sum where the balance between quality and sparsity is optimized
    combined_score = score * 0.6 + sparsity_score * 0.4
    
    # Normalize the combined score to ensure all values are positive
    normalized_combined_score = np.maximum(combined_score, 0)
    
    # Apply a threshold to filter out less promising items
    threshold = np.percentile(normalized_combined_score, 25)
    heuristics = normalized_combined_score * (normalized_combined_score > threshold)
    
    # Introduce a dynamic feature that penalizes items with high average normalized weight
    dynamic_feature = 1 / (1 + np.mean(weight, axis=1))
    
    # Adjust the heuristics based on the dynamic feature
    heuristics *= dynamic_feature
    
    # Return the heuristics scores
    return heuristics
```
