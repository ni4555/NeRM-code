```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    normalized_prize = prize / np.sum(prize)
    normalized_weight = np.sum(weight, axis=1) / np.sum(weight, axis=1)
    
    # Use a simple heuristic that considers the ratio of prize to weight
    heuristic_value = normalized_prize * normalized_weight
    
    # Incorporate diversity by considering the variance of weights
    variance = np.var(weight, axis=1)
    diversity = 1 / (variance + 1e-6)  # Adding a small constant to avoid division by zero
    
    # Incorporate complexity by using a quadratic term in the weights
    complexity = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # The final heuristic is a combination of prize to weight ratio, diversity, and complexity
    heuristics = heuristic_value * diversity * complexity
    
    return heuristics
```
