```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate density based on total prize relative to total weight in each dimension
    density = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity as a function of how many dimensions the item is not fully utilized
    sparsity = np.sum((weight == 1), axis=1) / weight.shape[1]
    
    # Use balance by considering items that have the highest density but also are sparsely used across dimensions
    balance = density * sparsity
    
    # Adjust balance by removing the items that have zero density (no benefit in picking them)
    adjusted_balance = balance[balance > 0]
    
    # Calculate the maximum balance found
    max_balance = np.max(adjusted_balance)
    
    # Normalize the balance by the maximum found, but do not include items with zero density
    return (balance[balanced] / max_balance) * (adjusted_balance > 0)
```
