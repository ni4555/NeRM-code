```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize based on the maximum prize
    normalized_prize = prize / np.max(prize)
    
    # Calculate a density score based on normalized prize and average weight
    density = normalized_prize / np.mean(weight, axis=1)
    
    # Calculate a sparsity bonus for items with at least one zero weight
    sparsity_bonus = np.sum(weight == 0) / weight.shape[0]
    
    # Calculate the balance score for each item
    balance_score = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate a diversity score to prevent overrepresentation in any dimension
    diversity_score = np.mean(weight, axis=1)
    
    # Calculate a penalty for items that are overrepresented in any dimension
    overrepresentation_penalty = np.sum(diversity_score > 1)
    
    # Combine the different signals into a final score
    final_score = density * balance_score * (1 - overrepresentation_penalty)
    
    # Adjust the final score with the sparsity bonus
    final_score += sparsity_bonus
    
    # Normalize the final scores to sum to 1
    normalized_final_score = final_score / np.sum(final_score)
    
    # Return the heuristics scores
    return normalized_final_score
```
