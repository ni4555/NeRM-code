```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize vector
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Normalize the weight matrix to sum to 1 in each dimension
    normalized_weight = weight / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate the Euclidean distance of each item from the origin
    distance_from_origin = np.sqrt(np.sum(normalized_weight**2, axis=1))
    
    # Calculate the heuristic value based on a combination of normalized prize and distance
    heuristic_value = prize_normalized * (1 - distance_from_origin)
    
    # Normalize the heuristic values to be between 0 and 1
    heuristic_normalized = (heuristic_value - np.min(heuristic_value)) / (np.max(heuristic_value) - np.min(heuristic_value))
    
    return heuristic_normalized
```
