```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the density of each item
    density = prize / np.mean(weight, axis=1)
    
    # Calculate the sparsity score for each item
    sparsity_score = np.sum(weight.sum(axis=1) == 0) / len(weight)
    
    # Calculate the balance score considering the second-highest prize
    balance_score = np.argsort(prize)[::-1][1] / max_prize
    
    # Combine the scores
    combined_score = density * (1 - sparsity_score) * balance_score
    
    # Normalize the combined score
    combined_score_normalized = combined_score / np.max(combined_score)
    
    # Return the heuristics scores
    return combined_score_normalized
```
