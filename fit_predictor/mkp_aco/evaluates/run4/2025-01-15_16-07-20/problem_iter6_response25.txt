```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    density = prize / average_weight
    sparsity = (density > max_prize / np.sum(weight)) * 1.0
    # Refine density measure by considering the maximum prize and average weight
    refined_density = density * (prize / max_prize)
    # Balance sparsity by considering the proportion of each item's prize to the total prize
    prize_proportion = prize / np.sum(prize)
    bonus = prize_proportion * sparsity
    # Consider overall prize distribution by adding the bonus to the utility score
    utility_score = refined_density + bonus
    return utility_score
```
