```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristics array with zeros
    heuristics = np.zeros_like(prize)
    
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Calculate dimension-specific factors based on the sparsity of weights
    dimension_factors = np.sum(weight, axis=1) / n
    
    # Normalize the utility by the dimension-specific factors to avoid overfitting
    normalized_utility = utility / dimension_factors
    
    # Combine multiple factors to get the final heuristics
    heuristics = normalized_utility * (1 - constraint_balance)
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = max_prize / np.sum(prize)
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
