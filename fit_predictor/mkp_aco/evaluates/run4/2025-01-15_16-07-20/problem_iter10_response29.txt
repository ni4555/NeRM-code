```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate sparsity by considering the number of dimensions with non-zero weight
    sparsity = np.sum(weight != 0, axis=1) / weight.shape[1]
    
    # Calculate utility considering both density and sparsity
    utility = density * (1 - sparsity)
    
    # Normalize the utility scores
    normalized_utility = utility / np.sum(utility)
    
    # Leverage adaptability by considering the remaining space in each dimension
    remaining_space = 1 - np.sum(weight, axis=1)
    adaptability = remaining_space * normalized_utility
    
    # Combine the adaptability with the normalized utility
    combined_heuristics = adaptability * normalized_utility
    
    # Normalize the combined heuristics to ensure all values are positive and sum to 1
    combined_heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return combined_heuristics
```
