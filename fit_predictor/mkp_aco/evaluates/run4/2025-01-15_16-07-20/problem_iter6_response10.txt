```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the score based on prize and average weight per dimension
    score = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity score by considering the number of dimensions with weight 0
    sparsity_score = np.sum(1 - weight, axis=1)
    
    # Calculate a diversity score based on the variance of the weights across dimensions
    diversity_score = np.var(weight, axis=1)
    
    # Combine scores using a weighted average
    combined_score = score * 0.5 + sparsity_score * 0.3 + diversity_score * 0.2
    
    # Normalize the combined score to ensure all values are positive
    normalized_combined_score = np.maximum(combined_score, 0)
    
    # Apply a threshold to filter out less promising items
    threshold = np.percentile(normalized_combined_score, 90)  # 90th percentile as a threshold
    heuristics = normalized_combined_score * (normalized_combined_score > threshold)
    
    return heuristics
```
