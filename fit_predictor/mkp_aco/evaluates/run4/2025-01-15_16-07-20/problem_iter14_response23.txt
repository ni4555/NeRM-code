```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the score based on prize and average weight per dimension
    score = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity score by considering the number of non-zero dimensions per item
    sparsity_score = 1 / np.sum(weight > 0, axis=1)
    
    # Combine both scores
    combined_score = score * sparsity_score
    
    # Normalize the combined score to ensure all values are positive
    normalized_combined_score = np.maximum(combined_score, 0)
    
    # Calculate the average weight per dimension to account for the overall weight distribution
    average_weight = np.mean(weight, axis=1)
    
    # Adjust the score based on the average weight to favor lighter items
    adjusted_score = normalized_combined_score * (1 - average_weight)
    
    # Calculate the standard deviation of weights per item to consider variability in weights
    std_dev = np.std(weight, axis=1)
    
    # Adjust the score based on the standard deviation to consider items with more even weight distribution
    adjusted_score *= (1 + std_dev)
    
    # Normalize the adjusted score to ensure all values are positive
    normalized_adjusted_score = np.maximum(adjusted_score, 0)
    
    # Apply a threshold to filter out less promising items
    threshold = np.percentile(normalized_adjusted_score, 25)
    heuristics = normalized_adjusted_score * (normalized_adjusted_score > threshold)
    
    # Normalize the heuristics to focus on balance and relevance
    max_heuristic = np.max(heuristics)
    min_heuristic = np.min(heuristics)
    normalized_heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    return normalized_heuristics
```
