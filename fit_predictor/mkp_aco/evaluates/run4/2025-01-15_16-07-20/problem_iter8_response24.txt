```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the score based on prize and average weight per dimension
    score = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity score by considering the number of dimensions with weight 0
    sparsity_score = np.sum(weight == 0, axis=1)
    
    # Apply a non-linear transformation to both scores to highlight important features
    transformed_score = np.log(score + 1)  # Adding 1 to avoid log(0)
    transformed_sparsity_score = np.log(sparsity_score + 1)  # Adding 1 to avoid log(0)
    
    # Combine both transformed scores
    combined_score = transformed_score * transformed_sparsity_score
    
    # Normalize the combined score to ensure all values are positive
    normalized_combined_score = np.maximum(combined_score, 0)
    
    # Apply a threshold to filter out less promising items
    threshold = np.percentile(normalized_combined_score, 25)
    heuristics = normalized_combined_score * (normalized_combined_score > threshold)
    
    return heuristics
```
