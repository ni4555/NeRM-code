```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize for each item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the total weight per item considering all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Calculate the ratio of prize to total weight
    prize_to_weight_ratio = normalized_prize / total_weight
    
    # Calculate the sparsity of weight in terms of dimensions
    sparsity = 1 - np.prod(1 - weight, axis=1)
    
    # Combine the prize-to-weight ratio with sparsity
    combined_score = prize_to_weight_ratio * sparsity
    
    # Apply a threshold to filter out less promising items
    threshold = np.percentile(combined_score, 90)
    filtered_score = np.where(combined_score >= threshold, combined_score, 0)
    
    return filtered_score
```
