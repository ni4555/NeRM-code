```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    normalized_prize = prize / np.sum(prize)
    normalized_weight = np.sum(weight, axis=1) / np.sum(weight, axis=1)
    
    heuristic_value = normalized_prize * normalized_weight
    # Calculate variance to incorporate diversity
    variance = np.var(weight, axis=1)
    diversity = 1 / (variance + 1e-6)  # Adding a small constant to avoid division by zero
    
    # Incorporating complexity with quadratic terms
    complexity = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Adjusting heuristic value to consider normalized influence, diversity, and complexity
    heuristics = heuristic_value * diversity * complexity
    
    return heuristics
```
