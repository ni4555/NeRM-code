```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the score based on prize and average weight per dimension
    score = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity score by considering the number of dimensions with weight 0
    sparsity_score = np.prod(np.sum(weight, axis=1) > 0)
    
    # Calculate a selective weighting score based on the proportion of weight per dimension
    selective_weighting_score = np.mean(weight, axis=1) / np.sum(weight, axis=1)
    
    # Combine the scores into a final heuristic value
    heuristics = score * sparsity_score * selective_weighting_score
    
    # Normalize the heuristic values to ensure all values are positive
    normalized_heuristics = np.maximum(heuristics, 0)
    
    return normalized_heuristics
```
