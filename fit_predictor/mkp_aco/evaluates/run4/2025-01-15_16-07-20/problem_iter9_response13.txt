```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Normalize the utility scores
    utility_normalized = utility / np.max(utility)
    
    # Calculate sparsity based on the ratio of normalized utility to max normalized utility
    sparsity = (utility_normalized > 0.5) * 1.0
    
    # Adapt dynamically by combining features
    combined_features = utility_normalized * sparsity
    
    # Return the heuristics scores
    return combined_features
```
