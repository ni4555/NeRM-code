```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize density
    normalized_density = prize / np.max(prize)
    
    # Calculate the average weight across all dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Introduce a penalty for items that are too dense, as they might cause an early overflow
    penalty_for_density = 1 / (normalized_density + 0.0001)
    
    # Introduce a bonus for sparsity, especially for items that are light in all dimensions
    bonus_for_sparsity = np.prod((1 - average_weight) / (np.max(1 - average_weight) + 0.0001), axis=1)
    
    # Normalize weights based on the dimension they span
    weight_normalized = weight / np.max(weight, axis=1, keepdims=True)
    
    # Calculate the constraint balance considering the normalized weights
    constraint_balance = np.sum(weight_normalized**2, axis=1) / np.sum(weight_normalized, axis=1)**2
    
    # Combine the factors to calculate a final heuristic score
    heuristic_score = penalty_for_density * bonus_for_sparsity * constraint_balance
    
    # Normalize the heuristic scores to sum to 1
    utility_normalized = heuristic_score / np.sum(heuristic_score)
    
    return utility_normalized
```
