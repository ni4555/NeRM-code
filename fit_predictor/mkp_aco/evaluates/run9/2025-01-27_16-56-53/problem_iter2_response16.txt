```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Initialize adaptive parameters
    exploration_rate = 0.5
    exploitation_rate = 0.5
    
    # Initialize a random seed for reproducibility
    np.random.seed(42)
    
    # Calculate heuristic based on prize-to-weight ratio, weight sparsity, and adaptive balancing factor
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        weight_sparsity = 1 - (np.count_nonzero(weight[i]) / m)
        
        # Calculate the adaptive balancing factor for exploration and exploitation
        balancing_factor = exploration_rate * (1 - weight_sparsity) + exploitation_rate * weight_sparsity
        
        # Compute heuristic value
        heuristic[i] = (total_prize / total_weight) * balancing_factor
    
    # Update exploration and exploitation rates based on the heuristic values
    sorted_indices = np.argsort(heuristic)[::-1]
    exploration_rate = 0.5 + (np.mean(heuristic[sorted_indices[:int(n * 0.1)]] - np.mean(heuristic)) / np.mean(heuristic))
    exploitation_rate = 0.5 - (np.mean(heuristic[sorted_indices[:int(n * 0.1)]] - np.mean(heuristic)) / np.mean(heuristic))
    
    # Apply the updated exploration and exploitation rates
    for i in range(n):
        heuristic[i] *= exploration_rate * (1 - (np.sum(weight[i]) / m)) + exploitation_rate * (np.sum(weight[i]) / m)
    
    # Sparsify heuristics by setting values below a certain threshold to zero
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    return heuristic
```
