```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + weight[i].sum())
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] *= value_to_weight_ratio * weight_sparsity
    
    # Refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Introduce a randomness factor to prevent local optima
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    # Further adjust the heuristic to favor balanced item selection across dimensions
    balance_factor = np.zeros(n)
    for i in range(n):
        max_weight = np.max(weight[i])
        balance_factor[i] = np.mean(weight[i] == max_weight)
    heuristic *= balance_factor
    
    # Set low-value items and those with high total weight to zero
    threshold = heuristic.max() / 10
    heuristic[heuristic < threshold] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
