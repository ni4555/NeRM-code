```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on normalized item values
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight
    
    # Balance sparsity by penalizing items with high weight
    for i in range(n):
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] *= weight_sparsity
    
    # Encourage diversity with dimension-specific factors
    for i in range(n):
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.zeros(n)
    for i in range(n):
        exploitation_factor[i] = 1 / (1 + total_weight)
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Prune suboptimal solutions by setting low-value items to zero
    heuristic[heuristic < heuristic.max() / 10] = 0
    
    return adaptive_heuristic
```
