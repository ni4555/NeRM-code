```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Vectorized calculation of total prize per item
    total_prize = prize * weight.sum(axis=1)
    
    # Normalize by weight to get a per-item heuristic and penalize high weight
    heuristic = total_prize / weight.sum(axis=1)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    value_to_weight_ratio = prize / weight.sum(axis=1)
    weight_sparsity = 1 - (weight.sum(axis=1) / m)
    heuristic *= value_to_weight_ratio * weight_sparsity
    
    # Refine heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < weight[i].max())
        heuristic[i] *= diversity_factor / m
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploitation_factor = 1 / (1 + weight.sum(axis=1))
    exploration_factor = np.random.rand(n)
    adaptive_heuristic = exploitation_factor * heuristic + exploration_factor
    
    # Introduce randomness to enhance diversity
    adaptive_heuristic += np.random.rand(n)
    
    # Normalize and penalize outliers
    heuristic = np.clip(adaptive_heuristic, 0.1, 0.9)
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
