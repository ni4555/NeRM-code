```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value to weight ratio and normalized by dimension
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight
    
    # Normalize the heuristic to ensure that all values are within a consistent range
    min_heuristic = np.min(heuristic)
    max_heuristic = np.max(heuristic)
    heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Introduce sparsity by setting the heuristic to zero for low-value or high-weight items
    value_threshold = np.mean(prize) * 0.5
    weight_threshold = np.mean(weight) * 0.5
    heuristic[prize < value_threshold] = 0
    heuristic[weight.sum(axis=1) > weight_threshold] = 0
    
    # Use diversity factor to encourage non-overlapping item selections
    diversity_factor = np.zeros(n)
    for i in range(n):
        diversity_count = 0
        for j in range(n):
            if np.count_nonzero(weight[i] == weight[j]) == 0:
                diversity_count += 1
        diversity_factor[i] = diversity_count / n
    heuristic *= diversity_factor
    
    # Adaptive exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1))
    adaptive_heuristic = exploration_factor * heuristic + exploitation_factor
    
    return adaptive_heuristic
```
