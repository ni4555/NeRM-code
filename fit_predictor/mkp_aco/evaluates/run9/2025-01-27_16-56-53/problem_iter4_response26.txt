```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        item_heuristic = total_prize / total_weight if total_weight != 0 else 0
        
        # Incorporate a sparsity factor that penalizes items with higher weight
        sparsity_factor = (1 - (total_weight / m))
        
        # Combine the heuristic with the sparsity factor
        heuristic[i] = item_heuristic * sparsity_factor
    
    # Incorporate a diversity factor that favors items with a more balanced weight distribution across dimensions
    for i in range(n):
        diversity_factor = 1
        max_weight_per_dimension = np.max(weight[i])
        for j in range(m):
            diversity_factor *= (max_weight_per_dimension - weight[i, j]) / max_weight_per_dimension
        heuristic[i] *= diversity_factor
    
    # Further refine the heuristic to favor high-value to weight ratios
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        heuristic[i] *= value_to_weight_ratio
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    # Introduce a randomness factor to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    heuristic = heuristic * random_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
