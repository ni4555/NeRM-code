```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.dot(prize[i], weight[i, :])
        total_weight = weight[i, :].sum()
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = (1 - (total_weight / m)) ** 2  # Squaring for a stronger penalty
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        # Use a diversity factor that increases with the number of dimensions
        # that are not at the maximum weight for the item
        diversity_factor = np.sum(weight[i, :] < weight[i].max())
        heuristic[i] *= diversity_factor / m
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + (weight.sum(axis=0) / n)) ** 2  # Squaring for stronger effect
    adaptive_heuristic = exploration_factor * heuristic + exploitation_factor
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < adaptive_heuristic.max() / 10] = 0
    heuristic[weight.sum(axis=1) > 0.8 * m] = 0
    
    return adaptive_heuristic
```
