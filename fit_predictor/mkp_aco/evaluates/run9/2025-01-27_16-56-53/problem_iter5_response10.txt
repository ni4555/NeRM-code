```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio, sparsity, and exploration-exploitation factor
    for i in range(n):
        total_prize = 0
        total_weight = 0
        value_to_weight_ratio = 0
        weight_sparsity = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        value_to_weight_ratio = prize[i] / total_weight if total_weight > 0 else 0
        weight_sparsity = 1 - (total_weight / m)
        
        # Balance exploration and exploitation with an adaptive factor
        exploration_exploitation_factor = 1 / (1 + np.exp((heuristic[i] - heuristic.max()) / 0.1))
        
        # Normalize the heuristic to account for all factors
        heuristic[i] = (value_to_weight_ratio * weight_sparsity * exploration_exploitation_factor) / (1 + weight[i].sum())
    
    # Adjust thresholds for dynamic selection
    heuristic[heuristic < heuristic.mean() / 2] = 0
    
    # Introduce randomness to prevent convergence to local optima
    np.random.seed(42)  # For reproducibility
    random_noise = np.random.normal(0, 0.05, size=n)
    heuristic += random_noise
    
    return heuristic
```
