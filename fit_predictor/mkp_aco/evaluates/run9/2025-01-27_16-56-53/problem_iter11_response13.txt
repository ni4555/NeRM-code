```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    # High-value to weight ratio and weight sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        # Use a diversity factor that increases with the number of dimensions
        # that are not at the maximum weight for the item
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < np.max(weight[i]):
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.zeros(n)
    for i in range(n):
        exploitation_factor[i] = 1 / (1 + total_weight)
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Introduce a mechanism to avoid local optima by penalizing similar items
    # Items are similar if they have a high degree of overlap in their weight vectors
    for i in range(n):
        similarity_penalty = 0
        for j in range(n):
            if i != j:
                similarity = np.dot(weight[i], weight[j]) / (np.linalg.norm(weight[i]) * np.linalg.norm(weight[j]))
                similarity_penalty += similarity
        heuristic[i] *= (1 - (similarity_penalty / (n - 1)))
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < np.percentile(heuristic, 90)] = 0
    heuristic[total_weight > m * 0.8] = 0
    
    return adaptive_heuristic
```
