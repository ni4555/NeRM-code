```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = sum(prize[i] * w for w in weight[i])
        total_weight = sum(weight[i])
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity and value-to-weight ratio
    for i in range(n):
        heuristic[i] *= prize[i] / total_weight
    
    # Refine heuristic to favor diversity
    for i in range(n):
        diversity_factor = sum(w < weight[i].max() for w in weight[i])
        heuristic[i] *= diversity_factor / m
    
    # Introduce adaptive exploration strategy
    for i in range(n):
        exploitation_factor = 1 / (1 + total_weight)
        heuristic[i] *= exploitation_factor + np.random.rand() * (1 - exploitation_factor)
    
    # Apply mutation to enhance diversity
    mutation_strength = np.random.rand()
    heuristic *= (1 - mutation_strength) + mutation_strength * np.random.rand(n)
    
    # Normalize and penalize outliers
    heuristic = np.clip(heuristic, 0.1, 0.9)
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
