```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Initialize adaptive parameters
    exploration_rate = 0.1
    sparsity_threshold = 0.5
    
    # Calculate heuristic values
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        weight_sparsity = (1 - np.count_nonzero(weight[i]) / m)
        
        # Normalize prize-to-weight ratio
        prize_to_weight_ratio = total_prize / total_weight if total_weight != 0 else 0
        
        # Combine prize-to-weight ratio and sparsity to create a heuristic
        heuristic[i] = prize_to_weight_ratio * weight_sparsity
        
        # Adaptive exploration based on a random factor
        exploration_factor = np.random.rand() * exploration_rate
        
        # Adjust heuristic based on exploration and sparsity
        heuristic[i] *= (1 - exploration_factor)
    
    # Normalize heuristics to ensure they are within a reasonable range
    heuristic /= np.max(heuristic)
    
    # Sparsify heuristics based on a sparsity threshold
    heuristic[heuristic < sparsity_threshold] = 0
    
    return heuristic
```
