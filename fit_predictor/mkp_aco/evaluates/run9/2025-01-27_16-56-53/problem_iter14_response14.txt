```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on multiple factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        value_to_weight_ratio = total_prize / total_weight if total_weight > 0 else 0
        
        # Incorporate sparsity by penalizing low-value or high-weight items
        weight_sparsity = 1 - (total_weight / m)
        
        # Refine the heuristic based on the value-to-weight ratio and sparsity
        heuristic[i] = weight_sparsity * value_to_weight_ratio
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    # Use a temperature-based mechanism to adjust the heuristic
    temperature = np.exp(-np.sum(weight, axis=1) / m)
    heuristic *= temperature
    
    # Adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = 1 / (1 + np.sum(heuristic))
    exploitation_factor = np.exp(-heuristic)
    adaptive_heuristic = exploration_factor * exploitation_factor
    
    # Mutation to encourage diversity
    mutation_factor = np.random.rand(n)
    mutation_factor = mutation_factor / mutation_factor.sum() * np.exp(-adaptive_heuristic / adaptive_heuristic.sum())
    heuristic *= mutation_factor
    
    # Prune suboptimal solutions by setting low-value or high-weight items to zero
    low_value_threshold = np.percentile(heuristic, 25)
    high_weight_threshold = np.percentile(weight.sum(axis=1), 75)
    heuristic[heuristic < low_value_threshold] = 0
    heuristic[weight.sum(axis=1) > high_weight_threshold] = 0
    
    return heuristic
```
