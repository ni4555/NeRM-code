```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on the weighted sum of prizes and weights
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = total_prize / total_weight if total_weight != 0 else 0
    
    # Incorporate sparsity by penalizing items with high weight relative to their prize
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Adaptive mechanism to prioritize valuable subsets
    # Increase heuristic values for items with high relative value
    valuable_index = np.argsort(heuristic)[::-1]
    heuristic = np.zeros(n)
    for idx in valuable_index:
        heuristic[idx] = 1 / (1 + heuristic[idx])
    
    # Further adjust heuristics to prevent local optima
    # Introduce a randomness factor to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    heuristic = heuristic * random_factor
    
    # Refine metrics, balance penalties, and consider diversity
    # Introduce a diversity factor based on the number of unique weights
    diversity_factor = np.ones(n)
    for i in range(n):
        unique_weights = np.unique(weight[i])
        diversity_factor[i] = len(unique_weights)
    heuristic = heuristic * diversity_factor
    
    # Balance the heuristic values to avoid dominance of any particular item
    balanced_heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    return balanced_heuristic
```
