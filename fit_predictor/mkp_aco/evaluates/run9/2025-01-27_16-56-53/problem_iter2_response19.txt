```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Initialize adaptive parameters for balancing exploration and exploitation
    epsilon = 0.5
    sparsity_threshold = 0.2
    
    # Calculate heuristic based on a combination of prize-to-weight ratio, weight sparsity,
    # and adaptive balancing factor
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        weight_sparsity = 1 - (np.count_nonzero(weight[i]) / m)
        
        # Adaptive balancing factor
        balancing_factor = epsilon / (1 + (total_weight / m))
        
        # Compute heuristic value
        heuristic[i] = (total_prize / total_weight) * weight_sparsity * balancing_factor
    
    # Introduce a randomness factor to prevent getting stuck in local optima
    random_factor = np.random.rand(n)
    heuristic = heuristic * (1 - random_factor) + random_factor * (1 - np.maximum(heuristic, 0.1))
    
    # Adjust heuristic to penalize items with low sparsity or high weight concentration
    sparsity_penalty = weight_sparsity / (1 + np.maximum(weight_sparsity, sparsity_threshold))
    heuristic = heuristic * sparsity_penalty
    
    # Normalize the heuristic values to ensure a consistent scale
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    heuristic = 2 * (heuristic - min_heuristic) / (max_heuristic - min_heuristic) - 1
    
    return heuristic
```
