```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and weight sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Introduce diversity factor by considering the number of dimensions not at maximum weight
    diversity_factor = np.sum(weight != weight.max(axis=1), axis=1)
    diversity_factor = (1 / (n * m + diversity_factor)) * diversity_factor
    heuristic *= diversity_factor
    
    # Adaptive exploration strategy based on the standard deviation of heuristic values
    current_state_factor = 1 / (1 + np.std(heuristic))
    adaptive_heuristic = heuristic * current_state_factor
    
    # Balance the heuristic to focus on high-value to weight ratio items and ignore those with low sparsity
    high_value_weight_ratio_items = heuristic > 1
    high_sparsity_items = (weight.sum(axis=1) / m) < 0.8
    balanced_heuristic = heuristic.copy()
    balanced_heuristic[~(high_value_weight_ratio_items & high_sparsity_items)] = 0
    
    # Introduce a penalty for items that do not contribute significantly to the diversity
    diversity_contribution = diversity_factor > 0.1
    penalty_factor = 1 - diversity_factor
    penalty_factor[diversity_contribution] = 0
    balanced_heuristic *= penalty_factor
    
    # Normalize the heuristic values to ensure a clear ranking
    heuristic = (balanced_heuristic - np.min(balanced_heuristic)) / (np.max(balanced_heuristic) - np.min(balanced_heuristic))
    
    return heuristic
```
