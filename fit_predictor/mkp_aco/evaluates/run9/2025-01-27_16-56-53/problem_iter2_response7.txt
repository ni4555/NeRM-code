```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        weight_sparsity = 1 - (np.count_nonzero(weight[i]) / m)
        value_to_weight_ratio = total_prize / total_weight
        
        # Incorporate adaptive balancing factor
        balancing_factor = 1 / (1 + weight[i].sum())
        
        # Compute heuristic value
        heuristic[i] = value_to_weight_ratio * weight_sparsity * balancing_factor
    
    # Refine heuristic by penalizing items that are too sparse or too dense
    sparsity_threshold = 0.5
    density_threshold = 0.8
    heuristic[weight_sparsity < sparsity_threshold] *= 0.5
    heuristic[weight_sparsity > density_threshold] *= 0.5
    
    # Further refine the heuristic to favor diversity in selected items
    diversity_factor = np.zeros(n)
    for i in range(n):
        unique_weights = np.unique(weight[i])
        if len(unique_weights) > 1:
            diversity_factor[i] = len(unique_weights)
    
    heuristic *= diversity_factor
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < np.percentile(heuristic, 5)] = 0
    heuristic[weight.sum(axis=1) > m * density_threshold] = 0
    
    return heuristic
```
