```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        heuristic[i] = value_to_weight_ratio
    
    # Incorporate sparsity
    sparsity_factor = 1 / (1 + weight.sum(axis=1))
    heuristic *= sparsity_factor
    
    # Introduce randomness to promote exploration
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    # Adjust heuristics based on an adaptive exploration factor
    exploration_factor = np.exp(-np.sum(heuristic))
    heuristic *= exploration_factor
    
    # Encourage diversity by favoring items with unique weights
    diversity_factor = 1 - (np.sum(weight == weight.max(axis=1), axis=1) / n)
    heuristic *= diversity_factor
    
    # Set low-value items to zero
    heuristic[heuristic < heuristic.max() / 10] = 0
    
    return heuristic
```
