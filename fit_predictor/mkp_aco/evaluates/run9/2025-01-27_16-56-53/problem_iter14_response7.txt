```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight if total_weight > 0 else 0
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] *= value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < np.mean(weight[i]))
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = 1 / (1 + np.exp(-np.log(2) * (heuristic - np.mean(heuristic))))
    exploitation_factor = 1
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Set low-value items and those with high total weight to zero
    heuristic = np.where(heuristic < np.mean(heuristic) / 10, 0, heuristic)
    high_weight_threshold = np.mean(weight, axis=0) * m * 1.2
    non_essential_items = weight.sum(axis=1) > np.sum(high_weight_threshold)
    heuristic[non_essential_items] = 0
    
    # Normalize to ensure values are between 0 and 1
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    if max_heuristic > 0:
        heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic) + 1e-10
    
    return heuristic
```
