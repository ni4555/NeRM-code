```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = total_prize / total_weight / (1 + total_weight)
    
    # Normalize by the sum of prizes to balance different scale
    prize_sum = np.sum(prize)
    heuristic /= prize_sum
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    # High-value to weight ratio and weight sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = m - np.sum(weight[i] == weight[i].max())
        heuristic[i] *= value_to_weight_ratio * weight_sparsity
    
    # Introduce a diversity factor that increases with the number of unique weights
    for i in range(n):
        diversity_factor = m - np.sum(weight[i] == weight[i].max())
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    # Adjust heuristic based on the current state of exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + weight.sum(axis=1))
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Set low-value items and those with high total weight to zero
    threshold = heuristic.max() / 10
    heuristic[heuristic < threshold] = 0
    weight_threshold = weight.sum(axis=1) > m * 0.8
    heuristic[weight_threshold] = 0
    
    return adaptive_heuristic
```
