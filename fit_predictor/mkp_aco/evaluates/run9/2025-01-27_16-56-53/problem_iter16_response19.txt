```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on prize-to-weight ratio
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight
    
    # Incorporate sparsity by penalizing items with higher weight
    for i in range(n):
        weight_sparsity = 1 - (np.sum(weight[i]) / m)
        heuristic[i] *= weight_sparsity
    
    # Introduce diversity by penalizing items that do not contribute to weight sparsity
    for i in range(n):
        diversity_factor = np.sum(weight[i] < weight[i].max())
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy using a sigmoid function
    exploration_exploitation_factor = 1 / (1 + np.exp((heuristic - np.mean(heuristic)) / 0.1))
    heuristic *= exploration_exploitation_factor
    
    # Add controlled randomness to promote exploration
    random_noise = np.random.normal(0, heuristic.std() / 10, size=n)
    heuristic += random_noise
    
    # Set low-value items and those with high total weight to zero
    threshold = np.max(heuristic) / 10
    heuristic[heuristic < threshold] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
