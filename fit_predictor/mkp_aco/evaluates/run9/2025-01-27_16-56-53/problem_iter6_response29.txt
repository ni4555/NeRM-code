```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on prize-to-weight ratio
    total_prize = np.sum(prize * weight, axis=1)
    total_weight = np.sum(weight, axis=1)
    item_heuristic = total_prize / total_weight
    
    # Incorporate sparsity by penalizing items with high weight relative to their prize
    sparsity_factor = 1 / (1 + total_weight / m)
    
    # Encourage diversity in selected items
    diversity_factor = np.ones(n)
    for i in range(n):
        diversity_factor[i] = np.sum(weight[i] < weight[i].max())
    diversity_factor /= m
    
    # Combine the heuristic with the sparsity and diversity factors
    heuristic = item_heuristic * sparsity_factor * diversity_factor
    
    # Dynamically adjust weights to balance exploration and exploitation
    average_heuristic = np.mean(heuristic)
    heuristic[heuristic < average_heuristic / 2] = 0
    
    # Balance exploration and exploitation by rewarding high-value items
    heuristic *= prize / (np.max(heuristic) + 1e-8)
    
    # Penalize over-weight items
    weight_factor = np.exp(-np.sum(weight, axis=1) / m)
    heuristic *= weight_factor
    
    # Normalize heuristics for consistent evaluation
    max_heuristic = np.max(heuristic)
    heuristic /= max_heuristic
    
    return heuristic
```
