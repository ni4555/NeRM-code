```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.log(prize[i])  # Normalize with logarithms
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = np.log(prize[i] + 1) / (np.sum(weight[i]) + 1)
        weight_sparsity = (np.sum(weight[i]) / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * (1 - weight_sparsity)
    
    # Introduce a diversity factor that favors unique item selections
    for i in range(n):
        diversity_factor = np.exp(-np.sum(weight[i] == weight[i].max()) / m)
        heuristic[i] *= diversity_factor
    
    # Balance exploration and exploitation dynamically
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (np.sum(weight**2, axis=1) + 1)
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Set low-value and high-weight items to zero
    heuristic[heuristic < adaptive_heuristic.max() / 10] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return adaptive_heuristic
```
