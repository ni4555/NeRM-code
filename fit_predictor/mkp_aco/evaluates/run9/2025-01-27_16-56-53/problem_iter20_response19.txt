```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = total_prize / (1 + np.sum(weight[i]))
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / np.sum(weight[i])
        weight_sparsity = 1 - (np.sum(weight[i]) / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = 1
        max_weight = weight[i].max()
        for j in range(m):
            if weight[i, j] < max_weight * 0.8:
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1) / m)
    adaptive_heuristic = exploration_factor * heuristic + exploitation_factor * heuristic
    
    # Introduce controlled randomness to promote exploration
    random_noise = np.random.normal(0, heuristic.std() / 5, size=n)
    heuristic += random_noise
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < heuristic.max() / 10] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
