```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < weight[i].max())
        heuristic[i] *= diversity_factor / m
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + total_weight[:, np.newaxis])
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Introduce an adaptive adjustment to avoid local optima
    max_heuristic = np.max(heuristic)
    adaptive_adjustment = np.exp(-np.abs(heuristic - max_heuristic))
    heuristic *= adaptive_adjustment
    
    # Prune low-value candidates and those with high total weight
    heuristic[heuristic < max_heuristic / 10] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    # Normalize the heuristic
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
