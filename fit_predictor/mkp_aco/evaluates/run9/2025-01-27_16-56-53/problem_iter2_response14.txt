```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        heuristic[i] = value_to_weight_ratio
    
    # Incorporate sparsity factor that penalizes items with higher total weight
    sparsity_factor = 1 - (weight.sum(axis=1) / m)
    heuristic *= sparsity_factor
    
    # Adjust heuristics to balance exploration and exploitation
    # Use an adaptive mechanism that increases the heuristic for high-value items
    adaptive_factor = np.exp(-np.sum(weight, axis=1))
    heuristic *= adaptive_factor
    
    # Introduce diversity factor based on the number of dimensions
    # that are at the maximum weight for the item
    for i in range(n):
        diversity_factor = (1 + (m - np.sum(weight[i] == weight[i].max())))
        heuristic[i] *= diversity_factor
    
    # Refine the heuristic to favor items with lower total weight
    weight_factor = 1 / (weight.sum(axis=1) + 1e-8)
    heuristic *= weight_factor
    
    # Normalize heuristics to ensure all values are positive
    heuristic = np.maximum(heuristic, 0)
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    return heuristic
```
