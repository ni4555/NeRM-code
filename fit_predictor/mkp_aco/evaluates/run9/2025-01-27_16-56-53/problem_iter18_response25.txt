```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and weight sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Introduce diversity factor by considering the number of unique weights
    unique_weights = np.unique(weight, axis=0)
    diversity_factor = len(unique_weights) / (n * m)
    heuristic *= diversity_factor
    
    # Adaptive exploration strategy based on the current state
    mean_heuristic = np.mean(heuristic)
    exploration_exploitation_factor = 1 / (1 + np.exp((heuristic - mean_heuristic) / 0.1))
    heuristic *= exploration_exploitation_factor
    
    # Introduce controlled randomness to promote exploration
    random_noise = np.random.normal(0, heuristic.std() / 10, size=n)
    heuristic += random_noise
    
    # Normalize the heuristic values to ensure positive values and better comparison
    heuristic = np.clip(heuristic, 0, None)
    
    # Penalize items with non-essential weight and low value
    non_essential_weight_items = weight.sum(axis=1) > m * 0.1
    low_value_items = heuristic < (heuristic.max() * 0.1)
    heuristic[non_essential_weight_items | low_value_items] = 0
    
    return heuristic
```
