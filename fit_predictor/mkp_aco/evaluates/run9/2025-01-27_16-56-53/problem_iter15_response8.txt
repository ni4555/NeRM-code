```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Normalize prize based on dimension-wise weight distribution
    prize_norm = prize / np.sum(prize * weight, axis=1, keepdims=True)
    
    # Calculate heuristic based on a combination of normalized prize and weight
    heuristic = (prize_norm / weight).sum(axis=1)
    
    # Incorporate sparsity by penalizing high weight
    sparsity_penalty = (1 - weight.sum(axis=1) / m)
    heuristic *= sparsity_penalty
    
    # Introduce a diversity factor to enhance exploration
    diversity_factor = (m - weight.sum(axis=1) < m * 0.5)
    heuristic *= diversity_factor
    
    # Adjust heuristic with exploration and exploitation factors
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.exp(-prize.sum() / n)  # Using an exponential function to model exploitation
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Further penalize low-value or high-weight items
    low_value_penalty = (prize < np.percentile(prize, 10))
    high_weight_penalty = (weight.sum(axis=1) > m * 0.8)
    heuristic[low_value_penalty] = 0
    heuristic[high_weight_penalty] = 0
    
    return adaptive_heuristic
```
