```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.log(prize[i] + 1)  # Add 1 to avoid log(0)
        total_weight = np.log(weight[i].sum() + 1)  # Add 1 to avoid log(0)
        heuristic[i] = total_prize - total_weight
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    # High-value to weight ratio and weight sparsity
    for i in range(n):
        value_to_weight_ratio = np.log(prize[i] + 1) - total_weight
        weight_sparsity = np.log(m - weight[i].sum() + 1)
        heuristic[i] = heuristic[i] + value_to_weight_ratio + weight_sparsity
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    # Adjust heuristic based on the current state of exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + weight.sum(axis=1))
    adaptive_heuristic = exploration_factor * heuristic + exploitation_factor * heuristic
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < 0] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return adaptive_heuristic
```
