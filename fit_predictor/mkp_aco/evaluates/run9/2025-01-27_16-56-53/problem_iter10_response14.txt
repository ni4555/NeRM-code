```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight if total_weight > 0 else 0
    
    # Incorporate adaptive exploration and exploitation by prioritizing diversity
    diversity_heuristic = np.zeros(n)
    for i in range(n):
        diversity_factor = sum(weight[i] == weight[i].max())
        diversity_heuristic[i] = diversity_factor
    
    # Balance the original heuristic with the diversity heuristic
    heuristic = (heuristic * (1 - diversity_heuristic) + diversity_heuristic) / 2
    
    # Incorporate sparsity by penalizing items with low weight distribution
    sparsity_heuristic = np.zeros(n)
    for i in range(n):
        sparsity_factor = sum(weight[i] / np.sum(weight[i]))
        sparsity_heuristic[i] = sparsity_factor
    heuristic = (heuristic * (1 - sparsity_heuristic) + sparsity_heuristic) / 2
    
    # Dynamically adjust the heuristics to favor exploration over exploitation in case of local optima
    local_optima_heuristic = np.zeros(n)
    for i in range(n):
        local_optima = (heuristic > heuristic[i]).mean()
        local_optima_heuristic[i] = 1 - local_optima
    heuristic = (heuristic * (1 - local_optima_heuristic) + local_optima_heuristic) / 2
    
    # Ensure that the heuristic is non-negative
    heuristic = np.clip(heuristic, 0, None)
    
    return heuristic
```
