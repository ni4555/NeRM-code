```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.dot(prize[i], weight[i, :])
        total_weight = weight[i, :].sum()
        heuristic[i] = total_prize / total_weight
    
    # Adaptive exploration-exploitation mechanism
    exploration_rate = 0.5  # Start with a medium exploration rate
    for i in range(n):
        if np.random.rand() < exploration_rate:
            # Randomly explore to prevent local optima
            heuristic[i] *= np.random.uniform(0.1, 1.0)
        else:
            # Exploit the known best
            heuristic[i] /= (1 + weight[i].sum())
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i, :] < weight[i].max())
        heuristic[i] *= (n - diversity_factor)
    
    # Adjust heuristics based on their deviation from the mean
    mean_heuristic = np.mean(heuristic)
    heuristic = (heuristic - mean_heuristic) * np.random.choice([1, -1], size=n)
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < np.percentile(heuristic, 10)] = 0
    heuristic[weight.sum(axis=1) > 0.8 * m] = 0
    
    return heuristic
```
