```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        # Normalize by weight to get a per-item heuristic
        item_heuristic = total_prize / total_weight if total_weight != 0 else 0
        
        # Incorporate a sparsity factor that penalizes items with higher weight
        sparsity_factor = (1 - (total_weight / m))
        
        # Combine the heuristic with the sparsity factor and normalize
        heuristic[i] = item_heuristic * sparsity_factor
    
    # Integrate multiple features by using a weighted sum of heuristics
    # Include a feature for the total prize value
    total_prize_factor = np.sum(prize)
    
    # Adjust heuristics to balance exploration and exploitation
    # Use an adaptive mechanism that increases the heuristic for high-value items
    adaptive_factor = np.exp(-np.sum(weight, axis=1))
    
    # Combine all factors into a final heuristic
    heuristic = (heuristic * adaptive_factor + total_prize_factor) / (np.sum(adaptive_factor) + 1)
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    # Introduce a randomness factor to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    # Further refine the heuristic to prioritize diversity and balance across multiple dimensions
    diversity_factor = np.ones(n)
    for i in range(n):
        max_weight = np.max(weight[i])
        diversity_factor[i] = 1 / np.sum(weight[i] == max_weight)
    
    heuristic *= diversity_factor
    
    return heuristic
```
