```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    exploration_factor = np.random.rand(n)
    sparsity_factor = np.mean(weight, axis=1)
    
    # Calculate heuristic based on the weighted sum of prizes and weights
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight if total_weight != 0 else 0
    
    # Adaptively balance exploration and exploitation
    heuristic *= exploration_factor * (1 - sparsity_factor) + sparsity_factor
    
    # Penalize sparsity and adjust heuristics to prevent local optima
    heuristic[sparsity_factor > 1] = 0  # Set sparsely weighted items to zero
    heuristic *= 1 / (1 + heuristic)  # Adjust heuristic values for exploration
    
    return heuristic
```
