```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value to weight ratio
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        heuristic[i] = value_to_weight_ratio
    
    # Introduce exploration and exploitation balance
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + weight.sum(axis=1) ** 2)
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Encourage diversity by considering items with different weight distributions
    diversity_factor = np.zeros(n)
    for i in range(n):
        unique_weights = np.unique(weight[i, :])
        max_unique_weights = len(unique_weights)
        diversity_factor[i] = max_unique_weights / m
    heuristic *= diversity_factor
    
    # Refine heuristic by penalizing high weight items
    for i in range(n):
        if weight[i].sum() > m * 0.8:
            heuristic[i] *= 0.5
    
    # Adjust heuristic to promote high-value items with low weight
    for i in range(n):
        heuristic[i] *= (prize[i] / weight[i].sum())
    
    # Sparsify by setting very low heuristic values to zero
    heuristic[heuristic < heuristic.max() * 0.01] = 0
    
    return adaptive_heuristic
```
