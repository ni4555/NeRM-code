```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and diversity factor
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        diversity_factor = 1 / (1 + np.linalg.norm(weight[i] - np.mean(weight, axis=0)))
        heuristic[i] = value_to_weight_ratio * diversity_factor
    
    # Adaptive exploration strategy using a Gaussian distribution
    mean = np.sum(heuristic**2) / n
    std_dev = np.sqrt(2 / n) * np.std(heuristic)
    exploration_factor = np.exp(-((heuristic - mean) ** 2) / (2 * std_dev ** 2))
    
    # Adaptive exploitation factor based on the sum of weights
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1) ** 2)
    
    # Combine exploration and exploitation factors
    adaptive_heuristic = exploration_factor * heuristic * exploitation_factor
    
    # Normalize the heuristic values to ensure they are within a certain range
    heuristic_range = (adaptive_heuristic - np.min(adaptive_heuristic)) / (np.max(adaptive_heuristic) - np.min(adaptive_heuristic))
    
    # Penalize items with non-essential weight and low value
    non_essential_weight_items = weight.sum(axis=1) > m * 0.1
    low_value_items = heuristic_range < 0.5
    heuristic_range[non_essential_weight_items | low_value_items] = 0
    
    return heuristic_range
```
