```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on multiple factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        value_to_weight_ratio = total_prize / total_weight if total_weight > 0 else 0
        
        # Normalize the ratio by the maximum possible value-to-weight ratio
        max_value_to_weight_ratio = np.max(prize) / np.min(weight)
        normalized_ratio = value_to_weight_ratio / max_value_to_weight_ratio
        
        # Incorporate sparsity by penalizing low-value or high-weight items
        weight_sparsity = 1 - (total_weight / m)
        
        # Refine the heuristic based on the normalized ratio and sparsity
        heuristic[i] = normalized_ratio * weight_sparsity
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_exploitation_factor = 1 / (1 + np.exp((heuristic - np.mean(heuristic)) / 0.1))
    heuristic *= exploration_exploitation_factor
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive mechanism to prioritize valuable subsets
    valuable_factor = np.exp(heuristic / (np.max(heuristic) + 1))
    heuristic *= valuable_factor
    
    # Adjust heuristics in real-time to prevent local optima
    real_time_adjustment = 1 / (1 + np.exp((heuristic - np.mean(heuristic)) / 0.1))
    heuristic *= real_time_adjustment
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < heuristic.max() / 10] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
