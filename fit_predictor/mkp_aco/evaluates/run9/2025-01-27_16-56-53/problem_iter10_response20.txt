```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight if total_weight > 0 else 0
    
    # Incorporate adaptive exploration and exploitation by prioritizing diversity
    diversity_factor = np.sum(weight == weight.max(axis=1), axis=1)
    heuristic *= diversity_factor / np.max(diversity_factor)
    
    # Incorporate sparsity by penalizing items with low weight distribution
    sparsity_factor = np.sum(weight, axis=1) / np.sum(weight, axis=0)
    heuristic *= sparsity_factor / np.max(sparsity_factor)
    
    # Dynamically adjust the heuristics to favor exploration over exploitation in case of local optima
    local_optima = (heuristic > heuristic).mean(axis=1)
    exploration_factor = 1 / (1 + np.exp(-local_optima))
    heuristic *= exploration_factor
    
    # Ensure that the heuristic is non-negative
    heuristic = np.clip(heuristic, 0, None)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
