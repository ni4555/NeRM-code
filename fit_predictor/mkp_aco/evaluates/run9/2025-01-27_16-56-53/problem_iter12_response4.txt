```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and sparsity
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        value_to_weight_ratio = total_prize / total_weight if total_weight > 0 else 0
        weight_sparsity = 1 - (total_weight / m)
        
        # Normalize the heuristic to account for all factors
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Refine heuristic to favor diversity in selected items
    diversity_factor = np.zeros(n)
    for i in range(n):
        max_weight = weight[i].max()
        diversity_count = (weight[i] < max_weight).sum()
        diversity_factor[i] = (diversity_count / m) ** 0.5  # Use square root for a more exponential effect
    
    # Incorporate an adaptive exploration strategy that balances exploration and exploitation
    # Adjust heuristic based on the current state of exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.exp(heuristic.mean() / 0.1))
    adaptive_heuristic = exploration_factor * heuristic + exploitation_factor * heuristic
    
    # Normalize the adaptive heuristic
    heuristic *= diversity_factor
    heuristic *= (1 + exploitation_factor) / (1 + np.exp(heuristic.mean() / 0.1))
    
    # Introduce controlled randomness to prevent convergence to local optima
    random_noise = np.random.normal(0, heuristic.std() / 3, size=n)
    heuristic += random_noise
    
    # Ensure that the heuristic is non-negative and sum to 1
    heuristic = np.clip(heuristic, 0, None)
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
