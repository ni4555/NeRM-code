```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on prize, weight sparsity, and value-to-weight ratio
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Balance exploitation with diversity
    for i in range(n):
        unique_weights = np.sum(weight[i] < np.mean(weight, axis=0), axis=0)
        diversity_factor = unique_weights.sum() / m
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy based on the current state of the heuristic
    exploration_factor = np.exp(-np.mean(heuristic))
    exploitation_factor = np.exp(-heuristic)
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Penalize non-essential weight and low-value items
    non_essential_weight_factor = np.max(weight, axis=0) / weight.sum(axis=0)
    non_essential_items = weight.sum(axis=1) > m * 0.1
    low_value_items = heuristic < adaptive_heuristic.mean() / 10
    heuristic[non_essential_items | low_value_items] = 0
    
    # Normalize to ensure values are between 0 and 1
    min_val = np.min(heuristic)
    max_val = np.max(heuristic)
    heuristic = (heuristic - min_val) / (max_val - min_val)
    
    return heuristic
```
