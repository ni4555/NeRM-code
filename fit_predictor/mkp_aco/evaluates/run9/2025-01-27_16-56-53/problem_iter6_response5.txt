```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on the weighted sum of prizes and weights
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight if total_weight != 0 else 0
    
    # Incorporate sparsity by penalizing items with high weight relative to their prize
    sparsity_factor = np.mean(heuristic) / (1 + np.sum(weight, axis=1))
    heuristic = heuristic * sparsity_factor
    
    # Introduce an adaptive exploration and exploitation factor
    exploration_factor = np.exp(-np.sum(weight, axis=1) / m)
    heuristic = heuristic * exploration_factor
    
    # Introduce randomness to escape local optima
    random_factor = np.random.rand(n)
    heuristic = heuristic * random_factor
    
    # Prioritize high-value items with an adaptive mechanism
    value_factor = np.exp(-np.sum(weight ** 2, axis=1))
    heuristic = heuristic * value_factor
    
    # Introduce diversity by penalizing items that have too much weight in common
    diversity_factor = 1 - np.mean(weight == np.mean(weight, axis=0))
    heuristic = heuristic * diversity_factor
    
    # Apply threshold for exploration-exploitation balance
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    # Normalize heuristic to ensure it's between 0 and 1
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    return heuristic
```
