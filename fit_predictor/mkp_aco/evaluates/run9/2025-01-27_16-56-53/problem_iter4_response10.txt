```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        item_heuristic = total_prize / total_weight if total_weight != 0 else 0
        
        # Incorporate a sparsity factor that penalizes items with higher weight
        sparsity_factor = (1 - (total_weight / m))
        
        # Promote diversity by considering the number of dimensions that are not at maximum weight
        diversity_factor = m - np.sum(weight[i] == weight[i].max())
        
        # Adjust heuristics to balance exploration and exploitation
        adaptive_factor = np.exp(-np.sum(weight[i]))
        
        # Combine the heuristic with the sparsity factor, diversity factor, and adaptive factor
        heuristic[i] = (item_heuristic * sparsity_factor * diversity_factor * adaptive_factor)
    
    # Dynamically adjust heuristic based on cumulative performance
    cumulative_performance = np.cumsum(heuristic)
    heuristic *= (cumulative_performance / cumulative_performance[-1])
    
    # Apply threshold for exploration-exploitation balance
    threshold = heuristic.max() / 10
    heuristic[heuristic < threshold] = 0
    
    # Set low-value items and those with high total weight to zero
    weight_threshold = m * 0.8
    heuristic[weight.sum(axis=1) > weight_threshold] = 0
    
    # Introduce a randomness factor to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    return heuristic
```
