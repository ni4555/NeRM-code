```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        # Normalize by weight to get a per-item heuristic
        item_heuristic = total_prize / total_weight if total_weight != 0 else 0
        
        # Incorporate a sparsity factor that penalizes items with higher weight
        sparsity_factor = 1 - (total_weight / m)
        
        # Combine the heuristic with the sparsity factor and normalize
        heuristic[i] = item_heuristic * sparsity_factor
    
    # Adjust heuristics to balance exploration and exploitation
    # Use an adaptive scaling factor that prioritizes high-value items
    adaptive_factor = np.exp(-np.sum(weight, axis=1))
    heuristic *= adaptive_factor
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    # The threshold is based on the sparsity factor to maintain balance
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < sparsity_threshold] = 0
    
    # Further refine heuristics to ensure diversity across dimensions
    diversity_factor = np.zeros(n)
    for i in range(n):
        unique_weights = np.unique(weight[i])
        if len(unique_weights) > 1:
            diversity_factor[i] = 1 / np.sum(weight[i] == unique_weights[-1])
    heuristic *= diversity_factor
    
    # Introduce randomness to prevent local optima
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    # Ensure compliance with dimension-specific weight limits
    for i in range(n):
        if weight[i].sum() > m:  # If total weight exceeds dimension limit
            heuristic[i] = 0
    
    return heuristic
```
