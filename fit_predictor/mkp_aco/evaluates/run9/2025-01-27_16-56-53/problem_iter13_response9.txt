```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Minimize redundancy and introduce an adaptive penalty
    for i in range(n):
        if weight[i].any() == 1:  # Check if item has a dimension at max weight
            heuristic[i] *= 0.9  # Apply a penalty for high weight
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristic)
    heuristic /= max_heuristic
    
    # Introduce randomness to enhance diversity
    randomness_factor = np.random.rand(n)
    heuristic *= (1 + randomness_factor * np.random.uniform(-0.1, 0.1, n))
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1))
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Penalize outliers that are too different from the mean
    for i in range(n):
        if abs(adaptive_heuristic[i] - np.mean(adaptive_heuristic)) > 2 * np.std(adaptive_heuristic):
            adaptive_heuristic[i] *= 0.5
    
    # Apply granular penalties for high-weight items
    for i in range(n):
        if np.sum(weight[i]) > m * 0.8:
            adaptive_heuristic[i] *= 0.8
    
    return adaptive_heuristic
```
