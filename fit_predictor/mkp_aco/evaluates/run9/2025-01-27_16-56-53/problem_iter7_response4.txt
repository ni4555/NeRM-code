```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        if total_weight > 0:
            heuristic[i] = total_prize / total_weight
        else:
            heuristic[i] = 0
    
    # Normalize by weight to get a per-item heuristic and penalize high weight
    heuristic /= (1 + np.sum(weight, axis=1))
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    weight_sparsity = (1 - (np.sum(weight, axis=1) / m))
    heuristic *= value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = sum(weight[i] < weight[i].max())
        heuristic[i] *= diversity_factor
    
    # Dynamically adjust heuristics based on adaptive exploration and exploitation
    for i in range(n):
        exploration_factor = np.random.rand()
        exploitation_factor = 1 - exploration_factor
        heuristic[i] *= exploitation_factor + exploration_factor * heuristic[i]
    
    # Set low-value items and those with high total weight to zero
    low_value_threshold = heuristic.max() / 10
    high_weight_threshold = m * 0.8
    heuristic[heuristic < low_value_threshold] = 0
    heuristic[weight.sum(axis=1) > high_weight_threshold] = 0
    
    return heuristic
```
