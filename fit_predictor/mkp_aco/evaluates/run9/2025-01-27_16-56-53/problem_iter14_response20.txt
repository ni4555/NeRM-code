```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    # High-value to weight ratio and weight sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Refine the heuristic to favor diversity in selected items
    for i in range(n):
        # Use a diversity factor that considers the number of dimensions that are
        # not at the maximum weight for the item, adjusted by the ratio of actual
        # weight to maximum possible weight in each dimension
        diversity_factor = 1
        for j in range(m):
            diversity_factor += (weight[i, j] / (m - j))
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    # Adjust heuristic based on the current state of exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1))
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Normalize the heuristic to ensure that it is within a certain range
    min_heuristic = np.min(adaptive_heuristic)
    max_heuristic = np.max(adaptive_heuristic)
    heuristic = (adaptive_heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < 0.1] = 0
    heuristic[np.sum(weight, axis=1) > m * 0.8] = 0
    
    return heuristic
```
