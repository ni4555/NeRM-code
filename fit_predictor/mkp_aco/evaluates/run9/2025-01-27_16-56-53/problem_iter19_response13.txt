```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.dot(prize[i], weight[i, :])
        total_weight = weight[i].sum()
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Introduce exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + total_weight)
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Balance heuristics with diversity and sparsity considerations
    diversity = 0
    for i in range(n):
        diversity += (1 - (weight[i].max() / weight[i].sum()))
    average_diversity = diversity / n
    heuristic *= average_diversity
    
    # Sparsify by penalizing low-value to weight ratios
    for i in range(n):
        heuristic[i] *= (prize[i] / total_weight)
    
    # Adjust heuristic for items with high weight
    for i in range(n):
        heuristic[i] = max(heuristic[i], (1 - weight[i].sum() / m) * adaptive_heuristic[i])
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < 0.1 * heuristic.max()] = 0
    heuristic[weight.sum(axis=1) > 0.8 * m] = 0
    
    return heuristic
```
