```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on prize-to-weight ratio and sparsity
    for i in range(n):
        value_to_weight_ratio = np.sum(prize[i] * weight[i]) / np.sum(weight[i])
        weight_sparsity = 1 - (np.count_nonzero(weight[i]) / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Refine heuristic with an adaptive balancing factor
    for i in range(n):
        total_weight = np.sum(weight[i])
        adaptive_factor = np.exp(-np.sum(weight[i] ** 2) / (total_weight + 1e-5))
        heuristic[i] *= adaptive_factor
    
    # Further refine the heuristic with a diversity factor
    for i in range(n):
        diversity_factor = 0
        for j in range(m):
            if weight[i, j] < np.max(weight[i]):
                diversity_factor += 1
        diversity_factor /= m
        heuristic[i] *= diversity_factor
    
    # Dynamically adjust the heuristic based on cumulative performance
    cumulative_performance = np.cumsum(heuristic)
    heuristic /= cumulative_performance / np.sum(heuristic)
    
    # Apply an exploration-exploitation balance by thresholding
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    # Penalize items with excessive weight and those that are below the diversity threshold
    for i in range(n):
        if np.sum(weight[i]) > m * 0.9:
            heuristic[i] = 0
        elif diversity_factor < 0.5:
            heuristic[i] = 0
    
    return heuristic
```
