```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Normalize by weight and add a diversity factor
        diversity_factor = np.count_nonzero(weight[i] < np.max(weight[i]))
        heuristic[i] = (total_prize / total_weight) * diversity_factor
    
    # Apply an adaptive penalty based on weight sparsity and value to weight ratio
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / (m * 1))
        penalty = 1 / (1 + weight_sparsity)
        heuristic[i] *= penalty
    
    # Introduce an adaptive exploration-exploitation factor
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + weight.sum(axis=1))
    adaptive_heuristic = exploration_factor * exploitation_factor * heuristic
    
    # Normalize heuristics and apply penalties to high weight items
    normalized_heuristic = adaptive_heuristic / np.sum(adaptive_heuristic)
    normalized_heuristic[weight.sum(axis=1) > m * 0.8] *= 0.1
    
    return normalized_heuristic
```
