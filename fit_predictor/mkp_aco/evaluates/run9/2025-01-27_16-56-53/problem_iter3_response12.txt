```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < weight[i].max())
        heuristic[i] *= diversity_factor
    
    # Dynamically adjust the heuristic to prevent local optima
    for i in range(n):
        if heuristic[i] > heuristic.mean():
            heuristic[i] = heuristic.mean() + np.random.normal(0, 0.1)
        else:
            heuristic[i] = heuristic.mean() - np.random.normal(0, 0.1)
    
    # Normalize the heuristic to ensure balance between exploration and exploitation
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < 0.1] = 0
    heuristic[total_weight > m * 0.8] = 0
    
    return heuristic
```
