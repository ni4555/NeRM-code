```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Diversity factor: favor items with more dimensions less utilized
    diversity_factor = 1 / np.sum(weight < weight.max(), axis=1)
    
    # Performance factor: encourage higher-value items
    performance_factor = prize / (np.sum(weight, axis=1) + 1)
    
    # Combine all factors
    heuristic = value_to_weight_ratio * diversity_factor * performance_factor
    
    # Dynamically adjust heuristics based on cumulative performance
    cumulative_performance = np.cumsum(heuristic)
    heuristic *= cumulative_performance / cumulative_performance[-1]
    
    # Balance exploration and exploitation
    exploration_factor = 1 / (np.max(heuristic) + 1e-8)
    heuristic *= exploration_factor
    
    # Set low-value items and those with high total weight to zero
    weight_threshold = 0.8
    heuristic[weight.sum(axis=1) > m * weight_threshold] = 0
    
    return heuristic
```
