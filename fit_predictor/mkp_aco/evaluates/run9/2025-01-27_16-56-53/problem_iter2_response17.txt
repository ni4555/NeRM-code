```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + weight[i].sum())
    
    # Incorporate sparsity by penalizing items with high weight relative to their prize
    sparsity_factor = 1
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        if value_to_weight_ratio < 0.1:  # Threshold for sparsity
            sparsity_factor *= 0.5
    
    heuristic *= sparsity_factor
    
    # Adaptive mechanism to prioritize valuable subsets
    valuable_index = np.argsort(heuristic)[::-1]
    heuristic = np.zeros(n)
    for idx in valuable_index:
        heuristic[idx] = 1 / (1 + heuristic[idx])
    
    # Refine heuristic to favor diversity and balance across multiple dimensions
    diversity_factor = np.ones(n)
    for i in range(n):
        max_weight = np.max(weight[i])
        diversity_factor[i] = 1 / np.sum(weight[i] == max_weight)
    
    heuristic *= diversity_factor
    
    # Further adjust heuristics to prevent local optima by introducing a randomness factor
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    # Ensure compliance with dimension-specific weight limits
    for i in range(n):
        if weight[i].sum() > m:  # If total weight exceeds dimension limit
            heuristic[i] = 0
    
    return heuristic
```
