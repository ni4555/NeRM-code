```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        weight_sparsity = 1 - (np.count_nonzero(weight[i]) / m)
        
        # Use a weighted sum of factors to balance exploration and exploitation
        heuristic[i] = (total_prize / total_weight) * weight_sparsity
    
    # Refine heuristics to promote diversity and balance exploration-exploitation
    for i in range(n):
        diversity_factor = 0
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        heuristic[i] *= diversity_factor / (m - diversity_factor)
    
    # Dynamically adjust the heuristic to prevent local optima
    epsilon = 0.5
    for i in range(n):
        heuristic[i] *= (1 + epsilon * (1 - weight[i].sum() / m))
    
    # Penalize items that are close to exceeding the weight limit
    for i in range(n):
        if weight[i].sum() > m * 0.8:
            heuristic[i] = 0
    
    # Normalize the heuristic to ensure non-negative values
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    return heuristic
```
