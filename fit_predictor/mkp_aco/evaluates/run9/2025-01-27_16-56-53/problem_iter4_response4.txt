```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Initialize adaptive parameters
    epsilon = 0.5
    beta = 0.1  # Factor for sparsity
    alpha = 0.1  # Factor for exploration-exploitation balance
    
    # Calculate heuristic based on prize-to-weight ratio and sparsity
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        weight_sparsity = (m - np.count_nonzero(weight[i])) / m
        
        # Balance exploration and exploitation using a weighted sum of the heuristic
        heuristic_value = (total_prize / total_weight) * (1 - alpha) + weight_sparsity * alpha
        
        # Adjust for sparsity
        heuristic[i] = heuristic_value * (1 - beta) + (1 / weight[i]) * beta
    
    # Dynamic factor to prioritize high-value items
    dynamic_factor = np.exp(-np.sum(weight ** 2, axis=1))
    heuristic *= dynamic_factor
    
    # Normalize to ensure heuristics are bounded between 0 and 1
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    # Avoid overfitting by penalizing overly similar items
    for i in range(n):
        similarity = np.dot(weight[i], weight)
        for j in range(n):
            if i != j:
                heuristic[i] -= similarity[i, j] * alpha
    
    return heuristic
```
