```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on weighted factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity and value-to-weight ratio
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] *= value_to_weight_ratio * weight_sparsity
    
    # Introduce adaptive exploration strategy
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1))
    adaptive_heuristic = exploration_factor + exploitation_factor * heuristic
    
    # Refine heuristic to favor diversity
    for i in range(n):
        diversity_factor = np.sum(weight[i] < np.max(weight[i]))
        heuristic[i] *= diversity_factor / m
    
    # Normalize and penalize outliers
    heuristic = np.clip(heuristic, 0.1, 0.9)
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
