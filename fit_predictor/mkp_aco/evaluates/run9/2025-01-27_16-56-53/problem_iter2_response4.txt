```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Initialize an adaptive parameter for balancing exploration and exploitation
    epsilon = 0.5
    
    # Calculate heuristic based on a combination of prize-to-weight ratio, weight sparsity,
    # and adaptive balancing factor
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        weight_sparsity = 1 - (np.count_nonzero(weight[i]) / m)
        
        # Use an adaptive balancing factor to balance exploration and exploitation
        balancing_factor = epsilon / (1 + np.sum(weight[i] ** 2))
        
        # Compute heuristic value
        heuristic[i] = (total_prize / total_weight) * weight_sparsity * balancing_factor
    
    # Adjust heuristics to balance exploration and exploitation
    # Use a dynamic adaptive mechanism that prioritizes high-value items
    adaptive_factor = np.exp(-np.sum(weight ** 2, axis=1))
    heuristic *= adaptive_factor
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    # and ensure that the heuristic is non-negative
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    heuristic[heuristic < 0] = 0
    
    return heuristic
```
