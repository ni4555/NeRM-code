```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        value_to_weight_ratio = total_prize / total_weight if total_weight > 0 else 0
        weight_sparsity = 1 - (total_weight / m)
        
        # Diversity factor considering the sparsity of the weight distribution
        diversity_factor = np.prod(1 - (weight[i] / weight[i].max()))
        
        # Adaptive exploration-exploitation factor using a sigmoid function
        exploration_exploitation_factor = 1 / (1 + np.exp((heuristic[i] - np.mean(heuristic)) / 0.1))
        
        # Normalize the heuristic to account for all factors
        heuristic[i] = (value_to_weight_ratio * weight_sparsity * diversity_factor * exploration_exploitation_factor)
    
    # Introduce a penalty for items that exceed the weight limit
    weight_threshold = m * 0.8
    heuristic[weight.sum(axis=1) > weight_threshold] = 0
    
    # Introduce controlled randomness to promote exploration
    random_noise = np.random.normal(0, heuristic.std() / 10, size=n)
    heuristic += random_noise
    
    # Ensure that the heuristic is non-negative
    heuristic = np.clip(heuristic, 0, None)
    
    return heuristic
```
