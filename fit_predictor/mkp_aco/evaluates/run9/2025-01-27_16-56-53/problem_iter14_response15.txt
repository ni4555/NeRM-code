```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    total_prize = np.dot(prize, weight)
    total_weight = weight.sum(axis=1)
    heuristic = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    value_to_weight_ratio = prize / total_weight
    weight_sparsity = 1 - (total_weight / m)
    heuristic = heuristic * value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    diversity_factor = (weight < weight.max(axis=1, keepdims=True)).sum(axis=1)
    heuristic = heuristic * diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.exp(-np.log(2) * np.abs(heuristic)))
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Introduce mutation for diversity and variability
    mutation_rate = 0.1
    mutation_indices = np.random.rand(n) < mutation_rate
    mutation_factor = np.random.rand(n)
    mutation_factor[mutation_indices] = np.random.rand(mutation_indices.sum())
    heuristic[mutation_indices] *= mutation_factor[mutation_indices]
    
    # Set low-value items and those with high total weight to zero
    low_value_threshold = heuristic.max() / 10
    high_weight_threshold = m * 0.8
    heuristic = np.where(heuristic < low_value_threshold, 0, heuristic)
    heuristic = np.where(weight.sum(axis=1) > high_weight_threshold, 0, heuristic)
    
    # Introduce a penalty for similar items based on their heuristic values
    for j in range(m):
        similar_items = np.where(weight[:, j] == weight[:, j].max())[0]
        average_heuristic = np.mean(heuristic[similar_items])
        heuristic[similar_items] *= 0.9
    
    return heuristic
```
