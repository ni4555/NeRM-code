```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate adaptive exploration and exploitation by prioritizing diversity
    diversity_heuristic = np.zeros(n)
    for i in range(n):
        diversity_factor = sum(weight[i] == weight[i].max())
        diversity_heuristic[i] = diversity_factor
    
    # Incorporate sparsity by penalizing items with low weight distribution
    sparsity_heuristic = np.zeros(n)
    for i in range(n):
        sparsity_factor = sum(weight[i] / np.sum(weight[i]))
        sparsity_heuristic[i] = 1 - sparsity_factor  # Invert to penalize low sparsity
    
    # Dynamically adjust the heuristics to favor exploration over exploitation in case of local optima
    local_optima_heuristic = np.zeros(n)
    for i in range(n):
        local_optima = (value_to_weight_ratio > value_to_weight_ratio[i]).mean()
        local_optima_heuristic[i] = 1 - local_optima
    
    # Combine heuristics using a weighted sum to balance exploration and exploitation
    heuristic = (value_to_weight_ratio * 0.5 + diversity_heuristic * 0.3 +
                 sparsity_heuristic * 0.1 + local_optima_heuristic * 0.1)
    
    # Normalize heuristic to ensure it's between 0 and 1
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    return heuristic
```
