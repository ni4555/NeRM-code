```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    total_prize_weighted = prize * weight
    total_weight = weight.sum(axis=1)
    heuristic = (total_prize_weighted.sum(axis=1) / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity and value-to-weight ratio
    value_to_weight_ratio = prize / total_weight
    heuristic *= value_to_weight_ratio
    
    # Refine heuristic to favor diversity
    diversity_factor = (weight < weight.max(axis=1, keepdims=True)).sum(axis=1)
    heuristic *= diversity_factor / m
    
    # Introduce adaptive exploration strategy
    exploitation_factor = 1 / (1 + total_weight)
    exploration_factor = np.random.rand(n)
    heuristic *= exploitation_factor + exploration_factor * (1 - exploitation_factor)
    
    # Apply mutation to enhance diversity
    mutation_strength = np.random.rand()
    heuristic *= (1 - mutation_strength) + mutation_strength * np.random.rand(n)
    
    # Normalize and penalize outliers
    heuristic = np.clip(heuristic, 0.1, 0.9)
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
