```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of prize-to-weight ratio and sparsity
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        weight_sparsity = 1 - (np.count_nonzero(weight[i]) / m)
        
        # Normalize by weight to get a per-item heuristic
        item_heuristic = total_prize / total_weight if total_weight != 0 else 0
        
        # Incorporate a sparsity factor that penalizes items with higher weight
        sparsity_factor = weight_sparsity
        
        # Combine the heuristic with the sparsity factor
        heuristic[i] = item_heuristic * sparsity_factor
    
    # Adaptive mechanism to prioritize valuable subsets
    # Increase heuristic values for items with high relative value
    adaptive_factor = np.exp(-np.sum(weight, axis=1))
    heuristic *= adaptive_factor
    
    # Maintain diversity by adjusting heuristics in real-time
    # Introduce randomness with a controlled factor to avoid excessive randomness
    diversity_factor = np.random.rand(n) / (np.random.rand(n) + 1)
    heuristic *= diversity_factor
    
    # Further adjust heuristics to prevent local optima
    # Use a threshold-based filter to maintain diversity while avoiding local optima
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = threshold
    
    return heuristic
```
