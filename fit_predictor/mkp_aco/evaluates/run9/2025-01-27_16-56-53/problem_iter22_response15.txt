```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Vectorized calculation of heuristic based on a combination of factors
    total_prize = np.sum(prize[:, None] * weight, axis=1)
    total_weight = np.sum(weight, axis=1)
    heuristic = (total_prize / (1 + total_weight)) / (1 + np.sum(weight, axis=1))
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    value_to_weight_ratio = prize / total_weight
    weight_sparsity = 1 - (total_weight / m)
    heuristic *= value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    diversity_factor = np.sum(weight < weight.max(axis=1, keepdims=True), axis=1)
    heuristic *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + total_weight)
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Set low-value items and those with high total weight to zero
    threshold = heuristic.max() / 10
    adaptive_heuristic[heuristic < threshold] = 0
    high_weight_threshold = m * 0.8
    adaptive_heuristic[total_weight > high_weight_threshold] = 0
    
    return adaptive_heuristic
```
