```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / weight[i].sum()) / (1 + weight[i].max())
    
    # Incorporate randomness and penalty for high weight
    heuristic = heuristic * (1 + np.random.rand(n) * 0.1)
    heuristic[weight.sum(axis=1) > m] = 0
    
    # Adjust the heuristic to favor items with a good balance between prize and weight
    for i in range(n):
        heuristic[i] /= (1 + prize[i] / weight[i].sum())
    
    # Refine the heuristic based on diversity across dimensions
    for i in range(n):
        diversity_factor = sum(weight[i] == weight[i].max())
        heuristic[i] *= (m - diversity_factor + 1)
    
    # Introduce an adaptive exploration factor
    exploration_factor = np.random.rand(n) / np.random.rand(n).max()
    exploitation_factor = (weight.sum(axis=1) / weight.sum().max())
    adaptive_heuristic = exploration_factor + exploitation_factor * heuristic
    
    # Apply a sparsity strategy by setting low heuristic values to zero
    sparsity_threshold = adaptive_heuristic.mean()
    heuristic[adaptive_heuristic < sparsity_threshold] = 0
    
    return adaptive_heuristic
```
