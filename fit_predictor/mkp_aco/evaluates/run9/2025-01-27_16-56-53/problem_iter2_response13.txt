```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        # Normalize by weight to get a per-item heuristic
        item_heuristic = total_prize / total_weight if total_weight != 0 else 0
        
        # Incorporate a sparsity factor that penalizes items with higher weight
        sparsity_factor = 1 - (np.count_nonzero(weight[i]) / m)
        
        # Combine the heuristic with the sparsity factor and normalize
        heuristic[i] = item_heuristic * sparsity_factor
    
    # Adjust heuristics to balance exploration and exploitation
    # Use an adaptive mechanism that increases the heuristic for high-value items
    # and balances it with the total weight of the item
    adaptive_factor = np.exp(-np.sum(weight, axis=1) / (np.sum(prize) / n))
    heuristic *= adaptive_factor
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    # This threshold is set based on a percentile of the heuristics to ensure diversity
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    return heuristic
```
