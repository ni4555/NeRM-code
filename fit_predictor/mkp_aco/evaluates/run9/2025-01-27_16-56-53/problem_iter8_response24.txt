```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Normalize per item heuristics and penalize high weight
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight if total_weight > 0 else 0
    
    # Incentivize sparsity by prioritizing items with less weight distribution
    sparsity_heuristic = np.zeros(n)
    for i in range(n):
        sparsity_score = np.count_nonzero(weight[i] == weight[i].max())
        sparsity_heuristic[i] = 1 if sparsity_score == m else 0
    
    # Prioritize diversity by focusing on items with unique weight profiles
    diversity_heuristic = np.zeros(n)
    unique_weights = np.apply_along_axis(lambda x: np.bincount(x).argmax(), axis=1, arr=weight)
    diversity_heuristic[unique_weights] = 1
    
    # Combine the different heuristics
    heuristic = heuristic * sparsity_heuristic * diversity_heuristic
    
    # Dynamically adjust heuristics to prevent local optima
    local_optima_check = np.apply_along_axis(lambda x: np.count_nonzero(x <= np.min(x)), axis=1, arr=heuristic)
    heuristic[local_optima_check > 0] = 0
    
    # Balance exploration and exploitation by adjusting the heuristics
    exploration_factor = 1 / (np.max(heuristic) + 1e-8)
    heuristic *= exploration_factor
    
    return heuristic
```
