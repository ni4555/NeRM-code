```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Initialize adaptive parameters
    exploration_rate = 0.1
    exploitation_rate = 0.9
    
    # Calculate heuristic based on a combination of prize-to-weight ratio and sparsity
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        sparsity = np.count_nonzero(weight[i]) / m
        
        # Adaptive balancing between exploration and exploitation
        heuristic[i] = (total_prize / total_weight) * (1 / (1 + sparsity))
        heuristic[i] *= (exploration_rate * (1 / (1 + sparsity))) + (exploitation_rate * (1 / (1 + sparsity)))
    
    # Further adjust heuristics to prevent local optima
    # Introduce randomness to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    heuristic += random_factor * 0.1
    
    # Normalize the heuristic values to ensure they are non-negative
    heuristic = np.clip(heuristic, 0, None)
    
    return heuristic
```
