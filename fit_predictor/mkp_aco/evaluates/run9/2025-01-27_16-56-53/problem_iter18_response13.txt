```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and weight sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Introduce diversity factor
    unique_weights = np.sum(weight < np.mean(weight, axis=0), axis=0)
    diversity_factor = unique_weights.sum() / (n * m)
    heuristic *= diversity_factor
    
    # Adaptive exploration strategy based on the average heuristic
    avg_heuristic = heuristic.mean()
    adaptive_exploration = 1 / (1 + avg_heuristic)
    heuristic *= adaptive_exploration
    
    # Penalize items with excessive weight
    excessive_weight_threshold = m * 0.2
    excessive_weight_items = weight.sum(axis=1) > excessive_weight_threshold
    heuristic[excessive_weight_items] = 0
    
    # Normalize the heuristic values to ensure a proper scale
    min_heuristic = np.min(heuristic)
    max_heuristic = np.max(heuristic)
    heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Mutation to enhance diversity
    mutation_rate = 0.01
    mutation_strength = np.random.rand(n) * mutation_rate
    mutation = mutation_strength * (np.random.rand(n) - 0.5)
    heuristic += mutation
    
    # Clip the heuristic values to ensure they remain within a valid range
    heuristic = np.clip(heuristic, 0, 1)
    
    return heuristic
```
