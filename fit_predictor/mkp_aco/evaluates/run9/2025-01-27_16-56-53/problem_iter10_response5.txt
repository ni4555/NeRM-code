```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on multiple factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        weight_sparsity = 1 - (np.sum(weight[i]) / m)
        value_to_weight_ratio = prize[i] / np.sum(weight[i])
        diversity_factor = np.sum(weight[i] < np.mean(weight, axis=0))
        heuristic[i] = weight_sparsity * value_to_weight_ratio * diversity_factor
    
    # Introduce a temperature-based exploration factor
    temperature = np.exp(-np.sum(weight, axis=1) / m)
    heuristic *= temperature
    
    # Further refine heuristic to favor diversity
    for i in range(n):
        total_weight = np.sum(weight[i])
        heuristic[i] *= (1 / (1 + total_weight)) ** (m - diversity_factor)
    
    # Adaptive exploration based on current heuristic
    exploration_factor = 1 / (heuristic + 1e-6)  # Add small value to avoid division by zero
    heuristic *= exploration_factor
    
    # Mutation to encourage diversity
    mutation_factor = np.random.rand(n)
    mutation_factor = mutation_factor / mutation_factor.sum() * np.exp(-heuristic / heuristic.sum())
    heuristic *= mutation_factor
    
    # Normalize to ensure values are between 0 and 1
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    # Set suboptimal items to zero to focus on high-value solutions
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    return heuristic
```
