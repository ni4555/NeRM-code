```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = total_prize / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < weight[i].max())
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1) / m)
    adaptive_heuristic = exploration_factor * exploitation_factor * heuristic
    
    # Introduce adaptive weights based on heuristic sum
    heuristic_sum = heuristic.sum()
    adaptive_weight = heuristic_sum / n
    heuristic *= adaptive_weight
    
    # Introduce controlled randomness to promote exploration
    random_noise = np.random.normal(0, heuristic.std() / 10, size=n)
    heuristic += random_noise
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < heuristic.max() / 10] = 0
    weighted_heuristic = np.sum(weight, axis=1)
    heuristic[weighted_heuristic > m * 0.8] = 0
    
    # Dynamic adjustment to avoid local optima
    threshold = np.percentile(heuristic, 90)
    high_weight_threshold = m * 0.8
    heuristic[(heuristic < threshold) | (np.sum(weight, axis=1) > high_weight_threshold)] = 0
    
    # Apply dynamic adjustment to prevent local optima
    dynamic_adjustment = np.exp(-np.abs(heuristic - np.max(heuristic)))
    heuristic *= dynamic_adjustment
    
    return heuristic
```
