```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on individual item properties
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Incorporate diversity by penalizing items that are too similar
    diversity_factor = np.zeros(n)
    for i in range(n):
        for j in range(i + 1, n):
            if np.array_equal(weight[i], weight[j]):
                diversity_factor[i] += 1
                diversity_factor[j] += 1
    heuristic -= diversity_factor
    
    # Dynamically adjust heuristic based on cumulative performance
    cumulative_performance = np.cumsum(heuristic)
    heuristic *= (cumulative_performance / cumulative_performance[-1])
    
    # Apply threshold for exploration-exploitation balance
    threshold = heuristic.max() / 10
    heuristic[heuristic < threshold] = 0
    
    # Set low-value items and those with high total weight to zero
    weight_threshold = m * 0.8
    heuristic[weight.sum(axis=1) > weight_threshold] = 0
    
    return heuristic
```
