```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = total_prize / (total_weight + 1)  # Adding 1 to avoid division by zero
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    # High-value to weight ratio and weight sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        # Use a diversity factor that increases with the number of dimensions
        # that are not at the maximum weight for the item
        diversity_factor = 1
        max_weight = np.max(weight[i])
        for j in range(m):
            if weight[i, j] < max_weight:
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < np.max(heuristic) / 10] = 0
    heuristic[total_weight > m * 0.8] = 0
    
    return heuristic
```
