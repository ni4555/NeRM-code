```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)

    # Calculate heuristic based on a combination of factors using vectorized operations
    total_prize = np.sum(prize[:, np.newaxis] * weight, axis=1)
    total_weight = np.sum(weight, axis=1)
    heuristic = total_prize / total_weight / (1 + total_weight)

    # Incorporate sparsity by penalizing low-value or high-weight items
    value_to_weight_ratio = prize / total_weight
    weight_sparsity = 1 - (total_weight / m)
    heuristic *= value_to_weight_ratio * weight_sparsity

    # Further refine the heuristic to favor diversity in selected items
    diversity_factor = (weight < weight[:, np.newaxis].max()).sum(axis=1)
    heuristic *= diversity_factor

    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1) / m)
    adaptive_heuristic = exploration_factor * exploitation_factor * heuristic

    # Introduce adaptive weights based on heuristic sum
    heuristic_sum = heuristic.sum()
    adaptive_weight = heuristic_sum / n
    heuristic *= adaptive_weight

    # Set low-value items and those with high total weight to zero
    threshold = heuristic.max() / 10
    heuristic[heuristic < threshold] = 0
    weighted_heuristic = np.sum(weight, axis=1)
    heuristic[weighted_heuristic > m * 0.8] = 0

    return heuristic
```
