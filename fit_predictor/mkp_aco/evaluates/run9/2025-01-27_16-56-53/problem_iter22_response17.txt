```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = total_prize / total_weight
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < weight[i].max())
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1) / m)
    adaptive_heuristic = exploration_factor * exploitation_factor * heuristic
    
    # Introduce an adaptive weight based on heuristic sum
    heuristic_sum = heuristic.sum()
    adaptive_weight = heuristic_sum / n
    heuristic *= adaptive_weight
    
    # Introduce mutation to further prevent local optima by randomly flipping the heuristics
    mutation_factor = np.random.rand(n)
    mutation_factor = mutation_factor * 2 - 1  # Scale mutation factor to -1 or 1
    heuristic += mutation_factor * adaptive_heuristic
    
    # Normalize the heuristics to keep the sum of selected items within weight constraints
    total_weight = weight.sum(axis=1)
    heuristic = heuristic / total_weight.sum()
    
    # Incorporate additional sparsity to avoid overfitting
    heuristic[adaptive_heuristic < adaptive_heuristic.max() / 10] = 0
    
    # Introduce dynamic adjustment factors to fine-tune the heuristic values
    # Adjust for items with high total weight to prevent overloading the knapsack
    high_weight_penalty = weight.sum(axis=1) > m * 0.9
    heuristic[high_weight_penalty] *= 0.5
    
    # Adjust for items with low value to weight ratio to avoid selecting less valuable items
    low_value_to_weight_ratio = prize / weight.sum(axis=1) < prize.max() / 10
    heuristic[low_value_to_weight_ratio] *= 0.5
    
    return heuristic
```
