```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on logarithmic normalization and adaptive factor
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        if np.sum(weight[i]) == 0:  # Handle the case of no weight to balance out
            total_weight = 1  # Assign a weight of 1 for uniformity
        else:
            total_weight = np.sum(weight[i])
        log_ratio = np.log(total_prize / total_weight)
        heuristic[i] = log_ratio / (1 + log_ratio)
    
    # Adjust for sparsity and weight constraints
    sparsity_factor = (m - np.count_nonzero(weight[:, i])) / m
    for i in range(n):
        heuristic[i] *= sparsity_factor
    
    # Introduce diversity by considering the minimum weight for each dimension
    diversity_factor = np.min(weight, axis=1).sum() / np.sum(weight, axis=1)
    heuristic *= diversity_factor
    
    # Implement exploration-exploitation mechanism
    exploration_exploitation_factor = np.random.rand(n)
    heuristic *= exploration_exploitation_factor
    
    # Further refine the heuristic by penalizing high-weight items
    weight_penalty = weight.sum(axis=1)
    heuristic *= 1 / (1 + weight_penalty)
    
    # Normalize the heuristic for all items
    heuristic /= np.max(heuristic)
    
    # Set low-value or non-promising elements to zero
    heuristic[heuristic < 0.1] = 0
    
    return heuristic
```
