```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight if total_weight > 0 else 0
    
    # Incorporate diversity by favoring items with unique weights
    diversity_heuristic = np.zeros(n)
    for i in range(n):
        diversity_factor = np.sum(weight[i] == np.max(weight[i]))
        diversity_heuristic[i] = diversity_factor
    
    # Combine the value-to-weight heuristic with the diversity heuristic
    heuristic = (heuristic + diversity_heuristic) / 2
    
    # Add a penalty for sparsity by encouraging items to distribute their weight
    sparsity_heuristic = np.zeros(n)
    for i in range(n):
        sparsity_factor = (np.sum(weight[i] == 0) / m) ** -1 if np.sum(weight[i] == 0) > 0 else 1
        sparsity_heuristic[i] = sparsity_factor
    heuristic *= sparsity_heuristic
    
    # Normalize the heuristics to ensure they sum to 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
