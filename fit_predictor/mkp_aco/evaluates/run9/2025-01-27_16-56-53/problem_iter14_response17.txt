```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)

    # Calculate heuristic based on a combination of factors
    total_prize_weight_ratio = (prize * weight).sum(axis=1) / weight.sum(axis=1)
    heuristic = total_prize_weight_ratio / (1 + weight.sum(axis=1))

    # Incorporate sparsity by penalizing low-value or high-weight items
    value_to_weight_ratio = prize / weight.sum(axis=1)
    weight_sparsity = 1 - (weight.sum(axis=1) / m)
    heuristic *= value_to_weight_ratio * weight_sparsity

    # Further refine the heuristic to favor diversity in selected items
    diversity_factor = np.sum(weight < weight.max(axis=1), axis=1)
    heuristic *= diversity_factor

    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + weight.sum(axis=1))
    adaptive_heuristic = exploration_factor + exploitation_factor * heuristic

    # Introduce mutation for diversity
    mutation_rate = 0.1
    mutation_factor = np.random.rand(n) < mutation_rate
    mutation_factor *= (np.random.rand(n) > heuristic.mean())
    adaptive_heuristic[mutation_factor] = adaptive_heuristic[mutation_factor] * np.random.rand(n)[mutation_factor]

    # Normalize the heuristic to ensure that it is within a certain range
    heuristic_min = np.min(adaptive_heuristic)
    heuristic_max = np.max(adaptive_heuristic)
    heuristic = (adaptive_heuristic - heuristic_min) / (heuristic_max - heuristic_min)

    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < 0.1] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0

    return heuristic
```
