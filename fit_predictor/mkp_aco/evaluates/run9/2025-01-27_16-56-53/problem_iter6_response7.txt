```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        heuristic[i] = value_to_weight_ratio
    
    # Normalize by the sum of all weights to ensure compliance with weight limits
    heuristic /= weight.sum()
    
    # Incorporate a diversity factor that encourages varied item selection
    for i in range(n):
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] == 1:
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Apply a sparsity factor to penalize high-weight items
    for i in range(n):
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] *= weight_sparsity
    
    # Use an adaptive exploration factor to balance exploration and exploitation
    exploration_factor = np.exp(-np.sum(heuristic))
    heuristic *= exploration_factor
    
    # Adjust heuristics dynamically to escape local optima
    threshold = np.percentile(heuristic, 10)
    heuristic[heuristic < threshold] = 0
    
    # Penalize items with a high total weight relative to the number of dimensions
    high_weight_penalty = weight.sum(axis=1) > m * 0.5
    heuristic[high_weight_penalty] = 0
    
    return heuristic
```
