```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        heuristic[i] = value_to_weight_ratio
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] *= sparsity
    
    # Refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.zeros(n)
    for i in range(n):
        exploitation_factor[i] = 1 / (1 + weight[i].sum())
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Normalize and penalize outliers
    heuristic = np.clip(heuristic, 0.1, 0.9)
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
