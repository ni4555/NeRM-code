```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on total prize to weight ratio and sparsity
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        value_to_weight_ratio = total_prize / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < weight[i].max())
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + weight.sum(axis=1))
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Set low-value items and those with high total weight to zero
    low_value_threshold = heuristic.max() / 10
    high_weight_threshold = m * 0.8
    heuristic[heuristic < low_value_threshold] = 0
    heuristic[weight.sum(axis=1) > high_weight_threshold] = 0
    
    return adaptive_heuristic
```
