```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        heuristic[i] = value_to_weight_ratio
    
    # Normalize heuristics
    heuristic /= heuristic.sum()
    
    # Incorporate sparsity by penalizing items with high weight
    for i in range(n):
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] *= weight_sparsity
    
    # Adjust heuristic based on adaptability to exploration
    exploration_factor = np.random.rand()
    heuristic *= (1 + exploration_factor * (1 - heuristic))
    
    # Dynamically adjust thresholds based on current heuristic distribution
    threshold = heuristic.max() / 10
    heuristic[heuristic < threshold] = 0
    
    # Refine heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Normalize again to ensure that the sum of heuristics is 1
    heuristic /= heuristic.sum()
    
    return heuristic
```
