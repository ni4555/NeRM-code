```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Introduce diversity factor
    diversity_factor = np.sum(weight < np.mean(weight, axis=0), axis=0).sum() / (n * m)
    heuristic *= diversity_factor
    
    # Adaptive exploration strategy based on current heuristic values
    current_state_factor = 1 / (1 + np.sum(heuristic**2))
    adaptive_heuristic = heuristic * current_state_factor
    
    # Normalize the heuristic values to avoid dominance
    min_heuristic = np.min(heuristic)
    max_heuristic = np.max(heuristic)
    normalized_heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Combine adaptive heuristic with normalized heuristic
    combined_heuristic = normalized_heuristic * adaptive_heuristic
    
    return combined_heuristic
```
