```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and sparsity
    for i in range(n):
        total_weight = weight[i].sum()
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Introduce diversity by favoring items with more underutilized dimensions
    for i in range(n):
        diversity_factor = np.sum(weight[i] < weight[i].max() / 2)
        heuristic[i] *= diversity_factor / m
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.zeros(n)
    for i in range(n):
        exploitation_factor[i] = 1 / (1 + weight[i].sum())
    adaptive_heuristic = exploration_factor + exploitation_factor * heuristic
    
    # Introduce mutation for diversity and to prevent local optima
    mutation_rate = 0.1
    for i in range(n):
        if np.random.rand() < mutation_rate:
            # Mutate the heuristic value slightly to introduce randomness
            heuristic[i] += np.random.rand() * (heuristic.max() - heuristic.min())
    
    # Set low-value items and those with high total weight to zero
    threshold = heuristic.max() / 10
    heuristic[heuristic < threshold] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return adaptive_heuristic
```
