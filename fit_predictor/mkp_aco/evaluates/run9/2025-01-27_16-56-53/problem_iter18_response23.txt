```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / (total_weight + 1)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    heuristic *= (prize / np.sum(weight, axis=1)) * (np.sum(weight, axis=1) / m)
    
    # Further refine the heuristic to favor diversity in selected items
    diversity_factor = np.array([sum(w < w.max()) for w in weight])
    heuristic *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1))
    adaptive_heuristic = exploration_factor + exploitation_factor * heuristic
    
    # Introduce an adaptive mechanism to adjust weights dynamically
    heuristic *= (prize / np.sum(weight, axis=1))
    
    # Introduce a mechanism to prevent local optima
    for i in range(n):
        similarity_factor = np.dot(weight[i], weight[i]) / np.dot(weight[i], weight)
        heuristic[i] *= 1 / (1 + similarity_factor)
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < np.max(heuristic) / 10] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return adaptive_heuristic
```
