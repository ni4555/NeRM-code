```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] *= value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < np.max(weight[i]))
        diversity_factor /= m  # Normalize by the number of dimensions
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1))
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Introduce mutation for diversity with a fixed mutation rate
    mutation_rate = 0.1
    mutation_threshold = heuristic.max() * 0.05  # Set a threshold for mutation
    mutation_indices = np.where(heuristic < mutation_threshold)[0]
    np.random.shuffle(mutation_indices)
    mutation_indices = mutation_indices[:int(n * mutation_rate)]
    heuristic[mutation_indices] = np.random.rand(len(mutation_indices))
    
    # Apply more granular weight-based penalties
    for i in range(n):
        if np.sum(weight[i] > 0.8) > 0:
            heuristic[i] *= 0.9  # Penalize items that are too heavy in any dimension
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < heuristic.max() / 10] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return adaptive_heuristic
```
