```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + weight[i].sum())
    
    # Incorporate adaptive exploration and exploitation by prioritizing diversity
    diversity_heuristic = np.zeros(n)
    for i in range(n):
        diversity_factor = 0
        for j in range(m):
            if weight[i, j] == weight[i].max():
                diversity_factor += 1
        diversity_heuristic[i] = diversity_factor
    
    # Use a weighted sum to balance the original heuristic with the diversity heuristic
    combined_heuristic = heuristic + diversity_heuristic
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    # High-value to weight ratio and weight sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = combined_heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < combined_heuristic.max() / 10] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    # Dynamically adjust the heuristics to favor exploration over exploitation in case of local optima
    local_optima_heuristic = np.zeros(n)
    for i in range(n):
        local_optima = (heuristic > heuristic[i]).mean()
        local_optima_heuristic[i] = 1 - local_optima
    heuristic = (heuristic + local_optima_heuristic) / 2
    
    # Normalize the heuristics to ensure they sum to 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
