```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Vectorized calculation of total prize and weight for each item
    total_prize = np.dot(prize, weight.sum(axis=1))
    total_weight = weight.sum(axis=1)
    value_to_weight_ratio = total_prize / total_weight
    weight_sparsity = 1 - (total_weight / m)
    
    # Adaptive exploration-exploitation factor using a sigmoid function
    exploration_exploitation_factor = 1 / (1 + np.exp((np.zeros(n) - np.mean(value_to_weight_ratio)) / 0.1))
    
    # Normalize the heuristic to account for all factors
    heuristic = (value_to_weight_ratio * weight_sparsity * exploration_exploitation_factor)
    
    # Dynamically adjust thresholds for dynamic selection
    threshold = np.percentile(heuristic, 20)
    heuristic[heuristic < threshold] = 0
    
    # Introduce controlled randomness to promote exploration
    random_noise = np.random.normal(0, heuristic.std() / 10, size=n)
    heuristic += random_noise
    
    # Ensure that the heuristic is non-negative
    heuristic = np.clip(heuristic, 0, None)
    
    return heuristic
```
