```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        heuristic[i] = value_to_weight_ratio
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] *= weight_sparsity
    
    # Balance multi-aspect evaluation with a diversity factor
    for i in range(n):
        diversity_factor = 0
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration factor to balance exploitation and exploration
    exploration_factor = np.exp(heuristic - heuristic.max())
    exploration_factor /= exploration_factor.sum()
    heuristic *= exploration_factor
    
    # Dynamically adjust thresholds and focus on valuable subsets
    threshold = heuristic.mean()
    heuristic[heuristic < threshold] = 0
    
    # Introduce randomness to prevent local optima
    random_factor = np.random.rand(n)
    heuristic *= (1 + random_factor * (1 - heuristic))
    
    # Normalize heuristics to ensure they are in the range [0, 1]
    heuristic /= heuristic.max()
    
    # Ensure compliance with weight constraints by penalizing heavily weighted items
    for i in range(n):
        if weight[i].sum() > m * 0.8:
            heuristic[i] = 0
    
    return heuristic
```
