```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate heuristic based on sparsity
    sparsity = 1 - (np.sum(weight, axis=1) / m)
    
    # Calculate heuristic based on diversity
    diversity_factor = np.sum(weight < np.max(weight, axis=1), axis=1) / m
    
    # Combine all factors
    heuristic = value_to_weight_ratio * sparsity * diversity_factor
    
    # Introduce an adaptive exploration strategy
    exploration_factor = 1 / (1 + np.sum(weight, axis=1))
    heuristic *= exploration_factor
    
    # Balance exploration and exploitation using a performance-based adjustment
    performance_factor = prize / (np.sum(weight, axis=1) + 1)
    heuristic *= performance_factor
    
    # Set low-value items and those with high total weight to zero
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    heuristic[heuristic < heuristic.max() / 10] = 0
    
    return heuristic
```
