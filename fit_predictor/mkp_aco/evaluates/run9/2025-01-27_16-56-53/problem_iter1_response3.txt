```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Combine factors for heuristic calculation
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Calculate heuristic based on weighted prize, sparsity, and dimension-specific weight distribution
        heuristic[i] = (total_prize / total_weight) * (np.count_nonzero(weight[i]) / m)
        # Sparsify by setting low heuristic values to zero
        if heuristic[i] < 0.5:
            heuristic[i] = 0
    
    # Adjust heuristics based on adaptive mechanism
    # Here, we introduce a penalty for high weight concentration
    for i in range(n):
        concentration_penalty = np.mean(weight[i] ** 2)
        heuristic[i] *= (1 - concentration_penalty)
    
    return heuristic
```
