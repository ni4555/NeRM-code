```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] *= value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < weight[i].max())
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.mean(weight.sum(axis=1)))
    adaptive_heuristic = exploration_factor * exploitation_factor * heuristic
    
    # Introduce controlled randomness to promote exploration
    noise_variance = heuristic.std() / 2
    random_noise = np.random.normal(0, noise_variance, size=n)
    heuristic += random_noise
    
    # Introduce a more nuanced penalty for heavy items
    max_weight = np.max(weight.sum(axis=1))
    heuristic[weight.sum(axis=1) > max_weight] *= 0.5
    
    # Introduce randomness based on the variance of the heuristic, adjusted by the current number of items
    variance_threshold = heuristic.std() / np.sqrt(n / 2)
    random_noise = np.random.normal(0, variance_threshold, size=n)
    heuristic += random_noise
    
    # Refine the heuristic based on the sparsity of each item
    sparsity_threshold = m / 2
    sparsity_factor = (m - np.sum(weight == max(weight))) / sparsity_threshold
    heuristic *= sparsity_factor
    
    return heuristic
```
