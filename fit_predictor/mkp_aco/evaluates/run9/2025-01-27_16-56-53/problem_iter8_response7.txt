```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity and diversity
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    diversity_factor = np.array([np.sum(weight[i] < np.max(weight[i])) for i in range(n)])
    heuristic = heuristic * value_to_weight_ratio * diversity_factor
    
    # Normalize heuristics to ensure a proper scale
    heuristic /= np.sum(heuristic)
    
    # Dynamically adjust heuristics based on cumulative performance
    cumulative_performance = np.cumsum(heuristic)
    heuristic *= cumulative_performance / cumulative_performance[-1]
    
    # Balance exploration and exploitation
    exploration_factor = 1 / (np.max(heuristic) + 1e-8)
    heuristic *= exploration_factor
    
    # Set low-value items and those with high total weight to zero
    weight_threshold = 0.8
    heuristic[weight.sum(axis=1) > m * weight_threshold] = 0
    
    # Dynamically adjust the heuristics to favor exploration over exploitation in case of local optima
    local_optima_heuristic = np.zeros(n)
    for i in range(n):
        local_optima = (heuristic > heuristic[i]).mean()
        local_optima_heuristic[i] = 1 - local_optima
    heuristic = (heuristic + local_optima_heuristic) / 2
    
    return heuristic
```
