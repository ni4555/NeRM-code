```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Dynamically adjust the heuristic based on adaptive mechanisms
    # Priority for valuable subsets
    priority = heuristic / np.sum(heuristic)
    for i in range(n):
        heuristic[i] *= priority[i]
    
    # Ensure diversity and balance exploration-exploitation
    for i in range(n):
        diversity_factor = (1 / (1 + np.sum(weight[i] ** 2)))
        heuristic[i] *= diversity_factor
    
    # Further refine the heuristic to penalize heavy items and normalize
    for i in range(n):
        if total_weight > m:
            heuristic[i] /= total_weight
    
    # Apply threshold and penalize low-value and high-weight items
    threshold = heuristic.max() / 10
    heuristic[heuristic < threshold] = 0
    heuristic[total_weight > m * 0.8] = 0
    
    return heuristic
```
