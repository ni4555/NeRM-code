```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on factors like prize-to-weight ratio, sparsity, and diversity
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        weight_sparsity = 1 - (np.count_nonzero(weight[i]) / m)
        value_to_weight_ratio = prize[i] / total_weight
        
        # Calculate a diversity factor
        diversity_factor = np.sum(weight[i] < weight[i].max())
        
        # Combine the factors to get a heuristic value
        heuristic[i] = value_to_weight_ratio * weight_sparsity * diversity_factor
    
    # Incorporate an adaptive mechanism to prioritize valuable subsets
    adaptive_factor = np.exp(-np.sum(weight, axis=1))
    heuristic *= adaptive_factor
    
    # Balance exploration and exploitation by setting a threshold based on the 25th percentile
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    # Further refine the heuristic by penalizing items that are too heavy compared to their value
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    # Normalize the heuristics to ensure they are within a reasonable range
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    return heuristic
```
