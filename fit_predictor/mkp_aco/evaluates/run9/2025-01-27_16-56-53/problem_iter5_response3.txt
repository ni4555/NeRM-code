```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Introduce an adaptive mechanism to balance exploration and exploitation
    exploration_rate = np.random.rand(n)
    exploitation_factor = heuristic / (heuristic.max() + 1e-10)
    heuristic = exploration_rate * exploitation_factor
    
    # Adjust thresholds dynamically based on current heuristic distribution
    threshold = heuristic.mean() * 1.5
    heuristic[heuristic < threshold] = 0
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Normalize heuristics to focus on multi-factor evaluation
    heuristic /= heuristic.sum()
    
    return heuristic
```
