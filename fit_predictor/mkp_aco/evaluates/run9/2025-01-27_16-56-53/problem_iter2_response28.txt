```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.dot(prize[i], weight[i])
        total_weight = weight[i].sum()
        heuristic[i] = total_prize / total_weight if total_weight != 0 else 0
    
    # Incorporate sparsity by penalizing items with high weight and low value-to-weight ratio
    sparsity_factor = 1 / (1 + weight.sum(axis=1))
    value_to_weight_ratio = prize / weight.sum(axis=1)
    heuristic *= sparsity_factor * value_to_weight_ratio
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] == np.max(weight[i])) / m
        heuristic[i] *= (1 + diversity_factor)
    
    # Adjust heuristics adaptively to balance exploration and exploitation
    adaptive_factor = np.exp(-np.sum(weight**2, axis=1))
    heuristic *= adaptive_factor
    
    # Set items with low heuristic and high total weight to zero
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    high_weight_threshold = m * 0.8
    heuristic[weight.sum(axis=1) > high_weight_threshold] = 0
    
    return heuristic
```
