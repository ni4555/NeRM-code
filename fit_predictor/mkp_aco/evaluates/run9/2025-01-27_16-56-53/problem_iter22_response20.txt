```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value to weight ratio and diversity
    for i in range(n):
        total_weight = np.sum(weight[i])
        heuristic[i] = prize[i] / total_weight
    
    # Incorporate sparsity and diversity
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = np.count_nonzero(weight[i]) / m
        diversity_factor = np.sum(weight[i] < np.max(weight[i]))
        heuristic[i] *= (value_to_weight_ratio * weight_sparsity * diversity_factor)
    
    # Introduce adaptive exploration strategy
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1) / m)
    adaptive_heuristic = exploration_factor * exploitation_factor * heuristic
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < heuristic.max() / 10] = 0
    weighted_heuristic = np.sum(weight, axis=1)
    heuristic[weighted_heuristic > m * 0.8] = 0
    
    return heuristic
```
