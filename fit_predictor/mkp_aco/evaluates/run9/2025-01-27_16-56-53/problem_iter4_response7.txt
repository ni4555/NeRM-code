```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    exploration_factor = np.random.rand(n)  # Random exploration factor for each item
    
    # Calculate heuristic based on the weighted sum of prizes and weights
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight if total_weight != 0 else 0
    
    # Adaptive exploration and exploitation
    # Calculate a balance factor for each item based on its heuristic value
    balance_factor = (1 + np.log(1 + heuristic)) / (1 + np.log(1 + n))
    
    # Adjust heuristic with exploration and exploitation factors
    heuristic = heuristic * balance_factor * exploration_factor
    
    # Incorporate sparsity by penalizing items with high weight relative to their prize
    sparsity_factor = np.mean(heuristic) / (1 + np.sum(weight, axis=1))
    heuristic = heuristic * sparsity_factor
    
    # Further adjust heuristics to prevent local optima
    # Introduce a randomness factor to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    heuristic = heuristic * random_factor
    
    # Adapt heuristics based on item and solution characteristics
    # Prioritize high-value items by increasing their heuristic values
    adaptive_factor = np.exp(-np.sum(weight ** 2, axis=1))
    heuristic *= adaptive_factor
    
    # Set unpromising elements to zero to sparsify
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    return heuristic
```
