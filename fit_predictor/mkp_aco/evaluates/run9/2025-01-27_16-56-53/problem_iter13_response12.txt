```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.dot(prize[i], weight[i])
        total_weight = weight[i].sum()
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate adaptive penalties for items that are too dense in terms of weight
    penalty_factor = np.zeros(n)
    for i in range(n):
        penalty_factor[i] = np.sum(weight[i] > 0.8 * weight[i].max()) / m
        heuristic[i] *= (1 - penalty_factor[i])
    
    # Introduce randomness to promote diversity and avoid local optima
    randomness = np.random.rand(n)
    for i in range(n):
        if randomness[i] < 0.1:  # Randomly change 10% of items
            heuristic[i] *= -1
    
    # Further refine the heuristic to favor diversity in selected items
    diversity_factor = np.zeros(n)
    for i in range(n):
        diversity_factor[i] = np.sum(weight[i] == weight[i].max()) / m
        heuristic[i] *= (1 + diversity_factor[i])
    
    # Normalize heuristics to ensure a proper balance between exploration and exploitation
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
