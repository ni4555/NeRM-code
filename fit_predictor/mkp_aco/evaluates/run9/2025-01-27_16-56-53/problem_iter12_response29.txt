```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        heuristic[i] = prize[i] / weight[i].sum()
    
    # Incorporate sparsity and diversity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        diversity_factor = 1 - np.sum(weight[i] / weight[i].max()) ** 2
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity * diversity_factor
    
    # Adaptive exploration strategy
    temperature = np.exp(-np.sum(weight, axis=1) / m)
    heuristic *= temperature
    
    # Mutation to avoid local optima
    mutation_rate = 0.05
    mutation = np.random.normal(0, mutation_rate, n)
    heuristic += mutation
    
    # Normalize to ensure values are between 0 and 1
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    # Penalize items that are close to the maximum weight limit
    heuristic[weight.sum(axis=1) > m * 0.95] *= 0.5
    
    return heuristic
```
