```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / (total_weight + 1e-8)  # Avoid division by zero
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] *= value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < weight[i].max())
        heuristic[i] *= diversity_factor / m
    
    # Dynamically adjust heuristics based on the average heuristic value
    average_heuristic = np.mean(heuristic)
    heuristic[heuristic < average_heuristic / 2] = 0
    
    # Balance exploration and exploitation by rewarding high-value items
    for i in range(n):
        heuristic[i] *= prize[i] / (np.max(heuristic) + 1e-8)
    
    # Incorporate higher-level performance metrics
    performance_metric = np.sum(heuristic * prize)
    heuristic *= (prize / performance_metric)
    
    # Set low-value items and those with high total weight to zero
    weight_threshold = m * 0.8
    heuristic[weight.sum(axis=1) > weight_threshold] = 0
    
    # Adjust to improve diversity by rewarding items that are not fully utilized in their dimensions
    unused_dimension_factor = np.zeros(n)
    for i in range(n):
        unused_weight = weight[i, weight[i] < weight[i].max()]
        if unused_weight.size > 0:
            unused_dimension_factor[i] = prize[i] / unused_weight.sum()
    heuristic *= unused_dimension_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
