```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio, sparsity, and adaptive exploration-exploitation factor
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        value_to_weight_ratio = total_prize / total_weight if total_weight > 0 else 0
        weight_sparsity = 1 - (total_weight / m)
        
        # Balance exploration and exploitation with an adaptive factor
        exploration_exploitation_factor = 1 / (1 + np.exp((heuristic[i] - heuristic.mean()) / 0.1))
        
        # Normalize the heuristic to account for all factors
        heuristic[i] = (value_to_weight_ratio * weight_sparsity * exploration_exploitation_factor) / (1 + total_weight)
    
    # Dynamic adjustment of thresholds based on heuristic distribution
    mean_heuristic = heuristic.mean()
    std_heuristic = heuristic.std()
    heuristic[heuristic < mean_heuristic - 2 * std_heuristic] = 0
    
    # Introduce controlled randomness for diversity
    random_noise = np.random.normal(0, std_heuristic / 2, size=n)
    heuristic += random_noise
    
    # Ensure that the heuristic is non-negative and capped at a maximum value
    heuristic = np.clip(heuristic, 0, 1)
    
    # Further encourage diversity by reducing the heuristic of items that are too similar
    for i in range(n):
        similarity_factor = 1
        for j in range(i + 1, n):
            if np.allclose(weight[i], weight[j]):
                similarity_factor = 0.5
                break
        heuristic[i] *= similarity_factor
    
    return heuristic
```
