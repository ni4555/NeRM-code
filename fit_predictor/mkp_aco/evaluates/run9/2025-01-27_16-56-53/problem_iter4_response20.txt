```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Calculate normalized item prize per unit weight
    item_prize_per_weight = prize / weight.sum(axis=1)
    
    # Incorporate sparsity factor for each item
    sparsity_factor = 1 - (weight.sum(axis=1) / m)
    
    # Calculate heuristic based on prize per weight and sparsity factor
    heuristic = item_prize_per_weight * sparsity_factor
    
    # Apply adaptive scaling factor that prioritizes high-value items
    adaptive_factor = np.exp(-weight.sum(axis=1))
    heuristic *= adaptive_factor
    
    # Normalize heuristics to maintain balance across all items
    heuristic /= heuristic.sum()
    
    # Sparsify heuristics by setting elements below a certain threshold to zero
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < sparsity_threshold] = 0
    
    return heuristic
```
