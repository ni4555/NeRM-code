```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of normalized factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = total_prize / total_weight if total_weight != 0 else 0
    
    # Incorporate sparsity and diversity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        diversity_factor = np.mean(weight[i] < weight[i].max())
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity * diversity_factor
    
    # Integrate historical performance
    # Assume a historical performance array, which needs to be defined elsewhere
    historical_performance = np.random.rand(n)
    adaptive_factor = historical_performance / historical_performance.sum()
    heuristic *= adaptive_factor
    
    # Balance exploration and exploitation
    exploration_noise = np.random.rand(n)
    exploitation_factor = np.arange(1, n+1) / np.arange(1, n+1).sum()
    heuristic = heuristic * exploitation_factor + exploration_noise * (heuristic.max() - heuristic)
    
    # Apply dynamic adjustment
    heuristic[heuristic < heuristic.max() / 10] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
