```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Diversity factor: favor items with more dimensions less utilized
    diversity_factor = np.sum(weight < np.max(weight, axis=1), axis=1) / m
    
    # Performance factor: encourage higher-value items
    performance_factor = prize / (np.sum(weight, axis=1) + 1)
    
    # Exploration factor: favor items that are less likely to be selected
    exploration_factor = np.sum(weight < np.mean(weight, axis=1), axis=1) / m
    
    # Exploitation factor: favor items with higher value-to-weight ratio
    exploitation_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine all factors using a weighted sum approach
    heuristic = (value_to_weight_ratio * 0.6 +
                 diversity_factor * 0.2 +
                 performance_factor * 0.1 +
                 exploration_factor * 0.05 +
                 exploitation_factor * 0.05)
    
    # Dynamically adjust heuristics based on cumulative performance
    cumulative_performance = np.cumsum(heuristic)
    heuristic *= cumulative_performance / cumulative_performance[-1]
    
    # Set items with high total weight to a lower value to prevent over-favoring
    weight_threshold = 0.8
    heuristic[weight.sum(axis=1) > m * weight_threshold] *= 0.5
    
    # Normalize the heuristics to ensure they sum to 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
