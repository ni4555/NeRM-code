```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        item_heuristic = total_prize / total_weight if total_weight != 0 else 0
        
        # Incorporate sparsity factor
        sparsity_factor = (1 - (total_weight / m))
        
        # Use adaptive factor to adjust heuristics
        adaptive_factor = np.exp(-np.sum(weight, axis=1))
        adaptive_factor[i] *= (prize[i] / total_prize)
        
        # Combine heuristics with factors and normalize
        heuristic[i] = item_heuristic * sparsity_factor * adaptive_factor[i]
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)
    heuristic = heuristic * random_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
