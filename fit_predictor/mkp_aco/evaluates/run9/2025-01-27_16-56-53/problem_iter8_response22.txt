```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and sparsity
    for i in range(n):
        total_weight = weight[i].sum()
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Reward diversity by considering underutilized dimensions
    for i in range(n):
        diversity_factor = np.sum(weight[i] < weight[i].max() / 2)
        heuristic[i] *= diversity_factor / m
    
    # Balance exploration and exploitation by adjusting based on current state
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + weight.sum(axis=1))
    adaptive_heuristic = exploration_factor + exploitation_factor * heuristic
    
    # Normalize to ensure positive values and avoid numerical issues
    min_heuristic = np.min(adaptive_heuristic)
    adaptive_heuristic -= min_heuristic
    adaptive_heuristic /= np.max(adaptive_heuristic) - min_heuristic
    
    # Penalize items that exceed the weight threshold
    weight_threshold = m * 0.8
    adaptive_heuristic[weight.sum(axis=1) > weight_threshold] = 0
    
    return adaptive_heuristic
```
