```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Introduce randomness to enhance diversity
    random_factor = np.random.rand(n)
    
    # Use a diversity factor that increases with the number of dimensions
    # that are not at the maximum weight for the item
    diversity_factor = np.zeros(n)
    for i in range(n):
        diversity_count = np.sum(weight[i] < weight[i].max())
        diversity_factor[i] = diversity_count / m
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + total_weight)
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Combine all factors to refine the heuristic
    refined_heuristic = (random_factor + diversity_factor) * adaptive_heuristic
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < np.mean(heuristic) / 10] = 0
    heuristic[total_weight > m * 0.8] = 0
    
    return refined_heuristic
```
