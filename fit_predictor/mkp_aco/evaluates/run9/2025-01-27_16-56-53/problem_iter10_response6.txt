```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and sparsity
    for i in range(n):
        total_weight = weight[i].sum()
        value_to_weight_ratio = prize[i] / total_weight if total_weight > 0 else 0
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Introduce an adaptive exploration-exploitation mechanism
    exploration_exploitation_factor = 1 / (1 + np.exp((heuristic - np.mean(heuristic)) / 0.1))
    heuristic *= exploration_exploitation_factor
    
    # Dynamically adjust the heuristic based on the distribution of heuristic values
    median_heuristic = np.median(heuristic)
    heuristic[heuristic < median_heuristic] *= 0.5
    
    # Introduce controlled randomness to promote exploration
    random_noise = np.random.normal(0, heuristic.std() / 5, size=n)
    heuristic += random_noise
    
    # Normalize the heuristic to ensure positive values and avoid numerical issues
    min_heuristic = np.min(heuristic)
    max_heuristic = np.max(heuristic)
    heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Penalize items that exceed the weight threshold
    weight_threshold = m * 0.8
    heuristic[weight.sum(axis=1) > weight_threshold] = 0
    
    return heuristic
```
