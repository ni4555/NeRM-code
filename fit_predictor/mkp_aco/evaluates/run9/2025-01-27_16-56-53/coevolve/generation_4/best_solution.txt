Fitness: inf

Description:
Optimizing a multi-dimensional knapsack problem through the integration of an adaptive metaheuristic-based stochastic sampling algorithm. The goal is to maximize the total reward by selecting item subsets while adhering to stringent weight limits across multiple dimensions. The algorithm employs a balance of exploration and exploitation, prioritizing high-value item combinations, and dynamically adjusts heuristics to ensure compliance with dimension-specific weight constraints. This approach mitigates the risk of local optima and enhances overall performance by continuously exploring the solution space and adapting to new insights.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize and weight to ensure they are on the same scale
    normalized_prize = prize / np.linalg.norm(prize)
    normalized_weight = weight / np.linalg.norm(weight, axis=1)[:, np.newaxis]
    
    # Calculate the heuristic value as the ratio of normalized prize to normalized weight
    heuristics = normalized_prize / normalized_weight
    
    # Adjust heuristics to ensure non-negative values and avoid division by zero
    heuristics[weight.sum(axis=1) > 1] = -np.inf
    
    # Return the heuristic values for each item
    return heuristics