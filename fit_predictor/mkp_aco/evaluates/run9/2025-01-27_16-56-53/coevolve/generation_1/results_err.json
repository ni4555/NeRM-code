{
  "generation": 1,
  "description": "Optimizing the selection of diverse item subsets for maximizing combined reward in Multi-dimensional Knapsack Problems through adaptive heuristic-based stochastic solution sampling. This approach integrates advanced combinatorial optimization techniques, incorporating metaheuristics for enhanced exploration of the solution space, while ensuring adherence to stringent multi-dimensional weight limits and prioritizing high-value item combinations for optimal prize accumulation.",
  "failed_solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    max_prize = np.max(prize)\n    max_weight = np.sum(weight, axis=1).max()\n    \n    heuristic_values = np.zeros(n)\n    \n    for i in range(n):\n        current_prize = prize[i]\n        current_weight = np.sum(weight[i])\n        if current_prize / current_weight >= max_prize / max_weight:\n            heuristic_values[i] = 1\n    \n    return heuristic_values",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape\n    if m != 1:\n        raise ValueError(\"weight should have dimension 1\")\n    \n    # Initialize heuristic array with 0\n    heuristics = np.zeros(n)\n    \n    # Calculate utility for each item (prize/weight)\n    utility = prize / weight\n    \n    # Apply a greedy heuristic based on utility\n    sorted_indices = np.argsort(-utility)\n    for i in sorted_indices:\n        # Check if adding item i violates the dimension constraint\n        if np.any(weight[i] > 1):\n            raise ValueError(\"weight should be 1 for all items\")\n        heuristics[i] = 1 / utility[i]\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    # Initialize a list of promises\n    promises = [0] * n\n    \n    # Use a priority queue to store items based on their total value-to-weight ratio\n    priority_queue = [(prize[i] / weight[i].sum(), i) for i in range(n)]\n    heapq.heapify(priority_queue)\n    \n    # Keep adding items to the solution until all dimensions are satisfied\n    while priority_queue and all(promises):\n        value_to_weight_ratio, item_index = heapq.heappop(priority_queue)\n        if weight[item_index].sum() < 1:\n            promises[item_index] = value_to_weight_ratio\n            break\n    \n    # Return the heuristics as a numpy array\n    return np.array(promises)",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    }
  ]
}