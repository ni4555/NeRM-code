{
  "generation": 0,
  "description": "Solving Multiple Knapsack Problems (MKP) through stochastic solution sampling based on \"heuristics\". MKP involves selecting a subset of items to maximize the total prize collected, subject to multi-dimensional maximum weight constraints.",
  "failed_solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    m = weight.shape[1]\n    heuristics = np.zeros_like(prize)\n    for i in range(prize.shape[0]):\n        heuristics[i] = prize[i] / np.sum(weight[i])\n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Normalize the prize by the sum of prizes to get a relative importance\n    normalized_prize = prize / np.sum(prize)\n    \n    # Calculate the total weight for each item across all dimensions\n    total_weight = np.sum(weight, axis=1)\n    \n    # Calculate the heuristic value as the ratio of normalized prize to total weight\n    heuristic = normalized_prize / (total_weight + 1e-10)  # Adding a small constant to avoid division by zero\n    \n    return heuristic",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Create a list of tuples containing (prize, weight sum, index)\n    items = [(prize[i], np.sum(weight[i]), i) for i in range(prize.shape[0])]\n    \n    # Sort the items based on the prize descending and weight sum ascending\n    sorted_items = sorted(items, key=lambda x: (-x[0], x[1]))\n    \n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros(prize.shape)\n    \n    # Assign a score to each item based on its sorted position\n    for rank, item in enumerate(sorted_items, start=1):\n        heuristics[item[2]] = rank\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    \n    # Calculate the maximum prize for each item\n    max_prize = np.max(prize, axis=1)\n    \n    # Normalize the prize for each item by its max prize\n    normalized_prize = prize / max_prize[:, np.newaxis]\n    \n    # Calculate the heuristic as the normalized prize minus the sum of weights\n    heuristics = normalized_prize - np.sum(weight, axis=1)\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Traceback (most recent call last):\n  File \"E:\\Projects\\CO\\reevo-main_1/problems/mkp_aco/eval.py\", line 58, in <module>\n    obj = solve(prize, weight)\n          ^^^^^^^^^^^^^^^^^^^^\n  File \"E:\\Projects\\CO\\reevo-main_1/problems/mkp_aco/eval.py\", line 23, in solve\n    heu = heuristics(prize.copy(), weight.copy()) + 1e-9\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"E:\\Projects\\CO\\reevo-main_1\\problems\\mkp_aco\\gpt.py\", line 9, in heuristics_v2\n    max_prize = np.max(prize, axis=1)\n                ^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Anaconda3\\envs\\reevo\\Lib\\site-packages\\numpy\\core\\fromnumeric.py\", line 2810, in max\n    return _wrapreduction(a, np.maximum, 'max', axis, None, out,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Anaconda3\\envs\\reevo\\Lib\\site-packages\\numpy\\core\\fromnumeric.py\", line 88, in _wrapreduction\n    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnumpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1\n",
      "stdout_file": "coevolve\\generation_0\\stdout_1.txt",
      "code_file": "coevolve\\generation_0\\code_1.py"
    }
  ]
}