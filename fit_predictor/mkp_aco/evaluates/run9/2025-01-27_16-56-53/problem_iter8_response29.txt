```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio, sparsity, and diversity
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        value_to_weight_ratio = prize[i] / total_weight if total_weight > 0 else 0
        weight_sparsity = 1 - (total_weight / m)
        diversity_factor = np.prod((weight[i] < np.max(weight[i])).astype(float))
        
        # Normalize the heuristic to account for all factors
        heuristic[i] = (value_to_weight_ratio * weight_sparsity * diversity_factor) / (1 + weight[i].sum())
    
    # Introduce exploration-exploitation by balancing exploitation with cumulative performance
    cumulative_performance = np.cumsum(heuristic)
    exploration_exploitation_factor = 1 / (1 + np.exp((heuristic - np.mean(heuristic)) / 0.1))
    heuristic *= exploration_exploitation_factor * cumulative_performance / cumulative_performance[-1]
    
    # Introduce randomness to prevent convergence to local optima
    random_noise = np.random.normal(0, np.std(heuristic) / 10, size=n)
    heuristic += random_noise
    
    # Normalize the heuristics to ensure they sum to 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
