```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value to weight ratio and sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Incorporate an adaptive factor to prioritize valuable items
    adaptive_factor = np.exp(-np.sum(weight, axis=1))
    heuristic *= adaptive_factor
    
    # Promote diversity by increasing the heuristic for items with different weights across dimensions
    diversity_factor = np.sum(weight < weight.max(axis=1), axis=1)
    heuristic += diversity_factor
    
    # Normalize heuristics to prevent domination by high-value or high-sparsity items
    heuristic /= np.max(heuristic)
    
    # Penalize items with excessive total weight
    weight_penalty = weight.sum(axis=1) <= m * 0.8
    heuristic[~weight_penalty] = 0
    
    return heuristic
```
