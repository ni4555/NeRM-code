```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on the ratio of prize to total weight and
    # adjust based on sparsity, diversity, and randomness
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Avoid division by zero
        ratio = total_prize / (total_weight + 1e-8)
        # Sparsity factor: low-value to weight ratio
        sparsity = ratio / np.sum(prize[i])
        # Diversity factor: the more dimensions that are below the average weight, the higher the diversity factor
        diversity_factor = sum(w < np.mean(weight, axis=1)[i] for w in weight[i])
        # Randomness factor: to prevent local optima
        randomness_factor = np.random.rand(1)
        heuristic[i] = ratio * (1 + sparsity) * (1 + diversity_factor) * randomness_factor
    
    # Normalize heuristic to keep the range manageable and encourage selection
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    
    return heuristic
```
