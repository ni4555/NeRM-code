```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    value_to_weight_ratio = prize / weight.sum(axis=1)
    weight_sparsity = 1 - (weight.sum(axis=1) / m)
    heuristic = heuristic * value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    diversity_factor = np.array([np.sum(weight[i] < weight[i].max()) for i in range(n)])
    heuristic *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + weight.sum(axis=1) / m)
    adaptive_heuristic = exploration_factor * exploitation_factor * heuristic
    
    # Introduce adaptive weights based on heuristic sum
    heuristic_sum = heuristic.sum()
    adaptive_weight = heuristic_sum / n
    heuristic *= adaptive_weight
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < np.percentile(heuristic, 10)] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
