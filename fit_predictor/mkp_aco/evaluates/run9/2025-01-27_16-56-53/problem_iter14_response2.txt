```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = total_prize / total_weight
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] *= value_to_weight_ratio * weight_sparsity
    
    # Refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < np.max(weight[i]))
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.exp(-np.log(2) * np.abs(heuristic)))
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Prune suboptimal solutions by setting low-value items to zero
    low_value_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < low_value_threshold] = 0
    
    # Prune suboptimal solutions by setting items with high total weight to zero
    high_weight_threshold = np.sum(weight, axis=1) > m * 0.8
    heuristic[high_weight_threshold] = 0
    
    return heuristic
```
