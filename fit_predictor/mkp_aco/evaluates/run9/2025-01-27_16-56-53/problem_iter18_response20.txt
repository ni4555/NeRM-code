```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and weight sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Introduce diversity factor
    total_unique_weights = np.sum(weight < np.mean(weight, axis=0), axis=0)
    diversity_factor = total_unique_weights.sum() / (n * m)
    heuristic *= diversity_factor
    
    # Adaptive exploration strategy
    current_state_factor = 1 / (1 + np.sum(heuristic**2))
    adaptive_heuristic = heuristic * current_state_factor
    
    # Penalize items with non-essential weight and low value
    non_essential_weight_items = weight.sum(axis=1) > m * 0.1
    low_value_items = heuristic < adaptive_heuristic.mean() / 10
    heuristic[non_essential_weight_items | low_value_items] = 0
    
    # Normalize the heuristic values
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    # Introduce a mutation mechanism to enhance diversity
    mutation_strength = np.random.rand()
    mutation = np.random.rand(n) * mutation_strength
    heuristic += mutation
    
    # Ensure the heuristic values are within a reasonable range
    heuristic = np.clip(heuristic, 0, 1)
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.zeros(n)
    for i in range(n):
        exploitation_factor[i] = 1 / (1 + weight[i].sum())
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Further optimize by considering the number of dimensions used for the item
    for i in range(n):
        if np.sum(weight[i] > 0.5) < 2:
            heuristic[i] *= 0.5
    
    # Adjust the heuristic based on an adaptive factor to avoid local optima
    adaptive_factor = np.random.rand(n)
    heuristic *= adaptive_factor
    
    # Set low-value items and those with high total weight to zero
    heuristic[heuristic < heuristic.max() / 10] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return heuristic
```
