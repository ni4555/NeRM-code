```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] *= value_to_weight_ratio * weight_sparsity
    
    # Refine heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = np.sum(weight[i] < np.max(weight[i]))
        heuristic[i] *= (m - diversity_factor) / m
    
    # Dynamically adjust heuristic based on cumulative performance
    cumulative_performance = np.cumsum(heuristic)
    heuristic *= (cumulative_performance / cumulative_performance[-1])
    
    # Balance exploration and exploitation by adjusting threshold
    threshold = heuristic.max() / 5
    heuristic[heuristic < threshold] = 0
    
    # Set low-value items and those with high total weight to zero
    weight_threshold = m * 0.8
    heuristic[weight.sum(axis=1) > weight_threshold] = 0
    
    # Introduce randomness to prevent local optima
    random_factor = np.random.rand(n)
    heuristic *= random_factor / np.sum(random_factor)
    
    return heuristic
```
