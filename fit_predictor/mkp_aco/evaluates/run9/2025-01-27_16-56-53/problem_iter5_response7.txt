```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + weight[i].sum())
    
    # Normalize heuristics for better comparison and to ensure non-negative values
    heuristic_max = np.max(heuristic)
    heuristic = heuristic / heuristic_max
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Dynamically adjust thresholds based on the current heuristic values
    threshold = heuristic.max() / 2
    heuristic[heuristic < threshold] = 0
    
    # Adjust for diversity by penalizing items that are too similar
    for i in range(n):
        diversity_factor = 0
        for j in range(n):
            if i != j and np.count_nonzero(weight[i] == weight[j]) == m:
                diversity_factor += 1
        heuristic[i] *= (1 - diversity_factor / n)
    
    # Incorporate randomness to escape local optima
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    return heuristic
```
