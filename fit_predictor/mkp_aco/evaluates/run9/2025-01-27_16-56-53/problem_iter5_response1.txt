```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        heuristic[i] = value_to_weight_ratio
    
    # Incorporate sparsity factor
    for i in range(n):
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] *= weight_sparsity
    
    # Adaptively balance exploration and exploitation
    exploration_factor = np.random.random(n)
    exploitation_factor = heuristic / np.sum(heuristic)
    heuristic = exploration_factor * exploitation_factor
    
    # Dynamically adjust thresholds based on the distribution of heuristic values
    threshold = np.percentile(heuristic, 90)
    heuristic[heuristic < threshold] = 0
    
    # Promote diversity by penalizing items with high overlap
    for i in range(n):
        overlap = np.sum(weight[i] * weight)
        heuristic[i] *= (1 - (overlap / (n * m)))
    
    # Normalize heuristics
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
