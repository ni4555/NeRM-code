```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    total_prize_weight_ratio = prize / weight.sum(axis=1)
    heuristic = total_prize_weight_ratio / (1 + weight.sum(axis=1))
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    value_to_weight_ratio = prize / weight.sum(axis=1)
    weight_sparsity = 1 - (weight.sum(axis=1) / m)
    heuristic = heuristic * value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    max_weight = weight.max(axis=1)
    diversity_factor = (weight < max_weight).sum(axis=1)
    heuristic *= diversity_factor / m
    
    # Dynamically adjust heuristics based on cumulative performance
    cumulative_performance = np.cumsum(heuristic)
    heuristic *= cumulative_performance / cumulative_performance[-1]
    
    # Balance exploration and exploitation by using a weighted average
    exploration_factor = 1 / (heuristic.max() + 1e-8)
    heuristic *= exploration_factor
    
    # Set low-value items and those with high total weight to zero
    weight_threshold = m * 0.8
    heuristic[weight.sum(axis=1) > weight_threshold] = 0
    
    return heuristic
```
