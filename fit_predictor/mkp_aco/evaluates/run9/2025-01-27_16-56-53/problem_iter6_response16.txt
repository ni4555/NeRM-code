```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        heuristic[i] = value_to_weight_ratio
    
    # Normalize the heuristics
    heuristic /= np.sum(heuristic)
    
    # Incorporate sparsity by penalizing items with high weight relative to their prize
    sparsity_factor = 1 - (np.sum(weight, axis=1) / m)
    heuristic *= sparsity_factor
    
    # Introduce randomness to promote exploration and avoid local optima
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    # Adjust thresholds dynamically to prevent local optima
    threshold = np.percentile(heuristic, 10)
    heuristic[heuristic < threshold] = 0
    
    # Introduce an adaptive exploration factor using logarithmic function
    exploration_factor = np.exp(-np.sum(heuristic))
    heuristic *= exploration_factor
    
    return heuristic
```
