```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Random exploration factor for each item
    exploration_factor = np.random.rand(n)
    
    # Calculate heuristic based on prize-to-weight ratio and its sparsity
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        weight_sparsity = (m - np.count_nonzero(weight[i])) / m
        heuristic[i] = (total_prize / total_weight) * weight_sparsity
    
    # Dynamic adjustment based on problem constraints
    # Introduce a balance factor that increases with the total prize of the item
    balance_factor = np.exp(-np.sum(weight ** 2, axis=1))
    
    # Incorporate exploration and exploitation dynamically
    # The balance factor acts as an exploitation factor, and exploration_factor as the exploration factor
    heuristic = heuristic * balance_factor * exploration_factor
    
    # Randomness to avoid local optima
    # Introduce a small random perturbation
    random_perturbation = np.random.normal(0, 0.1, n)
    heuristic += random_perturbation
    
    # Sparsity to prevent local optima by penalizing items with low sparsity
    sparsity_factor = np.exp(-np.sum(weight ** 2, axis=1))
    heuristic = heuristic * sparsity_factor
    
    # Ensure non-negative heuristics and sparsify the heuristic by setting unpromising elements to zero
    heuristic[heuristic < 0] = 0
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    return heuristic
```
