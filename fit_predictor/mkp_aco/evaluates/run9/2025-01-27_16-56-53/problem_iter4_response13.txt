```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        item_heuristic = total_prize / total_weight if total_weight != 0 else 0
        
        # Incorporate sparsity by penalizing items with high weight relative to their prize
        sparsity_factor = (1 - (total_weight / m))
        
        # Encourage diversity in selected items
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        diversity_factor /= m
        
        # Combine the heuristic with the sparsity and diversity factors
        heuristic[i] = item_heuristic * sparsity_factor * diversity_factor
    
    # Dynamically adjust heuristics based on the average heuristic value
    average_heuristic = heuristic.mean()
    heuristic[heuristic < average_heuristic / 2] = 0
    
    # Balance exploration and exploitation by rewarding high-value items
    for i in range(n):
        heuristic[i] *= prize[i] / (heuristic.max() + 1e-8)
    
    # Penalize over-weight items
    weight_factor = np.exp(-np.sum(weight, axis=1) / m)
    heuristic *= weight_factor
    
    # Normalize heuristics for consistent comparison
    max_heuristic = np.max(heuristic)
    heuristic /= max_heuristic
    
    return heuristic
```
