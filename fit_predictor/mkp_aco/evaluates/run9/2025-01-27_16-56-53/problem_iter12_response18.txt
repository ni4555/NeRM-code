```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio, sparsity, and diversity
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        value_to_weight_ratio = total_prize / total_weight if total_weight > 0 else 0
        weight_sparsity = 1 - (total_weight / m)
        
        # Diversity factor based on the number of non-maximum weight dimensions
        diversity_factor = np.sum(weight[i] < weight[i].max())
        
        # Initial heuristic incorporating all factors
        heuristic[i] = value_to_weight_ratio * weight_sparsity * diversity_factor
    
    # Adaptive exploration-exploitation factor
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.exp(-heuristic))
    adaptive_heuristic = exploration_factor * heuristic + exploitation_factor * heuristic
    
    # Refine heuristic to penalize high weight items
    weight_threshold = m * 0.8
    adaptive_heuristic[total_weight > weight_threshold] = 0
    
    # Normalize heuristic to ensure non-negative values
    adaptive_heuristic = np.clip(adaptive_heuristic, 0, None)
    
    return adaptive_heuristic
```
