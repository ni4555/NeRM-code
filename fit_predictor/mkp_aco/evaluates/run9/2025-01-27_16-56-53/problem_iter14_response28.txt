```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio
    for i in range(n):
        item_value = prize[i]
        item_weight = weight[i].sum()
        heuristic[i] = item_value / item_weight
    
    # Incorporate sparsity and diversity
    for i in range(n):
        item_weight = weight[i].sum()
        sparsity = 1 - item_weight / m
        diversity = np.sum((weight[i] / item_weight) ** 2)
        heuristic[i] *= sparsity * (1 - diversity)
    
    # Adaptive normalization
    for i in range(n):
        min_heuristic = np.min(heuristic)
        max_heuristic = np.max(heuristic)
        if min_heuristic != max_heuristic:
            heuristic[i] = (heuristic[i] - min_heuristic) / (max_heuristic - min_heuristic)
        else:
            heuristic[i] = 1.0  # All items are equal
    
    # Dimension-specific weighting
    for i in range(n):
        item_weight = weight[i].sum()
        for j in range(m):
            if weight[i, j] > item_weight * 0.95:
                heuristic[i] *= 0.5  # Penalize for high weight in any dimension
    
    # Adaptive mechanism to balance exploration and exploitation
    temperature = np.exp(-np.sum(weight, axis=1) / m)
    exploration_factor = np.random.rand(n)
    for i in range(n):
        exploitation_factor = 1 / (1 + weight[i].sum())
        heuristic[i] = (exploration_factor + (exploration_factor * temperature * exploration_factor) * exploration_factor) * heuristic[i]
    
    # Selective penalties for diversity and low-value items
    diversity_factor = np.sum(weight / np.max(weight, axis=1), axis=1)
    for i in range(n):
        if diversity_factor[i] < 0.5 or heuristic[i] < np.mean(heuristic) / 2:
            heuristic[i] *= 0.5  # Apply penalties to encourage diversity
    
    return heuristic
```
