```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
        heuristic[i] = total_prize
    
    # Normalize the heuristic by the sum of weights
    for i in range(n):
        heuristic[i] /= weight[i].sum()
    
    # Incorporate adaptive exploration and exploitation
    diversity_factor = np.zeros(n)
    for i in range(n):
        diversity_count = np.sum(weight[i] == weight[i].max())
        diversity_factor[i] = 1 / (1 + diversity_count)
    
    # Promote diversity by adding diversity factor
    heuristic *= diversity_factor
    
    # Balance high-value to weight ratio with sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] *= value_to_weight_ratio * weight_sparsity
    
    # Dynamically adjust the heuristic to favor exploration
    local_optima = np.zeros(n)
    for i in range(n):
        local_optima_count = np.sum(heuristic > heuristic[i])
        local_optima[i] = 1 - local_optima_count / n
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    # Combine the factors into a single heuristic
    combined_heuristic = (heuristic + local_optima) / 2
    
    # Set low-value items and those with high total weight to zero
    heuristic[combined_heuristic < combined_heuristic.max() / 10] = 0
    heuristic[weight.sum(axis=1) > m * 0.8] = 0
    
    return combined_heuristic
```
