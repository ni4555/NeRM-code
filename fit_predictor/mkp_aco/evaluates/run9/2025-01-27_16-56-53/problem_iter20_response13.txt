```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        # Non-linear scaling by squaring the value-to-weight ratio and penalizing high weight
        heuristic[i] = (total_prize / total_weight) ** 2 / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Encourage diversity through the count of items with the maximum weight
    for i in range(n):
        diversity_factor = np.count_nonzero(weight[i] == weight[i].max())
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(weight, axis=1) / m)
    adaptive_heuristic = exploration_factor * heuristic + exploitation_factor * heuristic
    
    # Apply thresholding to eliminate non-promising items
    threshold = np.max(heuristic) / 10
    high_weight_threshold = m * 0.8
    heuristic[(heuristic < threshold) | (np.sum(weight, axis=1) > high_weight_threshold)] = 0
    
    return heuristic
```
