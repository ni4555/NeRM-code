```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on multiple factors: value-to-weight ratio, sparsity, and diversity
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        value_to_weight_ratio = total_prize / total_weight if total_weight > 0 else 0
        weight_sparsity = 1 - (total_weight / m)
        
        # Compute diversity by checking for unique weight components
        diversity = np.unique(weight[i], return_counts=True)[1].max() / m
        
        # Calculate an adaptive exploration-exploitation factor
        exploration_exploitation_factor = 1 / (1 + np.exp((heuristic[i] - np.mean(heuristic)) / 0.1))
        
        # Combine factors into a single heuristic score
        heuristic[i] = (value_to_weight_ratio * weight_sparsity * diversity * exploration_exploitation_factor)
    
    # Normalize the heuristic scores to prevent any single factor from dominating
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Introduce mutation for diversity
    mutation_rate = 0.1
    mutation_factor = np.random.rand(n)
    mutation_factor[heuristic > heuristic.mean()] = mutation_rate
    heuristic *= (1 - mutation_factor) + mutation_factor
    
    # Penalize items with high total weight and those that contribute to a dominated item
    weight_threshold = m * 0.8
    heuristic[weight.sum(axis=1) > weight_threshold] = 0
    
    return heuristic
```
