```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        weight_sum = np.sum(weight[i])
        heuristic[i] = total_prize / weight_sum if weight_sum > 0 else 0
    
    # Normalize by weight and penalize high weight
    normalized_heuristic = heuristic / (1 + weight.sum(axis=1))
    
    # Introduce a diversity factor that encourages selecting items with different weights
    diversity_factor = np.ones(n)
    for i in range(n):
        for j in range(m):
            diversity_factor[i] *= (1 - weight[i, j] / np.max(weight[:, j]))
    heuristic *= diversity_factor
    
    # Apply an adaptive exploration-exploitation strategy
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.zeros(n)
    for i in range(n):
        exploitation_factor[i] = 1 / (1 + weight[i].sum())
    adaptive_heuristic = exploration_factor + exploitation_factor * normalized_heuristic
    
    # Apply penalties for items that are too heavy or too light
    heavy_penalty = weight.sum(axis=1) > m * 0.8
    light_penalty = heuristic < heuristic.max() / 10
    heuristic[heavy_penalty] = 0
    heuristic[light_penalty] = 0
    
    # Introduce randomness to enhance diversity
    np.random.shuffle(heuristic)
    
    return adaptive_heuristic
```
