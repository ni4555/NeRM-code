```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on multiple criteria
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        # Normalize by weight to get a per-item heuristic
        value_to_weight_ratio = total_prize / total_weight if total_weight != 0 else 0
        # Incorporate sparsity by penalizing high-weight items
        weight_sparsity = 1 - (total_weight / m)
        # Use diversity factor that increases with the number of dimensions
        # that are not at the maximum weight for the item
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        # Combine factors for heuristic
        heuristic[i] = value_to_weight_ratio * weight_sparsity * diversity_factor
    
    # Adjust heuristics dynamically based on item characteristics
    # Favor high-value to weight ratio, sparsity, and diversity
    heuristic = heuristic / np.sum(heuristic)  # Normalize to sum to 1
    
    # Penalize items with high weight or low value
    for i in range(n):
        if weight[i].sum() > m * 0.8 or prize[i] < np.mean(prize):
            heuristic[i] = 0
    
    return heuristic
```
