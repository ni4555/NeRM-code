```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + weight[i].sum())
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + weight.sum(axis=1))
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Normalize heuristics to ensure they are within a reasonable range
    heuristic_min = np.min(adaptive_heuristic)
    heuristic_max = np.max(adaptive_heuristic)
    heuristic = (adaptive_heuristic - heuristic_min) / (heuristic_max - heuristic_min)
    
    # Apply a granular penalty to items that are too heavy or have low value
    for i in range(n):
        if weight[i].sum() > m * 0.8 or prize[i] < np.mean(prize):
            heuristic[i] *= 0.5
    
    # Introduce randomness to enhance diversity and avoid local optima
    heuristic = heuristic * np.random.rand(n)
    
    return heuristic
```
