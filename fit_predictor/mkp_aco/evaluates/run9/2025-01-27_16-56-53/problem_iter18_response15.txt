```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and sparsity
    for i in range(n):
        value_to_weight_ratio = prize[i] / weight[i].sum()
        weight_sparsity = 1 - (weight[i].sum() / m)
        heuristic[i] = value_to_weight_ratio * weight_sparsity
    
    # Emphasize diversity by considering the number of unique weights
    unique_weights = np.unique(weight, axis=0)
    diversity_factor = len(unique_weights) / (n * m)
    heuristic *= diversity_factor
    
    # Adapt based on the current state by penalizing low-value items
    heuristic[heuristic < heuristic.mean() / 10] = 0
    
    # Introduce exploration and exploitation balance
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + np.sum(heuristic**2))
    adaptive_heuristic = exploration_factor + exploitation_factor * heuristic
    
    # Normalize the heuristic values
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    return heuristic
```
