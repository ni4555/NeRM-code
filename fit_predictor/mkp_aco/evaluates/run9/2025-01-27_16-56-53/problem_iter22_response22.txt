```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
        total_weight = weight[i].sum()
        # Normalize by weight to get a per-item heuristic and penalize high weight
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = 1 - (total_weight / m)
        heuristic[i] *= value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    for i in range(n):
        diversity_factor = 1
        for j in range(m):
            if weight[i, j] < weight[i].max():
                diversity_factor += 1
        heuristic[i] *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + weight.sum(axis=1))
    adaptive_heuristic = exploration_factor * heuristic + exploitation_factor * heuristic
    
    # Set low-value items and those with high total weight to zero
    threshold = np.max(heuristic) / 10
    high_weight_threshold = m * 0.8
    heuristic[(heuristic < threshold) | (weight.sum(axis=1) > high_weight_threshold)] = 0
    
    # Dynamic adjustment to prevent local optima
    dynamic_adjustment = np.exp(-np.abs(heuristic - np.max(heuristic)))
    heuristic *= dynamic_adjustment
    
    return heuristic
```
