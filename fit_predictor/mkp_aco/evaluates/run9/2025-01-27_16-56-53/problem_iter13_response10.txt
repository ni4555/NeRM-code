```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate adaptive penalties and normalization
    for i in range(n):
        value_to_weight_ratio = prize[i] / total_weight
        weight_sparsity = (m - np.sum(weight[i] == weight[i].max())) / m
        heuristic[i] = heuristic[i] * value_to_weight_ratio * weight_sparsity
    
    # Introduce randomness to enhance diversity
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    # Refine heuristics by penalizing outliers and simplifying criteria
    for i in range(n):
        if weight[i].sum() > m * 0.8:
            heuristic[i] = 0
    
    # Introduce an adaptive exploration strategy
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.full(n, 1 / (1 + total_weight))
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Normalize heuristics and apply granular penalties
    min_heuristic = np.min(adaptive_heuristic)
    max_heuristic = np.max(adaptive_heuristic)
    heuristic = (adaptive_heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Further optimize diversity and balance exploration-exploitation
    for i in range(n):
        diversity_factor = np.sum(weight[i] != weight[i].max())
        heuristic[i] *= (n - diversity_factor) / n
    
    return heuristic
```
