```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    total_prize = np.dot(prize, weight)
    total_weight = np.sum(weight, axis=1)
    heuristic = (total_prize / total_weight) / (1 + total_weight)
    
    # Incorporate sparsity by penalizing low-value or high-weight items
    value_to_weight_ratio = prize / total_weight
    weight_sparsity = 1 - (total_weight / m)
    heuristic *= value_to_weight_ratio * weight_sparsity
    
    # Further refine the heuristic to favor diversity in selected items
    max_weight = weight.max(axis=1)
    diversity_factor = 1 + (weight < max_weight).sum(axis=1)
    heuristic *= diversity_factor
    
    # Introduce an adaptive exploration strategy that balances exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + total_weight)
    adaptive_heuristic = (exploration_factor + exploitation_factor) * heuristic
    
    # Normalize heuristics to ensure they are within a reasonable range
    heuristic_min = np.min(adaptive_heuristic)
    heuristic_max = np.max(adaptive_heuristic)
    heuristic = (adaptive_heuristic - heuristic_min) / (heuristic_max - heuristic_min)
    
    # Apply a granular penalty to items that are too heavy or have low value
    heuristic[np.sum(weight, axis=1) > m * 0.8] = 0
    heuristic[prize < np.mean(prize)] = 0
    
    return heuristic
```
