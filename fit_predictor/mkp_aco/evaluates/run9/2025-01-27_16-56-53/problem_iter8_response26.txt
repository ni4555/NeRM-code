```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on value-to-weight ratio and diversity
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    diversity_factor = np.array([np.sum(weight[i] < np.mean(weight, axis=0)) for i in range(n)])
    heuristic = value_to_weight_ratio * diversity_factor
    
    # Dynamically adjust heuristics based on cumulative performance
    cumulative_performance = np.cumsum(heuristic)
    heuristic *= cumulative_performance / cumulative_performance[-1]
    
    # Balance exploration and exploitation using temperature-based adjustment
    temperature = np.exp(-np.sum(weight, axis=1) / m)
    heuristic *= temperature
    
    # Set a threshold for exploration-exploitation balance
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0
    
    # Normalize heuristic to ensure it's between 0 and 1
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    return heuristic
```
