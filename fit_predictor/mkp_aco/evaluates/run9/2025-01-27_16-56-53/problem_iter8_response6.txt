```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    for i in range(n):
        total_prize = 0
        total_weight = 0
        for j in range(m):
            total_prize += prize[i] * weight[i, j]
            total_weight += weight[i, j]
        value_to_weight_ratio = total_prize / total_weight if total_weight > 0 else 0
        weight_sparsity = 1 - (total_weight / m)
        
        exploration_exploitation_factor = 1 / (1 + np.exp((heuristic[i] - heuristic.mean()) / 0.1))
        
        heuristic[i] = (value_to_weight_ratio * weight_sparsity * exploration_exploitation_factor) / (1 + total_weight)
    
    heuristic[heuristic < heuristic.mean() / 2] = 0
    
    random_noise = np.random.normal(0, heuristic.std() / 5, size=n)
    heuristic += random_noise
    
    heuristic = np.clip(heuristic, 0, None)
    
    return heuristic
```
