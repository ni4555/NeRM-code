```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Calculate heuristic based on a combination of factors
    for i in range(n):
        total_prize = np.sum(prize[i] * weight[i])
        total_weight = np.sum(weight[i])
        heuristic[i] = (total_prize / total_weight) / (1 + total_weight)
    
    # Normalize by the maximum prize to penalize low-value items
    max_prize = np.max(prize)
    heuristic /= max_prize
    
    # Introduce randomness to enhance diversity
    np.random.shuffle(heuristic)
    
    # Incorporate the number of dimensions that are not at the maximum weight
    diversity_factor = np.zeros(n)
    for i in range(n):
        diversity_count = np.sum(weight[i] < weight[i].max())
        diversity_factor[i] = diversity_count / m
    heuristic *= diversity_factor
    
    # Adjust heuristic to balance exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = 1 / (1 + weight.sum(axis=1))
    adaptive_heuristic = exploration_factor + exploitation_factor * heuristic
    
    # Penalize items with high total weight
    weight_threshold = m * 0.8
    heuristic[weight.sum(axis=1) > weight_threshold] = 0
    
    return adaptive_heuristic
```
