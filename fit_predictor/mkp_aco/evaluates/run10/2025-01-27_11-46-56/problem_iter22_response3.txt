```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.random.rand(utility.shape[0]) * 0.1  # Introduce randomness for diversity
    max_utility = utility.max(axis=1)
    combined_heuristics = max_utility + diversity_factor
    # Normalize the heuristics to ensure a proper distribution
    combined_heuristics = (combined_heuristics - combined_heuristics.min()) / (combined_heuristics.max() - combined_heuristics.min())
    return combined_heuristics
```
