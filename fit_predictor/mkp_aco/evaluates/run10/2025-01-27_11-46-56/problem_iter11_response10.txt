```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.apply_along_axis(lambda x: (np.sum(x) / x.shape[0]), axis=1, arr=utility)
    heuristics = max_utility + diversity_factor
    # Apply sparsity by setting negative values to zero
    heuristics[heuristics < 0] = 0
    return heuristics
```
