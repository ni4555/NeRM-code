```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Add Gaussian noise for exploration and encourage diversity
    exploration_noise = np.random.normal(0, 1, utility.shape)
    diversity_factor = 1 / (1 + np.exp(-utility + exploration_noise))
    
    # Scale the diversity factor by the utility to prioritize high utility items
    heuristics = utility * diversity_factor
    
    # Normalize the heuristics to ensure the sum of heuristics for each item is 1
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    
    # Ensure non-negative heuristics and apply softmax to normalize them
    normalized_heuristics = np.clip(normalized_heuristics, a_min=0, a_max=1)
    softmax_normalization = np.exp(normalized_heuristics - np.max(normalized_heuristics, axis=1, keepdims=True))
    softmax_normalization = softmax_normalization / softmax_normalization.sum(axis=1, keepdims=True)
    
    return softmax_normalization.sum(axis=1)
```
