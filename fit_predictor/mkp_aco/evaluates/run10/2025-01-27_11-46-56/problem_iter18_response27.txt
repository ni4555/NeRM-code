```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Non-linear diversity factor based on standard deviation of utility
    diversity_factor = np.exp(-np.sqrt(np.var(utility, axis=1)))
    
    # Exploration factor based on random noise
    exploration_factor = np.random.rand(n)
    
    # Exploitation factor based on utility
    exploitation_factor = np.exp(utility)
    
    # Incorporating domain knowledge, which is hypothetical here
    domain_knowledge_factor = np.random.rand(n)
    
    # Normalization of heuristics to ensure sum is 1 for each knapsack
    heuristics = (utility * diversity_factor * exploration_factor * exploitation_factor *
                   domain_knowledge_factor) / (utility * diversity_factor * exploration_factor *
                                             exploitation_factor * domain_knowledge_factor).sum(axis=1, keepdims=True)
    
    # Time-sensitive factor that decreases as time progresses
    time_factor = np.arange(1, n + 1) / n
    
    # Apply the time factor to emphasize the dynamics of the MKP
    heuristics *= time_factor
    
    # Ensure that the heuristics values are between 0 and 1
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    
    return heuristics
```
