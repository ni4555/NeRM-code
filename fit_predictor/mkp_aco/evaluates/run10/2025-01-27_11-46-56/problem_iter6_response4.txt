```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_score = np.sum((utility - max_utility[:, np.newaxis])**2, axis=1)
    # Normalize the diversity score to ensure it's on the same scale as utility
    normalized_diversity_score = diversity_score / diversity_score.max()
    # Combine utility, normalized diversity score, and a dynamic adaptive weight allocation
    # as a base heuristic score to get a comprehensive heuristic.
    base_score = normalized_weight.sum(axis=1)
    heuristic = (utility + normalized_diversity_score) * base_score
    # Avoid negative heuristics and ensure the sum of heuristics does not exceed the sum of prizes
    heuristic[heuristic < 0] = 0
    return heuristic
```
