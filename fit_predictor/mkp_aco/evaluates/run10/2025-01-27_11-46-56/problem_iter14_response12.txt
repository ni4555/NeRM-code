```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to have a mean of 1
    normalized_prize = prize / prize.mean()

    # Calculate utility based on normalized prize and weight
    utility = normalized_prize / weight.sum(axis=1, keepdims=True)

    # Calculate the maximum utility for each item
    max_utility = utility.max(axis=1)

    # Normalize the max utility to get a heuristic score
    max_utility_normalized = max_utility / max_utility.max()

    # Introduce item diversity by adding a random factor scaled by the standard deviation of the utility
    diversity_factor = np.random.normal(0, 1 / np.sqrt(n), len(max_utility))
    diversity_factor = (diversity_factor - diversity_factor.min()) / (diversity_factor.max() - diversity_factor.min())
    diversity_factor = diversity_factor * max_utility_normalized

    # Scale the heuristic score with the diversity factor
    heuristics = max_utility_normalized * diversity_factor

    return heuristics
```
