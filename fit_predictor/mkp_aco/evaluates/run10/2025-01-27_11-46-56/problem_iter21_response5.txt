```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate the heuristic based on a combination of factors
    heuristic = (utility.sum(axis=1) / m) * (utility.max(axis=1) / utility.sum(axis=1))
    
    # Apply sparsification by setting unpromising elements to zero
    sparsity_threshold = heuristic.mean()
    heuristic[heuristic < sparsity_threshold] = 0
    
    return heuristic
```
