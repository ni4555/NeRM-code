```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / (normalized_weight.sum(axis=1, keepdims=True) + 1e-6)  # Adding a small constant to avoid division by zero
    diversity = np.sum(normalized_weight, axis=1) / (m + 1e-6)  # Adding a small constant to avoid division by zero
    heuristic = utility * diversity
    heuristic[heuristic < 0.1] = 0  # Sparsify by setting low values to zero
    return heuristic
```
