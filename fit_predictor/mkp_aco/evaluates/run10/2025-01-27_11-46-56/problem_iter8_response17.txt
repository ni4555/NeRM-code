```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity = np.std(utility, axis=1)
    heuristic = max_utility + diversity
    
    # Normalization of heuristics to ensure a balanced exploration and exploitation
    heuristic_normalized = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    # Applying a dynamic adaptive weight allocation mechanism
    dynamic_weight = np.exp(-np.abs(utility - max_utility[:, np.newaxis]) / (np.std(utility) + 1e-5))
    adjusted_heuristic = heuristic_normalized * dynamic_weight
    
    # Ensuring the heuristic values sum up to 1
    adjusted_heuristic /= adjusted_heuristic.sum()
    
    return adjusted_heuristic
```
