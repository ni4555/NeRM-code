```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-utility)
    exploration_factor = np.random.normal(0, 0.1, size=utility.shape)  # Gaussian exploration for diversity
    
    # Combine utility, diversity, and exploration to form heuristics
    heuristics = utility * diversity_factor * exploration_factor
    
    # Apply a threshold to the heuristics to ensure feasibility
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    
    # Normalize the heuristics to ensure the sum of heuristics for each item is 1
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    
    # Scale the heuristics using a logarithmic function to reduce the impact of very high utility values
    scaled_heuristics = np.log(1 + normalized_heuristics)
    
    return scaled_heuristics
```
