```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity = np.abs(np.random.rand(n))  # Random diversity factor to avoid dominance
    bounded_utility = np.clip(utility, 0, 1)  # Bounded to avoid dominance
    heuristic = bounded_utility * diversity * max_utility  # Combine factors for heuristic
    return heuristic
```
