```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity = np.mean(np.sum((utility - utility.mean(axis=1, keepdims=True)) ** 2, axis=1))

    # Incorporate dominance and diversity into heuristic
    heuristic = max_utility + diversity * 0.1

    # Apply normalization to the heuristic values to ensure they are within a specific range
    min_val = heuristic.min()
    max_val = heuristic.max()
    heuristic = (heuristic - min_val) / (max_val - min_val)

    return heuristic
```
