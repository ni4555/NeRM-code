```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate diversity factor based on variance of the utility
    diversity_factor = np.var(utility, axis=1)
    
    # Calculate exploration factor based on the inverse of the utility
    exploration_factor = 1 / (utility + 1e-10)
    
    # Normalize the exploration factor to maintain a balance with the utility
    exploration_factor = exploration_factor / exploration_factor.sum(axis=1, keepdims=True)
    
    # Incorporate domain-specific insights by considering the ratio of prize to weight
    domain_insight_factor = prize / (normalized_weight * m)
    
    # Combine factors with a weighted sum to create a heuristic
    alpha, beta, gamma = 0.4, 0.3, 0.3  # Example weights for the factors
    heuristic = alpha * utility + beta * diversity_factor + gamma * exploration_factor + (1 - alpha - beta - gamma) * domain_insight_factor
    
    # Normalize the heuristic to be between 0 and 1
    heuristic = heuristic / heuristic.max()
    return heuristic
```
