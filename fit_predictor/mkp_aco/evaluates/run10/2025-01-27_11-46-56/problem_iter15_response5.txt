```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate individual item quality considering the max utility and sparsity
    item_quality = (utility - utility.mean(axis=1, keepdims=True)) / np.std(utility, axis=1, keepdims=True)
    
    # Introduce controlled randomness by adding a small Gaussian noise
    random_noise = np.random.normal(0, 0.01, size=item_quality.shape)
    
    # Amplify diversity by adjusting item quality with the random noise
    adjusted_quality = item_quality + random_noise
    
    # Scale quality to ensure diversity without dominating one item
    adjusted_quality = adjusted_quality / adjusted_quality.max(axis=1, keepdims=True)
    
    # Return the heuristic values, with low quality items set to zero
    heuristics = np.where(adjusted_quality > 0.5, adjusted_quality, 0)
    
    return heuristics
```
