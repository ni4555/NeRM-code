```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to have a mean of 0 and a standard deviation of 1
    normalized_prize = (prize - prize.mean()) / prize.std()

    # Calculate utility based on normalized prize and weight
    utility = normalized_prize / weight.sum(axis=1, keepdims=True)

    # Apply a dynamic adaptive weight allocation mechanism
    allocation = utility / utility.sum(axis=1, keepdims=True)

    # Incorporate a refined heuristic-based sampling strategy
    diversity_factor = np.random.rand(n)
    diversity_factor = diversity_factor / diversity_factor.sum()

    # Scale the allocation to ensure consistency with the diversity factor
    heuristics = allocation * diversity_factor

    # Normalize the heuristic scores to sum to 1
    heuristics = heuristics / heuristics.sum()

    return heuristics
```
