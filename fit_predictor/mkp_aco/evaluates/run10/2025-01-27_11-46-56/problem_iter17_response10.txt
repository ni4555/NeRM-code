```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity = np.std(utility, axis=1)
    adaptivity = np.mean(normalized_weight, axis=1)  # Time-based adjustments could be simulated here
    heuristics = utility + diversity * adaptivity
    heuristics[heuristics < 0] = 0  # Sparsify by setting negative heuristics to zero
    max_utility = heuristics.max(axis=1)
    return max_utility
```
