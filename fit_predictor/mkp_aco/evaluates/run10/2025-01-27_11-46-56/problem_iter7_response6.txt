```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.apply_along_axis(lambda x: np.std(x), axis=1, arr=utility)
    normalized_diversity = diversity_factor / diversity_factor.max()
    max_utility = utility.max(axis=1)
    balanced_heuristics = (max_utility + normalized_diversity) / 2
    return balanced_heuristics * (1 / np.sum(balanced_heuristics))
```
