```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / (normalized_weight.sum(axis=1, keepdims=True) + 1e-6)  # Add small constant to avoid division by zero
    max_utility = utility.max(axis=1)
    diversity_factor = np.mean(np.abs(utility - max_utility), axis=1)
    heuristic = max_utility * (1 + diversity_factor)  # Amplify diversity
    sparsity_factor = 1 / (heuristic.sum() + 1e-6)  # Sparsify by dividing by the sum of heuristics
    heuristics = heuristic * sparsity_factor
    return heuristics
```
