```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    utility_factor = utility.sum(axis=1)  # Summing the utility for each item
    diversity_factor = np.max(utility, axis=1) - utility_factor  # Diversity factor
    max_utility = utility_factor + diversity_factor  # Combining utility and diversity
    sparsified_heuristics = np.where(max_utility > 0, max_utility, 0)  # Sparsify the heuristics
    return sparsified_heuristics
```
