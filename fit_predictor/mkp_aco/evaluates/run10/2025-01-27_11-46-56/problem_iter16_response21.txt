```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Add small noise to the utility to encourage exploration without destabilizing the heuristic
    exploration_noise = np.abs(np.random.randn(*utility.shape)) * 0.01
    utility_with_noise = utility + exploration_noise
    
    # Create a diversity factor that encourages diversity without excessive normalization
    diversity_factor = np.exp(-utility_with_noise)  # Use exponential to encourage diversity
    
    # Scale the utility by the diversity factor to compute the heuristic
    heuristic = utility * diversity_factor
    
    # Select the maximum heuristic for each item to ensure simplicity
    max_heuristic = heuristic.max(axis=1)
    
    # Normalize the heuristics to ensure the sum of heuristics for each item is 1
    # We only normalize the heuristics for each item individually to preserve information
    normalized_heuristics = max_heuristic / max_heuristic.sum(axis=1, keepdims=True)
    
    return normalized_heuristics
```
