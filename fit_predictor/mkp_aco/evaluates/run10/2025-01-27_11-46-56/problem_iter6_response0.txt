```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate the standard deviation of the utility scores to use as a diversity metric
    std_dev = np.std(utility, axis=1)
    
    # Incorporate diversity into the heuristic by penalizing low utility and high diversity
    heuristic = utility + std_dev - np.abs(utility - np.mean(utility))
    
    # Normalize the heuristic scores to ensure that the range is consistent
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    normalized_heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Use an adaptive threshold based on the normalized heuristic scores
    threshold = np.percentile(normalized_heuristic, 75)
    heuristic[heuristic < threshold] = 0
    
    return heuristic
```
