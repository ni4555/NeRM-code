```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-np.sqrt(utility))
    exploration_factor = np.random.normal(0, 0.1, size=utility.shape)
    exploitation_factor = np.exp(utility)

    # Calculate initial heuristics
    heuristics = utility * diversity_factor * exploration_factor * exploitation_factor

    # Normalize to ensure that the sum of heuristics across all items is 1
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)

    # Adjust diversity by penalizing low utility items more
    adjusted_diversity = np.where(normalized_heuristics < 0.5, 1 - normalized_heuristics, normalized_heuristics)

    # Time-sensitivity to emphasize the dynamics of the MKP
    time_factor = np.arange(1, len(normalized_heuristics) + 1)
    adjusted_diversity *= time_factor

    # Normalize the final heuristics
    final_heuristics = adjusted_diversity / adjusted_diversity.sum(axis=1, keepdims=True)
    return final_heuristics.sum(axis=1)
```
