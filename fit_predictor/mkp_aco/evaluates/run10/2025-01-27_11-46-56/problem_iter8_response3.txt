```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity = np.sum((utility - utility.mean(axis=1, keepdims=True)) ** 2, axis=1)
    
    # Normalize diversity to limit its influence
    max_diversity = diversity.max()
    min_diversity = diversity.min()
    normalized_diversity = (diversity - min_diversity) / (max_diversity - min_diversity)
    
    heuristic = utility.mean(axis=1) + normalized_diversity * 0.5
    heuristic = np.clip(heuristic, 0, 1)  # Bounded heuristic to avoid dominance
    return heuristic
```
