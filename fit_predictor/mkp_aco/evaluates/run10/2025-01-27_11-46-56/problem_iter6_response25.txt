```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity = np.std(utility, axis=1)
    # Balancing local and global objectives by considering both max utility and diversity
    # Adding a small constant to avoid division by zero
    heuristic = (max_utility + diversity) / (max_utility + diversity).sum() + 1e-5
    return heuristic
```
