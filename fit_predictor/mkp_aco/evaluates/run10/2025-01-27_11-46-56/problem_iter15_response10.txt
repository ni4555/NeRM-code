```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    # Introduce controlled randomness
    random_factor = np.random.rand(*max_utility.shape)
    # Combine various factors for a more robust heuristic
    combined_heuristics = (max_utility * prize + random_factor) / (max_utility + 1)
    # Sparsify by setting elements below a threshold to zero
    threshold = np.percentile(combined_heuristics, 75)
    sparsified_heuristics = np.where(combined_heuristics >= threshold, combined_heuristics, 0)
    return sparsified_heuristics
```
