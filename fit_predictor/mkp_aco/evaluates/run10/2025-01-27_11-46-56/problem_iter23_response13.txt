```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Peak function for exploration, adding randomness for diversity
    peak = max(max_utility) / max_utility
    
    # Sparsify by setting utility below a threshold to zero
    sparsity_threshold = 0.1  # This threshold can be adjusted based on the specific problem context
    sparsified_utility = np.where(peak >= sparsity_threshold, utility, 0)
    
    # Add dynamic adaptive weight allocation
    dynamic Allocation = (1 + (prize.sum() - (prize - np.min(prize)) * 0.1)) / (prize.sum() / max_utility)
    adjusted_utility = sparsified_utility * dynamic Allocation
    
    return adjusted_utility
```
