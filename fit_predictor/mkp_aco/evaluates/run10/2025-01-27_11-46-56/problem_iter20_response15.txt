```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-utility)
    exploration_factor = np.random.normal(0, 0.1, size=utility.shape)
    heuristics = utility * diversity_factor * exploration_factor
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    # Apply peak amplification to emphasize high utility items
    peak_heuristics = heuristics * (1 / (np.exp(-heuristics) + 1))
    # Normalize the amplified heuristic values
    normalized_peak_heuristics = peak_heuristics / peak_heuristics.sum(axis=1, keepdims=True)
    # Introduce a normalization step to ensure the heuristics sum to 1 for each item
    heuristic_sum = normalized_peak_heuristics.sum(axis=1, keepdims=True)
    normalized_heuristics = normalized_peak_heuristics / heuristic_sum
    return normalized_heuristics.sum(axis=1)
```
