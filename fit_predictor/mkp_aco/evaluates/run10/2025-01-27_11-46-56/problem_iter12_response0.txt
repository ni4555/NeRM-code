```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to have a mean of 1
    normalized_prize = prize / prize.mean()

    # Normalize the weights to have a standard deviation of 1
    weight_mean = weight.mean(axis=1, keepdims=True)
    weight_std = weight.std(axis=1, keepdims=True)
    normalized_weight = (weight - weight_mean) / weight_std

    # Calculate utility based on normalized prize and weight
    utility = normalized_prize / (weight * normalized_weight).sum(axis=1, keepdims=True)

    # Adjust utility by the entropy of the normalized weights for each item
    entropy = -np.sum(normalized_weight * np.log(normalized_weight + 1e-8), axis=1)
    adjusted_utility = utility + entropy

    # Calculate the maximum adjusted utility for each item
    max_utility = adjusted_utility.max(axis=1)

    # Normalize the max utility to the range [0, 1]
    max_utility_normalized = (max_utility - max_utility.min()) / (max_utility.max() - max_utility.min())

    return max_utility_normalized
```
