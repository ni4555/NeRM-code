```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.random.rand(len(prize))
    # Amplify positive signals by adding a small constant to the utility
    adjusted_utility = utility + 0.1
    # Amplify the diversity factor by using a logarithmic scale
    adjusted_diversity_factor = np.log(1 + diversity_factor)
    # Combine the adjusted utility and diversity factor
    adjusted_heuristics = adjusted_utility * adjusted_diversity_factor
    return adjusted_heuristics
```
