```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize and weight for each item
    normalized_prize = prize / prize.sum()
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)

    # Calculate utility as the ratio of normalized prize to normalized weight
    utility = normalized_prize / normalized_weight.sum(axis=1, keepdims=True)

    # Aggregate utilities across dimensions to account for multi-dimensional constraints
    aggregated_utility = np.sum(utility, axis=1)

    # Normalize aggregated utilities
    normalized_aggregated_utility = aggregated_utility / aggregated_utility.max()

    # Apply a threshold to reduce dominance
    threshold = normalized_aggregated_utility.mean() + 0.5 * np.std(normalized_aggregated_utility) / np.sqrt(n)
    heuristic = np.where(normalized_aggregated_utility >= threshold, 1, 0)

    return heuristic
```
