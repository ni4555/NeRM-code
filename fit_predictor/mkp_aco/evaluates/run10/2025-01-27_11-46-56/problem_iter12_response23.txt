```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight
    normalized_prize = prize / prize.sum()
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)

    # Calculate utility based on normalized prize and weight
    utility = normalized_prize / normalized_weight.sum(axis=1, keepdims=True)

    # Calculate diversity factor
    diversity_factor = np.random.rand(*utility.shape)

    # Calculate exploration factor based on a dynamic mechanism
    exploration_factor = np.random.rand(*utility.shape)
    for i in range(n):
        exploration_factor[i] = 1 / (1 + np.exp(-0.01 * utility[i]))

    # Combine utility, diversity, and exploration factors
    heuristics = utility * diversity_factor * exploration_factor

    # Normalize heuristics to ensure they sum to 1
    heuristics /= heuristics.sum()

    return heuristics
```
