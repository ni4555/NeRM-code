```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to have a mean of 0 and a standard deviation of 1
    normalized_prize = (prize - prize.mean()) / prize.std()

    # Calculate the normalized weight for each item across dimensions
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)

    # Calculate utility based on normalized prize and weight
    utility = normalized_prize / normalized_weight.sum(axis=1, keepdims=True)

    # Generate a diversity factor using controlled randomness
    diversity_factor = np.random.dirichlet(np.ones(n), size=1).flatten()

    # Scale the diversity factor to sum to the number of items
    diversity_factor /= diversity_factor.sum()

    # Scale the utility by the diversity factor to prioritize high utility items
    heuristics = utility * diversity_factor

    # Normalize the heuristic scores to sum to 1
    heuristics = heuristics / heuristics.sum()

    return heuristics
```
