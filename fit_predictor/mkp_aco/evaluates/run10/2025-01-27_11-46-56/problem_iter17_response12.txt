```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-np.abs(utility - utility.mean(axis=1, keepdims=True)))
    max_utility = utility.max(axis=1)
    adaptability_factor = np.exp(-np.sum(weight, axis=1) / weight.sum())
    heuristic = max_utility * diversity_factor * adaptability_factor
    heuristic[heuristic < 0.1] = 0  # Sparsify the heuristics
    return heuristic
```
