```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Identify essential items (high utility items)
    essential_items = utility > utility.mean()
    
    # Normalize utility to consider diversity
    utility_normalized = utility / utility.max(axis=1, keepdims=True)
    
    # Use a weighted sum of utility and essential item status to determine promise
    combined_promise = (utility_normalized * essential_items).sum(axis=1)
    
    # Apply sparsification technique
    combined_promise[combined_promise < combined_promise.mean()] = 0
    
    return combined_promise
```
