```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_noise = np.random.rand(*utility.shape)
    dynamic_utility = utility + (np.random.rand(*utility.shape) * 0.01 * utility)
    adapt_heuristics = max_utility * (1 + diversity_noise * 0.01) * dynamic_utility
    heuristic_matrix = adapt_heuristics / adapt_heuristics.sum(axis=1, keepdims=True)
    heuristic_vector = np.argmax(heuristic_matrix, axis=1)
    # Set unpromising elements to zero for sparsification
    heuristics = np.zeros_like(prize)
    heuristics[heuristic_vector] = 1
    return heuristics
```
