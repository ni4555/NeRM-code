```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity = np.exp(-utility.sum(axis=1) / prize.max())  # Adding diversity by penalizing high utility items
    normalized_utility = (utility - utility.min(axis=1, keepdims=True)) / (utility.max(axis=1) - utility.min(axis=1))
    bounded_heuristic = np.clip(normalized_utility, 0, 1) * diversity
    return bounded_heuristic
```
