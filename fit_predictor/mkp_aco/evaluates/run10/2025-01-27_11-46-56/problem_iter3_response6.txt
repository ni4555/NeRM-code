```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Feature 1: Identify essential items (high utility items)
    essential_items = utility > utility.mean()
    
    # Feature 2: Simplify with Simplicity (use a heuristic that is a function of max utility)
    max_utility = utility.max(axis=1)
    
    # Feature 3: Relate Metrics Relative (normalize max utility)
    normalized_max_utility = max_utility / max_utility.max()
    
    # Feature 4: Maximize Without Pruning (retain all high utility items)
    # Feature 5: Validate Intuition (domain knowledge not explicitly shown here, assume utility reflects this)
    
    # Feature 6: Avoid Redundancy (avoid recalculating utility)
    
    # Feature 7: Focus on Performance (use relative utility for efficiency)
    
    # Feature 8: Balance Trade-Offs (combine factors for a heuristic score)
    heuristic_score = normalized_max_utility * essential_items
    
    # Feature 8: Balance Trade-Offs (sparsify the heuristics)
    heuristic_score[heuristic_score < 0.5] = 0
    
    return heuristic_score
```
