```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    # Introduce diversity by considering the sum of top utilities
    diversity_factor = np.argsort(utility, axis=1)[-2:, :]
    top_two_utilities = np.take_along_axis(utility, diversity_factor, axis=1)
    sum_of_top_two = top_two_utilities.sum(axis=1)
    # Create a heuristic based on both max utility and diversity
    heuristic = (max_utility + sum_of_top_two) / (2 * m)
    # Sparsify by setting a threshold
    threshold = heuristic.mean()
    return np.where(heuristic > threshold, heuristic, 0)
```
