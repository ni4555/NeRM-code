```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Introduce noise to promote diversity
    noise = np.random.normal(0, 0.1, size=utility.shape)
    
    # Dynamic adaptive weight allocation based on the current max utility
    adaptive_weight = max_utility * weight
    
    # Combine utility, noise, and adaptive weight to determine heuristics
    heuristics = utility + noise + adaptive_weight
    
    # Normalize heuristics to keep the range consistent
    heuristics = (heuristics - heuristics.min(axis=1, keepdims=True)) / (heuristics.max(axis=1, keepdims=True) - heuristics.min(axis=1, keepdims=True))
    
    # Sparsify by setting values below a certain threshold to zero
    threshold = 0.5
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
