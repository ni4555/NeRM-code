```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    density = prize / (normalized_weight.sum(axis=1, keepdims=True) ** 2)
    diversity = (1 - (np.sum(weight, axis=1) / weight.sum(axis=0, keepdims=True))) ** 2
    combined_score = utility + density * diversity
    sparsified_score = np.where(combined_score > combined_score.mean(), combined_score, 0)
    return sparsified_score
```
