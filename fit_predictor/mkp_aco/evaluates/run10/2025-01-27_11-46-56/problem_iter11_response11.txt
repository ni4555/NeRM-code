```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate the diversity factor based on the variance of the normalized weights
    diversity_factor = np.var(normalized_weight, axis=1)
    
    # Combine utility with diversity factor to create a heuristic score
    heuristic_score = utility + diversity_factor
    
    # Normalize the heuristic scores to ensure they are within a range
    max_score = heuristic_score.max(axis=1)
    heuristic_score = heuristic_score / max_score.reshape(-1, 1)
    
    # Sparsify the heuristics by setting lower scores to zero
    sparsified_heuristic = np.where(heuristic_score > 0.5, heuristic_score, 0)
    
    return sparsified_heuristic
```
