```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    # Introduce randomness and noise for exploration
    random_noise = np.random.normal(0, 0.1, size=utility.shape)
    # Combine utility and noise with a balance factor
    combined_heuristics = (0.5 * utility) + (0.5 * random_noise)
    # Apply a sparsification mechanism
    sparsified_heuristics = np.where(combined_heuristics > max_utility.max() * 0.8, combined_heuristics, 0)
    return sparsified_heuristics
```
