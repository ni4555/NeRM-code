```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Promote diversity with noise
    noise = np.random.normal(0, 0.01, size=utility.shape)
    
    # Balance exploitation and exploration by using a weighted sum of utility and noise
    heuristic = utility + noise
    
    # Normalize consistently and balance utility and diversity
    max_heuristic = heuristic.max(axis=1)
    heuristic /= max_heuristic[:, np.newaxis]
    
    # Sparsify heuristics by setting unpromising elements to zero
    sparsity_threshold = heuristic.mean()
    heuristic[heuristic < sparsity_threshold] = 0
    
    return heuristic
```
