```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.random.rand(*utility.shape)
    noise_factor = np.random.normal(0, 0.1, *utility.shape)
    time_sensitive_factor = np.sin(np.arange(utility.shape[0]) * np.pi / utility.shape[0])
    
    heuristic_values = (utility + diversity_factor + noise_factor + time_sensitive_factor) / 4
    max_utility = heuristic_values.max(axis=1)
    return max_utility
```
