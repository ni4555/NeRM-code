```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.apply_along_axis(lambda x: x.max() / np.std(x), axis=1, arr=utility)
    adaptability_factor = np.apply_along_axis(lambda x: x.mean(), axis=1, arr=utility)
    combined_factor = diversity_factor * adaptability_factor
    combined_max = combined_factor.max(axis=1)
    sparsity_threshold = combined_factor / combined_max
    heuristics = (combined_factor > sparsity_threshold).astype(float)
    return heuristics
```
