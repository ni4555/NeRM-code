```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.sum((utility - max_utility[:, np.newaxis])**2, axis=1)
    heuristic = max_utility + diversity_factor
    # Apply normalization to the heuristic to ensure non-negative values and maintain scale
    min_heuristic = heuristic.min()
    max_heuristic = heuristic.max()
    heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    # Apply a threshold to filter out less promising items
    threshold = 0.5
    heuristic[heuristic < threshold] = 0
    return heuristic
```
