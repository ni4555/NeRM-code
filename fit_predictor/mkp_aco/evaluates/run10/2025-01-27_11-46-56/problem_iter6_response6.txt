```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.sum((utility - max_utility[:, np.newaxis])**2, axis=1)
    
    # Calculate the dynamic adaptive weight allocation
    dynamic_weight_allocation = np.sum(weight, axis=0) / n
    
    # Normalize the utility by the dynamic weight allocation
    normalized_utility = utility / dynamic_weight_allocation
    
    # Incorporate a normalization technique to optimize the allocation process
    heuristic = max_utility + diversity_factor / (normalized_utility + 1)
    
    # Apply a threshold based on the z-score to ensure that only the most promising items are selected
    z_scores = (heuristic - np.mean(heuristic)) / np.std(heuristic)
    threshold = np.abs(z_scores) > 1.96  # Using a 95% confidence interval threshold
    
    # Filter the heuristic scores based on the threshold
    heuristic[~threshold] = 0
    return heuristic
```
