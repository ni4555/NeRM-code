```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Incorporating diversity and normalization
    diversity = np.apply_along_axis(lambda x: np.std(x), axis=1, arr=utility)
    normalized_diversity = diversity / diversity.max()
    
    # Combining utility and diversity
    combined_score = max_utility * normalized_diversity
    
    # Applying sparsification
    sparsity_threshold = combined_score.mean()
    heuristics = np.where(combined_score > sparsity_threshold, combined_score, 0)
    
    return heuristics
```
