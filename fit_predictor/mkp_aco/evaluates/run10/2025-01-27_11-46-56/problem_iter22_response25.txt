```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-np.sqrt(utility))  # Non-linear diversity factor
    exploration_factor = np.random.rand(n)  # Exploration factor for randomness
    exploitation_factor = np.exp(utility)  # Exploitation factor based on utility
    time_factor = np.arange(1, n + 1) / n  # Time-sensitive factor normalized over the number of items
    
    # Combine factors to generate heuristics
    heuristics = utility * diversity_factor * exploration_factor * exploitation_factor * time_factor
    
    # Normalize the heuristics
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    
    # Sum over the number of dimensions to get the final heuristic value for each item
    final_heuristics = normalized_heuristics.sum(axis=1)
    return final_heuristics
```
