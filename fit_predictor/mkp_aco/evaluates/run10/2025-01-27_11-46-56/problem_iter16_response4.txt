```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Apply dynamic adaptive weight allocation
    dynamic_weight_factor = np.sum(normalized_weight * weight, axis=1)
    dynamic_weight_factor = dynamic_weight_factor / dynamic_weight_factor.sum()
    
    # Introduce Gaussian noise to balance exploration and exploitation
    exploration_noise = np.random.normal(0, 1, utility.shape)
    
    # Encourage diversity by applying a sigmoid function to utility + noise
    diversity_factor = 1 / (1 + np.exp(-utility + exploration_noise))
    
    # Scale the diversity factor to ensure it is between 0 and 1
    diversity_factor = (diversity_factor - diversity_factor.min()) / (diversity_factor.max() - diversity_factor.min())
    
    # Calculate the heuristic based on utility, diversity, and dynamic weight factors
    heuristic = utility * diversity_factor * dynamic_weight_factor
    
    # Normalize the heuristic to ensure it's a probability distribution
    normalized_heuristics = heuristic / heuristic.sum(axis=1, keepdims=True)
    
    return normalized_heuristics
```
