```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.sum((utility - max_utility[:, np.newaxis])**2, axis=1)
    variance_factor = np.var(utility, axis=1)
    entropy = -np.sum(utility * np.log(utility + 1e-10), axis=1)
    
    # Weights for each factor to balance exploration and exploitation
    diversity_weight = 0.6
    variance_weight = 0.3
    entropy_weight = 0.1
    
    # Combine factors with weights to get the heuristic
    heuristic = max_utility + diversity_weight * diversity_factor + variance_weight * variance_factor + entropy_weight * entropy
    
    # Normalize the heuristic to ensure all values are within [0, 1]
    heuristic = (heuristic - heuristic.min()) / (heuristic.max() - heuristic.min())
    
    return heuristic
```
