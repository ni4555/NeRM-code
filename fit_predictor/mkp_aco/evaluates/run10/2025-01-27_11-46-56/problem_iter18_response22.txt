```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize weights for each dimension to sum to 1
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    
    # Calculate utility by combining prize and normalized weights
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Introduce exploration factor based on the inverse of the utility
    exploration_factor = np.exp(-utility)
    
    # Domain-specific knowledge factor (hypothetical), for example, popularity
    domain_knowledge = np.random.rand(n)
    
    # Adjust exploration based on domain knowledge, penalizing less popular items
    exploration_factor *= domain_knowledge
    
    # Introduce diversity by penalizing similar utility items
    # Calculate the difference between each item's utility and the mean utility
    diversity_factor = 1 / (1 + np.abs(utility - np.mean(utility)))
    
    # Combine factors for the heuristic value
    heuristics = utility * exploration_factor * diversity_factor
    
    # Normalize the heuristics to ensure they sum to 1 across all items
    normalized_heuristics = heuristics / heuristics.sum()
    
    # Adjust diversity by penalizing items with a normalized heuristic below a certain threshold
    adjusted_diversity = np.where(normalized_heuristics < 0.5, 1 - normalized_heuristics, normalized_heuristics)
    
    # Return the adjusted diversity as the heuristic values
    return adjusted_diversity
```
