```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Generate random exploration factors for diversity
    exploration_factor = np.random.normal(0, 0.1, size=utility.shape)
    
    # Apply normalization techniques and peak selection
    heuristics = (utility * exploration_factor) / (np.exp(utility) + exploration_factor)
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    
    # Create a peak selection heuristic to focus on the best items
    peak_heuristics = np.exp(-np.exp(heuristics))
    
    # Normalize the peak heuristic values
    normalized_peak_heuristics = peak_heuristics / peak_heuristics.sum(axis=1, keepdims=True)
    
    # Apply a dynamic adaptive weight allocation mechanism to enhance the partitioning
    adaptive_weight = (normalized_peak_heuristics + exploration_factor) / (1 + exploration_factor)
    
    # Combine the adaptive weight with the utility to get the final heuristic
    final_heuristic = utility * adaptive_weight
    final_heuristic = np.clip(final_heuristic, a_min=0, a_max=1)
    
    return final_heuristic.sum(axis=1)
```
