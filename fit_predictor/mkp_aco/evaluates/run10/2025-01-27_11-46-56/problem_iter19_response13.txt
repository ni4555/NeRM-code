```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity = np.std(normalized_weight, axis=1)
    time_factor = np.random.rand(prize.shape[0])
    heuristic = utility + diversity * time_factor
    heuristic[heuristic < 0] = 0  # Sparsify by setting negative heuristics to zero
    return heuristic
```
