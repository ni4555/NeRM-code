```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate the sum of utilities for each item to identify high-value items
    sum_utility = utility.sum(axis=1)
    
    # Calculate the diversity factor
    diversity_factor = np.sum((utility - sum_utility[:, np.newaxis])**2, axis=1)
    
    # Calculate the balance between utility and diversity
    balance_factor = utility + diversity_factor
    
    # Apply a threshold to balance the diversity and utility
    threshold = 0.5 * sum_utility
    heuristic = np.where(balance_factor >= threshold, balance_factor, 0)
    
    # Prune less promising items to enhance diversity
    heuristic[heuristic < 0.2 * sum_utility] = 0
    
    return heuristic
```
