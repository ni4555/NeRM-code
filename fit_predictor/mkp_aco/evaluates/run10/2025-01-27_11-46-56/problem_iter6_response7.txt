```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    utility_ratio = utility / max_utility[:, np.newaxis]
    diversity_factor = np.sum((utility_ratio - 1)**2, axis=1)
    variance_factor = np.var(utility, axis=1)
    risk_factor = np.max(utility_ratio - max_utility[:, np.newaxis], axis=1)
    heuristic = max_utility + diversity_factor * 0.6 + variance_factor * 0.3 + risk_factor * 0.1
    return heuristic
```
