```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights and calculate utility
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)

    # Calculate diversity using the variance of utility
    diversity = np.var(utility, axis=1)

    # Calculate heuristic based on utility and diversity
    heuristic = utility.mean(axis=1) + diversity * 0.5

    # Normalize heuristic to ensure it's between 0 and 1
    heuristic = (heuristic - heuristic.min()) / (heuristic.max() - heuristic.min())

    # Apply a threshold to reduce dominance
    threshold = heuristic.mean() + 0.5 * np.std(heuristic) / np.sqrt(n)
    heuristic[heuristic < threshold] = 0

    return heuristic
```
