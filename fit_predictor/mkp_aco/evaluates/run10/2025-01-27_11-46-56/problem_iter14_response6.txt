```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to have a mean of 1
    normalized_prize = prize / prize.mean()

    # Calculate utility based on normalized prize and weight
    utility = normalized_prize / weight.sum(axis=1, keepdims=True)

    # Calculate the maximum utility for each item
    max_utility = utility.max(axis=1)

    # Normalize the max utility to get a heuristic score
    max_utility_normalized = max_utility / max_utility.max()

    # Apply a diversity factor to encourage exploration of different solutions
    diversity_factor = np.random.dirichlet(np.ones(n), size=1).flatten()

    # Combine the normalized max utility with the diversity factor
    heuristics = max_utility_normalized * diversity_factor

    # Ensure the heuristic scores sum to 1
    heuristics /= heuristics.sum()

    return heuristics
```
