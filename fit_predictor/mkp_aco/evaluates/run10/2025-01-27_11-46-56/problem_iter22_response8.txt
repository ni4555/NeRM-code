```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Non-linear diversity factor
    diversity_factor = np.exp(-np.square(utility))
    
    # Incorporate exploration-exploitation balance
    exploration_factor = np.random.normal(0, 0.1, size=utility.shape)
    exploitation_factor = utility
    balance_factor = exploration_factor + exploitation_factor
    
    # Normalize peak values
    peak_values = np.partition(utility, -int(0.1 * utility.size))[-int(0.1 * utility.size):]
    peak_normalization = peak_values / peak_values.sum()
    
    heuristics = (utility * diversity_factor * balance_factor)
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    normalized_heuristics = heuristics * peak_normalization
    return normalized_heuristics.sum(axis=1)
```
