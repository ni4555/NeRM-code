```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = weight.shape[0]
    m = weight.shape[1]
    
    # Normalize weights within each dimension
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    
    # Calculate utility based on normalized weights
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Compute the max utility for each knapsack
    max_utility = utility.max(axis=1)
    
    # Encourage diversity by penalizing items with similar utility scores
    diversity_score = np.sum((utility - max_utility[:, np.newaxis])**2, axis=1)
    
    # Incorporate a dynamic adaptive weight allocation mechanism
    dynamic_weight_allocation = normalized_weight.sum(axis=1)
    
    # Combine utility, diversity, and dynamic allocation to form the heuristic
    heuristic = max_utility + diversity_score / (dynamic_weight_allocation + 1e-5)
    
    # Normalize the heuristic to ensure all values are between 0 and 1
    heuristic = (heuristic - heuristic.min()) / (heuristic.max() - heuristic.min())
    
    # Avoid negative heuristics by clamping them to zero
    heuristic[heuristic < 0] = 0
    
    return heuristic
```
