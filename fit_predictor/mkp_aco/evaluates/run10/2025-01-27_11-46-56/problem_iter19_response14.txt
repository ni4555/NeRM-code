```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Add a random factor to introduce diversity
    random_factor = np.random.rand(len(max_utility))
    
    # Apply time-sensitivity by adding the index to the utility to adapt over time
    time_sensitive_factor = np.arange(len(max_utility))
    
    # Combine factors and normalize
    combined_heuristics = (max_utility + random_factor + time_sensitive_factor) / (3 * max_utility.max())
    
    # Sparsify by setting low utility values to zero
    sparsified_heuristics = np.where(combined_heuristics > combined_heuristics.max() / 2, combined_heuristics, 0)
    
    return sparsified_heuristics
```
