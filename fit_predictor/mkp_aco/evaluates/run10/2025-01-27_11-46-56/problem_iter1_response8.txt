```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-np.sum(weight**2, axis=1) / (m * weight.sum(axis=1, keepdims=True)))
    heuristic_score = utility * diversity_factor
    max_heuristic = heuristic_score.max(axis=1)
    sparsified_heuristic = np.where(heuristic_score >= max_heuristic, heuristic_score, 0)
    return sparsified_heuristic
```
