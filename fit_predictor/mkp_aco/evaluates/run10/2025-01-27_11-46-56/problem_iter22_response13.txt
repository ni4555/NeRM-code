```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Non-linear diversity factor to ensure diversity in solution space
    diversity_factor = 1 / (1 + np.exp(-utility))
    
    # Exploration-exploitation balance using an epsilon greedy strategy
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.exp(utility)
    balance_factor = exploration_factor * exploitation_factor
    
    # Time-sensitive factor to emphasize the dynamics of the MKP
    time_factor = np.arange(1, n + 1) / n
    
    # Normalize heuristics to ensure sum of heuristics per knapsack is 1
    heuristics = balance_factor * diversity_factor * time_factor
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    
    # Ensure the heuristics are non-negative
    heuristics = np.clip(normalized_heuristics, a_min=0, a_max=1)
    
    return heuristics.sum(axis=1)
```
