```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate the average utility for each item
    avg_utility = utility.mean(axis=1)
    
    # Add diversity by considering the maximum utility minus the average utility
    diversity_factor = utility.max(axis=1) - avg_utility
    
    # Combine factors for the heuristic: average utility and diversity
    combined_heuristics = avg_utility + diversity_factor
    
    # Apply normalization to ensure the heuristics sum to 1
    combined_heuristics /= combined_heuristics.sum()
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = 0.01
    sparsified_heuristics = np.where(combined_heuristics >= threshold, combined_heuristics, 0)
    
    return sparsified_heuristics
```
