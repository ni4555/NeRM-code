```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_index = np.argsort(np.random.rand(n), axis=0)[::-1]
    heuristic = np.zeros(n)
    for i in diversity_index:
        # Normalize the utility and add a diversity score
        heuristic[i] = utility[i] + np.random.rand() * 0.1
    # Apply adaptive weight allocation by considering item density
    density = prize / weight.sum(axis=1, keepdims=True)
    heuristic *= density
    # Avoid dominance and bound heuristics
    heuristic /= heuristic.sum()
    return heuristic
```
