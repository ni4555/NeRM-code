```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / np.sum(weight, axis=0, keepdims=True)
    utility = prize / np.sum(weight, axis=1, keepdims=True)
    # Calculate weighted utility based on the normalized weight
    weighted_utility = utility * normalized_weight.sum(axis=1, keepdims=True)
    # Adjust the weighted utility to account for diversity
    diversity_factor = np.random.rand(n)
    adjusted_weighted_utility = weighted_utility * diversity_factor
    # Normalize the adjusted weighted utility to get the heuristics
    max_utility = adjusted_weighted_utility.max(axis=1)
    normalized_heuristics = adjusted_weighted_utility / max_utility[:, np.newaxis]
    return normalized_heuristics
```
