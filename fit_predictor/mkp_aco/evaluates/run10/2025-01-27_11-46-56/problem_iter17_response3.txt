```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Introduce noise for diversity
    noise = np.random.normal(0, 0.1, prize.shape)
    adjusted_utility = utility + noise
    
    # Dynamic adaptive weight allocation
    for i in range(prize.shape[0]):
        # Adjust utility based on how close the current utility is to the max utility
        if adjusted_utility[i] > max_utility[i]:
            ratio = (adjusted_utility[i] - max_utility[i]) / (max_utility[i] + 1e-6)
            adjusted_utility[i] = max_utility[i] + ratio * (1 - max_utility[i])
    
    # Normalize the adjusted utility to ensure a bounded range
    adjusted_utility = (adjusted_utility - adjusted_utility.min()) / (adjusted_utility.max() - adjusted_utility.min())
    
    # Sparsify by setting values below a threshold to zero
    threshold = adjusted_utility.mean()
    heuristics = np.where(adjusted_utility >= threshold, adjusted_utility, 0)
    
    return heuristics
```
