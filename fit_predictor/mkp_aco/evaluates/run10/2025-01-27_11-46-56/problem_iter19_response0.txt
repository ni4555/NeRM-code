```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity = np.random.rand(len(utility))  # Random factor to promote diversity
    time_factor = np.linspace(1, 1.5, len(utility))  # Time-sensitivity factor
    
    # Calculate heuristics as a weighted sum of utility, diversity, and time factor
    heuristics = (utility + diversity + time_factor) / (1 + len(normalized_weight))
    heuristics = heuristics - heuristics.min()  # Normalize heuristics
    return heuristics
```
