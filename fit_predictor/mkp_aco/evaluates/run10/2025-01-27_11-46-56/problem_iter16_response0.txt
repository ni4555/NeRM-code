```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to have a mean of 0 and a standard deviation of 1
    normalized_prize = (prize - prize.mean()) / prize.std()

    # Calculate utility based on normalized prize and weight
    utility = normalized_prize / weight.sum(axis=1, keepdims=True)

    # Calculate the maximum utility for each item
    max_utility = utility.max(axis=1)

    # Generate a diversity factor that adds to the sum of 1 and promotes diversity
    diversity_factor = np.random.rand(n)
    diversity_factor /= diversity_factor.sum()

    # Scale the diversity factor by the maximum utility to ensure consistency
    diversity_factor *= max_utility

    # Normalize the heuristic scores to sum to 1
    heuristics = diversity_factor / diversity_factor.sum()

    return heuristics
```
