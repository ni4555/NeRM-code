```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    # Calculate the heuristic based on utility and diversity
    # Diversity can be considered as the standard deviation of utility across dimensions
    diversity = np.std(utility, axis=1)
    heuristic = utility.max(axis=1) * diversity
    return heuristic
```
