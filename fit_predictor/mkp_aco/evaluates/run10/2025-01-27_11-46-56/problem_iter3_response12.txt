```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / (normalized_weight.sum(axis=1, keepdims=True) + 1e-5)  # Adding a small constant to avoid division by zero
    max_dimension_utility = utility.max(axis=1)
    item_promise = np.dot(max_dimension_utility, weight.sum(axis=1))
    relative_promise = item_promise / prize.sum()
    sparsity_factor = 0.1  # Threshold for sparsification
    heuristics = (relative_promise > sparsity_factor)
    return heuristics
```
