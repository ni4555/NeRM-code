```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Introduce diversity by penalizing items with very low utility
    penalty_factor = np.mean(utility)
    diversity_factor = 1 - (utility / penalty_factor)
    
    # Use a balance factor between utility and diversity
    balance_factor = 0.5
    heuristics = max_utility * balance_factor + diversity_factor * (1 - balance_factor)
    
    # Prune the heuristics by setting low-value items to zero
    pruning_threshold = np.percentile(heuristics, 25)
    heuristics[heuristics < pruning_threshold] = 0
    
    return heuristics
```
