```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to have a mean of 0 and a standard deviation of 1
    normalized_prize = (prize - prize.mean()) / prize.std()

    # Calculate utility based on normalized prize and weight
    utility = normalized_prize / weight.sum(axis=1, keepdims=True)

    # Calculate the maximum utility for each item
    max_utility = utility.max(axis=1)

    # Calculate the sum of normalized max utilities
    normalized_max_utility_sum = (max_utility - max_utility.mean()) / max_utility.std()

    # Generate a diversity factor that adds to the sum of 1 and promotes diversity
    diversity_factor = np.random.normal(0, 1, size=n)
    diversity_factor = diversity_factor / diversity_factor.sum()

    # Scale the diversity factor with the normalized max utilities
    heuristics = diversity_factor * normalized_max_utility_sum

    # Ensure the sum of the heuristics is 1 by normalization
    heuristics = heuristics / heuristics.sum()

    return heuristics
```
