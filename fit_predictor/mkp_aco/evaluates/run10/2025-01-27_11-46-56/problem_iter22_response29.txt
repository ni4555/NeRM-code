```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate diversity by considering the variance of utility scores
    diversity = np.var(utility, axis=1)
    
    # Focus on local maxima by using the maximum utility score for each item
    local_maxima = np.max(utility, axis=1)
    
    # Combine the local maxima and diversity to create a heuristic
    combined_heuristic = local_maxima * diversity
    
    # Sparsify the heuristic by setting non-positive values to zero
    sparsified_heuristic = np.where(combined_heuristic > 0, combined_heuristic, 0)
    
    return sparsified_heuristic
```
