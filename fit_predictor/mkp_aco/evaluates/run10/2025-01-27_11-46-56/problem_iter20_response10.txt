```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-np.sqrt(utility))  # Non-linear diversity factor
    exploration_factor = np.random.rand(*utility.shape)  # Exploration factor for randomness
    exploitation_factor = np.exp(utility)  # Exploitation factor based on utility
    time_factor = np.arange(1, len(utility) + 1) / len(utility)  # Time-sensitive factor normalized by total time
    
    # Combine all factors with weights
    heuristics = utility * 0.5 * diversity_factor + 0.3 * exploration_factor + 0.2 * exploitation_factor
    heuristics *= time_factor  # Apply the time factor to emphasize the dynamics of the MKP
    
    # Ensure non-negative values for the heuristic and normalize
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    
    return normalized_heuristics.sum(axis=1)
```
