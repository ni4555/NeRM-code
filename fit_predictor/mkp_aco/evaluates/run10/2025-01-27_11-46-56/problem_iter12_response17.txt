```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to have a mean of 1
    normalized_prize = prize / prize.mean()

    # Calculate utility based on normalized prize and weight
    utility = normalized_prize / weight.sum(axis=1, keepdims=True)

    # Calculate the sum of absolute weights to capture diversity
    diversity = np.sum(np.abs(weight), axis=1)

    # Normalize diversity to have a mean of 1
    normalized_diversity = diversity / diversity.mean()

    # Combine utility and diversity into a heuristic score
    heuristic = utility * normalized_diversity

    # Apply a dynamic adaptive weight allocation mechanism
    adaptive_weight = np.mean(weight, axis=1)
    heuristic *= adaptive_weight / adaptive_weight.sum()

    return heuristic
```
