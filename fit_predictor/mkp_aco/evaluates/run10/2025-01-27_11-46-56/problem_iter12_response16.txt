```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    max_utility = utility.max(axis=1)
    diversity_factor = np.sum((utility - max_utility[:, np.newaxis])**2, axis=1)
    variance_factor = np.var(utility, axis=1)
    
    probabilities = utility / utility.sum(axis=1, keepdims=True)
    entropy = -np.sum(probabilities * np.log(probabilities + 1e-10), axis=1)
    normalized_entropy = entropy / np.log(n + 1)
    
    # Combine factors with a weighted sum to create a heuristic
    alpha, beta, gamma = 0.5, 0.3, 0.2  # Example weights for the factors
    heuristic = max_utility + alpha * diversity_factor + beta * variance_factor + gamma * normalized_entropy
    
    # Normalize the heuristic to be between 0 and 1
    heuristic = (heuristic - heuristic.min()) / (heuristic.max() - heuristic.min())
    return heuristic
```
