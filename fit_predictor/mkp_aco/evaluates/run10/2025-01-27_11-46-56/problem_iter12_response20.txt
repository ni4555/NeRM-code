```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the weights along each item
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)

    # Calculate utility based on normalized weights
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)

    # Compute diversity by considering the standard deviation of the normalized weights
    diversity_factor = np.std(normalized_weight, axis=1)

    # Combine utility and diversity into a heuristic score
    heuristic = utility * diversity_factor

    # Apply dynamic adaptive weight allocation by scaling the heuristic
    # based on the mean and standard deviation of the heuristic scores
    heuristic_mean = heuristic.mean()
    heuristic_std = heuristic.std()
    heuristic = (heuristic - heuristic_mean) / (heuristic_std + 1e-8)  # Adding a small constant to avoid division by zero

    # Normalize the heuristic scores to the range [0, 1]
    heuristic = (heuristic - heuristic.min()) / (heuristic.max() - heuristic.min())

    return heuristic
```
