```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.sum((utility - max_utility[:, np.newaxis])**2, axis=1)
    
    # Incorporate normalization for the diversity factor to balance it with the utility
    diversity_factor_normalized = diversity_factor / diversity_factor.max()
    
    # Combine utility and diversity, considering the normalized diversity
    heuristic = max_utility + 0.1 * diversity_factor_normalized
    
    # Apply a threshold to filter out less promising items
    threshold = 0.8 * (max_utility + diversity_factor_normalized)
    heuristic[heuristic < threshold] = 0
    
    return heuristic
```
