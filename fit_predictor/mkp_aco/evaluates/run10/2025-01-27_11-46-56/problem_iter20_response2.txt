```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility_per_item = utility.max(axis=1)
    # Apply dynamic adaptive weight allocation by adjusting utility based on weight diversity
    weight_diversity = 1 / np.sum((normalized_weight ** 2), axis=1)
    adjusted_utility = utility * weight_diversity
    # Normalize the adjusted utility to ensure it sums to 1 for each item
    normalized_adjusted_utility = adjusted_utility / adjusted_utility.sum(axis=1, keepdims=True)
    return normalized_adjusted_utility.sum(axis=1)
```
