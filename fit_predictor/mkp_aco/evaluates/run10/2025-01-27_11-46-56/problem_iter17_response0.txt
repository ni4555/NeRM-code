```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Introduce noise to promote diversity
    noise_factor = np.random.normal(0, 0.1, size=utility.shape)
    noise_utility = utility + noise_factor
    
    # Adapt heuristics based on relative utility
    adaptive_heuristics = max_utility + (noise_utility - max_utility) * np.random.random(size=utility.shape)
    
    # Sparsify by setting values below a certain threshold to zero
    threshold = np.percentile(adaptive_heuristics, 90)
    sparsified_heuristics = np.where(adaptive_heuristics >= threshold, adaptive_heuristics, 0)
    
    return sparsified_heuristics
```
