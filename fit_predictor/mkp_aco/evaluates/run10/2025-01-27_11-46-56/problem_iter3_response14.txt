```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Additional factors for heuristics: sum of utility, diversity measure
    sum_utility = utility.sum(axis=1)
    diversity_measure = np.linalg.norm(utility, axis=1)
    
    # Combine factors for heuristic score
    heuristic_score = (max_utility + sum_utility + diversity_measure) / 3
    
    # Sparsify the heuristics by setting low-scoring elements to zero
    sparsity_threshold = heuristic_score.mean()
    heuristics = np.where(heuristic_score > sparsity_threshold, heuristic_score, 0)
    
    return heuristics
```
