```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    mean_utility = utility.mean(axis=1, keepdims=True)
    normalized_utility = (utility - mean_utility) / (utility.max(axis=1, keepdims=True) - mean_utility)
    diversity_score = np.sum(normalized_utility**2, axis=1)
    heuristic = (utility / mean_utility) + diversity_score
    heuristic = np.clip(heuristic, 0, 1)  # Bound the heuristic between 0 and 1
    return heuristic
```
