```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Combine utility and normalized weight for diversity
    diversity_factor = (1 - normalized_weight.sum(axis=1, keepdims=True))
    
    # Calculate heuristic as a weighted sum of utility and diversity
    heuristic = (utility + diversity_factor) / (utility + diversity_factor).sum(axis=1, keepdims=True)
    
    # Prune the heuristic by setting the lowest values to zero
    prune_threshold = np.percentile(heuristic, 5)
    heuristic[heuristic < prune_threshold] = 0
    
    return heuristic
```
