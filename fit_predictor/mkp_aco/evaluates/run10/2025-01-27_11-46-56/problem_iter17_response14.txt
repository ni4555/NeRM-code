```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Introduce randomness for diversity
    random_noise = np.random.rand(len(max_utility))
    noise_factor = 0.1
    max_utility_with_noise = max_utility + noise_factor * random_noise
    
    # Adapt heuristics based on domain knowledge (e.g., items with higher utility should be more promising)
    adapted_heuristics = max_utility_with_noise * (1 + 0.2 * np.random.rand(len(max_utility)))
    
    # Normalize to ensure all values are within a certain range
    adapted_heuristics = (adapted_heuristics - adapted_heuristics.min()) / (adapted_heuristics.max() - adapted_heuristics.min())
    
    # Set low utility items to zero to sparsify the heuristics
    sparsified_heuristics = np.where(adapted_heuristics > 0.5, adapted_heuristics, 0)
    
    return sparsified_heuristics
```
