```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.random.rand(utility.shape[0])
    time_sensitive_factor = np.sin(np.arange(utility.shape[0]) * 0.1)  # Time-sensitivity using sine wave
    heuristic = (utility * diversity_factor * time_sensitive_factor) / (utility.sum(axis=1, keepdims=True) + 1e-6)
    heuristic[heuristic < 0.1] = 0  # Sparsify by setting low values to zero
    return heuristic
```
