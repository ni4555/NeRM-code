```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weight along each dimension
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    # Calculate the sum of the normalized weights for each item
    total_normalized_weight = normalized_weight.sum(axis=1, keepdims=True)
    # Calculate utility by dividing prize by the sum of normalized weights
    utility = prize / total_normalized_weight
    # Use a diversity factor based on the average normalized weight across dimensions
    diversity_factor = normalized_weight.mean(axis=1)
    # Combine utility and diversity factor to create heuristics
    heuristics = utility * diversity_factor
    # Sparsify by setting items with low utility and diversity to zero
    sparsity_threshold = heuristics.mean()
    heuristics[heuristics < sparsity_threshold] = 0
    return heuristics
```
