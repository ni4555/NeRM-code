```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Non-linear diversity factor
    diversity_factor = np.tanh(utility * 10)  # Scaled and shifted utility for the tanh function
    
    # Exploration factor based on a uniform distribution
    exploration_factor = np.random.rand(n, 1)
    
    # Exploitation factor based on the utility
    exploitation_factor = np.exp(utility)
    
    # Time-based adjustment
    time_factor = np.arange(1, n + 1)
    
    # Combine all factors for heuristic calculation
    heuristics = utility * diversity_factor * exploration_factor * exploitation_factor * time_factor
    
    # Ensure non-negative heuristics
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    
    # Normalize heuristics to sum to 1 for each item
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    
    return normalized_heuristics.sum(axis=1)
```
