```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Add a random perturbation to the utility for diversity
    noise = np.random.normal(0, 0.1, prize.shape)
    utility_noisy = utility + noise
    
    # Apply a dynamic adaptive weight allocation by considering time-sensitivity
    time_factor = np.linspace(1, 0.9, prize.shape[0])
    
    # Combine various factors to determine the final heuristics
    heuristics = (max_utility * time_factor) + utility_noisy
    heuristics[heuristics < 0] = 0  # Sparsify the heuristics
    
    return heuristics
```
