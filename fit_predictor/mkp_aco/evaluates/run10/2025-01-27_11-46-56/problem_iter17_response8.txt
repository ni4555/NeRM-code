```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Add noise to promote diversity
    noise = np.random.normal(0, 0.1, size=utility.shape)
    
    # Incorporate time-based adaptation
    time_factor = np.linspace(1, 0.9, num=utility.shape[0])
    
    # Dynamic adaptive weight allocation
    adaptive_weight = normalized_weight * np.exp(np.random.normal(0, 0.05, size=utility.shape))
    
    # Calculate heuristic value considering all factors
    heuristics = (max_utility + noise * time_factor * adaptive_weight).ravel()
    
    # Sparsify the heuristics by setting unpromising elements to zero
    sparsity_threshold = np.percentile(heuristics, 90)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
