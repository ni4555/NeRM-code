```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Apply dynamic adaptive weight allocation
    dynamic_weight_factor = np.sum(normalized_weight * weight, axis=1)
    dynamic_weight_factor = dynamic_weight_factor / dynamic_weight_factor.sum()
    
    # Generate random diversity factor with controlled variance
    diversity_factor = np.random.normal(loc=0.0, scale=1.0, size=utility.shape)
    
    # Ensure diversity factor contributes to the heuristic
    diversity_factor[diversity_factor <= 0] = 1.0
    
    # Calculate heuristic
    heuristic = utility * diversity_factor * dynamic_weight_factor
    max_heuristic = heuristic.max(axis=1)
    
    return max_heuristic
```
