```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate the diversity factor based on the inverse of the utility
    diversity_factor = 1 / (1 + np.exp(-utility))
    
    # Exploration factor using a Gaussian distribution
    exploration_factor = np.random.normal(0, 0.1, size=utility.shape)
    
    # Exploitation factor based on the utility normalized by the sum of utilities
    exploitation_factor = utility / utility.sum(axis=1, keepdims=True)
    
    # Adaptability factor that decreases over time, simulating a cooling schedule
    adaptability_factor = np.exp(-np.arange(len(utility)) / np.mean(np.arange(len(utility))))
    
    # Combine factors to create the heuristic
    heuristics = utility * diversity_factor * exploitation_factor * exploration_factor * adaptability_factor
    
    # Normalize the heuristics to ensure they sum to 1
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    
    return normalized_heuristics.sum(axis=1)
```
