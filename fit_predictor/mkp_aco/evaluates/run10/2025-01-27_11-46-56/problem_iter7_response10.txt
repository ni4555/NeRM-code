```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Integrate diversity into utility and normalize
    diversity = 1 - np.abs(utility - utility.mean(axis=1, keepdims=True))
    adjusted_utility = utility * diversity
    
    # Dynamic adaptive weight allocation by balancing objectives
    max_utility = adjusted_utility.max(axis=1)
    
    # Normalize, avoid dominance, and bound heuristics
    heuristics = (adjusted_utility - adjusted_utility.min(axis=1, keepdims=True)) / (adjusted_utility.max(axis=1) - adjusted_utility.min(axis=1))
    
    # Sparsify the heuristics by setting unpromising elements to zero
    heuristics[heuristics < 0.5] = 0.0
    return heuristics
```
