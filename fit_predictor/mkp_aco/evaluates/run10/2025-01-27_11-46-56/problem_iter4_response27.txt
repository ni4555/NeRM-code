```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.sum((utility - max_utility[:, np.newaxis])**2, axis=1)
    heuristic = max_utility + diversity_factor

    # Apply normalization to the heuristic to ensure values are in a comparable range
    heuristic_normalized = (heuristic - heuristic.min()) / (heuristic.max() - heuristic.min())

    # Adjust heuristic to promote diversity and avoid premature convergence
    heuristic_normalized[heuristic_normalized < 0.1] = 0.1
    heuristic_normalized[heuristic_normalized > 0.9] = 0.9

    # Prune weak candidates based on a threshold that considers both utility and diversity
    heuristic_threshold = 0.5 * max_utility + 0.1 * diversity_factor
    heuristic_pruned = np.where(heuristic > heuristic_threshold, heuristic, 0)
    
    return heuristic_pruned
```
