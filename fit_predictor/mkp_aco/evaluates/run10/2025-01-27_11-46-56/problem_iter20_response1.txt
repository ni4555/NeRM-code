```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    # Use a single factor to balance exploration and exploitation
    heuristics = max_utility * np.exp(-np.abs(utility - max_utility) / max_utility)
    # Adjust for diversity by penalizing items that are too similar
    diversity_factor = 1 / (1 + np.sum((utility - max_utility)**2, axis=1, keepdims=True))
    heuristics *= diversity_factor
    return heuristics
```
