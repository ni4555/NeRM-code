```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    heuristic = max_utility + np.sqrt(np.sum((utility - max_utility[:, np.newaxis])**2, axis=1))
    # Adjusting the heuristic to focus on the balance between utility and diversity
    adjustment_factor = np.sqrt(2)
    heuristic = heuristic * adjustment_factor
    # Setting a lower bound to keep a diversity of at least some level
    min_diversity = 1e-4
    heuristic[heuristic < min_diversity] = min_diversity
    return heuristic
```
