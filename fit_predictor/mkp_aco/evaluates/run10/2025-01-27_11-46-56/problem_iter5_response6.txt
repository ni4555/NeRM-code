```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate maximum utility per item
    max_utility = utility.max(axis=1)
    
    # Introduce diversity by ensuring at least one item from each dimension contributes to the heuristic
    min_dimensional_utility = utility.min(axis=1)
    min_dimensional_utility[weight.sum(axis=1, keepdims=True) < 1] = 0
    
    # Combine max utility with min utility to ensure diversity and balance exploration vs exploitation
    combined_heuristics = 0.5 * max_utility + 0.5 * min_dimensional_utility
    
    # Apply a bounded heuristic to promote diversity
    bounded_heuristics = np.clip(combined_heuristics, 0, 1)
    
    # Prune low-priority items by setting their heuristics to zero
    bounded_heuristics[combined_heuristics < 0.1] = 0
    
    return bounded_heuristics
```
