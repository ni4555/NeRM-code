```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = (1 / m) * (1 / (utility**2 + 1))  # Adding diversity by considering the inverse square of utility
    exploration_exploitation = 0.5 * (1 + np.random.uniform(size=utility.shape))  # Balancing exploration and exploitation
    heuristic = utility * diversity_factor * exploration_exploitation
    max_heuristic = heuristic.max(axis=1)
    return max_heuristic
```
