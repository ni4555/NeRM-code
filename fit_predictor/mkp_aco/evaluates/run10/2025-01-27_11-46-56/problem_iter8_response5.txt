```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.sum((utility - max_utility[:, np.newaxis])**2, axis=1)
    
    # Dynamic threshold based on the standard deviation and the ratio of the maximum utility
    threshold = max_utility + 0.5 * np.std(diversity_factor) / np.mean(max_utility)
    
    # Incorporate diversity with exponential adjustments
    diversity_adjustment = np.exp(-diversity_factor / (np.std(diversity_factor) + 1e-5))
    
    # Adjusted heuristic by combining utility, diversity, and diversity adjustments
    adjusted_heuristic = utility * diversity_adjustment + diversity_factor
    
    # Filter out the items below the dynamic threshold
    adjusted_heuristic[adjusted_heuristic < threshold] = 0
    
    return adjusted_heuristic
```
