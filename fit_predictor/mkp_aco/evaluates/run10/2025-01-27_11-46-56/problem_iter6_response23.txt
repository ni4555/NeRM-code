```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.sum((utility - max_utility[:, np.newaxis])**2, axis=1)
    heuristic = max_utility + diversity_factor

    # Calculate adaptive weight for each item based on its normalized utility and diversity
    adaptive_weight = heuristic / heuristic.sum()
    # Normalize the adaptive weight
    adaptive_weight = adaptive_weight / adaptive_weight.sum()

    # Use adaptive weights to determine the heuristics score
    heuristic = np.random.rand(n)
    np.add.at(heuristic, np.argsort(adaptive_weight), adaptive_weight)

    # Threshold adjustment based on standard deviation and mean
    threshold = max_utility.mean() + 0.5 * np.std(max_utility) / np.sqrt(n)
    heuristic[heuristic < threshold] = 0

    return heuristic
```
