```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.log(1 + utility)  # Non-linear diversity factor with a minimum of 1
    exploration_factor = np.random.rand(*utility.shape)  # Exploration factor for randomness
    exploitation_factor = np.exp(utility)  # Exploitation factor based on utility
    time_factor = np.arange(1, n + 1) / n  # Normalize the time factor for scale
    heuristics = utility * diversity_factor * exploration_factor * exploitation_factor * time_factor
    heuristics = np.clip(heuristics, a_min=0, a_max=1)  # Ensure non-negative values for the heuristic
    return heuristics.sum(axis=1)
```
