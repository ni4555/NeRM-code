```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate the heuristic based on utility
    max_utility = utility.max(axis=1)
    
    # Additional item-level attributes
    diversity = np.sum((utility - np.mean(utility, axis=1, keepdims=True))**2, axis=1)
    
    # Adapt sampling to current solution state
    # Assuming that we have a partial solution state `solution` with shape (n,)
    # solution = np.zeros(n, dtype=bool)
    # We can calculate a penalty for items already in the solution
    # penalty = np.dot(solution, utility)
    
    # Apply normalization techniques to optimize the allocation process
    # Normalize diversity and penalty by the maximum possible value
    max_diversity = diversity.max()
    normalized_diversity = diversity / max_diversity
    
    # Combine heuristics using a weighted sum
    # Weights can be adjusted based on problem specifics or learning from previous runs
    weight_diversity = 0.5
    weight_penalty = 0.5
    
    # Assuming penalty is calculated
    # heuristics = max_utility + weight_diversity * normalized_diversity - weight_penalty * penalty
    # Since penalty is not provided, we will only use max_utility and diversity
    heuristics = max_utility + weight_diversity * normalized_diversity
    
    return heuristics
```
