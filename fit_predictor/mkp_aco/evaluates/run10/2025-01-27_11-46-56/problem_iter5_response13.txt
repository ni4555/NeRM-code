```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.std(utility, axis=1)
    bounded_utility = np.clip(utility, 0, 1)
    heuristic_values = bounded_utility * max_utility * diversity_factor
    heuristic_values[heuristic_values < 0.1] = 0  # Sparsify the heuristics
    return heuristic_values
```
