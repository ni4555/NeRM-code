```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-np.sqrt(utility))
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.exp(utility)
    heuristic = utility * diversity_factor * exploration_factor * exploitation_factor
    heuristic = np.clip(heuristic, a_min=0, a_max=1)
    heuristic = heuristic / heuristic.sum(axis=1, keepdims=True)
    # Apply a time-sensitive factor that increases exploration over time
    time_factor = np.linspace(1, n + 1, n) / n
    heuristic *= time_factor
    # Normalize the heuristic values again after applying time factor
    return heuristic.sum(axis=1)
```
