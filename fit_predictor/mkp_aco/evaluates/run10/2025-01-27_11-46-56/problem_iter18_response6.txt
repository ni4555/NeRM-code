```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Introduce Gaussian noise for exploration
    exploration_noise = np.random.normal(0, 1, utility.shape)
    
    # Combine utility with exploration noise
    combined_utility = utility + exploration_noise
    
    # Normalize the combined utility to maintain range consistency
    combined_utility = (combined_utility - combined_utility.min()) / (combined_utility.max() - combined_utility.min())
    
    # Use a sigmoid function to encourage diversity
    diversity_factor = 1 / (1 + np.exp(-combined_utility))
    
    # Normalize the diversity factor to ensure it's between 0 and 1
    diversity_factor = (diversity_factor - diversity_factor.min()) / (diversity_factor.max() - diversity_factor.min())
    
    # Scale the diversity factor by the utility to prioritize high utility items
    heuristics = utility * diversity_factor
    
    # Normalize the heuristics to ensure the sum of heuristics for each item is 1
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    
    # Use a softmax function to ensure the heuristics are non-negative and sum to 1
    softmax_normalization = np.exp(normalized_heuristics - normalized_heuristics.max(axis=1, keepdims=True))
    softmax_normalization = softmax_normalization / softmax_normalization.sum(axis=1, keepdims=True)
    
    return softmax_normalization.sum(axis=1)
```
