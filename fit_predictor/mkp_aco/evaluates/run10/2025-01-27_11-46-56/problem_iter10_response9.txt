```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Adaptive weighting based on the current state of the knapsacks
    adaptive_weight = np.sum(weight, axis=0) / np.sum(weight, axis=0).max()
    adaptive_utility = prize / (adaptive_weight * normalized_weight).sum(axis=1, keepdims=True)
    
    # Explore diverse utility metrics by considering both average and maximum utility
    average_utility = utility.mean(axis=1)
    combined_utility = 0.5 * adaptive_utility + 0.5 * average_utility
    
    # Normalize the combined utility to ensure the sum is 1 for each knapsack
    max_combined_utility = combined_utility.max(axis=1)
    normalized_combined_utility = combined_utility / max_combined_utility[:, np.newaxis]
    
    return normalized_combined_utility
```
