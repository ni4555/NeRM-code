```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights and compute utility
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)

    # Compute diversity
    mean_utility = utility.mean(axis=1, keepdims=True)
    diversity = np.sum((utility - mean_utility) ** 2, axis=1)

    # Normalize diversity to be within [0, 1]
    max_diversity = diversity.max()
    normalized_diversity = diversity / max_diversity

    # Compute heuristic score
    heuristic = utility.mean(axis=1) + normalized_diversity * 0.5

    # Clip heuristic to avoid dominance and normalize
    heuristic = np.clip(heuristic, 0, 1)
    heuristic /= heuristic.sum()

    return heuristic
```
