```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Dynamic adaptive weight allocation
    adjusted_utility = np.apply_along_axis(lambda x: (x - np.min(x)) / (np.max(x) - np.min(x)), 1, utility)
    
    # Refined heuristic-based sampling strategy with normalization
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    diversity_factor = np.random.rand(len(prize))
    adjusted_heuristics = adjusted_utility * normalized_prize * diversity_factor
    
    return adjusted_heuristics
```
