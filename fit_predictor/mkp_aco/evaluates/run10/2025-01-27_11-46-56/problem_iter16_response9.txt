```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.random.rand(len(prize))
    
    # Ensure diversity by penalizing items that have the same utility
    same_utility_penalty = np.bincount(utility.argmax(axis=1), minlength=len(prize)) / len(prize)
    adjusted_diversity_factor = 1 - same_utility_penalty
    
    # Balance exploration and exploitation by combining max utility and diversity factor
    adjusted_heuristics = max_utility * adjusted_diversity_factor
    # Normalize the heuristic scores to sum to 1
    adjusted_heuristics /= adjusted_heuristics.sum()
    return adjusted_heuristics
```
