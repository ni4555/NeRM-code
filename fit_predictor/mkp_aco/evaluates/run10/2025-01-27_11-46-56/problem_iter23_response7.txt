```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity = (np.random.rand(*utility.shape) - 0.5) * 2  # Randomness for diversity
    time_sensitivity = np.exp(-np.abs(np.argsort(utility) - np.argsort(prize)))  # Time sensitivity based on order
    combined_score = utility * diversity * time_sensitivity
    max_combined_score = combined_score.max(axis=1)
    sparsified_score = np.where(combined_score >= max_combined_score.max() / 2, combined_score, 0)
    return sparsified_score
```
