```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Use exponential decay for diversity, emphasizing the highest utility items
    diversity_factor = np.exp(-utility)

    # Add normal distribution for exploration, introducing randomness
    exploration_factor = np.random.normal(0, 0.1, size=utility.shape)

    # Combine utility, diversity, and exploration factors
    initial_heuristics = utility * diversity_factor * exploration_factor

    # Normalize to ensure the sum of heuristics is 1 across all items
    normalized_heuristics = initial_heuristics / initial_heuristics.sum(axis=1, keepdims=True)

    # Adjust for diversity by penalizing items with lower utility more
    adjusted_diversity = np.where(normalized_heuristics < 0.5, 1 - 2 * (normalized_heuristics - 0.5), normalized_heuristics)

    # Introduce a time-sensitivity factor to promote exploration over exploitation over time
    time_factor = np.arange(1, n + 1) / np.arange(1, n + 1).sum()
    adjusted_diversity *= time_factor

    # Normalize the final heuristics to ensure their sum is 1
    final_heuristics = adjusted_diversity / adjusted_diversity.sum(axis=1, keepdims=True)

    # Sum the heuristics to get the final selection scores
    return final_heuristics.sum(axis=1)
```
