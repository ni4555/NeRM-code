```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.random.rand(prize.shape[0])
    robustness_factor = np.mean(utility, axis=1)
    heuristics = (max_utility * diversity_factor * robustness_factor)
    sparsified_heuristics = heuristics * (heuristics > heuristics.mean())
    return sparsified_heuristics
```
