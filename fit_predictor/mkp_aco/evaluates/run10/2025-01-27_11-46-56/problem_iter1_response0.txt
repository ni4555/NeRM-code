```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate heuristic using a combination of max utility, average prize, and sparsity
    heuristic_score = utility.max(axis=1)  # Max utility
    heuristic_score += (prize.mean() / prize.sum()) * utility  # Average prize as a penalty for selecting less valuable items
    
    # Sparsify the heuristics by setting low-score items to zero
    sparsity_threshold = 0.2  # Threshold for sparsity
    heuristic_score[heuristic_score < sparsity_threshold] = 0
    
    return heuristic_score
```
