```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.mean(utility, axis=1)
    heuristic = max_utility + diversity_factor
    # Introduce controlled randomness
    random_factor = np.random.rand(len(heuristic))
    heuristic = heuristic * (1 - random_factor) + random_factor
    # Sparsify by setting lower values to zero
    sparsified_heuristic = np.where(heuristic > 0, heuristic, 0)
    return sparsified_heuristic
```
