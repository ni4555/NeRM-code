```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate utility directly using max utility in each dimension
    utility = np.array([max(prize[i] / weight[i, j] for j in range(m)) for i in range(n)])

    # Apply a threshold to reduce dominance
    threshold = utility.mean() + 0.5 * np.std(utility) / np.sqrt(n)
    heuristic = np.where(utility >= threshold, 1, 0)

    return heuristic
```
