```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Introduce exploration noise carefully
    exploration_noise = np.random.normal(0, 1, utility.shape)
    
    # Use a non-linear diversity factor based on a modified Gaussian distribution
    diversity_factor = np.exp(-0.5 * (utility - exploration_noise) ** 2)
    
    # Balance utility and diversity through scaling
    heuristics = utility * diversity_factor
    heuristics = np.clip(heuristics, a_min=0, a_max=1)  # Ensure non-negative values for the heuristic
    
    # Normalize the heuristics to ensure the sum of heuristics for each item is 1
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    
    return normalized_heuristics.sum(axis=1)
```
