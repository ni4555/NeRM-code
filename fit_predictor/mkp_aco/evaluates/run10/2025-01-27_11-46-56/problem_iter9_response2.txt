```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity = np.std(normalized_weight, axis=1)
    max_utility = utility.max(axis=1)
    diversity_penalty = (1 - diversity) * 0.5  # Applying a penalty for lower diversity
    heuristics = max_utility + diversity_penalty
    heuristics[heuristics < 0] = 0  # Sparsifying by setting negative values to zero
    return heuristics
```
