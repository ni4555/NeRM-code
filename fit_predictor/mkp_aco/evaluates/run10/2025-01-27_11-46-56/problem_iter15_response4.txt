```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Introduce controlled randomness
    random_factor = np.random.rand(*utility.shape) * 0.1
    
    # Amplify diversity by considering variance
    variance_factor = np.var(utility, axis=1, keepdims=True) * 0.05
    
    # Combine factors to determine heuristics
    combined_heuristics = utility + random_factor + variance_factor
    
    # Normalize by key problem aspects and sparsify
    max_combined = combined_heuristics.max(axis=1, keepdims=True)
    heuristics = combined_heuristics / max_combined
    
    # Set unpromising elements to zero
    heuristics[combined_heuristics < max_combined / 2] = 0
    
    return heuristics
```
