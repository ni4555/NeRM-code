```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to have a mean of 0 and standard deviation of 1
    mean_prize = prize.mean()
    std_prize = prize.std()
    normalized_prize = (prize - mean_prize) / std_prize

    # Normalize the weight for each dimension to a standard deviation of 1
    for i in range(m):
        weight[:, i] = (weight[:, i] - weight[:, i].mean()) / weight[:, i].std()

    # Calculate the utility by dividing the normalized prize by the sum of normalized weights
    utility = normalized_prize / weight.sum(axis=1, keepdims=True)

    # Calculate the maximum utility for each item
    max_utility = utility.max(axis=1)

    # Normalize the max utility to get a heuristic score
    max_utility_normalized = max_utility / max_utility.max()

    return max_utility_normalized
```
