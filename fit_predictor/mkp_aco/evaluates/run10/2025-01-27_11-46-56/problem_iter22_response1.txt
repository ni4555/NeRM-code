```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-utility)
    exploration_factor = np.random.normal(0, 0.1, size=utility.shape)
    sharpness_factor = 1 / (1 + np.exp(-5 * utility))  # Enhanced sharpness factor for peak selection
    peak_heuristics = utility * diversity_factor * exploration_factor * sharpness_factor
    # Introduce a balancing factor between exploration and exploitation
    balancing_factor = np.exp(-utility)
    heuristics = peak_heuristics * balancing_factor
    # Refined normalization that promotes diversity while focusing on promising items
    normalized_heuristics = heuristics * (1 / (1 + np.exp(-heuristics)))
    # Apply the normalization to balance exploration and exploitation
    enhanced_normalization = (1 - normalized_heuristics / (1 + normalized_heuristics)) * (1 + normalized_heuristics / (1 + normalized_heuristics))
    normalized_peak_heuristics = heuristics * enhanced_normalization
    # Final normalization to ensure the sum of heuristics is 1 for each item
    normalized_peak_heuristics = normalized_peak_heuristics / normalized_peak_heuristics.sum(axis=1, keepdims=True)
    return normalized_peak_heuristics.sum(axis=1)
```
