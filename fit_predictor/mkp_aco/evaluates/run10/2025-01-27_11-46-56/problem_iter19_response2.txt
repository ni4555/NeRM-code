```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Add a noise term to increase diversity
    noise = np.random.normal(0, 0.1, utility.shape)
    
    # Incorporate time-sensitivity by adding a decay factor
    decay = np.exp(-np.arange(utility.shape[0]) / 10)
    
    # Calculate heuristic value combining utility, noise, and decay
    heuristics = utility + noise + decay
    
    # Normalize to ensure a balance between exploitation and exploration
    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())
    
    # Set unpromising elements to zero
    heuristics[heuristics < 0.5] = 0
    
    return heuristics
```
