```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity = np.std(utility, axis=1)
    heuristic = max_utility + diversity * 0.9  # Balancing utility and diversity
    # Incorporating adaptive weight allocation based on the standard deviation
    adaptive_weight = np.mean(weight, axis=0)
    allocation_score = (normalized_weight / adaptive_weight) * max_utility
    heuristic = heuristic + allocation_score * 0.1
    heuristic = np.clip(heuristic, 0, 1)  # Ensuring non-negative and bounded heuristic
    return heuristic
```
