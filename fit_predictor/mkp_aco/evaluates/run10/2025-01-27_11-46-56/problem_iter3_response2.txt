```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    additional_factors = np.random.rand(*utility.shape)  # Add randomness to enhance diversity
    sparsity_factor = np.random.rand(*utility.shape) < 0.8  # Sparsify by setting high probability to zero
    heuristics = max_utility * additional_factors * sparsity_factor
    return heuristics
```
