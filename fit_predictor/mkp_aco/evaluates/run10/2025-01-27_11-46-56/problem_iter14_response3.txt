```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-utility)  # Using a non-linear diversity factor
    exploration_factor = np.random.rand(*utility.shape)  # Exploration factor for randomness
    exploitation_factor = np.exp(utility)  # Exploitation factor based on utility
    heuristics = utility * diversity_factor * exploration_factor * exploitation_factor
    heuristics = np.clip(heuristics, a_min=0, a_max=1)  # Ensure non-negative values for the heuristic
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    # Time-sensitive adjustments can be incorporated here, for simplicity, we'll use a time variable
    time_factor = np.arange(1, len(normalized_heuristics) + 1)  # Simple time variable as an example
    heuristics *= time_factor  # Apply the time factor to emphasize the dynamics of the MKP
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    return normalized_heuristics.sum(axis=1)
```
