```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity = np.std(utility, axis=1)
    heuristic = max_utility + diversity
    # Apply a normalization technique to the heuristic scores to ensure they are within a specific range
    min_heuristic = heuristic.min()
    max_heuristic = heuristic.max()
    normalized_heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    # Apply a dynamic adaptive weight allocation mechanism by adjusting the heuristic scores
    dynamic_weight = np.exp(normalized_heuristic)
    # Normalize the dynamic weights to ensure they sum to 1
    dynamic_weight /= dynamic_weight.sum()
    return dynamic_weight
```
