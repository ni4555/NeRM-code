```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.apply_along_axis(lambda x: np.std(x), axis=1, arr=utility)
    dominance_check = utility / diversity_factor
    max_utility = utility.max(axis=1)
    heuristics = (max_utility + diversity_factor) / (max_utility + diversity_factor).max()
    heuristics[dominance_check < 1] = 0
    return heuristics
```
