```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    diversity_factor = (utility - max_utility.mean(axis=1, keepdims=True)) / max_utility.mean(axis=1, keepdims=True)
    heuristic = max_utility + diversity_factor
    heuristic = np.clip(heuristic, 0, 1)  # Bounded heuristic
    heuristic[heuristic < 0.01] = 0  # Sparsify heuristic
    
    return heuristic
```
