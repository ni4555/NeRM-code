```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-utility)  # Non-linear diversity factor
    exploration_factor = np.random.rand(*utility.shape)  # Randomness for exploration
    exploitation_factor = np.exp(utility)  # Exploitation factor based on utility
    time_factor = np.arange(1, len(utility) + 1)  # Time-sensitive factor

    # Dynamic adaptive weight allocation by incorporating the time factor
    adaptive_weight = (normalized_weight * time_factor).sum(axis=1, keepdims=True)
    adaptive_utility = prize / adaptive_weight

    heuristics = utility * diversity_factor * exploration_factor * exploitation_factor
    heuristics *= adaptive_utility  # Incorporate adaptive utility into the heuristic

    heuristics = np.clip(heuristics, a_min=0, a_max=1)  # Ensure non-negative values for the heuristic
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    return normalized_heuristics.sum(axis=1)
```
