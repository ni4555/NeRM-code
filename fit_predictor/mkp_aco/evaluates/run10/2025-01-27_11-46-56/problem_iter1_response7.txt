```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.apply_along_axis(lambda x: np.sum(x) / np.std(x), axis=1, arr=utility)
    combined_heuristics = max_utility * diversity_factor
    sparsified_heuristics = np.where(combined_heuristics > 0.5, combined_heuristics, 0)
    return sparsified_heuristics
```
