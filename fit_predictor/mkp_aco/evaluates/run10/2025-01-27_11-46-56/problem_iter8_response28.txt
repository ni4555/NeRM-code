```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights and calculate utility
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)

    # Calculate diversity by considering the variance of utility
    diversity = np.var(utility, axis=1)

    # Normalize diversity to scale it appropriately
    diversity_normalized = diversity / diversity.max()

    # Calculate heuristic based on normalized utility and diversity
    heuristic = utility.mean(axis=1) + diversity_normalized * 0.5

    # Apply a threshold to avoid heuristic domination
    heuristic = np.clip(heuristic, 0, 1)

    return heuristic
```
