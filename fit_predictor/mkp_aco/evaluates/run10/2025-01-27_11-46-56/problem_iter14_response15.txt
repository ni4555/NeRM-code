```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights along the item dimension to consider all dimensions equally
    normalized_weight = weight / np.sum(weight, axis=1, keepdims=True)
    # Calculate the utility of each item
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    # Apply a diversity factor based on the standard deviation of utility scores
    diversity_factor = np.random.normal(loc=1, scale=utility.std(axis=1), size=utility.shape[0])
    # Multiply the maximum utility by the diversity factor to ensure a balanced selection
    return max_utility * diversity_factor
```
