```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.random.rand(prize.shape[0])
    dominance_factor = np.exp(utility / utility.max(axis=1))
    normalized_utility = (utility / utility.max(axis=1)).T
    heuristics = normalized_utility * diversity_factor * dominance_factor
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = np.exp(-np.log(np.random.rand(prize.shape[0])) * heuristics.max())
    heuristics[heuristics < threshold] = 0
    return heuristics
```
