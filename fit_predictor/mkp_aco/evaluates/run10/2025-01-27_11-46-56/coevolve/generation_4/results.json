{
  "generation": 4,
  "description": "Optimizing the selection of diverse items for a multi-knapsack scenario through a hybrid metaheuristic approach that incorporates adaptive weighting and dynamic partitioning strategies. This approach leverages a stochastic sampling mechanism to strategically select subsets of items, maximizing the reward-to-weight ratio while adhering to multi-dimensional weight constraints and ensuring optimal item diversity and normalization.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    # Initialize a matrix to store the ratio of prize to weight for each item in each dimension\n    prize_weight_ratio = np.zeros((n, m))\n    for i in range(n):\n        prize_weight_ratio[i] = prize[i] / weight[i]\n    \n    # Calculate the average ratio for each dimension\n    avg_ratio = np.mean(prize_weight_ratio, axis=0)\n    \n    # Calculate the normalized ratio for each item in each dimension\n    normalized_ratio = prize_weight_ratio / avg_ratio\n    \n    # Perform a stochastic sampling to select subsets of items\n    random_indices = np.random.choice(n, size=n, replace=False)\n    \n    # Calculate the heuristics for each item based on normalized ratio\n    heuristics = np.zeros(n)\n    for i in range(n):\n        heuristics[random_indices[i]] = np.sum(normalized_ratio[random_indices[i]])\n    \n    return heuristics",
      "fitness": 20.4354570062635,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_1.txt",
      "code_file": "coevolve\\generation_4\\code_1.py"
    }
  ]
}