Fitness: inf

Description:
The objective is to design a state-of-the-art algorithm for solving the Multiple Knapsack Problem (MKP), focusing on maximizing total prize collection under stringent multi-dimensional weight constraints. The algorithm must incorporate a dynamic adaptive weight allocation mechanism, which intelligently partitions knapsacks to enhance efficiency. It should utilize a refined heuristic-based sampling strategy, specifically the Max-Utility heuristic, to guarantee precise item subset selection. This approach aims to foster solution diversity by exploring the problem space effectively and applying normalization techniques to streamline the allocation process, ensuring a robust and optimized solution to the MKP.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize array
    normalized_prize = prize / np.sum(prize)
    
    # Calculate utility for each item based on Max-Utility heuristic
    utility = np.sum(normalized_prize * weight, axis=1)
    
    # Sort items by utility in descending order
    sorted_indices = np.argsort(-utility)
    
    # Initialize heuristics array with zeros
    heuristics = np.zeros_like(prize)
    
    # Assign high heuristic value to the top items
    heuristics[sorted_indices] = utility[sorted_indices]
    
    return heuristics