{
  "generation": 1,
  "description": "Utilizing hybrid metaheuristics to optimize the selection of item subsets in Multi-Knapsack Problems (MKP), focusing on dynamic weight distribution and adaptive heuristic sampling to enhance prize maximization and constraint adherence.",
  "failed_solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    \n    # Dynamic weight distribution\n    weighted_sum = prize / weight.sum(axis=1)\n    \n    # Adaptive heuristic sampling\n    samples = np.random.rand(n)\n    heuristics = (weighted_sum * samples > np.random.rand(n)).astype(float)\n    \n    # Normalize heuristics to ensure sum of probabilities is 1\n    heuristics /= heuristics.sum()\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize heuristic values with 0\n    heuristics = np.zeros_like(prize)\n    \n    # Calculate the total weight for each item\n    total_weight = np.sum(weight, axis=1)\n    \n    # Normalize weights to sum to 1 for each item\n    normalized_weight = weight / total_weight[:, np.newaxis]\n    \n    # Calculate the heuristic based on the normalized weights and prizes\n    heuristics = normalized_weight * prize\n    \n    # Apply dynamic weight distribution by increasing the heuristic values for items with higher weight-to-prize ratio\n    for i in range(n):\n        if heuristics[i] > 0:\n            heuristics += (1 / heuristics[i]) * (weight[i] - total_weight[i] * heuristics[i])\n    \n    # Apply adaptive heuristic sampling by reducing the heuristic values for items that are already included\n    for i in range(n):\n        for j in range(n):\n            if heuristics[j] > 0 and weight[i, :] == weight[j, :]:\n                heuristics[j] *= (1 - heuristics[i])\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    heuristic_values = np.zeros(n)\n    \n    # Initial heuristic: use the prize value\n    heuristic_values[:] = prize\n    \n    # Dynamic weight distribution\n    total_weight = np.sum(weight, axis=1)\n    weight_distribution = total_weight / np.sum(total_weight)\n    \n    for i in range(m):\n        # Adjust heuristic based on weight distribution\n        adjusted_prize = prize * weight_distribution[:, i]\n        heuristic_values += adjusted_prize\n    \n    # Adaptive heuristic sampling\n    sample_size = int(0.1 * n)\n    sampled_indices = np.random.choice(n, size=sample_size, replace=False)\n    sampled_prize = prize[sampled_indices]\n    sampled_weight = weight[sampled_indices, :]\n    \n    # Calculate the additional heuristic value based on the sampled subset\n    additional_heuristic = np.sum(sampled_prize * sampled_weight, axis=1)\n    heuristic_values += np.mean(additional_heuristic)\n    \n    # Normalize the heuristic values to ensure they sum to 1\n    heuristic_values /= np.sum(heuristic_values)\n    \n    return heuristic_values",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the total weight for each dimension\n    total_weight = np.sum(weight, axis=1)\n    \n    # Normalize the weights to the range [0, 1]\n    normalized_weight = weight / total_weight[:, np.newaxis]\n    \n    # Calculate the heuristic value as a product of prize and normalized weight\n    heuristic = prize * normalized_weight\n    \n    # Enhance prize maximization by increasing the heuristic for higher prize items\n    # and adaptive heuristic sampling by reducing the heuristic for items with\n    # high weight ratio (weight/dimension) that are close to their capacity\n    enhanced_heuristic = heuristic * (1 - np.minimum(1, heuristic / np.maximum(1e-5, total_weight)))\n    \n    return enhanced_heuristic",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Traceback (most recent call last):\n  File \"E:\\Projects\\CO\\reevo-main/problems/mkp_aco/eval.py\", line 58, in <module>\n    obj = solve(prize, weight)\n          ^^^^^^^^^^^^^^^^^^^^\n  File \"E:\\Projects\\CO\\reevo-main/problems/mkp_aco/eval.py\", line 23, in solve\n    heu = heuristics(prize.copy(), weight.copy()) + 1e-9\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"E:\\Projects\\CO\\reevo-main\\problems\\mkp_aco\\gpt.py\", line 12, in heuristics_v2\n    heuristic = prize * normalized_weight\n                ~~~~~~^~~~~~~~~~~~~~~~~~~\nValueError: operands could not be broadcast together with shapes (100,) (100,5) \n",
      "stdout_file": "coevolve\\generation_1\\stdout_1.txt",
      "code_file": "coevolve\\generation_1\\code_1.py"
    }
  ]
}