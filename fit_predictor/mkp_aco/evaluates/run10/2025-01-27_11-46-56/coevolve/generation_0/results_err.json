{
  "generation": 0,
  "description": "Solving Multiple Knapsack Problems (MKP) through stochastic solution sampling based on \"heuristics\". MKP involves selecting a subset of items to maximize the total prize collected, subject to multi-dimensional maximum weight constraints.",
  "failed_solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize the heuristic values with zeros\n    heuristics = np.zeros_like(prize, dtype=np.float64)\n    \n    # Calculate the normalized weight for each item in each dimension\n    normalized_weights = weight / np.sum(weight, axis=1, keepdims=True)\n    \n    # Calculate the heuristic based on the ratio of prize to normalized weight\n    heuristics = prize * np.prod(normalized_weights, axis=1)\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    \n    # Normalize prize per dimension\n    normalized_prize = prize / np.sum(prize)\n    \n    # Calculate heuristics based on normalized prize and fixed weight constraint\n    heuristics = normalized_prize * (1 / weight).sum(axis=1)\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the ratio of prize to weight for each item\n    value_to_weight_ratio = prize / weight\n    \n    # Normalize the ratios to get the heuristics\n    heuristics = value_to_weight_ratio / np.sum(value_to_weight_ratio)\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    m = weight.shape[1]\n    if m == 1:\n        return prize / weight[:, 0]\n    else:\n        # Calculate the \"density\" of each item\n        density = prize / weight.sum(axis=1)\n        # Perform a stochastic solution sampling based on density\n        random_samples = np.random.rand(n)\n        return (random_samples > density).astype(int)",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Traceback (most recent call last):\n  File \"E:\\Projects\\CO\\reevo-main/problems/mkp_aco/eval.py\", line 58, in <module>\n    obj = solve(prize, weight)\n          ^^^^^^^^^^^^^^^^^^^^\n  File \"E:\\Projects\\CO\\reevo-main/problems/mkp_aco/eval.py\", line 23, in solve\n    heu = heuristics(prize.copy(), weight.copy()) + 1e-9\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"E:\\Projects\\CO\\reevo-main\\problems\\mkp_aco\\gpt.py\", line 14, in heuristics_v2\n    return heuristics_matrix\n           ^^^^^^^^^^^^^^^^^\nNameError: name 'heuristics_matrix' is not defined\n",
      "stdout_file": "coevolve\\generation_0\\stdout_3.txt",
      "code_file": "coevolve\\generation_0\\code_3.py"
    }
  ]
}