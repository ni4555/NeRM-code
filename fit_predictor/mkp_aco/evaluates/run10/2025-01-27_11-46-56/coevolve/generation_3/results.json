{
  "generation": 3,
  "description": "Enhancing MKP resolution through a refined hybrid metaheuristic framework, we emphasize integrated adaptive weight allocation for dynamic knapsack partitioning, coupled with a strategically enhanced heuristic-based sampling mechanism, to precisely refine subset selection, ultimately maximizing reward gains while rigorously maintaining capacity constraints.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    # Calculate the total capacity for the knapsack\n    total_capacity = np.sum(weight, axis=1)\n    # Initialize heuristic values\n    heuristics = np.zeros(n)\n    # Loop over each item\n    for i in range(n):\n        # Calculate the reward to weight ratio for the current item\n        reward_to_weight_ratio = prize[i] / total_capacity[i]\n        # Calculate the contribution of the item to the overall diversity\n        diversity_contribution = np.abs(np.sum(weight[:, :i]) - np.sum(weight[:, i+1:]))\n        # Update the heuristic value based on the reward-to-weight ratio and diversity\n        heuristics[i] = reward_to_weight_ratio + diversity_contribution\n    # Normalize the heuristic values to ensure they sum to the total capacity\n    heuristics /= np.sum(heuristics)\n    return heuristics",
      "fitness": 20.405178996337053,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_3\\stdout_3.txt",
      "code_file": "coevolve\\generation_3\\code_3.py"
    }
  ]
}