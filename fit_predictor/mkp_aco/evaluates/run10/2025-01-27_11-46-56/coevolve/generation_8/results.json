{
  "generation": 8,
  "description": "The task is to devise an optimized heuristic algorithm for solving the Multiple Knapsack Problem (MKP). The algorithm must dynamically adapt item weights in real-time to optimize multi-dimensional constraints, while ensuring the efficient partitioning of knapsacks. It should implement a sophisticated heuristic-based sampling technique to selectively sample item subsets for maximized prize collection. The algorithm must prioritize solution diversity to avoid local optima and integrate normalization techniques to enhance utility calculations, leading to an improved total prize collection while adhering to weight constraints.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    \n    # Calculate the utility of each item as the normalized prize value\n    utility = prize / np.sum(prize)\n    \n    # Calculate the load of each item in each dimension\n    load = weight / np.sum(weight, axis=1, keepdims=True)\n    \n    # Initialize a matrix to store the heuristic value for each item in each dimension\n    heuristic_matrix = np.zeros((n, m))\n    \n    # Calculate the heuristic for each item in each dimension\n    for i in range(n):\n        for j in range(m):\n            # Calculate the heuristic value based on the load and utility\n            heuristic_matrix[i, j] = load[i, j] * utility[i]\n    \n    # Sum the heuristic values across dimensions to get the final heuristic for each item\n    final_heuristic = np.sum(heuristic_matrix, axis=1)\n    \n    # Apply a selection heuristic to prioritize diverse solutions\n    selected_indices = np.argsort(final_heuristic)[-n//2:]  # Select top n//2 items for diversity\n    final_heuristic[selected_indices] = 1.5 * final_heuristic[selected_indices]  # Increase their heuristic value\n    \n    return final_heuristic",
      "fitness": 21.672541706750003,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_3.txt",
      "code_file": "coevolve\\generation_8\\code_3.py"
    }
  ]
}