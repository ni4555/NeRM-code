```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity = np.random.rand(*utility.shape)  # Introduce randomness for diversity
    time_factor = np.sin(np.arange(utility.shape[0]) * np.pi / utility.shape[0])  # Time-sensitivity factor
    combined_heuristics = utility * diversity * time_factor
    max_combined_heuristics = combined_heuristics.max(axis=1)
    sparsified_heuristics = np.where(max_combined_heuristics > 0.5, max_combined_heuristics, 0)  # Sparsify heuristics
    return sparsified_heuristics
```
