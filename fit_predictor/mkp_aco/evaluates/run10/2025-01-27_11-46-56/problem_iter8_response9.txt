```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to have a mean of 1
    normalized_prize = prize / prize.mean()

    # Normalize the weight for each dimension to have a mean of 1
    normalized_weight = weight / weight.mean(axis=1, keepdims=True)

    # Calculate utility based on normalized prize and weight
    utility = normalized_prize / normalized_weight.sum(axis=1, keepdims=True)

    # Calculate diversity based on the variance of utility
    diversity = np.var(utility, axis=1)

    # Normalize diversity by the maximum diversity value
    max_diversity = diversity.max()
    normalized_diversity = diversity / max_diversity

    # Combine utility and diversity to form the heuristic
    heuristic = utility.mean(axis=1) + normalized_diversity * 0.5

    # Ensure the heuristic values are bounded between 0 and 1
    heuristic = np.clip(heuristic, 0, 1)

    return heuristic
```
