```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    # Introduce diversity by considering the variance of utility scores
    variance = np.var(utility, axis=1)
    # Combine max utility with variance to get a more diverse heuristic
    combined_heuristic = max_utility + variance
    # Prune the heuristic by setting low utility items to zero
    sparsified_heuristic = np.where(combined_heuristic > 0, combined_heuristic, 0)
    return sparsified_heuristic
```
