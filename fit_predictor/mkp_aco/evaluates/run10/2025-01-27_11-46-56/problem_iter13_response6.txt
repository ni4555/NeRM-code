```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Apply a diversity heuristic by considering the difference from the mean utility
    diversity_heuristic = np.abs(utility - utility.mean(axis=1, keepdims=True))
    
    # Combine utility and diversity heuristic
    combined_heuristic = utility + diversity_heuristic
    
    # Normalize the combined heuristic to ensure a proper scale
    max_combined = combined_heuristic.max(axis=1)
    normalized_combined = combined_heuristic / max_combined[:, np.newaxis]
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = 0.5
    sparsified_heuristic = np.where(normalized_combined < threshold, 0, normalized_combined)
    
    return sparsified_heuristic
```
