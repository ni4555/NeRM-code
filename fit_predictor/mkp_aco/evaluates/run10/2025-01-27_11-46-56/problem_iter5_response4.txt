```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Calculate heuristic values based on both utility and diversity
    diversity_heuristic = np.ones(len(prize))
    for i in range(m):
        diversity_heuristic *= np.exp(-np.abs(utility[:, i] - np.mean(utility[:, i])))
    
    # Normalize and combine heuristics with bounded values
    bounded_utility = np.clip(utility, a_min=0, a_max=1)
    combined_heuristic = bounded_utility * diversity_heuristic
    combined_heuristic /= combined_heuristic.sum(axis=1, keepdims=True)
    
    return combined_heuristic
```
