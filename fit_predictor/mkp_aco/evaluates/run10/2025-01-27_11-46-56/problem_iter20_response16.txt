```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Incorporate diversity factor based on utility
    diversity_factor = np.exp(-utility)
    
    # Exploration factor using a Gaussian distribution to introduce randomness
    exploration_factor = np.random.normal(0, 0.1, size=utility.shape)
    
    # Exploitation factor based on the utility of each item
    exploitation_factor = utility / utility.sum(axis=1, keepdims=True)
    
    # Balance between exploration and exploitation
    balance_factor = np.random.beta(1, 1, size=utility.shape)
    
    # Combine all factors to form the heuristic
    heuristics = utility * diversity_factor * exploration_factor * exploitation_factor * balance_factor
    
    # Normalize the heuristics to ensure diversity in the solution set
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    
    return normalized_heuristics.sum(axis=1)
```
