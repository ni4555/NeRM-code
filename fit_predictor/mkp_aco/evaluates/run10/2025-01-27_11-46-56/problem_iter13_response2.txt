```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.random.rand(*utility.shape)
    # Adjust diversity_factor to balance exploration and exploitation
    diversity_factor = (1 + diversity_factor - np.min(diversity_factor)) / np.max(diversity_factor)
    combined_heuristics = utility * diversity_factor
    combined_heuristics[combined_heuristics < 0.1] = 0  # Sparsify the heuristics
    return combined_heuristics
```
