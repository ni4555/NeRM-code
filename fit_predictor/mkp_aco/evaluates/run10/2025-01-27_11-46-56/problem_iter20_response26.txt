```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.exp(-np.sqrt(utility))
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.exp(utility)
    heuristics = utility * diversity_factor * exploration_factor * exploitation_factor
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    time_factor = np.linspace(1, n + 1, n) / n  # Time-sensitive factor with a smooth transition
    heuristics *= time_factor
    normalized_heuristics = heuristics / heuristics.sum(axis=1, keepdims=True)
    return normalized_heuristics.sum(axis=1)
```
