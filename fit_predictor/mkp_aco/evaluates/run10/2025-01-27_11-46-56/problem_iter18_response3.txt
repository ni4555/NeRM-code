```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Introduce Gaussian noise for exploration, but avoid too much noise for the utility
    exploration_noise = np.random.normal(0, 0.01, utility.shape)
    
    # Adjust utility with exploration noise to promote diversity
    adjusted_utility = utility + exploration_noise
    
    # Normalize adjusted utility to maintain a scale for the diversity factor
    normalized_adjusted_utility = adjusted_utility - adjusted_utility.mean(axis=1, keepdims=True)
    
    # Calculate the diversity factor based on the normalized adjusted utility
    diversity_factor = np.exp(-normalized_adjusted_utility)
    
    # Scale the diversity factor by the original utility to prioritize high utility items
    scaled_diversity_factor = utility * diversity_factor
    
    # Normalize the scaled diversity factor to ensure the sum of heuristics for each item is 1
    normalized_heuristics = scaled_diversity_factor / scaled_diversity_factor.sum(axis=1, keepdims=True)
    
    return normalized_heuristics.sum(axis=1)
```
