```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_score = (1 / np.linalg.norm(normalized_weight, axis=1, keepdims=True))
    risk_score = np.min(normalized_weight, axis=1)
    heuristic_score = utility * diversity_score * (1 - risk_score)
    sparsified_heuristic = np.where(heuristic_score > 0.5, heuristic_score, 0)
    return sparsified_heuristic
```
