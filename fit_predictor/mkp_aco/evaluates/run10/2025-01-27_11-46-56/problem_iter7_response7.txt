```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Apply dynamic adaptive weight allocation mechanism
    weight_sum_per_item = np.sum(normalized_weight, axis=0)
    dynamic_weights = weight_sum_per_item / weight.sum()
    
    # Apply a refined heuristic-based sampling strategy
    heuristics = np.array([util * (1 - dynamic_weight)
                            for util, dynamic_weight in zip(utility.ravel(), dynamic_weights.ravel())])
    max_heuristic_per_item = heuristics.reshape(-1)
    
    # Normalize and refine heuristics
    heuristics_normalized = (max_heuristic_per_item - heuristics) / (max_heuristic_per_item - np.min(max_heuristic_per_item))
    
    # Apply diversity promoting mechanisms
    # Sparsify heuristics by setting unpromising elements to zero
    threshold = np.mean(heuristics_normalized)
    heuristics_sparse = np.where(heuristics_normalized < threshold, 0, heuristics_normalized)
    
    return heuristics_sparse.reshape(-1)
```
