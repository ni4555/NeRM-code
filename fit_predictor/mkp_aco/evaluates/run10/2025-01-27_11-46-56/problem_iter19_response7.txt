```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.random.rand(len(utility))
    time_sensitive_factor = np.sin(np.arange(len(utility)) * 0.1)  # Sine wave for time sensitivity
    max_utility = utility.max(axis=1)
    heuristics = (utility - max_utility) + diversity_factor + time_sensitive_factor
    heuristics = np.clip(heuristics, 0, 1)  # Ensuring all heuristics are within [0, 1]
    return heuristics
```
