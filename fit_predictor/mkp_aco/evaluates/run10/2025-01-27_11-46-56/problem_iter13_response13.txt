```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.random.rand(*utility.shape)
    max_utility = utility.max(axis=1)
    # Apply diversity to avoid local optima
    heuristics = (utility - diversity_factor) / (1 + diversity_factor)
    # Sparsify the heuristics by setting less promising elements to zero
    heuristics[heuristics < max_utility] = 0
    return heuristics
```
