```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Promote diversity with noise
    noise_factor = np.random.rand(*utility.shape)
    
    # Incorporate domain knowledge with normalized weights
    normalized_utility = (utility + noise_factor) / (utility + noise_factor).sum(axis=1, keepdims=True)
    
    # Dynamic adaptation: Adjust weights based on time, not explicitly shown here as time is not given.
    # Placeholder for dynamic adaptation, which could be something like:
    # adjusted_utility = normalized_utility * dynamic_weight_adjustment_factor()
    
    max_utility = normalized_utility.max(axis=1)
    
    # Refined heuristic-based sampling strategy: Set lower utility to zero
    sparsified_max_utility = np.where(max_utility < np.percentile(normalized_utility.flatten(), 5), 0, max_utility)
    
    return sparsified_max_utility
```
