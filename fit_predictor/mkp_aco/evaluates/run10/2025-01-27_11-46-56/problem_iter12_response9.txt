```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize weights and prizes
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    normalized_prize = prize / prize.sum()

    # Calculate utility using normalized prizes and weights
    utility = normalized_prize / normalized_weight.sum(axis=1, keepdims=True)

    # Apply exploration-diversity factors
    exploration_factor = np.random.rand(n)
    diversity_factor = 1 / np.std(utility, ddof=1)

    # Dynamic adaptive weight allocation
    allocation = np.zeros(n)
    for i in range(n):
        if exploration_factor[i] > utility[i] * diversity_factor:
            allocation[i] = 1

    # Normalize allocation to sum to 1
    allocation /= allocation.sum()

    return allocation
```
