```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Introduce controlled randomness to promote diversity
    randomness = np.random.rand(prize.shape[0])
    diversity = randomness / randomness.sum()
    
    # Adjust utility based on item-specific variance
    variance = np.var(utility, axis=1)
    adjusted_utility = utility * (1 + variance)
    
    # Combine various factors for heuristics
    heuristics = adjusted_utility * diversity
    
    # Amplify diversity and normalize
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Sparsify by setting unpromising elements to zero
    heuristics[heuristics < 0.5] = 0
    
    return heuristics
```
