```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    
    # Introduce non-linearity and diversity by considering the variance of utility
    variance = np.var(utility, axis=1)
    diversity_factor = variance / max_utility
    
    # Combine factors with a weighted sum approach to balance exploration and exploitation
    exploration_factor = 0.5
    heuristics = exploration_factor * max_utility + (1 - exploration_factor) * diversity_factor
    
    # Normalize the heuristics to ensure they sum to 1 for each knapsack
    heuristics /= heuristics.sum(axis=1, keepdims=True)
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = heuristics.mean()
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
