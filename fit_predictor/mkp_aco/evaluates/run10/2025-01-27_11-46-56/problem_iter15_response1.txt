```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    # Introduce controlled randomness
    random_component = np.random.rand(*utility.shape)
    heuristic = max_utility + random_component * (1 - max_utility)
    # Amplify diversity by ensuring non-zero heuristic values for selected items
    selected_indices = np.where(heuristic > 0.5)[0]
    heuristic[selected_indices] = 1
    # Sparsify by setting less promising elements to zero
    heuristic[heuristic < 0.5] = 0
    return heuristic
```
