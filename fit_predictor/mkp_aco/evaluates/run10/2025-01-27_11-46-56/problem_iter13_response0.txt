```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = 1 / (1 + np.linalg.norm(normalized_weight, axis=1, keepdims=True))
    combined_heuristic = utility * diversity_factor
    max_combined_heuristic = combined_heuristic.max(axis=1)
    sparsified_heuristic = np.where(combined_heuristic > max_combined_heuristic / 2, combined_heuristic, 0)
    return sparsified_heuristic
```
