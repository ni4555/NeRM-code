```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    
    # Introduce exploration noise for diversity
    exploration_noise = np.random.normal(0, 1, utility.shape)
    
    # Apply sigmoid function to encourage diversity
    diversity_factor = 1 / (1 + np.exp(-utility + exploration_noise))
    
    # Normalize the diversity factor to range between 0 and 1
    diversity_factor = (diversity_factor - diversity_factor.min()) / (diversity_factor.max() - diversity_factor.min())
    
    # Scale the diversity factor by the utility
    scaled_diversity_factor = utility * diversity_factor
    
    # Normalize the heuristics so that the sum for each item is 1
    normalized_heuristics = scaled_diversity_factor / scaled_diversity_factor.sum(axis=1, keepdims=True)
    
    return normalized_heuristics.sum(axis=1)
```
