```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights and calculate utility
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)

    # Calculate diversity factor using standard deviation
    diversity_factor = np.std(utility, axis=1)

    # Calculate the maximum utility per knapsack
    max_utility = utility.max(axis=1)

    # Calculate the balance factor between high utility and diversity
    balance_factor = 0.5 * (utility - diversity_factor)

    # Calculate the entropy of the utility distribution
    probabilities = utility / utility.sum(axis=1, keepdims=True)
    entropy = -np.sum(probabilities * np.log(probabilities + 1e-10), axis=1)

    # Combine factors into a heuristic
    heuristic = max_utility + 0.4 * diversity_factor + 0.3 * balance_factor + 0.3 * entropy

    # Bounded heuristic to avoid dominance
    heuristic = np.clip(heuristic, 0, 1)

    return heuristic
```
