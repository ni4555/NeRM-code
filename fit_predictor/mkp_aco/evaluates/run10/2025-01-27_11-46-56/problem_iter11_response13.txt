```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.random.rand(*utility.shape)
    heuristic = utility * diversity_factor
    heuristic[heuristic < 0.1] = 0  # Sparsify by setting low values to zero
    return heuristic
```
