```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    individual_potential = utility.mean(axis=1)
    max_individual_potential = individual_potential.max()
    normalized_individual_potential = individual_potential / max_individual_potential

    diversity = np.sum((utility - utility.mean(axis=1, keepdims=True)) ** 2, axis=1)
    max_diversity = diversity.max()
    normalized_diversity = diversity / max_diversity

    heuristic = 0.5 * (normalized_individual_potential + normalized_diversity)
    heuristic = np.clip(heuristic, 0, 1)  # Bounded heuristic to avoid dominance
    return heuristic
```
