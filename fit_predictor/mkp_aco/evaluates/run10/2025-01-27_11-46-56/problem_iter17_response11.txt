```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_noise = np.random.normal(scale=0.01, size=utility.shape)
    utility_with_noise = utility + diversity_noise
    dynamic_expansion = np.exp(-utility_with_noise.sum(axis=1, keepdims=True) / m)
    max_utility = utility_with_noise * dynamic_expansion
    max_utility = max_utility / max_utility.sum(axis=1, keepdims=True)
    return max_utility
```
