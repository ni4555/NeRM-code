```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_noise = np.random.normal(0, 0.1, size=utility.shape)
    adaptive_weight = np.sum(normalized_weight * diversity_noise, axis=1)
    heuristic_values = (utility * max_utility) + adaptive_weight
    sparsified_heuristic = np.where(heuristic_values > 0, heuristic_values, 0)
    return sparsified_heuristic
```
