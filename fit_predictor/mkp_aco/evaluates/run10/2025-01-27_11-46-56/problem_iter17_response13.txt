```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.random.rand(len(utility))
    domain_knowledge = np.random.rand(len(utility))  # Hypothetical domain knowledge factor
    time_based_factor = np.exp(-np.arange(len(utility)) / np.mean(np.arange(len(utility))))
    
    # Combining different factors with balancing exploration and exploitation
    heuristics = max_utility * (domain_knowledge * time_based_factor * diversity_factor)
    
    # Adding noise to enhance diversity
    noise = np.random.normal(0, 1, len(utility))
    heuristics += noise
    
    # Clipping values to a positive range to avoid redundancy
    heuristics = np.clip(heuristics, 0, 1)
    
    # Set the lower heuristics values to zero to sparsify the results
    sparsity_threshold = np.quantile(heuristics, 0.1)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
