```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    max_utility = utility.max(axis=1)
    diversity_factor = np.sum((utility - max_utility[:, np.newaxis])**2, axis=1)
    variance_factor = np.var(utility, axis=1)
    entropy = -np.sum(utility * np.log(utility + 1e-10), axis=1)
    heuristic = max_utility + 0.6 * diversity_factor + 0.3 * variance_factor + 0.1 * entropy
    heuristic = np.clip(heuristic, 0, 1)  # Bounded heuristic to avoid dominance
    return heuristic
```
