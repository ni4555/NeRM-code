```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to have a mean of 1
    normalized_prize = prize / prize.mean()

    # Reduce dimensionality by considering the weighted sum of the weights
    reduced_weight = weight.sum(axis=1, keepdims=True)

    # Calculate utility based on normalized prize and reduced weight
    utility = normalized_prize / reduced_weight

    # Dynamic thresholding based on the utility distribution
    threshold = np.percentile(utility, 75)  # Using the 75th percentile as the threshold

    # Create heuristic values based on whether the utility is above the threshold
    heuristic = np.where(utility >= threshold, 1, 0)

    return heuristic
```
