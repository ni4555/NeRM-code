```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    utility = prize / normalized_weight.sum(axis=1, keepdims=True)
    diversity_factor = np.random.rand(len(utility))  # Introduce diversity factor
    utility_with_diversity = utility + diversity_factor
    max_utility = utility_with_diversity.max(axis=1)
    heuristics = (utility_with_diversity - max_utility) < 0.01  # Adapt threshold for sparsification
    return heuristics
```
