import numpy as np
import numpy as np

def heuristics_v1(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a priority queue to store items based on their value-to-weight ratio
    pq = []
    for i in range(prize.shape[0]):
        value_to_weight_ratio = prize[i] / np.sum(weight[i])
        pq.append((value_to_weight_ratio, i))
    
    # Sort the priority queue based on the value-to-weight ratio
    pq.sort()
    
    # Create a heuristic array initialized to 0
    heuristics = np.zeros(prize.shape)
    
    # Use a set to track the dimensions that have been filled to avoid duplicates
    filled_dimensions = set()
    
    # Iterate over the sorted priority queue and update heuristics
    for _, item_index in pq:
        item_weight = weight[item_index]
        for dim in range(item_weight.shape[0]):
            if dim not in filled_dimensions and np.sum(item_weight) <= 1:
                heuristics[item_index] = 1
                filled_dimensions.add(dim)
                break
    
    return heuristics