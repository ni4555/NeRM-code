```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Initialize reinforcement learning model weights
    rl_weights = np.random.rand(n)

    # Deep reinforcement learning for real-time decision-making
    for i in range(n):
        if np.sum(weight[i]) <= 1:
            action = 1  # Item is feasible
        else:
            action = 0  # Item is infeasible
        if action == 1:
            heuristic[i] = np.sum(prize[i])
            rl_weights[i] *= 0.9  # Update RL weights
        else:
            rl_weights[i] *= 0.95  # Update RL weights for infeasible items

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    alpha = 0.1  # Learning rate for adaptive filtering
    for i in range(n):
        if np.sum(weight[i]) > 1:
            heuristic[i] = 0
        else:
            heuristic[i] *= (1 - alpha)

    # Particle swarm optimization for evolutionary swarm intelligence
    particles = np.random.rand(n, n)
    velocities = np.random.rand(n, n)
    best_position = particles
    best_fitness = heuristic

    for iteration in range(100):
        for i in range(n):
            velocities[i] = 0.5 * velocities[i] + 0.1 * (best_position[i] - particles[i])
            particles[i] += velocities[i]
            if heuristic[i] > best_fitness[i]:
                best_position[i] = particles[i]
                best_fitness[i] = heuristic[i]

    # Multi-objective criteria integration
    heuristic = (best_fitness / np.sum(best_fitness)) * 100

    return heuristic
```
