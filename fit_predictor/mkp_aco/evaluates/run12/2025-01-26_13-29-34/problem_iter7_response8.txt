```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (improved with a simulated model)
    model_scores = np.random.rand(n)  # Pre-trained model scores

    # Adaptive constraint-driven filtering (with sparsity)
    feasible_items = np.zeros(n, dtype=bool)
    for i in range(n):
        for j in range(weight.shape[1]):
            if weight[i, j] > 1:
                feasible_items[i] = False
                break
        else:
            feasible_items[i] = True

    # Particle swarm optimization (simplified version)
    global_best_index = np.argmax(model_scores)
    global_best_score = model_scores[global_best_index]

    # Sparsify the heuristic by setting unpromising elements to zero
    for i in range(n):
        # Adjusting the heuristic score to account for multiple objectives
        score = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))
        # Incorporate feasibility into the heuristic
        heuristic[i] = score if feasible_items[i] else 0

        # Adaptive balance between computational efficiency and adaptability
        # This could be a more complex rule set depending on the dynamic environment
        # Here, we simply decrease the weight of less promising items
        if score < global_best_score * 0.5:
            heuristic[i] *= 0.9

    return heuristic
```
