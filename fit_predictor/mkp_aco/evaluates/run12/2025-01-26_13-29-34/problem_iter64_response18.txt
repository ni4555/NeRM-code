```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with a multi-criteria reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x)) - np.sum(np.sum(weight, axis=1) - 1)  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    learning_rate_decay = 0.99

    # Run PSO with adaptive learning rate
    for iteration in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Decay learning rate for PSO
        learning_rate *= learning_rate_decay

        # Update the reward function based on recent performance
        recent_performance = np.mean(model_rewards[-5:])
        reward_function = lambda x: -np.sum(x * np.log(1 + x)) - recent_performance

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * np.exp(model_scores) * heuristic)
    new_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined RL scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Use dynamic thresholds to sparsify heuristics
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    # Balance exploration and exploitation by integrating evolutionary swarm intelligence
    exploration_rate = 0.5
    exploitation_rate = 0.5
    for i in range(n):
        if i in feasible_items:
            heuristic[i] *= (np.random.rand() + 1) * (exploration_rate + exploitation_rate)

    # Introduce mutation for diversity by occasionally resetting low heuristic values
    mutation_rate = 0.1
    for i in range(n):
        if np.random.rand() < mutation_rate and heuristic[i] < np.percentile(heuristic, 25):
            heuristic[i] = np.random.rand()

    # Update the reward function based on the latest performance
    latest_performance = model_rewards[-1]
    reward_function = lambda x: -np.sum(x * np.log(1 + x)) - latest_performance

    return heuristic
```
