```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning for real-time decision-making
    rl_model = np.random.rand(n)
    for _ in range(1000):
        rl_model = rl_model * (1 - 0.001) + (1 - (1 - 0.001)) * np.random.rand(n)  # Learning rate of 0.001

    # Adaptive constraint-driven filtering parameters
    alpha = 0.01  # Learning rate for adaptive filtering
    threshold = 1.0  # Threshold for feasibility

    # Particle swarm optimization parameters
    particles = np.random.rand(n, n)
    velocities = np.random.rand(n, n)
    best_position = particles
    best_fitness = heuristic

    # Initialize particle swarm optimization
    for i in range(n):
        best_position[i] = particles[i]
        best_fitness[i] = np.sum(prize[i]) if np.all(weight[i] <= threshold) else 0

    # Deep reinforcement learning component integrated with particle swarm optimization
    for _ in range(1000):
        for i in range(n):
            action = np.random.choice([0, 1], p=[1 - rl_model[i], rl_model[i]])
            if action == 1:
                if np.all(weight[i] <= threshold):
                    heuristic[i] = np.sum(prize[i])
                else:
                    heuristic[i] = 0
            else:
                heuristic[i] = 0

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    for _ in range(1000):
        for i in range(n):
            if np.any(weight[i] > threshold):
                heuristic[i] = 0
            else:
                heuristic[i] *= (1 - alpha)

    # Particle swarm optimization for evolutionary swarm intelligence
    for _ in range(100):
        for i in range(n):
            for j in range(n):
                velocities[i][j] = velocities[i][j] * 0.8 + 0.2 * (best_position[i][j] - particles[i][j])
                particles[i][j] += velocities[i][j]
            if heuristic[i] > best_fitness[i]:
                best_position[i] = particles[i]
                best_fitness[i] = heuristic[i]

    # Regularize heuristics based on historical performance and constraints
    for i in range(n):
        if np.any(weight[i] > threshold):
            heuristic[i] = 0
        else:
            heuristic[i] = heuristic[i] * (1 - alpha) + (1 - (1 - alpha)) * best_fitness[i]

    return heuristic
```
