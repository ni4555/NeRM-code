```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize adaptive parameters
    inertia_weight = 0.9
    cognitive_coefficient = 2
    social_coefficient = 2
    learning_rate = 0.01
    max_iterations = 100

    for iteration in range(max_iterations):
        # Update PSO positions and scores considering feasibility
        r1, r2 = np.random.randn(n), np.random.randn(n)
        for i in range(n):
            if i in np.sum(weight[:, :], axis=1) <= 1:  # Only consider feasible items
                cognitive_component = cognitive_coefficient * r1[i]
                social_component = social_coefficient * r2[i] * (pso_personal_best[i] - pso_position[i])
                pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_component + social_component
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores = np.clip(pso_global_best_scores, 0, 1)

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Adaptive learning rate for DRL
        adaptive_learning_rate = learning_rate * (1 / (1 + model_rewards[-1]))

        # Update heuristics based on the weighted average of RL and PSO scores
        for i in range(n):
            if np.sum(weight[i, :]) > 1:  # Non-feasible items have 0 heuristic
                heuristic[i] = 0
            else:
                heuristic[i] = model_rewards[-1] * prize[i] / (prize[global_best_index] + 1e-6)

        # Exploit recent decisions by considering the last 'k' rewards
        recent_rewards = model_rewards[-min(10, n):]
        heuristic *= np.exp(-adaptive_learning_rate * (np.arange(n) / n))

        # Refine heuristics based on the most promising heuristic scores
        sorted_indices = np.argsort(heuristic)[::-1]
        heuristic = np.zeros(n)
        heuristic[sorted_indices] = heuristic[sorted_indices] * 1.1

        # Incorporate diversity by considering variance
        diversity_factor = np.var(pso_global_best_scores) / np.mean(pso_global_best_scores)
        heuristic *= diversity_factor

        # Maintain a balance between exploration and exploitation
        inertia_weight = 0.9 + 0.1 * np.random.rand()

        # Update PSO parameters adaptively
        inertia_weight *= 0.99
        cognitive_coefficient *= 1.01
        social_coefficient *= 1.01

        # Update DRL reward function based on heuristics
        model_scores[~np.sum(weight, axis=1) <= 1] = float('-inf')
        model_scores[global_best_index] = heuristic[global_best_index]

        # Ensure model_scores are bounded to maintain numerical stability
        model_scores = np.clip(model_scores, 0, 1)

    return heuristic
```
