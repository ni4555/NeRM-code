```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate and incorporate diversity
    pso_position = np.random.rand(n)
    pso_velocity = np.random.rand(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 30)  # More nuanced threshold
    learning_rate = 0.01
    diversity_factor = np.random.rand(n)  # Incorporate diversity factor

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position with diversity factor
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  diversity_factor[i] * (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Refine the reward mechanism based on the weighted average of RL and PSO scores
        if len(model_rewards) > 2:  # Balance reward update frequency
            model_scores = np.mean(model_rewards[-3:])  # Granularity of reward update

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics with a more nuanced dynamic threshold
    dynamic_threshold = np.percentile(heuristic, 30)
    heuristic[heuristic < dynamic_threshold] = 0

    # Integrate problem-specific knowledge in the reward function
    heuristic_with_specific_knowledge = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic) + np.sum(x * (prize / np.sum(prize)))

    # Update heuristics based on the refined reward mechanism
    new_model_scores = np.exp(heuristic_with_specific_knowledge(model_scores) - np.max(heuristic_with_specific_knowledge(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined RL scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    # Refine heuristics with an adaptive learning mechanism
    adaptive_learning_rate = 0.01 * (1 / (1 + np.exp(-len(model_rewards) / 100)))
    heuristic = (heuristic * (1 - adaptive_learning_rate)) + (np.random.rand(n) * adaptive_learning_rate)

    return heuristic
```
