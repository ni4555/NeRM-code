```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning for real-time decision-making
    rl_model = np.random.rand(n)  # Simulate a pre-trained model
    for i in range(n):
        # Simulate a policy gradient update
        heuristic[i] = rl_model[i] * prize[i]

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    for i in range(n):
        total_weight = np.sum(weight[i])
        feasible = True
        for j in range(i + 1, n):
            if np.sum(weight[j]) + total_weight > 1:
                feasible = False
                break
        heuristic[i] *= feasible

    # Particle swarm optimization for evolutionary swarm intelligence
    num_particles = 20
    particles = np.random.rand(num_particles, n)
    velocities = np.random.rand(num_particles, n)
    best_fitness = heuristic.copy()
    global_best_position = particles[np.argmax(best_fitness)]

    for iteration in range(100):
        for j in range(n):
            r1, r2 = np.random.rand(num_particles), np.random.rand(num_particles)
            cognitive_component = r1 * global_best_position[:, j] - particles[:, j]
            social_component = r2 * (global_best_position[:, j] - particles[:, j])
            velocities[:, j] = 0.5 * velocities[:, j] + 0.2 * (cognitive_component + social_component)
            particles[:, j] += velocities[:, j]
            particles[:, j] = np.clip(particles[:, j], 0, 1)

        new_fitness = np.zeros(num_particles)
        for i, p in enumerate(particles):
            feasible = True
            total_weight = np.sum(weight[np.argmax(p)])
            for j in range(n):
                if weight[np.argmax(p), j] + total_weight > 1:
                    feasible = False
                    break
            if feasible:
                new_fitness[i] = np.sum(prize[np.argmax(p)])
                if new_fitness[i] > best_fitness[i]:
                    best_fitness[i] = new_fitness[i]
                    global_best_position = p

        heuristic = best_fitness
        heuristic = np.clip(heuristic, 0, 1)  # Normalize heuristics

    return heuristic
```
