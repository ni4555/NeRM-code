```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) components
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # PSO initialization
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive learning parameters
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    inertia_weight = 0.5
    cognitive_constant = 2
    social_constant = 2

    # PSO loop with mutation for diversity
    for _ in range(10):
        for i in range(n):
            if i in feasible_items:
                r1, r2 = np.random.rand(), np.random.rand()
                pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_constant * r1 * (pso_personal_best[i] - pso_position[i]) + social_constant * r2 * (pso_global_best[i] - pso_position[i])
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update DRL scores based on PSO's best score
        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Refine heuristics with adaptive mutation and DRL learning
    avg_reward = np.mean(model_rewards)
    heuristic = avg_reward * (prize / (prize[global_best_index] + 1e-6))

    # Mutation to introduce diversity in the solution space
    mutation_rate = 0.05
    mutation = np.random.rand(n) < mutation_rate
    heuristic[mutation] += np.random.uniform(-0.5, 0.5, np.sum(mutation))

    # Sparsify the heuristic
    heuristic[heuristic < sparsity_threshold] = 0

    # Final refinement with reward mechanism incorporating heuristics
    refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics with the refined DRL scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Ensure non-feasible items are not considered
    heuristic[~feasible_items] = 0

    return heuristic
```
