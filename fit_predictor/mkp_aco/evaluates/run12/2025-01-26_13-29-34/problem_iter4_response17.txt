```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    heuristic = np.zeros((prize.shape[0],))
    
    # Preprocess the weight matrix to get cumulative weights
    cumulative_weight = np.cumsum(weight, axis=1)
    
    # Deep reinforcement learning component (simplified)
    # Assuming a pre-trained model that scores items based on their potential
    # Here we simulate this with a random number generator for demonstration
    model_scores = np.random.rand(prize.shape[0])
    
    # Iterate through each item
    for i in range(prize.shape[0]):
        total_prize = 0
        total_weight = 0
        # Iterate through the remaining items
        for j in range(i, prize.shape[0]):
            total_weight += cumulative_weight[j]
            if total_weight > 1:
                break
            total_prize += prize[j]
        # Calculate heuristic using the model score, average prize value, and relative improvement
        heuristic[i] = model_scores[i] * (total_prize / (prize[i] + 1e-6)) * ((prize[i] - total_prize) / (prize[i] + 1e-6))
    
    # Sparsify the heuristics by setting unpromising elements to zero
    heuristic[heuristic < 0.5] = 0
    
    return heuristic
```
