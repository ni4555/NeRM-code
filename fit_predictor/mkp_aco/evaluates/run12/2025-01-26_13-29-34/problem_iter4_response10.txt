```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (simplified)
    # Assuming a pre-trained model that scores items based on their potential
    # Here we simulate this with a random number generator for demonstration
    model_scores = np.random.rand(prize.shape[0])

    # Adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)
    for i in range(n):
        for j in range(i + 1, n):
            if np.sum(weight[j]) > 1 - np.sum(weight[i]):
                feasible_items[j] = False
                break
        if not feasible_items[i]:
            heuristic[i] = 0
            continue

    # Particle swarm optimization for evolutionary swarm intelligence
    # Initialize particles, velocities, and best positions
    particles = np.random.rand(n, n)
    velocities = np.random.rand(n, n)
    best_position = particles
    best_fitness = np.zeros(n)

    for iteration in range(100):
        for i in range(n):
            velocities[i] = 0.5 * velocities[i] + 0.1 * (best_position[i] - particles[i])
            particles[i] += velocities[i]
            if model_scores[i] > best_fitness[i]:
                best_position[i] = particles[i]
                best_fitness[i] = model_scores[i]

    # Calculate heuristic based on model score, relative prize value, and penalty for lower prize
    for i in range(n):
        if feasible_items[i]:
            relative_value = prize[i] / np.sum(prize)
            penalty = (1 - relative_value) * 0.1
            heuristic[i] = model_scores[i] * relative_value * (1 - penalty)

    # Sparsify the heuristics by setting unpromising elements to zero
    heuristic[heuristic < 0.1] = 0

    return heuristic
```
