```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (further simplified)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Particle swarm optimization for evolutionary swarm intelligence
    global_best_index = np.argmax(model_scores)
    global_best_score = model_scores[global_best_index]

    # Sparsify heuristics based on model scores and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Balance between model score and prize value
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))
            # Adjust heuristic based on the average weight in the best feasible items
            if feasible_items[i]:
                average_weight = np.mean(weight[feasible_items])
                heuristic[i] *= (1 - weight[i, 0] / average_weight)
            # Incorporate diversity by penalizing items that are too similar to the global best
            similarity_penalty = np.linalg.norm(weight[i] - weight[global_best_index]) / np.linalg.norm(weight[global_best_index])
            heuristic[i] *= (1 - similarity_penalty)

    # Further sparsify by setting a threshold
    threshold = np.percentile(heuristic[feasible_items], 90)
    heuristic[heuristic < threshold] = 0

    return heuristic
```
