```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure initial feasibility
    feasible_items = np.sum(weight, axis=1) <= 1

    # Initialize adaptive parameters
    inertia_weight = 0.9
    cognitive_coefficient = 2
    social_coefficient = 2
    learning_rate = 0.01
    diversity_factor = 1.0
    adaptability_factor = 1.0

    for iteration in range(100):
        # Update PSO position and velocity
        r1, r2 = np.random.randn(n), np.random.randn(n)
        for i in range(n):
            if i in feasible_items:
                cognitive_component = inertia_weight * pso_velocity[i] + cognitive_coefficient * r1[i] * (pso_personal_best[i] - pso_position[i])
                social_component = social_coefficient * r2[i] * (pso_global_best[i] - pso_position[i])
                pso_velocity[i] = cognitive_component + social_component
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal and global best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores = np.exp(reward_function(model_scores) - np.max(reward_function(model_scores)))
        model_scores /= np.sum(model_scores)
        model_scores[~feasible_items] = 0

        # Update heuristics based on the weighted average of RL and PSO scores
        avg_reward = np.mean(model_rewards[-10:])  # Consider recent performance
        for i in range(n):
            if i in feasible_items:
                heuristic[i] = model_scores[i] * avg_reward * (prize[i] / (prize[0] + 1e-6))

        # Update PSO global best with RL scores and ensure feasibility
        pso_global_best_scores[~feasible_items] = float('-inf')
        pso_global_best = pso_position[feasible_items]

        # Refine the reward function based on the most promising heuristic scores
        refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
        refined_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
        refined_model_scores /= np.sum(refined_model_scores)

        # Update model scores
        model_scores = refined_model_scores * prize / (prize[0] + 1e-6)

        # Update adaptive parameters
        inertia_weight *= 0.99 + 0.01 * np.random.rand()
        cognitive_coefficient *= 0.99 + 0.01 * np.random.rand()
        social_coefficient *= 0.99 + 0.01 * np.random.rand()

        # Introduce diversity by considering the variance of the PSO scores
        diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
        heuristic *= diversity_factor

        # Introduce adaptability by reducing influence as heuristics improve
        adaptability_factor = 0.1 + (1 - 0.1) * np.exp(-np.sum(heuristic))
        heuristic *= adaptability_factor

        # Ignore non-feasible items in the final heuristic
        heuristic[~feasible_items] = 0

        # Update reward function with performance history
        model_rewards.append(reward_function(model_scores))

    return heuristic
```
