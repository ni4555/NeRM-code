```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) with adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure feasibility during PSO initialization
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive constraint-driven filtering
    constraint_violation = np.abs(np.sum(weight, axis=1) - 1)
    feasible_items = constraint_violation < 1e-6

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Small number of iterations for demonstration
        for i in range(n):
            if feasible_items[i]:
                # Update velocity and position
                pso_velocity[i] = 0.5 * (np.random.rand() - 0.5)
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update DRL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for DRL
        model_rewards.append(reward_function(model_scores))

    # Sparsify heuristics based on percentile
    heuristic = np.exp(reward_function(model_scores) - np.max(reward_function(model_scores)))
    sparsity_threshold = np.percentile(heuristic, 90)
    heuristic[heuristic < sparsity_threshold] = 0

    # Integrate PSO and DRL feedback
    heuristic *= pso_global_best_scores

    # Refine heuristics by balancing exploration and exploitation
    exploration = np.random.rand(n)
    exploitation = np.exp(heuristic / np.max(heuristic))
    heuristic = exploration * exploitation

    # Update heuristics based on refined reward mechanism
    refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
