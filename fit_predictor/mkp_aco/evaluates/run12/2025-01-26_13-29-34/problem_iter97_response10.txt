```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) for real-time decision-making
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Adaptive constraint-driven filtering for multi-dimensional feasibility
    feasible_items = np.sum(weight, axis=1) <= 1

    # Particle Swarm Optimization (PSO) for evolutionary swarm intelligence
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive learning rate and sparsity threshold
    learning_rate = 0.01
    sparsity_threshold = np.percentile(model_scores, 50)

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Sparsify heuristics by setting unpromising elements to zero
    heuristic[~feasible_items] = 0
    avg_reward = np.mean(model_rewards)
    heuristic[feasible_items] = avg_reward * (prize[feasible_items] / (prize[global_best_index] + 1e-6))

    # Integrate diversity and refine iteratively
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    heuristic *= diversity_factor

    # Incorporate the most promising heuristic scores
    refinement_factor = np.argmax(heuristic)
    heuristic *= np.exp(-np.sum((heuristic - heuristic[refinement_factor]) ** 2) / np.sum(heuristic ** 2))

    # Balance exploration and exploitation by updating the model scores
    exploration_rate = 0.1
    exploitation_rate = 0.9
    model_scores *= (1 - exploration_rate)
    model_scores[refinement_factor] += exploration_rate * heuristic[refinement_factor]

    # Update heuristics based on the refined RL scores
    heuristic = model_scores * prize / (prize[global_best_index] + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
