```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Deep reinforcement learning component (further simplified)
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Particle swarm optimization for evolutionary swarm intelligence
    # We will use a simplified version of PSO for demonstration
    # Initialize particles (items)
    particles = np.copy(model_scores)
    # Initialize velocities (randomly)
    velocities = np.random.rand(n)

    # Define PSO parameters
    w = 0.5  # Inertia weight
    c1 = 1.5  # Cognitive coefficient
    c2 = 1.5  # Social coefficient

    # Define the number of iterations
    iterations = 100

    # PSO main loop
    for _ in range(iterations):
        for i in range(n):
            # Update velocities
            velocities[i] = (w * velocities[i] +
                             c1 * np.random.rand() * (model_scores[i] - particles[i]) +
                             c2 * np.random.rand() * (global_best_index - particles[i]))
            # Update particles
            particles[i] += velocities[i]
            # Update global best
            if particles[i] > model_scores[global_best_index]:
                global_best_index = i

        # Update feasible items based on weight constraints
        for i in range(n):
            if np.sum(weight[i]) > 1:
                feasible_items[i] = False

    # Update heuristics based on model scores, feasibility, and PSO
    heuristic = np.zeros(n)
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify the heuristics by setting unpromising elements to zero
    threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < threshold] = 0

    return heuristic
```
