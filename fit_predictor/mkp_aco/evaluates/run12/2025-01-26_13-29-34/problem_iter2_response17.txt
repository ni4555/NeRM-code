```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Initialize adaptive constraint-driven filtering parameters
    alpha = 0.1  # Learning rate for adaptive filtering
    threshold = 1.0  # Threshold for feasibility

    # Deep reinforcement learning for real-time decision-making
    # Simulate a reinforcement learning model with a simple heuristic
    for i in range(n):
        # Assume a reward based on the prize and penalty based on weight sum
        reward = prize[i]
        penalty = sum(weight[i])
        heuristic[i] = reward - penalty

    # Apply adaptive constraint-driven filtering to maintain feasibility
    for i in range(n):
        feasible = True
        for j in range(n):
            total_weight = sum(weight[j])
            if total_weight > threshold:
                feasible = False
                break
        if feasible:
            heuristic[i] = max(heuristic[i], 0)

    # Use particle swarm optimization for evolutionary swarm intelligence
    # Initialize parameters for PSO
    num_particles = 30
    num_iterations = 50
    w = 0.5  # Inertia weight
    c1 = 1.5  # Cognitive coefficient
    c2 = 1.5  # Social coefficient

    # Initialize particles and their velocities
    particles = np.random.rand(num_particles, n)
    velocities = np.random.rand(num_particles, n)
    best_individual_positions = particles.copy()
    best_individual_scores = heuristic.copy()
    global_best_position = particles[np.argmax(best_individual_scores)]
    global_best_score = np.max(best_individual_scores)

    # PSO main loop
    for iteration in range(num_iterations):
        for i in range(num_particles):
            # Update velocities
            velocities[i] = (w * velocities[i] +
                             c1 * np.random.rand() * (best_individual_positions[i] - particles[i]) +
                             c2 * np.random.rand() * (global_best_position - particles[i]))

            # Update particles
            particles[i] += velocities[i]
            # Apply adaptive constraint-driven filtering
            if sum(weight[particles[i]]) > threshold:
                particles[i] = np.random.rand(n)
            # Update fitness
            fitness = -heuristic[particles[i]]  # Negative since we want to maximize the heuristic
            if fitness > best_individual_scores[i]:
                best_individual_scores[i] = fitness
                best_individual_positions[i] = particles[i]
                if fitness > global_best_score:
                    global_best_score = fitness
                    global_best_position = particles[i]

    # Set heuristic based on the global best particle
    heuristic = -global_best_score  # Negative since we used negative fitness for maximization

    return heuristic
```
