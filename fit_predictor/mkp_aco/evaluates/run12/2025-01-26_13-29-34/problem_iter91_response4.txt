```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize PSO
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive learning rate for PSO
    learning_rate = 0.01
    learning_rate_scheduler = lambda iteration: learning_rate * (0.99 ** iteration)

    # Run PSO with adaptive learning rate and schedule
    for iteration in range(50):  # Increased iterations for more refinement
        learning_rate = learning_rate_scheduler(iteration)
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update rewards for RL based on PSO performance
        model_scores = pso_global_best_scores.copy()

    # Update heuristics based on RL scores and variance to ensure diversity
    variance = np.var(model_scores[feasible_items])
    diversity_weight = 1 / (1 + variance)
    reward_weight = 1 - diversity_weight

    # Update heuristics considering the reward and diversity factors
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * reward_weight + diversity_weight

    # Update DRL reward function to incorporate heuristic scores
    def adaptive_reward_function(x, h):
        return -np.sum(x * np.log(1 + x)) - np.sum(h * np.log(1 + x))

    # Update RL scores with the new reward function
    adaptive_model_scores = np.exp(adaptive_reward_function(model_scores, heuristic) - np.max(adaptive_reward_function(model_scores, heuristic)))
    adaptive_model_scores /= np.sum(adaptive_model_scores)

    # Refine heuristics using the updated RL scores
    heuristic = adaptive_model_scores

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
