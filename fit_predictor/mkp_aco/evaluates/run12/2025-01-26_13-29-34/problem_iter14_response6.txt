```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component with improved reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(np.var(x) ** 2)
    model_rewards = [reward_function(model_scores)]

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violation

    # Particle Swarm Optimization (PSO) with adaptive learning rate and sparsity
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = model_scores
    pso_global_best_scores = model_scores

    # Initialize PSO global best with RL scores
    pso_global_best_scores[~feasible_items] = float('-inf')

    # Define adaptive learning rate
    learning_rate = 0.01
    sparsity_threshold = np.percentile(model_scores, 50)

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            # Update the velocity and position
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            
            # Update personal best and its score
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
                
            # Update global best and its score if the personal best is better
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index after PSO update
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = (avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))) + \
                           (pso_global_best[i] * (1 - avg_reward))

    # Dynamically adapt sparsity threshold based on the distribution of heuristic scores
    current_sparsity_threshold = np.percentile(heuristic, 50)
    if current_sparsity_threshold < sparsity_threshold:
        sparsity_threshold = current_sparsity_threshold

    # Sparsify heuristics by setting less promising elements to zero using the updated sparsity threshold
    heuristic[heuristic < sparsity_threshold] = 0

    # Introduce diversity by considering the variance of the PSO positions
    diversity = np.mean(np.var(pso_global_best))
    heuristic = heuristic + diversity * (1 - np.abs(heuristic))

    # Integrate constraint-awareness by balancing the heuristic values of infeasible items
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] *= 0.9  # Decrease the heuristic for infeasible items

    # Incorporate constraint violation into the reward function and adjust the model_scores
    model_scores[constraint_violation] -= 1
    model_scores[feasible_items] = np.exp(model_scores[feasible_items] - np.max(model_scores[feasible_items]))
    model_scores /= np.sum(model_scores)

    # Adjust heuristics based on the new model_scores, balancing RL and PSO
    heuristic = model_scores * prize / (prize[global_best_index] + 1e-6) + \
                 pso_global_best * (1 - model_scores * prize / (prize[global_best_index] + 1e-6))

    # Ensure the heuristics are non-negative
    heuristic = np.clip(heuristic, 0, 1)

    return heuristic
```
