```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Pre-filter infeasible items
    feasible_items = np.sum(weight, axis=1) <= 1
    infeasible_items = ~feasible_items

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_scores = reward_function(model_scores)
    model_scores[infeasible_items] = float('-inf')

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = model_scores.copy()
    pso_global_best_scores = model_scores.copy()

    # Initialize PSO global best with DRL scores and ensure feasibility
    pso_global_best_scores[infeasible_items] = float('-inf')

    # Initialize adaptive learning rate and sparsity threshold
    learning_rate = 0.01
    sparsity_threshold = np.percentile(model_scores, 90)

    # Run PSO with adaptive learning rate
    for _ in range(100):  # Using a larger number of iterations for better results
        r1, r2 = np.random.randn(n), np.random.randn(n)
        cognitive_coefficient, social_coefficient = 2, 2

        # Update velocities and positions for feasible items only
        for i in feasible_items:
            cognitive_component = cognitive_coefficient * r1[i]
            social_component = social_coefficient * r2[i] * (pso_personal_best[i] - pso_position[i])
            pso_velocity[i] = learning_rate * pso_velocity[i] + cognitive_component + social_component
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            # Update personal best
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]

            # Update global best
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index and scores based on DRL and PSO
        global_best_index = np.argmax(pso_global_best_scores)
        model_scores = np.array([reward_function(pso_global_best_scores[global_best_index])])
        model_scores[infeasible_items] = float('-inf')

    # Update heuristics based on DRL, PSO scores, and prize values
    for i in range(n):
        heuristic[i] = model_scores[i] * prize[i] / (model_scores[global_best_index] + 1e-6)

    # Sparsify heuristics using percentile threshold
    heuristic = heuristic - np.percentile(heuristic, sparsity_threshold)
    heuristic[heuristic <= 0] = 0

    # Incorporate diversity by considering the variance of the PSO scores
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    heuristic *= diversity_factor

    return heuristic
```
