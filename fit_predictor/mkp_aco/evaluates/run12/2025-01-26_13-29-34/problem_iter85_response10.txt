```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize a Deep Reinforcement Learning (DRL) model
    drl_model = np.random.rand(n)

    # Initialize Particle Swarm Optimization (PSO) with an adaptive learning rate
    pso_swarm = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_local_best = np.copy(pso_swarm)
    pso_global_best = np.copy(pso_swarm)
    pso_local_best_fitness = np.copy(drl_model)
    pso_global_best_fitness = np.copy(drl_model)

    # Initialize the PSO global best with DRL model scores and ensure feasibility
    feasible_indices = np.sum(weight, axis=1) <= 1
    pso_global_best_fitness[~feasible_indices] = float('-inf')
    pso_global_best = pso_swarm[feasible_indices]

    # Initialize adaptive learning rate for PSO
    learning_rate = 0.01
    inertia_weight = 0.7
    cognitive_rate = 1.5
    social_rate = 1.5

    # Run PSO for a small number of iterations
    for _ in range(10):
        for i in range(n):
            if i in feasible_indices:
                # Update velocity
                r1, r2 = np.random.rand(), np.random.rand()
                pso_velocity[i] = inertia_weight * pso_velocity[i] + \
                                  cognitive_rate * r1 * (pso_local_best[i] - pso_swarm[i]) + \
                                  social_rate * r2 * (pso_global_best[i] - pso_swarm[i])
                
                # Update position
                pso_swarm[i] += pso_velocity[i]
                pso_swarm[i] = np.clip(pso_swarm[i], 0, 1)

                # Update local and global best
                if drl_model[i] > pso_local_best_fitness[i]:
                    pso_local_best_fitness[i] = drl_model[i]
                    pso_local_best[i] = pso_swarm[i]
                if pso_local_best_fitness[i] > pso_global_best_fitness[i]:
                    pso_global_best_fitness[i] = pso_local_best_fitness[i]
                    pso_global_best[i] = pso_local_best[i]

        # Update the DRL model scores based on the PSO global best
        drl_model[~feasible_indices] = float('-inf')
        drl_model[pso_global_best_fitness.argmax()] = pso_global_best_fitness.max()

    # Generate heuristics by combining DRL and PSO scores
    for i in range(n):
        if i in feasible_indices:
            # Adjust heuristics based on the normalized scores
            heuristic[i] = drl_model[i] * (prize[i] / (prize[pso_global_best_fitness.argmax()] + 1e-6))
        else:
            heuristic[i] = 0

    # Sparsify the heuristics to reduce complexity
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < sparsity_threshold] = 0

    # Introduce diversity by considering the variance of the PSO scores
    diversity_factor = np.var(pso_local_best_fitness[feasible_indices]) / np.mean(pso_local_best_fitness[feasible_indices])
    heuristic *= diversity_factor

    # Adjust the heuristics to balance exploration and exploitation
    heuristic[~feasible_indices] = 0

    return heuristic
```
