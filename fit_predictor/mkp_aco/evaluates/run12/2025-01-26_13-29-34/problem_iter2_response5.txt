```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m, n = weight.shape
    heuristic = np.zeros(n)

    # Initialize deep reinforcement learning state
    state = np.random.rand(n)
    total_reward = np.sum(prize)
    
    # Define reinforcement learning policy function
    def policy(state, reward):
        return state > np.random.rand() * reward / total_reward

    # Perform a single step of reinforcement learning
    for _ in range(1):  # Repeat the decision-making process
        state = policy(state, np.sum(prize))

    # Apply adaptive constraint-driven filtering to ensure feasibility
    for i in range(n):
        total_weight = np.sum(weight[i])
        if total_weight <= 1:
            heuristic[i] = np.sum(prize[i])

    return heuristic
```
