```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component with improved reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violation

    # Initialize Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = model_scores
    pso_global_best_scores = model_scores

    # Initialize PSO global best with RL scores
    pso_global_best_scores[~feasible_items] = float('-inf')

    # Define adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    cognitive = 0.7
    social = 0.3

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if feasible_items[i]:
                # Update the velocity and position
                r1, r2 = np.random.rand(2)
                cognitive_velocity = cognitive * (pso_personal_best[i] - pso_position[i])
                social_velocity = social * (pso_global_best[i] - pso_position[i])
                pso_velocity[i] = learning_rate * (r1 * cognitive_velocity + r2 * social_velocity)
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)
                
                # Update personal best and its score
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]
                    
                # Update global best and its score if the personal best is better
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index after PSO update
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if feasible_items[i]:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = (avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))) + \
                           (pso_global_best[i] * (1 - avg_reward))

    # Sparsify heuristics by setting less promising elements to zero using a sparsity threshold
    sparsity_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < sparsity_threshold] = 0

    # Incorporate a balance between exploration and exploitation by adjusting cognitive and social parameters
    cognitive *= 1.01
    social *= 0.99

    # Further adaptation based on reflection
    # - Utilize explicit constraints early by only considering feasible items
    # - Enhance PSO by incorporating social and cognitive learning
    # - Balance exploration-exploration with dynamic parameters
    # - Adapt heuristics sparsity based on percentile and problem domain
    domain_constraints = np.sum(weight, axis=1) <= 1
    model_scores[~domain_constraints] = float('-inf')
    balanced_heuristic = 0.7 * model_scores + 0.3 * pso_global_best
    heuristic = balanced_heuristic / (np.sum(balanced_heuristic) + 1e-6)
    
    # Use sparsity more effectively by setting a stricter threshold
    heuristic[heuristic < np.percentile(heuristic, 20)] = 0

    return heuristic
```
