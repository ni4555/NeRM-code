```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) components
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))

    # Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure feasibility when initializing PSO global best
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    max_iterations = 100

    for iteration in range(max_iterations):
        # Update PSO positions
        for i in range(n):
            if i in feasible_items:
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

        # Evaluate and update PSO personal and global bests
        new_scores = np.apply_along_axis(reward_function, 1, pso_position * model_scores)
        for i in range(n):
            if i in feasible_items:
                if new_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = new_scores[i]
                    pso_personal_best[i] = pso_position[i]
                if new_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = new_scores[i]
                    pso_global_best[i] = pso_position[i]

        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update DRL model scores based on the best PSO score
        reward = reward_function(model_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] += reward

        # Update heuristics based on a weighted average of model scores and prize values
        for i in range(n):
            if i in feasible_items:
                heuristic[i] = (model_scores[i] * prize[i]) / (prize[global_best_index] + 1e-6)

        # Adjust sparsity threshold
        if iteration % 10 == 0:  # Update sparsity threshold less frequently
            sparsity_threshold = np.percentile(heuristic, 50)
            heuristic[heuristic < sparsity_threshold] = 0

        # Dynamic learning rate adjustment
        if iteration % 20 == 0:  # Adjust learning rate less frequently
            learning_rate *= 0.9

    return heuristic
```
