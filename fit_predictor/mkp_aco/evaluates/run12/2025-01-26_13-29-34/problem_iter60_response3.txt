```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Run PSO with adaptive learning rate
    for iteration in range(10):  # Using a small number of iterations for PSO
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                r1, r2 = np.random.rand(), np.random.rand()
                cognitive_velocity = 0.5 * (np.random.rand() - 0.5)
                social_velocity = 2.0 * (pso_global_best[i] - pso_position[i])
                pso_velocity[i] = learning_rate * (cognitive_velocity + social_velocity)
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Refine heuristics by combining RL and PSO scores
    combined_scores = np.exp(np.mean(model_rewards)) * prize
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = combined_scores[i] / (prize[global_best_index] + 1e-6)

    # Introduce diversity factors for exploration
    diversity_factor = np.random.rand(n)
    diversity_factor[~feasible_items] = 1 / (1 + np.exp(-heuristic[~feasible_items]))
    diversity_factor /= np.sum(diversity_factor)

    # Update heuristics based on diversity
    heuristic *= diversity_factor

    # Mutation: Introduce diversity by occasionally resetting low heuristic values
    mutation_rate = 0.1
    for i in range(n):
        if np.random.rand() < mutation_rate and heuristic[i] < np.percentile(heuristic, 25):
            heuristic[i] = np.random.rand()

    # Balance exploration and exploitation by considering both PSO and DRL
    exploration_rate = np.random.rand()
    heuristic *= exploration_rate * 0.7 + (1 - exploration_rate) * 0.3

    # Dynamically adjust learning rate for PSO and DRL
    learning_rate *= 0.99  # Decaying learning rate for PSO
    sparsity_threshold = np.percentile(model_scores, 50)
    model_scores[~feasible_items] = float('-inf')
    if np.any(model_scores >= sparsity_threshold):
        global_best_index = np.argmax(model_scores)
        model_scores[global_best_index] += 1

    # Update reward function based on the new RL scores
    reward_function = lambda x: -np.sum(x * np.log(1 + x))

    return heuristic
```
