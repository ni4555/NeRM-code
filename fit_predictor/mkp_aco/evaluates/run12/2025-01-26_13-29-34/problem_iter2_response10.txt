```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Initialize reinforcement learning model weights randomly
    rl_weights = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering parameters
    alpha = 0.1  # Learning rate for adaptive filtering
    threshold = 0.95  # Threshold for feasibility

    # Initialize particle swarm optimization parameters
    particles = np.random.rand(n, n)
    velocities = np.random.rand(n, n)
    best_position = particles
    best_fitness = heuristic

    # Deep reinforcement learning for real-time decision-making
    for episode in range(1000):
        for i in range(n):
            action = np.random.choice([0, 1], p=[1 - rl_weights[i], rl_weights[i]])
            if action == 1:
                # Constraint-driven filtering to ensure feasibility
                total_weight = np.sum(weight[i])
                if all(weight[i]) <= threshold:
                    heuristic[i] = np.sum(prize[i])
                else:
                    heuristic[i] = 0
            else:
                heuristic[i] = 0

            # Update RL weights based on heuristic
            if heuristic[i] > np.mean(heuristic):
                rl_weights[i] = np.min([1, rl_weights[i] + alpha])

    # Particle swarm optimization for evolutionary swarm intelligence
    for iteration in range(100):
        for i in range(n):
            # Update velocities and particles
            velocities[i] = 0.5 * velocities[i] + np.random.randn(n) * 0.1
            particles[i] += velocities[i]
            particles[i] = np.clip(particles[i], 0, 1)

            # Evaluate the fitness based on heuristic
            fitness = heuristic[np.argmax(heuristic) == np.argmax(particles[i])]

            # Update local and global best positions
            if fitness > best_fitness[i]:
                best_position[i] = particles[i]
                best_fitness[i] = fitness

    # Aggregate heuristic values based on RL and PSO
    for i in range(n):
        heuristic[i] = (rl_weights[i] * heuristic[i]) + (1 - rl_weights[i]) * best_fitness[i]

    return heuristic
```
