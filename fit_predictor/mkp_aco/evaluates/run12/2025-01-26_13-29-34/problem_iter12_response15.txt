```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize deep reinforcement learning scores
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initialize PSO components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best = np.copy(pso_position)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize the best position found by PSO with the best RL score
    pso_global_best_scores[~np.ones(n, dtype=bool)] = float('-inf')
    pso_global_best[~np.ones(n, dtype=bool)] = np.random.rand(n)

    # Adaptive sparsity threshold and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    inertia_weight = 0.5
    cognitive_velocity = 0.3
    social_velocity = 0.3

    # Run PSO for a number of iterations
    for _ in range(50):
        for i in range(n):
            # Update the velocity
            r1, r2 = np.random.rand(2)
            pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_velocity * r1 * (pso_personal_best[i] - pso_position[i]) + social_velocity * r2 * (pso_global_best[i] - pso_position[i])
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            
            # Update personal best
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
                
            # Update global best
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update the global best in PSO based on the best RL score
        pso_global_best_scores[~np.ones(n, dtype=bool)] = float('-inf')

        # Update rewards based on the PSO global best score
        model_scores = np.exp(reward_function(pso_global_best_scores) - np.max(reward_function(pso_global_best_scores)))
        model_scores /= np.sum(model_scores)

        # Update RL rewards
        model_rewards.append(reward_function(model_scores))

    # Update heuristics considering the feasibility and reward structure
    feasible_items = np.sum(weight, axis=1) <= 1
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = (avg_reward * (prize[i] / (prize[np.argmax(model_scores)] + 1e-6))) + \
                           (pso_global_best[i] * (1 - avg_reward))

    # Sparsify heuristics
    sparsity_threshold = np.percentile(heuristic[feasible_items], 50)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
