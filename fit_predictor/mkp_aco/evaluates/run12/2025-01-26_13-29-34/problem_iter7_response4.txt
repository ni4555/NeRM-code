```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (further simplified)
    # Here we simulate this with a random number generator for demonstration
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    # Start with all items feasible
    feasible_items = np.ones(n, dtype=bool)

    # Initialize particle swarm optimization for evolutionary swarm intelligence
    # We use a simplified version of PSO for demonstration
    # Here we assume that the global best is the item with the highest score
    global_best_index = np.argmax(model_scores)
    global_best_score = model_scores[global_best_index]

    # Apply adaptive constraint-driven filtering
    for i in range(n):
        # Check feasibility for each dimension
        if not np.all(weight[i] <= 1):
            feasible_items[i] = False

    # Update heuristics based on model scores, feasibility, and sparsity
    for i in range(n):
        # Apply sparsity to the heuristics
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Combine factors to determine the promise of the item
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))
            # Apply additional heuristic to balance between objectives
            for j in range(m):
                heuristic[i] *= (1 - weight[i, j])

    return heuristic
```
