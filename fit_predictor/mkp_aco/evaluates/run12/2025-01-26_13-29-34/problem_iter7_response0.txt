```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (using a simulated model)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    constraints_satisfied = np.all(weight <= 1, axis=1)
    feasible_items = np.where(constraints_satisfied)[0]

    # Particle swarm optimization (PSO) for evolutionary swarm intelligence
    # Here we simulate PSO by selecting items that score highest according to the RL model
    # and are feasible
    swarm_size = int(n / 2)  # Assuming we can only carry half the items for simplicity
    swarm_indices = np.random.choice(feasible_items, size=swarm_size, replace=False)
    global_best_index = np.argmax(model_scores[swarm_indices])

    # Calculate the adaptive heuristic score
    for i in feasible_items:
        if i in swarm_indices:
            adaptive_score = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))
        else:
            adaptive_score = 0
        heuristic[i] = adaptive_score

    # Sparsify heuristics by setting elements outside the swarm to zero
    heuristic[~np.isin(np.arange(n), feasible_items)] = 0

    return heuristic
```
