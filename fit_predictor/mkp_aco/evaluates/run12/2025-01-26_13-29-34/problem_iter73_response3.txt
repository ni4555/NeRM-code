```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize a population for PSO
    pso_population = np.random.rand(50, n)
    pso_velocity = np.random.rand(50, n)
    pso_personal_best = np.copy(pso_population)
    pso_global_best = np.copy(pso_population)
    pso_personal_best_scores = np.random.rand(50)
    pso_global_best_scores = np.random.rand(50)

    # Ensure the global best is feasible
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best[~feasible_items] = pso_population[feasible_items]
    pso_global_best_scores[~feasible_items] = -np.inf

    # Define an adaptive reward function that considers feasibility and prize
    reward_function = lambda x: np.sum(x[feasible_items] * prize[feasible_items]) - np.sum(x[~feasible_items] * 100)

    # Define PSO parameters
    inertia_weight = 0.7
    cognitive_constant = 2.0
    social_constant = 2.0

    # Run PSO
    for _ in range(20):
        for i in range(50):
            # Update velocity and position
            r1, r2 = np.random.rand(2)
            pso_velocity[i] = (inertia_weight * pso_velocity[i] +
                               cognitive_constant * r1 * (pso_personal_best[i] - pso_population[i]) +
                               social_constant * r2 * (pso_global_best[i] - pso_population[i]))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            # Update personal best
            if reward_function(pso_position[i]) > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = reward_function(pso_position[i])
                pso_personal_best[i] = pso_position[i]

            # Update global best
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

    # Initialize deep reinforcement learning model with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function_drl = lambda x: np.sum(x[feasible_items] * prize[feasible_items]) - np.sum(x[~feasible_items] * 100)

    # Adapt the reward function based on the best PSO score
    for i in range(n):
        if not feasible_items[i]:
            model_scores[i] = -np.inf
        else:
            model_scores[i] = pso_global_best_scores[i]

    # Refine the model scores using DRL
    for _ in range(5):
        reward = reward_function_drl(model_scores)
        gradients = -model_scores[feasible_items] + np.sum(model_scores[~feasible_items] * 100)
        model_scores += gradients * 0.1

    # Incorporate PSO global best scores into heuristic
    heuristic = np.exp(reward_function(model_scores) - np.max(reward_function(model_scores)))
    heuristic /= np.sum(heuristic)

    # Refine heuristics by incorporating diversity from PSO
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    heuristic *= diversity_factor

    return heuristic
```
