```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning for real-time decision-making
    # Assuming a pre-trained model that provides item scores
    rl_scores = np.random.rand(n)  # Simulating pre-trained scores

    # Adaptive constraint-driven filtering
    feasible_indices = []
    total_weight = 0
    for i in range(n):
        if np.sum(weight[i]) <= 1 - total_weight:
            feasible_indices.append(i)
            total_weight += np.sum(weight[i])
        else:
            break

    # Initialize particle swarm optimization
    local_best = np.max(prize[feasible_indices])
    global_best = np.max(prize)
    particles = np.random.rand(n, len(feasible_indices))
    velocities = np.random.rand(n, len(feasible_indices))
    best_fitness = np.zeros(n)

    # Perform particle swarm optimization for evolutionary swarm intelligence
    for _ in range(100):
        for i in range(n):
            for j, feasible_index in enumerate(feasible_indices):
                velocities[i][j] = 0.5 * velocities[i][j] + 0.1 * (best_fitness[i] - particles[i][j])
                particles[i][j] += velocities[i][j]
                particles[i][j] = np.clip(particles[i][j], 0, 1)  # Keep the particle within feasible space
                heuristic[i] = rl_scores[feasible_index] * prize[feasible_index] * (1 - particles[i][j])

        # Update best fitness
        best_fitness = np.max(heuristic)
        for i in range(n):
            best_fitness[i] = np.max([best_fitness[i], heuristic[i]])

    # Apply adaptive constraint-driven filtering to maintain feasibility
    heuristic[~np.isin(range(n), feasible_indices)] = 0

    return heuristic
```
