```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (simplified)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violation

    # Particle swarm optimization for evolutionary swarm intelligence
    pso_position = np.copy(model_scores)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(model_scores)
    pso_global_best = np.copy(model_scores)
    pso_global_best_score = np.max(model_scores)

    # Initialize PSO positions randomly within the range [0, 1]
    pso_position = np.random.rand(n)

    # PSO parameters
    w = 0.5  # Inertia weight
    c1 = 1   # Cognitive coefficient
    c2 = 1   # Social coefficient

    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            # Update the velocity
            r1, r2 = np.random.rand(2)
            pso_velocity[i] = w * pso_velocity[i] + c1 * r1 * (pso_personal_best[i] - pso_position[i]) + c2 * r2 * (pso_global_best[i] - pso_position[i])
            # Update the position based on the velocity
            pso_position[i] += pso_velocity[i]
            # Ensure the position does not exceed 1
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            # Update the personal best if the current position is better
            if pso_position[i] > pso_personal_best[i]:
                pso_personal_best[i] = pso_position[i]
                # Update the personal best score
                personal_best_score = model_scores[i] * (prize[i] / (prize[np.argmax(pso_personal_best)] + 1e-6))
                if personal_best_score > pso_global_best_score:
                    pso_global_best[i] = pso_position[i]
                    pso_global_best_score = personal_best_score

    # Update heuristics based on model scores, PSO scores, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = (model_scores[i] * (prize[i] / (prize[np.argmax(pso_global_best)] + 1e-6))) + \
                           (pso_global_best[i] * (1 - model_scores[i]))

    # Sparsify heuristics by setting less promising elements to zero using a sparsity threshold
    sparsity_threshold = np.percentile(heuristic[feasible_items], 50)  # Set a threshold for sparsity
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
