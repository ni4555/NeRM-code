```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Multi-objective Deep Reinforcement Learning (DRL) with adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x)) - np.sum((1 - x) * np.log(1 - x))
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    inertia_weight = 0.9

    # Run PSO with adaptive learning rate and inertia weight
    for _ in range(50):  # Increased iterations for better convergence
        for i in range(n):
            if i in feasible_items:
                # Update velocity
                r1, r2 = np.random.rand(), np.random.rand()
                pso_velocity[i] = (inertia_weight * pso_velocity[i] +
                                   r1 * (pso_personal_best[i] - pso_position[i]) +
                                   r2 * (pso_global_best[i] - pso_position[i]))

                # Update position
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = np.copy(pso_position[i])

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = np.copy(pso_position[i])

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics with dynamic thresholds
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined RL scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Balance exploitation and exploration by using a simple epsilon-greedy approach
    epsilon = 0.1
    exploration_rate = np.random.rand(n)
    exploitation_rate = heuristic / np.sum(heuristic)
    selected_items = exploration_rate > epsilon

    # Update heuristic based on the selection pressure
    heuristic[selected_items] /= np.sum(heuristic[selected_items])

    # Maintain diversity by allowing a small number of items to be selected with higher probability
    diversity_factor = np.random.rand(n)
    diversity_factor[~selected_items] = 1 / (1 + np.exp(-heuristic[~selected_items]))
    diversity_factor /= np.sum(diversity_factor)

    # Adjust the heuristic scores based on diversity
    heuristic *= diversity_factor

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
