```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) model
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items

    # Particle Swarm Optimization (PSO) parameters
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores = np.copy(model_scores)
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive parameters for DRL and PSO
    learning_rate = 0.01
    sparsity_threshold = np.percentile(model_scores, 50)
    inertia_weight = 0.5
    cognitive_weight = 0.5
    social_weight = 0.5

    # Run PSO for a few iterations to guide the DRL
    for _ in range(10):
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position using PSO
                r1, r2 = np.random.rand(), np.random.rand()
                cognitive_component = cognitive_weight * (pso_personal_best[i] - pso_position[i])
                social_component = social_weight * (pso_global_best[i] - pso_position[i])
                pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_component + social_component
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[np.argmax(pso_global_best_scores)] = pso_global_best_scores[np.argmax(pso_global_best_scores)]

    # Update heuristics based on DRL and PSO
    for i in range(n):
        if i in feasible_items:  # Only consider feasible items
            heuristic[i] = prize[i] / (1 + np.exp(-model_scores[i])) * (1 - pso_position[i])

    # Sparsify heuristics with dynamic thresholds
    heuristic[heuristic < sparsity_threshold] = 0

    # Refine rewards based on heuristic values and reinitialize DRL model
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    model_scores[~feasible_items] = float('-inf')

    return heuristic
```
