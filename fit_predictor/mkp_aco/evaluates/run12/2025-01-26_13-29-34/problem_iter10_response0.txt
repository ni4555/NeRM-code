```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component with improved reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violation

    # Initialize Particle Swarm Optimization (PSO) variables
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)

    # PSO algorithm with adaptive parameters
    for _ in range(50):  # Increased number of iterations for better performance
        for i in range(n):
            # Adaptive velocity calculation
            r1, r2 = np.random.rand(2)
            cognitive_component = r1 * (pso_personal_best[i] - pso_position[i])
            social_component = r2 * (pso_global_best[i] - pso_position[i])
            pso_velocity[i] = 0.5 * pso_velocity[i] + 0.5 * (cognitive_component + social_component)
            
            # Update position based on velocity
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            
            # Update personal best
            if reward_function(pso_position[i]) > reward_function(pso_personal_best[i]):
                pso_personal_best[i] = np.copy(pso_position[i])
        
        # Update global best
        pso_global_best = pso_personal_best[np.argmax([reward_function(pso_position[i]) for i in range(n)])]

    # Integrate rewards from both RL and PSO into the heuristic
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = (avg_reward * (prize[i] / (prize[np.argmax(model_scores)] + 1e-6))) + \
                           (pso_global_best[i] * (1 - avg_reward))

    # Sparsify heuristics using sparsity threshold
    sparsity_threshold = np.percentile(heuristic[feasible_items], 50)
    heuristic[heuristic < sparsity_threshold] = 0

    # Apply adaptive constraint-driven filtering for dynamic environments
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0

    # Incorporate domain knowledge and confidence in heuristics
    model_confidence = np.abs(model_scores - np.percentile(model_scores, 25))
    heuristic *= model_confidence

    return heuristic
```
