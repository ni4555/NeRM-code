```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    import numpy as np

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive parameters
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize feasible items based on constraints
    feasible_items = np.sum(weight, axis=1) <= 1
    infeasible_items = ~feasible_items

    # Update global best for PSO considering only feasible items
    pso_global_best_scores[infeasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive learning rates and inertia weights for PSO
    inertia_weight_schedule = np.linspace(0.9, 0.4, 10)
    learning_rate_schedule = np.linspace(0.1, 0.02, 10)
    cognitive_coefficient = 2.5
    social_coefficient = 2.5

    # Initialize history of best rewards for model update
    recent_performance = np.zeros(10)

    for iteration in range(10):  # Using a small number of iterations for demonstration
        inertia_weight = inertia_weight_schedule[iteration]
        learning_rate = learning_rate_schedule[iteration]

        r1, r2 = np.random.randn(n), np.random.randn(n)
        for i in range(n):
            if feasible_items[i]:
                cognitive_component = cognitive_coefficient * r1[i]
                social_component = social_coefficient * r2[i] * (pso_personal_best[i] - pso_position[i])
                pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_component + social_component
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)
        recent_performance[iteration] = pso_global_best_scores[global_best_index]

        # Update DRL model scores based on the best PSO score
        model_scores[infeasible_items] = float('-inf')
        model_scores[global_best_index] = recent_performance[iteration]

        # Update rewards for DRL
        model_rewards.append(reward_function(model_scores))

    # Calculate heuristics based on weighted average of model scores and prizes
    heuristic = model_rewards[-1] * prize / (model_rewards[-1] * prize.sum() + 1e-6)

    # Sparsify heuristics by setting unpromising elements to zero
    heuristic[heuristic < np.percentile(heuristic, 95)] = 0

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
