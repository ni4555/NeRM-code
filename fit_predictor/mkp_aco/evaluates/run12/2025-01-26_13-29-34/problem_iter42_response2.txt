```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure initial global best is feasible
    feasible_items = np.sum(weight, axis=1) <= 1
    infeasible_items = ~feasible_items
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive parameters
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    exploration_rate = 0.1
    evolution_insights = []

    # Main loop for feedback loop and evolutionary adaptation
    while len(evolution_insights) < 100:  # Define a stopping criterion for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Gather evolutionary insights for refinement
        evolution_insights.append(model_scores.copy())

        # Refine the reward mechanism with evolutionary insights
        if len(evolution_insights) > 1:
            mean_insights = np.mean(evolution_insights, axis=0)
            new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum((x - mean_insights) ** 2)
            new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
            new_model_scores /= np.sum(new_model_scores)
            model_scores = new_model_scores

        # Update heuristics based on the refined RL scores
        heuristic = model_scores * prize / (prize[global_best_index] + 1e-6)

        # Sparsify heuristics with dynamic thresholds
        dynamic_threshold = np.percentile(model_scores, 50)
        heuristic[heuristic < dynamic_threshold] = 0

        # Balance exploration and exploitation in heuristic updates
        heuristic = (1 - exploration_rate) * heuristic + exploration_rate * np.random.rand(n)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
