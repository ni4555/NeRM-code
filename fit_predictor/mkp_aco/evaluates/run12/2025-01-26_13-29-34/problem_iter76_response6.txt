```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure feasibility in PSO
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive learning rate, diversity factor, and exploration-exploitation factor
    learning_rate = 0.01
    diversity_factor = 0.1  # Initial diversity factor
    exploration_exploitation_factor = 0.5  # Initial exploration-exploitation factor
    learning_rate_decay = 0.99  # Learning rate decay
    parameter_update_rate = 0.01  # Rate at which parameters are updated

    # Run PSO with adaptive learning rate
    for iteration in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Update learning rate, diversity factor, and exploration-exploitation factor
        learning_rate *= learning_rate_decay
        diversity_factor *= 1.02  # Increase diversity over time
        exploration_exploitation_factor *= 1.01  # Increase exploration over time

        # Adaptively refine reward functions
        new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * model_scores)
        model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
        model_scores /= np.sum(model_scores)

        # Incorporate diversity by considering the variance of the PSO scores
        diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
        model_scores *= diversity_factor

        # Refined reward mechanism that balances exploration and exploitation
        exploration_component = (1 - exploration_exploitation_factor) * model_scores
        exploitation_component = exploration_exploitation_factor * np.exp(model_scores / (np.sum(model_scores) + 1e-6))
        model_scores = exploration_component + exploitation_component

        # Update heuristics based on the refined RL scores
        heuristic = model_scores * prize / (prize[global_best_index] + 1e-6)

        # Refine the reward mechanism to ensure feasibility
        refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
        model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
        model_scores /= np.sum(model_scores)

        # Update the model_scores with the refined scores
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
