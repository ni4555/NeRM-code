```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (further simplified)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violation

    # Particle swarm optimization for evolutionary swarm intelligence
    global_best_index = np.argmax(model_scores)
    pso_position = np.copy(model_scores)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(model_scores)
    pso_global_best = np.copy(model_scores)

    # Simulate PSO for more iterations to enhance global search
    for _ in range(50):  # Increasing iterations for better search
        for i in range(n):
            pso_velocity[i] = 0.5 * pso_velocity[i] + 0.5 * (np.random.rand() - 0.5)
            pso_position[i] += pso_velocity[i]
            if not feasible_items[i]:
                pso_position[i] = pso_personal_best[i]  # penalize infeasible solutions
        pso_personal_best = np.maximum(pso_position, pso_personal_best)
        pso_global_best = np.maximum(pso_personal_best, pso_global_best)
        global_best_index = np.argmax(pso_global_best)

    # Update heuristics based on model scores, PSO scores, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = (model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))) + \
                           (pso_global_best[i] * (1 - model_scores[i]))

    # Incorporate feasibility checks by ensuring the total weight does not exceed the knapsack capacity
    cumulative_weight = np.cumsum(np.maximum(0, heuristic) * np.sum(weight, axis=1))
    if cumulative_weight[-1] > 1:
        for i in range(n - 1, -1, -1):
            if cumulative_weight[i] > 1 and heuristic[i] > 0:
                heuristic[i] = 0
                cumulative_weight[i:] = cumulative_weight[i - 1]

    # Sparsify heuristics by setting less promising elements to zero
    sparsity_threshold = np.percentile(heuristic[feasible_items], 50)  # Set a threshold for sparsity
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
