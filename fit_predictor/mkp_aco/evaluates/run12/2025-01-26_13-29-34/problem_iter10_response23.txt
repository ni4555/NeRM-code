```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (refined)
    # Here we simulate this with a more sophisticated random number generator
    # which adjusts the model scores based on some learned heuristic
    model_scores = np.random.rand(n)
    for i in range(n):
        # Simulate a learned heuristic that adjusts scores based on item value
        model_scores[i] *= (prize[i] / np.sum(prize))

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Check for feasibility based on weight constraints
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items[constraint_violation] = False

    # Particle swarm optimization for evolutionary swarm intelligence
    # Here we use a PSO approach with better convergence criteria
    global_best_index = np.argmax(model_scores)
    pso_position = np.copy(model_scores)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(model_scores)
    pso_global_best = np.copy(model_scores)

    # Initialize personal best with the current model scores
    for i in range(n):
        pso_personal_best[i] = model_scores[i]

    # Initialize global best with the current model scores
    pso_global_best = np.copy(pso_personal_best)

    # PSO parameters
    w = 0.5  # Inertia weight
    c1 = 1   # Cognitive coefficient
    c2 = 2   # Social coefficient
    convergence_threshold = 1e-4  # Convergence threshold for PSO
    iteration_limit = 100  # Limit the number of iterations to prevent infinite loops

    # PSO iterations
    for iteration in range(iteration_limit):
        for i in range(n):
            # Update the velocity
            r1, r2 = np.random.rand(2)
            pso_velocity[i] = w * pso_velocity[i] + c1 * r1 * (pso_personal_best[i] - pso_position[i]) + c2 * r2 * (pso_global_best[i] - pso_position[i])
            # Update the position
            pso_position[i] += pso_velocity[i]
            # Ensure the position is within the feasible range
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            # Update personal best
            pso_personal_best[i] = np.maximum(pso_position[i], pso_personal_best[i])
            # Update global best
            pso_global_best[i] = np.maximum(pso_personal_best[i], pso_global_best[i])

        # Check for convergence
        if np.linalg.norm(pso_global_best - pso_personal_best) < convergence_threshold:
            break

        # Update global best index based on PSO
        global_best_index = np.argmax(pso_global_best)

    # Update heuristics based on model scores, PSO scores, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = (model_scores[i] * prize[i]) / (prize[global_best_index] + 1e-6) + \
                           (pso_global_best[i] * (1 - model_scores[i]))

    # Sparsify heuristics by setting less promising elements to zero using a sparsity threshold
    sparsity_threshold = np.percentile(heuristic[feasible_items], 50)  # Set a threshold for sparsity
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
