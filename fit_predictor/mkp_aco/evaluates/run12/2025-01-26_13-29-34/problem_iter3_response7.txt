```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    heuristic = np.zeros((prize.shape[0],))
    
    # Initialize reinforcement learning model
    rl_model = RLModel()
    
    # Initialize particle swarm optimization
    pso = PSO(weight.shape[0], prize.shape[0], m)
    
    # Initialize adaptive constraint-driven filtering
    constraint_filter = ConstraintFilter(m)
    
    for i in range(prize.shape[0]):
        # RL decision-making for the item
        is_promising, reward = rl_model.decide(weight[i], prize[i])
        
        # PSO contribution to the heuristic
        pso_contribution = pso.evaluate(i, weight[i], prize[i])
        
        # Constraint-driven filtering to maintain feasibility
        is_feasible = constraint_filter.filter(i, weight[i])
        
        # Combine factors to determine the heuristic value
        heuristic[i] = reward + pso_contribution * is_feasible
    
    # Sparsify the heuristics by setting unpromising elements to zero
    heuristic[heuristic < THRESHOLD] = 0
    
    return heuristic
```
