```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) component with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Maintain multi-dimensional feasibility
    feasible_items = np.ones(n, dtype=bool)
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items[constraint_violation] = False

    # Initialize Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Run PSO with adaptive learning rate and constraint checking
    for _ in range(10):  # Using a small number of iterations for demonstration
        inertia_weight = 0.7 + 0.3 * np.random.rand()
        cognitive_coefficient = 1.5 + 0.5 * np.random.rand()
        social_coefficient = 1.5 + 0.5 * np.random.rand()

        for i in range(n):
            r1, r2 = np.random.rand(2)
            cognitive_velocity = cognitive_coefficient * (pso_personal_best[i] - pso_position[i])
            social_velocity = social_coefficient * (pso_global_best[i] - pso_position[i])
            pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_velocity + social_velocity

            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            # Update personal best if current fitness is better
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]

            # Update global best if the personal best is better
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update DRL scores based on the best PSO score and feasibility
        feasible_indices = feasible_items & (pso_global_best_scores > 0)
        model_scores[~feasible_indices] = float('-inf')
        model_scores[feasible_indices] = pso_global_best_scores[feasible_indices]
        model_rewards.append(reward_function(model_scores))

    # Integrate DRL and PSO scores
    integrated_scores = np.zeros(n)
    for i in range(n):
        if feasible_items[i]:
            integrated_scores[i] = (model_scores[i] + pso_global_best_scores[i]) / 2

    # Update DRL reward function adaptively based on PSO scores
    adaptive_reward = lambda x: reward_function(x) + np.sum(x * integrated_scores)
    new_model_scores = np.exp(adaptive_reward(model_scores) - np.max(adaptive_reward(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the new RL scores
    heuristic = new_model_scores * prize / (prize[np.argmax(new_model_scores)] + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
