```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) initialization
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) initialization
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # PSO global best with RL scores and feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive sparsity and learning rate initialization
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Run PSO with adaptive learning rate
    for _ in range(10):
        for i in range(n):
            if i in feasible_items:
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics
    sparsity_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < sparsity_threshold] = 0

    # Incorporate diversity and balance exploration-exploitation
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    exploration_exploitation_factor = np.random.rand(n)

    # Update heuristics
    heuristic = exploration_exploitation_factor * heuristic + (1 - exploration_exploitation_factor) * (prize / (prize[global_best_index] + 1e-6))

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
