```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure feasibility when initializing PSO global best
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive sparsity threshold and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    iteration = 0
    max_iterations = 100

    while iteration < max_iterations:
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Adaptive learning rate adjustment based on model rewards
        learning_rate *= (1 / (1 + np.exp(-np.mean(model_rewards))))

        # Refine the reward function by incorporating the most promising heuristic scores
        refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
        new_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
        new_model_scores /= np.sum(new_model_scores)

        # Update heuristics based on the refined RL scores
        heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

        # Dynamically adjust the sparsity threshold based on the model scores
        sparsity_threshold = np.percentile(heuristic, 50)
        heuristic[heuristic < sparsity_threshold] = 0

        iteration += 1

    # Final feasibility check for the heuristic
    feasible_heuristic = np.sum(weight * heuristic, axis=1) <= 1
    heuristic[~feasible_heuristic] = 0

    # Balance exploration and exploitation
    exploration_rate = 0.1
    exploitation_rate = 0.9
    heuristic = (exploration_rate * np.random.rand(n) + exploitation_rate * heuristic) * (1 / (1 + np.exp(-heuristic)))

    return heuristic
```
