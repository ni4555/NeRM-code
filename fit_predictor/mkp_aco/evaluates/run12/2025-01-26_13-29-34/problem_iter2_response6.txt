```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning model
    def reinforcement_learning(prize, weight, threshold):
        # Simulate a reinforcement learning model that adjusts weights based on feasibility
        rl_weights = np.random.rand(n)
        for episode in range(1000):
            for i in range(n):
                total_weight = np.sum(weight[i])
                if total_weight <= 1:
                    reward = prize[i]
                    if np.random.rand() < reward / np.sum(prize[prize > 0]):
                        rl_weights[i] *= (1 + 0.001 * reward)
                    else:
                        rl_weights[i] *= (1 - 0.001)
                else:
                    rl_weights[i] *= 0.5
        return rl_weights

    # Adaptive constraint-driven filtering
    def constraint_filtering(weight, threshold=1.0):
        # Filter items that violate the total weight constraint
        filtered_indices = []
        for i in range(n):
            if np.sum(weight[i]) <= threshold:
                filtered_indices.append(i)
        return np.array(filtered_indices)

    # Particle swarm optimization
    def particle_swarm_optimization(prize, weight, iterations=100):
        swarm_size = 10
        particles = np.random.rand(n, swarm_size, m)
        velocities = np.random.rand(n, swarm_size, m)
        best_positions = np.copy(particles)
        best_fitness = np.zeros(swarm_size)
        
        for iteration in range(iterations):
            for i in range(swarm_size):
                for j in range(n):
                    velocities[j][i] = 0.5 * velocities[j][i] + 0.1 * (best_positions[j] - particles[j][i])
                    particles[j][i] += velocities[j][i]
                    particles[j][i] = np.clip(particles[j][i], 0, 1)
                fitness = np.sum(prize[particles[:, i].astype(int)])
                if fitness > best_fitness[i]:
                    best_fitness[i] = fitness
                    best_positions[i] = particles[:, i].astype(int)
        
        return best_positions[:, np.argmax(best_fitness)]

    # Main heuristic computation
    rl_weights = reinforcement_learning(prize, weight, threshold=0.95)
    feasible_indices = constraint_filtering(weight)
    if feasible_indices.size > 0:
        feasible_prize = prize[feasible_indices]
        feasible_weight = weight[feasible_indices]
        selected_items = particle_swarm_optimization(feasible_prize, feasible_weight)
        heuristic[feasible_indices] = selected_items

    return heuristic
```
