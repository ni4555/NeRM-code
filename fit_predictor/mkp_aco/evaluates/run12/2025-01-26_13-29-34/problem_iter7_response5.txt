```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component
    # Assuming a pre-trained model is available and returns a score for each item
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Initialize particle swarm optimization
    swarm = {
        'positions': np.array([np.random.rand(m) for _ in range(n)]),
        'velocities': np.zeros((n, m)),
        'best_personal_positions': np.copy(swarm['positions']),
        'best_personal_scores': np.copy(model_scores),
        'global_best_position': None,
        'global_best_score': -np.inf
    }

    # Update PSO
    for iteration in range(100):  # Assume 100 iterations
        for i in range(n):
            # Update velocity
            swarm['velocities'][i] = 0.5 * swarm['velocities'][i] + 0.2 * (np.random.rand(m) - 0.5)
            # Update position
            swarm['positions'][i] += swarm['velocities'][i]
            # Update personal best
            if model_scores[i] > swarm['best_personal_scores'][i]:
                swarm['best_personal_positions'][i] = swarm['positions'][i]
                swarm['best_personal_scores'][i] = model_scores[i]
            # Update global best
            if model_scores[i] > swarm['global_best_score']:
                swarm['global_best_position'] = swarm['positions'][i]
                swarm['global_best_score'] = model_scores[i]

    # Calculate heuristic based on RL and PSO
    for i in range(n):
        # Check feasibility
        if not np.allclose(weight[i], 1):
            heuristic[i] = 0
        else:
            # Calculate the adaptive score
            adaptive_score = model_scores[i] * (prize[i] / (swarm['global_best_score'] + 1e-6))
            # Apply sparsity by setting low scores to zero
            heuristic[i] = adaptive_score if adaptive_score > 0.1 else 0

    return heuristic
```
