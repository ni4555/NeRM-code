```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (assuming a trained model)
    model_scores = np.random.rand(n)  # Pre-trained model scores

    # Adaptive constraint-driven filtering (with sparsity)
    feasible_items = np.ones(n, dtype=bool)
    for i in range(n):
        if np.any(weight[i, :] > 1):
            feasible_items[i] = False
            break

    # Particle swarm optimization (enhanced version)
    global_best_index = np.argmax(model_scores)
    global_best_score = model_scores[global_best_index]

    # Initialize PSO
    pso_position = np.copy(model_scores)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(model_scores)
    pso_global_best = np.copy(model_scores)

    # Simulate PSO for a few iterations
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            pso_velocity[i] = 0.5 * pso_velocity[i] + 0.5 * (np.random.rand() - 0.5)
            pso_position[i] += pso_velocity[i]
            if not feasible_items[i]:
                pso_position[i] = pso_personal_best[i]  # Punish infeasible solutions
        pso_personal_best = np.maximum(pso_position, pso_personal_best)
        pso_global_best = np.maximum(pso_personal_best, pso_global_best)
        global_best_index = np.argmax(pso_global_best)

    # Update heuristics based on model scores, PSO scores, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Incorporate the deep reinforcement learning model score
            heuristic[i] += model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))
            # Incorporate the PSO score to balance exploration vs. exploitation
            heuristic[i] += pso_global_best[i] * (1 - model_scores[i])

    # Refine heuristics by considering the overall balance between objectives
    total_score = np.sum(heuristic[feasible_items])
    heuristic[feasible_items] = heuristic[feasible_items] / total_score

    # Incorporate domain-specific constraints early
    cumulative_weight = np.zeros(n)
    for i in range(n):
        cumulative_weight[i] = np.sum(weight[:i+1], axis=1)
        if np.any(cumulative_weight[i] > 1):
            heuristic[i] = 0

    # Apply sparsity to encourage selection of a few high-value items
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
