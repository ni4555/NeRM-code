```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize reinforcement learning model weights randomly
    rl_weights = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering parameters
    alpha = 0.01  # Learning rate for adaptive filtering
    threshold = 1 - np.e ** (-np.arange(n))  # Threshold for feasibility

    # Initialize particle swarm optimization parameters
    particles = np.random.rand(n, n)
    velocities = np.random.rand(n, n)
    best_position = particles
    best_fitness = heuristic

    # Deep reinforcement learning for real-time decision-making
    rl_model = np.zeros((n, n))
    for episode in range(1000):
        for i in range(n):
            action = np.random.choice([0, 1], p=[1 - rl_weights[i], rl_weights[i]])
            if action == 1:
                rl_model[i] = np.copy(prize[i])
            else:
                rl_model[i] = np.zeros_like(prize[i])
        rl_weights = rl_weights * np.exp(alpha * (rl_model / np.sum(rl_model, axis=1)))

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    feasibility_mask = np.ones(n)
    for i in range(n):
        total_weight = np.sum(weight[i])
        for j in range(i + 1, n):
            if np.sum(weight[j]) > 1 - total_weight:
                feasibility_mask[j] = 0
                break
        heuristic[i] = np.exp(-np.sum(weight[i] - threshold[i]) * alpha)

    # Particle swarm optimization for evolutionary swarm intelligence
    for iteration in range(100):
        for i in range(n):
            velocities[i] = 0.5 * velocities[i] + 0.1 * (best_position[i] - particles[i])
            particles[i] += velocities[i]
            heuristic[i] = 1 / (1 + np.linalg.norm(particles[i] - best_position[i]))

    # Integrate RL with PSO, refine heuristics based on historical performance
    heuristic = heuristic * rl_weights + (1 - rl_weights) * best_fitness

    return heuristic
```
