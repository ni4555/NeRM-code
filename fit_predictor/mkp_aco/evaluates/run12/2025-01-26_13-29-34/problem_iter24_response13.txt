```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) component with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Maintain multi-dimensional feasibility
    feasible_items = np.ones(n, dtype=bool)
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items[constraint_violation] = False

    # Define adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Define adaptive inertia weight, cognitive, and social coefficients for PSO
    inertia_weight = 0.9
    cognitive_coefficient = 1.5
    social_coefficient = 1.5

    # Run PSO with adaptive learning rate and inertia weight
    for _ in range(10):  # Using a small number of iterations for demonstration
        # Update inertia weight adaptively
        inertia_weight *= (1 - (0.01 * np.random.rand()))
        inertia_weight = max(inertia_weight, 0.5)

        # Update PSO positions and velocities
        for i in range(n):
            r1, r2 = np.random.rand(2)
            cognitive_velocity = cognitive_coefficient * (pso_personal_best[i] - pso_position[i])
            social_velocity = social_coefficient * (pso_global_best[i] - pso_position[i])
            pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_velocity + social_velocity

            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            
            # Update personal best and its score
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
                
            # Update global best and its score if the personal best is better
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index after PSO update
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score and maintain feasibility
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Calculate the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics using a dynamic threshold based on model scores
    dynamic_threshold = np.percentile(model_scores, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Adapt the reward function based on heuristic scores and feasibility
    new_reward_function = lambda x: reward_function(x) + np.sum((x * heuristic) * (x < 1))
    model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    model_scores /= np.sum(model_scores)

    # Update heuristics based on the new RL scores and feasibility
    heuristic = model_scores * prize / (prize[global_best_index] + 1e-6)
    feasible_items = np.sum(weight, axis=1) <= 1
    heuristic[~feasible_items] = 0

    return heuristic
```
