```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (streamlined)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    total_weight = np.sum(weight, axis=1)
    constraint_violation = total_weight > 1
    feasible_items = ~constraint_violation

    # Particle swarm optimization for evolutionary swarm intelligence
    # Initialize global and personal bests
    global_best = np.max(model_scores)
    personal_best = np.copy(model_scores)
    personal_position = np.copy(model_scores)
    
    # Simulate PSO for a few iterations
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            r1, r2 = np.random.rand(2)
            c1, c2 = 2 * r1, 2 * r2
            personal_position[i] += c1 * (personal_best[i] - personal_position[i]) + c2 * (global_best - personal_position[i])
            personal_position[i] = np.clip(personal_position[i], 0, 1)  # Keep position within bounds
            
            if total_weight[i] <= 1 and personal_position[i] > model_scores[i]:
                personal_best[i] = personal_position[i]
                
        global_best = np.max(personal_best)
        
    # Update heuristics based on model scores, PSO scores, and feasibility
    for i in range(n):
        if constraint_violation[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6)) + \
                           personal_best[i] * (1 - model_scores[i])

    # Balance heuristics using a sparsity factor to maintain diversity
    sparsity_factor = np.percentile(heuristic[feasible_items], 90)
    heuristic[heuristic < sparsity_factor] = 0
    
    return heuristic
```
