```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) component with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    feasible_items = np.ones(n, dtype=bool)
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items[constraint_violation] = False

    # Initialize Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores
    pso_global_best_scores[~feasible_items] = float('-inf')

    # Define initial learning rate
    learning_rate = 0.01

    # Exploration-exploitation parameters
    exploration_rate = 0.1
    exploitation_rate = 0.9

    # Dynamic sparsity and complexity sensitivity parameters
    sparsity_threshold = np.percentile(model_scores, 50)
    complexity = np.sum(weight ** 2)
    complexity_factor = complexity / (np.max(prize) + 1)

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            # Update the velocity and position with adaptive exploration and exploitation
            r = np.random.rand()
            if r < exploration_rate:
                pso_velocity[i] = learning_rate * np.random.rand()
            else:
                pso_velocity[i] = learning_rate * (pso_position[i] - pso_personal_best[i])
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            
            # Update personal best and its score
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
                
            # Update global best and its score if the personal best is better
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index after PSO update
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = (exploitation_rate * (avg_reward * (prize[i] / (prize[global_best_index] + 1e-6)))) + \
                           ((1 - exploitation_rate) * pso_global_best[i])

    # Dynamically adjust the learning rate based on complexity
    learning_rate *= (1 - 0.01 * complexity_factor)

    # Dynamically sparsify heuristics based on the current model scores and complexity
    sparsity_threshold = np.percentile(model_scores, 50)
    sparsity_factor = np.percentile(model_scores, 25)
    heuristic[heuristic < (sparsity_threshold + (sparsity_threshold - sparsity_factor) * complexity_factor)] = 0

    # Incorporate domain constraints into the reward function and adjust the learning rate accordingly
    model_scores[~feasible_items] = float('-inf')
    model_rewards.append(reward_function(model_scores))

    # Adapt the heuristic using a more dynamic combination of DRL and PSO scores
    for i in range(n):
        heuristic[i] = model_scores[i] * prize[i] + pso_global_best_scores[i] * (1 - prize[i])

    # Ensure the heuristics are non-negative
    heuristic = np.clip(heuristic, 0, 1)

    return heuristic
```
