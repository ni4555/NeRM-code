```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Adaptive constraint-driven filtering for feasibility check
    def is_feasible(item_index, current_items):
        total_weight = current_items.sum(axis=1).reshape(-1, 1)
        total_weight = np.sum(np.add(weight[current_items], total_weight), axis=1)
        return total_weight <= 1

    # Initialize items selected in the knapsack
    selected_items = []

    # Deep reinforcement learning for real-time decision-making (simulated here by selection heuristic)
    # Assume that items with higher prize to weight ratio are more promising
    for i in range(n):
        heuristic[i] = prize[i] / np.sum(weight[i])
    
    # Filter non-feasible items based on the initial heuristic
    for i in range(n):
        if is_feasible(i, selected_items):
            selected_items.append(i)

    # Particle swarm optimization for evolutionary swarm intelligence (simulated by sorting based on heuristic)
    # Here, we are assuming that the heuristic already contains the relative quality of items
    heuristic.sort(reverse=True)

    return heuristic
```
