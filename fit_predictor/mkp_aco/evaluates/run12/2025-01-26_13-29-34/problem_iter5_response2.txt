```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (simplified)
    # Assume pre-trained model returns a normalized score for each item
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering (simplified)
    # Initialize feasibility check based on weight constraint
    feasible_items = np.all(weight <= 1, axis=1)

    # Initialize particle swarm optimization parameters
    num_particles = 10
    velocities = np.random.rand(num_particles, n) * 2 - 1
    positions = np.copy(model_scores)
    best_positions = positions.copy()
    best_scores = model_scores.copy()

    # Particle swarm optimization loop (simplified)
    for _ in range(100):  # Number of iterations
        for i in range(n):
            # Update velocities and positions
            velocities[:, i] = 0.5 * velocities[:, i] + 0.3 * np.random.rand(num_particles) * (best_positions[:, i] - positions[:, i])

            # Apply constraints
            velocities[:, i] = np.clip(velocities[:, i], -1, 1)
            positions[:, i] = np.clip(positions[:, i], 0, 1)

            # Update fitness scores
            positions[:, i] = np.array([min(max(positions[:, i], 0), 1) for i in range(n)])
            current_scores = positions[:, i] * (prize / (prize.max() + 1e-6))

            # Update local and global best
            for j in range(num_particles):
                if current_scores[j] > best_scores[j]:
                    best_scores[j] = current_scores[j]
                    best_positions[j] = positions[j]

    # Combine model scores and PSO scores for heuristics
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * best_scores[i]

    # Sparsify heuristics by setting unpromising elements to zero
    heuristic[heuristic < np.percentile(heuristic, 5)] = 0

    return heuristic
```
