```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]

    # Deep reinforcement learning component (using a pre-trained model)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    # Calculate the feasibility for each item in each dimension
    feasibility_matrix = np.all(weight <= 1, axis=1)
    feasible_items = np.any(feasibility_matrix, axis=1)

    # Particle swarm optimization (simplified version)
    # Initialize the swarm with particles
    swarm_size = 10
    particles = np.random.rand(swarm_size, n)
    velocities = np.random.rand(swarm_size, n)
    best_individuals = particles * model_scores
    global_best = np.max(best_individuals)

    # Update particles based on velocities and model scores
    for _ in range(100):  # Assuming 100 iterations for simplicity
        for i in range(n):
            velocities[:, i] = 0.5 * velocities[:, i] + 0.5 * np.random.randn(swarm_size) * (model_scores[i] - best_individuals[:, i])
            particles[:, i] += velocities[:, i]
            particles[:, i] = np.clip(particles[:, i], 0, 1)  # Ensure particles stay within bounds
            current_score = particles[:, i] * model_scores
            if np.max(current_score) > global_best:
                global_best = np.max(current_score)
                global_best_index = np.argmax(current_score)

    # Generate heuristics based on model scores, PSO, and feasibility
    heuristics = np.zeros(n)
    for i in range(n):
        if not feasible_items[i]:
            heuristics[i] = 0
        else:
            heuristic_value = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6)) * (1 if particles[:, i] > 0.5 else 0)
            heuristics[i] = max(heuristics[i], heuristic_value)

    # Sparsify the heuristics by setting unpromising elements to zero
    sparsity_threshold = np.percentile(heuristics, 95)  # Set a threshold for sparsity
    heuristics[heuristics < sparsity_threshold] = 0

    return heuristics
```
