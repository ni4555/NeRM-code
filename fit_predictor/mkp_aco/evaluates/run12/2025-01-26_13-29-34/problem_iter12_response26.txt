```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component with adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violation

    # Initialize Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)

    # Adaptive learning parameters
    velocity_adaptation_rate = 0.1
    inertia_weight = 0.7
    cognitive_parameter = 1.5
    social_parameter = 1.5
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)

    for _ in range(100):  # Using a moderate number of iterations
        for i in range(n):
            # Update the velocity
            r1, r2 = np.random.rand(), np.random.rand()
            pso_velocity[i] = (inertia_weight * pso_velocity[i] +
                               cognitive_parameter * r1 * (pso_personal_best[i] - pso_position[i]) +
                               social_parameter * r2 * (pso_global_best[i] - pso_position[i]))
            # Update the position
            pso_position[i] += pso_velocity[i]
            # Ensure the position does not exceed 1
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            # Update the personal best if the current position is better
            if pso_position[i] > pso_personal_best[i]:
                pso_personal_best[i] = pso_position[i]
            # Update the global best if the personal best is better
            if pso_position[i] > pso_global_best[i]:
                pso_global_best[i] = pso_position[i]

        # Update rewards for PSO
        pso_rewards = [reward_function(pso_position)]
        model_rewards.append(pso_rewards[-1])

    # Update heuristics based on the weighted average of RL and PSO rewards, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = (avg_reward * (prize[i] / (prize[np.argmax(pso_global_best)] + 1e-6))) + \
                           (pso_global_best[i] * (1 - avg_reward))

    # Sparsify heuristics by setting less promising elements to zero using a sparsity threshold
    sparsity_threshold = np.percentile(heuristic[feasible_items], 0.1)
    heuristic[heuristic < sparsity_threshold] = 0

    # Adapt RL reward function based on the most promising heuristic scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the new RL scores, balancing RL and PSO
    heuristic = (new_model_scores * prize / (prize[np.argmax(pso_global_best)] + 1e-6) +
                 pso_global_best * (1 - new_model_scores * prize / (prize[np.argmax(pso_global_best)] + 1e-6)))

    # Ensure the heuristics are non-negative
    heuristic = np.clip(heuristic, 0, 1)

    return heuristic
```
