```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Simulated pre-trained model from deep reinforcement learning (random for demo)
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering with initial feasibility check
    feasible_items = np.all(weight <= 1, axis=1)

    # Particle Swarm Optimization initialization
    particle_pos = np.copy(model_scores)  # Initial position = model scores
    particle_vel = np.zeros((n,))  # Velocity
    best_score_index = np.argmax(model_scores)  # Local best (starting at max model score)
    p_best_score = model_scores.copy()  # Local best score

    # PSO iterations to adjust the velocity and positions (simplified version)
    # Let's assume the PSO process continues for a fixed number of iterations (T)
    T = 10
    c1, c2 = 2, 2  # Coefficients for velocity adjustment
    w = 0.5  # Inertia weight

    for _ in range(T):
        # Update velocity
        r1, r2 = np.random.rand(n, 2)
        particle_vel = w * particle_vel + c1 * r1 * (p_best_score - particle_pos) + c2 * r2 * (best_score_index - particle_pos)

        # Update position
        particle_pos = particle_pos + particle_vel

        # Update local best for each particle
        p_best_score[particle_pos > model_scores] = particle_pos[particle_pos > model_scores]
        p_best_score[particle_pos <= model_scores] = model_scores[particle_pos <= model_scores]

        # Update global best
        global_best_index = np.argmax(p_best_score)
        if particle_pos[global_best_index] > p_best_score[global_best_index]:
            p_best_score[global_best_index] = particle_pos[global_best_index]

    # Combine PSO-based heuristics with model scores and constraint satisfaction
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6)) * p_best_score[i]

    # Sparsify heuristics by setting unpromising elements to zero
    sparsity_threshold = np.percentile(heuristic[feasible_items], 5)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
