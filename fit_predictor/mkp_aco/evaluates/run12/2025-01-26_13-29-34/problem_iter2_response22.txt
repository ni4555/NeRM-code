```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    n = prize.shape[0]
    heuristic = np.zeros((n,))
    
    # Use a priority queue to keep track of the most promising items
    from queue import PriorityQueue
    pq = PriorityQueue()
    
    # Initialize the priority queue with all items, with priority based on the initial prize value
    for i in range(n):
        pq.put((-np.sum(prize[i]), i))  # Use negative because PriorityQueue is a min-heap
    
    # Process the priority queue, considering only items that maintain the total weight constraint
    while not pq.empty():
        _, i = pq.get()
        total_weight = 0
        for k in range(m):
            total_weight += weight[i][k]
            if total_weight > 1:
                break
        heuristic[i] = np.sum(prize[i])
    
    return heuristic
```
