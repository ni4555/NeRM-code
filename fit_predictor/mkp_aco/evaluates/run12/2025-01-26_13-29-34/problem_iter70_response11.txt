```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    iteration = 0
    max_iterations = 100
    convergence_threshold = 1e-5
    diversity_maintainer = np.zeros((n,))
    diversity_maintenance_iterations = 5

    while iteration < max_iterations:
        for i in range(n):
            if i in feasible_items:
                # Update PSO
                r1, r2 = np.random.rand(2)
                cognitive_velocity = learning_rate * pso_personal_best[i] - pso_position[i]
                social_velocity = r1 * (pso_global_best[i] - pso_position[i])
                pso_velocity[i] = cognitive_velocity + social_velocity
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Reduce learning rate on convergence
        if np.linalg.norm(model_rewards[-10:]) < convergence_threshold:
            learning_rate *= 0.99

        # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
        for i in range(n):
            if not feasible_items[i]:
                heuristic[i] = 0
            else:
                avg_reward = np.mean(model_rewards[-min(10, iteration):])
                heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

        # Refine the reward function
        new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
        new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
        new_model_scores /= np.sum(new_model_scores)

        # Update heuristics based on the refined RL scores
        heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

        # Sparsify heuristics with dynamic thresholds
        dynamic_threshold = np.percentile(heuristic, 50)
        heuristic[heuristic < dynamic_threshold] = 0

        # Maintain diversity by occasionally ignoring the best solution
        if iteration % diversity_maintenance_iterations == 0:
            diversity_maintainer = 1 - pso_position[global_best_index]
            for i in range(n):
                heuristic[i] = (1 - diversity_maintainer[i]) * heuristic[i]

        # Ignore non-feasible items in the final heuristic
        heuristic[~feasible_items] = 0

        iteration += 1

    return heuristic
```
