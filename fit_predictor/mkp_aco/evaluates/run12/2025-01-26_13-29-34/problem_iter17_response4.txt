```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) component
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items[constraint_violation] = False

    # Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # PSO initialization with feasible items only
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_position = pso_position[feasible_items]
    pso_personal_best = pso_personal_best[feasible_items]
    pso_global_best = pso_global_best[feasible_items]
    pso_personal_best_scores = pso_personal_best_scores[feasible_items]
    pso_global_best_scores = pso_global_best_scores[feasible_items]

    # PSO with adaptive learning rate
    learning_rate = 0.01
    for _ in range(10):  # Small number of iterations for demonstration
        for i in range(n):
            if feasible_items[i]:
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)
                
                # Update personal and global best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update DRL scores based on PSO global best
        model_scores[~feasible_items] = float('-inf')
        model_scores[np.argmax(pso_global_best_scores)] = pso_global_best_scores[np.argmax(pso_global_best_scores)]

        # Update rewards for DRL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of DRL and PSO scores
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = (avg_reward * (prize[i] / (prize[np.argmax(pso_global_best_scores)] + 1e-6))) + \
                           (pso_global_best[np.argmax(pso_global_best_scores)] * (1 - avg_reward))

    # Integrate constraint-aware filtering by ignoring non-feasible items
    heuristic[~feasible_items] = 0

    return heuristic
```
