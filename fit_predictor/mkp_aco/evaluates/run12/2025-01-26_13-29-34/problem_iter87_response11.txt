```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) model initialization
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items

    # Particle Swarm Optimization (PSO) initialization
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure initial PSO global best is feasible
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive learning rates and sparsity thresholds
    learning_rate = 0.01
    sparsity_threshold = np.percentile(model_scores, 50)

    # Exploration-Exploitation balance with Q-learning
    epsilon = 0.1  # Exploration rate
    Q = np.zeros((n, n))
    Q += np.logspace(-5, 0, num=n).reshape(n, 1)  # Initialize Q with logarithmic values

    # PSO and DRL iteration
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if np.random.rand() < epsilon:
                # Exploration: select a random action
                action = np.random.randint(n)
            else:
                # Exploitation: select the action with the highest Q-value
                action = np.argmax(Q[:, i])

            # Update PSO position
            pso_position[i] = np.copy(pso_position[action])
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                               (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            # Update personal and global best in PSO
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update DRL model scores based on the best PSO score
        feasible_items = np.sum(weight, axis=1) <= 1
        model_scores[~feasible_items] = float('-inf')
        model_scores = np.copy(pso_global_best_scores)

        # Update Q-values
        Q[:, i] = Q[:, i] * (1 - epsilon) + model_scores[i] * epsilon

        # Update heuristics based on the weighted average of DRL and PSO scores
        for j in range(n):
            if not feasible_items[j]:
                heuristic[j] = 0
            else:
                avg_reward = np.mean(model_scores)
                heuristic[j] = avg_reward * (prize[j] / (prize[np.argmax(model_scores)] + 1e-6))

        # Sparsify heuristics with dynamic thresholds
        dynamic_threshold = np.percentile(heuristic, 50)
        heuristic[heuristic < dynamic_threshold] = 0

    return heuristic
```
