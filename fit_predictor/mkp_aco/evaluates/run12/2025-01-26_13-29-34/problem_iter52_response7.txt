```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with a more nuanced reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x)) - np.sum(x * np.argmax(weight, axis=1) == np.argmax(x))
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive learning rate
    learning_rate = 0.01
    max_learning_rate = 0.1

    # Initialize adaptive constraints and diversity mechanism
    diversity_mechanism_strength = 0.1

    # Run PSO with adaptive learning rate and balance global/local search
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                r1, r2 = np.random.rand(), np.random.rand()
                cognitive_velocity = learning_rate * r1 * (pso_personal_best[i] - pso_position[i])
                social_velocity = learning_rate * r2 * (pso_global_best[i] - pso_position[i])
                local_search_velocity = learning_rate * (1 - r2) * (np.random.rand() - 0.5) * (1 + i / n)  # Local search based on iteration number
                pso_velocity[i] = cognitive_velocity + social_velocity + local_search_velocity
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Refine heuristics with feedback from reward function
        heuristic = np.exp(reward_function(model_scores) - np.max(reward_function(model_scores)))
        heuristic /= np.sum(heuristic)

        # Introduce mutation for promoting diversity
        diversity_mechanism = lambda x: np.clip(x + np.random.normal(0, diversity_mechanism_strength, size=x.shape), 0, 1)
        heuristic = diversity_mechanism(heuristic)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
