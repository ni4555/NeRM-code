```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize a deep reinforcement learning model
    model = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items

    # Initialize particle swarm optimization with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)

    # Ensure the initial global best is feasible
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best[~feasible_items] = np.random.rand(n)
    pso_global_best = np.copy(pso_position[feasible_items])

    # Adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model, 50)
    learning_rate = 0.01

    # Run PSO
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model[i] > pso_personal_best[i]:
                    pso_personal_best[i] = model[i]

                # Update global best
                if pso_personal_best[i] > pso_global_best[i]:
                    pso_global_best[i] = pso_personal_best[i]

        # Update reward based on PSO performance
        model = np.exp(reward_function(pso_global_best) - np.max(reward_function(pso_global_best)))
        model /= np.sum(model)

    # Heuristic calculation
    for i in range(n):
        if i in feasible_items:
            heuristic[i] = model[i] * prize[i] / np.sum(prize * model)

    # Sparsify heuristics by setting low values to zero
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Encourage diversity by incorporating variance
    diversity_factor = np.var(pso_global_best) / np.mean(pso_global_best)
    heuristic *= diversity_factor

    # Refine heuristics by balancing exploration and exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.sum(prize * heuristic) / np.sum(prize)
    heuristic = exploration_factor * heuristic + exploitation_factor

    # Final adjustment to ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    heuristic[~feasible_items] = 0

    return heuristic
```
