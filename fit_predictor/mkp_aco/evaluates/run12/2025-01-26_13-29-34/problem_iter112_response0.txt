```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Pre-filter infeasible items
    feasible_items = np.sum(weight, axis=1) <= 1

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive parameters
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with DRL scores and ensure feasibility
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive learning rate and sparsity threshold
    learning_rate = 0.01
    sparsity_threshold = np.percentile(model_scores, 50)

    # Run PSO with adaptive learning rate and filter only feasible items
    for iteration in range(100):
        for i in range(n):
            if i in feasible_items:
                r1, r2 = np.random.randn(), np.random.randn()
                cognitive_component = 0.5 * r1 * (pso_personal_best[i] - pso_position[i])
                social_component = 0.5 * r2 * (pso_global_best[i] - pso_position[i])
                pso_velocity[i] = learning_rate * pso_velocity[i] + cognitive_component + social_component
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update DRL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

        # Update heuristics based on recent performance
        recent_performance = np.mean(model_rewards[-10:])
        heuristic[feasible_items] = recent_performance * (prize[feasible_items] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics using the adaptive threshold
    heuristic[heuristic < sparsity_threshold] = 0

    # Refine the reward mechanism with the most promising heuristic scores
    refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    refined_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
    refined_model_scores /= np.sum(refined_model_scores)

    # Update heuristics based on the refined scores
    heuristic = refined_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Ensure non-feasible items have zero heuristic value
    heuristic[~feasible_items] = 0

    return heuristic
```
