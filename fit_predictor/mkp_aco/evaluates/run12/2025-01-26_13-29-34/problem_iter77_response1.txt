```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize adaptive learning rate
    learning_rate = 0.01

    # Run a simple DRL iteration to get initial model_scores
    for _ in range(1):
        reward = reward_function(model_scores)
        model_rewards.append(reward)
        # Use reward to update scores (simple update)
        model_scores = (1 - learning_rate) * model_scores + learning_rate * np.exp(reward)

    # Run Particle Swarm Optimization (PSO) with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        # Randomly initialize PSO particles
        pso_position = np.random.rand(n)
        pso_velocity = np.zeros(n)
        pso_personal_best = np.copy(pso_position)
        pso_global_best = np.copy(pso_position)

        # Run PSO
        for _ in range(50):  # Using a small number of iterations for demonstration
            for i in range(n):
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > model_scores[pso_personal_best[i]]:
                    pso_personal_best[i] = i

            # Update global best
            pso_global_best = pso_position[np.argmax(model_scores)]

        # Update DRL scores with the best PSO score
        reward = reward_function(model_scores[pso_global_best])
        model_rewards.append(reward)
        model_scores[pso_global_best] = np.exp(reward)  # Update scores with new reward

    # Refine heuristics based on DRL scores
    for i in range(n):
        heuristic[i] = model_scores[i] / (model_scores[0] + 1e-6)

    # Early feasibility checks
    feasible_items = np.sum(weight, axis=1) <= 1

    # Sparsify heuristics by removing low values
    threshold = np.percentile(heuristic[feasible_items], 30)
    heuristic[~feasible_items] = 0
    heuristic[heuristic < threshold] = 0

    # Balancing feasibility and diversity
    diversity_factor = np.mean(model_scores) / np.std(model_scores)
    heuristic *= diversity_factor

    # Refine reward mechanism by incorporating diversity
    reward_function = lambda x: -np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    refined_model_scores = np.exp(reward_function(model_scores) - np.max(reward_function(model_scores)))
    refined_model_scores /= np.sum(refined_model_scores)

    # Update heuristics based on refined scores
    heuristic = refined_model_scores

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
