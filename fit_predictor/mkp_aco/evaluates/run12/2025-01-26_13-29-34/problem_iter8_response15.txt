```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Simulate deep reinforcement learning with a more sophisticated reward function
    # For demonstration, we'll use the negative sum of weight as the reward
    model_scores = -np.sum(weight, axis=1)

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Initialize Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(model_scores)
    pso_global_best = np.copy(model_scores[0])  # Start with the first item's score
    for i in range(1, n):
        pso_global_best = np.maximum(pso_global_best, model_scores[i])

    # Perform a limited number of PSO iterations
    for _ in range(10):
        for i in range(n):
            # Update velocity
            pso_velocity[i] = 0.5 * pso_velocity[i] + 0.5 * (np.random.rand() - 0.5)
            # Update position
            pso_position[i] += pso_velocity[i]
            # Ensure the position does not exceed 1
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            # Update personal best if the current position is better
            pso_personal_best[i] = np.maximum(pso_position[i], pso_personal_best[i])
            # Update global best if the personal best is better
            pso_global_best = np.maximum(pso_global_best, pso_personal_best[i])

    # Maintain feasibility through constraint-driven filtering
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violation

    # Update heuristics based on model scores, PSO global best, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = (model_scores[i] + pso_global_best) * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics using a dynamic threshold
    sparsity_threshold = np.percentile(heuristic[feasible_items], 50)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
