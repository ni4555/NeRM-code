```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (with a more realistic approach)
    # Assume we have a trained model that outputs probabilities of choosing each item
    # Here we simulate that with a random variable that represents the learned policy
    model_scores = np.random.rand(n)

    # Maintain feasibility with constraint checks
    feasible_items = np.all(weight <= 1, axis=1)

    # Initialize particle swarm optimization (PSO) with individual and global bests
    global_best_index = np.argmax(model_scores)
    pso_position = np.copy(model_scores)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(model_scores)
    pso_global_best = np.copy(model_scores)

    # Dynamic sparsity threshold
    sparsity_threshold = np.percentile(model_scores[feasible_items], 10)

    # Balance exploration and exploitation by using a combination of deterministic and random selection
    for _ in range(20):  # Increase the number of iterations for a better exploration
        for i in range(n):
            # Update PSO velocity and position
            w = 0.5  # inertia weight
            c1 = 1  # cognitive parameter
            c2 = 2  # social parameter
            r1, r2 = np.random.rand(2)
            pso_velocity[i] = w * pso_velocity[i] + c1 * r1 * (pso_personal_best[i] - pso_position[i]) + c2 * r2 * (pso_global_best[i] - pso_position[i])
            pso_position[i] += pso_velocity[i]

            # Ensure feasibility and update personal bests
            if not feasible_items[i]:
                pso_position[i] = pso_personal_best[i]
            if pso_position[i] > model_scores[i]:  # Avoid the local optimum
                pso_position[i] = model_scores[i] + np.random.rand() * (1 - model_scores[i])

        # Update personal and global bests
        pso_personal_best = np.maximum(pso_position, pso_personal_best)
        pso_global_best = np.maximum(pso_personal_best, pso_global_best)
        global_best_index = np.argmax(pso_global_best)

    # Update heuristics based on model scores, PSO scores, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = (model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))) + \
                           (pso_global_best[i] * (1 - model_scores[i]))

    # Dynamically adjust the sparsity threshold based on performance
    recent_performance = heuristic[feasible_items].mean()
    if recent_performance < np.mean(model_scores[feasible_items]):
        sparsity_threshold = np.percentile(heuristic[feasible_items], 10)
    else:
        sparsity_threshold = np.percentile(heuristic[feasible_items], 20)

    # Sparsify heuristics by setting less promising elements to zero
    heuristic[heuristic < sparsity_threshold] = 0

    # Incorporate domain-specific constraints early
    cumulative_weight = np.cumsum(weight, axis=1)
    if np.any(cumulative_weight > 1):
        heuristic = np.zeros(n)

    return heuristic
```
