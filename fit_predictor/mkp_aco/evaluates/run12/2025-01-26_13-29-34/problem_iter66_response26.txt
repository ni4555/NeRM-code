```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) initialization
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) initialization
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive learning rate and sparsity
    learning_rate = 0.01
    sparsity_threshold = np.percentile(model_scores, 50)

    # PSO optimization loop
    for _ in range(10):  # Small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal and global best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update DRL scores based on PSO global best
        model_scores[~feasible_items] = float('-inf')
        model_scores[np.argmax(pso_global_best_scores)] = pso_global_best_scores[np.argmax(pso_global_best_scores)]

        # Update rewards for DRL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of DRL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (prize[np.argmax(pso_global_best_scores)] + 1e-6))

    # Sparsify heuristics with dynamic thresholds
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined DRL scores
    heuristic = new_model_scores * prize / (prize[np.argmax(pso_global_best_scores)] + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    # Integrate evolutionary swarm intelligence by balancing exploration and exploitation
    exploration_rate = 0.5
    exploitation_rate = 0.5
    for i in range(n):
        if i in feasible_items:
            heuristic[i] *= (np.random.rand() + 1) * (exploration_rate + exploitation_rate)

    # Mutation: Introduce diversity by occasionally resetting low heuristic values
    mutation_rate = 0.1
    for i in range(n):
        if np.random.rand() < mutation_rate and heuristic[i] < np.percentile(heuristic, 25):
            heuristic[i] = np.random.rand()

    # Diversity control: Introduce a diversity factor to avoid premature convergence
    diversity_factor = np.random.rand(n)
    diversity_factor[~feasible_items] = 1 / (1 + np.exp(-heuristic[~feasible_items]))
    diversity_factor /= np.sum(diversity_factor)

    # Update heuristics based on diversity
    heuristic *= diversity_factor

    # Refine the heuristic further by incorporating a balance between exploration and exploitation
    heuristic *= (np.random.rand(n) + 1) * (exploration_rate + exploitation_rate)

    return heuristic
```
