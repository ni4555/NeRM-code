```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Exploration-exploitation parameters
    exploration_rate = 0.1 + 0.9 * np.random.rand()
    exploitation_rate = 0.9 - 0.1 * np.random.rand()

    # Run PSO with adaptive learning rate and update DRL scores frequently
    for iteration in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            # Update velocity and position with exploration-exploitation balance
            pso_velocity[i] = learning_rate * (exploration_rate * np.random.rand() + (1 - exploration_rate) * exploitation_rate)
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            # Update personal best
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]

            # Update global best
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Refine reward function with heuristic scores iteratively
        new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
        model_rewards.append(new_reward_function(model_scores))

    # Normalize model rewards for better convergence
    model_rewards = np.array(model_rewards)
    model_rewards /= np.sum(model_rewards)

    # Sparsify heuristics with dynamic thresholds
    dynamic_threshold = np.percentile(model_rewards, 50)
    heuristic = model_rewards > dynamic_threshold

    # Integrate constraint-aware filtering by ignoring non-feasible items
    feasible_items = np.sum(weight, axis=1) <= 1
    heuristic[~feasible_items] = 0

    # Adjust heuristics to balance with prize values early
    heuristic *= prize / (prize[global_best_index] + 1e-6)

    return heuristic
```
