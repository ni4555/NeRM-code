```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) component with adaptive rewards
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initialize PSO components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Feasibility check for PSO initialization
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')

    # Adaptive sparsity and learning rate initialization
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Reduced iterations for clarity
        for i in range(n):
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            # Update personal and global bests
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index and RL scores
        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on RL and PSO scores, while ensuring feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics based on adaptive threshold
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Enhance heuristics by integrating PSO's personal best positions
    for i in range(n):
        heuristic[i] *= (1 + pso_personal_best[i])

    # Adjust heuristic scores for constraint violation
    constraint_penalty = lambda item, weights: 1 / (1 + np.sum((weights - item) ** 2))
    for i in range(n):
        if np.sum((weight[i, :] - pso_personal_best[i])) > 0:
            heuristic[i] *= constraint_penalty(heuristic[i], weight[i, :])

    # Refine heuristics with DRL's reward function
    heuristic = np.exp(reward_function(heuristic) - np.max(reward_function(heuristic)))
    heuristic /= np.sum(heuristic)

    return heuristic
```
