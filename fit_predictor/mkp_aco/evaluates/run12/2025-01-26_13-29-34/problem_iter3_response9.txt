```python
import numpy as np
from scipy.optimize import differential_evolution

def heuristic_fitness(individual):
    n, m = individual.shape
    heuristic = np.zeros((n,))
    feasible_solutions = np.zeros((n,))

    for i in range(n):
        total_prize = 0
        total_weight = np.sum(individual[i])
        for j in range(i, n):
            if np.sum(weight[j]) + total_weight > 1:
                break
            total_prize += prize[j]
        heuristic[i] = total_prize
        feasible_solutions[i] = 1 if total_prize > 0 else 0

    return -np.sum(feasible_solutions)  # Negative because DE is minimizing by default

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    bounds = [(0, 1) for _ in range(prize.shape[0])]
    result = differential_evolution(heuristic_fitness, bounds)
    return result.x

# Assuming 'prize' and 'weight' are defined elsewhere
# heuristics = heuristics_v2(prize, weight)
```
