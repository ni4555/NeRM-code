```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (using a pre-trained model)
    model_scores = np.random.rand(n)  # Simulated pre-trained model scores

    # Adaptive constraint-driven filtering with sparsity
    feasible_items = np.ones(n, dtype=bool)
    for i in range(n):
        if np.any(weight[i, :] > 1):
            feasible_items[i] = False
            break

    # Particle swarm optimization for evolutionary swarm intelligence
    global_best_index = np.argmax(model_scores)
    global_best_score = model_scores[global_best_index]
    pso_global_best = np.copy(model_scores)

    # Heuristic scaling based on model scores and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Adjusting the heuristic score to account for multiple objectives
            score = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))
            # Incorporate feasibility into the heuristic
            heuristic[i] = score

    # Adaptive learning mechanism
    # Adjust the heuristic for less promising items based on their score
    for i in range(n):
        if heuristic[i] < global_best_score * 0.5:
            heuristic[i] *= 0.9

    # Normalize the heuristic to ensure all values are within a reasonable range
    heuristic /= np.max(heuristic)

    # Refine pre-trained scores using PSO
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if feasible_items[i]:
                r1, r2 = np.random.rand(2)
                pso_global_best[i] = w * pso_global_best[i] + c1 * r1 * (pso_global_best[i] - model_scores[i]) + c2 * r2 * (global_best_score - model_scores[i])

    # Update heuristics based on refined PSO scores
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = pso_global_best[i]

    return heuristic
```
