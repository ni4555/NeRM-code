```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Constraint-driven filtering to maintain feasibility
    feasible_items = np.sum(weight, axis=1) <= 1

    # Deep Reinforcement Learning (DRL) component
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores
    pso_global_best_scores[~feasible_items] = float('-inf')

    # PSO iterations
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            pso_velocity[i] = 0.01 * (np.random.rand() - 0.5)
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
                
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on weighted RL and PSO scores
    avg_reward = np.mean(model_rewards)
    heuristic[feasible_items] = avg_reward * (prize[feasible_items] / (prize[global_best_index] + 1e-6))

    # Enhance exploration-exploitation balance with dynamic rates
    exploration_rate = 0.1 + 0.9 * np.random.rand()
    exploitation_rate = 0.9 - 0.1 * np.random.rand()
    heuristic = (exploration_rate * np.random.rand(n)) + (exploitation_rate * heuristic[feasible_items])

    # Adapt RL reward function based on heuristics
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic[feasible_items])
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the new RL scores
    heuristic[feasible_items] = new_model_scores * prize[feasible_items] / (prize[global_best_index] + 1e-6)

    return heuristic
```
