```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Ensure feasibility with adaptive constraint-driven filtering
    feasible_items = np.sum(weight, axis=1) <= 1

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate and inertia weight
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Update PSO global best with DRL scores and ensure feasibility
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive learning rate schedule
    learning_rate_schedule = np.linspace(0.1, 0.01, 10)
    inertia_weight_schedule = np.linspace(0.9, 0.5, 10)

    # Run PSO for a number of iterations with adaptive parameters
    for iteration in range(10):
        inertia_weight = inertia_weight_schedule[iteration]
        learning_rate = learning_rate_schedule[iteration]

        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                r1, r2 = np.random.randn(), np.random.randn()
                cognitive_component = 2 * r1 * (pso_personal_best[i] - pso_position[i])
                social_component = 2 * r2 * (pso_global_best[i] - pso_position[i])
                pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_component + social_component
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of DRL and PSO scores
    recent_performance = np.mean(model_rewards[-5:])
    heuristic[feasible_items] = recent_performance * (prize[feasible_items] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics using percentile thresholds
    dynamic_threshold = np.percentile(heuristic[feasible_items], 90)
    heuristic[feasible_items][heuristic[feasible_items] < dynamic_threshold] = 0

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    refined_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
    refined_model_scores /= np.sum(refined_model_scores)

    # Update heuristics based on the refined DRL scores
    heuristic = refined_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
