```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (simplified)
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Particle swarm optimization for evolutionary swarm intelligence
    global_best_index = np.argmax(model_scores)
    global_best = prize[global_best_index]

    # Calculate heuristic based on model scores, feasibility, and relative prize value
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (global_best + 1e-6))

    return heuristic
```
