```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    learning_rate = 0.01
    min_learning_rate = 0.001
    max_learning_rate = 0.1
    t = 0  # Iteration counter for adaptive learning rate

    # Initialize PSO global best with DRL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    infeasible_indices = np.where(~feasible_items)[0]
    model_scores[infeasible_indices] = float('-inf')
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Run PSO with adaptive learning rate and constraint checking
    for iteration in range(100):  # Using a larger number of iterations for better convergence
        t += 1
        learning_rate = max(min_learning_rate, max_learning_rate * (1 / (1 + t)))

        for i in range(n):
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            current_score = model_scores[i] if feasible_items[i] else float('-inf')
            if current_score > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = current_score
                pso_personal_best[i] = pso_position[i]

            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Refine reward mechanism with heuristic feedback
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * model_scores)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Mutation: Add diversity by perturbing the heuristics slightly
    perturbation = np.random.normal(0, 0.01, n)
    heuristic += perturbation

    # Ensure that the heuristics are still positive and within the [0, 1] range
    heuristic = np.clip(heuristic, 0, 1)

    # Filter heuristics using adaptive constraint-driven filtering
    # We use a simple heuristic to maintain feasibility
    feasible_heuristics = heuristic[feasible_items]
    feasibility_weight = np.exp(np.sum(feasible_heuristics**2) / np.sum(feasible_heuristics**2 + 1e-6))
    infeasible_heuristics = heuristic[~feasible_items]
    infeasibility_weight = np.exp(np.sum(infeasible_heuristics**2) / np.sum(infeasible_heuristics**2 + 1e-6))
    heuristic *= (feasibility_weight + infeasibility_weight) / 2

    return heuristic
```
