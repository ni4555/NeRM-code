```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Simulate a pre-trained RL model that returns a score for each item
    model_scores = np.random.rand(n)

    # Initialize PSO parameters
    num_particles = 20
    num_iterations = 50
    inertia_weight = 0.7
    cognitive_weight = 1.5
    social_weight = 1.5
    particles = np.random.rand(num_particles, n)
    velocities = np.random.rand(num_particles, n)
    best_position = particles.copy()
    best_scores = np.array([np.sum(model_scores) - np.sum(prize[particles[:, i] == 1][:, None] * weight[particles[:, i] == 1]) for i in range(n)])
    for i in range(num_iterations):
        for p in range(num_particles):
            # Update velocities
            velocities[p] = inertia_weight * velocities[p] + cognitive_weight * np.random.rand(n) * (best_position[p] - particles[p]) + social_weight * np.random.rand(n) * (best_position[np.argmax(best_scores)] - particles[p])
            # Update particles
            particles[p] += velocities[p]
            # Apply constraints and calculate the cost
            while np.any(weight[particles[:, i] == 1][:, None] > 1):
                for j in range(n):
                    if np.sum(weight[particles[:, j] == 1][:, None]) > 1:
                        particles[p, j] = 0
            scores = np.sum(model_scores[particles[:, i] == 1]) - np.sum(prize[particles[:, i] == 1][:, None] * weight[particles[:, i] == 1])
            # Update the best score
            if scores > best_scores[p]:
                best_scores[p] = scores
                best_position[p] = particles[p].copy()

    # Calculate heuristic values
    for i in range(n):
        feasible = True
        for p in range(num_particles):
            if particles[p, i] == 1 and np.sum(weight[particles[:, i] == 1][:, None]) > 1:
                feasible = False
                break
        if feasible:
            heuristic[i] = model_scores[i] * np.mean(best_scores)

    # Sparsify the heuristics by setting unpromising elements to zero
    heuristic[heuristic < 0.5] = 0

    return heuristic
```
