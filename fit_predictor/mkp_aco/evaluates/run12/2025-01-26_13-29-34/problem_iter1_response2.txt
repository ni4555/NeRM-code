```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) inspired heuristic
    # Placeholder for the DRL model's decision
    # For simplicity, we will use a random policy
    # In practice, this would be replaced by a model's decision
    drl_model_decision = np.random.rand(n,)

    # Adaptive Constraint-Driven Filtering (ACDF) for feasibility
    for i in range(n):
        if drl_model_decision[i] > 0.5:  # Threshold to consider item
            total_weight = np.sum(weight[i, :])
            if total_weight <= 1:
                # Particle Swarm Optimization (PSO) inspired heuristic
                # Calculate the relative importance of each item's prize
                item_importance = (prize[i] / np.sum(prize)) * (1 / total_weight)
                heuristic[i] = item_importance

    # Sparsify by setting unpromising elements to zero
    heuristic[heuristic <= 0.01] = 0

    return heuristic
```
