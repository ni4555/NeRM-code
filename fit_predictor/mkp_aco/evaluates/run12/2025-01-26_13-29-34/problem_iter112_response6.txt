```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Pre-filter infeasible items
    feasible_items = np.sum(weight, axis=1) <= 1

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate and improved personal and global bests
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure PSO's global best is feasible initially
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Run PSO with adaptive learning rate
    for _ in range(100):  # Increased iteration for better exploration and exploitation
        for i in range(n):
            if i in feasible_items:
                # Update velocity and position with inertia weight, cognitive, and social coefficients
                w = 0.7  # Inertia weight
                c1 = 1.5  # Cognitive coefficient
                c2 = 1.5  # Social coefficient
                r1, r2 = np.random.rand(), np.random.rand()  # Cognitive and social parameters

                pso_velocity[i] = w * pso_velocity[i] + \
                                  c1 * r1 * (pso_personal_best[i] - pso_position[i]) + \
                                  c2 * r2 * (pso_global_best[i] - pso_position[i])
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best if found a better solution
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best if a new better personal best is found
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index and model scores
        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if i in feasible_items:
            avg_reward = np.mean(model_rewards[-50:])  # Use the last 50 iterations for smoothing
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics by setting unpromising elements to zero based on adaptive sparsity
    sparsity_threshold = np.percentile(heuristic, 90)
    heuristic[heuristic < sparsity_threshold] = 0

    # Incorporate diversity by considering the variance of the PSO scores
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    heuristic *= diversity_factor

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    refined_model_scores = model_scores / np.sum(model_scores)
    refined_prize = prize * refined_model_scores

    # Update heuristics based on the refined RL scores and prize
    heuristic = refined_prize / (np.sum(refined_prize) + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
