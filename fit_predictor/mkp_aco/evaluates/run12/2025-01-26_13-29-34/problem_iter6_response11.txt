```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (simplified)
    model_scores = np.random.rand(n)

    # Initialize variables for adaptive constraint-driven filtering
    total_weight = np.zeros(n)
    feasible_indices = np.ones(n, dtype=bool)

    # Calculate the total weight for each item considering the fixed constraint
    for i in range(n):
        total_weight[i] = np.sum(weight[i])
        for j in range(i + 1, n):
            combined_weight = np.sum(weight[i]) + np.sum(weight[j])
            if combined_weight > 1:
                feasible_indices[j] = False
                break

    # Use feasible_indices to filter out non-feasible items
    feasible_indices[:n-1] = feasible_indices[:n-1] & feasible_indices[1:]
    feasible_indices = feasible_indices.astype(bool)

    # Apply particle swarm optimization for evolutionary swarm intelligence
    for i in range(n):
        if not feasible_indices[i]:
            heuristic[i] = 0
            continue

        # Calculate local and global best
        local_best = np.max(prize[feasible_indices])
        global_best = np.max(prize)

        # Calculate heuristic based on the factors
        heuristic[i] = model_scores[i] * (prize[i] / (local_best + 1e-6)) * ((global_best - prize[i]) / (global_best + 1e-6))

    # Sparsify the heuristics by setting unpromising elements to zero
    # We set heuristics to zero only if they are below a certain threshold
    threshold = 0.5
    heuristic[heuristic < threshold] = 0

    # Further refine the heuristics to focus on feasibility and global best
    for i in range(n):
        if heuristic[i] > 0:
            # Adjust heuristic based on feasibility and global best
            heuristic[i] = heuristic[i] * (1 / (1 - total_weight[i])) * (1 / (global_best - prize[i]))

    return heuristic
```
