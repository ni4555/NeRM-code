```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize DRL scores with a random distribution
    model_scores = np.random.rand(n)

    # Constraint-driven filtering to maintain feasibility
    feasible_items = np.sum(weight, axis=1) <= 1

    # Run PSO with adaptive learning rate
    learning_rate = 0.01
    for _ in range(10):  # Using a small number of iterations for demonstration
        # Update PSO global best with DRL scores
        global_best_index = np.argmax(model_scores[feasible_items])
        pso_global_best = np.copy(model_scores[feasible_items])
        pso_global_best[~feasible_items] = float('-inf')

        # Update DRL scores based on PSO global best
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best[global_best_index]

    # Update heuristics considering feasibility and weighted reward
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_scores)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics using dynamic thresholds
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Constraint-aware filtering
    heuristic[~feasible_items] = 0

    return heuristic
```
