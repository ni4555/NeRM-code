```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize a Deep Q-Network (DQN) with adaptive reward function
    dqn_model = DQN()
    dqn_model.compile(optimizer='adam', loss='mse')
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items

    # Train DQN with adaptive reward function for feasibility
    for episode in range(1000):  # Using a small number of episodes for demonstration
        state = np.random.rand(n)
        action = dqn_model.predict(state.reshape(1, n))
        reward = reward_function(action)
        next_state = np.clip(state + np.random.randn(n), 0, 1)
        dqn_model.fit(state.reshape(1, n), action.reshape(1, 1), reward, next_state.reshape(1, n), epochs=1)

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(prize)
    pso_global_best_scores = np.copy(prize)

    # Ensure initial PSO global best is feasible
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(prize, 50)
    learning_rate = 0.01

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if prize[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = prize[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update DQN state based on the best PSO score
        state = np.clip(pso_global_best, 0, 1)
        action = dqn_model.predict(state.reshape(1, n))
        reward = reward_function(action)
        next_state = np.clip(state + np.random.randn(n), 0, 1)
        dqn_model.fit(state.reshape(1, n), action.reshape(1, 1), reward, next_state.reshape(1, n), epochs=1)

    # Update heuristics based on the weighted average of DQN and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(prize)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics by setting unpromising elements to zero
    sparsity_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < sparsity_threshold] = 0

    # Incorporate diversity by considering the variance of the PSO scores
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    heuristic *= diversity_factor

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(prize) - np.max(new_reward_function(prize)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
