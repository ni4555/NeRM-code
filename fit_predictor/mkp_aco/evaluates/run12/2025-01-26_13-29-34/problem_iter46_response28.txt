```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) model initialization
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) initialization
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Check feasibility and initialize PSO global best
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive learning rate parameters
    learning_rate = 0.01
    decay_rate = 0.99
    max_learning_rate = 0.1
    min_learning_rate = 0.001

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Consider only feasible items
                # Update velocity and position
                pso_velocity[i] = decay_rate * pso_velocity[i] + \
                                  (2 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Adapt learning rate
        learning_rate = max(min_learning_rate, max_learning_rate * decay_rate)

        # Update heuristic directly based on the best PSO score
        heuristic[feasible_items] = pso_global_best_scores

    # Refine the reward mechanism with heuristic feedback and sparsity
    refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined RL scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Mutation: Add diversity by perturbing the heuristics slightly
    diversity_mutation = 0.01 * np.random.randn(n)
    heuristic = heuristic + diversity_mutation

    # Ensure that the heuristics are still positive and within the [0, 1] range
    heuristic = np.clip(heuristic, 0, 1)

    return heuristic
```
