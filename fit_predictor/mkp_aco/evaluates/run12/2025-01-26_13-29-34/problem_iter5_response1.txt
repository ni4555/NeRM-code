```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (using a hypothetical pre-trained model)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    # Calculate the sum of weights for each dimension and check feasibility
    weight_sums = np.sum(weight, axis=1)
    feasible_items = weight_sums < 1

    # Particle swarm optimization for evolutionary swarm intelligence
    # Here we simulate the PSO with a simplified version
    # We use the sum of prizes as the fitness function
    fitness = np.sum(prize, axis=1)
    global_best_index = np.argmax(fitness)

    # Update heuristics based on model scores, feasibility, and balance between objectives
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Combine RL score, PSO fitness, and domain knowledge (prize value)
            heuristic[i] = model_scores[i] * (fitness[i] / (fitness[global_best_index] + 1e-6)) * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify the heuristics by setting unpromising elements to zero
    # We define unpromising as any heuristic less than a certain threshold
    threshold = np.mean(heuristic)
    heuristic[heuristic < threshold] = 0

    return heuristic
```
