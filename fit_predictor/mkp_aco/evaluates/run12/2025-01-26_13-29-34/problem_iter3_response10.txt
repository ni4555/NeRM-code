```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    heuristic = np.zeros((prize.shape[0],))

    # Deep Reinforcement Learning (DRL) component for real-time decision-making
    # This is a placeholder as actual DRL would require a complex setup and is beyond the scope of this heuristic
    # Assuming we have a function get_rl_value(item_index) that returns the value from DRL
    get_rl_value = lambda i: np.random.rand()

    # Particle Swarm Optimization (PSO) component for evolutionary swarm intelligence
    # This is a placeholder as PSO would require a complex setup and is beyond the scope of this heuristic
    # Assuming we have a function get_pso_value(item_index) that returns the value from PSO
    get_pso_value = lambda i: np.random.rand()

    # Adaptive constraint-driven filtering
    for i in range(prize.shape[0]):
        total_prize = 0
        total_weight = np.zeros(m)
        best_rl_value = get_rl_value(i)
        best_pso_value = get_pso_value(i)
        
        for j in range(i, prize.shape[0]):
            total_weight += weight[j]
            if np.any(total_weight > 1):  # If any dimension exceeds the constraint, stop adding items
                break
            total_prize += prize[j]
            current_rl_value = get_rl_value(j)
            current_pso_value = get_pso_value(j)
            
            # Update heuristic based on DRL and PSO values
            heuristic[j] = (current_rl_value + current_pso_value) / 2  # Combine RL and PSO values

        # Apply domain-specific heuristic for item i
        heuristic[i] = (total_prize - best_rl_value - best_pso_value) / 2

        # Maintain multi-dimensional feasibility by ensuring total_weight does not exceed the constraint
        heuristic[i] = max(heuristic[i], 0) if total_weight <= 1 else 0

    # Sparsify the heuristics by setting unpromising elements to zero
    sparsity_threshold = np.mean(heuristic)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
