```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores
    feasible_items = np.all(weight <= 1, axis=1)
    pso_global_best_scores[~feasible_items] = float('-inf')

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            # Update velocity and position
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            # Update personal best
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]

            # Update global best
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics with dynamic thresholds
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Integrate constraint-aware filtering by ignoring non-feasible items
    feasible_items = np.all(weight <= 1, axis=1)
    heuristic[~feasible_items] = 0

    # Enhance exploration by using a random perturbation
    pso_velocity *= (0.1 + 0.9 * np.random.rand(n))
    pso_position += pso_velocity
    pso_position = np.clip(pso_position, 0, 1)
    pso_personal_best, pso_personal_best_scores = get_best_indices(pso_position, pso_personal_best_scores)
    pso_global_best, pso_global_best_scores = get_best_indices(pso_position, pso_global_best_scores)

    # Update global best with new PSO scores
    global_best_index = np.argmax(pso_global_best_scores)
    model_scores[~feasible_items] = float('-inf')
    model_scores[global_best_index] = pso_global_best_scores[global_best_index]
    model_rewards.append(reward_function(model_scores))

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined RL scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Further refine heuristics based on diversity and adaptability
    diversity_score = np.std(model_scores)
    heuristic *= (1 + diversity_score / np.max(model_scores))

    # Maintain feasibility by ignoring infeasible items
    feasible_items = np.all(weight <= 1, axis=1)
    heuristic[~feasible_items] = 0

    # Prioritize items with higher heuristics
    heuristic /= np.sum(heuristic)
    heuristic = heuristic * prize

    return heuristic

def get_best_indices(positions, scores):
    """Helper function to get the best index based on the scores."""
    return np.argpartition(scores, -1)[-1:], scores[np.argpartition(scores, -1)[-1]]
```
