```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (further simplified)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    feasibility_matrix = np.sum(weight, axis=1) <= 1
    feasible_items = feasibility_matrix.astype(bool)

    # Particle swarm optimization for evolutionary swarm intelligence
    # Simulate a PSO algorithm by using a simple selection process
    swarm_size = 10
    swarm = np.random.rand(swarm_size, n)
    for _ in range(100):  # number of iterations
        for i in range(n):
            swarm[:, i] = (model_scores > swarm[:, i]).astype(float)
        swarm = swarm / np.sum(swarm, axis=0)  # Normalize
    global_best_index = np.argmax(np.sum(swarm, axis=1))

    # Update heuristics based on model scores, feasibility, and PSO
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify the heuristics by setting unpromising elements to zero
    threshold = np.percentile(heuristic[feasible_items], 25)
    heuristic[heuristic < threshold] = 0

    return heuristic
```
