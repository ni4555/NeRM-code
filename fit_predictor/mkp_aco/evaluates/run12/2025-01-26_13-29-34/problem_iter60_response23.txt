```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive learning rates
    pso_learning_rate = 0.1
    pso_inertia_weight = 0.5

    # Run PSO with adaptive learning rate
    for _ in range(50):  # Number of PSO iterations
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                r1, r2 = np.random.rand(), np.random.rand()
                cognitive_velocity = pso_inertia_weight * pso_velocity[i] + \
                                     (1 - pso_inertia_weight) * (pso_personal_best[i] - pso_position[i]) * r1 + \
                                     (pso_global_best[i] - pso_position[i]) * r2
                pso_velocity[i] = cognitive_velocity
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[np.argmax(pso_global_best_scores)] = pso_global_best_scores.max()

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Combine PSO and DRL scores
    combined_scores = np.exp(np.mean(model_rewards)) * prize
    feasible_items = np.sum(weight, axis=1) <= 1

    # Refine reward functions based on combined scores and feasibility
    refined_model_scores = np.exp(np.mean(model_rewards) - np.max(model_rewards))
    refined_model_scores /= np.sum(refined_model_scores)

    # Update heuristics based on refined model scores
    for i in range(n):
        heuristic[i] = refined_model_scores[i] * prize[i] if feasible_items[i] else 0

    # Sparsity adjustment
    sparsity_threshold = np.percentile(heuristic[feasible_items], 10)
    heuristic[feasible_items] = np.where(heuristic[feasible_items] > sparsity_threshold, heuristic[feasible_items], 0)

    # Mutation and diversity
    mutation_rate = 0.02
    diversity_factor = np.random.rand(n)
    diversity_factor[~feasible_items] = 1 / (1 + np.exp(-heuristic[~feasible_items]))
    diversity_factor /= np.sum(diversity_factor)

    # Apply diversity factor and mutation
    heuristic *= diversity_factor
    heuristic[~feasible_items] *= diversity_factor[~feasible_items]
    for i in range(n):
        if np.random.rand() < mutation_rate:
            heuristic[i] = np.random.rand() if feasible_items[i] else 0

    return heuristic
```
