```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with fixed learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure initial global best is feasible
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Learning rate schedule for DRL and PSO
    learning_rate_schedule = np.linspace(0.1, 0.01, 100)
    iteration = 0

    # PSO parameter setup
    inertia_weight = 0.5
    cognitive_coefficient = 1.5
    social_coefficient = 1.5

    while iteration < 100:  # Using a fixed number of iterations for simplicity
        # Update PSO velocities and positions
        r1, r2 = np.random.randn(n), np.random.randn(n)
        for i in range(n):
            cognitive_component = cognitive_coefficient * r1[i]
            social_component = social_coefficient * r2[i] * (pso_personal_best[i] - pso_position[i])
            pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_component + social_component
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

        # Update personal best
        pso_personal_best_scores = np.maximum(pso_personal_best_scores, model_scores)
        pso_personal_best = np.copy(pso_position)

        # Update global best
        pso_global_best_scores = np.maximum(pso_global_best_scores, pso_personal_best_scores)
        pso_global_best = np.copy(pso_position)

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update DRL and PSO scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

        # Update learning rates for DRL and PSO
        current_learning_rate = learning_rate_schedule[iteration // 10]

        # Update heuristics based on the weighted average of DRL and PSO scores
        heuristic = (current_learning_rate * prize / (prize[global_best_index] + 1e-6) +
                     (1 - current_learning_rate) * np.exp(-np.log1p(model_scores) + np.log1p(model_scores[global_best_index])))

        # Sparsify heuristics based on a percentile of the PSO scores
        sparsity_threshold = np.percentile(heuristic, 75)
        heuristic[heuristic < sparsity_threshold] = 0

        # Update the model rewards to maintain sparsity
        refined_model_scores = np.exp(-np.log1p(model_scores) + np.log1p(model_scores[global_best_index]))
        refined_model_scores /= np.sum(refined_model_scores)

        # Update the heuristic with refined model scores
        heuristic *= refined_model_scores * prize / (prize[global_best_index] + 1e-6)

        # Ignore non-feasible items in the final heuristic
        heuristic[~feasible_items] = 0

        iteration += 1

    return heuristic
```
