```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Simulate deep reinforcement learning model scores
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Simulate particle swarm optimization (PSO) finding the global best index
    global_best_index = np.argmax(model_scores)

    # Calculate total weight for each item
    total_weight = np.sum(weight, axis=1)

    # Apply adaptive constraint-driven filtering
    for i in range(n):
        if total_weight[i] > 1:
            feasible_items[i] = False

    # Update heuristics based on model scores, prize values, and global best
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    return heuristic
```
