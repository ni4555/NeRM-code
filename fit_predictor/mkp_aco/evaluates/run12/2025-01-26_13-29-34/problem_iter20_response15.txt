```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate and global best
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize feasibility and complexity metric
    feasible_items = np.ones(n, dtype=bool)
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items[constraint_violation] = False
    complexity = np.sum(weight ** 2)

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Run PSO and DRL iteratively with adaptive adjustments
    for _ in range(10):  # Using a small number of iterations for demonstration
        # Update PSO personal best and global best
        for i in range(n):
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
                
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update DRL scores with PSO global best
        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

        # Update feasible items and complexity metric based on PSO results
        feasible_items = np.sum(weight * pso_global_best, axis=1) <= 1
        constraint_violation = np.sum(weight, axis=1) > 1
        feasible_items[constraint_violation] = False
        complexity = np.sum(weight ** 2)

        # Adjust learning rate and sparsity threshold based on complexity
        learning_rate *= 1 - (0.01 * complexity)
        sparsity_threshold = np.percentile(model_scores, 50 + complexity // 100)

    # Update heuristics based on a weighted combination of DRL and PSO scores
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards[-10:])  # Consider the last 10 iterations
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics based on a dynamic threshold
    dynamic_threshold = np.percentile(heuristic, 50 + complexity // 100)
    heuristic[heuristic < dynamic_threshold] = 0

    # Enhance exploration-exploitation balance with dynamic rates
    exploration_rate = 0.1 + 0.9 * np.random.rand()
    exploitation_rate = 0.9 - 0.1 * np.random.rand()
    heuristic = (exploration_rate * np.random.rand(n)) + (exploitation_rate * heuristic)

    # Apply feedback and balancing factors
    feedback_factor = 0.5
    balancing_factor = 0.5
    heuristic = feedback_factor * heuristic + (1 - feedback_factor) * model_scores

    return heuristic
```
