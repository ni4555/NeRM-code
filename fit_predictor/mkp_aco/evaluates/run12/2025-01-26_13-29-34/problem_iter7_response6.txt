```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component
    # Simulate with a pre-trained model
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    # Start with all items feasible
    feasible_items = np.ones(n, dtype=bool)

    # Particle swarm optimization
    # Simplified PSO: use a fitness function that considers both prize and weight constraints
    def fitness_function(index):
        item_prize = prize[index]
        item_weight = np.sum(weight[index])
        # Fitness is a balance between the prize and the constraint violation
        return (item_prize / (np.sum(prize) + 1e-6)) - (item_weight - m) * (m - 1e-6)

    global_best_index = np.argmax(model_scores)
    global_best_fitness = fitness_function(global_best_index)

    # Update heuristics based on model scores, feasibility, and PSO fitness
    for i in range(n):
        # Check feasibility
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Check if the current item has better fitness than the global best
            current_fitness = fitness_function(i)
            if current_fitness > global_best_fitness:
                global_best_fitness = current_fitness
                global_best_index = i

            # Update heuristic value
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify the heuristics by setting unpromising elements to zero
    sparsity_threshold = np.percentile(heuristic, 10)  # 10th percentile as a sparsity threshold
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
