```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) component with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) component with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure the PSO global best is feasible at initialization
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive learning rate for PSO
    learning_rate = 0.01

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update rewards for RL based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Refine heuristics considering DRL and PSO scores
    for i in range(n):
        avg_reward = np.mean(model_rewards)
        feasibility_score = 1.0 if i in feasible_items else 0.0
        heuristic[i] = feasibility_score * avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics based on a dynamic threshold
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < sparsity_threshold] = 0

    # Enhance the heuristic with exploration factor based on variance in PSO scores
    variance_exploration = np.var(pso_global_best_scores[feasible_items])
    heuristic *= (1 + 0.1 * variance_exploration / np.max(pso_global_best_scores))

    # Incorporate diversity by considering the spread of PSO scores
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    heuristic *= diversity_factor

    # Final adjustments to maintain balance between exploration and exploitation
    heuristic = heuristic / np.sum(heuristic)
    heuristic *= (1 - 0.1 * np.random.rand(n))  # Random perturbation to promote diversity

    return heuristic
```
