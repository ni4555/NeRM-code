```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize DRL scores with uniform distribution
    model_scores = np.random.rand(n)

    # Initialize PSO parameters
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)

    # Initialize PSO global best with DRL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best[~feasible_items] = float('-inf')

    # Initialize exploration-exploitation balance
    exploration_exploitation_balance = 0.9

    # Run PSO for a fixed number of iterations
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position with exploration-exploitation balance
                pso_velocity[i] = exploration_exploitation_balance * pso_velocity[i] + \
                                  (1 - exploration_exploitation_balance) * (np.random.rand() - 0.5)
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best[i]:
                    pso_personal_best[i] = model_scores[i]

                # Update global best
                if pso_personal_best[i] > pso_global_best[i]:
                    pso_global_best[i] = pso_personal_best[i]

        # Update exploration-exploitation balance
        exploration_exploitation_balance *= 0.99  # Decrease exploration over time

    # Update DRL scores based on the best PSO score
    model_scores[~feasible_items] = float('-inf')
    model_scores[global_best_index] = pso_global_best

    # Update heuristics based on the weighted average of DRL and PSO scores
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics by setting non-promising elements to zero
    non_promising_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < non_promising_threshold] = 0

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
