```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    constraints = np.sum(weight, axis=1) <= 1
    feasible_items = constraints.astype(bool)

    # Particle swarm optimization for evolutionary swarm intelligence
    global_best_index = np.argmax(model_scores)
    velocities = np.random.rand(n)
    positions = np.random.rand(n)

    # Simulate PSO evolution for demonstration purposes
    for _ in range(100):  # Number of iterations can be tuned
        new_positions = positions + velocities
        new_positions[~feasible_items] = positions[~feasible_items]  # Maintain feasibility
        velocities = 0.8 * velocities + 0.2 * (new_positions - positions)  # Update velocities
        positions = np.clip(new_positions, 0, 1)  # Clamp positions between 0 and 1
        global_best_index = np.argmax(model_scores)

    # Update heuristics based on model scores, PSO positions, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Combine RL and PSO scores with a domain heuristic (weight sparsity)
            heuristic[i] = model_scores[i] * positions[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics by setting less promising items to zero
    sparsity_threshold = np.percentile(heuristic[feasible_items], 10)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
