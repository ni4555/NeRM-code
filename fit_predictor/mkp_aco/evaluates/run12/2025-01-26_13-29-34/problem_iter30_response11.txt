```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) setup
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) setup
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize feasible items
    feasible_items = np.sum(weight, axis=1) <= 1

    # PSO loop with adaptive learning rate
    for _ in range(10):  # Small number of iterations for demonstration
        for i in range(n):
            # Update velocity and position
            pso_velocity[i] = 0.01 * np.random.randn() + 0.5 * (np.random.rand() - 0.5)
            pso_position[i] = np.clip(pso_position[i] + pso_velocity[i], 0, 1)

            # Update personal best
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]

            # Update global best
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update DRL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for DRL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of DRL and PSO scores
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics based on the diversity of model_scores
    diversity_threshold = np.percentile(model_scores, 25)
    heuristic[model_scores < diversity_threshold] = 0

    # Refine heuristics to prioritize feasible and rewarding items
    feasible_heuristics = heuristic[feasible_items]
    avg_feasible_heuristic = np.mean(feasible_heuristics)
    heuristic[feasible_items] = (avg_feasible_heuristic + prize[feasible_items]) / 2
    heuristic[~feasible_items] = 0

    # Refine rewards by incorporating heuristic scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined DRL scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    return heuristic
```
