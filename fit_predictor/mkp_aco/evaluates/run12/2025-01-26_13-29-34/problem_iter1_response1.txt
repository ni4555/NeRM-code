```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    heuristic = np.zeros((prize.shape[0],))
    
    # Deep reinforcement learning for real-time decision-making
    for i in range(prize.shape[0]):
        # Simulate reinforcement learning reward
        reward = prize[i] / np.sum(weight[i])
        
        # Adaptive constraint-driven filtering
        if np.sum(weight[i]) <= 1:
            # Particle swarm optimization for evolutionary swarm intelligence
            for j in range(prize.shape[0]):
                if i != j and np.sum(weight[j]) <= 1:
                    # Calculate distance in a multi-dimensional space
                    distance = np.linalg.norm(weight[i] - weight[j])
                    # Update heuristic based on reward and distance
                    heuristic[i] += reward / (1 + distance)
        
        # Sparsify heuristics by setting unpromising elements to zero
        if heuristic[i] < 0.01:
            heuristic[i] = 0
    
    return heuristic
```
