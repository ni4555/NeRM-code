```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component with a more realistic setup
    # Assume model_scores are obtained from a trained model, for demonstration we'll use random values
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    constraints = np.sum(weight, axis=1) <= 1
    feasible_items = constraints.astype(bool)

    # Initialize particle swarm optimization with velocity and position initialization
    velocities = np.random.rand(n) * 2 - 1  # Velocity range [-1, 1]
    positions = np.random.rand(n)  # Position range [0, 1]
    best_scores = np.copy(model_scores)
    global_best_score = np.max(model_scores)

    # Simulate PSO evolution for a more reasonable number of iterations
    for _ in range(50):  # Increased number of iterations for better convergence
        new_positions = positions + velocities
        new_positions[~feasible_items] = positions[~feasible_items]  # Maintain feasibility
        velocities = 0.8 * velocities + 0.2 * np.random.randn(n)  # Update velocities with some noise
        positions = np.clip(new_positions, 0, 1)  # Clamp positions between 0 and 1
        new_scores = np.copy(model_scores)

        # Evaluate the fitness of new positions
        for i in range(n):
            new_scores[i] = model_scores[i] * positions[i] * (prize[i] / (prize[np.argmax(model_scores)] + 1e-6))

        # Update personal bests and global best
        new_best_scores = np.maximum(new_scores, best_scores)
        best_scores = new_best_scores
        new_global_best_score = np.max(best_scores)
        if new_global_best_score > global_best_score:
            global_best_score = new_global_best_score
            global_best_index = np.argmax(new_best_scores)

    # Update heuristics based on model scores, PSO positions, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Incorporate PSO position to balance RL scores with the evolutionary component
            heuristic[i] = model_scores[i] * positions[i]

    # Refine sparsity by using the global best score for thresholding
    heuristic[heuristic < 0.01 * global_best_score] = 0

    # Enforce early constraints to prevent infeasible solutions
    for i in range(n):
        cumulative_weight = np.sum(weight[:i+1], axis=1)
        if np.any(cumulative_weight > 1):
            heuristic[i] = 0

    return heuristic
```
