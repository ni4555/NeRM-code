```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Simulate deep reinforcement learning model scores
    model_scores = np.random.rand(n)

    # Simulate adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Simulate particle swarm optimization - find global best
    global_best_index = np.argmax(model_scores)
    global_best_score = model_scores[global_best_index]

    # Calculate heuristics based on model scores, feasibility, and global best
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics using a threshold
    threshold = 0.5
    heuristic[heuristic < threshold] = 0

    return heuristic
```
