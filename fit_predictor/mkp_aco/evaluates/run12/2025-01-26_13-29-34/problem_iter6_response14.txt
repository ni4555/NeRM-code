```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (further simplified)
    # Using a pre-trained model that returns a score for each item
    # Here we simulate this with a random number generator for demonstration
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Update heuristics based on model scores and feasibility
    for i in range(n):
        # Check if the item is feasible with respect to the given constraint
        feasible = True
        for j in range(n):
            combined_weight = weight[i].sum() + weight[j].sum()
            if combined_weight > 1:
                feasible = False
                break
        feasible_items[i] = feasible

    # Update heuristics with the model score if feasible, otherwise set to zero
    heuristic[feasible_items] = model_scores[feasible_items] * (prize[feasible_items] / (np.max(prize[feasible_items]) + 1e-6))

    return heuristic
```
