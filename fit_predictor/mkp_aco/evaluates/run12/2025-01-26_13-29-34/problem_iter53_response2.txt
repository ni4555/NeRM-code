```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) model
    model = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))

    # Particle Swarm Optimization (PSO) parameters
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)

    # Initialize global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive learning and sparsity parameters
    sparsity_threshold = 0.5
    learning_rate = 0.01

    # PSO iterations
    for _ in range(10):
        for i in range(n):
            # Update velocity and position
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            # Update personal best
            if reward_function(pso_position[i]) > reward_function(pso_personal_best):
                pso_personal_best = np.copy(pso_position[i])

            # Update global best
            if reward_function(pso_position[i]) > reward_function(pso_global_best):
                pso_global_best = np.copy(pso_position[i])

        # Update model scores based on PSO global best
        model = pso_global_best
        feasible_model = np.where(np.sum(weight * model, axis=1) <= 1)[0]
        model[~feasible_model] = 0

        # Refine reward function
        new_reward = reward_function(model) - np.mean(model)

        # Update heuristics
        heuristic = new_reward * prize / (prize[np.argmax(np.sum(model * prize, axis=1))] + 1e-6)

    # Sparsify heuristics
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
