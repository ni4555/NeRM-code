```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (simplified)
    # Assuming a pre-trained model that returns a score for each item
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Check for feasibility based on weight constraints
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items[constraint_violation] = False

    # Particle swarm optimization for evolutionary swarm intelligence
    # Here we use a simple PSO approach where the global best is the item with the highest model score
    global_best_index = np.argmax(model_scores)

    # Update heuristics based on model scores, prize value, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = (model_scores[i] * prize[i]) / (prize[global_best_index] + 1e-6)

    return heuristic
```
