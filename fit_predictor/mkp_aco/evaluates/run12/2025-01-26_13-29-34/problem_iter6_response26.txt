```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (using a more realistic approach)
    # Assuming a pre-trained model that returns a score for each item
    # Here we simulate this with a random number generator for demonstration
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Particle swarm optimization for evolutionary swarm intelligence
    # We will use a simplified version of PSO for demonstration
    # Here we assume that the global best is the item with the highest model score
    global_best_index = np.argmax(model_scores)

    # Update heuristics based on model scores and feasibility
    for i in range(n):
        if np.sum(weight[i]) > 1:  # Check if the item is over the weight constraint
            feasible_items[i] = False
        else:
            # Calculate heuristic based on model score, prize value, and global best
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify the heuristics by setting unpromising elements to zero
    heuristic[heuristic < 0.5] = 0

    return heuristic
```
