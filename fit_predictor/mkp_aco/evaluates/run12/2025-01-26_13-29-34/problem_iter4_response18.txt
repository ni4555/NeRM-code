```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros(n)

    # Deep reinforcement learning component (simplified)
    # Assuming a pre-trained model that scores items based on their potential
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    feasible_items = []
    for i in range(n):
        total_weight = np.sum(weight[i])
        feasible = True
        for j in feasible_items:
            if np.sum(weight[j]) + np.sum(weight[i]) > 1:
                feasible = False
                break
        if feasible:
            feasible_items.append(i)

    # Filter out infeasible items
    for i in feasible_items:
        heuristic[i] = model_scores[i]

    # Particle swarm optimization for evolutionary swarm intelligence
    # We will use a simplified version that adjusts heuristics based on swarm intelligence
    local_best = np.max(heuristic)
    global_best = np.max(prize)

    # Update heuristics based on swarm intelligence
    for i in range(n):
        heuristic[i] *= (model_scores[i] / local_best) * (global_best - prize[i]) / (global_best + 1e-6)

    # Sparsify the heuristics by setting unpromising elements to zero
    heuristic[heuristic < 0.5] = 0

    return heuristic
```
