```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (further simplified)
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Particle swarm optimization for evolutionary swarm intelligence
    # Simulate PSO by initializing particles (solutions) and updating them
    particles = np.random.rand(n, n)
    velocities = np.random.rand(n, n)
    global_best_index = np.argmax(model_scores)
    global_best = particles[global_best_index]

    # PSO parameters
    w = 0.5  # Inertia weight
    c1 = 1   # Cognitive coefficient
    c2 = 2   # Social coefficient

    for _ in range(100):  # Number of iterations
        for i in range(n):
            velocities[i] = (w * velocities[i] +
                             c1 * np.random.rand() * (global_best[i] - particles[i]) +
                             c2 * np.random.rand() * (global_best[global_best_index] - particles[i]))
            particles[i] += velocities[i]
            # Update global best
            if np.sum(weight[particles[i] == global_best_index]) <= 1:
                global_best = particles[i]
                global_best_index = np.argmax(model_scores[particles[i]])

    # Update heuristics based on model scores, feasibility, and PSO
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify the heuristics by setting unpromising elements to zero
    heuristic[heuristic < np.percentile(heuristic, 5)] = 0

    return heuristic
```
