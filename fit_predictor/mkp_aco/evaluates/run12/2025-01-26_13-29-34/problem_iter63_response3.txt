```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) component
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) component
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Feasibility constraint check
    feasible_items = np.sum(weight, axis=1) <= 1

    # PSO initialization with feasible items
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive sparsity threshold and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # PSO loop
    for _ in range(10):  # Small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index and rewards
        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Update heuristics with PSO scores, considering feasibility
    for i in range(n):
        if i in feasible_items:
            heuristic[i] = model_rewards[-1][i]

    # Sparsify heuristics based on PSO feasibility
    heuristic[~feasible_items] = 0

    # Integrate DRL adaptive rewards into PSO heuristic
    for i in range(n):
        if i in feasible_items:
            adaptive_reward = reward_function(model_scores) - np.log(model_scores[i])
            heuristic[i] *= adaptive_reward

    # Balancing exploration-exploitation and dynamic control of diversity
    exploration_rate = np.random.rand(n)
    heuristic *= exploration_rate

    return heuristic
```
