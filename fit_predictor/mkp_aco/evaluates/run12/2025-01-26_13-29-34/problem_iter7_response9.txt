```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Simulate deep reinforcement learning model scores
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    feasibility = np.zeros((n, m))
    for i in range(n):
        feasibility[i, :] = 1 - np.sum(weight[i, :] * (np.random.rand(m) > 1))

    # Check feasibility for each item
    feasible_items = np.all(feasibility, axis=1)

    # Simulate particle swarm optimization
    global_best_index = np.argmax(model_scores)
    local_best_scores = model_scores
    for iteration in range(10):  # Example number of iterations
        for i in range(n):
            if feasible_items[i]:
                # Simple PSO update rule: improve if better
                if model_scores[i] < local_best_scores[i]:
                    local_best_scores[i] = model_scores[i]

    # Update heuristics based on model scores, feasibility, and PSO
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6)) * \
                           (1 if i in local_best_scores.argsort()[::-1][:n//10] else 0)

    # Sparsify heuristics by setting unpromising elements to zero
    threshold = np.mean(heuristic[feasible_items])
    heuristic = np.where(heuristic > threshold, heuristic, 0)

    return heuristic
```
