```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    heuristic = np.zeros((prize.shape[0],))
    
    # Pre-compute cumulative prize and weight to avoid inner loops
    cumulative_prize = np.cumsum(prize)
    cumulative_weight = np.cumsum(weight, axis=1)
    
    for i in range(prize.shape[0]):
        # Check feasibility
        feasible = True
        total_weight = cumulative_weight[i]
        for j in range(i + 1, prize.shape[0]):
            if total_weight + cumulative_weight[j] > 1:
                feasible = False
                break
            total_weight += cumulative_weight[j]
        
        if not feasible:
            heuristic[i] = 0
            continue
        
        # Calculate heuristic based on the pre-computed cumulative values
        heuristic[i] = cumulative_prize[-1] if total_weight == 1 else cumulative_prize[-1] - cumulative_prize[i]
    
    return heuristic
```
