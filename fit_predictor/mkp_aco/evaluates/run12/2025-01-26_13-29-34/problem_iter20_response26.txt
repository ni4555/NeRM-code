```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) component with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initial constraint-violation filtering to maintain multi-dimensional feasibility
    feasible_items = np.where(np.sum(weight, axis=1) <= 1)[0]
    non_feasible_items = np.setdiff1d(range(n), feasible_items)

    # Initialize Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores[feasible_items])
    pso_global_best_scores = np.copy(pso_personal_best_scores)

    # Define adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores[feasible_items], 50)
    learning_rate = 0.01

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:
                # Update the velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)
                
                # Update personal best and its score
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]
                    
                # Update global best and its score if the personal best is better
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index after PSO update
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[non_feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in feasible_items:
        avg_reward = np.mean(model_rewards)
        heuristic[i] = (avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))) + \
                       (pso_global_best[i] * (1 - avg_reward))

    # Sparsify heuristics with dynamic thresholds
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Enhance exploration-exploitation balance with dynamic rates
    exploration_rate = 0.1 + 0.9 * np.random.rand()
    exploitation_rate = 0.9 - 0.1 * np.random.rand()
    heuristic = (exploration_rate * np.random.rand(n)) + (exploitation_rate * heuristic)

    # Adapt RL reward function based on the most promising heuristic scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the new RL scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Integrate constraint-aware filtering by ignoring non-feasible items
    heuristic[non_feasible_items] = 0

    # Feedback loop to adjust learning rate and sparsity threshold based on the problem's complexity
    complexity = np.sum(weight ** 2)
    learning_rate *= 1 - (0.01 * complexity)
    sparsity_threshold = np.percentile(model_scores, 50 + complexity // 100)

    # Mutation: Introduce a balancing factor for DRL and PSO
    balancing_factor = 0.5
    heuristic = balancing_factor * heuristic + (1 - balancing_factor) * model_scores

    # Mutation: Apply a dynamic sparsity based on the standard deviation of the heuristics
    std_dev = np.std(heuristic)
    heuristic[heuristic < std_dev] = 0

    return heuristic
```
