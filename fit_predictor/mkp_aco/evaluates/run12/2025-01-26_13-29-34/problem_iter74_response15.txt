```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    c1, c2 = 2, 2  # Cognitive and social coefficients for PSO
    iteration = 0
    max_iterations = 100

    while iteration < max_iterations:
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity
                r1, r2 = np.random.rand(), np.random.rand()
                pso_velocity[i] = (c1 * r1 * (pso_personal_best[i] - pso_position[i]) +
                                   c2 * r2 * (pso_global_best[i] - pso_position[i]))

                # Update position
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Adaptive learning rate and sparsity threshold
        sparsity_threshold = np.percentile(model_scores, 50)
        learning_rate = 0.01 * np.exp(-0.01 * iteration / max_iterations)

        # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
        recent_rewards = np.mean(model_rewards[-max_iterations//10:])  # Use recent rewards
        for i in range(n):
            if not feasible_items[i]:
                heuristic[i] = 0
            else:
                heuristic[i] = recent_rewards * (prize[i] / (prize[global_best_index] + 1e-6))

        # Refine rewards by incorporating diversity and PSO variance
        diversity_factor = np.mean(pso_global_best_scores) / np.var(pso_global_best_scores)
        refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic) * diversity_factor
        new_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
        new_model_scores /= np.sum(new_model_scores)

        # Update heuristics based on the refined RL scores
        heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

        # Sparsify heuristics with dynamic thresholds
        heuristic[heuristic < sparsity_threshold] = 0

        # Ignore non-feasible items in the final heuristic
        heuristic[~feasible_items] = 0

        iteration += 1

    return heuristic
```
