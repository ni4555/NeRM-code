```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    constraints = np.sum(weight, axis=1) <= 1
    feasible_items = constraints.astype(bool)

    # Particle swarm optimization for evolutionary swarm intelligence
    global_best_index = np.argmax(model_scores)
    velocities = np.random.rand(n)
    positions = np.random.rand(n)
    local_bests = np.copy(model_scores)

    # Simulate PSO evolution
    for _ in range(100):  # Number of iterations can be tuned
        new_positions = positions + velocities
        new_positions[~feasible_items] = positions[~feasible_items]  # Maintain feasibility
        velocities = 0.5 * velocities + 0.5 * np.random.rand(n)  # Update velocities with some noise
        velocities = np.clip(velocities, -1, 1)  # Limit velocities to avoid explosion
        positions = np.clip(new_positions, 0, 1)  # Clamp positions between 0 and 1
        for i in range(n):
            if positions[i] > 0.95:  # Prevent particles from staying at the boundary for too long
                positions[i] = 0.9 + np.random.rand() * 0.1
            elif positions[i] < 0.05:
                positions[i] = 0.1 + np.random.rand() * 0.1
            if model_scores[i] > local_bests[i]:
                local_bests[i] = model_scores[i]
        global_best_index = np.argmax(local_bests)

    # Update heuristics based on model scores, PSO positions, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Balance between RL and PSO by combining scores with PSO position
            heuristic[i] = model_scores[i] * positions[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Dynamically adjust thresholds
    if feasible_items.sum() > 0:
        mean_heuristic = np.mean(heuristic[feasible_items])
        std_heuristic = np.std(heuristic[feasible_items])
        sparsity_threshold = mean_heuristic - 2 * std_heuristic
        heuristic[heuristic < sparsity_threshold] = 0

    # Incorporate weight constraint by penalizing items
    cumulative_weight = np.cumsum(np.maximum(0, heuristic) * np.sum(weight, axis=1))
    while cumulative_weight[-1] > 1:
        max_index = np.argmax(cumulative_weight)
        if heuristic[max_index] > 0:
            heuristic[max_index] = 0
            cumulative_weight = np.cumsum(np.maximum(0, heuristic) * np.sum(weight, axis=1))

    return heuristic
```
