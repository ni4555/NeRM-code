```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) model with adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) for evolutionary swarm intelligence
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure PSO global best with RL scores and feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive learning rate and sparsity threshold
    learning_rate = 0.01
    sparsity_threshold = np.percentile(model_scores, 50)

    # Dynamic learning and reward adjustments
    for _ in range(10):  # Iterations can be adjusted for different problem scales
        for i in range(n):
            if i in feasible_items:
                # Update PSO position and velocity
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best and global best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update model scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[np.argmax(pso_global_best_scores)] = pso_global_best_scores[np.argmax(pso_global_best_scores)]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Refine heuristics with adaptive factors
    avg_reward = np.mean(model_rewards)
    feasible_prize_sum = np.sum(prize[feasible_items])
    global_best_prize = prize[np.argmax(pso_global_best_scores)]
    global_best_index = np.argmax(pso_global_best_scores)

    for i in range(n):
        if i in feasible_items:
            # Incorporate diversity and feasibility into the heuristic
            diversity_factor = np.exp(-np.sum((pso_position[feasible_items] - pso_global_best[global_best_index])**2) / (np.var(pso_position[feasible_items]) + 1e-6))
            heuristic[i] = avg_reward * (prize[i] / (global_best_prize + 1e-6)) * diversity_factor
        else:
            heuristic[i] = 0

    # Sparsify heuristics to maintain computational efficiency
    heuristic[heuristic < sparsity_threshold] = 0

    # Refine heuristics based on early feasibility and adapt learning dynamically
    heuristic[~feasible_items] = 0

    return heuristic
```
