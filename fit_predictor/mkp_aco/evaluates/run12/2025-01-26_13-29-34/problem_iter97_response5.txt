```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) for adaptive real-time decision-making
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Adaptive constraint-driven filtering for maintaining multi-dimensional feasibility
    feasible_items = np.sum(weight, axis=1) <= 1

    # Particle Swarm Optimization (PSO) for evolutionary swarm intelligence
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # PSO global best with RL scores and feasibility check
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive learning rate and sparsity
    learning_rate = 0.01
    sparsity_threshold = np.percentile(model_scores, 50)

    # Run PSO
    for _ in range(10):  # Small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal and global best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update DRL scores based on PSO global best
        model_scores[~feasible_items] = float('-inf')
        model_scores[np.argmax(pso_global_best_scores)] = pso_global_best_scores[np.argmax(pso_global_best_scores)]

        # Update rewards for DRL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics considering feasibility, diversity, and complexity
    for i in range(n):
        if i not in feasible_items:
            heuristic[i] = 0
        else:
            # Incorporate diversity
            diversity_factor = np.var(pso_personal_best_scores[feasible_items]) / np.mean(pso_personal_best_scores[feasible_items])
            # Incorporate complexity by considering the sparsity of the model scores
            complexity_factor = np.sum(1 / (model_scores[feasible_items] + 1e-6))
            # Update heuristic with a weighted sum of diversity and complexity factors
            heuristic[i] = diversity_factor + complexity_factor

    # Sparsify heuristics by setting unpromising elements to zero
    heuristic[heuristic < sparsity_threshold] = 0

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined RL scores
    heuristic = new_model_scores * prize / (prize[np.argmax(new_model_scores)] + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
