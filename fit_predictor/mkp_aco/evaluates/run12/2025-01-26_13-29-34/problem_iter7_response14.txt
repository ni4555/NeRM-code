```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Simulate deep reinforcement learning scores
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Simulate Particle Swarm Optimization
    # Assume the global best is the item with the highest reinforcement learning score
    global_best_index = np.argmax(model_scores)
    global_best = prize[global_best_index]

    # Integrate sparsification and domain insights
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Balancing between RL score, prize value, and weight constraint
            heuristic[i] = model_scores[i] * (prize[i] / global_best)
            # Apply a sparsification threshold
            if heuristic[i] < 0.01:
                feasible_items[i] = False

    # Adaptive adjustment based on current total weight and total prize
    current_weight = weight[feasible_items].sum(axis=1)
    total_prize = prize[feasible_items].sum(axis=1)
    total_heuristics = heuristic[feasible_items].sum()

    # Adjust heuristic values based on current performance
    if total_prize < global_best:
        for i in range(n):
            if feasible_items[i]:
                heuristic[i] = (heuristic[i] * total_prize) / (total_heuristics + 1e-6)

    return heuristic
```
