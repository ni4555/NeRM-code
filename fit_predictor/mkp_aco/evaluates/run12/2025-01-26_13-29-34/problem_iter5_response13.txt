```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (using a pre-trained model)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    total_weight = np.sum(weight, axis=1)
    feasible_items = (total_weight <= 1).all(axis=1)

    # Particle swarm optimization for evolutionary swarm intelligence
    # Assuming a global_best based on the model scores
    global_best_index = np.argmax(model_scores)
    global_best_prize = prize[global_best_index]

    # Balancing objectives, sparsifying, and tuning hyperparameters
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Leverage domain knowledge for model simplification
            # For instance, the heuristic could be a combination of the model score
            # and a normalization factor based on the prize to balance objectives
            heuristic[i] = model_scores[i] * (prize[i] / (global_best_prize + 1e-6))

            # Optimizing computation with parallel processing and model insights
            # Here we could use vectorized operations to improve efficiency
            # and avoid unnecessary loops
            # Update heuristics for feasible items
            feasible_heuristics = heuristic[feasible_items]
            if feasible_heuristics.size > 0:
                max_feasible_heuristic = np.max(feasible_heuristics)
                heuristic[feasible_items] = np.clip(heuristic[feasible_items], 0, max_feasible_heuristic)

    # Sparsify the heuristics by setting unpromising elements to zero
    sparsity_threshold = np.percentile(heuristic, 90)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
