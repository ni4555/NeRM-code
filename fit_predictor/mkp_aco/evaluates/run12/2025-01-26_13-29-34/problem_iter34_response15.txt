```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Check initial feasibility and update global best accordingly
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    global_best_index = np.argmax(pso_global_best_scores)

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Initialize diversity metrics
    diversity_metrics = np.zeros((n,))

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            # Update velocity and position
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            # Update personal best and global best
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]

            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index based on feasible items only
        global_best_index = np.argmax(pso_global_best_scores[feasible_items])

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Sparsify heuristics based on dynamic thresholds
    dynamic_threshold = np.percentile(model_rewards, 50)
    heuristic = np.exp(model_rewards - np.max(model_rewards))
    heuristic /= np.sum(heuristic)

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    refined_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
    refined_model_scores /= np.sum(refined_model_scores)

    # Update heuristics based on the refined RL scores, maintaining feasibility
    heuristic[~feasible_items] = 0
    heuristic = refined_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Introduce mutation to enhance diversity
    mutation_amount = 0.01 * np.random.randn(n)
    heuristic += np.random.rand(n) * mutation_amount

    # Ensure that the heuristics are still positive and within the [0, 1] range
    heuristic = np.clip(heuristic, 0, 1)

    # Balance exploration and exploitation
    exploration_rate = 0.1 + 0.9 * np.random.rand()
    exploitation_rate = 0.9 - 0.1 * np.random.rand()
    heuristic = (exploration_rate * np.random.rand(n)) + (exploitation_rate * heuristic)

    # Update diversity metrics and refine rewards iteratively
    for _ in range(5):  # Iterative refinement for demonstration
        diversity_metrics = np.std(refined_model_scores)
        new_refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
        new_refined_model_scores = np.exp(new_refined_reward_function(refined_model_scores) - np.max(new_refined_reward_function(refined_model_scores)))
        new_refined_model_scores /= np.sum(new_refined_model_scores)
        heuristic = new_refined_model_scores * prize / (prize[global_best_index] + 1e-6)

    return heuristic
```
