```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Pre-filter infeasible items
    feasible_items = np.sum(weight, axis=1) <= 1

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with a simple velocity update
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_global_best = np.copy(pso_position)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    pso_global_best_scores[~feasible_items] = float('-inf')

    # Adaptive learning rate and sparsity threshold schedule
    learning_rate_schedule = np.linspace(0.1, 0.05, 10)
    sparsity_threshold_schedule = np.linspace(0.5, 0.1, 10)

    for iteration in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:
                # Simple PSO velocity update
                pso_velocity[i] = pso_velocity[i] * learning_rate_schedule[iteration] + \
                                  np.random.uniform(-0.1, 0.1)
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update PSO personal best and global best
                if model_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = model_scores[i]
                    pso_global_best[i] = pso_position[i]

        # Update rewards for RL
        model_rewards.append(reward_function(pso_global_best_scores))

    # Update heuristics based on the weighted average of RL and PSO scores
    global_best_score = np.mean(model_rewards)
    for i in range(n):
        if i not in feasible_items:
            heuristic[i] = 0
        else:
            heuristic[i] = global_best_score * (prize[i] / (prize[feasible_items].max() + 1e-6))

    # Sparsify heuristics using the last update schedule
    sparsity_threshold = sparsity_threshold_schedule[-1]
    heuristic[heuristic < sparsity_threshold * global_best_score] = 0

    # Refine the reward mechanism and incorporate diversity
    diversity_factor = 1.0
    if len(feasible_items) > 1:
        diversity_factor = np.std(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    refined_heuristic = heuristic * diversity_factor

    return refined_heuristic
```
