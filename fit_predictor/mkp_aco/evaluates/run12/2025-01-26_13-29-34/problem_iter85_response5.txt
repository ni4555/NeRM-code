```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) model
    model_scores = np.random.rand(n)
    def reward_function(x):
        return -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items

    # Particle Swarm Optimization (PSO) variables
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive learning rate
    learning_rate = 0.01

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal and global best
                current_score = reward_function(model_scores[i])
                if current_score > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = current_score
                    pso_personal_best[i] = pso_position[i]
                if current_score > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = current_score
                    pso_global_best[i] = pso_position[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update DRL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

    # Sparsify heuristics by setting scores below a percentile to zero
    sparsity_threshold = np.percentile(model_scores, 5)
    heuristic[~feasible_items] = 0
    heuristic[model_scores < sparsity_threshold] = 0

    # Balance exploration and exploitation by considering the variance of the PSO scores
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    heuristic *= diversity_factor

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    refined_model_scores = np.exp(reward_function(model_scores) + model_scores * heuristic)
    refined_model_scores /= np.sum(refined_model_scores)

    # Update heuristics based on the refined scores, weighted by prize value
    heuristic = refined_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Incorporate recent performance insights by adjusting heuristics based on the last iteration's scores
    recent_performance_score = reward_function(model_scores)
    heuristic *= (1 + recent_performance_score)

    return heuristic
```
