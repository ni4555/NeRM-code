```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) for real-time decision-making
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Adaptive constraint-driven filtering to maintain feasibility
    feasible_items = np.sum(weight, axis=1) <= 1

    # Particle Swarm Optimization (PSO) for evolutionary swarm intelligence
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # PSO initialization ensuring global best is feasible
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Learning curve adaptive schedule for DRL
    adaptive_schedule = lambda iter: 0.1 / (1 + iter/10)

    # Sparsity thresholds adaptive schedule
    sparsity_threshold_schedule = lambda iter: np.percentile(model_scores, 20 + 80*iter/10)

    for iter in range(10):  # Number of iterations
        # Update DRL scores and rewards
        model_scores[~feasible_items] = float('-inf')
        reward = reward_function(model_scores)
        model_rewards.append(reward)

        # Update PSO
        learning_rate = adaptive_schedule(iter)
        for i in range(n):
            if i in feasible_items:  # Consider only feasible items
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Refine DRL model based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Sparsify heuristics with dynamic threshold
        dynamic_threshold = sparsity_threshold_schedule(iter)
        heuristic[~feasible_items] = 0
        heuristic[heuristic < dynamic_threshold] = 0

        # Incorporate PSO and DRL into heuristic scores
        heuristic[feasible_items] = np.exp(model_rewards[-1] - np.max(model_rewards)) * prize[feasible_items]

    # Update heuristics considering diversity
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    heuristic *= diversity_factor

    # Ensure heuristics reflect the feasibility constraint
    heuristic[~feasible_items] = 0

    return heuristic
```
