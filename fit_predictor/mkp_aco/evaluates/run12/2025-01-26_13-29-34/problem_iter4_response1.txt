```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    heuristic = np.zeros((n,))

    # Precompute cumulative weights for efficient processing
    cumulative_weight = np.cumsum(weight, axis=0)
    
    # Use a single pass to calculate heuristics based on linear approximation
    for i in range(n):
        for j in range(i, n):
            total_weight = cumulative_weight[j] - cumulative_weight[i]
            if total_weight <= 1:
                heuristic[i] = np.maximum(heuristic[i], np.sum(prize[i:j+1]))
                break
    
    return heuristic
```
