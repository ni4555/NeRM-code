```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) model
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items

    # Initialize Particle Swarm Optimization (PSO)
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Check feasibility and initialize global best
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Sparsity threshold and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Run PSO for a fixed number of iterations
    for _ in range(10):  # Adjust the number of iterations based on the problem's complexity
        for i in range(n):
            if i in feasible_items:  # Consider only feasible items
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update DRL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update reward for DRL
        reward = reward_function(model_scores)
        model_scores = np.exp(reward - np.max(reward))
        model_scores /= np.sum(model_scores)

        # Update heuristic directly based on the best PSO score
        heuristic = pso_global_best_scores

    # Sparsify heuristics with dynamic thresholds
    dynamic_threshold = np.percentile(heuristic[feasible_items], 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    refined_reward = new_reward_function(model_scores)
    model_scores = np.exp(refined_reward - np.max(refined_reward))
    model_scores /= np.sum(model_scores)

    # Update heuristics based on the refined DRL scores
    heuristic = model_scores * prize / (prize[global_best_index] + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
