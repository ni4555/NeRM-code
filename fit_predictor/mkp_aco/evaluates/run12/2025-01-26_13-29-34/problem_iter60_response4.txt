```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure initial PSO global best is feasible
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    convergence_criteria = 1e-5

    # Run PSO with adaptive learning rate
    for iteration in range(100):  # Using a higher number of iterations for PSO
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                cognitive_velocity = learning_rate * pso_personal_best[i] - pso_position[i]
                social_velocity = learning_rate * pso_global_best[i] - pso_position[i]
                pso_velocity[i] = cognitive_velocity + social_velocity
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Check convergence criteria
        if np.linalg.norm(model_rewards[-1] - model_rewards[-2]) < convergence_criteria:
            break

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    rl_scores = np.exp(np.mean(model_rewards) - np.max(model_rewards))
    rl_scores /= np.sum(rl_scores)
    pso_scores = pso_global_best_scores / (1 + np.sum(pso_global_best_scores))

    # Update reward function based on heuristics
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    model_rewards = [reward_function(model_scores)]
    for _ in range(100):
        for i in range(n):
            if i in feasible_items:
                avg_reward = np.mean(model_rewards)
                heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))
                model_scores[i] = new_reward_function(model_scores)
        rl_scores = np.exp(np.mean(model_scores) - np.max(model_scores))
        rl_scores /= np.sum(rl_scores)
        model_rewards.append(reward_function(model_scores))

    # Refine heuristics with dynamic sparsity thresholds
    for _ in range(5):
        heuristic = rl_scores * prize / (prize[global_best_index] + 1e-6)
        sparsity_threshold = np.percentile(heuristic, 50)
        heuristic[heuristic < sparsity_threshold] = 0

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
