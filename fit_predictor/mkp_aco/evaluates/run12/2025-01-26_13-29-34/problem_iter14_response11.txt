```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) component with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(np.var(x) ** 2)
    model_scores = np.exp(reward_function(model_scores) - np.max(reward_function(model_scores)))
    model_scores /= np.sum(model_scores)

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    feasible_items = np.ones(n, dtype=bool)
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items[constraint_violation] = False

    # Particle Swarm Optimization (PSO) with adaptive velocity and diversity enhancement
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Define adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Define exploration-exploitation parameters
    exploration_rate = np.random.rand(n)
    exploitation_rate = 1 - exploration_rate
    exploration_rate[feasible_items] = 1 - np.log1p(exploration_rate[feasible_items])

    # Run PSO with adaptive learning rate and exploration-exploitation
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            # Update the velocity with adaptive parameters
            r1, r2 = np.random.rand(2)
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              r1 * (pso_personal_best[i] - pso_position[i]) + \
                              r2 * (pso_global_best[i] - pso_position[i])
            # Update the position based on the velocity
            pso_position[i] += pso_velocity[i]
            # Ensure the position does not exceed 1
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            # Update the personal best if the current position is better
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
            # Update the global best if the personal best is better
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index after PSO update
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update heuristics based on the weighted average of RL and PSO scores
        for i in range(n):
            if feasible_items[i]:
                heuristic[i] = (exploration_rate[i] * (model_scores[i] * prize[i] / (prize[global_best_index] + 1e-6))) + \
                               (exploitation_rate[i] * (pso_global_best[i] * (1 - model_scores[i])))

    # Sparsify heuristics by setting less promising elements to zero using a dynamic sparsity threshold
    sparsity_threshold = np.percentile(heuristic[feasible_items], 50)
    heuristic[heuristic < sparsity_threshold] = 0

    # Further enhance feasibility by ensuring the heuristic reflects the weight constraint
    heuristic *= (1 - np.sum(weight, axis=1))

    return heuristic
```
