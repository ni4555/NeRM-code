```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with a dynamic reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize PSO with adaptive inertia and cognitive and social coefficients
    inertia_weight = 0.9
    cognitive_coefficient = 2.5
    social_coefficient = 2.5
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure initial PSO global best is feasible and update scores
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Run PSO with adaptive parameters and ensure feasibility
    for _ in range(10):  # Using a small number of iterations for demonstration
        inertia_weight *= 0.99  # Decrease inertia_weight over time
        cognitive_coefficient += np.random.randn() * 0.05  # Randomly adjust cognitive_coefficient
        social_coefficient += np.random.randn() * 0.05  # Randomly adjust social_coefficient

        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position using PSO equations
                r1, r2 = np.random.rand(2)
                cognitive_velocity = cognitive_coefficient * (pso_personal_best[i] - pso_position[i])
                social_velocity = social_coefficient * (pso_global_best[i] - pso_position[i])
                pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_velocity + social_velocity
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best and feasibility
                if pso_position[i] > 0.5:
                    current_item_score = reward_function(model_scores[i])
                    model_scores[i] += current_item_score
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(model_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = model_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics by setting low scores to zero
    sparsity_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < sparsity_threshold] = 0

    # Refine the reward mechanism to be adaptive based on current PSO scores
    def adaptive_reward_function(scores):
        return np.sum(scores * np.log(1 + scores)) + np.sum(scores * heuristic)
    model_scores = np.exp(adaptive_reward_function(model_scores) - np.max(adaptive_reward_function(model_scores)))
    model_scores /= np.sum(model_scores)

    # Update heuristics based on the refined RL scores
    heuristic = model_scores * prize / (prize[global_best_index] + 1e-6)

    # Incorporate diversity by considering the variance of the PSO scores
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    heuristic *= diversity_factor

    # Update heuristics for non-feasible items
    heuristic[~feasible_items] = 0

    # Adapt influence based on heuristic improvement
    improvement_factor = np.exp(-np.sum(heuristic**2))
    heuristic *= improvement_factor

    return heuristic
```
