```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    heuristic = np.zeros((prize.shape[0],))
    
    # Pre-compute cumulative prize and weight to avoid redundant calculations
    cumulative_prize = np.cumsum(prize)
    cumulative_weight = np.cumsum(weight, axis=1)
    
    # Iterate over each item and calculate the total prize that can be included
    for i in range(prize.shape[0]):
        total_prize = 0
        total_weight = 0
        for j in range(i, prize.shape[0]):
            total_weight += np.sum(weight[j])
            if total_weight > 1:
                break
            total_prize = cumulative_prize[j] - cumulative_prize[i]
        heuristic[i] = total_prize
    
    return heuristic
```
