```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) with adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initialize PSO parameters
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Check feasibility and initialize PSO global best
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # PSO with adaptive learning rate and dynamic cognitive and social coefficients
    learning_rate = 0.01
    max_learning_rate = 0.1
    min_learning_rate = 0.001
    c1, c2 = 2.0, 2.0  # Cognitive and social coefficients
    w = 0.5  # Inertia weight
    for _ in range(10):  # Number of iterations
        for i in range(n):
            if i in feasible_items:  # Consider only feasible items
                # Update velocity and position
                r1, r2 = np.random.rand(2)
                pso_velocity[i] = w * pso_velocity[i] + c1 * r1 * (pso_personal_best[i] - pso_position[i]) + c2 * r2 * (pso_global_best[i] - pso_position[i])
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Adapt learning rate and cognitive/social coefficients
        learning_rate = max(min_learning_rate, max_learning_rate * np.exp(-learning_rate / 1000))
        c1 = 2.0 - 0.4 * np.sin(_ / 50)
        c2 = 2.0 - 0.4 * np.sin(_ / 50)

    # Combine RL and PSO scores to generate heuristics
    combined_scores = model_scores + pso_global_best_scores
    feasible_items = np.sum(weight, axis=1) <= 1
    heuristic[~feasible_items] = 0
    heuristic[feasible_items] = combined_scores[feasible_items] / (prize[global_best_index] + 1e-6)

    # Sparsify heuristics based on a dynamic threshold
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Update the DRL scores based on the sparsified heuristics
    new_model_scores = np.exp(reward_function(model_scores) + np.sum(model_scores * heuristic) - np.max(reward_function(model_scores) + np.sum(model_scores * heuristic)))
    new_model_scores /= np.sum(new_model_scores)

    # Refine the heuristics
    refined_heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Enhance heuristic diversity with mutation
    mutation_rate = 0.01
    mutation_magnitude = 0.05
    heuristic = (1 - mutation_rate) * heuristic + np.random.rand(n) * mutation_rate * mutation_magnitude

    # Return the refined heuristics ignoring non-feasible items
    return refined_heuristic[feasible_items]
```
