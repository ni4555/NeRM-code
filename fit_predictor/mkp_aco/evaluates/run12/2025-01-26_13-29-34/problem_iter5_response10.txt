```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (simplified)
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    constraint_violations = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violations

    # Particle swarm optimization for evolutionary swarm intelligence
    # We simulate PSO with random positions and velocities for demonstration
    positions = np.random.rand(n)
    velocities = np.random.rand(n)
    best_individual_position = np.argmax(model_scores)
    best_global_position = best_individual_position

    # Simulate PSO iterations
    for _ in range(100):  # A small number of iterations for demonstration
        new_positions = positions + velocities
        positions = np.clip(new_positions, 0, 1)  # Keep positions within the feasible range [0, 1]

        for i in range(n):
            if positions[i] == 1:
                if np.sum(weight[i]) <= 1:
                    if model_scores[i] > model_scores[best_individual_position]:
                        best_individual_position = i
            if positions[i] == 1 and i != best_global_position:
                if model_scores[i] > model_scores[best_global_position]:
                    best_global_position = i

    # Update heuristics based on model scores, feasibility, and PSO results
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[best_global_position] + 1e-6))

    return heuristic
```
