```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (simplified)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violation

    # Initialize PSO parameters
    num_particles = 20
    max_iter = 10
    w = 0.5
    c1 = 1.5
    c2 = 1.5

    # Initialize PSO position, velocity, and personal best
    pso_position = np.random.rand(n, num_particles)
    pso_velocity = np.zeros((n, num_particles))
    pso_personal_best = np.copy(pso_position)
    pso_personal_best_fitness = np.copy(model_scores)
    pso_global_best = np.copy(pso_personal_best)
    pso_global_best_fitness = np.copy(model_scores)

    # Initialize global best index
    global_best_index = np.argmax(pso_personal_best_fitness)

    for _ in range(max_iter):
        for i in range(n):
            for j in range(num_particles):
                # Update velocity
                r1, r2 = np.random.rand(), np.random.rand()
                pso_velocity[i, j] = w * pso_velocity[i, j] + c1 * r1 * (pso_personal_best[i, j] - pso_position[i, j]) + c2 * r2 * (pso_global_best[i] - pso_position[i, j])
                # Update position
                pso_position[i, j] += pso_velocity[i, j]
                # Ensure position is within bounds
                pso_position[i, j] = np.clip(pso_position[i, j], 0, 1)
                # Update personal best
                if model_scores[i] > pso_personal_best_fitness[i, j]:
                    pso_personal_best[i, j] = pso_position[i, j]
                    pso_personal_best_fitness[i, j] = model_scores[i]
                # Update global best
                if pso_personal_best[i, j] > pso_global_best[i]:
                    pso_global_best[i] = pso_personal_best[i, j]
                    pso_global_best_fitness[i] = model_scores[i]
        global_best_index = np.argmax(pso_global_best_fitness)

    # Update heuristics based on model scores, PSO scores, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = (model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))) + \
                           (pso_global_best[i] * (1 - model_scores[i]))

    # Sparsify heuristics using a threshold-based method
    sparsity_threshold = np.percentile(heuristic[feasible_items], 50)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
