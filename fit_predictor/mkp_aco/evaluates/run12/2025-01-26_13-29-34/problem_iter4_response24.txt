```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    heuristic = np.zeros(n)

    # Deep Reinforcement Learning for real-time decision-making
    # Simulate the output of a trained model
    rl_model_output = np.random.rand(n)

    # Initialize the Particle Swarm Optimization (PSO) variables
    # Random initial positions
    positions = np.random.rand(n)
    velocities = np.random.rand(n)
    best_global = np.max(rl_model_output)
    best_global_position = np.argmax(rl_model_output)

    # Adaptive Constraint-Driven Filtering
    for _ in range(100):
        feasible = True
        total_weight = np.sum(weight[:, 0])
        for i in range(n):
            if weight[i, 0] > 1 - total_weight:
                feasible = False
                break
            total_weight += weight[i, 0]
        if not feasible:
            heuristic = np.zeros(n)
            break

    # PSO for evolutionary swarm intelligence
    for _ in range(100):
        for i in range(n):
            velocities[i] = 0.5 * velocities[i] + np.random.random() * (best_global_position - positions[i])
            positions[i] += velocities[i]
        
        # Update heuristic based on RL and PSO
        heuristic = rl_model_output * (1 / (1 + np.abs(positions - best_global_position)))

    # Apply sparsity based on feasibility and model output
    heuristic[weight[:, 0] > 1] = 0

    return heuristic
```
