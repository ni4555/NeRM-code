```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate and parameters
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Initialize adaptive learning rates and parameters schedules
    inertia_weight_schedule = np.linspace(0.9, 0.5, 100)
    cognitive_coefficient_schedule = np.linspace(2, 2.5, 100)
    social_coefficient_schedule = np.linspace(2, 2.5, 100)
    learning_rate_schedule = np.linspace(0.01, 0.01, 100)

    # Initialize adaptive learning rate for DRL
    learning_rate_drl = 0.01
    discount_rate = 0.95

    # Initialize recent performance history
    recent_performance = np.zeros(100)

    for iteration in range(100):
        # Update PSO parameters
        inertia_weight = inertia_weight_schedule[iteration]
        cognitive_coefficient = cognitive_coefficient_schedule[iteration]
        social_coefficient = social_coefficient_schedule[iteration]
        learning_rate = learning_rate_schedule[iteration]

        # Update PSO position and velocity
        r1, r2 = np.random.randn(n), np.random.randn(n)
        for i in range(n):
            if i in feasible_items:
                cognitive_component = cognitive_coefficient * r1[i]
                social_component = social_coefficient * r2[i] * (pso_personal_best[i] - pso_position[i])
                pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_component + social_component
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update DRL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for DRL
        new_reward = reward_function(model_scores)
        model_rewards.append(new_reward)

        # Update DRL score using discounted reward
        model_scores *= discount_rate
        model_scores[global_best_index] += new_reward
        model_rewards.append(model_scores[-1])

        # Update heuristics based on the weighted average of DRL and PSO scores, considering feasibility
        for i in range(n):
            if i in feasible_items:
                recent_performance[iteration] = np.mean(model_rewards[-10:])
                heuristic[i] = recent_performance[iteration] * (prize[i] / (prize[global_best_index] + 1e-6))

        # Sparsify heuristics based on recent performance
        dynamic_threshold = np.percentile(heuristic, 50)
        heuristic[heuristic < dynamic_threshold] = 0

        # Refine the reward mechanism by incorporating the most promising heuristic scores
        refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
        refined_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
        refined_model_scores /= np.sum(refined_model_scores)

        # Update heuristics based on the refined scores
        heuristic = refined_model_scores * prize / (prize[global_best_index] + 1e-6)

        # Incorporate diversity through variance in particle positions
        diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
        heuristic *= diversity_factor

        # Adaptively adjust parameters for PSO to enhance exploration and exploitation
        inertia_weight = inertia_weight_schedule[iteration]
        cognitive_coefficient = cognitive_coefficient_schedule[iteration]
        social_coefficient = social_coefficient_schedule[iteration]

        # Ignore non-feasible items in the final heuristic
        heuristic[~feasible_items] = 0

    return heuristic
```
