```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (simplified)
    model_scores = np.random.rand(n)

    # Precompute cumulative weights for efficiency
    cumulative_weight = np.cumsum(weight, axis=1)

    # Adaptive constraint-driven filtering
    for i in range(n):
        feasible = True
        for j in range(i + 1, n):
            if cumulative_weight[j] > 1 - cumulative_weight[i]:
                feasible = False
                break
        if not feasible:
            heuristic[i] = 0
            continue

        # Particle swarm optimization for evolutionary swarm intelligence
        local_best = np.max(prize[i:])
        global_best = np.max(prize)

        # Calculate heuristic based on multiple factors
        heuristic[i] = model_scores[i] * (prize[i] / (local_best + 1e-6)) * ((global_best - prize[i]) / (global_best + 1e-6))
        heuristic[i] *= np.sum(weight[i]) / (np.sum(weight[i]) + 1e-6)  # Weight by the current item's weight

    # Sparsify the heuristics by setting unpromising elements to zero
    heuristic[heuristic < 0.5] = 0

    return heuristic
```
