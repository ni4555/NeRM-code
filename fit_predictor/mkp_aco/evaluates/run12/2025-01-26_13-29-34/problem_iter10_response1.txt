```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (optimized for relevance)
    model_scores = np.random.rand(n)  # Assuming pre-trained model scores

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Initialize Particle Swarm Optimization (PSO) variables
    cognitive_coefficient = 0.8
    social_coefficient = 0.2
    inertia_weight = 0.5
    positions = np.copy(model_scores)
    velocities = np.zeros(n)
    personal_best_scores = np.copy(model_scores)
    global_best_score = np.max(model_scores)

    # PSO with constraint adaptation for evolutionary swarm intelligence
    for iteration in range(50):  # Increase iterations for convergence
        for i in range(n):
            # Update velocities considering inertia weight and cognitive/social components
            velocities[i] = inertia_weight * velocities[i] + cognitive_coefficient * (np.random.rand() - 0.5) * (personal_best_scores[i] - positions[i]) + social_coefficient * (np.random.rand() - 0.5) * (global_best_score - positions[i])

            # Update positions
            positions[i] += velocities[i]

            # Apply constraint adaptation
            if np.sum(weight[i, :]) > 1:
                positions[i] = personal_best_scores[i]  # Reset to personal best if constraint violated

        # Update personal best scores
        for i in range(n):
            current_score = model_scores[i] * (prize[i] / (prize[np.argmax(positions)] + 1e-6))
            if current_score > personal_best_scores[i]:
                personal_best_scores[i] = current_score

        # Update global best score
        global_best_score = np.max(personal_best_scores)

    # Update heuristics based on model scores, PSO scores, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = personal_best_scores[i]

    # Dynamic sparsity thresholds to adapt to the problem's difficulty
    sparsity_threshold = np.percentile(heuristic[feasible_items], 90)  # Use a dynamic threshold for sparsity

    # Sparsify heuristics using the dynamic threshold
    heuristic[heuristic < sparsity_threshold] = 0

    # Incorporate confidence factor for feasible items
    confidence_factor = np.mean(heuristic[feasible_items])
    heuristic[feasible_items] *= (1 + confidence_factor * (np.random.rand(n) < 0.2))

    return heuristic
```
