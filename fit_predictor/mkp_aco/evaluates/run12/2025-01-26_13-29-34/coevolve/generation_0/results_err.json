{
  "generation": 0,
  "description": "Solving Multiple Knapsack Problems (MKP) through stochastic solution sampling based on \"heuristics\". MKP involves selecting a subset of items to maximize the total prize collected, subject to multi-dimensional maximum weight constraints.",
  "failed_solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Create a random permutation of indices\n    indices = np.random.permutation(prize.shape[0])\n    \n    # Initialize heuristic scores\n    heuristics = np.zeros_like(prize)\n    \n    # Sort items based on their prize value (higher is better)\n    sorted_indices = np.argsort(-prize[indices])\n    \n    # Iterate over sorted indices to assign heuristics\n    for i, idx in enumerate(sorted_indices):\n        if i < m:  # m is a predefined number of items to consider\n            # Calculate heuristic score based on cumulative prize and weight\n            cumulative_prize = np.sum(prize[indices[:idx+1]])\n            cumulative_weight = np.sum(weight[indices[:idx+1], :].sum(axis=1))\n            heuristics[idx] = cumulative_prize / cumulative_weight if cumulative_weight != 0 else 0\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    m = weight.shape[1]\n    # Normalize weights for each dimension to be comparable\n    normalized_weights = weight / np.sum(weight, axis=1, keepdims=True)\n    # Calculate the heuristic as the ratio of prize to normalized weight\n    heuristics = prize / np.sum(normalized_weights, axis=1, keepdims=True)\n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the total weight for each item\n    item_total_weight = np.sum(weight, axis=1)\n    \n    # Normalize the total prize by the total weight of each item\n    normalized_prize = prize / item_total_weight\n    \n    # Calculate the heuristic value as the normalized prize\n    heuristics = normalized_prize\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize heuristic values with random values between 0 and 1\n    heuristics = np.random.rand(prize.shape[0])\n    \n    # Normalize by dividing each item's prize by its total weight to get relative value\n    relative_value = prize / (weight.sum(axis=1, keepdims=True))\n    \n    # Scale the relative values by the maximum relative value and add random noise\n    scaled_heuristics = relative_value * relative_value.max() + np.random.normal scale=0.01, size=prize.shape[0]\n    \n    return scaled_heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Traceback (most recent call last):\n  File \"E:\\Projects\\CO\\reevo-main/problems/mkp_aco/eval.py\", line 8, in <module>\n    import gpt\n  File \"E:\\Projects\\CO\\reevo-main\\problems\\mkp_aco\\gpt.py\", line 12\n    scaled_heuristics = relative_value * relative_value.max() + np.random.normal scale=0.01, size=prize.shape[0]\n                                                                                 ^^^^^\nSyntaxError: invalid syntax\n",
      "stdout_file": "coevolve\\generation_0\\stdout_0.txt",
      "code_file": "coevolve\\generation_0\\code_0.py"
    }
  ]
}