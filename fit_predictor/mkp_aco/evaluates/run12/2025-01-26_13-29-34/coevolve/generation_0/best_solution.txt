Fitness: inf

Description:
Solving Multiple Knapsack Problems (MKP) through stochastic solution sampling based on "heuristics". MKP involves selecting a subset of items to maximize the total prize collected, subject to multi-dimensional maximum weight constraints.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Create a random permutation of indices
    indices = np.random.permutation(prize.shape[0])
    
    # Initialize heuristic scores
    heuristics = np.zeros_like(prize)
    
    # Sort items based on their prize value (higher is better)
    sorted_indices = np.argsort(-prize[indices])
    
    # Iterate over sorted indices to assign heuristics
    for i, idx in enumerate(sorted_indices):
        if i < m:  # m is a predefined number of items to consider
            # Calculate heuristic score based on cumulative prize and weight
            cumulative_prize = np.sum(prize[indices[:idx+1]])
            cumulative_weight = np.sum(weight[indices[:idx+1], :].sum(axis=1))
            heuristics[idx] = cumulative_prize / cumulative_weight if cumulative_weight != 0 else 0
    
    return heuristics