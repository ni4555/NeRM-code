```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    import numpy as np
    from scipy.optimize import linear_sum_assignment

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive parameters
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize constraint maintenance filter
    feasibility_filter = np.ones(n)
    constraint_violation = np.zeros(n)

    # Initialize a dynamic threshold for feasibility
    feasibility_threshold = np.percentile(model_scores, 95)
    heuristic_threshold = np.percentile(prize, 80)

    for iteration in range(max_iterations):
        # Update PSO parameters
        inertia_weight = 0.9 - 0.1 * iteration / max_iterations
        cognitive_coefficient = 2 + 0.5 * iteration / max_iterations
        social_coefficient = 2 + 0.5 * iteration / max_iterations

        # Update PSO positions and velocities
        for i in range(n):
            if i in feasible_items:
                r1, r2 = np.random.randn(), np.random.randn()
                cognitive_component = cognitive_coefficient * r1
                social_component = social_coefficient * r2 * (pso_personal_best[i] - pso_position[i])
                pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_component + social_component
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

        # Update personal and global best
        pso_local_best = model_scores * pso_position
        for i in range(n):
            if pso_local_best[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = pso_local_best[i]
                pso_personal_best[i] = pso_position[i]
        pso_global_best_scores = pso_personal_best_scores
        pso_global_best = pso_personal_best

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

        # Update heuristics based on the weighted average of RL and PSO scores
        recent_performance = np.mean(model_rewards[-10:])
        heuristic = recent_performance * prize / (prize[global_best_index] + 1e-6)

        # Sparsify heuristics with dynamic threshold
        heuristic[heuristic < heuristic_threshold] = 0

        # Maintain constraints using adaptive constraint-driven filtering
        current_total_weight = np.sum(pso_position, axis=0)
        constraint_violation = (weight * pso_position).sum(axis=1) - 1
        feasibility_filter = np.exp(-np.abs(constraint_violation) / (1 + np.abs(constraint_violation)))
        feasibility_filter = np.clip(feasibility_filter, 0, 1)
        constraint_violation = constraint_violation * feasibility_filter

        # Apply linear sum assignment to ensure feasibility
        row_ind, col_ind = linear_sum_assignment(constraint_violation)
        feasible_items = np.zeros(n, dtype=bool)
        feasible_items[col_ind] = True

        # Update the dynamic threshold based on the constraint violation
        feasibility_threshold = np.percentile(model_scores[feasible_items], 95)

        # Refine the reward mechanism by incorporating the most promising heuristic scores
        refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
        refined_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
        refined_model_scores /= np.sum(refined_model_scores)

        # Update heuristics based on the refined RL scores
        heuristic = refined_model_scores * prize / (prize[global_best_index] + 1e-6)

    return heuristic
```
