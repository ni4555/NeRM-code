```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with a simplified reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with a simple learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores and ensure feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                pso_velocity[i] = 0.5 * (np.random.rand() - 0.5)
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of RL and PSO scores
    recent_performance = np.mean(model_rewards[-10:])
    heuristic = recent_performance * prize / (prize[global_best_index] + 1e-6)

    # Sparsify heuristics based on the last few rewards
    heuristic[heuristic < np.percentile(model_rewards[-10:], 50)] = 0

    # Incorporate diversity by considering the variance of the PSO scores
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    heuristic *= diversity_factor

    # Refine the reward mechanism by incorporating the most promising heuristic scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined RL scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
