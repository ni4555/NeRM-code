```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    heuristic = np.zeros((prize.shape[0],))

    # Deep reinforcement learning component (simplified)
    # Assuming a pre-trained model that scores items based on their potential
    # Here we simulate this with a random number generator for demonstration
    model_scores = np.random.rand(prize.shape[0])

    # Adaptive constraint-driven filtering
    for i in range(prize.shape[0]):
        feasible = True
        total_weight = np.sum(weight[i])
        for j in range(i + 1, prize.shape[0]):
            if np.sum(weight[j]) > 1 - total_weight:
                feasible = False
                break
            total_weight += np.sum(weight[j])
        if not feasible:
            heuristic[i] = 0
            continue

        # Particle swarm optimization for evolutionary swarm intelligence
        # Simulate the local best and global best positions
        local_best = np.max(prize[i:])
        global_best = np.max(prize)

        # Calculate heuristic based on the factors
        heuristic[i] = model_scores[i] * (prize[i] / (local_best + 1e-6)) * ((global_best - prize[i]) / (global_best + 1e-6))

    # Sparsify the heuristics by setting unpromising elements to zero
    heuristic[heuristic < 0.5] = 0

    return heuristic
```
