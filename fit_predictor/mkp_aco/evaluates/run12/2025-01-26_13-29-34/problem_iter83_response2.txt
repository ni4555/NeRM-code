```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) model initialization
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) model initialization
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initial feasibility check and update global best
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive constraint-driven filtering
    feasibility_filter = np.ones(n)
    constraint_threshold = 1.0 - 1e-6  # Allowing a small leeway for feasibility

    # Adaptive reward mechanism and PSO
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update PSO velocity and position
                pso_velocity[i] = np.random.normal(0, 0.01)
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best and global best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update DRL model scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for DRL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of DRL and PSO scores, considering feasibility
    for i in range(n):
        if i not in feasible_items:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics based on a dynamic threshold that considers the diversity of solutions
    diversity_factor = np.var(pso_global_best_scores[feasible_items]) / np.mean(pso_global_best_scores[feasible_items])
    dynamic_threshold = np.percentile(heuristic, 50) * diversity_factor
    heuristic[heuristic < dynamic_threshold] = 0

    # Refine the reward mechanism and update heuristics
    refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    refined_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
    refined_model_scores /= np.sum(refined_model_scores)

    # Update heuristics based on the refined scores, ensuring feasibility
    feasible_heuristics = heuristic[feasible_items]
    non_feasible_index = np.argmax(refined_model_scores) if np.any(refined_model_scores[feasible_items] > 0) else 0
    feasible_heuristics[non_feasible_index] = 0
    heuristic = np.zeros(n)
    heuristic[feasible_items] = feasible_heuristics

    return heuristic
```
