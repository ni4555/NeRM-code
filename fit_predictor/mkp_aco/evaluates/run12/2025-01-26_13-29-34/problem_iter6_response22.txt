```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (simplified and integrated with PSO)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violation

    # Initialize PSO components
    num_particles = 20
    pso_velocity = np.random.randn(n, num_particles)
    pso_position = np.random.rand(n, num_particles)
    pso_personal_best = np.copy(model_scores)
    pso_global_best = np.copy(model_scores)

    # PSO inertia weight and cognitive and social coefficients
    inertia_weight = 0.9
    cognitive_coefficient = 2.0
    social_coefficient = 2.0

    # Simulate PSO evolution for a few iterations
    for _ in range(20):  # Using a small number of iterations for demonstration
        for i in range(n):
            r1, r2 = np.random.rand(2)
            cognitive = cognitive_coefficient * r1
            social = social_coefficient * r2
            pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive * (pso_personal_best[i] - pso_position[i]) + social * (pso_global_best[i] - pso_position[i])
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)  # Ensure the position is within bounds
            if not feasible_items[i]:
                pso_position[i] = pso_personal_best[i]  # Keep the best feasible position
        pso_personal_best = np.maximum(pso_position, pso_personal_best)
        pso_global_best = np.maximum(pso_personal_best, pso_global_best)
        global_best_index = np.argmax(pso_global_best)

    # Update heuristics based on model scores, PSO scores, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Weigh RL and PSO scores, considering the sparsity of the weight
            sparsity_weight = np.sum(weight[i] == 0) / m
            heuristic[i] = (model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))) + \
                           (pso_global_best[i] * (1 - model_scores[i])) * sparsity_weight

    # Sparsify heuristics by setting less promising elements to zero
    sparsity_threshold = np.percentile(heuristic, 15)  # Set a threshold for sparsity
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
