```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) model initialization
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with feasible solutions
    feasible_items = np.sum(weight, axis=1) <= 1
    infeasible_items = ~feasible_items
    pso_position = np.random.choice(np.where(feasible_items)[0], size=1, replace=False)
    pso_velocity = np.zeros_like(pso_position)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores[pso_position])
    pso_global_best_scores = np.copy(pso_personal_best_scores)

    # Adaptive sparsity and learning rate initialization
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # PSO optimization loop
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Only consider feasible items
                # Update velocity and position
                pso_velocity[i] = learning_rate * pso_velocity[i] + \
                                  (0.5 * (np.random.rand() - 0.5))
                pso_position[i] = np.clip(pso_position[i] + pso_velocity[i], 0, 1)

                # Update personal best
                current_score = reward_function(model_scores[i] if feasible_items[i] else 0)
                if current_score > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = current_score
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if current_score > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = current_score
                    pso_global_best[i] = pso_position[i]

        # Update model scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[pso_global_best] = pso_global_best_scores[pso_global_best]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Sparsify heuristics based on model scores and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (prize[pso_global_best] + 1e-6))

    # Refine heuristics using a feedback loop to enhance diversity
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Incorporate the most promising heuristic scores into the reward mechanism
    refined_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    refined_model_scores = np.exp(refined_reward_function(model_scores) - np.max(refined_reward_function(model_scores)))
    refined_model_scores /= np.sum(refined_model_scores)

    # Update heuristics based on the refined RL scores
    heuristic = refined_model_scores * prize / (prize[pso_global_best] + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
