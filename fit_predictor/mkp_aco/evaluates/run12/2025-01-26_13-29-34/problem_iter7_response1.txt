```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Deep reinforcement learning component (using a pre-trained model)
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Initialize particle swarm optimization (PSO) variables
    # We assume that the PSO has already been run and found a feasible solution
    global_best_index = np.argmax(model_scores)
    global_best_score = model_scores[global_best_index]

    # Update heuristics based on model scores, feasibility, and adaptive constraint
    for i in range(n):
        # Calculate the feasibility for the current item
        current_item_weight_sum = np.sum(weight[i])
        if current_item_weight_sum > 1:
            feasible_items[i] = False

        # Update heuristic value
        if feasible_items[i]:
            heuristic_value = model_scores[i] * (prize[i] / (global_best_score + 1e-6))

            # Sparsify heuristics by setting unpromising elements to zero
            if heuristic_value < 0.1:  # Threshold for sparsity
                heuristic[i] = 0
            else:
                heuristic[i] = heuristic_value
        else:
            heuristic[i] = 0

    return heuristic
```
