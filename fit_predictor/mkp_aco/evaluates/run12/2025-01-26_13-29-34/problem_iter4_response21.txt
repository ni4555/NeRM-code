```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning for real-time decision-making
    rl_model = np.random.rand(n)  # Simplified model, replace with actual model

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    alpha = 0.1  # Learning rate for adaptive filtering
    threshold = 1.0  # Maximum allowed weight for a single item
    feasibility_mask = np.all(weight <= threshold, axis=1)

    # Particle swarm optimization for evolutionary swarm intelligence
    particles = np.random.rand(n, n)
    velocities = np.random.rand(n, n)
    best_position = particles
    best_fitness = np.zeros(n)

    for iteration in range(100):
        for i in range(n):
            velocities[i] = 0.5 * velocities[i] + 0.2 * (best_position[i] - particles[i])
            particles[i] += velocities[i]
            if np.all(weight[particles[i] == i] <= threshold):
                best_position[i] = particles[i]
                best_fitness[i] = np.sum(prize[particles[i] == i])

    # Evaluate heuristics using the best fitness positions from particle swarm optimization
    for i in range(n):
        if feasibility_mask[i]:
            heuristic[i] = best_fitness[i]
        else:
            heuristic[i] = 0

    # Regularize heuristics based on historical performance and constraints
    for i in range(n):
        if np.any(weight[i] > threshold):
            heuristic[i] = 0
        else:
            heuristic[i] = heuristic[i] * (1 - alpha) + (1 - (1 - alpha)) * best_fitness[i]

    # Integrate reinforcement learning for decision-making
    for i in range(n):
        action = np.random.choice([0, 1], p=[1 - rl_model[i], rl_model[i]])
        if action == 1:
            heuristic[i] = np.sum(prize[i])

    return heuristic
```
