```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning for real-time decision-making
    rl_model = np.random.rand(n)
    for i in range(n):
        for j in range(weight.shape[1]):
            if weight[i, j] > 1:
                rl_model[i] *= 0.9  #惩罚不满足约束的物品
        heuristic[i] = prize[i] * (rl_model[i] > 0.5)  #选择奖励高的物品

    # Particle swarm optimization for evolutionary swarm intelligence
    particles = np.random.rand(n, n)
    velocities = np.random.rand(n, n)
    best_position = np.copy(particles)
    best_fitness = heuristic.copy()

    for iteration in range(100):
        for i in range(n):
            for j in range(n):
                velocities[i, j] = 0.5 * velocities[i, j] + 0.1 * (best_position[i, j] - particles[i, j])
                particles[i, j] += velocities[i, j]
            if heuristic[i] > best_fitness[i]:
                best_position[i] = particles[i]
                best_fitness[i] = heuristic[i]

    heuristic = best_fitness

    return heuristic
```
