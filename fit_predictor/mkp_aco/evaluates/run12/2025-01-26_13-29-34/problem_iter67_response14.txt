```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) components
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Ensure initial PSO global best is feasible
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # PSO runs
    for _ in range(10):  # Using a small number of iterations for demonstration
        # Update PSO velocity and position
        for i in range(n):
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

        # Evaluate and update personal and global best
        for i in range(n):
            model_scores[i] = pso_position[i]
            if i in feasible_items:
                # Update personal best if current score is better
                if pso_position[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = pso_position[i]

                # Update global best if current personal best is better than the global best
                if pso_position[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_position[i]
                    pso_global_best[i] = pso_position[i]

        # Update global best score
        global_best_score = np.max(pso_global_best_scores)
        model_rewards.append(reward_function(model_scores - global_best_score))

    # Update heuristics based on the weighted average of RL and PSO scores
    for i in range(n):
        if i in feasible_items:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (np.sum(prize) + 1e-6))

    # Sparsify heuristics using a dynamic threshold
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Refine DRL rewards based on the final heuristics
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) - np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on refined DRL scores
    heuristic = new_model_scores * prize / (np.sum(prize) + 1e-6)

    # Ignore non-feasible items in the final heuristic
    heuristic[~feasible_items] = 0

    return heuristic
```
