```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (further simplified)
    model_scores = np.random.rand(n)

    # Initialize adaptive constraint-driven filtering
    # Start by assuming all items are feasible
    feasible_items = np.ones(n, dtype=bool)

    # Particle swarm optimization for evolutionary swarm intelligence
    # Simulate the best solution based on initial scores
    global_best_index = np.argmax(model_scores)
    global_best_score = model_scores[global_best_index]

    # Iterate over each dimension and filter feasible items
    for dim in range(m):
        # Sum weights in the current dimension and compare with the constraint
        weight_sum = np.sum(weight[:, dim])
        if weight_sum > 1:
            # Find the item that, if excluded, would allow feasibility
            for i in range(n):
                if feasible_items[i]:
                    weight_sum -= weight[i, dim]
                    if weight_sum <= 1:
                        feasible_items[i] = False
                        break

    # Update heuristics based on model scores, feasibility, and sparsity
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (global_best_score + 1e-6)) * (1 / np.sum(weight[:, :m], axis=1)[i])

    return heuristic
```
