```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) components
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Early constraint-driven filtering and adaptive sparsity
    feasible_items = np.sum(weight, axis=1) <= 1
    non_feasible_items = ~feasible_items
    model_scores[non_feasible_items] = 0
    sparsity_threshold = np.percentile(model_scores[feasible_items], 50)

    # Main loop for PSO and DRL interaction
    for _ in range(10):  # Using a small number of iterations for demonstration
        # PSO updates
        for i in range(n):
            if feasible_items[i]:
                pso_velocity[i] = 0.5 * (np.random.rand() - 0.5)
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update DRL scores based on PSO's global best
        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[non_feasible_items] = 0
        if feasible_items[global_best_index]:
            model_scores[global_best_index] = pso_global_best_scores[global_best_index]
            model_rewards.append(reward_function(model_scores))

        # Normalize and refine DRL scores
        if model_rewards:
            model_scores = np.exp(np.mean(model_rewards) - np.min(model_rewards))
            model_scores /= np.sum(model_scores)

    # Filter heuristics based on the refined DRL scores
    for i in range(n):
        if feasible_items[i]:
            heuristic[i] = model_scores[i] * (prize[i] / np.sum(model_scores * prize))

    # Apply sparsity based on the threshold
    heuristic[heuristic < sparsity_threshold] = 0

    # Apply exploration-exploitation balance
    exploration_rate = 0.1 + 0.9 * np.random.rand()
    exploitation_rate = 0.9 - 0.1 * np.random.rand()
    heuristic = (exploration_rate * np.random.rand(n)) + (exploitation_rate * heuristic)

    return heuristic
```
