```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) component with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Maintain feasibility using constraint-driven filtering
    feasible_items = np.sum(weight, axis=1) <= 1

    # Run PSO with adaptive learning rate and feasibility check
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            # Update the velocity and position
            pso_velocity[i] = 0.01 * (np.random.rand() - 0.5)
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            
            # Update personal best and its score if feasible
            if feasible_items[i] and model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
                
            # Update global best and its score if the personal best is better and feasible
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index after PSO update
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Integrate DRL and PSO scores, with feasibility check
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            weighted_score = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6)) + \
                             pso_global_best_scores[i] * (1 - model_scores[i])
            heuristic[i] = weighted_score

    # Dynamic sparsity tuning using percentile-based threshold
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Final update of heuristics based on the updated DRL scores
    heuristic = model_scores * prize / (prize[global_best_index] + 1e-6)

    # Final constraint-aware filtering by ignoring non-feasible items
    heuristic[~feasible_items] = 0

    return heuristic
```
