```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Particle swarm optimization for evolutionary swarm intelligence
    global_best_index = np.argmax(model_scores)
    global_best_position = np.copy(model_scores)

    # Simulate PSO with velocity and position updates
    velocities = np.zeros((n,))
    positions = np.copy(model_scores)

    # Parameters for PSO
    w = 0.5  # Inertia weight
    c1 = 1.5  # Cognitive (particle's best) weight
    c2 = 2.0  # Social (swarm's best) weight

    for _ in range(50):  # Number of iterations, could be optimized
        for i in range(n):
            velocities[i] = w * velocities[i] + c1 * np.random.rand() * (positions[i] - model_scores[i]) + c2 * np.random.rand() * (global_best_position[i] - model_scores[i])
            positions[i] += velocities[i]
            model_scores[i] = positions[i]

        # Update global best
        global_best_index = np.argmax(model_scores)
        global_best_position = np.copy(model_scores)

        # Update feasible items based on updated scores
        feasible_items = (weight[:, 0] <= 1).all(axis=1) & (model_scores > 0)

    # Update heuristics based on PSO scores and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify the heuristics by setting unpromising elements to zero
    sparsity_threshold = np.percentile(heuristic[feasible_items], 10)  # Example sparsity threshold
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
