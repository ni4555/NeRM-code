```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) initialization
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Constraint checks and Particle Swarm Optimization (PSO) initialization
    feasible_items = np.sum(weight, axis=1) <= 1
    infeasible_indices = np.where(~feasible_items)[0]
    if infeasible_indices.size > 0:
        model_scores[infeasible_indices] = float('-inf')
    
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Adaptive learning rate setup
    learning_rate = 0.01
    min_learning_rate = 0.001
    max_learning_rate = 0.1
    update_learning_rate = lambda t: max(min_learning_rate, max_learning_rate * (1 / (1 + t)))

    # PSO iterations with adaptive learning rate
    t = 0
    for _ in range(10):
        t += 1
        learning_rate = update_learning_rate(t)
        
        for i in range(n):
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            current_score = model_scores[i] if feasible_items[i] else float('-inf')
            if current_score > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = current_score
                pso_personal_best[i] = pso_position[i]

            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Update heuristics considering feasibility and reward
    for i in range(n):
        heuristic[i] = (model_rewards[-1] * (prize[i] / (prize[global_best_index] + 1e-6))) \
                       if feasible_items[i] else 0

    # Dynamic threshold for sparsity and learning rate adjustment
    sparsity_threshold = np.percentile(heuristic, 50)
    learning_rate = update_learning_rate(1)

    # Sparsify heuristics based on dynamic threshold
    heuristic[heuristic < sparsity_threshold] = 0

    # Feedback mechanism to adapt heuristics
    feedback_scores = np.exp(-np.sum((model_scores - np.mean(model_scores))**2) / (2 * np.var(model_scores)))
    heuristic *= feedback_scores

    # Mutation to maintain diversity
    mutation_strength = 0.01
    mutation = np.random.normal(0, mutation_strength, n)
    heuristic += mutation
    heuristic = np.clip(heuristic, 0, 1)

    return heuristic
```
