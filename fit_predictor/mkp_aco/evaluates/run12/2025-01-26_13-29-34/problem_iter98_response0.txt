```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep Reinforcement Learning (DRL) initialization
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items

    # Particle Swarm Optimization (PSO) initialization
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores = np.copy(model_scores)[feasible_items]

    # Run PSO with a simple update rule
    for iteration in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:
                # Update velocity and position
                pso_velocity[i] = 0.5 * (pso_velocity[i] + np.random.randn() * 0.1)
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best[i]:
                    pso_personal_best[i] = model_scores[i]
                    pso_position[i] = np.copy(pso_position[i])

                # Update global best
                if pso_personal_best[i] > pso_global_best_scores.max():
                    pso_global_best_scores.max(axis=0)
                    pso_global_best[i] = pso_position[i]

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[global_best_index] = pso_personal_best[global_best_index]

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = reward_function(model_scores)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify heuristics by setting unpromising elements to zero
    sparsity_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
