```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (optimized for relevance)
    model_scores = np.random.rand(n)  # Assuming pre-trained model scores

    # Initialize adaptive constraint-driven filtering
    feasible_items = np.ones(n, dtype=bool)

    # Initialize Particle Swarm Optimization (PSO) variables
    pso_global_best = np.copy(model_scores)
    pso_personal_best = np.copy(model_scores)
    positions = np.copy(model_scores)
    velocities = np.zeros(n)
    cognitive_coefficient = 0.8
    social_coefficient = 0.2

    # PSO with constraint adaptation for evolutionary swarm intelligence
    for iteration in range(20):
        for i in range(n):
            # Update velocities considering constraints
            velocities[i] = cognitive_coefficient * velocities[i] + social_coefficient * (np.random.rand() - 0.5) * (pso_personal_best[i] - positions[i])

            # Update positions
            positions[i] += velocities[i]

            # Apply constraint adaptation
            if np.sum(weight[i, :]) > 1:
                positions[i] = pso_personal_best[i]  # Reset to personal best if constraint violated

        # Update personal best
        for i in range(n):
            pso_personal_best[i] = np.maximum(positions[i], pso_personal_best[i])

        # Update global best
        pso_global_best = np.maximum(pso_personal_best, pso_global_best)

    # Update heuristics based on model scores, PSO scores, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[np.argmax(pso_global_best)] + 1e-6)) + \
                           pso_global_best[i] * (1 - model_scores[i])

    # Sparsify heuristics using a dynamic threshold
    sparsity_threshold = np.percentile(heuristic[feasible_items], 75)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
