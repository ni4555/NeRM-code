```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) environment
    model_scores = np.random.rand(n)
    action_space = np.array([0, 1])
    state_space = np.copy(model_scores)
    rewards = []

    # Define DRL reward function based on prize and feasibility
    def reward_function(prize, weight, action):
        total_value = 0
        for i in range(n):
            if action[i] == 1:
                total_value += prize[i]
        total_weight = np.sum(weight[np.where(action == 1)])
        if total_weight <= 1:
            return total_value
        else:
            return -np.inf

    # Initialize Particle Swarm Optimization (PSO)
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with the best DRL score
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')

    # PSO hyperparameters
    pso_w = 0.5
    pso_c1 = 1.5
    pso_c2 = 1.5

    # Run PSO
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            # Update velocity and position
            r1, r2 = np.random.rand(), np.random.rand()
            pso_velocity[i] = (pso_w * pso_velocity[i]) + (pso_c1 * r1 * (pso_personal_best[i] - pso_position[i])) + (pso_c2 * r2 * (pso_global_best[i] - pso_position[i]))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            # Update personal and global best
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]

            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_position[i]

        # Update DRL scores based on the best PSO score
        action = np.copy(pso_global_best)
        model_scores = action * prize
        model_scores[~feasible_items] = 0

        # Update reward and append to rewards history
        reward = reward_function(prize, weight, action)
        rewards.append(reward)

    # Update heuristics based on the weighted average of DRL and PSO scores
    heuristic = np.copy(model_scores)
    heuristic[~feasible_items] = 0

    # Sparsify heuristics with dynamic thresholds
    sparsity_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < sparsity_threshold] = 0

    # Refine heuristics by incorporating the feedback from PSO
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] *= np.exp(np.mean(rewards))

    return heuristic
```
