```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) component with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initialize adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    feasible_items = np.sum(weight, axis=1) <= 1
    constraint_violation = ~feasible_items
    model_scores[constraint_violation] = float('-inf')

    # Initialize Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Define adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores[feasible_items], 50)
    learning_rate = 0.01

    # Initialize convergence criteria
    convergence_threshold = 1e-5
    last_avg_reward = float('inf')

    # Run PSO with adaptive learning rate
    for _ in range(100):  # Increased number of iterations for better optimization
        avg_reward = 0
        for i in range(n):
            # Update the velocity and position
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            
            # Update personal best and its score
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
                
            # Update global best and its score if the personal best is better
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update global best index after PSO update
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))
        avg_reward = np.mean(model_rewards)

        # Dynamic learning rate adjustment
        learning_rate *= 1 - (0.001 * avg_reward)

        # Constraint-aware filtering enhancement
        constraint_violation = np.sum(weight, axis=1) > 1
        feasible_items = ~constraint_violation
        model_scores[constraint_violation] = float('-inf')

        # Sparsity threshold adjustment
        sparsity_threshold = np.percentile(model_scores[feasible_items], 50)
        model_scores[~feasible_items] = float('-inf')

        # Feedback loops for exploration
        if np.abs(avg_reward - last_avg_reward) < convergence_threshold:
            break
        last_avg_reward = avg_reward

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Apply sparsity based on variability
    complexity = np.sum(weight ** 2)
    sparsity_threshold = np.percentile(model_scores[feasible_items], 50 + complexity // 100)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
