```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (simplified)
    model_scores = np.random.rand(n)

    # Maintain feasibility with constraint checks
    feasible_items = np.all(weight <= 1, axis=1)

    # Initialize particle swarm optimization (PSO) with individual and global bests
    global_best_index = np.argmax(model_scores)
    pso_position = np.copy(model_scores)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(model_scores)
    pso_global_best = np.copy(model_scores)

    # Dynamically adjust sparsity threshold
    sparsity_threshold = np.percentile(model_scores[feasible_items], 10)

    # Exploration and exploitation balance
    cognitive_constant, social_constant = 2.5, 2.5
    inertia_weight = 0.9

    # Simulate PSO for a few iterations
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            # Balance exploration and exploitation
            r1, r2 = np.random.rand(), np.random.rand()
            cognitive_component = cognitive_constant * (pso_personal_best[i] - pso_position[i])
            social_component = social_constant * (pso_global_best[i] - pso_position[i])
            pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_component + social_component
            pso_position[i] += pso_velocity[i]
            # Ensure feasibility
            if not feasible_items[i]:
                pso_position[i] = pso_personal_best[i]
        # Update personal bests
        pso_personal_best = np.maximum(pso_position, pso_personal_best)
        # Update global best
        pso_global_best = np.maximum(pso_personal_best, pso_global_best)
        global_best_index = np.argmax(pso_global_best)

    # Update heuristics based on model scores, PSO scores, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Heuristic based on model scores and PSO global best
            heuristic[i] = (model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))) + \
                           (pso_global_best[i] * (1 - model_scores[i]))

    # Adjust sparsity threshold dynamically based on performance
    recent_performance = heuristic[feasible_items].mean()
    if recent_performance < np.mean(model_scores[feasible_items]):
        sparsity_threshold = np.percentile(heuristic[feasible_items], 10)
    else:
        sparsity_threshold = np.percentile(heuristic[feasible_items], 20)

    # Sparsify heuristics by setting less promising elements to zero
    heuristic[heuristic < sparsity_threshold] = 0

    # Incorporate domain-specific constraints early
    cumulative_weight = np.cumsum(weight, axis=1)
    heuristic[cumulative_weight > 1] = 0

    return heuristic
```
