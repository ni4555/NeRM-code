```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (using a hypothetical pre-trained model)
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    constraint_violations = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violations

    # Particle swarm optimization (simplified)
    # Assuming global_best is the item with the highest reward-to-weight ratio
    global_best_index = np.argmax(model_scores)
    global_best_ratio = prize[global_best_index] / np.sum(weight[global_best_index])

    # Update heuristics considering RL scores, feasibility, and PSO global best
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Combine RL score, feasibility, and PSO global best ratio
            heuristic[i] = model_scores[i] * feasible_items[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    # Sparsify the heuristics by setting less promising elements to zero
    threshold = np.percentile(heuristic[feasible_items], 10)  # Use 10th percentile as a threshold
    heuristic[heuristic < threshold] = 0

    return heuristic
```
