```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Simulate deep reinforcement learning component with a model that returns a score
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    # Maintain a mask for feasible items
    feasible_items = np.ones(n, dtype=bool)

    # Apply sparsification strategy
    sparsity_threshold = 0.1
    sparsity_mask = model_scores < sparsity_threshold
    feasible_items[sparsity_mask] = False

    # Particle swarm optimization component
    # Simulate with a simplified PSO approach
    global_best_index = np.argmax(model_scores)
    particle_positions = np.copy(model_scores)
    velocities = np.zeros_like(model_scores)

    # Simple PSO update rule
    inertia_weight = 0.9
    cognitive_weight = 1.5
    social_weight = 1.5
    for _ in range(10):  # Assuming a fixed number of iterations
        for i in range(n):
            velocities[i] = inertia_weight * velocities[i] + cognitive_weight * np.random.rand() * (model_scores[i] - particle_positions[i]) + social_weight * np.random.rand() * (model_scores[global_best_index] - particle_positions[i])
            particle_positions[i] += velocities[i]
        particle_positions = np.clip(particle_positions, 0, 1)
        model_scores = particle_positions

    # Update heuristics based on refined scores and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            heuristic[i] = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))

    return heuristic
```
