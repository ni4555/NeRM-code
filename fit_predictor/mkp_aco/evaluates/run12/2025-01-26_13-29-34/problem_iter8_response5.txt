```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component
    model_scores = np.random.rand(n)

    # Adaptive constraint-driven filtering
    constraints = np.sum(weight, axis=1) <= 1
    feasible_items = constraints.astype(bool)

    # Particle swarm optimization
    global_best_score = -np.inf
    global_best_index = -1
    velocities = np.random.rand(n)
    positions = np.random.rand(n)

    for _ in range(100):  # Number of iterations can be tuned
        new_positions = positions + velocities
        new_positions[~feasible_items] = positions[~feasible_items]  # Maintain feasibility
        velocities = 0.5 * velocities + np.random.rand(n)  # Update velocities with a new random component
        positions = np.clip(new_positions, 0, 1)  # Clamp positions between 0 and 1

        current_scores = model_scores * positions * (prize / (prize[global_best_index] + 1e-6))
        for i in range(n):
            if not feasible_items[i]:
                current_scores[i] = 0  # Penalize infeasible solutions

        best_index = np.argmax(current_scores)
        if current_scores[best_index] > global_best_score:
            global_best_score = current_scores[best_index]
            global_best_index = best_index

    # Update heuristics based on RL and PSO scores
    for i in range(n):
        if feasible_items[i]:
            heuristic[i] = model_scores[i] * positions[i] * (prize[i] / (prize[global_best_index] + 1e-6))
        else:
            heuristic[i] = 0

    # Sparsify heuristics
    sparsity_threshold = np.percentile(heuristic[feasible_items], 10)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
