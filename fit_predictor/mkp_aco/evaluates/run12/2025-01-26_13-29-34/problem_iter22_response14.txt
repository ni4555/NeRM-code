```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with a fixed reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initial feasible items based on constraint checking
    feasible_items = np.sum(weight, axis=1) <= 1

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with feasible items and DRL scores
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best[~feasible_items] = pso_position[~feasible_items]

    # Adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Using a small number of iterations for demonstration
        for i in range(n):
            # Update the velocity and position based on feasibility
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            if feasible_items[i]:
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)
            pso_personal_best[i] = np.copy(pso_position[i])
            
            # Update personal best and its score
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]

            # Update global best and its score if the personal best is better
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[np.argmax(pso_global_best_scores)] = pso_global_best_scores[np.argmax(pso_global_best_scores)]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Weighted integration of DRL and PSO scores with feasibility
    for i in range(n):
        if feasible_items[i]:
            avg_reward = np.mean(model_rewards)
            weighted_score = model_scores[i] * (prize[i] / (prize[np.argmax(pso_global_best_scores)] + 1e-6)) + \
                             pso_global_best_scores[i] * (1 - model_scores[i])
            heuristic[i] = weighted_score
        else:
            heuristic[i] = 0

    # Dynamic sparsity tuning
    dynamic_threshold = np.percentile(heuristic, 50)
    heuristic[heuristic < dynamic_threshold] = 0

    # Enhanced reward function adaptivity with refined DRL scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined RL scores
    for i in range(n):
        heuristic[i] = new_model_scores[i] * prize[i] / (prize[np.argmax(pso_global_best_scores)] + 1e-6)

    # Final constraint-aware filtering
    heuristic[~feasible_items] = 0

    return heuristic
```
