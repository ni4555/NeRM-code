```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) model scores
    model_scores = np.random.rand(n)
    reward_function = lambda x: -np.sum(x * np.log(1 + x))  # Minimize penalty for over-weighted items
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) parameters
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Check feasibility and initialize PSO global best
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')
    pso_global_best = pso_position[feasible_items]

    # Adaptive learning rate parameters
    learning_rate = 0.01
    inertia_weight = 0.5
    cognitive_constant = 1.5
    social_constant = 1.5

    # Run PSO with adaptive learning rate
    for _ in range(10):  # Small number of iterations for demonstration
        for i in range(n):
            if i in feasible_items:  # Consider only feasible items
                # Update velocity and position
                r1, r2 = np.random.rand(), np.random.rand()
                cognitive_velocity = cognitive_constant * r1 * (pso_personal_best[i] - pso_position[i])
                social_velocity = social_constant * r2 * (pso_global_best[i] - pso_position[i])
                pso_velocity[i] = inertia_weight * pso_velocity[i] + cognitive_velocity + social_velocity
                pso_position[i] += pso_velocity[i]
                pso_position[i] = np.clip(pso_position[i], 0, 1)

                # Update personal best
                if model_scores[i] > pso_personal_best_scores[i]:
                    pso_personal_best_scores[i] = model_scores[i]
                    pso_personal_best[i] = pso_position[i]

                # Update global best
                if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                    pso_global_best_scores[i] = pso_personal_best_scores[i]
                    pso_global_best[i] = pso_personal_best[i]

        # Update global best index
        global_best_index = np.argmax(pso_global_best_scores)

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Incorporate adaptive constraint-driven filtering
    # Initialize heuristic values based on DRL model scores
    heuristic = model_scores
    # Refine heuristic based on the weighted average of the best PSO score and prize
    heuristic[feasible_items] = pso_global_best_scores[feasible_items] * prize[feasible_items] / (pso_global_best_scores[global_best_index] * prize[global_best_index] + 1e-6)

    # Introduce diversity through mutation
    diversity_mutation = 0.01 * np.random.randn(n)
    heuristic = np.clip(heuristic + diversity_mutation, 0, 1)

    return heuristic
```
