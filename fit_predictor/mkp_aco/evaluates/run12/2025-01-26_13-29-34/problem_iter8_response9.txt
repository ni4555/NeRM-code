```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component (with pre-trained model)
    model_scores = np.random.rand(n)  # Pre-trained model scores

    # Adaptive constraint-driven filtering (with sparsity and enhanced feasibility checks)
    feasible_items = np.zeros(n, dtype=bool)
    for i in range(n):
        if np.any(weight[i, :] > 1):
            feasible_items[i] = False
        else:
            feasible_items[i] = True

    # Particle swarm optimization (with enhanced exploration and exploitation)
    global_best_index = np.argmax(model_scores)
    global_best_score = model_scores[global_best_index]
    velocities = np.random.rand(n)
    positions = np.random.rand(n)
    cognitive_velocity = np.random.rand(n)
    social_velocity = np.random.rand(n)

    # Simulate PSO evolution for demonstration purposes
    for _ in range(100):  # Number of iterations can be tuned
        cognitive_velocity = 0.8 * cognitive_velocity + 0.2 * (positions - global_best_index)
        social_velocity = 0.8 * social_velocity + 0.2 * (np.random.choice(np.where(model_scores > global_best_score)[0], 2, replace=False) - global_best_index)
        velocities = cognitive_velocity + social_velocity
        new_positions = positions + velocities
        new_positions[~feasible_items] = positions[~feasible_items]  # Maintain feasibility
        new_positions = np.clip(new_positions, 0, 1)  # Clamp positions between 0 and 1
        positions = new_positions

    # Update heuristics based on model scores, PSO positions, and feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            # Adjusting the heuristic score to account for multiple objectives
            score = model_scores[i] * (prize[i] / (prize[global_best_index] + 1e-6))
            # Incorporate feasibility into the heuristic
            heuristic[i] = score if feasible_items[i] else 0

            # Adaptive balance between computational efficiency and adaptability
            # This could be a more complex rule set depending on the dynamic environment
            # Here, we simply decrease the weight of less promising items
            if score < global_best_score * 0.5:
                heuristic[i] *= 0.9

    # Sparsify heuristics by setting less promising items to zero
    sparsity_threshold = np.percentile(heuristic[feasible_items], 10)
    heuristic[heuristic < sparsity_threshold] = 0

    return heuristic
```
