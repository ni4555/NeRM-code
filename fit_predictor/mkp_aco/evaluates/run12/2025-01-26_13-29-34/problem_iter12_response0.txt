```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Deep reinforcement learning component with an improved reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(np.var(x) ** 2)
    model_rewards = [reward_function(model_scores)]

    # Adaptive constraint-driven filtering to maintain multi-dimensional feasibility
    constraint_violation = np.sum(weight, axis=1) > 1
    feasible_items = ~constraint_violation

    # Initialize Particle Swarm Optimization (PSO) components
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Initialize PSO global best with RL scores
    pso_global_best_scores[~feasible_items] = float('-inf')

    # Define adaptive sparsity and learning rate
    sparsity_threshold = np.percentile(model_scores, 50)
    learning_rate = 0.01
    iteration_limit = 100
    convergence_threshold = 1e-5

    # Run PSO with adaptive learning rate and more iterations
    for iteration in range(iteration_limit):
        for i in range(n):
            # Update the velocity and position
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)
            
            # Update personal best and its score
            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]
                
            # Update global best and its score if the personal best is better
            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        # Check for convergence
        if np.linalg.norm(pso_global_best_scores - pso_global_best_scores[-1]) < convergence_threshold:
            break

        # Update RL scores based on the best PSO score
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]

        # Update rewards for RL
        model_rewards.append(reward_function(model_scores))

    # Update heuristics based on the weighted average of RL and PSO scores, considering feasibility
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = (avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))) + \
                           (pso_global_best[i] * (1 - avg_reward))

    # Refine sparsity threshold based on the heuristic scores
    sparsity_threshold = np.percentile(heuristic[feasible_items], 50)
    heuristic[heuristic < sparsity_threshold] = 0

    # Adapt heuristics for individual objectives by balancing constraints with exploration
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] *= 0.9  # Decrease the heuristic for infeasible items

    # Adjust sparsity threshold and heuristics for better diversity and balance
    diversity_factor = np.mean(np.var(pso_global_best_scores))
    heuristic = heuristic * (1 + diversity_factor * (1 - np.abs(heuristic)))

    # Fine-tune heuristics based on convergence and feasibility
    convergence_threshold = np.std(model_rewards[-20:])  # Assuming the last 20 iterations are close to convergence
    heuristic[heuristic < convergence_threshold] = 0

    return heuristic
```
