```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic = np.zeros(n)
    
    # Initialize reinforcement learning parameters
    rl_lr = 0.01
    rl_weights = np.random.rand(n)

    # Initialize particle swarm optimization parameters
    ps_best_fit = np.zeros(n)
    ps_global_best = np.zeros(n)
    ps_particles = np.random.rand(n, n)
    ps_velocity = np.random.rand(n, n)
    
    # Initialize adaptive constraint-driven filtering parameters
    alpha = 0.01
    threshold = 1 - (m * 0.95)
    
    # Deep reinforcement learning for real-time decision-making
    for episode in range(1000):
        for i in range(n):
            if np.sum(weight[i]) <= threshold:
                action = np.random.choice([0, 1], p=[1 - rl_weights[i], rl_weights[i]])
                heuristic[i] = prize[i] if action == 1 else 0
            else:
                heuristic[i] = 0
            rl_weights[i] = max(rl_weights[i] * (1 - rl_lr), 0)

    # Use a single pass to calculate the total prize for each starting index
    cumulative_weight = np.zeros(n)
    for i in range(n):
        for j in range(i, n):
            cumulative_weight[j] += weight[j]
            if cumulative_weight[j] > threshold:
                break
        else:
            heuristic[i] = np.sum(prize[i:j])

    # Particle swarm optimization for evolutionary swarm intelligence
    for iteration in range(100):
        for i in range(n):
            # Update velocities and positions
            for j in range(n):
                ps_velocity[i][j] = 0.5 * ps_velocity[i][j] + 0.5 * (ps_best_fit[i] - ps_particles[i][j])
                ps_particles[i][j] += ps_velocity[i][j]
            
            # Evaluate fitness and update best fit
            fit = heuristic[i] * (1 / (1 + (1 - cumulative_weight[i] <= threshold) ** alpha))
            if fit > ps_best_fit[i]:
                ps_best_fit[i] = fit
                if fit > ps_global_best[i]:
                    ps_global_best[i] = fit
                    ps_particles[ps_global_best == ps_global_best] = ps_particles[i]
        
        # Update heuristic with the global best particle
        heuristic = ps_global_best.copy()
    
    # Filter out items that do not satisfy the constraints
    heuristic[cumulative_weight > threshold] = 0
    
    return heuristic
```
