```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    heuristic = np.zeros((n,))

    # Initialize Deep Reinforcement Learning (DRL) with an adaptive reward function
    model_scores = np.random.rand(n)
    reward_function = lambda x: np.sum(x * np.log(1 + x))
    model_rewards = [reward_function(model_scores)]

    # Initialize Particle Swarm Optimization (PSO) with adaptive learning rate
    pso_position = np.random.rand(n)
    pso_velocity = np.zeros(n)
    pso_personal_best = np.copy(pso_position)
    pso_global_best = np.copy(pso_position)
    pso_personal_best_scores = np.copy(model_scores)
    pso_global_best_scores = np.copy(model_scores)

    # Check feasibility and initialize PSO global best
    feasible_items = np.sum(weight, axis=1) <= 1
    pso_global_best_scores[~feasible_items] = float('-inf')

    # Adaptive sparsity setup using percentile
    sparsity_threshold = np.percentile(model_scores, 25)
    learning_rate = 0.01

    # PSO iterations with adaptive learning rate
    for _ in range(10):
        for i in range(n):
            pso_velocity[i] = learning_rate * pso_velocity[i] + \
                              (0.5 * (np.random.rand() - 0.5))
            pso_position[i] += pso_velocity[i]
            pso_position[i] = np.clip(pso_position[i], 0, 1)

            if model_scores[i] > pso_personal_best_scores[i]:
                pso_personal_best_scores[i] = model_scores[i]
                pso_personal_best[i] = pso_position[i]

            if pso_personal_best_scores[i] > pso_global_best_scores[i]:
                pso_global_best_scores[i] = pso_personal_best_scores[i]
                pso_global_best[i] = pso_personal_best[i]

        global_best_index = np.argmax(pso_global_best_scores)
        model_scores[~feasible_items] = float('-inf')
        model_scores[global_best_index] = pso_global_best_scores[global_best_index]
        model_rewards.append(reward_function(model_scores))

    # Update heuristics considering feasibility and reward
    for i in range(n):
        if not feasible_items[i]:
            heuristic[i] = 0
        else:
            avg_reward = np.mean(model_rewards)
            heuristic[i] = avg_reward * (prize[i] / (prize[global_best_index] + 1e-6))

    # Enhance diversity by ensuring some randomness in non-feasible regions
    random_items = ~feasible_items
    if np.sum(random_items) > 0:
        random_index = np.random.choice(np.sum(random_items))
        random_item_index = np.argmax(weight[:, random_items][random_index])
        heuristic[random_item_index] += np.random.rand()

    # Integrate adaptive constraint-driven filtering
    feasible_items = np.sum(weight, axis=1) <= 1
    heuristic[~feasible_items] = 0

    # Balance exploration-exploitation by incorporating a threshold
    exploration_rate = 0.1 + 0.9 * np.random.rand()
    exploitation_rate = 0.9 - 0.1 * np.random.rand()
    heuristic = (exploration_rate * np.random.rand(n)) + (exploitation_rate * heuristic)

    # Refined reward mechanism with updated model_scores
    new_reward_function = lambda x: np.sum(x * np.log(1 + x)) + np.sum(x * heuristic)
    new_model_scores = np.exp(new_reward_function(model_scores) - np.max(new_reward_function(model_scores)))
    new_model_scores /= np.sum(new_model_scores)

    # Update heuristics based on the refined scores
    heuristic = new_model_scores * prize / (prize[global_best_index] + 1e-6)

    # Mutation: Add diversity by perturbing the heuristics slightly
    perturbation = np.random.normal(0, 0.03, n)  # Reduced perturbation to maintain stability
    heuristic += perturbation

    # Ensure that the heuristics are still positive and within the [0, 1] range
    heuristic = np.clip(heuristic, 0, 1)

    return heuristic
```
