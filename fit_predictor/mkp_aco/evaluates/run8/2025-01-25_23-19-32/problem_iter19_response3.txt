```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Encourage diversity by penalizing items that are too similar to others
    diversity_factor = 1 / np.exp(-np.dot(item_importance, item_importance.T))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine item value, diversity, and sparsity with adaptive factors
    combined_value_diversity = item_importance * diversity_factor * sparsity_factor
    
    # Dynamically adjust the importance to balance between high-value items and diverse selection
    average_heuristic = np.mean(combined_value_diversity)
    adjusted_importance = combined_value_diversity * (1 + np.exp(-average_heuristic))
    
    # Use a sigmoid function to enforce diversity
    sigmoid = lambda x: 1 / (1 + np.exp(-x))
    adjusted_importance = sigmoid(adjusted_importance)
    
    # Normalize heuristics to ensure they sum to 1
    heuristics = adjusted_importance / np.sum(adjusted_importance)
    
    return heuristics
```
