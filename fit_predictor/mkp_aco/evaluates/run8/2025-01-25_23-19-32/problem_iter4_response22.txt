```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio
    ratio = prize / np.sum(weight, axis=1)
    # Introduce a sparsity factor based on the number of dimensions
    sparsity_factor = np.min(ratio) / np.max(ratio)
    # Calculate a threshold for sparsification
    threshold = sparsity_factor * np.max(ratio)
    # Incorporate the sparsity factor in the heuristics by using a linear interpolation
    heuristics = np.interp(ratio, [0, threshold], [0, 1])
    return heuristics
```
