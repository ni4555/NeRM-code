```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce diversity by also considering the maximum prize to the least normalized weight ratio
    diversity_factor = prize / (np.argmax(weight_normalized))
    
    # Balance diversity and item importance
    balanced_importance = (1 + diversity_factor) * item_importance / (1 + np.abs(item_importance - 0.5))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Apply domain-specific heuristic to weight importance by multiplying by an adaptation factor
    adaptation_factor = 1 - np.sum(weight**2, axis=1)
    weight_heuristic = weight * adaptation_factor / np.sum(adaptation_factor)
    
    # Combine heuristics: balance diversity with item importance, sparsity, and adapted weight
    combined_heuristics = balanced_importance * sparsity_factor * weight_heuristic
    
    # Normalize the combined heuristics
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
