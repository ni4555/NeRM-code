```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness to the heuristic calculation
    random_factor = np.random.rand(len(item_importance))
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine factors and adjust based on variance
    variance_factor = np.var(item_importance)
    combined_value_diversity = (item_importance * diversity_factor * sparsity_factor) * (1 + variance_factor)
    
    # Use domain insights to adjust the heuristic calculation
    domain_factor = (prize / (np.sqrt(variance_factor) * weight_normalized))
    
    # Adjust for balance between sparsity and importance
    adjusted_importance = combined_value_diversity * domain_factor * random_factor
    
    # Apply a threshold to promote sparsity and balance
    threshold = 0.5
    adjusted_importance[adjusted_importance < threshold] = 0
    
    # Normalize heuristics to encourage variety without uniformity
    heuristics = adjusted_importance / np.sum(adjusted_importance)
    
    return heuristics
```
