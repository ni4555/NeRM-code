```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio
    ratio = prize / np.sum(weight, axis=1)
    # Consider sparsity by ensuring diversity in the ratio
    sparsity_factor = 1 / (np.sum(1 / (ratio + 1e-5), axis=1))  # Adding a small constant to avoid division by zero
    # Consider diversity by measuring the spread of the ratio
    diversity_factor = 1 / (np.std(ratio))  # Standard deviation of the ratio
    # Incorporate domain knowledge into a custom factor
    domain_specific_factor = np.mean(prize)  # Example domain-specific factor
    # Combine factors to get a base heuristic score
    combined_heuristics = ratio * sparsity_factor * diversity_factor * domain_specific_factor
    # Normalize the heuristics to a scale between 0 and 1
    heuristics = combined_heuristics / np.max(combined_heuristics)
    return heuristics
```
