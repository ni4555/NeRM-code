```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce a random factor to encourage exploration
    random_factor = np.random.rand(len(item_importance))
    
    # Integrate domain insights for balanced variance and sparsity
    variance_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate sparsity factor
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Balance variance and sparsity with local and global measures
    local_variance = np.mean(sparsity_factor)
    local_variance_factor = variance_factor * sparsity_factor + local_variance
    
    # Adjust importance dynamically
    average_heuristic = np.mean(item_importance * random_factor * variance_factor * sparsity_factor)
    adjusted_importance = item_importance * random_factor * variance_factor * sparsity_factor * (1 + np.exp(-average_heuristic))
    
    # Use a sparsity adjustment factor to enforce diversity
    sparsity_adjustment = np.max(sparsity_factor) - sparsity_factor
    adjusted_importance *= sparsity_adjustment
    
    # Set a lower threshold for heuristics to enforce diversity
    lower_threshold = 0.1
    adjusted_importance[adjusted_importance < lower_threshold] = lower_threshold
    
    # Normalize heuristics to encourage variety
    heuristics = adjusted_importance
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
