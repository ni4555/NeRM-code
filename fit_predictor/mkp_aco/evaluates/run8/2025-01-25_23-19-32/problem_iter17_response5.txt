```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce exploration and exploitation by adding randomness and a greedy component
    random_explore = np.random.rand(len(prize))
    greedy_exploit = np.exp(item_importance)
    
    # Combine exploration and exploitation
    heuristics = random_explore * greedy_exploit
    
    # Sparsify the heuristics by setting low values to zero
    sparsity_threshold = np.quantile(heuristics, 0.1)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Adjust heuristics to ensure a balance between exploration and exploitation
    balance_factor = 1 / (1 + np.exp(-np.mean(heuristics)))
    heuristics *= balance_factor
    
    # Normalize heuristics to maintain diversity
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
