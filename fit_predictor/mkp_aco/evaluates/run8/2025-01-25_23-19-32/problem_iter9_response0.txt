```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce a dynamic diversity factor by penalizing items with similar importance
    diversity_factor = np.exp(-np.sum(item_importance**2, axis=0) / np.max(item_importance**2))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, diversity, and sparsity factors
    combined_heuristics = item_importance * diversity_factor * sparsity_factor
    
    # Apply a dynamic threshold based on a weighted sum of importance and sparsity
    dynamic_threshold = 0.2 * item_importance + 0.8 * sparsity_factor
    
    # Enforce diversity and sparsity by setting elements below threshold to zero
    heuristics = np.where(combined_heuristics >= dynamic_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
