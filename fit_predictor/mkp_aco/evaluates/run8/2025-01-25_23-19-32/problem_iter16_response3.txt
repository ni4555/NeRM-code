```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value-to-weight ratio for each item
    value_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the adjusted value-to-weight ratio by considering variance
    adjusted_value_weight_ratio = value_weight_ratio / (1 + np.var(value_weight_ratio, axis=0) * 0.01)
    
    # Introduce diversity by penalizing similarity
    diversity_factor = 1 / (1 + np.exp(-adjusted_value_weight_ratio))
    
    # Introduce sparsity by considering the squared weights
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2)
    
    # Consider the dimension-specific diversity by using the average diversity across dimensions
    dimension_diversity = np.mean(diversity_factor, axis=0)
    adjusted_diversity_factor = diversity_factor / dimension_diversity
    
    # Combine all factors to create a heuristic for each item
    heuristics = adjusted_diversity_factor * sparsity_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = heuristics / np.sum(heuristics)
    
    return heuristics
```
