```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce a randomness factor to encourage diversity
    randomness_factor = np.random.rand(len(item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, randomness, and sparsity factors
    combined_heuristics = item_importance * randomness_factor * sparsity_factor
    
    # Introduce a balance factor to ensure importance and sparsity are balanced
    balance_factor = np.exp(item_importance) / (1 + np.exp(item_importance))
    
    # Final heuristics are a product of combined heuristics and balance factor
    heuristics = combined_heuristics * balance_factor
    
    # Apply a diversity threshold to enhance diversity in the selection
    diversity_threshold = 0.5
    heuristics[heuristics < diversity_threshold] = 0
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
