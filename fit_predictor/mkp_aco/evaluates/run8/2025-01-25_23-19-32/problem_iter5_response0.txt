```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce domain-specific factor such as diversity by ensuring no two items have the same heuristic
    domain_specific_factor = 1 - np.min(np.abs(np.argsort(-item_importance) - np.argsort(-item_importance)[::-1]), axis=0)
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, sparsity, and domain-specific factors
    combined_heuristics = item_importance * sparsity_factor * domain_specific_factor
    
    # Normalize the combined heuristics to maintain sum to 1 property
    combined_heuristics /= np.sum(combined_heuristics)
    
    # Apply a sparsity threshold to reduce the number of items considered
    sparsity_threshold = 0.7
    heuristics = np.where(combined_heuristics >= sparsity_threshold, combined_heuristics, 0)
    
    return heuristics
```
