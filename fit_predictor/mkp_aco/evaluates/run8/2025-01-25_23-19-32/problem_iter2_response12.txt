```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the interaction term for each item
    interaction_term = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Incorporate dimension-specific constraints by considering the sum of weights in each dimension
    dimension_constraints = np.sum(weight, axis=0)
    
    # Apply a sparsity factor to less promising items
    sparsity_factor = np.exp(-value_to_weight_ratio)
    
    # Calculate a composite heuristic based on value-to-weight ratio, interaction term, and dimension constraints
    composite_heuristic = (value_to_weight_ratio * sparsity_factor * (1 - interaction_term)) / dimension_constraints
    
    # Normalize the composite heuristic to ensure it is between 0 and 1
    max_heuristic = np.max(composite_heuristic)
    min_heuristic = np.min(composite_heuristic)
    normalized_heuristics = (composite_heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    return normalized_heuristics
```
