```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by the sum of weights for each item
    normalized_prize = prize / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Introduce non-linearity by applying a logarithmic transformation
    non_linear_prize = np.log1p(normalized_prize)  # log1p avoids log(0) by adding 1 before the logarithm
    
    # Encourage sparsity by applying a sparsity factor that diminishes with increased density
    sparsity_factor = np.exp(-np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1)))
    
    # Apply smoothing to mitigate fluctuations in the heuristics
    smoothing_term = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1)
    
    # Scale heuristics by global properties, such as the mean of the non-linear prize
    global_scale = np.mean(non_linear_prize)
    scaled_heuristics = non_linear_prize * sparsity_factor * smoothing_term * global_scale
    
    # Introduce a penalty for variance in the normalized prize to avoid uniform selections
    variance_penalty = np.var(normalized_prize) / np.mean(prize)
    penalty_heuristics = scaled_heuristics * (1 - variance_penalty)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = penalty_heuristics / np.sum(penalty_heuristics)
    
    return heuristics
```
