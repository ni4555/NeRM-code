```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Incorporate domain knowledge: consider items with higher prize weight ratio more promising
    domain_factor = np.exp(-item_importance / 10)
    
    # Calculate the diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item based on variance within its dimension
    sparsity_factor = np.mean(weight, axis=1) / np.sqrt(np.var(weight, axis=1))
    
    # Combine importance, diversity, and sparsity factors
    combined_heuristics = item_importance * diversity_factor * sparsity_factor * domain_factor
    
    # Dynamically adjust thresholds based on average importance
    avg_importance = np.mean(item_importance)
    lower_threshold = avg_importance * 0.5
    upper_threshold = avg_importance * 0.8
    
    # Selectively enhance sparsity by filtering heuristics between lower and upper thresholds
    heuristics = np.where(combined_heuristics < lower_threshold, 0, 
                           np.where(combined_heuristics > upper_threshold, combined_heuristics, 0))
    
    # Apply a diversity threshold to enhance diversity in the selection
    diversity_threshold = 0.2
    heuristics[heuristics > diversity_threshold] = diversity_threshold
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
