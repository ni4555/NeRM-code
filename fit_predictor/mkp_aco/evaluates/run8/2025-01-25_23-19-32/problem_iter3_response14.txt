```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    weight_normalized = np.sum(weight, axis=1)
    weight_sq = np.sum(weight**2, axis=1)
    item_importance = prize / weight_normalized
    importance_sparsity = 1 - (weight_sq / weight_normalized**2)
    diversity_factor = np.mean(weight, axis=1)  # Adding diversity factor based on average weight
    combined_heuristics = item_importance * importance_sparsity * diversity_factor
    threshold = np.max(combined_heuristics) * 0.75  # Adapt threshold based on the most promising item
    return np.where(combined_heuristics > threshold, combined_heuristics, 0)
```
