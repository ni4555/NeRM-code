```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to the average value
    average_prize = np.mean(prize)
    normalized_prize = prize / average_prize

    # Calculate the importance of each item based on normalized prize and variance in weight
    variance_weight = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    item_importance = normalized_prize / variance_weight

    # Calculate a sparsity factor that enhances the sparsity of the heuristics
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2)

    # Use a percentile threshold to define the importance level
    importance_threshold = np.percentile(item_importance, 90)

    # Selectively enhance the importance of the heuristics by setting values below the threshold to zero
    enhanced_importance = np.where(item_importance > importance_threshold, item_importance, 0)

    # Use a percentile threshold to define the sparsity level
    sparsity_threshold = np.percentile(sparsity_factor, 75)

    # Selectively sparsify the heuristics by setting values below the threshold to zero
    sparsified_sparsity = np.where(sparsity_factor > sparsity_threshold, sparsity_factor, 0)

    # Combine the factors to create the heuristics
    combined_heuristics = enhanced_importance * sparsified_sparsity

    # Normalize the heuristics to sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)

    return heuristics
```
