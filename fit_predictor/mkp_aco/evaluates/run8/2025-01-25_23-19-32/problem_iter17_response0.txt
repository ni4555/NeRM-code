```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate variance factor for exploration
    variance_factor = np.std(prize) / np.mean(prize)
    
    # Combine factors for heuristic calculation
    heuristics_base = item_importance * diversity_factor * variance_factor
    
    # Introduce a random factor to balance exploration with exploitation
    random_factor = np.random.rand(len(prize))
    
    # Adjust heuristics based on local and global measures
    adjusted_heuristics = heuristics_base * random_factor
    
    # Sparsify heuristics by setting a lower threshold
    lower_threshold = 0.01
    sparsified_heuristics = np.where(adjusted_heuristics >= lower_threshold, adjusted_heuristics, 0)
    
    # Normalize heuristics to maintain diversity without uniformity
    heuristics = sparsified_heuristics / np.sum(sparsified_heuristics)
    
    return heuristics
```
