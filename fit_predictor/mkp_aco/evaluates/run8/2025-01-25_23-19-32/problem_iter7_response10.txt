```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Integrate domain knowledge by considering item groups
    group_factors = np.array([1.2, 1.5, 1.1])  # Example domain knowledge factors for different groups
    group_indices = np.digitize(item_importance, bins=np.linspace(np.min(item_importance), np.max(item_importance), len(group_factors)), right=False)
    domain_knowledge_factor = group_factors[group_indices]
    
    # Combine importance, diversity, sparsity, and domain knowledge factors
    combined_heuristics = item_importance * diversity_factor * sparsity_factor * domain_knowledge_factor
    
    # Adjust combined heuristics based on sparsity
    adjusted_sparsity_factor = np.max(weight_normalized) / np.sum(weight_normalized)
    combined_heuristics *= adjusted_sparsity_factor
    
    # Enforce diversity by setting a lower threshold for heuristics
    lower_threshold = 0.1
    combined_heuristics[combined_heuristics < lower_threshold] = lower_threshold
    
    # Apply a diversity threshold to enhance diversity in the selection
    diversity_threshold = 0.4
    heuristics = np.where(combined_heuristics >= diversity_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
