```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Incorporate domain knowledge: if a weight is close to 1, it's more likely to be selected
    domain_knowledge_factor = weight_normalized >= 0.9
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, diversity, sparsity factors, and domain knowledge
    combined_heuristics = item_importance * diversity_factor * sparsity_factor * domain_knowledge_factor
    
    # Adapt thresholds dynamically based on the average prize value
    average_prize = np.mean(prize)
    lower_threshold = 0.1 * average_prize
    combined_heuristics[combined_heuristics < lower_threshold] = lower_threshold
    
    # Apply a diversity threshold to enhance diversity in the selection
    diversity_threshold = 0.4 * average_prize
    heuristics = np.where(combined_heuristics >= diversity_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
