```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Incorporate domain knowledge to adjust importance
    # Assuming domain knowledge suggests some items are always better, we apply a bonus
    bonus_items = np.random.choice(np.arange(len(prize)), size=int(len(prize) * 0.1), replace=False)
    item_importance[bonus_items] *= 1.5
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, diversity, and sparsity factors
    combined_heuristics = item_importance * diversity_factor * sparsity_factor
    
    # Dynamically adapt thresholds based on the average importance
    average_importance = np.mean(item_importance)
    lower_threshold = 0.5 * average_importance
    combined_heuristics[combined_heuristics < lower_threshold] = lower_threshold
    
    # Enhance diversity by reducing the impact of non-diverse items
    diversity_threshold = 0.6
    non_diverse_items = np.where(np.abs(np.diff(item_importance)) < 0.1)[0]
    combined_heuristics[non_diverse_items] *= 0.5
    
    # Apply a diversity threshold to enhance diversity in the selection
    heuristics = np.where(combined_heuristics >= diversity_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
