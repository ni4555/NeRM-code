```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate a sparsity factor for each item
    sparsity_factor = np.sum(weight**2, axis=1) / np.sum(weight**4, axis=1)
    
    # Combine importance, diversity, and sparsity factors with domain knowledge
    combined_heuristics = (item_importance * diversity_factor * sparsity_factor)
    
    # Dynamically adapt thresholds using a combination of percentile and median
    combined_heuristics = combined_heuristics / combined_heuristics.sum()
    lower_threshold = np.percentile(combined_heuristics, 20)
    higher_threshold = np.percentile(combined_heuristics, 80)
    
    # Filter out low-priority items based on the adaptive thresholds
    heuristics = np.where(combined_heuristics >= higher_threshold, combined_heuristics, 0)
    heuristics = np.where(combined_heuristics < lower_threshold, 0, heuristics)
    
    # Ensure the heuristics sum to 1 to maintain the probability distribution
    heuristics /= heuristics.sum()
    
    return heuristics
```
