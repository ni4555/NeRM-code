```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Normalize the prize by the average prize value
    average_prize = np.mean(prize)
    normalized_prize = prize / average_prize
    
    # Calculate the importance of each item based on normalized prize and inverse of weight
    item_importance = normalized_prize / (np.sum(weight, axis=1) / m)
    
    # Calculate a sparsity factor based on the variance of the weights
    variance_weight = np.var(weight, axis=1)
    sparsity_factor = 1 - (variance_weight / np.sum(weight**2, axis=1))
    
    # Incorporate domain knowledge by adjusting the importance with a specific factor
    domain_knowledge_factor = 0.7  # Example factor, adjust based on domain specifics
    
    # Adjust the sparsity factor to emphasize the diversity of weights
    adjusted_sparsity_factor = sparsity_factor ** 2
    
    # Use a variance of variance metric to further emphasize diversity
    variance_of_variance = np.var(variance_weight)
    
    # Combine the factors to create the heuristics
    combined_heuristics = item_importance * adjusted_sparsity_factor * domain_knowledge_factor / variance_of_variance
    
    # Normalize the heuristics to sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
