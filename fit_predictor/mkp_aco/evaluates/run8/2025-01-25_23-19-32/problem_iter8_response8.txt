```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the inverse of the average weight for each dimension
    inverse_avg_weight = 1 / np.mean(weight, axis=1)
    
    # Calculate the heuristic by normalizing the prize with the inverse of the average weight
    heuristic = prize * inverse_avg_weight
    
    # Square the heuristic to enhance non-linearity
    heuristic = np.square(heuristic)
    
    # Apply a smoothing term by normalizing the weight
    smoothing_term = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1)
    
    # Combine the heuristics with the smoothing term
    combined_heuristic = heuristic + smoothing_term
    
    # Normalize the combined heuristics to account for different scales
    normalized_combined_heuristic = combined_heuristic / np.max(combined_heuristic)
    
    # Introduce sparsity by setting a threshold based on the 90th percentile of the normalized combined heuristics
    sparsity_threshold = np.percentile(normalized_combined_heuristic, 90)
    heuristics = np.where(normalized_combined_heuristic < sparsity_threshold, 0, normalized_combined_heuristic)
    
    return heuristics
```
