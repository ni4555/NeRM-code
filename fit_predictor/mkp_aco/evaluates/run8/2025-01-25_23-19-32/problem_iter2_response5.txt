```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the variance of the value-to-weight ratio
    sparsity_factor = np.exp(-np.var(value_to_weight_ratio, axis=0))
    
    # Calculate the diversity factor by considering the average weight
    diversity_factor = np.mean(weight, axis=1) / np.mean(np.mean(weight, axis=1))
    
    # Combine factors into a composite heuristic
    composite_heuristic = value_to_weight_ratio * sparsity_factor * diversity_factor
    
    # Normalize the heuristic to ensure it is between 0 and 1
    max_heuristic = np.max(composite_heuristic)
    min_heuristic = np.min(composite_heuristic)
    heuristics = (composite_heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Set elements below a certain threshold to zero for sparsity
    threshold = 0.01
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
