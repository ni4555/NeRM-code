```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value-to-weight ratio for each item
    value_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the variance of the value-to-weight ratios
    variance = np.var(value_weight_ratio, axis=0)
    
    # Calculate the average weight for each item
    average_weight = np.mean(weight, axis=1)
    
    # Compute the heuristic based on the ratio, variance, and average weight
    heuristics = value_weight_ratio / (1 + variance * 0.01) - average_weight / np.mean(average_weight) + 1
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    # Introduce sparsity by setting a threshold and pruning below it
    threshold = np.percentile(heuristics, 25)  # Use the 25th percentile as the threshold
    heuristics[heuristics < threshold] = 0
    
    # Apply a non-linear transformation to emphasize high-value items
    non_linear_factor = np.exp(-heuristics)
    
    # Normalize the non-linear heuristics to sum to 1
    non_linear_heuristics = non_linear_factor / np.sum(non_linear_factor)
    
    return non_linear_heuristics
```
