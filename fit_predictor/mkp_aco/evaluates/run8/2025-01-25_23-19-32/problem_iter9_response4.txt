```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, diversity, and sparsity factors
    combined_heuristics = item_importance * diversity_factor * sparsity_factor
    
    # Introduce a dynamic adjustment to the diversity factor based on the average importance
    average_importance = np.mean(item_importance)
    dynamic_diversity_factor = diversity_factor * (1 + np.random.normal(0, 0.05, size=n))
    combined_heuristics *= dynamic_diversity_factor
    
    # Adjust the heuristics to maintain a certain level of sparsity
    sparsity_threshold = 0.2
    combined_heuristics[combined_heuristics < sparsity_threshold] = 0
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
