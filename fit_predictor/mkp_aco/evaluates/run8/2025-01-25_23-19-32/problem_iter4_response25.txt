```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio
    value_weight_ratio = prize / np.sum(weight, axis=1)
    # Normalize the ratio by adding a small constant to avoid division by zero
    value_weight_ratio = value_weight_ratio + 1e-10
    # Calculate the diversity score as the variance of the normalized ratio
    diversity_score = np.var(value_weight_ratio, axis=0)
    # Calculate the average prize per item for each dimension
    average_prize_per_item = np.mean(prize, axis=0) / weight.shape[1]
    # Calculate the average weight per item for each dimension
    average_weight_per_item = np.mean(weight, axis=1)
    # Combine diversity, average prize per item, and average weight per item into the heuristic
    heuristics = diversity_score * (prize / average_prize_per_item) - average_weight_per_item
    # Normalize the heuristics by the maximum heuristic value
    heuristics = heuristics / np.max(heuristics)
    # Introduce sparsity by pruning the lowest values based on a threshold
    threshold = np.min(heuristics) * 0.5
    heuristics[heuristics < threshold] = 0
    return heuristics
```
