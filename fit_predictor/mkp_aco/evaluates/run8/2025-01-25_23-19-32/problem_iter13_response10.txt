```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce a randomness factor to avoid local optima
    randomness_factor = np.random.rand(len(item_importance))
    
    # Calculate diversity factor based on variance
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Dynamically adjust heuristic weights for balance
    average_heuristic = np.mean(item_importance * diversity_factor * sparsity_factor * randomness_factor)
    adjusted_importance = item_importance * diversity_factor * sparsity_factor * randomness_factor * (1 + np.exp(-average_heuristic))
    
    # Introduce a balance factor to ensure a balance between importance and sparsity
    balance_factor = 0.5
    adjusted_importance *= balance_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = adjusted_importance / np.sum(adjusted_importance)
    
    return heuristics
```
