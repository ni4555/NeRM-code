```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by their sum to get a weight per item
    weight_per_item = weight / np.sum(weight, axis=1, keepdims=True)
    # Calculate importance based on prize and normalized weight
    importance = prize * weight_per_item
    # Calculate sparsity by considering the standard deviation of importance
    sparsity = np.std(importance, axis=1)
    # Use the 90th percentile of sparsity as a threshold for diversity
    sparsity_threshold = np.percentile(sparsity, 90)
    # Select items that have a high sparsity value
    high_sparsity_items = importance > sparsity_threshold
    # Normalize the importance to get a probability distribution
    normalized_importance = importance / np.sum(importance, axis=1, keepdims=True)
    # Introduce randomness to enhance diversity
    randomized_importance = normalized_importance * np.random.random_sample((len(normalized_importance),)) * 0.5
    # Combine the high sparsity selection with the randomized importance
    heuristics = np.where(high_sparsity_items, randomized_importance, 0)
    return heuristics
```
