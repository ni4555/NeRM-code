```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce a variance factor to encourage exploration
    variance_factor = np.mean(np.var(weight, axis=1))
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / np.exp(-item_importance)
    
    # Normalize variance and diversity factors to ensure they are on the same scale
    normalized_variance = variance_factor / np.max(variance_factor)
    normalized_diversity = diversity_factor / np.max(diversity_factor)
    
    # Integrate a local optimization heuristic to balance exploration and exploitation
    local_optimization = np.exp(-np.sum(weight, axis=1))
    
    # Combine all factors into the heuristic value
    combined_heuristic = item_importance * normalized_variance * normalized_diversity * local_optimization
    
    # Introduce randomness to prevent premature convergence
    randomness = np.random.rand(len(item_importance))
    
    # Adjust heuristics based on randomness to balance exploration and exploitation
    adjusted_heuristics = combined_heuristic * (1 + randomness - np.max(randomness))
    
    # Sparsify the heuristics by setting low-value heuristics to zero
    sparsity_threshold = np.percentile(adjusted_heuristics, 25)
    adjusted_heuristics[adjusted_heuristics < sparsity_threshold] = 0
    
    # Normalize heuristics to ensure they sum to 1
    heuristics = adjusted_heuristics / np.sum(adjusted_heuristics)
    
    return heuristics
```
