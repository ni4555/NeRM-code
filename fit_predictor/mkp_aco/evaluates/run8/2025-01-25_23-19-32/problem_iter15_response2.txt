```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness based on importance, to prevent uniform selection
    random_factor = np.random.rand(len(item_importance))
    importance_with_randomness = item_importance * random_factor
    
    # Emphasize variance by increasing the weight of items with higher importance variability
    variance_factor = np.std(item_importance) * importance_with_randomness / np.max(item_importance)
    
    # Apply domain insight that items with higher diversity of weights should be considered
    diversity_factor = 1 / np.linalg.norm(weight, axis=1)
    
    # Calculate the heuristic combining the factors
    combined_heuristic = importance_with_randomness * variance_factor * diversity_factor
    
    # Enforce sparsity by setting a lower threshold for heuristics
    lower_threshold = 0.1
    combined_heuristic[combined_heuristic < lower_threshold] = lower_threshold
    
    # Normalize heuristics to encourage variety without uniformity
    heuristics = combined_heuristic / np.sum(combined_heuristic)
    
    return heuristics
```
