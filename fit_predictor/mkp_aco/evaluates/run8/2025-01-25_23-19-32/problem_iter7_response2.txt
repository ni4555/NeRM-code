```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Incorporate domain knowledge: adjust the importance based on the item's total weight across dimensions
    total_weight = np.sum(weight, axis=1)
    domain_knowledge_factor = 1 / (1 + np.exp(-total_weight / (weight_normalized + 1)))
    adjusted_importance = item_importance * domain_knowledge_factor
    
    # Combine importance, diversity, and sparsity factors
    combined_heuristics = adjusted_importance * diversity_factor * sparsity_factor
    
    # Apply a dynamic threshold to heuristics based on the total prize
    total_prize = np.sum(prize)
    if total_prize > 0:
        dynamic_threshold = total_prize / np.sum(combined_heuristics)
    else:
        dynamic_threshold = 0
    
    # Select items based on the adjusted combined heuristics and dynamic threshold
    heuristics = np.where(combined_heuristics >= dynamic_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
