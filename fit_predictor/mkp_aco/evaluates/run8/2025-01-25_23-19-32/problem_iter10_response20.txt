```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the squared weights
    sparsity_factor = 1 / np.sqrt(np.sum(weight**2, axis=1))
    
    # Calculate the diversity factor to encourage selecting a variety of items
    diversity_factor = np.exp(-np.sum(weight**2, axis=1))
    
    # Combine factors to create a heuristic value, introducing a non-linear transformation
    combined_heuristics = np.tanh(ratio * sparsity_factor * diversity_factor)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
