```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness to encourage a wider distribution of heuristics
    randomness_factor = np.random.rand(len(item_importance))
    
    # Calculate diversity by considering the variance in importance
    diversity_factor = np.var(item_importance)
    
    # Balance between high-value and diverse selection
    balanced_factor = (item_importance * diversity_factor)
    
    # Use sparsity to avoid over-reliance on any single item
    sparsity_factor = 1 - np.mean(weight**2 / weight_normalized**2)
    
    # Combine factors with an adaptive weighting scheme
    combined_heuristics = (balanced_factor + randomness_factor) * sparsity_factor
    
    # Enforce a diversity threshold to ensure variety in the solution
    diversity_threshold = 0.5
    combined_heuristics[combined_heuristics < diversity_threshold] = diversity_threshold
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
