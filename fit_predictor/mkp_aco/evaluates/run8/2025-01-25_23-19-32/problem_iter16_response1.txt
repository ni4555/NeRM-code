```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness by adding a small Gaussian noise to importance
    noise = np.random.normal(0, 0.01, item_importance.shape)
    randomized_importance = item_importance + noise
    
    # Calculate diversity factor based on variance
    diversity_factor = 1 / (1 + np.exp(-randomized_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Emphasize high-value items by using a logarithmic scale
    value_emphasis = np.log(1 + randomized_importance)
    
    # Balance the factors by combining them with a weighted sum
    balanced_factor = value_emphasis * diversity_factor * sparsity_factor
    
    # Normalize the balanced factor to maintain a balance between factors
    normalized_balanced_factor = balanced_factor / np.sum(balanced_factor)
    
    # Introduce additional randomness for exploration
    random_factor = np.random.rand(len(balanced_factor))
    
    # Combine the balanced factor with randomness
    combined_heuristics = normalized_balanced_factor * random_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
