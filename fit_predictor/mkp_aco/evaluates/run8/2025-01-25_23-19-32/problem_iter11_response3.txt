```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Introduce a novelty factor based on the minimum weight ratio
    min_weight_ratio = np.min(weight / prize, axis=1)
    novelty_factor = min_weight_ratio / np.sum(min_weight_ratio)
    
    # Combine importance, diversity, and novelty factors
    combined_heuristics = item_importance * diversity_factor * novelty_factor
    
    # Normalize the combined heuristics to ensure they sum to 1
    combined_heuristics /= np.sum(combined_heuristics)
    
    # Create sparsity by setting a lower threshold and setting lower values to zero
    lower_threshold = 0.05
    sparsity_heuristics = np.where(combined_heuristics >= lower_threshold, combined_heuristics, 0)
    
    # Ensure that at least a certain amount of heuristics are set to 1 for diversity
    num_to_set_one = int(np.floor(sparsity_heuristics.size * 0.3))
    random_indices = np.random.choice(sparsity_heuristics.size, num_to_set_one, replace=False)
    sparsity_heuristics[random_indices] = 1
    
    return sparsity_heuristics
```
