```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate the diversity factor to encourage selecting diverse items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate sparsity factor to penalize highly weighted items
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Calculate a dynamic balance factor based on the average prize to weight ratio
    balance_factor = np.sum(item_importance) / n
    
    # Combine importance, diversity, and sparsity factors using a weighted sum
    combined_factors = (item_importance * 0.4 + diversity_factor * 0.3 + sparsity_factor * 0.3)
    
    # Adjust combined factors by the balance factor to maintain overall balance
    adjusted_combined_factors = combined_factors * balance_factor
    
    # Calculate the total prize to normalize heuristics
    total_prize = np.sum(prize)
    
    # Normalize heuristics to ensure they sum to 1, and apply a local density factor
    heuristics = adjusted_combined_factors / total_prize * np.exp(-np.sum(weight**2, axis=1) / np.sum(weight, axis=1))
    
    return heuristics
```
