```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness based on a probability distribution
    random_factor = np.random.rand(len(prize))
    
    # Calculate the diversity factor
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Emphasize variance by penalizing items with high standard deviation in importance
    variance_penalty = np.std(item_importance)
    variance_factor = 1 / (1 + variance_penalty)
    
    # Combine all factors with domain insights
    combined_heuristic = item_importance * diversity_factor * sparsity_factor * random_factor * variance_factor
    
    # Adjust the importance based on average heuristic to balance between high-value items and diverse selection
    average_heuristic = np.mean(combined_heuristic)
    adjusted_importance = combined_heuristic * (1 + np.exp(-average_heuristic))
    
    # Introduce a lower threshold to ensure diversity
    lower_threshold = 0.1
    adjusted_importance[adjusted_importance < lower_threshold] = lower_threshold
    
    # Normalize the heuristics
    heuristics = adjusted_importance / np.sum(adjusted_importance)
    
    return heuristics
```
