```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate importance based on prize and normalized weight
    importance = prize / weight_normalized
    
    # Introduce randomness by adding a noise factor
    noise_factor = np.random.normal(0, 0.01, size=importance.shape)
    
    # Emphasize variance by adding a variance factor
    variance_factor = np.random.normal(0, 0.05, size=importance.shape)
    
    # Calculate a diversity factor
    diversity_factor = 1 / (1 + np.exp(-importance))
    
    # Calculate a sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine all factors to create heuristics
    heuristics = importance * (1 + noise_factor + variance_factor) * diversity_factor * sparsity_factor
    
    # Apply domain insights by setting a minimum heuristic level
    min_heuristic_level = 0.01
    heuristics = np.maximum(min_heuristic_level, heuristics)
    
    # Normalize heuristics to ensure the sum is 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
