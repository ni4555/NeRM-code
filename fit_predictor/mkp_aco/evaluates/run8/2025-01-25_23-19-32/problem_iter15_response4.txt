```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness to avoid getting stuck in local optima
    random_factor = np.random.rand(len(item_importance))
    
    # Calculate diversity factor to encourage selection of diverse items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Introduce variance to encourage exploration
    variance_factor = np.random.rand(len(item_importance))
    
    # Combine factors with an emphasis on importance, diversity, and variance
    combined_factors = item_importance * diversity_factor * variance_factor * random_factor
    
    # Sparsify heuristics by penalizing highly weighted items
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Dynamically adjust the importance to balance between high-value items and diverse selection
    average_combined_factors = np.mean(combined_factors)
    adjusted_combined_factors = combined_factors * (1 + np.exp(-average_combined_factors))
    
    # Enforce diversity by setting a lower threshold for heuristics
    lower_threshold = 0.1
    adjusted_combined_factors[adjusted_combined_factors < lower_threshold] = lower_threshold
    
    # Normalize heuristics to encourage variety without uniformity
    heuristics = adjusted_combined_factors * sparsity_factor
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
