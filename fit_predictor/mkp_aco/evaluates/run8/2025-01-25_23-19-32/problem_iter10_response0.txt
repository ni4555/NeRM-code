```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Calculate the value-to-weight ratio for each item
    value_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the variance and standard deviation of the value-to-weight ratio
    variance = np.var(value_weight_ratio, axis=0)
    std_dev = np.std(value_weight_ratio, axis=0)
    
    # Calculate the average weight per dimension
    average_weight = np.mean(weight, axis=1)
    
    # Combine the value-to-weight ratio with its variance and standard deviation
    # and adjust for the average weight
    combined = value_weight_ratio / (1 + variance * 0.01) - std_dev * 0.01 - average_weight / np.mean(average_weight) + 1
    
    # Introduce diversity by encouraging varied selection
    diversity_factor = 1 / (1 + np.exp(-combined))
    
    # Introduce sparsity by pruning the lowest values based on a threshold
    threshold = np.percentile(combined, 25)  # Use the 25th percentile as the threshold
    sparsity_factor = combined >= threshold
    
    # Balance the diversity and sparsity factors
    balance_factor = diversity_factor * sparsity_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = balance_factor / np.sum(balance_factor)
    
    return heuristics
```
