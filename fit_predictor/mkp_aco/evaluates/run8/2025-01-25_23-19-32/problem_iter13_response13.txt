```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Emphasize item importance based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(len(item_importance))
    
    # Calculate diversity factor based on variance
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine factors for a balanced heuristic
    combined_factor = item_importance * diversity_factor * sparsity_factor * random_factor
    
    # Dynamically adjust heuristics with a sigmoid function to balance factors
    heuristics = 1 / (1 + np.exp(-combined_factor))
    
    # Normalize heuristics to sum to 1
    heuristics /= heuristics.sum()
    
    # Sparsify heuristics by setting a lower threshold
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
