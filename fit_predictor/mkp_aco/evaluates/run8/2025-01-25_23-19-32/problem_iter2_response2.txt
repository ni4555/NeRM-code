```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize and weight to get a better distribution
    normalized_prize = prize / np.sum(prize)
    normalized_weight = np.sum(weight, axis=1) / np.sum(weight)

    # Combine normalized values into a single heuristic value
    combined_heuristics = normalized_prize * normalized_weight

    # Calculate sparsity based on a fraction of the max combined heuristic value
    max_combined = np.max(combined_heuristics)
    sparsity_threshold = max_combined / 2

    # Sparsify heuristics, considering a balance between high values and global maximum
    sparsified_heuristics = np.where(combined_heuristics > sparsity_threshold, combined_heuristics, 0)

    # Refine heuristics to encourage inclusion of high value-to-weight items
    sparsified_heuristics = sparsified_heuristics / np.sum(sparsified_heuristics) * 1

    return sparsified_heuristics
```
