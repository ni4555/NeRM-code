```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate diversity factor based on variance
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Use a more dynamic method to adjust heuristic weights for balance
    balance_factor = 0.5  # Assuming a balance factor between importance and sparsity
    adjusted_importance = balance_factor * item_importance + (1 - balance_factor) * diversity_factor * sparsity_factor
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(len(prize))
    adjusted_importance += random_factor * 0.1  # Randomness factor scaled to influence
    
    # Normalize heuristics while maintaining diversity and sparsity
    normalized_heuristics = adjusted_importance / np.sum(adjusted_importance)
    
    # Apply dynamic thresholding to heuristics
    diversity_threshold = np.quantile(normalized_heuristics, 0.1)  # Threshold at the 10th percentile for diversity
    sparsity_threshold = np.quantile(normalized_heuristics, 0.9)  # Threshold at the 90th percentile for sparsity
    
    heuristics = np.where(normalized_heuristics > diversity_threshold, 1, 0)
    heuristics = np.where(normalized_heuristics > sparsity_threshold, heuristics, 0)
    
    return heuristics
```
