```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Normalize prize to emphasize relative value
    average_prize = np.mean(prize)
    normalized_prize = prize / average_prize
    
    # Normalize weight across dimensions and scale by inverse of average weight
    normalized_weight = np.sum(weight, axis=1) / np.mean(np.sum(weight, axis=1))
    inverse_scaled_weight = normalized_weight / m
    
    # Use the normalized prize and scaled inverse weight for importance
    importance = normalized_prize * inverse_scaled_weight
    
    # Calculate diversity as the variance of weights, adjusted by a variance of variance metric
    variance_weight = np.var(weight, axis=1)
    variance_of_variance = np.var(variance_weight)
    diversity = variance_weight / (variance_of_variance + 1e-8)
    
    # Incorporate domain knowledge factor to balance diversity and importance
    domain_knowledge_factor = 0.5  # Adjust based on domain specifics
    
    # Combine importance and diversity, and apply domain knowledge
    heuristics = importance * diversity * domain_knowledge_factor
    
    # Introduce randomness to promote exploration and avoid premature convergence
    random_factor = np.random.rand(n)
    heuristics *= random_factor
    
    # Normalize heuristics to ensure the sum is 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
