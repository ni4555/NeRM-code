```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness for exploration by adding Gaussian noise
    noise = np.random.normal(0, 0.01, item_importance.shape)
    randomized_importance = item_importance + noise
    
    # Calculate diversity factor based on the variance of importance values
    diversity_factor = 1 / (1 + np.exp(-randomized_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Apply exponential transformation to emphasize both importance and diversity
    emphasized_importance = np.exp(randomized_importance)
    emphasized_diversity = np.exp(-diversity_factor)
    
    # Balance the emphasis with the sparsity factor
    balanced_factor = emphasized_importance * emphasized_diversity * sparsity_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = balanced_factor / np.sum(balanced_factor)
    
    return heuristics
```
