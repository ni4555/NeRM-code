```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate a penalty for sparsity and an incentive for dense items
    penalty_factor = 1 / np.sum(weight, axis=1)
    incentive_factor = 1 / np.sqrt(np.sum(weight**2, axis=1))
    
    # Create the heuristics array with balanced factors
    heuristics = ratio * (penalty_factor + incentive_factor)
    
    return heuristics
```
