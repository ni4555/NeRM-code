```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Incorporate domain knowledge: items with higher prize to weight ratio are more promising
    domain_knowledge_factor = item_importance * np.sum(weight**2, axis=1) / weight_normalized**2
    
    # Calculate a diversity factor to encourage selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine factors to create a heuristic value
    combined_heuristics = domain_knowledge_factor * diversity_factor * sparsity_factor
    
    # Normalize the combined heuristics to ensure they are between 0 and 1
    combined_heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    # Apply a sparsity threshold to the normalized heuristics
    sparsity_threshold = 0.3
    heuristics = np.where(combined_heuristics > sparsity_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = heuristics / np.sum(heuristics)
    
    return heuristics
```
