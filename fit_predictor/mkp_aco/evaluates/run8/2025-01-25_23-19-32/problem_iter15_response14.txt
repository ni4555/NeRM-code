```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(len(item_importance))
    
    # Calculate the diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate a variance factor to emphasize variance in selection
    variance_factor = np.var(random_factor)
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine item value, diversity, variance, and sparsity with adaptive factors
    combined_factors = item_importance * diversity_factor * variance_factor * sparsity_factor
    
    # Introduce a threshold to balance between high-value items and diverse selection
    threshold = np.max(combined_factors) * 0.9
    
    # Filter out items that do not meet the threshold to enforce diversity
    combined_factors[combined_factors < threshold] = 0
    
    # Normalize the heuristics to encourage variety without uniformity
    heuristics = combined_factors / np.sum(combined_factors)
    
    return heuristics
```
