```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Incorporate domain insights to balance variance and sparsity
    variance_factor = np.var(item_importance)
    
    # Emphasize item variance for exploration while maintaining sparsity
    variance_emphasis = 0.5
    variance_weighted_importance = (1 - variance_emphasis) * item_importance + variance_emphasis * (item_importance / variance_factor)
    
    # Balance exploration with exploitation using a randomized function
    exploration_factor = 0.1 * np.random.rand()
    exploration_weighted_importance = variance_weighted_importance * (1 + exploration_factor)
    
    # Enforce diversity by maintaining a minimum sparsity
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    minimum_sparsity = 0.5
    adjusted_sparsity = max(sparsity_factor, minimum_sparsity)
    
    # Combine item value with exploration and sparsity factors
    combined_heuristic = exploration_weighted_importance * adjusted_sparsity
    
    # Normalize heuristics to encourage variety without uniformity
    heuristics = combined_heuristic / np.sum(combined_heuristic)
    
    return heuristics
```
