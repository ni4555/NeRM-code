```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate variance to emphasize variance in the heuristic
    variance = np.var(item_importance)
    
    # Use a random factor to introduce some randomness
    random_factor = np.random.rand(len(item_importance))
    
    # Combine factors with some weights
    combined_factors = (item_importance * diversity_factor * variance + random_factor) / 3
    
    # Use sparsity factor for items
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Enforce diversity by setting a lower threshold for heuristics
    lower_threshold = 0.1
    combined_factors[combined_factors < lower_threshold] = lower_threshold
    
    # Normalize combined factors to encourage variety without uniformity
    heuristics = combined_factors * sparsity_factor
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
