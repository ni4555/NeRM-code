```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize for each item
    normalized_prize = prize / np.sum(prize)
    
    # Normalize weight for each dimension and sum to get a per-item weight
    normalized_weight = np.sum(weight, axis=1) / np.sum(weight, axis=1)
    
    # Create a heuristic by combining normalized prize and weight
    combined_heuristics = normalized_prize * normalized_weight
    
    # Calculate sparsity factor based on the difference between combined heuristics and the maximum heuristic
    sparsity_factor = np.exp(-combined_heuristics)
    
    # Adjust sparsity factor to emphasize items with higher combined heuristics
    sparsity_factor = (1 - sparsity_factor) / np.sum(1 - sparsity_factor)
    
    # Apply the adjusted sparsity factor to the combined heuristics
    sparsified_heuristics = combined_heuristics * sparsity_factor
    
    # Selectively sparsify heuristics by setting a threshold based on the average sparsified heuristic
    threshold = np.mean(sparsified_heuristics)
    
    # Return heuristics where the sparsified heuristic is above the threshold
    return np.where(sparsified_heuristics > threshold, sparsified_heuristics, 0)
```
