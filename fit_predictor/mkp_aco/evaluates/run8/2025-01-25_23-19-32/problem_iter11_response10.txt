```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate a sparsity factor for each item
    sparsity_factor = np.maximum(0, weight_normalized - np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, diversity, and sparsity factors with a balance factor
    balance_factor = 0.5
    combined_heuristics = (item_importance * balance_factor) + (diversity_factor * (1 - balance_factor))
    
    # Introduce a dynamic importance adjustment based on sparsity factor
    combined_heuristics *= sparsity_factor
    
    # Enforce diversity by setting a lower threshold for heuristics
    lower_threshold = 0.05
    combined_heuristics[combined_heuristics < lower_threshold] = lower_threshold
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
