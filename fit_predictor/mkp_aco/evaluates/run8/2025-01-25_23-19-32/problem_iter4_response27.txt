```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the weights for each item across all dimensions
    weight_normalized = np.sum(weight, axis=1)
    # Calculate the normalized prize to weight ratio
    item_importance = prize / weight_normalized
    # Calculate the importance sparsity based on the variance of importance
    importance_variance = np.var(item_importance)
    importance_sparsity = 1 - (importance_variance / weight_normalized**2)
    # Combine the importance and sparsity factors
    combined_heuristics = item_importance * importance_sparsity
    # Introduce a diversity factor based on the standard deviation
    diversity_factor = np.std(combined_heuristics)
    # Adjust the heuristics to introduce diversity
    heuristics = combined_heuristics / diversity_factor
    # Apply a sparsity threshold to reduce the number of items considered
    sparsity_threshold = 0.75
    heuristics[heuristics < sparsity_threshold] = 0
    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)
    return heuristics
```
