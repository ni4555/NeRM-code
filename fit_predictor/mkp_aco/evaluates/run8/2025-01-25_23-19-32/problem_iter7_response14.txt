```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Incorporate domain knowledge: items with higher prize to weight ratio and lower diversity are more promising
    domain_knowledge_factor = item_importance * np.sum(weight**2, axis=1) / weight_normalized**2
    
    # Calculate a diversity factor to encourage selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine factors to create a heuristic value
    combined_heuristics = domain_knowledge_factor * diversity_factor * sparsity_factor
    
    # Apply thresholds to balance factors and enforce diversity
    lower_threshold = 0.1
    diversity_threshold = 0.4
    combined_heuristics[combined_heuristics < lower_threshold] = lower_threshold
    combined_heuristics[combined_heuristics < diversity_threshold] = 0
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
