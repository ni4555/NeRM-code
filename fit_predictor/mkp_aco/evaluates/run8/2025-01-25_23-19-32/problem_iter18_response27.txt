```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Diversity factor to encourage selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Variance factor to encourage exploration of items with higher value variability
    variance_factor = item_importance / np.var(prize)
    
    # Randomness factor to allow exploration of less promising items
    randomness_factor = np.random.rand(len(item_importance))
    
    # Sparsity factor to encourage sparsity in the solution
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine all factors to get the heuristic for each item
    combined_heuristic = item_importance * diversity_factor * variance_factor * randomness_factor * sparsity_factor
    
    # Dynamically adjust heuristics to balance between exploration and exploitation
    exploration_exploitation_balance = np.random.rand(len(item_importance)) * 0.1 + 0.9
    adjusted_heuristics = combined_heuristic * exploration_exploitation_balance
    
    # Sparsify heuristics by setting the lowest values to zero
    lower_threshold = 0.01
    heuristics = np.where(adjusted_heuristics >= lower_threshold, adjusted_heuristics, 0)
    
    # Normalize heuristics to encourage variety without uniformity
    heuristics = heuristics / np.sum(heuristics)
    
    return heuristics
```
