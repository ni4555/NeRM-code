```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the inverse of the average weight for each dimension
    inverse_avg_weight = 1 / np.mean(weight, axis=1)
    
    # Calculate the heuristic by normalizing the prize with the inverse of the average weight
    heuristic = prize * inverse_avg_weight
    
    # Square the heuristic to enhance non-linearity
    heuristic = heuristic ** 2
    
    # Add a smoothing term by normalizing the weight
    smoothing_term = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1)
    
    # Combine the heuristics with the smoothing term
    combined_heuristic = heuristic + smoothing_term
    
    # Apply a sparsity threshold to the heuristic
    sparsity_threshold = np.max(combined_heuristic) / 2  # Use half the maximum heuristic as a threshold
    heuristics = np.where(combined_heuristic < sparsity_threshold, 0, combined_heuristic)
    
    # Normalize the heuristics to ensure a proper range for selection
    max_heuristic = np.max(heuristics)
    heuristics = heuristics / max_heuristic
    
    return heuristics
```
