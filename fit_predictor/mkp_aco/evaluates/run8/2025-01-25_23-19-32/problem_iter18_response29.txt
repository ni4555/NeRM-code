```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, diversity, and sparsity factors
    combined_heuristics = item_importance * diversity_factor * sparsity_factor
    
    # Normalize the combined heuristics to account for the sum-to-one constraint
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    # Introduce exploration and exploitation by blending with a random factor
    exploration_randomness = np.random.rand(n)
    exploitation_factor = 0.8 * heuristics + 0.2 * exploration_randomness
    
    # Normalize the exploitation factor to ensure it sums to 1
    exploitation_factor /= np.sum(exploitation_factor)
    
    return exploitation_factor
```
