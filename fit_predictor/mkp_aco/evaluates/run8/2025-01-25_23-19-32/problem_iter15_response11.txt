```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate diversity using a random element selection to avoid uniformity
    diversity_factor = 1 / (1 + np.exp(-np.random.rand(len(item_importance))))
    
    # Calculate variance-based sparsity factor
    variance_factor = np.sum((weight - np.mean(weight, axis=1, keepdims=True))**2, axis=1) / weight_normalized**2
    
    # Emphasize variance and diversity with adaptive factors
    combined_value_diversity_variance = item_importance * diversity_factor * variance_factor
    
    # Introduce randomness to prevent convergence to local optima
    randomness_factor = np.random.rand(len(item_importance))
    
    # Use a thresholding mechanism to balance diversity and importance
    threshold = 0.2
    balanced_heuristics = combined_value_diversity_variance * randomness_factor * (1 - np.exp(-(combined_value_diversity_variance - threshold)**2))
    
    # Normalize heuristics to ensure a fair selection
    heuristics = balanced_heuristics / np.sum(balanced_heuristics)
    
    # Sparsify the heuristics by setting below threshold values to zero
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
