```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    weight_normalized = np.sum(weight, axis=1)
    weight_sq = np.sum(weight**2, axis=1)
    item_importance = prize / weight_normalized
    importance_sparsity = 1 - (weight_sq / weight_normalized**2)
    domain_specific_factor = 1  # This factor is adapted according to domain knowledge or specific constraints.
    combined_heuristics = item_importance * importance_sparsity * domain_specific_factor
    sparsity_threshold = np.percentile(combined_heuristics, 75)  # Using a percentile to define sparsity threshold
    heuristics = np.where(combined_heuristics > sparsity_threshold, combined_heuristics, 0)
    return heuristics
```
