```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate importance based on the ratio of prize to normalized weight
    importance = prize / weight_normalized
    
    # Encourage variance by penalizing similarity in importance
    variance_penalty = 1 / np.mean((importance - np.mean(importance))**2)
    
    # Introduce domain-specific insight by considering the sparsity of weights
    sparsity = 1 - np.mean(np.mean(weight, axis=1) ** 2)
    
    # Calculate heuristic based on importance, variance, and sparsity
    heuristics = importance * variance_penalty * sparsity
    
    # Introduce randomness for exploration while maintaining exploitation
    randomness_factor = np.random.random_sample(size=weight.shape[0])
    
    # Adjust heuristics to account for randomness
    heuristics = (1 - np.exp(-heuristics)) * randomness_factor
    
    # Normalize heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
