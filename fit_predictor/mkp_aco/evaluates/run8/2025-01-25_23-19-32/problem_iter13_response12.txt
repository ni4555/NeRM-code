```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness based on the importance of the items
    randomness_factor = np.random.rand(len(item_importance))
    
    # Calculate diversity factor based on variance
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine factors to determine the heuristic value for each item
    heuristic_value = item_importance * diversity_factor * sparsity_factor * randomness_factor
    
    # Apply a dynamic threshold to promote sparsity
    sparsity_threshold = np.percentile(heuristic_value, 90)  # 90th percentile
    heuristic_value[heuristic_value < sparsity_threshold] = 0
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = heuristic_value / np.sum(heuristic_value)
    
    return heuristics
```
