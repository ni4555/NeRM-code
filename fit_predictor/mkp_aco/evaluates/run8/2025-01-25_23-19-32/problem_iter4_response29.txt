```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    # Introduce a sparsity factor based on the range of the ratio
    sparsity_factor = np.ptp(ratio) / np.max(ratio)
    # Calculate the variance of the ratio to capture the spread of the ratios
    variance_factor = np.var(ratio) / np.max(ratio)
    # Calculate the average weight to normalize the importance of each item
    average_weight = np.mean(np.sum(weight, axis=1))
    # Combine factors using domain-specific knowledge
    domain_specific_factor = 0.5  # Example domain-specific factor, can be adjusted
    heuristics = (ratio * (1 - sparsity_factor) * (1 - variance_factor) * (1 / average_weight) * domain_specific_factor)
    # Apply a non-linear factor to emphasize high-value items
    non_linear_factor = np.exp(-heuristics)
    # Normalize the heuristics to ensure they sum to 1
    heuristics = non_linear_factor / np.sum(non_linear_factor)
    return heuristics
```
