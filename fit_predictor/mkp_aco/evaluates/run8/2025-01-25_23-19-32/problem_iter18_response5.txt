```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Introduce randomness to balance exploration and exploitation
    random_factor = np.random.rand(len(item_importance))
    
    # Dynamically adjust importance to balance between high-value items and diverse selection
    average_heuristic = np.mean(item_importance * diversity_factor * sparsity_factor + random_factor)
    adjusted_importance = (item_importance * diversity_factor * sparsity_factor +
                           random_factor * 0.1) * (1 + np.exp(-average_heuristic))
    
    # Enforce diversity by setting a lower threshold for heuristics
    lower_threshold = 0.1
    adjusted_importance[adjusted_importance < lower_threshold] = lower_threshold
    
    # Normalize heuristics to encourage variety without uniformity
    heuristics = adjusted_importance / np.sum(adjusted_importance)
    
    return heuristics
```
