```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness by adding a small Gaussian noise
    noise = np.random.normal(0, 0.01, item_importance.shape)
    randomized_importance = item_importance + noise
    
    # Calculate diversity factor based on variance
    diversity_factor = 1 / (1 + np.exp(-randomized_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Balance factors by using a combination of importance, diversity, and sparsity
    balanced_factor = randomized_importance * diversity_factor * sparsity_factor
    
    # Apply domain-specific insights by emphasizing higher value items
    emphasized_factor = np.exp(balanced_factor)
    
    # Integrate randomness by adding noise to the emphasized factor
    noise = np.random.normal(0, 0.01, emphasized_factor.shape)
    final_heuristics = emphasized_factor + noise
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = final_heuristics / np.sum(final_heuristics)
    
    return heuristics
```
