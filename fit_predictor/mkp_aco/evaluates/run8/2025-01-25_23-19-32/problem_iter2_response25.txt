```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_weight_ratio = prize / np.sum(weight, axis=1)
    variance = np.var(value_weight_ratio, axis=0)
    average_weight = np.mean(weight, axis=1)
    
    # Normalize the value-weight ratio by variance and average weight
    normalized_ratio = value_weight_ratio / (1 + variance * 0.01)
    
    # Apply a non-linear scaling factor to the normalized ratio
    non_linear_scaled = np.exp(normalized_ratio)
    
    # Balance the heuristics by subtracting the average weight normalized by the mean average weight
    balanced_heuristics = non_linear_scaled - average_weight / np.mean(average_weight)
    
    # Apply a sparsity factor to encourage diversity in the selection
    sparsity_factor = np.min(balanced_heuristics) / np.max(balanced_heuristics)
    heuristics = np.where(balanced_heuristics >= sparsity_factor, balanced_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
