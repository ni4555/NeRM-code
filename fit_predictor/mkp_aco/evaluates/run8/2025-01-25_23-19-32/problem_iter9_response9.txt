```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate a sparsity factor for each item
    sparsity_factor = np.sqrt(1 - (np.sum(weight**2, axis=1) / weight_normalized**2))
    
    # Adjust the diversity factor to be a bit more aggressive
    adjusted_diversity_factor = diversity_factor * 1.2
    
    # Combine importance, adjusted diversity, and sparsity factors
    combined_heuristics = item_importance * adjusted_diversity_factor * sparsity_factor
    
    # Introduce a dynamic threshold based on the average item importance
    average_importance = np.mean(item_importance)
    dynamic_threshold = average_importance * 0.8
    
    # Apply a dynamic threshold to the heuristics
    heuristics = np.where(combined_heuristics >= dynamic_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
