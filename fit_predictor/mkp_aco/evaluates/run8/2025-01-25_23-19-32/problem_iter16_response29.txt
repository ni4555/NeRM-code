```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value-to-weight ratio for each item
    value_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the mean value-to-weight ratio
    mean_value_weight_ratio = np.mean(value_weight_ratio)
    
    # Calculate the normalized value-to-weight ratio
    normalized_value_weight_ratio = value_weight_ratio / mean_value_weight_ratio
    
    # Calculate the variance of the normalized value-to-weight ratio
    variance_normalized_value_weight_ratio = np.var(normalized_value_weight_ratio)
    
    # Calculate the adjusted value-to-weight ratio
    adjusted_value_weight_ratio = normalized_value_weight_ratio / (1 + variance_normalized_value_weight_ratio * 0.01)
    
    # Calculate the average weight per dimension
    average_weight = np.mean(weight, axis=1)
    
    # Adjust by the average weight to normalize by the overall average weight
    importance = adjusted_value_weight_ratio - average_weight / np.mean(average_weight) + 1
    
    # Introduce diversity by encouraging varied selection
    diversity_factor = 1 / (1 + np.exp(-importance))
    
    # Introduce sparsity by penalizing items that are too similar
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2)
    
    # Calculate a combined heuristic score
    combined_heuristics = importance * diversity_factor * sparsity_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
