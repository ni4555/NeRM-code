```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio
    ratio = prize / np.sum(weight, axis=1)
    # Introduce a sparsity factor based on the standard deviation of the ratio
    sparsity_factor = np.std(ratio)
    # Set a threshold based on the sparsity factor and the mean of the ratio
    threshold = (np.mean(ratio) + sparsity_factor) / 2
    # Create heuristics array where elements below the threshold are set to zero
    heuristics = np.where(ratio >= threshold, ratio, 0)
    
    # Introduce a diversity factor based on the number of non-zero dimensions
    diversity_factor = np.count_nonzero(weight, axis=1) / weight.shape[1]
    
    # Combine the heuristics and diversity factor
    combined_heuristics = heuristics * diversity_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
