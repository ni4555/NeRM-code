```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to average weight for each item
    avg_weight = np.sum(weight, axis=1) / weight.shape[1]
    ratio = prize / avg_weight

    # Calculate the diversity score for each item, which is the inverse of the variance of the weights
    diversity = 1 / np.var(weight, axis=1)

    # Combine the ratio and diversity scores with a logarithmic transformation for non-linear effects
    combined_heuristic = (np.log1p(ratio) * np.log1p(diversity))

    # Apply a linear normalization to the heuristic values
    min_combined = np.min(combined_heuristic)
    max_combined = np.max(combined_heuristic)
    normalized_heuristic = (combined_heuristic - min_combined) / (max_combined - min_combined)

    # Ensure the heuristic values are within the range [0, 1]
    normalized_heuristic = np.clip(normalized_heuristic, 0, 1)

    return normalized_heuristic
```
