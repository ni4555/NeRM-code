```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the weighted average of prizes, giving heavier items more importance
    weighted_average_prize = np.dot(prize, weight / np.sum(weight, axis=1, keepdims=True))
    # Introduce sparsity by selecting items with prizes that significantly exceed their mean value
    mean_prize = np.mean(weighted_average_prize)
    sparsity_factor = np.std(weighted_average_prize)
    threshold = mean_prize + sparsity_factor
    # Calculate heuristics by including only items whose prize exceeds the threshold
    heuristics = np.where(prize > threshold, prize, 0)
    return heuristics
```
