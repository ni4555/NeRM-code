```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Incorporate randomness into importance by adding Gaussian noise
    randomness_factor = np.random.normal(0, 0.01, item_importance.shape)
    item_importance = item_importance + randomness_factor
    
    # Calculate diversity factor based on variance
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Balance factors to emphasize importance and diversity while still considering sparsity
    balanced_factor = item_importance * diversity_factor * sparsity_factor
    
    # Integrate a domain-specific insight: items with higher importance should have higher heuristics
    domain_insight_factor = np.exp(-item_importance)
    
    # Combine factors to determine the heuristics
    combined_heuristics = balanced_factor * domain_insight_factor
    
    # Normalize heuristics for consistency
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    # Apply sparsity by setting a threshold for non-zero heuristics
    sparsity_threshold = 0.01
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Enforce constraints to maintain diversity and importance
    diversity_constraint = np.where(heuristics < 0.2, 0, heuristics)
    importance_constraint = np.where(heuristics < 0.5, 0, heuristics)
    
    # Normalize the final heuristics to ensure they sum to 1
    final_heuristics = diversity_constraint * importance_constraint / np.sum(diversity_constraint * importance_constraint)
    
    return final_heuristics
```
