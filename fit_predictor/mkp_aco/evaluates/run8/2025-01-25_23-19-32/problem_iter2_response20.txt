```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the prize to weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    # Determine a sparsity factor based on the ratio range
    sparsity_factor = 1 / np.max(ratio) / len(ratio)
    # Create the heuristics array
    heuristics = ratio * sparsity_factor
    # Adjust the sparsity based on the dimension of weights
    dimensionality_factor = np.exp(-np.sum(weight, axis=1))
    # Apply the sparsity adjustment
    adjusted_heuristics = heuristics * dimensionality_factor
    # Set a threshold based on the adjusted heuristics
    threshold = np.mean(adjusted_heuristics) * 1.5
    # Sparsify the heuristics
    heuristics = np.where(adjusted_heuristics >= threshold, adjusted_heuristics, 0)
    return heuristics
```
