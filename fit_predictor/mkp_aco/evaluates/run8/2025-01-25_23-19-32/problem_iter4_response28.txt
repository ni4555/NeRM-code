```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights and calculate the prize to weight ratio
    weight_normalized = np.sum(weight, axis=1)
    ratio = prize / weight_normalized
    
    # Incorporate a complexity factor based on the weight
    complexity_factor = 1 / (np.sqrt(np.sum(weight**2, axis=1)) / weight_normalized)
    
    # Adjust for sparsity by considering the deviation from the average ratio
    sparsity_factor = 1 - (np.sum(ratio - np.mean(ratio)) / (n - 1))
    
    # Use a logarithmic transformation to reduce the impact of large ratios
    transformed_ratio = np.log(ratio + 1)
    
    # Combine the factors into a single heuristic score
    combined_heuristics = transformed_ratio * complexity_factor * sparsity_factor
    
    # Apply a threshold to focus on the most promising candidates
    threshold = np.percentile(combined_heuristics, 90)
    combined_heuristics[combined_heuristics < threshold] = 0
    
    return combined_heuristics
```
