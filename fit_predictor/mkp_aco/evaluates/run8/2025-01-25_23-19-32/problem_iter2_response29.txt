```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio
    ratio = prize / np.sum(weight, axis=1)
    # Incorporate the inverse of the square root of the weight as a complexity factor
    complexity_factor = 1 / (np.sqrt(np.sum(weight**2, axis=1)) / np.sum(weight, axis=1))
    # Avoid sparsity by ensuring the minimum ratio is non-zero
    min_ratio = np.min(ratio)
    # Use a logarithmic transformation to reduce the impact of large ratios
    transformed_ratio = np.log(ratio + 1)
    # Combine the factors to form the heuristics
    heuristics = transformed_ratio * complexity_factor
    # Apply a random factor to introduce stochasticity
    random_factor = np.random.rand(len(prize))
    heuristics *= random_factor
    return heuristics
```
