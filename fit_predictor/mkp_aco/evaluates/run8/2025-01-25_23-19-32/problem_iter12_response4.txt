```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value-to-weight ratio for each item
    value_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the variance and standard deviation of the value-to-weight ratio
    variance = np.var(value_weight_ratio, axis=0)
    std_dev = np.std(value_weight_ratio, axis=0)
    
    # Calculate the average weight per dimension
    average_weight = np.mean(weight, axis=1)
    
    # Calculate the importance based on the adjusted value-to-weight ratio
    adjusted_value_weight_ratio = value_weight_ratio / (1 + variance * 0.01) - std_dev * 0.01
    importance = adjusted_value_weight_ratio - average_weight / np.mean(average_weight) + 1
    
    # Introduce diversity by encouraging varied selection
    diversity_factor = 1 / (1 + np.exp(-importance))
    
    # Introduce sparsity by pruning the lowest values based on a percentile threshold
    threshold = np.percentile(importance, 25)  # Use the 25th percentile as the threshold
    importance[importance < threshold] = 0
    
    # Introduce a penalty for items that have low diversity within their dimension
    # Calculate the average diversity factor within each dimension
    dimension_diversity = np.mean(diversity_factor, axis=0)
    importance *= dimension_diversity
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2)
    
    # Combine importance with sparsity factor
    combined_heuristics = importance * sparsity_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
