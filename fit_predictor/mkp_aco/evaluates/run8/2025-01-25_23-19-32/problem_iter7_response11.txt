```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Incorporate domain knowledge: if an item is too heavy relative to its prize, it's less promising
    domain_knowledge_factor = 1 / (1 + np.exp(-(item_importance / 10)))
    
    # Calculate the diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine factors with a weighted sum to balance their importance
    combined_heuristics = (0.6 * item_importance) + (0.3 * diversity_factor) + (0.1 * sparsity_factor) + (0.1 * domain_knowledge_factor)
    
    # Apply a dynamic threshold based on the overall diversity of the item set
    overall_diversity = np.mean(diversity_factor)
    dynamic_threshold = 0.5 * overall_diversity
    
    # Enforce diversity by setting a lower threshold for heuristics
    combined_heuristics[combined_heuristics < dynamic_threshold] = dynamic_threshold
    
    # Apply a diversity threshold to enhance diversity in the selection
    diversity_threshold = 0.6
    heuristics = np.where(combined_heuristics >= diversity_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
