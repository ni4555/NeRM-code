```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, diversity, and sparsity factors
    combined_heuristics = item_importance * diversity_factor * sparsity_factor
    
    # Adjust diversity factor to balance the selection with sparsity
    adjusted_diversity = diversity_factor * (1 - sparsity_factor)
    
    # Introduce a dynamic threshold that adapts to the total diversity
    total_diversity = np.sum(adjusted_diversity)
    dynamic_threshold = 0.2 * total_diversity / n
    
    # Enforce diversity by setting a lower threshold for heuristics
    lower_threshold = 0.05
    combined_heuristics[combined_heuristics < lower_threshold] = lower_threshold
    
    # Apply a diversity threshold to enhance diversity in the selection
    heuristics = np.where(combined_heuristics >= dynamic_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
