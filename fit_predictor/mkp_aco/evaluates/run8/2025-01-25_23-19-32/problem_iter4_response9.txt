```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    # Introduce a sparsity factor based on the minimum prize to weight ratio
    sparsity_factor = np.min(ratio) / np.max(ratio)
    # Sparsify the heuristics by setting values below the sparsity factor to zero
    sparsified_heuristics = np.where(ratio >= sparsity_factor, ratio, 0)
    # Normalize the sparsified heuristics to sum to 1
    normalized_heuristics = sparsified_heuristics / np.sum(sparsified_heuristics)
    # Add randomness with a bonus factor to adapt to different problem instances
    bonus_factor = np.random.rand(len(prize))
    heuristics = normalized_heuristics * bonus_factor
    return heuristics
```
