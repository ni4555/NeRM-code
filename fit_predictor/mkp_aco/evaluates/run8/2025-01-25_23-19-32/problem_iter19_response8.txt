```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = np.log(1 / (1 + np.exp(-item_importance)))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Incorporate a sparsity penalty to discourage selecting items that are too similar
    sparsity_penalty = 1 - (np.mean(sparsity_factor) / np.max(sparsity_factor))
    
    # Combine item value, diversity, and sparsity with a sparsity penalty
    combined_value_diversity_sparsity = item_importance * diversity_factor * sparsity_factor * sparsity_penalty
    
    # Apply a local balance to encourage a mix of high-value and diverse items
    local_balance = 0.5 * np.min(item_importance * diversity_factor * sparsity_factor)
    balanced_heuristics = combined_value_diversity_sparsity + local_balance
    
    # Normalize heuristics to maintain balance across items
    heuristics = balanced_heuristics / np.sum(balanced_heuristics)
    
    return heuristics
```
