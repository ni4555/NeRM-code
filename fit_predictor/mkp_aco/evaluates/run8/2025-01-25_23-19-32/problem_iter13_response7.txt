```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Promote diversity by using the variance of the item importance
    diversity_factor = 1 / (1 + np.exp(-np.mean(item_importance)))
    
    # Promote sparsity by using a measure that captures how much each item is underrepresented in the normalized weight
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Enforce a balance between importance and sparsity by using a weighted sum of both factors
    balance_factor = np.exp(item_importance) * sparsity_factor
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(len(item_importance))
    
    # Combine all factors to form the heuristic
    combined_heuristic = diversity_factor * balance_factor * random_factor
    
    # Normalize heuristics to ensure their sum is 1
    heuristics = combined_heuristic / np.sum(combined_heuristic)
    
    return heuristics
```
