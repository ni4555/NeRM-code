```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    weight_normalized = np.sum(weight, axis=1)
    weight_sq = np.sum(weight**2, axis=1)
    item_importance = prize / weight_normalized
    importance_sparsity = 1 - (weight_sq / weight_normalized**2)
    sparsity_threshold = np.percentile(importance_sparsity, 75)  # Use sparsity as a factor
    domain_specific_factor = np.count_nonzero(weight, axis=1) / weight.shape[1]  # Diversity factor
    combined_heuristics = item_importance * importance_sparsity * domain_specific_factor
    normalized_heuristics = combined_heuristics / np.sum(combined_heuristics)
    # Introduce randomness to enhance diversity
    randomized_heuristics = normalized_heuristics * np.random.random_sample((len(normalized_heuristics),)) * 0.5
    return randomized_heuristics
```
