```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio
    ratio = prize / np.sum(weight, axis=1)
    # Apply a bonus for items with a high prize to weight ratio
    bonus_factor = (np.sqrt(prize) / ratio) * (1 - np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2)
    # Apply a sparsity factor based on the standard deviation of the ratio
    sparsity_factor = np.std(ratio)
    # Set a lower bound for the heuristics to encourage diversity in the solution
    lower_bound = np.min(ratio) + sparsity_factor
    # Calculate the heuristics by combining the bonus factor and the sparsity factor
    heuristics = bonus_factor * np.where(ratio >= lower_bound, ratio, 0)
    return heuristics
```
