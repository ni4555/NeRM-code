```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce a randomness factor to promote diversity
    randomness_factor = np.random.rand(len(item_importance))
    
    # Introduce a sparsity factor that encourages selecting a few high-quality items
    sparsity_factor = 1 / (1 + np.exp(-(item_importance - 0.5) * 10))
    
    # Combine importance, randomness, and sparsity factors
    combined_heuristics = item_importance * randomness_factor * sparsity_factor
    
    # Apply a diversity threshold to enhance diversity in the selection
    diversity_threshold = 0.4
    heuristics = np.where(combined_heuristics >= diversity_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
