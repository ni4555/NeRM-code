```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Incorporate domain knowledge by adjusting importance based on item category
    # Assume categories are known and stored in `categories` array of shape (n,)
    # where `categories[i]` is the category of item `i`
    categories = np.random.randint(0, 3, size=n)  # Example random categories
    category_importance = 1.5 if np.any(categories == 2) else 1.0
    item_importance *= category_importance
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, diversity, and sparsity factors
    combined_heuristics = item_importance * diversity_factor * sparsity_factor
    
    # Dynamically adapt thresholds based on average importance
    average_importance = np.mean(item_importance)
    lower_threshold = 0.1 if average_importance > 0.5 else 0.3
    upper_threshold = 0.8 if average_importance > 0.5 else 0.6
    
    # Apply thresholding to filter heuristics based on importance
    heuristics = np.where(combined_heuristics >= upper_threshold, combined_heuristics,
                          np.where(combined_heuristics >= lower_threshold, 0, combined_heuristics))
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
