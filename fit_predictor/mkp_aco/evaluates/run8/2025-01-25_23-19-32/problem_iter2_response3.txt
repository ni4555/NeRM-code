```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight for each dimension
    normalized_prize = prize / np.sum(prize)
    normalized_weight = np.sum(weight, axis=1) / np.sum(weight, axis=1)
    
    # Combine normalized prize and weight to create a heuristic
    combined_heuristics = normalized_prize * normalized_weight
    
    # Use a sparsity factor to reduce the heuristic values of less promising items
    sparsity_factor = np.exp(-combined_heuristics)
    
    # Apply the sparsity factor to the combined heuristics
    sparsified_heuristics = combined_heuristics * sparsity_factor
    
    # Selectively sparsify heuristics by setting a threshold
    threshold = np.mean(sparsified_heuristics)
    heuristics = np.where(sparsified_heuristics > threshold, sparsified_heuristics, 0)
    
    return heuristics
```
