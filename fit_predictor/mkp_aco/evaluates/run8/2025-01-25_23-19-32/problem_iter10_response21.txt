```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, diversity, and sparsity factors
    combined_heuristics = item_importance * diversity_factor * sparsity_factor
    
    # Normalize combined heuristics to maintain the sum to 1 constraint
    normalized_combined_heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    # Enforce constraints by capping the heuristics values to ensure they do not exceed the maximum possible value
    max_value = np.max(normalized_combined_heuristics)
    normalized_combined_heuristics = np.clip(normalized_combined_heuristics, 0, max_value)
    
    # Apply a diversity threshold to enhance diversity in the selection
    diversity_threshold = 0.4
    heuristics = np.where(normalized_combined_heuristics >= diversity_threshold, normalized_combined_heuristics, 0)
    
    # Re-normalize the heuristics to ensure they sum to 1 after the diversity threshold is applied
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
