```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Calculate the average importance for balancing
    average_importance = np.mean(item_importance)
    
    # Introduce a dynamic threshold that adapts based on the average importance
    dynamic_threshold = average_importance * 0.5
    
    # Adjust heuristics based on the dynamic threshold to maintain diversity
    combined_heuristics = item_importance * diversity_factor * sparsity_factor
    combined_heuristics[combined_heuristics < dynamic_threshold] = 0
    
    # Calculate the balance factor based on the total prize and total weight
    total_weight = np.sum(weight_normalized)
    balance_factor = np.sum(prize) / total_weight
    
    # Apply the balance factor to the combined heuristics
    combined_heuristics *= balance_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
