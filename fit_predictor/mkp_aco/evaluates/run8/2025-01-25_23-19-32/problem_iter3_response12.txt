```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    weight_normalized = np.sum(weight, axis=1)
    weight_sq = np.sum(weight**2, axis=1)
    item_importance = prize / weight_normalized
    importance_sparsity = 1 - (weight_sq / weight_normalized**2)
    combined_heuristics = item_importance * importance_sparsity
    
    # Introduce additional factors such as inverse variance and diversity
    inv_variance = 1 / np.var(weight, axis=1)
    diversity_factor = np.mean(np.abs(np.c_[weight] - np.mean(weight, axis=1)), axis=1)
    
    # Normalize combined heuristics to maintain sparsity
    combined_heuristics = (combined_heuristics + inv_variance * diversity_factor) / (np.sum(combined_heuristics) + np.sum(inv_variance * diversity_factor))
    
    # Threshold to sparsify the heuristics
    threshold = np.percentile(combined_heuristics, 50)
    sparsified_heuristics = np.where(combined_heuristics >= threshold, combined_heuristics, 0)
    
    return sparsified_heuristics
```
