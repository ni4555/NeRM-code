```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Incorporate domain knowledge: penalize items that are too heavy relative to their prize
    domain_knowledge_penalty = 1 - np.exp(-(item_importance / 10))
    
    # Calculate the diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Calculate the average diversity score across all items
    average_diversity = np.mean(diversity_factor)
    
    # Weights for the different factors
    weight_importance = 0.6
    weight_diversity = 0.3
    weight_sparsity = 0.1
    weight_penalty = 0.1
    
    # Combine factors with a weighted sum to balance their importance
    combined_heuristics = (weight_importance * item_importance +
                           weight_diversity * diversity_factor +
                           weight_sparsity * sparsity_factor +
                           weight_penalty * domain_knowledge_penalty)
    
    # Enforce diversity by setting a lower threshold for heuristics
    dynamic_threshold = average_diversity / 2
    combined_heuristics[combined_heuristics < dynamic_threshold] = dynamic_threshold
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
