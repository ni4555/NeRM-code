```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio
    ratio = prize / np.sum(weight, axis=1)
    # Introduce a sparsity factor based on the number of dimensions
    sparsity_factor = np.min(ratio) / np.max(ratio)
    # Calculate the mean weight to use as a scaling factor
    mean_weight = np.mean(np.sum(weight, axis=1))
    # Non-linear transformation of the ratio to enhance the sparsity effect
    transformed_ratio = np.exp(ratio - np.log(mean_weight))
    # Sparsify the heuristics by setting a threshold
    threshold = sparsity_factor * np.max(transformed_ratio)
    # Create the heuristics array
    heuristics = np.where(transformed_ratio >= threshold, transformed_ratio, 0)
    return heuristics
```
