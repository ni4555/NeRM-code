```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Incorporate diversity by considering the variance of the importance scores
    diversity_score = np.var(item_importance)
    
    # Calculate a size factor that penalizes larger items based on a threshold
    size_threshold = 2 * np.median(weight_normalized)
    size_factor = np.where(weight_normalized < size_threshold, 1, 0.5)
    
    # Calculate sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Adjust the diversity score to account for the overall diversity of selected items
    adjusted_diversity_score = diversity_score * 0.5
    
    # Combine factors into the heuristic
    combined_heuristics = item_importance * size_factor * sparsity_factor * adjusted_diversity_score
    
    # Normalize the heuristics to ensure that they sum to 1, maintaining sparsity
    max_heuristic = np.max(combined_heuristics)
    if max_heuristic > 0:
        combined_heuristics /= max_heuristic
    
    # Apply normalization to balance diversity and importance
    combined_heuristics = (combined_heuristics - np.min(combined_heuristics)) / (np.max(combined_heuristics) - np.min(combined_heuristics))
    
    return combined_heuristics
```
