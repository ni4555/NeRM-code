```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight for each dimension
    normalized_prize = prize / np.sum(prize)
    normalized_weight = np.sum(weight, axis=1) / np.sum(weight, axis=1)
    
    # Combine normalized prize and weight to create a heuristic
    combined_heuristics = normalized_prize * normalized_weight
    
    # Use a sparsity factor to enhance sparsity in the heuristics
    sparsity_factor = np.exp(-combined_heuristics)
    
    # Normalize the sparsity factor to ensure it is within a reasonable range
    max_sparsity = np.max(sparsity_factor)
    sparsity_factor = sparsity_factor / max_sparsity
    
    # Apply the sparsity factor to the combined heuristics
    sparsified_heuristics = combined_heuristics * sparsity_factor
    
    # Calculate a dynamic threshold that accounts for the variability of the heuristics
    threshold = np.mean(sparsified_heuristics) + np.std(sparsified_heuristics) * 0.1
    
    # Selectively sparsify heuristics by setting values below the threshold to zero
    heuristics = np.where(sparsified_heuristics > threshold, sparsified_heuristics, 0)
    
    return heuristics
```
