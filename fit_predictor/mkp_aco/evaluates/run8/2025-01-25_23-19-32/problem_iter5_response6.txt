```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance and sparsity factors with additional domain-specific factor
    domain_factor = np.random.rand(weight.shape[0])
    combined_heuristics = item_importance * sparsity_factor * domain_factor
    
    # Encourage diversity by adding a small random perturbation
    diversity_perturbation = np.random.normal(0, 0.01, weight.shape[0])
    combined_heuristics += diversity_perturbation
    
    # Apply a sparsity threshold to reduce the number of items considered
    sparsity_threshold = 0.5
    heuristics = np.where(combined_heuristics >= sparsity_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
