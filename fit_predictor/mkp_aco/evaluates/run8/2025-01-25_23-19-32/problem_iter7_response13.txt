```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Integrate domain knowledge by giving higher importance to certain items
    domain_specific_factor = np.array([1 if item_id < 0.2 * n else 0.5 for item_id in range(n)])
    item_importance *= domain_specific_factor
    
    # Calculate diversity factor with exponential decay to promote a diverse set of items
    diversity_factor = np.exp(item_importance) / np.sum(np.exp(item_importance))
    
    # Sparsify the heuristics by reducing the impact of less promising items
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    sparsity_factor *= np.where(sparsity_factor > 0.8, 1, 0)
    
    # Combine importance, diversity, and sparsity factors
    combined_heuristics = item_importance * diversity_factor * sparsity_factor
    
    # Adapt thresholds dynamically based on the maximum item importance
    lower_threshold = max(item_importance) * 0.5
    upper_threshold = max(item_importance) * 0.8
    combined_heuristics = np.clip(combined_heuristics, lower_threshold, upper_threshold)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
