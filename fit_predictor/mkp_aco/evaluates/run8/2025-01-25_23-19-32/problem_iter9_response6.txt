```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce a balance factor to consider the total diversity of the selected items
    balance_factor = np.exp(-item_importance)
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, balance, and sparsity factors
    combined_heuristics = item_importance * balance_factor * sparsity_factor
    
    # Apply a dynamic adjustment to heuristics based on the overall diversity of the solution
    diversity = np.mean(balance_factor)
    adjustment_factor = diversity / 0.5
    combined_heuristics *= adjustment_factor
    
    # Enforce diversity by setting a lower threshold for heuristics
    lower_threshold = 0.1
    combined_heuristics[combined_heuristics < lower_threshold] = lower_threshold
    
    # Apply a diversity threshold to enhance diversity in the selection
    diversity_threshold = 0.4
    heuristics = np.where(combined_heuristics >= diversity_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
