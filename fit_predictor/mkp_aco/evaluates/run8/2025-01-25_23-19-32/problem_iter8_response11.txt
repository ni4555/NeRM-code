```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by the sum of weights
    normalized_prize = prize / np.sum(weight, axis=1)
    # Introduce non-linearity by squaring the normalized prize
    non_linear_prize = normalized_prize ** 2
    # Introduce sparsity by applying a sparsity factor
    sparsity_factor = np.exp(-np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1)))
    sparsity_heuristics = non_linear_prize * sparsity_factor
    # Smooth the heuristics by adding a term based on the total weight
    smoothing_term = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1)
    smoothed_heuristics = sparsity_heuristics * smoothing_term
    # Normalize the heuristics by scaling with the mean prize
    scaled_heuristics = smoothed_heuristics * np.mean(prize)
    # Introduce a penalty for high variance in normalized prize
    variance_penalty = np.var(normalized_prize) / np.mean(normalized_prize)
    penalty_heuristics = scaled_heuristics * (1 - variance_penalty)
    # Normalize the heuristics to ensure they sum to 1
    heuristics = penalty_heuristics / np.sum(penalty_heuristics)
    return heuristics
```
