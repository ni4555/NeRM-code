```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    # Calculate the importance considering the ratio
    importance = ratio
    # Introduce a sparsity factor based on the maximum ratio
    sparsity_factor = np.max(ratio)
    # Calculate importance sparsity based on the squared weights and normalized weight sum
    importance_sparsity = 1 - (np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2)
    # Combine the importance and sparsity terms
    combined_heuristics = importance * importance_sparsity / sparsity_factor
    # Normalize the heuristics to sum to 1
    combined_heuristics /= np.sum(combined_heuristics)
    return combined_heuristics
```
