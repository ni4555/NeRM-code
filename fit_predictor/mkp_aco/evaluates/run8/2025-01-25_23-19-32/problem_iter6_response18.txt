```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by summing across dimensions
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity score as the variance of the normalized prize
    diversity_score = np.var(normalized_prize, axis=0)
    
    # Calculate the normalized weight to prize ratio
    weight_to_prize_ratio = np.sum(weight, axis=1) / prize
    
    # Normalize the ratio by adding a small constant to avoid division by zero
    weight_to_prize_ratio = weight_to_prize_ratio + 1e-10
    
    # Calculate the variance of the normalized ratio as a measure of diversity
    variance_ratio = np.var(weight_to_prize_ratio, axis=0)
    
    # Combine diversity score, variance of ratio, and a domain-specific factor
    domain_factor = np.random.rand(len(prize))  # Random factor to encourage diversity
    combined_heuristics = diversity_score * variance_ratio * domain_factor
    
    # Normalize the heuristics by the maximum heuristic value
    combined_heuristics = combined_heuristics / np.max(combined_heuristics)
    
    # Introduce sparsity by pruning the lowest values based on a threshold
    threshold = np.min(combined_heuristics) * 0.5
    heuristics = np.where(combined_heuristics >= threshold, combined_heuristics, 0)
    
    return heuristics
```
