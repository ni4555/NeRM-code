```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate the average importance to normalize the factor
    average_importance = np.mean(item_importance)
    
    # Adjust importance based on the average importance
    adjusted_importance = item_importance / average_importance
    
    # Calculate diversity factor based on the variance of adjusted importance
    diversity_variance = np.var(adjusted_importance)
    diversity_factor = 1 / (1 + np.exp(-adjusted_importance))
    
    # Adjust diversity factor to encourage diversity
    adjusted_diversity_factor = diversity_factor / (1 + diversity_variance)
    
    # Calculate sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Dynamically adjust heuristic weights for balance by incorporating diversity and sparsity
    combined_factor = adjusted_diversity_factor * sparsity_factor
    
    # Normalize combined factor by its average to maintain consistency
    average_combined_factor = np.mean(combined_factor)
    adjusted_combined_factor = combined_factor / average_combined_factor
    
    # Apply a sparsity threshold to prioritize high-impact items
    sparsity_threshold = 0.5
    adjusted_combined_factor[adjusted_combined_factor < sparsity_threshold] = sparsity_threshold
    
    # Enforce diversity by setting a lower threshold for heuristics
    lower_threshold = 0.1
    adjusted_combined_factor[adjusted_combined_factor < lower_threshold] = lower_threshold
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = adjusted_combined_factor / np.sum(adjusted_combined_factor)
    
    return heuristics
```
