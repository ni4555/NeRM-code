```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate variance for diversity
    diversity_variance = np.var(item_importance)
    
    # Adjust diversity by scaling the importance by its variance
    adjusted_item_importance = item_importance / (1 + diversity_variance)
    
    # Calculate sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Dynamically balance exploration and exploitation by using an exponential decay
    balance_factor = np.exp(-np.sum(weight, axis=1))
    
    # Combine all factors into the heuristic value
    combined_heuristic = adjusted_item_importance * sparsity_factor * balance_factor
    
    # Normalize heuristics to ensure they sum to 1
    heuristics = combined_heuristic / np.sum(combined_heuristic)
    
    return heuristics
```
