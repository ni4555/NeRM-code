```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Introduce a balancing factor that considers both importance and sparsity
    balance_factor = item_importance * sparsity_factor
    
    # Calculate the heuristic score combining the importance, diversity, and sparsity
    heuristic_score = balance_factor * diversity_factor
    
    # Introduce a dynamic threshold based on the item importance
    dynamic_threshold = heuristic_score * 0.5 + 0.1
    
    # Apply a sigmoid function to enforce a dynamic threshold
    sigmoid_threshold = 1 / (1 + np.exp(-dynamic_threshold))
    
    # Normalize the sigmoid threshold to the range [0, 1]
    sigmoid_threshold /= np.max(sigmoid_threshold)
    
    # Apply the sigmoid threshold as the heuristics value
    heuristics = sigmoid_threshold
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
