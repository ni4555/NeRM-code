```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / np.exp(-item_importance)
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Introduce randomness, but also allow importance variability to influence the randomness
    importance_variance = np.std(item_importance)
    random_factor = np.random.normal(0, importance_variance / (len(item_importance)**(1/2)), len(item_importance))
    
    # Calculate a variability factor that emphasizes items with high importance variability
    variability_factor = (item_importance / np.mean(item_importance)) * (1 + importance_variance)
    
    # Combine all factors to form the heuristic
    combined_heuristic = item_importance * diversity_factor * sparsity_factor * random_factor * variability_factor
    
    # Normalize heuristics to ensure their sum is 1
    heuristics = combined_heuristic / np.sum(combined_heuristic)
    
    return heuristics
```
