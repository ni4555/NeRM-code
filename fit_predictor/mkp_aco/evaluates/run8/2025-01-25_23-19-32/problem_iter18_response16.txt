```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Dynamically adjust factor weights based on average heuristic value
    factor_weights = {
        'importance': np.mean(item_importance) * 0.7,  # Weight for importance
        'diversity': np.mean(diversity_factor) * 0.3,   # Weight for diversity
        'sparsity': np.mean(sparsity_factor) * 0.2    # Weight for sparsity
    }
    
    # Introduce randomness to balance exploration and exploitation
    random_factor = np.random.rand(len(item_importance))
    
    # Combine factors with a weighted sum to determine the heuristics
    combined_heuristics = (
        item_importance * factor_weights['importance'] +
        diversity_factor * factor_weights['diversity'] +
        sparsity_factor * factor_weights['sparsity'] +
        random_factor * 0.1  # Adjust the weight of randomness
    )
    
    # Adaptively adjust importance to balance between high-value items and diverse selection
    average_heuristic = np.mean(combined_heuristics)
    adjusted_importance = combined_heuristics * (1 + np.exp(-average_heuristic))
    
    # Enforce diversity by setting a lower threshold for heuristics
    lower_threshold = 0.1
    adjusted_importance[adjusted_importance < lower_threshold] = lower_threshold
    
    # Normalize heuristics to encourage variety without uniformity
    heuristics = adjusted_importance / np.sum(adjusted_importance)
    
    return heuristics
```
