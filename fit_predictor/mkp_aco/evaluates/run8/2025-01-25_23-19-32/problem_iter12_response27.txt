```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by the sum of weights
    normalized_prize = prize / np.sum(weight, axis=1)
    
    # Introduce non-linearity by applying a logarithmic transformation
    non_linear_prize = np.log(1 + normalized_prize)
    
    # Encourage sparsity by applying a sparsity factor that diminishes with increased density
    sparsity_factor = np.exp(-np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1)))
    
    # Introduce a diversity factor that enhances the selection of diverse items
    diversity_factor = np.exp(-np.std(normalized_prize))
    
    # Apply smoothing to mitigate fluctuations in the heuristics
    smoothing_term = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1)
    
    # Scale heuristics by a global property, such as the geometric mean of prize
    global_property = np.exp(np.mean(np.log(prize)))
    scaled_heuristics = non_linear_prize * sparsity_factor * diversity_factor * smoothing_term * global_property
    
    # Introduce a penalty for high variance in normalized prize to avoid uniform selections
    variance_penalty = np.var(normalized_prize) / global_property
    penalty_heuristics = scaled_heuristics * (1 - variance_penalty)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = penalty_heuristics / np.sum(penalty_heuristics)
    
    return heuristics
```
