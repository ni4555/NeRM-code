```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Normalize both importance and sparsity factors
    normalized_item_importance = item_importance / np.sum(item_importance)
    normalized_sparsity_factor = sparsity_factor / np.sum(sparsity_factor)
    
    # Calculate the average importance for adjusting diversity
    average_importance = np.mean(item_importance)
    
    # Adjust diversity factors based on the average importance
    diversity_adjustment = 1 / (1 + np.exp(-(normalized_item_importance / average_importance)))
    
    # Combine normalized factors with adjusted diversity
    combined_factors = normalized_item_importance * normalized_sparsity_factor * diversity_adjustment
    
    # Normalize the combined factors to ensure they sum to 1
    normalized_combined_factors = combined_factors / np.sum(combined_factors)
    
    return normalized_combined_factors
```
