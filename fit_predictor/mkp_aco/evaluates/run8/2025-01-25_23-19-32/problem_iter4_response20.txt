```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio
    ratio = prize / np.sum(weight, axis=1)
    # Calculate the importance considering sparsity and diversity
    sparsity_factor = 1 / (np.sum(1 / (weight + 1e-5), axis=1))  # Adding a small constant to avoid division by zero
    diversity_factor = 1 / (np.std(weight, axis=1))  # Diversity in weight distribution
    # Integrate domain knowledge into a custom factor
    domain_specific_factor = np.mean(prize)  # Example domain-specific factor
    # Combine the factors into a heuristic value
    combined_heuristics = ratio * sparsity_factor * diversity_factor * domain_specific_factor
    # Set a threshold for heuristics to be considered for inclusion
    threshold = np.mean(combined_heuristics)
    # Create heuristics array where elements below the threshold are set to zero
    heuristics = np.where(combined_heuristics >= threshold, combined_heuristics, 0)
    return heuristics
```
