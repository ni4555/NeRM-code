```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value per weight ratio for each item
    value_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Normalize the value per weight ratio by the mean to account for scale differences
    normalized_value_weight_ratio = value_weight_ratio / np.mean(value_weight_ratio)
    
    # Calculate the standard deviation of the normalized ratios to use as a heuristic weight
    std_dev_weight = np.std(normalized_value_weight_ratio)
    
    # Calculate the heuristic based on the normalized ratio and its standard deviation
    heuristics = normalized_value_weight_ratio * (1 / (std_dev_weight + 1))
    
    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)
    
    # Introduce sparsity by setting a threshold based on the median of the heuristics
    median_heuristic = np.median(heuristics)
    threshold = median_heuristic / 2
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
