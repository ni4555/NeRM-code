```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate importance based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate diversity factor that encourages selecting a variety of items
    diversity_factor = np.exp(-np.sum(weight**2, axis=1) / (weight_normalized**2))
    
    # Balance importance with diversity by combining them
    combined_importance_diversity = item_importance * diversity_factor
    
    # Calculate sparsity factor
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Normalize combined importance-diversity and sparsity to scale between 0 and 1
    combined_importance_diversity = (combined_importance_diversity - np.min(combined_importance_diversity)) / (np.max(combined_importance_diversity) - np.min(combined_importance_diversity))
    sparsity_factor = (sparsity_factor - np.min(sparsity_factor)) / (np.max(sparsity_factor) - np.min(sparsity_factor))
    
    # Combine factors into heuristics, emphasizing importance-diversity over sparsity
    heuristics = combined_importance_diversity * (1 + sparsity_factor)
    
    # Apply a diversity threshold to enhance diversity in the selection
    diversity_threshold = 0.2
    heuristics[combined_importance_diversity < diversity_threshold] = diversity_threshold
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
