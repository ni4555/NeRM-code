```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine importance, diversity, and sparsity factors with a weighted sum
    combined_heuristics = (item_importance * 0.6 + diversity_factor * 0.3 + sparsity_factor * 0.1)
    
    # Apply a dynamic adjustment to heuristics based on the sum of the top N items
    n = 3  # Number of top items to consider for dynamic adjustment
    top_n_indices = np.argsort(combined_heuristics)[::-1][:n]
    top_n_sum = np.sum(combined_heuristics[top_n_indices])
    dynamic_adjustment = 1 + top_n_sum / np.sum(combined_heuristics)
    combined_heuristics *= dynamic_adjustment
    
    # Enforce diversity by setting a lower threshold for heuristics
    lower_threshold = 0.05
    combined_heuristics[combined_heuristics < lower_threshold] = lower_threshold
    
    # Apply a diversity threshold to enhance diversity in the selection
    diversity_threshold = 0.3
    heuristics = np.where(combined_heuristics >= diversity_threshold, combined_heuristics, 0)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
