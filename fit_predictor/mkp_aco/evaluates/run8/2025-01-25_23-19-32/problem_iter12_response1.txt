```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce a sparsity factor by using a threshold on normalized weights
    sparsity_factor = np.where(weight_normalized < 1, 1 / weight_normalized, 0)
    
    # Introduce a diversity factor based on the difference from the average importance
    diversity_factor = 1 / (1 + np.exp(-(item_importance - np.mean(item_importance))))
    
    # Combine importance, sparsity, and diversity factors
    combined_heuristics = item_importance * sparsity_factor * diversity_factor
    
    # Enforce a lower threshold to ensure at least some items are selected
    lower_threshold = 0.1
    combined_heuristics[combined_heuristics < lower_threshold] = lower_threshold
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
