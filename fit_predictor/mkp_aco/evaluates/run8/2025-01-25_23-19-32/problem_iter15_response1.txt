```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate importance based on prize to normalized weight ratio and variance
    importance = prize / weight_normalized + np.var(prize / weight_normalized)
    
    # Introduce randomness to avoid premature convergence
    randomness = np.random.rand(len(importance))
    
    # Adjust importance by considering diversity
    diversity = np.exp(-(importance - np.mean(importance)) ** 2)
    
    # Combine importance with diversity and randomness
    combined_heuristics = importance * diversity * randomness
    
    # Use sparsity to avoid uniform selections
    sparsity = 1 - np.mean(weight**2 / weight_normalized**2)
    
    # Enforce lower bound on heuristics to avoid zero inclusion
    lower_bound = 0.01
    combined_heuristics = np.maximum(combined_heuristics, lower_bound)
    
    # Normalize heuristics to ensure sum equals 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
