```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Adjust the importance to encourage diversity
    diversity_factor = np.exp(-item_importance**2)
    
    # Combine factors: importance, sparsity, and diversity
    combined_heuristics = item_importance * sparsity_factor * diversity_factor
    
    # Normalize the combined heuristics
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    # Apply a sparsity threshold to encourage diversity in the solution
    sparsity_threshold = 0.1
    heuristics[combined_heuristics < sparsity_threshold] = 0
    
    return heuristics
```
