```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce a random factor to encourage diversity
    random_factor = np.random.rand(*item_importance.shape)
    
    # Combine importance with a random factor and normalize
    combined_factor = (item_importance + random_factor) / np.sum(item_importance + random_factor)
    
    # Calculate sparsity factor
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Apply a threshold to importance and sparsity to encourage balance
    importance_threshold = np.maximum(0.1, item_importance)
    sparsity_threshold = np.maximum(0.1, sparsity_factor)
    
    # Combine factors with a weight for each factor
    combined_heuristics = 0.6 * importance_threshold * combined_factor + 0.4 * sparsity_threshold
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return heuristics
```
