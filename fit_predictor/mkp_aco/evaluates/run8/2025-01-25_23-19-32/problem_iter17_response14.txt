```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce randomness to encourage exploration
    random_factor = np.random.rand(len(item_importance))
    
    # Integrate variance into importance
    variance_factor = np.var(weight, axis=1)
    
    # Use a balance between the normalized importance and variance
    combined_value_variance = item_importance * variance_factor
    
    # Incorporate diversity by encouraging items with low correlation
    diversity_matrix = np.corrcoef(weight.T)
    diversity_factor = 1 / (1 + diversity_matrix.diagonal())
    
    # Sparsify the heuristics by emphasizing variance
    sparsity_factor = 1 - np.sum(diversity_matrix**2, axis=1)
    
    # Combine factors to form the heuristic
    combined_heuristic = combined_value_variance * diversity_factor * sparsity_factor * random_factor
    
    # Normalize heuristics to encourage variety without uniformity
    heuristics = combined_heuristic / np.sum(combined_heuristic)
    
    # Enforce sparsity by setting lower heuristics to zero
    heuristics[heuristics < 0.01] = 0
    
    return heuristics
```
