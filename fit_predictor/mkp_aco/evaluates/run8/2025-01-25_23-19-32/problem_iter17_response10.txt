```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce a variance factor to encourage exploration
    variance_factor = np.var(weight_normalized)
    
    # Integrate domain insights for balanced variance and sparsity
    domain_insight_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine item value, diversity, variance, and domain insights with adaptive factors
    combined_factors = item_importance * domain_insight_factor * variance_factor * sparsity_factor
    
    # Dynamically adjust the importance to balance between high-value items and diverse selection
    average_combined_factors = np.mean(combined_factors)
    adjusted_importance = combined_factors * (1 + np.exp(-average_combined_factors))
    
    # Enforce diversity by setting a lower threshold for heuristics
    lower_threshold = 0.1
    adjusted_importance[adjusted_importance < lower_threshold] = lower_threshold
    
    # Balance exploration with exploitation by incorporating randomness
    exploration_factor = np.random.rand(len(adjusted_importance))
    adjusted_importance *= exploration_factor
    
    # Normalize heuristics to encourage variety without uniformity
    heuristics = adjusted_importance / np.sum(adjusted_importance)
    
    return heuristics
```
