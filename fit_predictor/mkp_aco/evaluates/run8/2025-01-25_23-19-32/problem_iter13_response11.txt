```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Randomly adjust item importance to promote diversity
    random_factor = np.random.random_sample(item_importance.shape)
    item_importance = (item_importance + random_factor) / np.max(item_importance + random_factor)
    
    # Calculate diversity factor based on variance
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Dynamically adjust heuristic weights for balance
    average_heuristic = np.mean(item_importance * diversity_factor * sparsity_factor)
    adjusted_importance = item_importance * diversity_factor * sparsity_factor * (1 + np.exp(-average_heuristic))
    
    # Apply a threshold-based selection to balance importance and sparsity
    importance_threshold = 0.5
    sparsity_threshold = 0.3
    adjusted_importance = np.clip(adjusted_importance, importance_threshold, 1 - sparsity_threshold)
    
    # Integrate randomness to prevent local optima and maintain diversity
    randomized_factor = np.random.random_sample(adjusted_importance.shape)
    randomized_factor = np.clip(randomized_factor, 0, sparsity_threshold - importance_threshold)
    adjusted_importance += randomized_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics = adjusted_importance / np.sum(adjusted_importance)
    
    return heuristics
```
