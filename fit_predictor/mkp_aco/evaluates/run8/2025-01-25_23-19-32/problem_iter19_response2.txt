```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by summing across dimensions
    weight_normalized = np.sum(weight, axis=1)
    
    # Calculate the importance of each item based on prize to normalized weight ratio
    item_importance = prize / weight_normalized
    
    # Introduce a stochastic element by adding a random noise to the importance
    noise = np.random.normal(0, 0.01, size=item_importance.shape)
    item_importance += noise
    
    # Calculate a diversity factor that encourages selecting a variety of items
    diversity_factor = 1 / (1 + np.exp(-item_importance))
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight**2, axis=1) / weight_normalized**2)
    
    # Combine item value and diversity with adaptive factors
    combined_value_diversity = item_importance * diversity_factor * sparsity_factor
    
    # Use a dynamic threshold based on the standard deviation of the importance values
    dynamic_threshold = np.std(item_importance) * 0.5
    adjusted_importance = np.where(item_importance > dynamic_threshold, item_importance, 0)
    
    # Normalize heuristics to encourage variety without uniformity
    heuristics = adjusted_importance * sparsity_factor
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
