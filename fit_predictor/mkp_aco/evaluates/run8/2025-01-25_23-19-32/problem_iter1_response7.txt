```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize based on the maximum prize per weight unit in each dimension
    max_prize_per_unit = np.max(prize / np.sum(weight, axis=1), axis=0)
    normalized_prize = prize / max_prize_per_unit[:, np.newaxis]
    
    # Add a sparsity factor that decreases the value of items with higher weights
    sparsity_factor = 1 / (1 + np.sum(weight, axis=1))
    
    # Combine normalized prize and sparsity factor, then normalize again to keep values in the same range
    combined_heuristics = normalized_prize * sparsity_factor
    max_combined = np.max(combined_heuristics)
    min_combined = np.min(combined_heuristics)
    
    # Apply sparsification by setting elements below a certain threshold to zero
    sparsity_threshold = min_combined + (max_combined - min_combined) * 0.1
    heuristics = np.where(combined_heuristics > sparsity_threshold, combined_heuristics, 0)
    
    return heuristics
```
