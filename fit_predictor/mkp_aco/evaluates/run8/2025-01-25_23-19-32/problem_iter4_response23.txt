```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    weight_normalized = np.sum(weight, axis=1)
    weight_sq = np.sum(weight**2, axis=1)
    item_importance = prize / weight_normalized
    importance_sparsity = 1 - (weight_sq / weight_normalized**2)
    
    # Domain-specific factors can be incorporated here, for example,
    # a complexity factor if some items are more complex to process or store.
    complexity_factor = np.random.rand(len(prize))  # Random factor for demonstration.
    
    # Avoid binary cutoffs by using a softer thresholding approach.
    heuristic_threshold = np.max(importance_sparsity * item_importance * complexity_factor) * 0.5
    combined_heuristics = importance_sparsity * item_importance * complexity_factor
    
    # Apply a non-binary threshold, for example, a sigmoid function.
    combined_heuristics = np.tanh(combined_heuristics - heuristic_threshold)
    
    return combined_heuristics
```
