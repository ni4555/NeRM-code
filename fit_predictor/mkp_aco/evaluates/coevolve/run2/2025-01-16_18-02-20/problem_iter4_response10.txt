```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the variance of the normalized prize values to identify outliers
    variance = np.var(normalized_prize)
    
    # Calculate the average normalized prize value
    average_prize = np.mean(normalized_prize)
    
    # Rank the items based on a weighted sum of normalized prize and variance
    weighted_prize = normalized_prize * (1 - variance / np.max(variance))
    weighted_rank = np.argsort(weighted_prize)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    heuristics[weighted_rank] = np.arange(len(weighted_rank))
    
    # Sparsify the heuristics by setting items with normalized prize below the average and high variance to zero
    heuristics[(normalized_prize < average_prize) | (variance > average_prize)] = 0
    
    return heuristics
```
