Fitness: 18.799006879273502

Description:
The heuristic employs a dynamic, multi-dimensional probabilistic model for MKP resolution, integrating advanced normalization techniques with a fine-grained per-unit-weight item ranking system. This refined approach leverages an adaptive stochastic sampling algorithm that optimally selects items based on their value-to-weight ratio, continuously optimizing the total prize under knapsack constraints. The algorithm strategically adjusts sampling parameters in real-time, ensuring a responsive and efficient adaptation to evolving knapsack capacities. Furthermore, it incorporates a state-of-the-art prioritization framework that emphasizes the selection of the most valuable items by weight, thereby significantly enhancing prize accumulation and the overall efficacy of the item selection process.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio using a dynamic approach
    normalized_value_to_weight = value_to_weight / value_to_weight.sum()
    
    # Initialize the heuristic array
    heuristics = np.zeros_like(prize)
    
    # Prioritize items with the highest normalized value-to-weight ratio
    sorted_indices = np.argsort(normalized_value_to_weight)[::-1]
    
    # Assign heuristic values based on sorted order
    for i in sorted_indices:
        heuristics[i] = 1.0
    
    return heuristics