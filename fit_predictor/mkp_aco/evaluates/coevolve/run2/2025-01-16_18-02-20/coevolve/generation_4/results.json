{
  "generation": 4,
  "description": "Optimize Multiple Knapsack Problems (MKP) by implementing a stochastic solution sampling heuristic that prioritizes items based on their value-to-weight ratio. This approach involves ranking items adaptively, selecting a subset of high-value items using stochastic sampling, and adjusting weight constraints dynamically to maximize total prize collection while respecting individual knapsack weight limits.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios to make them comparable across items\n    normalized_ratios = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Create a binary vector indicating the probability of selection for each item\n    selection_probability = np.random.rand(len(prize))\n    \n    # Sample items based on the normalized ratios\n    item_indices = np.argsort(normalized_ratios)[::-1]\n    selected_item_indices = item_indices[np.random.choice(len(item_indices), size=int(len(prize) / 2), replace=False)]\n    \n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(prize)\n    \n    # Set the heuristics for selected items to 1\n    heuristics[selected_item_indices] = 1\n    \n    return heuristics",
      "fitness": 17.27394851011971,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_1.txt",
      "code_file": "coevolve/generation_4/code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Sort items based on their value-to-weight ratio in descending order\n    sorted_indices = np.argsort(value_to_weight_ratio)[::-1]\n    \n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros(prize.shape[0])\n    \n    # Set the heuristics for the top items to 1 (most promising)\n    for i in sorted_indices:\n        heuristics[i] = 1\n    \n    return heuristics",
      "fitness": 18.498177590809405,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_7.txt",
      "code_file": "coevolve/generation_4/code_7.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Sort items based on their value-to-weight ratio in descending order\n    sorted_indices = np.argsort(value_to_weight_ratio)[::-1]\n    \n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(prize)\n    \n    # Iterate over the sorted indices and assign a higher heuristic value to the top items\n    for index in sorted_indices:\n        heuristics[index] = 1  # Set the heuristic to 1 for the top item, indicating its high priority\n    \n    return heuristics",
      "fitness": 18.651092596847803,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_0.txt",
      "code_file": "coevolve/generation_4/code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios to make them suitable for stochastic sampling\n    max_ratio = np.max(value_to_weight_ratio)\n    normalized_ratio = value_to_weight_ratio / max_ratio\n    \n    # Create a heuristic array where each element is the probability of including the item\n    # We use a simple heuristic where items with higher normalized ratio have a higher chance of being selected\n    heuristics = np.random.rand(len(prize))\n    heuristics /= heuristics.sum()  # Normalize to ensure probabilities sum to 1\n    \n    # Adjust heuristics based on the normalized value-to-weight ratio\n    heuristics *= normalized_ratio\n    \n    # Normalize the adjusted heuristics again to ensure they sum to 1\n    heuristics /= heuristics.sum()\n    \n    return heuristics\n\n# Example usage:\n# n = 5\n# m = 1\n# prize = np.array([60, 100, 120, 130, 140])\n# weight = np.array([[1], [1], [1], [1], [1]])\n# print(heuristics_v2(prize, weight))",
      "fitness": 20.96008842335658,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_3.txt",
      "code_file": "coevolve/generation_4/code_3.py"
    }
  ]
}