{
  "generation": 3,
  "description": "Enhancing MKP resolution through a probabilistic optimization algorithm that employs a value-to-weight ratio-driven item prioritization, combined with adaptive stochastic sampling, dynamic weight constraint adaptation, and iterative item selection to maximize overall prize while adhering to each knapsack's strict weight limitations.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios to ensure they sum to 1\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Initialize heuristics array with normalized ratios\n    heuristics = np.zeros_like(prize)\n    \n    # Assign higher heuristics values to items with higher ratios\n    heuristics = normalized_ratio\n    \n    return heuristics",
      "fitness": 22.07053389229282,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_3/stdout_11.txt",
      "code_file": "coevolve/generation_3/code_11.py"
    }
  ]
}