Fitness: 22.07053389229282

Description:
Enhancing MKP resolution through a probabilistic optimization algorithm that employs a value-to-weight ratio-driven item prioritization, combined with adaptive stochastic sampling, dynamic weight constraint adaptation, and iterative item selection to maximize overall prize while adhering to each knapsack's strict weight limitations.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the ratios to ensure they sum to 1
    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()
    
    # Initialize heuristics array with normalized ratios
    heuristics = np.zeros_like(prize)
    
    # Assign higher heuristics values to items with higher ratios
    heuristics = normalized_ratio
    
    return heuristics