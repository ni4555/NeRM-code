{
  "generation": 0,
  "description": "Solving Multiple Knapsack Problems (MKP) through stochastic solution sampling based on \"heuristics\". MKP involves selecting a subset of items to maximize the total prize collected, subject to multi-dimensional maximum weight constraints.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the total weight for each item by summing its weights across all dimensions\n    total_weight = np.sum(weight, axis=1)\n    \n    # Normalize the prize by the total weight to get a per-unit-weight prize value\n    normalized_prize = prize / total_weight\n    \n    # Rank the items based on their normalized prize value\n    ranked_indices = np.argsort(normalized_prize)[::-1]\n    \n    # Create an array that indicates how promising it is to include each item\n    heuristics = np.zeros_like(prize)\n    heuristics[ranked_indices] = np.arange(len(ranked_indices))\n    \n    return heuristics",
      "fitness": 10.39906567094032,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_8.txt",
      "code_file": "coevolve/generation_0/code_8.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming the heuristics are based on the ratio of prize to weight\n    # We normalize the prize by dividing it by the sum of all weights to avoid overflow issues\n    normalized_prize = prize / np.sum(weight)\n    \n    # Calculate the heuristics as the normalized prize minus the average normalized prize\n    heuristics = normalized_prize - np.mean(normalized_prize)\n    \n    # Since the weight constraint is fixed to 1 for each dimension, we can ignore the weight array\n    # and just focus on the prize-based heuristics\n    \n    return heuristics",
      "fitness": 20.758267692813178,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_2.txt",
      "code_file": "coevolve/generation_0/code_2.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming the heuristics are based on the ratio of prize to weight for each item\n    # since the weight constraint for each dimension is 1, the total weight of an item is the sum of its weights in all dimensions.\n    total_weight = weight.sum(axis=1)\n    # Avoid division by zero for items with zero weight\n    total_weight[total_weight == 0] = 1\n    # Calculate the heuristics as the ratio of prize to total weight\n    heuristics = prize / total_weight\n    return heuristics",
      "fitness": 22.138497814843017,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_4.txt",
      "code_file": "coevolve/generation_0/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize an array of zeros with shape (n,)\n    heuristics = np.zeros_like(prize, dtype=float)\n\n    # Iterate over each item\n    for i in range(prize.shape[0]):\n        # Calculate the ratio of the prize to the total weight across all dimensions\n        prize_ratio = prize[i] / weight[i].sum()\n        # Update the heuristic value for the current item\n        heuristics[i] = prize_ratio\n\n    return heuristics",
      "fitness": 22.163806963013844,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_3.txt",
      "code_file": "coevolve/generation_0/code_3.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(prize)\n    \n    # Calculate the heuristic for each item\n    for i in range(prize.shape[0]):\n        # Assuming we are using a simple heuristic that calculates the ratio of prize to weight\n        # This heuristic assumes that the weight is a 2D array where each item has one weight\n        # and that the weight constraint for each dimension is fixed to 1.\n        # Therefore, the total weight of an item is the sum of its weights across all dimensions.\n        total_weight = weight[i].sum()\n        heuristics[i] = prize[i] / total_weight if total_weight > 0 else 0\n    \n    return heuristics",
      "fitness": 22.16587645545121,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_6.txt",
      "code_file": "coevolve/generation_0/code_6.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the heuristic for each item\n    # In this simple case, we use the prize divided by the total weight (which is equal to the number of dimensions)\n    # This assumes that the weight array has shape (n, m) and that the sum of weights for each item is equal to m\n    # where m is the dimension of weights each item has\n    heuristics = prize / weight.sum(axis=1)\n    return heuristics",
      "fitness": 22.172234501013286,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_5.txt",
      "code_file": "coevolve/generation_0/code_5.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = prize.shape[0]\n    m = weight.shape[1]\n    \n    # Initialize a matrix to store the heuristic values\n    heuristics = np.zeros((n,), dtype=float)\n    \n    # Iterate through each item to compute its heuristic\n    for i in range(n):\n        # Compute the sum of weights for item i across all dimensions\n        item_weight = weight[i].sum()\n        # Normalize by the dimension of weights (since each dimension's max constraint is 1)\n        normalized_weight = item_weight / m\n        # The heuristic is the prize divided by the normalized weight\n        heuristics[i] = prize[i] / normalized_weight\n    \n    return heuristics",
      "fitness": 22.266116735878818,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_11.txt",
      "code_file": "coevolve/generation_0/code_11.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming the heuristic is based on the ratio of prize to weight\n    # and each item has the same weight in each dimension, we can\n    # simply calculate the ratio for each item across all dimensions.\n    \n    # Calculate the total weight for each item as it's the same across all dimensions\n    total_weight = weight.sum(axis=1)\n    \n    # Calculate the heuristic based on the prize to weight ratio\n    heuristics = prize / total_weight\n    \n    return heuristics",
      "fitness": 22.270705355695505,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_7.txt",
      "code_file": "coevolve/generation_0/code_7.py"
    }
  ]
}