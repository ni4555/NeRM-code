{
  "generation": 2,
  "description": "Designing an adaptive stochastic sampling heuristic for solving Multiple Knapsack Problems (MKP) involves selecting a subset of items to maximize the total prize collected, while adhering to multi-dimensional weight constraints. This approach leverages ranking by normalized value and incorporates stochastic sampling to iteratively explore solution spaces. The heuristic employs dynamic weight adjustment and a systematic item selection process to enhance prize maximization and ensure constraint compliance, resulting in an optimized set of items for each knapsack.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    \n    # Normalize the prize by the sum of the weights for each item\n    normalized_value = prize / weight.sum(axis=1)\n    \n    # Incorporate stochastic sampling to adjust the normalized values\n    # For simplicity, let's use a random perturbation\n    np.random.seed(0)  # Setting a seed for reproducibility\n    random_perturbation = np.random.normal(0, 0.1, normalized_value.shape)\n    adjusted_normalized_value = normalized_value + random_perturbation\n    \n    # Rank the adjusted normalized values\n    rank = np.argsort(-adjusted_normalized_value)  # Descending order\n    \n    # Generate a heuristic score for each item\n    heuristic = np.zeros(n)\n    heuristic[rank] = np.arange(1, n + 1)  # Higher rank, higher score\n    \n    return heuristic",
      "fitness": 11.024374445264373,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_9.txt",
      "code_file": "coevolve/generation_2/code_9.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Normalize the prize to get the value per unit weight for each item\n    value_per_weight = prize / weight.sum(axis=1, keepdims=True)\n    \n    # Calculate the normalized value by summing across all dimensions\n    normalized_value = value_per_weight.sum(axis=1)\n    \n    # Rank items based on normalized value in descending order\n    ranked_items = np.argsort(-normalized_value)\n    \n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(prize)\n    \n    # Calculate the cumulative weight of selected items\n    cumulative_weight = np.zeros_like(weight)\n    \n    # Iterate over the ranked items\n    for item in ranked_items:\n        # Check if adding the current item does not exceed the weight constraint\n        if np.all(cumulative_weight + weight[item] <= 1):\n            # Increment the cumulative weight\n            cumulative_weight += weight[item]\n            # Set the heuristics value for the current item\n            heuristics[item] = 1\n    \n    return heuristics",
      "fitness": 17.138998413002007,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_4.txt",
      "code_file": "coevolve/generation_2/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Normalize the prize by the sum of weights for each item to get the value per unit weight\n    normalized_value = prize / np.sum(weight, axis=1, keepdims=True)\n    \n    # Calculate the total normalized value for each item\n    total_normalized_value = np.sum(normalized_value, axis=1)\n    \n    # Rank items by total normalized value\n    ranking = np.argsort(-total_normalized_value)\n    \n    # Calculate the normalized value for each dimension\n    normalized_weight = weight / np.sum(weight, axis=1, keepdims=True)\n    \n    # Compute the heuristic score for each item\n    heuristic = np.prod(normalized_weight, axis=1)\n    \n    # Adjust the heuristic based on the ranking\n    heuristic *= ranking\n    \n    return heuristic",
      "fitness": 17.34556241612426,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_3.txt",
      "code_file": "coevolve/generation_2/code_3.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the normalized value for each item\n    normalized_value = prize / np.sum(weight, axis=1, keepdims=True)\n    \n    # Incorporate stochastic sampling by adding a random perturbation to normalized value\n    np.random.seed(0)  # Ensure reproducibility\n    perturbation = np.random.normal(0, 0.1, normalized_value.shape)\n    stochastic_normalized_value = normalized_value + perturbation\n    \n    # Rank items based on the adjusted normalized value\n    rank = np.argsort(-stochastic_normalized_value, axis=0)\n    \n    # Calculate the probability of selection based on rank\n    probability = 1 / (rank + 1)\n    \n    # Sum the probabilities across all dimensions for each item\n    item_probabilities = np.sum(probability, axis=1)\n    \n    # Normalize the probabilities so that they sum to 1\n    normalized_item_probabilities = item_probabilities / np.sum(item_probabilities)\n    \n    # Return the heuristics as an array where higher values indicate more promising items\n    return normalized_item_probabilities",
      "fitness": 17.648250132214695,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_0.txt",
      "code_file": "coevolve/generation_2/code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the total normalized value for each item\n    normalized_value = prize / np.min(weight, axis=1)\n    \n    # Return the normalized value as the heuristic\n    return normalized_value\n\n# Example usage:\n# n = 4, m = 2\n# prize = np.array([60, 100, 120, 70])\n# weight = np.array([[1, 2], [1, 1], [2, 2], [1, 1]])\n# heuristics = heuristics_v2(prize, weight)\n# print(heuristics)",
      "fitness": 18.947707318863586,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_8.txt",
      "code_file": "coevolve/generation_2/code_8.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Normalize the prize values\n    normalized_prize = prize / np.sum(prize)\n    \n    # Calculate the normalized weights for each item\n    normalized_weight = np.sum(weight, axis=1) / np.sum(weight)\n    \n    # Calculate the heuristic value for each item as the product of normalized prize and normalized weight\n    heuristics = normalized_prize * normalized_weight\n    \n    # Return the heuristic values as an array\n    return heuristics",
      "fitness": 19.358119184834827,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_1.txt",
      "code_file": "coevolve/generation_2/code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate normalized value for each item\n    normalized_value = prize / np.sum(weight, axis=1)\n    \n    # Rank items by normalized value\n    ranks = np.argsort(normalized_value)[::-1]\n    \n    # Initialize heuristic values to 0\n    heuristics = np.zeros_like(prize)\n    \n    # Calculate heuristic for each item based on rank\n    for rank, index in enumerate(ranks):\n        # Dynamic weight adjustment: scale by rank\n        adjusted_weight = weight[index] * (rank + 1)\n        \n        # Check if the adjusted weight is within constraints\n        if np.all(adjusted_weight <= 1):\n            heuristics[index] = rank + 1\n    \n    return heuristics",
      "fitness": 21.31534746866098,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_2.txt",
      "code_file": "coevolve/generation_2/code_2.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Normalize the prize based on the sum of weights for each item\n    normalized_prize = prize / np.sum(weight, axis=1)\n    \n    # Calculate the value per unit weight for each item\n    value_per_weight = normalized_prize / np.sum(weight, axis=1)\n    \n    # Compute the heuristics score for each item\n    heuristics = value_per_weight / np.sum(value_per_weight)\n    \n    return heuristics",
      "fitness": 22.07159556884123,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_7.txt",
      "code_file": "coevolve/generation_2/code_7.py"
    }
  ]
}