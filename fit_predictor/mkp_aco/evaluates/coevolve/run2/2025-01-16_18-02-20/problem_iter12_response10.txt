```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Incorporate a sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Combine the normalized prize, diversity score, sparsity score, and weight variance
    total_score = normalized_prize + diversity_scores + sparsity_scores - weight_variance
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Dynamically adapt the weights for scoring components based on the average score
    average_score = np.mean(total_score)
    if average_score < 0.5:
        normalized_prize_weight = 0.3
        diversity_weight = 0.4
        sparsity_weight = 0.2
        variance_weight = -0.1
    elif average_score > 0.7:
        normalized_prize_weight = 0.7
        diversity_weight = 0.2
        sparsity_weight = 0.1
        variance_weight = -0.2
    else:
        normalized_prize_weight = 0.5
        diversity_weight = 0.3
        sparsity_weight = 0.2
        variance_weight = -0.1
    
    # Adjust the total score based on the dynamic weights
    total_score = (normalized_prize * normalized_prize_weight +
                   diversity_scores * diversity_weight +
                   sparsity_scores * sparsity_weight +
                   weight_variance * variance_weight)
    
    # Normalize the total score again to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Rank the items based on their adjusted total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//3]] = 1
    
    return heuristics
```
