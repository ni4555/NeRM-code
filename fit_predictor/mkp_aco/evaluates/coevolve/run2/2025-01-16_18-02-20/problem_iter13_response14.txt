```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the variance of normalized prize values
    diversity_scores = np.var(normalized_prize)
    
    # Normalize the diversity score based on the maximum diversity score
    normalized_diversity = diversity_scores / np.max(diversity_scores)
    
    # Incorporate sparsity and weight variance into the diversity score
    sparsity_scores = np.sum(weight, axis=1)
    weight_variance = np.var(weight, axis=1)
    adjusted_diversity = normalized_diversity + sparsity_scores * 0.2 - weight_variance * 0.1
    
    # Rank the items based on their adjusted diversity score
    ranked_indices = np.argsort(-adjusted_diversity)
    
    # Dynamically adapt the threshold for sparsity based on the average weight variance
    average_weight_variance = np.mean(weight_variance)
    if average_weight_variance < 1:
        sparsity_threshold = 0.8
    else:
        sparsity_threshold = 0.5
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//3]] = 1
    
    return heuristics
```
