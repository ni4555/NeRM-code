```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics with all items having equal initial probability
    heuristics = np.ones_like(prize) / prize.size
    
    # Define a diversity function that increases diversity as the item has fewer similar items
    diversity_function = lambda x: np.mean(np.abs(x - np.roll(x, 1)))
    
    # Iteratively refine heuristics
    for _ in range(10):  # Repeat process 10 times to refine the heuristics
        # Calculate the current diversity score for each item
        diversity_scores = diversity_function(prize)
        
        # Adjust the heuristics based on diversity and sparsity
        heuristics = heuristics * (1 - diversity_scores) + (1 - heuristics) * sparsity_scores
    
    # Normalize heuristics to ensure they sum to 1
    heuristics /= heuristics.sum()
    
    # Sparsify by setting the top 30% of the heuristics to 1
    heuristics[heuristics.argsort()[::-1][:len(heuristics)//3]] = 1
    
    return heuristics
```
