```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize scores array with zeros
    scores = np.zeros_like(prize)
    
    # Calculate item-specific metrics
    total_weight = np.sum(weight, axis=1)
    normalized_prize = prize / total_weight
    
    # Calculate sparsity score based on the percentage of dimensions where the weight is zero
    sparsity_scores = np.mean(weight == 0, axis=1)
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Use adaptive sparsity threshold based on the average sparsity of items
    sparsity_threshold = np.mean(sparsity_scores)
    
    # Use median as the diversity threshold
    diversity_threshold = np.median(diversity_scores)
    
    # Calculate scores combining normalized prize value, diversity, and sparsity
    for i in range(len(prize)):
        scores[i] = normalized_prize[i]
        scores[i] += (diversity_threshold - np.abs(normalized_prize[i] - diversity_threshold)) * (1 - sparsity_threshold)
        scores[i] -= (sparsity_threshold - sparsity_scores[i]) * (1 - (normalized_prize[i] / prize[i]))
    
    # Rank the items based on their scores
    ranked_indices = np.argsort(scores)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Include a fixed percentage of the highest scoring items in the heuristics array
    top_n = int(0.2 * len(prize))  # Including top 20% of the highest scoring items
    heuristics[ranked_indices[:top_n]] = 1
    
    return heuristics
```
