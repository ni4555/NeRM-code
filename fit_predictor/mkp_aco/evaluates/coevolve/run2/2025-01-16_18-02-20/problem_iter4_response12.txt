```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight
    normalized_prize = prize / total_weight
    
    # Calculate diversity score by considering the mean distance to the rest of the normalized prizes
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score as the inverse of the average number of zero weights
    sparsity_scores = 1 / np.mean(weight == 0, axis=1)
    
    # Combine the scores using a weighted sum with weights for each component
    combined_scores = normalized_prize + 0.4 * diversity_scores + 0.2 * sparsity_scores
    
    # Rank the items based on the combined score
    ranked_indices = np.argsort(combined_scores)[::-1]
    
    # Initialize the heuristics array
    heuristics = np.zeros_like(prize)
    
    # Include the top 50% of the highest scoring items in the heuristics array
    heuristics[ranked_indices[:len(ranked_indices)//2]] = 1
    
    return heuristics
```
