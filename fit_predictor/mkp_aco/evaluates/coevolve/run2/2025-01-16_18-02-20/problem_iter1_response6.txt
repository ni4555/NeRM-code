```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the sparsity of an item's weight
    sparsity = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Combine the normalized prize value and sparsity into a single heuristic value
    combined_heuristics = normalized_prize * (1 - sparsity)
    
    # Rank the items based on their combined heuristic value
    ranked_indices = np.argsort(combined_heuristics)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    heuristics[ranked_indices] = np.arange(len(ranked_indices))
    
    return heuristics
```
