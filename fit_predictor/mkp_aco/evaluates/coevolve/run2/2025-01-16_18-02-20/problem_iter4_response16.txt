```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate a sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Combine normalized prize, diversity score, and sparsity score into a total score
    total_score = normalized_prize + diversity_scores + sparsity_scores
    
    # To avoid overfitting diversity, we introduce a decay factor
    decay_factor = 0.5
    total_score *= decay_factor
    
    # Calculate the sum of total scores
    sum_total_score = np.sum(total_score)
    
    # Avoid division by zero
    if sum_total_score == 0:
        heuristics = np.zeros_like(prize)
    else:
        # Normalize the total score to sum to 1
        heuristics = total_score / sum_total_score
    
    # Sparsify the heuristics by setting the top 50% of promising elements to 1
    heuristics = np.where(heuristics >= 0.5, 1, 0)
    
    return heuristics
```
