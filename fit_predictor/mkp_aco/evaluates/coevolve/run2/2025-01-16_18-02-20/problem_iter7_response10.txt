```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the percentage of dimensions where the weight is zero
    sparsity_scores = np.mean(weight == 0, axis=1)
    
    # Combine the normalized prize value, diversity score, and sparsity score with a domain-specific weighting
    total_score = normalized_prize * 0.7 + diversity_scores * 0.2 - sparsity_scores * 0.1
    
    # Adjust the scores to maintain balance between high-value items and diverse items
    adjusted_scores = total_score * (1 + (len(ranked_indices) - np.argmax(total_score)) / len(ranked_indices))
    
    # Rank the items based on their adjusted score
    ranked_indices = np.argsort(adjusted_scores)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 50% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//2]] = 1
    
    return heuristics
```
