```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the sparsity of an item based on the sum of its weight dimensions
    sparsity = np.exp(-np.sum(weight, axis=1))
    
    # Combine normalized prize value and sparsity to get a combined score
    combined_score = normalized_prize * sparsity
    
    # Non-linearly scale the combined score to emphasize high-value items
    scaled_score = np.sqrt(combined_score)
    
    # Rank the items based on their scaled score
    ranked_indices = np.argsort(scaled_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    heuristics[ranked_indices] = np.arange(len(ranked_indices))
    
    # Set unpromising elements to zero based on a threshold
    threshold = np.percentile(scaled_score, 50)
    heuristics[scaled_score < threshold] = 0
    
    return heuristics
```
