```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the diversity measure by considering the spread of normalized weights
    diversity_measure = np.var(weight, axis=1)
    
    # Calculate a composite heuristic by combining normalized prize and diversity measure
    composite_heuristic = normalized_prize + diversity_measure
    
    # Calculate adaptive thresholds based on the standard deviation of the composite heuristic
    mean_composite = np.mean(composite_heuristic)
    std_composite = np.std(composite_heuristic)
    
    # Create a threshold that considers both the mean and standard deviation
    threshold = mean_composite + std_composite
    
    # Sparsify the heuristics by setting a threshold and zeroing out lower values
    heuristics = np.zeros_like(prize)
    heuristics[composite_heuristic > threshold] = 1.0
    
    # Introduce randomness to ensure diversity in the selection
    random_indices = np.where(composite_heuristic > threshold)[0]
    if len(random_indices) > 1:
        np.random.shuffle(random_indices)
        for i in range(0, len(random_indices), 2):
            if i + 1 < len(random_indices):
                heuristics[[random_indices[i], random_indices[i+1]]] = heuristics[[random_indices[i+1], random_indices[i]]]
    
    return heuristics
```
