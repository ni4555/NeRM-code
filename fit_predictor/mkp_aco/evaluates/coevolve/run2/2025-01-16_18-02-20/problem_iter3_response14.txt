```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the percentage of dimensions where the weight is zero
    sparsity_scores = np.mean(weight == 0, axis=1)
    
    # Combine normalized prize value, diversity score, and sparsity score with an adaptive weight
    composite_score = normalized_prize + 0.5 * diversity_scores - 0.1 * sparsity_scores
    
    # Use domain knowledge to add a penalty for items with high sparsity score beyond a threshold
    penalty_threshold = 0.7
    domain_penalty = np.where(sparsity_scores > penalty_threshold, 1 - sparsity_scores, 0)
    
    # Adjust the composite score with the domain penalty
    adjusted_score = composite_score * domain_penalty
    
    # Rank the items based on their adjusted score
    ranked_indices = np.argsort(adjusted_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 20% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//5]] = 1
    
    return heuristics
```
