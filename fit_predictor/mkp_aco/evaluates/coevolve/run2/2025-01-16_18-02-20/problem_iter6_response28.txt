```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score as the average percentage of zero weights across all dimensions
    sparsity_scores = np.mean(weight == 0, axis=1)
    
    # Weights for the heuristic function, adjusted to emphasize diversity and sparsity
    weights = np.array([0.5, 0.3, -0.2])  # Prize is weighted positively, diversity is weighted positively, sparsity is weighted negatively
    
    # Combine the metrics using a weighted sum to form a total heuristic score
    total_score = weights[0] * normalized_prize + weights[1] * diversity_scores + weights[2] * sparsity_scores
    
    # Rank the items based on their total heuristic score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates the heuristic value for each item
    heuristics = np.zeros_like(prize)
    
    # Select items for inclusion based on their heuristic score, considering diversity and sparsity
    # Select the top half of the ranked items with positive sparsity scores
    heuristics[ranked_indices[sparsity_scores[ranked_indices] > 0]] = 1
    
    return heuristics
```
