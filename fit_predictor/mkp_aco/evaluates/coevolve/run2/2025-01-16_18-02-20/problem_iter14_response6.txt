```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight
    normalized_prize = prize / total_weight
    
    # Calculate diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Combine normalized prize and diversity score with fixed trade-off factors
    total_score = (normalized_prize * 0.7 +
                   diversity_scores * 0.3)
    
    # Normalize the total score
    total_score /= np.max(total_score)
    
    # Sparsify the heuristics by setting the top 50% of promising elements to 1
    heuristics = np.zeros_like(prize)
    heuristics[total_score.argsort()[::-1][:len(total_score)//2]] = 1
    
    return heuristics
```
