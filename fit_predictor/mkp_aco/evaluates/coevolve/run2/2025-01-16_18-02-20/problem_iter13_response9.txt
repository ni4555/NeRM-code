```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate the sum of weights across dimensions for each item to use for sparsity score
    sparsity_scores = np.sum(weight, axis=1)
    
    # Use the inverse of the sparsity score to increase the heuristics value of less weighted items
    inverse_sparsity = 1 / (sparsity_scores + 1e-6)
    
    # Use the weight variance to reduce the heuristics value of items with more variance in weight distribution
    weight_variance = np.var(weight, axis=1)
    variance_penalty = weight_variance / (np.sum(weight_variance) + 1e-6)
    
    # Combine scores with different weights
    combined_score = normalized_prize * 0.5 + diversity_scores * 0.3 + inverse_sparsity * 0.2 - variance_penalty * 0.1
    
    # Normalize the combined score to ensure they are on the same scale
    total_score = combined_score / np.max(combined_score)
    
    # Rank the items based on their normalized combined score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 20% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//5]] = 1
    
    return heuristics
```
