```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Incorporate a sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Combine normalized prize, diversity score, sparsity score, and weight variance
    combined_score = normalized_prize + diversity_scores * 0.3 + sparsity_scores * 0.2 - weight_variance * 0.1
    
    # Normalize the combined score to ensure they are on the same scale
    normalized_score = combined_score / np.max(combined_score)
    
    # Dynamically adapt the influence weights based on the standard deviation of the combined score
    influence_std = np.std(combined_score)
    if influence_std < 0.2:
        normalized_prize_weight = 0.4
        diversity_weight = 0.2
        sparsity_weight = 0.2
        variance_weight = -0.2
    elif influence_std < 0.5:
        normalized_prize_weight = 0.3
        diversity_weight = 0.25
        sparsity_weight = 0.15
        variance_weight = -0.2
    else:
        normalized_prize_weight = 0.25
        diversity_weight = 0.25
        sparsity_weight = 0.15
        variance_weight = -0.3
    
    # Update the combined score with the new influence weights
    updated_score = (normalized_prize * normalized_prize_weight +
                     diversity_scores * diversity_weight +
                     sparsity_scores * sparsity_weight -
                     weight_variance * variance_weight)
    
    # Rank the items based on their updated score
    ranked_indices = np.argsort(updated_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//3]] = 1
    
    return heuristics
```
