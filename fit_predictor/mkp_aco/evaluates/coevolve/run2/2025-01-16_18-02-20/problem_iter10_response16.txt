```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate the sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Use a weighted sum of the normalized prize, diversity, sparsity, and weight variance
    combined_score = normalized_prize * 0.6 + diversity_scores * 0.2 + sparsity_scores * 0.1 - weight_variance * 0.1
    
    # Normalize the combined score to ensure consistency in scale
    normalized_combined_score = combined_score / np.max(combined_score)
    
    # Apply a dynamic threshold based on the 90th percentile of the normalized combined scores
    threshold = np.percentile(normalized_combined_score, 90)
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 50% of promising elements to 1
    heuristics[np.argsort(normalized_combined_score)[::-1][:len(np.argsort(normalized_combined_score)[::-1])//2]] = 1
    
    return heuristics
```
