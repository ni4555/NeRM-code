```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate a sparsity score based on the percentage of dimensions where the weight is zero
    sparsity_scores = np.mean(weight == 0, axis=1)
    
    # Use domain insight to define thresholds for scoring components
    prize_threshold = np.max(normalized_prize) * 0.8  # 80% of the max prize value
    diversity_threshold = np.mean(diversity_scores) * 0.5  # 50% of the average diversity score
    
    # Filter items based on thresholds
    filtered_items = (normalized_prize >= prize_threshold) & (diversity_scores >= diversity_threshold)
    
    # Rank the filtered items based on their normalized prize value and diversity score
    ranked_indices = np.argsort((filtered_items * normalized_prize + (1 - filtered_items) * diversity_scores))[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 20% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//5]] = 1
    
    return heuristics
```
