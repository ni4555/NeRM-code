```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity based on the weighted spread of normalized prizes
    diversity = np.mean(np.abs(normalized_prize - np.mean(normalized_prize)))
    
    # Combine normalized prize and diversity to create a heuristic
    combined_heuristic = normalized_prize + diversity
    
    # Calculate dynamic thresholds based on the 90th percentile of the combined heuristic
    threshold_high = np.percentile(combined_heuristic, 90)
    threshold_low = np.percentile(combined_heuristic, 10)
    
    # Create heuristics array and sparsify by setting elements above the high threshold and below the low threshold to 1.0
    heuristics = np.zeros_like(prize)
    heuristics[combined_heuristic > threshold_high] = 1.0
    heuristics[combined_heuristic < threshold_low] = 1.0
    
    return heuristics
```
