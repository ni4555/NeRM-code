```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight
    normalized_prize = prize / total_weight
    
    # Use the normalized prize as a primary factor
    primary_factor = normalized_prize
    
    # Calculate a diversity score by averaging the distance from each item to the mean normalized prize
    diversity_score = np.mean(np.abs(normalized_prize - np.mean(normalized_prize)))
    
    # Incorporate a sparsity factor based on the average weight across dimensions
    sparsity_factor = np.mean(weight, axis=1)
    
    # Combine primary factor, diversity score, and sparsity factor
    combined_score = primary_factor * 0.7 + diversity_score * 0.2 + (1 - sparsity_factor) * 0.1
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Incorporate weight variance with a negative weight to penalize highly variant weights
    combined_score -= weight_variance * 0.1
    
    # Normalize the combined score to ensure all elements are on the same scale
    total_score = combined_score / np.max(combined_score)
    
    # Rank the items based on their total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array indicating the promisingness of each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//3]] = 1
    
    return heuristics
```
