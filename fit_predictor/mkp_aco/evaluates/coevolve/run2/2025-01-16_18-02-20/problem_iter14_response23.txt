```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Incorporate a sparsity score based on the percentage of zero weight dimensions
    sparsity_scores = (weight.sum(axis=1) == 0).mean(axis=0)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Initialize the trade-off factors
    trade_off_factor_prize = 0.6
    trade_off_factor_diversity = 0.3
    trade_off_factor_sparsity = 0.1
    trade_off_factor_variance = 0.1
    
    # Create a composite heuristic by combining different factors
    composite_heuristic = (
        normalized_prize * trade_off_factor_prize +
        diversity_scores * trade_off_factor_diversity +
        (1 - sparsity_scores) * trade_off_factor_sparsity -  # Use the inverse as sparsity increases the heuristic
        weight_variance * trade_off_factor_variance
    )
    
    # Normalize the composite heuristic
    max_heuristic = np.max(composite_heuristic)
    min_heuristic = np.min(composite_heuristic)
    normalized_heuristics = (composite_heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Dynamically adjust trade-off factors based on the normalized heuristic distribution
    # Weights are adjusted based on the standard deviation of the heuristics
    trade_off_factor_sparsity *= (np.std(normalized_heuristics) / np.max(np.std(normalized_heuristics)))
    trade_off_factor_variance *= (np.std(weight_variance) / np.max(np.std(weight_variance)))
    
    # Recalculate the composite heuristic with adjusted trade-off factors
    composite_heuristic = (
        normalized_prize * trade_off_factor_prize +
        diversity_scores * trade_off_factor_diversity +
        (1 - sparsity_scores) * trade_off_factor_sparsity -
        weight_variance * trade_off_factor_variance
    )
    
    # Normalize again if needed
    max_composite = np.max(composite_heuristic)
    min_composite = np.min(composite_heuristic)
    normalized_composite_heuristic = (composite_heuristic - min_composite) / (max_composite - min_composite)
    
    # Rank the items based on their normalized composite heuristic scores
    ranked_indices = np.argsort(normalized_composite_heuristic)[::-1]
    
    # Create an initial array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    
    # Sparsify the heuristics by setting the top 30% of items to 1
    heuristics[ranked_indices[:len(ranked_indices)//3]] = 1
    
    return heuristics
```
