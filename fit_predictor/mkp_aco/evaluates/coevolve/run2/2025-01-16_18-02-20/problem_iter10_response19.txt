```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the percentage of dimensions where the weight is zero
    sparsity_scores = np.mean(weight == 0, axis=1)
    
    # Calculate the weight variance for each item
    weight_variance = np.var(weight, axis=1)
    
    # Combine the scores into a single heuristic score
    heuristic_score = normalized_prize * 0.4 + diversity_scores * 0.3 + sparsity_scores * 0.2 - weight_variance * 0.1
    
    # Normalize the heuristic score to ensure they are on the same scale
    max_score = np.max(heuristic_score)
    min_score = np.min(heuristic_score)
    heuristic_score = (heuristic_score - min_score) / (max_score - min_score)
    
    # Rank the items based on their heuristic score
    ranked_indices = np.argsort(heuristic_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Include a certain percentage of the highest scoring items in the heuristics array
    top_n = int(0.5 * len(prize))  # Including top 50% of the highest scoring items
    heuristics[ranked_indices[:top_n]] = 1
    
    return heuristics
```
