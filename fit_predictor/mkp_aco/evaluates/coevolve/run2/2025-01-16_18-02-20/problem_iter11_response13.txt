```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Combine normalized prize and diversity score with a trade-off factor
    trade_off_factor = 0.5
    total_score = normalized_prize * trade_off_factor + diversity_scores * (1 - trade_off_factor)
    
    # Incorporate a sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Use a dynamic trade-off that increases the importance of sparsity and weight variance
    # when the average prize value is below a threshold
    prize_threshold = np.mean(normalized_prize)
    trade_off_sparsity = 1 if prize_threshold < 10 else 0.2
    trade_off_variance = 1 if prize_threshold < 10 else 0.1
    
    # Include the sparsity and weight variance in the total score
    total_score += sparsity_scores * trade_off_sparsity - weight_variance * trade_off_variance
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Rank the items based on their normalized total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 20% of promising elements to 1, but no less than 1
    top_n = int(0.2 * len(ranked_indices))
    heuristics[ranked_indices[:top_n]] = 1
    
    return heuristics
```
