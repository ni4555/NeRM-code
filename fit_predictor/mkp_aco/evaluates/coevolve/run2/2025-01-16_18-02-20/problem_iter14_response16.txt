```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the diversity measure by considering the spread of normalized weights
    diversity_measure = np.var(weight, axis=1)
    
    # Incorporate item-specific features by considering the average prize per unit weight
    average_prize_per_unit_weight = np.mean(normalized_prize)
    
    # Create a composite heuristic by combining normalized prize, diversity measure, and average prize per unit weight
    composite_heuristic = normalized_prize + diversity_measure + (normalized_prize - average_prize_per_unit_weight)
    
    # Calculate an adaptive threshold based on the standard deviation of the composite heuristic
    threshold = np.std(composite_heuristic)
    
    # Sparsify the heuristics by setting a threshold and zeroing out lower values
    heuristics = np.zeros_like(prize)
    heuristics[composite_heuristic > threshold] = 1.0
    
    return heuristics
```
