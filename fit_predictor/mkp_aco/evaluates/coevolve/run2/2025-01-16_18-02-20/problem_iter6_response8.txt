```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the sum of the normalized weights, which serves as a diversity measure
    sum_normalized_weights = np.sum(weight, axis=1)
    
    # Create a composite heuristic by combining normalized prize and diversity measure
    composite_heuristic = normalized_prize + sum_normalized_weights
    
    # Calculate adaptive thresholds based on the 90th percentile of the composite heuristic
    threshold_prize = np.percentile(normalized_prize, 90)
    threshold_diversity = np.percentile(sum_normalized_weights, 90)
    
    # Sparsify the heuristics by setting the threshold and zeroing out lower values
    heuristics = np.zeros_like(prize)
    heuristics[(composite_heuristic >= threshold_prize) & (composite_heuristic >= threshold_diversity)] = 1.0
    
    return heuristics
```
