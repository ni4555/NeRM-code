```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Use the inverse of the diversity score to increase the importance of diverse items
    inv_diversity_scores = 1 / (1 + diversity_scores)
    
    # Incorporate the sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Include the sparsity and weight variance in the total score
    total_score = normalized_prize * 0.7 + inv_diversity_scores * 0.2 + sparsity_scores * 0.1 - weight_variance * 0.1
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Dynamically adapt the scores based on the sum of weights to prioritize lighter items
    weight_sum = np.sum(weight, axis=1)
    total_score *= weight_sum / np.max(weight_sum)
    
    # Rank the items based on their updated normalized total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//3]] = 1
    
    return heuristics
```
