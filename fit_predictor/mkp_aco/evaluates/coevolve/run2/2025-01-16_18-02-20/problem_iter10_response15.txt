```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the percentage of dimensions where the weight is zero
    sparsity_scores = np.mean(weight == 0, axis=1)
    
    # Incorporate variance in the weight across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Combine normalized prize, diversity score, sparsity score, and weight variance with trade-off factors
    trade_off_factor_prize = 0.6
    trade_off_factor_diversity = 0.2
    trade_off_factor_sparsity = 0.1
    trade_off_factor_variance = 0.1
    total_score = normalized_prize * trade_off_factor_prize + diversity_scores * trade_off_factor_diversity - \
                  sparsity_scores * trade_off_factor_sparsity - weight_variance * trade_off_factor_variance
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Rank the items based on their normalized total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 40% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//2.5]] = 1
    
    return heuristics
```
