```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Incorporate a sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Combine normalized prize, diversity, sparsity, and weight variance in a weighted way
    trade_off_factor = 0.6
    sparsity_factor = 0.2
    variance_factor = 0.2
    
    # The total score will be a weighted sum of these metrics
    total_score = (normalized_prize * trade_off_factor +
                   diversity_scores * trade_off_factor +
                   sparsity_scores * sparsity_factor +
                   weight_variance * -variance_factor)  # Negative variance factor to penalize high variance
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Rank the items based on their normalized total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    num_top_items = int(0.3 * len(prize))
    heuristics[ranked_indices[:num_top_items]] = 1
    
    # Mutate the heuristics by adding random perturbations to the top 10% of the heuristics
    mutation_factor = 0.1
    mutation_indices = ranked_indices[:int(0.1 * len(prize))]
    mutation_amount = np.random.normal(0, mutation_factor, size=len(mutation_indices))
    heuristics[mutation_indices] += mutation_amount
    
    # Ensure that the heuristics are within the range [0, 1]
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
