```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the percentage of non-zero weight dimensions
    sparsity_scores = np.mean(np.sum(weight, axis=1) > 0, axis=1)
    
    # Calculate a total score by combining normalized prize value and diversity score
    total_score = normalized_prize * diversity_scores - (1 - sparsity_scores)
    
    # Calculate the median of the total score
    adaptive_threshold = np.median(total_score)
    
    # Create an array indicating the promise of each item
    heuristics = np.zeros_like(prize)
    
    # Sparsify the heuristics by setting elements above the adaptive threshold to 1
    heuristics[total_score > adaptive_threshold] = 1
    
    return heuristics
```
