```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the percentage of non-zero weights
    sparsity_scores = np.mean((weight != 0).astype(int), axis=1)
    
    # Calculate variance score to add robustness
    variance_scores = np.var(weight, axis=1)
    
    # Combine metrics with a weighted sum
    alpha, beta, gamma, delta = 0.5, 0.3, 0.1, 0.1
    total_score = (normalized_prize * alpha +
                   diversity_scores * beta +
                   sparsity_scores * gamma +
                   variance_scores * delta)
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Rank the items based on their normalized total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    top_items = int(0.3 * len(ranked_indices))
    heuristics[ranked_indices[:top_items]] = 1
    
    return heuristics
```
