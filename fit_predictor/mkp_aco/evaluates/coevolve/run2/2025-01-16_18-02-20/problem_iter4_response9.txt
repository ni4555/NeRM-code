```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score by the variance of normalized prizes
    diversity_scores = np.var(normalized_prize)
    
    # Calculate a sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Normalize the sparsity scores to get a value between 0 and 1
    sparsity_scores /= np.max(sparsity_scores)
    
    # Combine normalized prize, diversity score, and sparsity score into a total score
    total_score = normalized_prize * diversity_scores * sparsity_scores
    
    # Rank the items based on their total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 50% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//2]] = 1
    
    return heuristics
```
