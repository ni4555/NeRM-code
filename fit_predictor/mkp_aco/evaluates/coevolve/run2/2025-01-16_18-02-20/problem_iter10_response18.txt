```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Combine normalized prize and diversity score with a trade-off factor
    trade_off_factor = 0.6
    total_score = normalized_prize * trade_off_factor + diversity_scores * (1 - trade_off_factor)
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 20% of promising elements to 1
    heuristics[np.argsort(total_score)[::-1][:len(total_score)//5]] = 1
    
    return heuristics
```
