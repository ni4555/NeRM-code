```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the standard deviation of the normalized prize values as a diversity measure
    std_dev_normalized_prize = np.std(normalized_prize)
    
    # Calculate the sum of the normalized weights, which serves as a diversity measure
    sum_normalized_weights = np.sum(weight, axis=1)
    
    # Combine normalized prize and sum of normalized weights to form a composite heuristic
    composite_heuristic = normalized_prize + sum_normalized_weights
    
    # Calculate the standard deviation of the composite heuristic as an additional diversity measure
    std_dev_composite_heuristic = np.std(composite_heuristic)
    
    # Combine the two diversity measures by taking the mean
    combined_diversity = (std_dev_normalized_prize + std_dev_composite_heuristic) / 2
    
    # Rank the items based on their combined diversity score
    ranked_indices = np.argsort(-combined_diversity)
    
    # Sparsify the heuristics by setting a threshold based on the mean combined diversity
    threshold = np.mean(combined_diversity)
    
    # Set the heuristics for items with a combined diversity score above the threshold to 1
    heuristics = np.zeros_like(prize)
    heuristics[ranked_indices] = 1.0 * (combined_diversity[ranked_indices] > threshold)
    
    return heuristics
```
