```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by the sum of weights across all dimensions
    normalized_prize = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity score as the mean difference from the rest
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Define a simple heuristic that combines normalized prize and diversity
    combined_score = normalized_prize + diversity_scores
    
    # Include sparsity in the heuristic by adding the inverse of the sum of weights
    sparsity_scores = np.sum(weight, axis=1)
    combined_score += 1 / sparsity_scores
    
    # Introduce a trade-off between the normalized prize and diversity
    trade_off_factor = 0.7  # Dynamic adjustment can be added as needed
    total_score = combined_score * trade_off_factor + diversity_scores * (1 - trade_off_factor)
    
    # Normalize the total score to scale it properly
    total_score /= np.max(total_score)
    
    # Create a ranking based on the total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Initialize heuristics array and sparsify it by setting the top 20% of high scores to 1
    heuristics = np.zeros_like(prize)
    heuristics[ranked_indices[:len(ranked_indices)//5]] = 1
    
    return heuristics
```
