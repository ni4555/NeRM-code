```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an array of heuristics with zeros
    heuristics = np.zeros_like(prize)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / np.sum(weight, axis=1).reshape(-1, 1)
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize[:, np.newaxis]), axis=0)
    
    # Calculate a sparsity score based on the number of zero weight dimensions
    sparsity_scores = np.mean(weight == 0, axis=1)
    
    # Adjust the normalized prize value with diversity and sparsity
    adjusted_prize = normalized_prize * diversity_scores / (1 + sparsity_scores)
    
    # Rank the items based on their adjusted prize value
    ranked_indices = np.argsort(adjusted_prize)[::-1]
    
    # Set the top 50% of the highest adjusted prize items as promising
    heuristics[ranked_indices[:len(ranked_indices)//2]] = 1
    
    return heuristics
```
