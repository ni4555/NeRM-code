```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Introduce randomness in the trade-off factor
    trade_off_factor = 0.5 + 0.5 * np.random.rand()
    total_score = normalized_prize * trade_off_factor + diversity_scores * (1 - trade_off_factor)
    
    # Use a dynamic factor to incorporate sparsity score
    sparsity_factor = 0.2 + 0.8 * np.random.rand()
    sparsity_scores = np.sum(weight, axis=1)
    total_score += sparsity_scores * sparsity_factor
    
    # Use a dynamic factor to penalize high variance
    variance_factor = 0.1 + 0.9 * np.random.rand()
    weight_variance = np.var(weight, axis=1)
    total_score -= weight_variance * variance_factor
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Introduce randomness in the selection of items
    selection_probability = 0.3 + 0.2 * np.random.rand()
    ranked_indices = np.argsort(total_score)[::-1]
    heuristics = np.zeros_like(prize)
    selected_indices = ranked_indices[:int(len(ranked_indices) * selection_probability)]
    heuristics[selected_indices] = 1
    
    # Randomly perturb the selected items for exploration
    perturbation_probability = 0.1
    perturbation_indices = selected_indices[:int(len(selected_indices) * perturbation_probability)]
    perturbation_amount = np.random.normal(0, 1, size=len(perturbation_indices))
    heuristics[perturbation_indices] += perturbation_amount
    
    # Ensure that the heuristics are within the range [0, 1]
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
