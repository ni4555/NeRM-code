```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - np.mean(normalized_prize, axis=0)), axis=0)
    
    # Calculate a sparsity score as the percentage of zero weights in each item
    sparsity_scores = np.mean(weight == 0, axis=1)
    
    # Calculate the total score for each item as a weighted sum of its normalized prize, diversity score, and sparsity score
    # Here, we assign different weights to emphasize certain aspects: normalized prize (value per unit weight),
    # diversity (spread of value across items), and sparsity (minimal use of resource).
    total_score = normalized_prize * 0.5 + diversity_scores * 0.3 + (1 - sparsity_scores) * 0.2
    
    # Rank the items based on their total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Select a threshold percentage to indicate how many items are considered promising
    threshold_percentage = 0.5
    # Set the top threshold_percentage of items with the highest total score to 1
    heuristics[ranked_indices[:int(len(ranked_indices) * threshold_percentage)]] = 1
    
    return heuristics
```
