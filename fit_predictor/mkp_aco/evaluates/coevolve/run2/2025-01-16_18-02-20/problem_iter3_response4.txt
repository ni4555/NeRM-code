```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - np.repeat(normalized_prize, n, axis=0).T), axis=0)
    
    # Calculate a sparsity score based on the percentage of dimensions where the weight is zero
    sparsity_scores = np.mean(weight == 0, axis=1)
    
    # Apply domain knowledge by considering items with a high prize-to-weight ratio and low sparsity
    # Use a threshold for sparsity and a minimum prize-to-weight ratio
    sparsity_threshold = 0.5
    min_prize_to_weight_ratio = 2
    heuristics_score = (normalized_prize >= min_prize_to_weight_ratio) & (sparsity_scores <= sparsity_threshold)
    
    # Combine heuristics_score with diversity_scores to create a composite metric
    composite_score = heuristics_score * diversity_scores
    
    # Rank the items based on their composite score
    ranked_indices = np.argsort(composite_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//3]] = 1
    
    return heuristics
```
