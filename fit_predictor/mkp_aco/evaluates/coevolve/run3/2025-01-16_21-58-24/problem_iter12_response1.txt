```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a penalty factor for outliers based on the interquartile range
    q1 = np.percentile(value_to_weight_ratio, 25)
    q3 = np.percentile(value_to_weight_ratio, 75)
    iqr = q3 - q1
    penalty_factor = np.where((value_to_weight_ratio < q1 - 1.5 * iqr) | (value_to_weight_ratio > q3 + 1.5 * iqr),
                              (value_to_weight_ratio - q1) / (q3 - q1),
                              0)
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine the factors to create a heuristic
    combined_heuristics = value_to_weight_ratio * (1 - penalty_factor + density_factor)
    
    # Factor 1: The sum of the weights (to avoid overly heavy items)
    weight_factor = weight.sum(axis=1)
    
    # Factor 2: The number of non-zero weights (to avoid items with too many dimensions)
    dimension_factor = (weight != 0).sum(axis=1)
    
    # Factor 3: The average weight in each dimension (to balance the weight across dimensions)
    avg_weight_factor = np.mean(weight, axis=1)
    
    # Factor 4: The total value (to prioritize high-value items)
    value_factor = prize
    
    # Normalize factors to a range between 0 and 1
    min_weight_factor = np.min(weight_factor)
    max_weight_factor = np.max(weight_factor)
    min_dimension_factor = np.min(dimension_factor)
    max_dimension_factor = np.max(dimension_factor)
    min_avg_weight_factor = np.min(avg_weight_factor)
    max_avg_weight_factor = np.max(avg_weight_factor)
    min_value_factor = np.min(value_factor)
    max_value_factor = np.max(value_factor)
    
    weight_factor = (weight_factor - min_weight_factor) / (max_weight_factor - min_weight_factor)
    dimension_factor = (dimension_factor - min_dimension_factor) / (max_dimension_factor - min_dimension_factor)
    avg_weight_factor = (avg_weight_factor - min_avg_weight_factor) / (max_avg_weight_factor - min_avg_weight_factor)
    value_factor = (value_factor - min_value_factor) / (max_value_factor - min_value_factor)
    
    # Combine factors to create a heuristic
    heuristic = combined_heuristics * weight_factor * dimension_factor * avg_weight_factor * value_factor
    
    # Sparsify the heuristics by setting lower elements to zero
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristic = np.where(heuristic > sparsity_threshold, heuristic, 0)
    
    # Add randomness to enhance exploration
    random_factor = np.random.rand(len(heuristic))
    heuristic += random_factor * 0.1
    
    # Mutation step: Apply a small change to the heuristic values to encourage diversity
    mutation_factor = np.random.rand(len(heuristic))
    mutation_factor = mutation_factor * (heuristic / sparsity_threshold) * 0.05
    heuristic += mutation_factor * (np.random.choice([1, -1], size=len(heuristic)))
    
    return heuristic
```
