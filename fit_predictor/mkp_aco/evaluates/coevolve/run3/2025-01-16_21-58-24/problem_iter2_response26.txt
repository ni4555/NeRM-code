```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a sparsity factor based on the ratio
    sparsity_factor = 1 - (value_to_weight_ratio / np.max(value_to_weight_ratio))
    
    # Normalize the sparsity factor to ensure it does not exceed 1
    max_sparsity = np.max(sparsity_factor)
    if max_sparsity > 1:
        sparsity_factor /= max_sparsity
    
    # Combine the normalized ratio with the normalized sparsity factor
    combined_heuristics = value_to_weight_ratio * sparsity_factor
    
    # Adjust heuristics by adding a term based on the sum of the weights in each dimension
    heuristic_adjustment = np.sum(weight, axis=1)
    adjusted_heuristics = combined_heuristics + heuristic_adjustment
    
    # Set unpromising elements to zero based on a threshold
    threshold = np.max(adjusted_heuristics)
    heuristics = np.where(adjusted_heuristics > threshold, adjusted_heuristics, 0)
    
    return heuristics
```
