```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a diversity factor based on the standard deviation
    diversity_factor = 1 - (np.std(value_to_weight_ratio) / np.max(np.std(value_to_weight_ratio)))
    
    # Calculate a percentile-based factor
    percentile_factor = np.percentile(value_to_weight_ratio, 90) / value_to_weight_ratio
    
    # Combine the normalized ratio with the diversity and percentile factors
    combined_heuristics = value_to_weight_ratio * (diversity_factor + percentile_factor)
    
    # Apply a threshold to the heuristics
    threshold = 0.5
    heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    return heuristics
```
