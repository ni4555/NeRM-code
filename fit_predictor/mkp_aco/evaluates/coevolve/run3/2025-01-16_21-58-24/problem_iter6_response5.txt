```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Normalize the weights for each dimension to ensure they contribute equally
    weight_normalized = weight / weight.sum(axis=1).reshape(-1, 1)
    
    # Calculate a penalty based on the sum of each dimension's weights
    penalty = np.sum(weight_normalized, axis=1)
    
    # Incorporate a diversity factor that discourages items with high similarity
    similarity_matrix = np.corrcoef(value_to_weight_ratio)
    diversity_factor = 1 / (1 + np.sum(similarity_matrix, axis=1))
    
    # Combine factors to create a composite heuristic
    combined_heuristic = (value_to_weight_ratio * (1 - penalty + diversity_factor))
    
    # Apply a soft threshold to encourage items with high heuristic values
    threshold = np.percentile(combined_heuristic, 90)
    heuristics = np.where(combined_heuristic > threshold, combined_heuristic, 0)
    
    return heuristics
```
