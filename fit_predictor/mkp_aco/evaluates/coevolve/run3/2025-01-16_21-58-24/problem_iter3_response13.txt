```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate variance of the ratio
    variance = np.var(value_to_weight_ratio)
    
    # Calculate a percentile-based threshold
    percentile_threshold = np.percentile(value_to_weight_ratio, 95)
    
    # Create a sparsity factor based on variance and threshold
    sparsity_factor = (value_to_weight_ratio > percentile_threshold) / variance
    
    # Combine the normalized ratio with the sparsity factor
    combined_heuristics = value_to_weight_ratio * sparsity_factor
    
    # Apply a fine-tuned threshold to the heuristics
    threshold = 0.6
    heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    return heuristics
```
