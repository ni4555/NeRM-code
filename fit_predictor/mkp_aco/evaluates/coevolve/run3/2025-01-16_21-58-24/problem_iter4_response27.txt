```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a sparsity factor based on the ratio
    sparsity_factor = 1 - (value_to_weight_ratio / np.max(value_to_weight_ratio))
    
    # Adjust heuristic by adding a term based on the sum of the weights in each dimension
    heuristic_adjustment = np.sum(weight, axis=1)
    
    # Combine the normalized ratio with the sparsity factor and the adjustment
    combined_heuristics = value_to_weight_ratio * sparsity_factor + heuristic_adjustment
    
    # Set the heuristics based on the sum of combined heuristics and a threshold
    threshold = 0.5
    heuristics = np.where(combined_heuristics / combined_heuristics.sum() > threshold, 1, 0)
    
    return heuristics
```
