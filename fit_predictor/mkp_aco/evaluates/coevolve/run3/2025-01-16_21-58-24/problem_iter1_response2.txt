```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate additional factors for each item
    # Factor 1: The sum of the weights (to avoid overly heavy items)
    weight_factor = weight.sum(axis=1)
    
    # Factor 2: The number of non-zero weights (to avoid items with too many dimensions)
    dimension_factor = (weight != 0).sum(axis=1)
    
    # Combine factors to create a heuristic
    heuristic = (1 / value_to_weight_ratio) * (1 / weight_factor) * (1 / (dimension_factor + 1))
    
    # Sparsify the heuristic by setting items with a low ratio and high weight or many dimensions to zero
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < sparsity_threshold] = 0
    
    return heuristic
```
