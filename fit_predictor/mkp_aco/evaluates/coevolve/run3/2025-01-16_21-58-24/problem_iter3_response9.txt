```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate percentile-based thresholds
    percentile_thresholds = np.percentile(value_to_weight_ratio, [25, 75])
    
    # Penalize outliers by limiting the value-to-weight ratio within the 25th and 75th percentile
    penalized_ratio = np.where(value_to_weight_ratio < percentile_thresholds[0], 0,
                               np.where(value_to_weight_ratio > percentile_thresholds[1], 0,
                                        value_to_weight_ratio))
    
    # Normalize the penalized ratio
    min_p_ratio = np.min(penalized_ratio)
    if min_p_ratio <= 0:
        penalized_ratio = -penalized_ratio + 1
    
    # Sparsify based on variance
    variance_factor = np.sqrt(np.var(value_to_weight_ratio))
    
    # Combine the normalized ratio with the variance factor
    combined_heuristics = penalized_ratio * variance_factor
    
    # Normalize combined heuristics with percentile-based threshold
    combined_heuristics = (combined_heuristics - np.min(combined_heuristics)) / (np.max(combined_heuristics) - np.min(combined_heuristics))
    
    # Apply a threshold to the heuristics
    threshold = 0.7
    heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    return heuristics
```
