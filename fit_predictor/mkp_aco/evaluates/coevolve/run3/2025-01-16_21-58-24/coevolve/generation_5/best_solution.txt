Fitness: 18.259532766847826

Description:
Design a hybrid optimization heuristic for the Multi-dimensional Knapsack Problem (MKP) that employs a probabilistic sampling mechanism to explore diverse solution landscapes. The heuristic should integrate a precise fitness function that evaluates candidate solutions based on a weighted combination of item values and adherence to multi-dimensional constraints. The algorithm must balance exploration with exploitation by incorporating adaptive evolutionary computation to refine promising candidate solutions and a robust local search algorithm to fine-tune the final solution. The heuristic should enforce strict adherence to the MKP's weight and volume constraints, and it should provide detailed performance metrics to quantify the efficiency and effectiveness of the optimization process.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = len(prize)
    m = len(weight[0])
    # Initialize the heuristic scores for each item
    heuristic_scores = np.zeros(n)
    
    # Calculate the weighted sum for each item
    for i in range(n):
        weighted_sum = np.sum(prize[i] * weight[i])
    
    # Calculate the adherence to constraints (all dimensions are 1)
    adherence = np.sum(weight, axis=1) <= m
    
    # Combine the weighted sum and adherence into heuristic scores
    heuristic_scores = weighted_sum * adherence
    
    return heuristic_scores