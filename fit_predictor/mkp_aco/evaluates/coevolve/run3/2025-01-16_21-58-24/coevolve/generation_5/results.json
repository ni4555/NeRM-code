{
  "generation": 5,
  "description": "Design a hybrid optimization heuristic for the Multi-dimensional Knapsack Problem (MKP) that employs a probabilistic sampling mechanism to explore diverse solution landscapes. The heuristic should integrate a precise fitness function that evaluates candidate solutions based on a weighted combination of item values and adherence to multi-dimensional constraints. The algorithm must balance exploration with exploitation by incorporating adaptive evolutionary computation to refine promising candidate solutions and a robust local search algorithm to fine-tune the final solution. The heuristic should enforce strict adherence to the MKP's weight and volume constraints, and it should provide detailed performance metrics to quantify the efficiency and effectiveness of the optimization process.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = len(prize)\n    m = len(weight[0])\n    # Initialize the heuristic scores for each item\n    heuristic_scores = np.zeros(n)\n    \n    # Calculate the weighted sum for each item\n    for i in range(n):\n        weighted_sum = np.sum(prize[i] * weight[i])\n    \n    # Calculate the adherence to constraints (all dimensions are 1)\n    adherence = np.sum(weight, axis=1) <= m\n    \n    # Combine the weighted sum and adherence into heuristic scores\n    heuristic_scores = weighted_sum * adherence\n    \n    return heuristic_scores",
      "fitness": 18.259532766847826,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_8.txt",
      "code_file": "coevolve/generation_5/code_8.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the fitness for each item based on the weighted combination of values\n    # and adherence to the multi-dimensional constraints\n    n, m = prize.shape[0], weight.shape[1]\n    fitness = np.zeros(n)\n    for i in range(n):\n        # Calculate the weighted value of the item\n        weighted_value = np.sum(prize[i] * weight[i])\n        # Calculate the adherence to constraints (assuming constraint is 1 for each dimension)\n        adherence = np.sum(weight[i] == 1)\n        # Fitness is a combination of weighted value and adherence\n        fitness[i] = weighted_value + adherence\n    \n    # Normalize the fitness scores to make them more comparable\n    max_fitness = np.max(fitness)\n    min_fitness = np.min(fitness)\n    if max_fitness - min_fitness > 0:\n        fitness = (fitness - min_fitness) / (max_fitness - min_fitness)\n    else:\n        fitness = np.ones(n)\n    \n    return fitness",
      "fitness": 19.866027129164927,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_3.txt",
      "code_file": "coevolve/generation_5/code_3.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = prize.shape[0]\n    m = weight.shape[1]\n    heuristics = np.zeros(n)\n    \n    # Probabilistic sampling to explore diverse solution landscapes\n    for i in range(n):\n        # Calculate the weighted value of each item\n        weighted_value = np.sum(prize[i] * weight[i])\n        # Calculate the adherence to constraints (all constraints are 1 in this case)\n        adherence = np.sum(weight[i])\n        # Fitness function based on weighted value and adherence\n        fitness = weighted_value / (adherence + 1e-6)  # Adding a small constant to avoid division by zero\n        heuristics[i] = fitness\n    \n    return heuristics",
      "fitness": 21.419524127029447,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_5.txt",
      "code_file": "coevolve/generation_5/code_5.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    # Initialize the heuristic array with zeros\n    heuristics = np.zeros(n)\n    \n    # Calculate the total weight for each item\n    total_weight = np.sum(weight, axis=1)\n    \n    # Calculate the heuristic value for each item\n    for i in range(n):\n        # Calculate the weighted sum of the prize for each dimension\n        weighted_prize = np.sum(prize[i] * weight[i])\n        # Normalize the weighted prize by the total weight to account for the constraint\n        normalized_prize = weighted_prize / total_weight[i]\n        # Calculate the heuristic value as the normalized prize\n        heuristics[i] = normalized_prize\n    \n    return heuristics",
      "fitness": 21.45490123359146,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_6.txt",
      "code_file": "coevolve/generation_5/code_6.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize the heuristic array with zeros\n    n = prize.shape[0]\n    heuristics = np.zeros(n)\n    \n    # Calculate the fitness for each item\n    for i in range(n):\n        # Calculate the total value of the item\n        total_value = np.sum(prize[i])\n        # Calculate the total weight of the item across all dimensions\n        total_weight = np.sum(weight[i])\n        # Normalize the total value by the total weight to get the density\n        density = total_value / total_weight\n        # The heuristic is the density of the item\n        heuristics[i] = density\n    \n    # Normalize the heuristic scores to sum to 1\n    heuristics /= np.sum(heuristics)\n    \n    return heuristics",
      "fitness": 21.976852388307908,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_10.txt",
      "code_file": "coevolve/generation_5/code_10.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the normalized value for each item\n    normalized_value = prize / (np.sum(weight, axis=1) + 1e-6)\n    \n    # Calculate the heuristic based on weighted normalized value\n    # Adding a small constant to avoid division by zero\n    heuristic = normalized_value / np.sum(normalized_value) * len(prize)\n    \n    return heuristic",
      "fitness": 22.18289554379428,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_4.txt",
      "code_file": "coevolve/generation_5/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the fitness score for each item based on the prize and weight\n    fitness_scores = prize / np.sum(weight, axis=1)\n    \n    # Calculate the penalty for each item based on the adherence to constraints\n    penalty_scores = np.sum(weight, axis=1)  # Assuming the constraint is to not exceed 1 for each dimension\n    \n    # Combine fitness and penalty scores into a heuristic score\n    heuristic_scores = fitness_scores - penalty_scores\n    \n    return heuristic_scores",
      "fitness": 22.24442282734962,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_0.txt",
      "code_file": "coevolve/generation_5/code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the fitness for each item based on the weighted combination of item values\n    # and adherence to the multi-dimensional constraints\n    # In this case, since each dimension has a constraint of 1, we use the max of the weights in each dimension\n    # as the constraint adherence measure\n    max_weight = np.max(weight, axis=1)\n    # Calculate the normalized fitness by dividing the prize by the maximum weight in each dimension\n    normalized_fitness = prize / max_weight\n    # Return the normalized fitness as the heuristic value for each item\n    return normalized_fitness",
      "fitness": 22.437205979196417,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_1.txt",
      "code_file": "coevolve/generation_5/code_1.py"
    }
  ]
}