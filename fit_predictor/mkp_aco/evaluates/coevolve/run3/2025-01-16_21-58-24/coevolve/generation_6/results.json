{
  "generation": 6,
  "description": "Develop a hybrid optimization framework that synergistically integrates stochastic sampling techniques, adaptive evolutionary algorithms, and resilient local search methodologies to tackle the Multi-dimensional Knapsack Problem (MKP). This framework should prioritize maximizing cumulative profit through the selection of item subsets, while respecting the intricate multi-dimensional weight and volume constraints of the knapsacks. The algorithm should effectively harness probabilistic sampling for broad exploration of solution spaces, employ adaptive evolutionary strategies to delve into favorable solution territories, and integrate robust local search procedures for fine-tuning promising candidates. The heuristic must establish a robust fitness evaluation metric that assesses candidate solutions based on their compliance with MKP constraints and overall profit. Furthermore, the algorithm should incorporate definitive performance indicators such as fitness value, convergence thresholds, and computational efficiency to ensure the identification of optimal or near-optimal solutions, striking a balance between exploration and exploitation, and effectively managing interdependencies among multiple knapsacks and their constraints.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the minimum weight for each item across all dimensions\n    min_weight_per_item = np.min(weight, axis=1)\n    \n    # Calculate the heuristic value for each item as the ratio of prize to minimum weight\n    # This heuristic assumes that items with a higher prize-to-weight ratio are more promising\n    heuristics = prize / min_weight_per_item\n    \n    # Return the heuristics array\n    return heuristics",
      "fitness": 18.963840215398584,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_5.txt",
      "code_file": "coevolve/generation_6/code_5.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming that all weights are normalized to 1 for the given constraint\n    # The heuristic could be based on the ratio of prize to weight for each item\n    # This is a simple heuristic based on the greedy approach\n    heuristic = prize / weight.sum(axis=1)\n    return heuristic",
      "fitness": 22.007586715338125,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_2.txt",
      "code_file": "coevolve/generation_6/code_2.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the heuristic as the prize divided by the weight\n    # Since the weight is a 2D array and the constraint for each dimension is 1,\n    # we need to sum the weights along the dimension to get the total weight for each item.\n    total_weight = np.sum(weight, axis=1)\n    # Avoid division by zero for items with zero weight\n    total_weight[total_weight == 0] = 1\n    # Calculate the heuristic value for each item\n    heuristics = prize / total_weight\n    return heuristics",
      "fitness": 22.138937882397546,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_8.txt",
      "code_file": "coevolve/generation_6/code_8.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the total weight for each item by summing across all dimensions\n    total_weight = np.sum(weight, axis=1)\n    \n    # Avoid division by zero by adding a small epsilon to the total weight\n    epsilon = 1e-10\n    total_weight = np.maximum(total_weight, epsilon)\n    \n    # Compute the heuristic as the prize divided by the total weight\n    # Normalize the heuristic to the range [0, 1]\n    heuristics = prize / total_weight\n    \n    return heuristics",
      "fitness": 22.15407566741224,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_4.txt",
      "code_file": "coevolve/generation_6/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = weight.shape\n    heuristic_values = np.zeros(n)\n    \n    # Calculate the normalized profit and weight for each item\n    normalized_profit = prize / weight.sum(axis=1)\n    normalized_weight = weight.sum(axis=1) / weight.sum()\n    \n    # Incorporate a stochastic element to the heuristic by adding noise\n    noise = np.random.normal(0, 0.1, size=n)\n    \n    # Combine normalized profit and weight to get the heuristic value\n    # The heuristic can be adjusted by giving more weight to profit or weight constraints\n    heuristic_values = normalized_profit * 0.8 + normalized_weight * 0.2 + noise\n    \n    # Normalize the heuristic values to ensure they sum to 1 for each item\n    heuristic_values /= heuristic_values.sum()\n    \n    return heuristic_values",
      "fitness": 22.19454007564376,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_0.txt",
      "code_file": "coevolve/generation_6/code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the heuristic value for each item\n    # Since the constraint of each dimension is fixed to 1, we can calculate the total weight of each item\n    total_weight = np.sum(weight, axis=1)\n    \n    # Calculate the heuristic as the profit divided by the total weight for each item\n    # We add a small epsilon to avoid division by zero\n    epsilon = 1e-6\n    heuristic_values = prize / (total_weight + epsilon)\n    \n    # Return the computed heuristic values\n    return heuristic_values",
      "fitness": 22.20729797088631,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_7.txt",
      "code_file": "coevolve/generation_6/code_7.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # This is a simplified version of a heuristic function.\n    # Since each dimension constraint is fixed to 1, the heuristic could be a normalized value of the profit\n    # divided by the total weight of the item across all dimensions.\n    \n    # Calculate normalized profit per unit weight for each item\n    normalized_profit = prize / np.sum(weight, axis=1)\n    \n    # Return the heuristic values, which can be considered as a measure of how promising an item is\n    # since items with higher normalized profit are more promising to be included in the solution.\n    return normalized_profit",
      "fitness": 22.213625549960778,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_11.txt",
      "code_file": "coevolve/generation_6/code_11.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize the heuristics array with zeros\n    n = prize.shape[0]\n    heuristics = np.zeros(n)\n    \n    # Calculate the \"promise\" score for each item\n    # This is a simplistic heuristic: the promise is the ratio of prize to weight\n    # Note: This is not a full-fledged heuristic, but a placeholder to match the function signature.\n    for i in range(n):\n        # Avoid division by zero for items with zero weight\n        weight_sum = np.sum(weight[i])\n        if weight_sum > 0:\n            heuristics[i] = prize[i] / weight_sum\n    \n    # Normalize the heuristic scores to ensure they are all positive\n    heuristics = np.abs(heuristics)\n    \n    return heuristics",
      "fitness": 22.223384678262924,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_10.txt",
      "code_file": "coevolve/generation_6/code_10.py"
    }
  ]
}