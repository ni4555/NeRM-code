Fitness: 18.963840215398584

Description:
Develop a hybrid optimization framework that synergistically integrates stochastic sampling techniques, adaptive evolutionary algorithms, and resilient local search methodologies to tackle the Multi-dimensional Knapsack Problem (MKP). This framework should prioritize maximizing cumulative profit through the selection of item subsets, while respecting the intricate multi-dimensional weight and volume constraints of the knapsacks. The algorithm should effectively harness probabilistic sampling for broad exploration of solution spaces, employ adaptive evolutionary strategies to delve into favorable solution territories, and integrate robust local search procedures for fine-tuning promising candidates. The heuristic must establish a robust fitness evaluation metric that assesses candidate solutions based on their compliance with MKP constraints and overall profit. Furthermore, the algorithm should incorporate definitive performance indicators such as fitness value, convergence thresholds, and computational efficiency to ensure the identification of optimal or near-optimal solutions, striking a balance between exploration and exploitation, and effectively managing interdependencies among multiple knapsacks and their constraints.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the minimum weight for each item across all dimensions
    min_weight_per_item = np.min(weight, axis=1)
    
    # Calculate the heuristic value for each item as the ratio of prize to minimum weight
    # This heuristic assumes that items with a higher prize-to-weight ratio are more promising
    heuristics = prize / min_weight_per_item
    
    # Return the heuristics array
    return heuristics