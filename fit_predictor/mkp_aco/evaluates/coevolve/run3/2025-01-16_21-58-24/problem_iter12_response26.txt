```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a penalty factor for outliers based on the interquartile range
    q1 = np.percentile(value_to_weight_ratio, 25)
    q3 = np.percentile(value_to_weight_ratio, 75)
    iqr = q3 - q1
    penalty_factor = np.where((value_to_weight_ratio < q1 - 1.5 * iqr) | (value_to_weight_ratio > q3 + 1.5 * iqr),
                              (value_to_weight_ratio - q1) / (q3 - q1),
                              0)
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine the normalized ratio with the penalty and density factors
    combined_heuristics = value_to_weight_ratio * (1 - penalty_factor + density_factor)
    
    # Introduce a balance factor to balance exploration and exploitation
    balance_factor = np.random.uniform(0.6, 0.8)
    combined_heuristics *= balance_factor
    
    # Sparsify heuristics using a threshold
    threshold = np.percentile(combined_heuristics, 90)
    sparsified_heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    # Introduce randomness to maintain diversity
    np.random.seed(1)  # Ensure reproducibility
    random_noise = np.random.normal(0, 0.05, size=sparsified_heuristics.shape)
    final_heuristics = sparsified_heuristics + random_noise
    
    # Incorporate constraint impact
    constraint_impact = 1 / (1 + weight.sum(axis=1))
    final_heuristics *= constraint_impact
    
    # Ensure non-negative heuristics
    final_heuristics = np.maximum(final_heuristics, 0)
    
    # Adjust heuristics based on the total number of items
    total_items = prize.size
    heuristic_adjustment = 1 / (1 + total_items * np.mean(final_heuristics))
    final_heuristics *= heuristic_adjustment
    
    return final_heuristics
```
