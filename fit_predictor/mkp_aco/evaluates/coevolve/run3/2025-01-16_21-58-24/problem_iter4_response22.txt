```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate variance-based sparsity factor
    variance = np.var(value_to_weight_ratio)
    sparsity_factor = 1 - (variance / np.max(variance))
    
    # Calculate percentile-based density factor
    percentile_threshold = np.percentile(value_to_weight_ratio, 90)
    density_factor = np.where(value_to_weight_ratio >= percentile_threshold, value_to_weight_ratio, 0)
    
    # Combine the normalized ratio with the sparsity and density factors
    combined_heuristics = value_to_weight_ratio * (sparsity_factor + density_factor)
    
    # Normalize the heuristics to a range between 0 and 1
    max_combined = np.max(combined_heuristics)
    min_combined = np.min(combined_heuristics)
    heuristics = (combined_heuristics - min_combined) / (max_combined - min_combined)
    
    # Apply a threshold to the heuristics
    threshold = 0.5
    heuristics = np.where(heuristics > threshold, heuristics, 0)
    
    return heuristics
```
