```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a penalty for outliers based on the 75th percentile of the ratio
    penalty_factor = np.abs(value_to_weight_ratio - np.percentile(value_to_weight_ratio, 75))
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine the normalized ratio with the penalty and density factors
    combined_heuristics = value_to_weight_ratio * (1 - penalty_factor + density_factor)
    
    # Apply a threshold based on the 75th percentile of the heuristics
    threshold = np.percentile(combined_heuristics, 75)
    heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    # Introduce controlled diversity by randomly flipping a certain percentage of the heuristics
    diversity_rate = 0.05
    diversity_mutation = np.random.binomial(1, diversity_rate, size=heuristics.shape)
    heuristics[diversity_mutation] = 1 - heuristics[diversity_mutation]
    
    # Normalize the heuristics to ensure they are between 0 and 1
    max_heuristic = np.max(heuristics)
    final_heuristics = heuristics / max_heuristic
    
    return final_heuristics
```
