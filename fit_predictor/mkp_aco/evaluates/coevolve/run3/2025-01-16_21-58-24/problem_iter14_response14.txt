```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Introduce randomness to maintain diversity
    random_noise = np.random.normal(0, 0.1, size=density_factor.shape)
    
    # Apply a threshold to the heuristics and sparsify
    threshold = 0.5
    combined_heuristics = density_factor + random_noise
    sparsified_heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    # Incorporate constraint impact
    constraint_impact = 1 / (1 + weight.sum(axis=1))
    final_heuristics = sparsified_heuristics * constraint_impact
    
    # Ensure non-negative heuristics
    final_heuristics = np.maximum(final_heuristics, 0)
    
    return final_heuristics
```
