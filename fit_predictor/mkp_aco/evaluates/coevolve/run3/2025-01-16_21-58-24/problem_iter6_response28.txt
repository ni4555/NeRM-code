```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Combine value-to-weight ratio with the number of dimensions
    # and use logarithmic scale to avoid zero values
    dimension_log = np.log(1 + len(weight))
    heuristic = value_to_weight_ratio * dimension_log
    
    # Normalize the heuristic to a range of [0, 1]
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    normalized_heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Apply sparsification based on global threshold
    heuristic_threshold = np.percentile(normalized_heuristic, 25)
    sparsified_heuristics = np.where(normalized_heuristic > heuristic_threshold, normalized_heuristic, 0)
    
    return sparsified_heuristics
```
