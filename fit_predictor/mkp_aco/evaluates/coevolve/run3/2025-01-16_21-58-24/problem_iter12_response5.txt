```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate density factor based on the value-to-weight ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Introduce randomness to maintain heuristic diversity
    random_noise = np.random.normal(0, 0.01, size=value_to_weight_ratio.shape)
    
    # Calculate the heuristic by combining the normalized ratio with density factors and randomness
    combined_heuristics = value_to_weight_ratio * (1 + density_factor) + random_noise
    
    # Apply constraints by considering only items that satisfy the weight and volume constraints
    # Assuming constraints are fixed to 1 for each dimension, check if the sum of weights is within the limit
    constraint_violation = weight.sum(axis=1) > 1
    combined_heuristics[constraint_violation] = 0
    
    # Normalize the heuristic to a range between 0 and 1
    min_heuristic = np.min(combined_heuristics)
    max_heuristic = np.max(combined_heuristics)
    heuristic = (combined_heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Sparsify the heuristics by setting lower elements to zero
    sparsity_threshold = 0.5
    heuristic[heuristic < sparsity_threshold] = 0
    
    return heuristic
```
