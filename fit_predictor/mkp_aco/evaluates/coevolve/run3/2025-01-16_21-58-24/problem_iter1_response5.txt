```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Combine factors such as value-to-weight ratio, average prize, and sparsity
    avg_prize = prize.sum() / n
    sparsity_factor = np.sum(1 - np.eye(m)) / (n * (n - 1))
    
    # Sparsify the heuristic by setting a threshold
    threshold = 0.5  # Threshold can be adjusted based on the problem scale
    heuristics = (value_to_weight_ratio / (avg_prize + sparsity_factor) + 1)
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
