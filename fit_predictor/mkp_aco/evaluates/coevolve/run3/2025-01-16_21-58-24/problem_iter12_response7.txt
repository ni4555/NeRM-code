```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Normalize the ratio to a range between 0 and 1
    normalized_ratio = value_to_weight_ratio / np.max(value_to_weight_ratio)
    
    # Introduce randomness to maintain heuristic diversity
    random_noise = np.random.normal(0, 0.1, size=normalized_ratio.shape)
    initial_heuristics = normalized_ratio + random_noise
    
    # Sparsify the heuristics by setting a portion of the less promising items to zero
    sparsity_rate = 0.1
    sparsity_mask = np.random.rand(*initial_heuristics.shape) < sparsity_rate
    final_heuristics = np.where(sparsity_mask, 0, initial_heuristics)
    
    return final_heuristics
```
