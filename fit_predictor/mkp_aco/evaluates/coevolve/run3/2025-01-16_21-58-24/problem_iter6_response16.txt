```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a penalty factor for outliers based on the percentile of the ratio
    penalty_factor = np.abs(value_to_weight_ratio - np.percentile(value_to_weight_ratio, 75))
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine the normalized ratio with the penalty and density factors
    combined_heuristics = value_to_weight_ratio * (1 - penalty_factor + density_factor)
    
    # Introduce randomness to encourage exploration
    random_factor = np.random.rand(len(value_to_weight_ratio))
    
    # Mutate the heuristics by adding randomness, balancing exploration and exploitation
    mutation_factor = 0.1  # Mutation factor to control the impact of randomness
    mutated_heuristics = combined_heuristics * (1 + mutation_factor * random_factor)
    
    # Balance factors by applying a weight to the density and penalty factors
    balance_factor = 0.2  # Factor to control the influence of the density and penalty factors
    heuristics = (1 - balance_factor) * mutated_heuristics + balance_factor * combined_heuristics
    
    # Apply a threshold to the heuristics
    threshold = 0.5
    heuristics = np.where(heuristics > threshold, heuristics, 0)
    
    return heuristics
```
