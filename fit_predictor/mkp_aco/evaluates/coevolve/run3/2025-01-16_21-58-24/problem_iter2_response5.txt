```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Incorporate problem dimensions and sparsify the heuristics
    heuristic_factor = value_to_weight_ratio * (1 + np.log(1 + len(weight)))
    
    # Apply a sparsity factor to enhance distinctiveness
    sparsity_factor = np.exp(-heuristic_factor)
    
    # Normalize the heuristic factor and apply a threshold
    heuristic_threshold = np.mean(heuristic_factor)
    heuristics = heuristic_factor * sparsity_factor / (1 + heuristic_threshold)
    heuristics[heuristics < heuristic_threshold] = 0
    
    return heuristics
```
