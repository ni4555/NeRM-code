```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a penalty factor for outliers based on the percentile of the ratio
    penalty_factor = np.abs(value_to_weight_ratio - np.percentile(value_to_weight_ratio, 75))
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine the normalized ratio with the penalty and density factors
    combined_heuristics = value_to_weight_ratio * (1 - penalty_factor + density_factor)
    
    # Introduce randomness to maintain heuristic diversity
    random_noise = np.random.normal(0, 0.1, size=combined_heuristics.shape)
    
    # Mutate the heuristics to balance exploration and exploitation
    mutation_rate = 0.1  # Mutation rate can be adjusted
    mutated_heuristics = combined_heuristics * (1 - mutation_rate) + random_noise * mutation_rate
    
    # Sparsify the heuristics by setting unpromising elements to zero
    threshold = 0.5
    sparsified_heuristics = np.where(mutated_heuristics > threshold, mutated_heuristics, 0)
    
    return sparsified_heuristics
```
