```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Incorporate logarithmic reduction and penalty for high weights
    penalty = weight.sum(axis=1)
    logarithmic_reduction = np.log(1 / value_to_weight_ratio)
    heuristics = (1 / value_to_weight_ratio) * logarithmic_reduction + 1 / penalty
    
    # Apply selective sparsity based on a threshold
    sparsity_threshold = np.percentile(heuristics, 20)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
