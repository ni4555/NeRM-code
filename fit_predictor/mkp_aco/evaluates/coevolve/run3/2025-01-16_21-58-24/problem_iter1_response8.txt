```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Sparsify the heuristics by combining factors such as the normalized ratio,
    # its logarithm (to reduce the influence of extremely high ratios), and a
    # penalty for high weights.
    penalty = weight.sum(axis=1)
    heuristics = (1 / value_to_weight_ratio) * np.log(1 / value_to_weight_ratio) + 1 / penalty
    
    # Set elements with low heuristics to zero to sparsify the array
    heuristics[heuristics < np.mean(heuristics)] = 0
    
    return heuristics
```
