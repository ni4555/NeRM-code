```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Use logarithmic scale to avoid zero values and emphasize larger ratios
    dimension_log = np.log(1 + len(weight))
    heuristic = value_to_weight_ratio * dimension_log
    
    # Apply global threshold based on 25th percentile of heuristic values
    heuristic_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < heuristic_threshold] = 0
    
    # Apply sparsity by setting a threshold for non-zero heuristics
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic > sparsity_threshold] = 1
    heuristic[heuristic <= sparsity_threshold] = 0
    
    # Ensure non-negative heuristics
    heuristic = np.maximum(heuristic, 0)
    
    return heuristic
```
