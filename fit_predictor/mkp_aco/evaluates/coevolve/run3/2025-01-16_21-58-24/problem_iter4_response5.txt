```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Factor 1: Value-to-weight ratio
    ratio_factor = value_to_weight_ratio
    
    # Factor 2: Total weight to encourage light items
    weight_factor = weight.sum(axis=1)
    
    # Factor 3: Average weight in each dimension to balance the weight across dimensions
    avg_weight_factor = np.mean(weight, axis=1)
    
    # Factor 4: Sparsity factor based on the number of non-zero weights
    sparsity_factor = 1 / ((weight != 0).sum(axis=1) + 1)
    
    # Factor 5: Variance factor to avoid outliers in weight distribution
    variance_factor = 1 - (np.var(weight, axis=1) / np.max(np.var(weight, axis=1)))
    
    # Combine factors to create a heuristic
    heuristic = ratio_factor * (1 / weight_factor) * (1 / (avg_weight_factor + 1)) * sparsity_factor * variance_factor
    
    # Sparsify the heuristic by setting items with a low ratio, high weight, or unbalanced weight to zero
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < sparsity_threshold] = 0
    
    # Normalize the heuristic to ensure all values are non-negative
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic = heuristic / max_heuristic
    
    return heuristic
```
