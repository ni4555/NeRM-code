```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a sparsity factor based on the normalized ratio
    sparsity_factor = 1 - (value_to_weight_ratio / np.max(value_to_weight_ratio))
    
    # Scale the sparsity factor to control the influence of the value-to-weight ratio
    sparsity_factor = sparsity_factor * 0.5 + 0.5
    
    # Combine the normalized ratio with the sparsity factor
    combined_heuristics = value_to_weight_ratio * sparsity_factor
    
    # Set unpromising elements to zero based on a normalized threshold
    threshold = np.percentile(combined_heuristics, 5)
    heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    return heuristics
```
