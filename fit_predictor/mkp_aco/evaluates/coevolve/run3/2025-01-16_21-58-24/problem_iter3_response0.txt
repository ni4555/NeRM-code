```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a variance-based sparsity factor
    variance = np.var(value_to_weight_ratio)
    sparsity_factor = 1 - (value_to_weight_ratio / (np.max(value_to_weight_ratio) + variance))
    
    # Incorporate domain insights using percentiles
    percentile_threshold = np.percentile(value_to_weight_ratio, 95)
    domain_insight_factor = np.where(value_to_weight_ratio >= percentile_threshold, value_to_weight_ratio, 0)
    
    # Combine the normalized ratio with the sparsity and domain insight factors
    combined_heuristics = value_to_weight_ratio * (sparsity_factor + domain_insight_factor)
    
    # Normalize the combined heuristics to maintain balance
    normalized_combined_heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    # Apply a threshold to the heuristics
    threshold = 0.5
    heuristics = np.where(normalized_combined_heuristics > threshold, 1, 0)
    
    return heuristics
```
