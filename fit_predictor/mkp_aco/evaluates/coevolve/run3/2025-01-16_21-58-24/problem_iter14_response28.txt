```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    value_to_weight_ratio = np.maximum(value_to_weight_ratio - min_ratio, 0) + 1
    
    # Calculate a penalty factor for outliers based on the interquartile range
    q1 = np.percentile(value_to_weight_ratio, 25)
    q3 = np.percentile(value_to_weight_ratio, 75)
    iqr = q3 - q1
    penalty_factor = np.where((value_to_weight_ratio < q1 - 1.5 * iqr) | (value_to_weight_ratio > q3 + 1.5 * iqr),
                              (value_to_weight_ratio - q1) / (q3 - q1),
                              0)
    
    # Factor 1: Value-to-weight ratio with penalty
    value_factor = value_to_weight_ratio * (1 - penalty_factor)
    
    # Factor 2: The sum of the weights (to avoid overly heavy items)
    weight_factor = weight.sum(axis=1)
    
    # Factor 3: The number of non-zero weights (to avoid items with too many dimensions)
    dimension_factor = (weight != 0).sum(axis=1)
    
    # Factor 4: The average weight in each dimension (to balance the weight across dimensions)
    avg_weight_factor = np.mean(weight, axis=1)
    
    # Factor 5: The total value (to prioritize high-value items)
    value_factor /= prize
    
    # Combine factors to create a heuristic
    heuristic = value_factor * (1 / weight_factor) * (1 / (dimension_factor + 1)) * (1 / (avg_weight_factor + 1))
    
    # Introduce randomness for diversity
    random_factor = np.random.rand(*heuristic.shape)
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristic = np.where(heuristic > sparsity_threshold, heuristic, 0)
    
    # Mutate the heuristic to explore new areas
    mutation_rate = 0.1
    mutation = np.random.binomial(1, mutation_rate, heuristic.shape) * (np.random.rand(*heuristic.shape) * 2 - 1)
    heuristic += mutation
    
    # Normalize the heuristic to a range between 0 and 1
    min_heuristic = np.min(heuristic)
    max_heuristic = np.max(heuristic)
    heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    return heuristic
```
