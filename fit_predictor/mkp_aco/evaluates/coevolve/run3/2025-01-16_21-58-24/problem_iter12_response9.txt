```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Calculate a penalty factor for outliers based on the ratio
    penalty_factor = np.abs(value_to_weight_ratio - np.percentile(value_to_weight_ratio, 75))
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Combine the normalized ratio with the penalty and density factors
    combined_heuristics = density_factor * (1 - penalty_factor)
    
    # Introduce randomness for exploration
    random_noise = np.random.normal(0, 0.1, size=combined_heuristics.shape)
    combined_heuristics += random_noise
    
    # Normalize the heuristics to have a range between 0 and 1
    max_combined = np.max(combined_heuristics)
    min_combined = np.min(combined_heuristics)
    normalized_heuristics = (combined_heuristics - min_combined) / (max_combined - min_combined)
    
    # Sparsify the heuristics by setting a threshold
    threshold = 0.75
    heuristics = np.where(normalized_heuristics > threshold, 1, 0)
    
    return heuristics
```
