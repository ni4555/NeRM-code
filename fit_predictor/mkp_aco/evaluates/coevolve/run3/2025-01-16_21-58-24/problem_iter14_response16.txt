```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Introduce randomness to maintain diversity
    random_noise = np.random.normal(0, 0.1, size=value_to_weight_ratio.shape)
    
    # Combine the normalized ratio with random noise
    combined_heuristics = value_to_weight_ratio + random_noise
    
    # Sparsify the heuristics by setting a threshold
    threshold = np.percentile(combined_heuristics, 75)
    sparsified_heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    # Ensure non-negative heuristics
    sparsified_heuristics = np.maximum(sparsified_heuristics, 0)
    
    return sparsified_heuristics
```
