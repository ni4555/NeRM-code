```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Normalize the weight per dimension to control influence by dimension
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)
    
    # Combine value-to-weight ratio with normalized weight and logarithmic scale
    combined = value_to_weight_ratio * normalized_weight
    dimension_log = np.log(1 + len(weight))
    heuristic = combined * dimension_log
    
    # Apply logarithmic sparsification to prevent zero bias
    heuristic[heuristic < 0] = 0  # Ensure non-negative values after logarithm
    
    # Employ a global percentile threshold
    heuristic_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < heuristic_threshold] = 0
    
    return heuristic
```
