```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Incorporate multiple factors into the heuristic
    # Use the sum of weights as a proxy for difficulty to select
    # Use the negative sum of prizes to penalize items with lower value
    # Use the sum of the individual weights in each dimension to encourage diversity
    difficulty = weight.sum(axis=1)
    penalty = -np.sum(prize)
    dimension_weight_sum = np.sum(weight, axis=1)
    combined_heuristic = value_to_weight_ratio * (difficulty + penalty) + dimension_weight_sum
    
    # Normalize the combined heuristic to ensure non-negative values
    min_combined = np.min(combined_heuristic)
    if min_combined <= 0:
        combined_heuristic = -combined_heuristic + 1
    
    # Sparsify the heuristic by setting lower ratios, penalties, and difficulty to zero
    sparsity_threshold = np.percentile(combined_heuristic, 5)
    sparsified_heuristics = np.where(combined_heuristic > sparsity_threshold, combined_heuristic, 0)
    
    return sparsified_heuristics
```
