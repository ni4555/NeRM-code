```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on a combination of factors
    # Use inverse of the weighted prize ratio, weight variance, and sparsity
    sparsity = 1 - np.mean(weight, axis=1)
    combined_sorting = -((prize / weight.sum(axis=1)) * (1 / np.var(weight, axis=1)) * sparsity)
    sorted_indices = np.argsort(combined_sorting)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        # Calculate the weighted ratio for the current item
        weighted_ratio = prize[i] / weight[i, :].sum()
        
        # Calculate the variance ratio for the current item
        variance_ratio = 1 / np.var(weight[i, :])
        
        # Calculate the sparsity ratio for the current item
        sparsity_ratio = sparsity[i]
        
        # Calculate the heuristic for the current item based on the weighted ratio, variance ratio, and sparsity ratio
        heuristics[i] = weighted_ratio * variance_ratio * sparsity_ratio

    # Sparsify the heuristics by setting a threshold below which the value is set to zero
    threshold = np.percentile(heuristics, 10)  # Setting the threshold to the 10th percentile
    heuristics[heuristics < threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
