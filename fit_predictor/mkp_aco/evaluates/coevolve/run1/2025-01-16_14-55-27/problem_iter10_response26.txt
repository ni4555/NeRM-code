```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted prize ratio for each item
    weighted_prize_ratio = prize / (weight.sum(axis=1) + 1e-6)  # Adding a small value to avoid division by zero

    # Calculate the sparsity for each item
    sparsity = 1 - (np.count_nonzero(weight, axis=1) / n)

    # Combine the weighted prize ratio and sparsity to create a heuristic value for each item
    combined_scores = weighted_prize_ratio * sparsity

    # Calculate a dynamic threshold based on the standard deviation of the combined scores
    threshold = np.std(combined_scores)

    # Initialize heuristic values
    heuristics = np.zeros(n)

    # Iterate over sorted items to adjust heuristic values
    for i in range(n):
        current_score = combined_scores[i]

        # Update the heuristic for the current item
        if current_score > threshold:
            heuristics[i] = (current_score - threshold) / (np.max(combined_scores) - threshold)

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
