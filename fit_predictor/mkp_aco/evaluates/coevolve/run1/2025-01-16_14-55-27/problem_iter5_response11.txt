```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize vector to account for different scales
    normalized_prize = prize / prize.max()

    # Calculate the inverse of the weighted ratio to prioritize higher value items
    weighted_ratio = normalized_prize / weight.sum(axis=1)

    # Calculate the sparsity of each item (number of dimensions with weight > 0)
    sparsity = np.sum(weight > 0, axis=1)

    # Calculate the logarithmic sparsity to reduce the impact of high sparsity values
    log_sparsity = np.log1p(sparsity)

    # Combine the weighted ratio and logarithmic sparsity with a penalty for weight
    combined_scores = weighted_ratio - log_sparsity - weight.sum(axis=1)

    # Sort the items based on the combined scores
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the threshold for sparsity
    sparsity_threshold = np.median(log_sparsity)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        # Update the sparsity threshold based on the maximum log sparsity encountered
        sparsity_threshold = max(sparsity_threshold, log_sparsity[i])

        # Calculate the heuristic for the current item
        heuristic_value = combined_scores[i]

        # Update the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the sparsity is below the threshold
        heuristics[sparsity < sparsity_threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
