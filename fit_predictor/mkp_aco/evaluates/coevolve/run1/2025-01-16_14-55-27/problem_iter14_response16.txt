```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted ratio of prize to total weight for each item
    weighted_ratio = prize / weight.sum(axis=1)

    # Calculate sparsity for each item
    sparsity = np.count_nonzero(weight, axis=1)

    # Combine scores based on weighted ratio and sparsity, penalizing total weight
    combined_scores = weighted_ratio / sparsity

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and adjust heuristic values
    for i in range(n):
        # Set the heuristic value based on the item's score
        heuristics[i] = combined_scores[i]

    # Sparsify the heuristics by setting the smallest scores to zero
    sorted_indices = np.argsort(combined_scores)[::-1]
    num_items_to_keep = n // 10  # Keep the top 10% of the items
    heuristics[sorted_indices[num_items_to_keep:]] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= heuristics.sum()

    return heuristics
```
