```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Enhanced sorting criteria based on weighted ratio, average weight per dimension, total prize, and sparsity level
    combined_sorting_criterion = (-prize / weight.sum(axis=1)).ravel() * (1 - weight.mean(axis=1)) * (prize.sum() / n)
    # Add a sparsity level to the criterion to encourage selection of more diverse items
    combined_sorting_criterion = combined_sorting_criterion * (1 - 0.1 * (1 / (1 + np.exp(combined_sorting_criterion / 1000))))
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on total prize
    total_prize = prize.sum()
    heuristics.fill(total_prize / n)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = prize[i] / weight[i, :].sum()
        average_weight = weight[i, :].mean()
        
        # Calculate the contribution of the current item to the heuristic
        contribution = weighted_ratio - average_weight
        
        # Adjust the heuristic for the current item
        heuristics[i] = heuristics[i] + contribution

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Sparsify the heuristics by setting unpromising elements to zero based on a dynamic threshold
    dynamic_threshold = heuristics / (1 + np.exp(-np.arange(n) / 1000))
    heuristics[heuristics < dynamic_threshold] = 0

    return heuristics
```
