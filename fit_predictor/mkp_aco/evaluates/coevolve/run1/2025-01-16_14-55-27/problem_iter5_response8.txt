```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Initialize a matrix to store weighted ratios and sparsity scores
    weighted_ratios = prize / (weight.sum(axis=1) + 1e-6)  # Adding a small value to avoid division by zero
    sparsity_scores = (m - np.count_nonzero(weight, axis=1)) / m

    # Normalize weighted ratios and sparsity scores to create combined scores
    combined_scores = (weighted_ratios + sparsity_scores) / 2

    # Sort items based on the combined scores using a logarithmic sparsity approach
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize heuristic values
    heuristics = np.zeros(n)

    # Initialize a dynamic threshold based on the combined scores
    threshold = np.log(1 + len(combined_scores))

    # Iterate over sorted items to adjust heuristic values
    for i in sorted_indices:
        current_score = combined_scores[i]

        # Update the heuristic for the current item
        heuristics[i] = np.exp(current_score - threshold)

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        threshold = max(threshold, current_score)

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
