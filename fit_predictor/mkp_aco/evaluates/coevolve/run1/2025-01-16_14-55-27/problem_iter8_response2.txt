```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on weighted ratio, average weight, and sparsity
    weighted_ratio = prize / weight.sum(axis=1)
    average_weight = weight.mean(axis=1)
    sparsity = np.count_nonzero(weight > 0, axis=1) / m
    combined_sorting_criterion = weighted_ratio + (1 - average_weight) + sparsity
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        heuristics[i] = prize[i] / (weight[i, :].sum() + sparsity[i])

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
