```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple metrics
    weighted_prize_ratio = prize / weight.sum(axis=1)
    variance = np.var(weight, axis=1)
    normalized_variance = variance / np.mean(variance)
    sparsity = (1 - np.count_nonzero(weight == 0, axis=1)) / m
    sorted_indices = np.argsort(-weighted_prize_ratio * normalized_variance * sparsity)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        # Calculate the heuristic based on the weighted prize ratio, variance, and sparsity
        heuristics[i] = weighted_prize_ratio[i] * normalized_variance[i] * sparsity[i]

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Apply a threshold to the heuristics
    threshold = np.percentile(heuristics, 10)  # Setting the threshold to the 10th percentile
    heuristics[heuristics < threshold] = 0

    return heuristics
```
