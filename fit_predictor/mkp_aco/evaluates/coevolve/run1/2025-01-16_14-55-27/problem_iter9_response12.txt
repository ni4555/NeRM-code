```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Sort items by their weighted ratio (inverse ratio for minimization problem)
    weighted_ratio = prize / (weight * prize)
    sorted_indices = np.argsort(-weighted_ratio)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize a sparsity penalty matrix and total weight vector
    sparsity_penalty = 1 / np.count_nonzero(weight, axis=1)
    total_weight = weight.sum(axis=1)

    # Dynamic adjustment of weights and threshold
    weight_importance = 0.8  # Importance of total weight
    sparsity_importance = 0.2  # Importance of sparsity
    dynamic_threshold = np.inf

    for i in sorted_indices:
        current_heuristic = weight_importance / (total_weight[i] + sparsity_importance * sparsity_penalty[i])

        # Adjust dynamic threshold
        dynamic_threshold = min(dynamic_threshold, current_heuristic)

        # If current item heuristic exceeds threshold, consider it
        if current_heuristic > dynamic_threshold:
            heuristics[i] = current_heuristic

        # Sparsify heuristics: reset items not contributing much to the solution
        heuristics[heuristics < dynamic_threshold * 0.5] = 0

    # Normalize heuristics
    heuristics /= np.sum(heuristics)

    return heuristics
```
