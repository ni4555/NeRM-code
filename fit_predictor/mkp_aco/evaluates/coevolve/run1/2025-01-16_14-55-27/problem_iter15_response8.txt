```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on a weighted utility score that includes the inverse of the weighted prize ratio and sparsity
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity = np.count_nonzero(weight, axis=1)
    utility_scores = -weighted_ratio - sparsity
    sorted_indices = np.argsort(utility_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold using softmax to avoid overflow
    def softmax(x):
        e_x = np.exp(x - np.max(x))
        return e_x / e_x.sum()

    threshold = softmax(utility_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        heuristic_value = softmax(utility_scores[i])
        heuristics[i] = heuristic_value

        # Normalize the heuristic to maintain balance and avoid overflow
        heuristics /= np.sum(heuristics)

    return heuristics
```
