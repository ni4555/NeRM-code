```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to avoid overflow in softmax
    normalized_prize = np.log(prize + 1)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Dynamic item sorting based on weighted prize ratio and sparsity
    combined_scores = normalized_prize / (weight.sum(axis=1) + 1e-6)
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the dynamic threshold
    threshold = np.exp(np.mean(combined_scores))

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        # Calculate the heuristic for the current item
        heuristic_value = np.exp(normalized_prize[i] - np.log(1 / len(prize) + threshold))

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Adjust the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[heuristics < threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
