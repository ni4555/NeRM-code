```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple criteria: weighted ratio, average weight per dimension, and total prize
    total_weight = weight.sum(axis=1)
    weighted_ratio = prize / total_weight
    average_weight = weight.mean(axis=1)
    combined_sorting_criterion = (-weighted_ratio * average_weight * prize.sum() / n).ravel()
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on total prize
    total_prize = prize.sum()
    heuristics.fill(total_prize / n)

    # Adjust heuristic values based on the sorting order
    for i in sorted_indices:
        contribution = weighted_ratio[i] - average_weight[i]
        heuristics[i] += contribution

    # Sparsify the heuristic by setting it to zero if the contribution is below a small threshold
    threshold = np.finfo(float).eps
    heuristics[heuristics < threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
