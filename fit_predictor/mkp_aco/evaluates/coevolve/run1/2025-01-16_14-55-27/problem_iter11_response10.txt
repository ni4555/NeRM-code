```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple criteria: inverse of weighted prize ratio, sparsity, and total weight
    combined_scores = (-prize / weight.sum(axis=1) - np.count_nonzero(weight, axis=1) - weight.sum(axis=1))
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the adaptive threshold
    adaptive_threshold = np.percentile(combined_scores, 75)

    # Initialize the sparsity normalization constant
    sparsity_norm = np.count_nonzero(weight).max()

    # Initialize the total weight normalization constant
    total_weight_norm = weight.sum(axis=1).max()

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = prize[i] / weight[i, :].sum()
        sparsity = np.count_nonzero(weight[i, :])
        total_weight = weight[i, :].sum()

        # Normalize the sparsity and total weight
        normalized_sparsity = sparsity / sparsity_norm
        normalized_total_weight = total_weight / total_weight_norm

        # Calculate the heuristic for the current item
        heuristic_value = weighted_ratio / (normalized_sparsity + normalized_total_weight)

        # Update the adaptive threshold
        adaptive_threshold = max(adaptive_threshold, heuristic_value)

        # Adjust the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the contribution is below the adaptive threshold
        heuristics[heuristics < adaptive_threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
