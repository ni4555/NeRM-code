```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on a combination of weighted prize ratio and sparsity of weight dimensions
    def get_combination_score(item_idx):
        return (prize[item_idx] / weight[item_idx, :].sum()) / np.sum(weight[item_idx, :] > 0)

    sorted_indices = np.argsort(-np.array([get_combination_score(i) for i in range(n)]))

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the accumulated weight for each dimension
    accumulated_weight = np.zeros(m)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        # Calculate the weighted ratio for the current item
        weighted_ratio = prize[i] / weight[i, :].sum()

        # Update the accumulated weight for each dimension
        for j in range(m):
            accumulated_weight[j] += weight[i, j]

        # Sparsify the heuristic by considering only the dimensions with non-zero accumulated weight
        sparsity_score = np.count_nonzero(accumulated_weight > 0) / m

        # Calculate the heuristic for the current item based on the weighted ratio, sparsity, and individual dimension weights
        heuristics[i] = weighted_ratio + sparsity_score * np.log(np.sum(accumulated_weight > 0))

        # Set the accumulated weight back to zero after considering the current item
        accumulated_weight = np.zeros(m)

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Set the unpromising elements to zero
    heuristics[heuristics < np.max(heuristics) * 0.1] = 0

    return heuristics
```
