```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize by the maximum prize available
    normalized_prize = prize / np.max(prize)

    # Integrate stochastic sampling by shuffling items
    shuffled_indices = np.random.permutation(n)
    normalized_prize = normalized_prize[shuffled_indices]

    # Calculate sparsity scores
    sparsity_scores = np.count_nonzero(weight, axis=1) / n

    # Calculate weighted ratio analysis
    weighted_ratio_scores = normalized_prize / weight.sum(axis=1)

    # Combine the scores with logarithmic sparsity
    combined_scores = np.log(sparsity_scores + 1) + weighted_ratio_scores

    # Normalize the combined scores
    normalized_combined_scores = (combined_scores - np.min(combined_scores)) / (np.max(combined_scores) - np.min(combined_scores))

    # Integrate adaptive stochastic sampling
    log_sparsity = np.log1p(sparsity_scores)
    sampling_probabilities = np.exp(log_sparsity - log_sparsity.max())

    # Combine combined scores with sampling probabilities
    heuristic_scores = normalized_combined_scores * sampling_probabilities

    # Normalize the heuristic scores
    heuristics = heuristic_scores / np.sum(heuristic_scores)

    return heuristics
```
