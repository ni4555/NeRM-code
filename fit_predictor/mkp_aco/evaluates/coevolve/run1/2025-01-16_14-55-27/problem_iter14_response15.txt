```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted prize ratio for each item
    weighted_prize_ratio = prize / (weight.sum(axis=1) + 1e-8)  # Adding a small constant to avoid division by zero

    # Calculate the sparsity for each item
    sparsity = 1 - (np.count_nonzero(weight, axis=1) / n)

    # Calculate the total weight for each item
    total_weight = weight.sum(axis=1)

    # Combine multiple criteria into a single score for each item
    combined_scores = (-weighted_prize_ratio - sparsity - total_weight)

    # Dynamic item sorting based on the combined score
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the performance threshold
    performance_threshold = np.mean(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        # Calculate the heuristic for the current item
        heuristic_value = weighted_prize_ratio[i] * sparsity[i] / (total_weight[i] + 1e-8)

        # Update the performance threshold based on the maximum heuristic encountered
        performance_threshold = max(performance_threshold, heuristic_value)

        # Adjust the heuristic for the current item, but cap it at the performance threshold
        heuristics[i] = min(heuristic_value, performance_threshold)

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[heuristics < performance_threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
