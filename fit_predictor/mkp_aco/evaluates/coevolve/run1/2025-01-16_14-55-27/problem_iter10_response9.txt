```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted ratio for each item
    weighted_ratio = prize / (weight.sum(axis=1) + 1e-9)  # Adding epsilon to avoid division by zero

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Sort items based on weighted ratio
    sorted_indices = np.argsort(-weighted_ratio)

    # Calculate the contribution of each item
    contribution = np.zeros(n)
    for i in range(n):
        index = sorted_indices[i]
        if i == 0:
            contribution[index] = weighted_ratio[index]
        else:
            previous_index = sorted_indices[i - 1]
            contribution[index] = weighted_ratio[index] - weighted_ratio[previous_index]

    # Assign heuristic values based on sorted weighted ratios and their contributions
    heuristics[sorted_indices] = contribution[sorted_indices]

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
