```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple criteria
    weighted_ratio = prize / weight.sum(axis=1)
    variance = np.var(weight, axis=1)
    sparsity_score = 1 / np.sqrt(weight.sum(axis=1))  # Sparsity score is inversely proportional to the square root of the sum of weights
    combined_sorting_criterion = weighted_ratio + variance + sparsity_score
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        heuristics[i] = weighted_ratio[i] + variance[i] + sparsity_score[i]

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Sparsify the heuristics by setting a portion of the unpromising elements to zero based on a dynamic threshold
    sparsity_threshold = np.percentile(heuristics, 95)  # Use the 95th percentile as the threshold for sparsity
    heuristics[heuristics < sparsity_threshold] = 0

    # Apply adaptive stochastic sampling
    log_sparsity = np.log1p(1 / heuristics)
    sampling_probabilities = np.exp(log_sparsity - log_sparsity.max())

    # Normalize the sampling probabilities
    sampling_probabilities /= sampling_probabilities.sum()

    # Apply weighted ratio analysis
    heuristics *= sampling_probabilities

    return heuristics
```
