```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on weighted ratio, average weight per dimension, and total prize
    weighted_ratio = prize / weight.sum(axis=1)
    average_weight = weight.mean(axis=1)
    combined_sorting_criterion = weighted_ratio * (1 - average_weight) * (prize.sum() / n)
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Apply adaptive stochastic sampling by considering the top 10% of items
    adaptive_sample_size = int(n * 0.1)
    top_items = sorted_indices[:adaptive_sample_size]

    # Calculate heuristics for the top items
    for item_idx in top_items:
        heuristics[item_idx] = prize[item_idx] / weight[item_idx, :].sum()

    # Sparsify by setting the heuristic values for non-top items to zero
    heuristics[sorted_indices[adaptive_sample_size:]] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= heuristics.sum()

    return heuristics
```
