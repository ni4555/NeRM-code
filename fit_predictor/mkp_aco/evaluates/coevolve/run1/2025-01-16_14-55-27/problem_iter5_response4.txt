```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize to account for dimensionality
    normalized_prize = prize / np.sqrt(n)

    # Calculate weighted ratio and sparsity
    weighted_ratio = normalized_prize / weight.sum(axis=1)
    sparsity = np.count_nonzero(weight, axis=1)

    # Use logarithmic sparsity to avoid extreme values
    log_sparsity = np.log1p(sparsity)

    # Combine criteria using weighted ratio and logarithmic sparsity
    combined_scores = weighted_ratio - log_sparsity

    # Stochastic sampling with adaptive threshold
    random_indices = np.random.choice(n, size=int(n * 0.1), replace=False)
    threshold = np.max(combined_scores[random_indices])

    # Create initial heuristics based on the combined scores
    heuristics = combined_scores.copy()

    # Apply threshold to sparsify the heuristics
    heuristics[combined_scores < threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
