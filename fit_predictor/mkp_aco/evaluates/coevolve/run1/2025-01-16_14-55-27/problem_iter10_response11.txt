```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple criteria: inverse of weighted prize ratio, logarithmic sparsity, and total weight
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity = np.log1p(np.count_nonzero(weight, axis=1))  # log1p to handle zero sparsity
    total_weight = weight.sum(axis=1)
    combined_scores = -weighted_ratio / sparsity / total_weight
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate initial threshold based on median of scores
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        current_item_score = combined_scores[i]

        # Update the threshold if the current item's score is higher
        threshold = max(threshold, current_item_score)

        # If the current item's score is above the threshold, assign a non-zero heuristic
        heuristics[i] = 1.0 if current_item_score >= threshold else 0.0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
