```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple criteria
    # Sort by weighted ratio and sparsity
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity = weight.sum(axis=1) / weight.sum()
    sorted_indices = np.argsort(-weighted_ratio * sparsity)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Track the maximum weight constraint
    max_weight = weight.sum(axis=1).max()

    # Define a sparsity threshold
    sparsity_threshold = 0.5

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        # Calculate the sum of all previous heuristics
        current_sum = np.sum(heuristics[:i+1])

        # Check if the item is within the weight constraint
        if weight[i, :].sum() <= max_weight:
            # Calculate a new heuristic based on weighted ratio and previous sum
            new_heuristic = weighted_ratio[i] + current_sum

            # Check if the new heuristic meets the sparsity threshold
            if new_heuristic < sparsity_threshold:
                heuristics[i] = 0
            else:
                # Normalize the new heuristic value to sum to the sparsity threshold
                heuristics[:i+1] += (sparsity_threshold / new_heuristic) * heuristics[:i+1]
                heuristics[i] = sparsity_threshold

    # Normalize the heuristics so that the maximum value does not exceed the sparsity threshold
    heuristics /= np.sum(heuristics)
    heuristics[heuristics > sparsity_threshold] = sparsity_threshold

    return heuristics
```
