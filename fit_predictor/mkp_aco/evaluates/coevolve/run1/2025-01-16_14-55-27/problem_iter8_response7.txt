```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate weighted ratio, sparsity, and total prize
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity = np.count_nonzero(weight, axis=1)
    total_prize = prize.sum()

    # Define a combined sorting criterion based on weighted ratio, sparsity, and total prize
    combined_sorting_criterion = (weighted_ratio / sparsity) * (total_prize / n)

    # Apply the sorting criterion to get sorted indices
    sorted_indices = np.argsort(-combined_sorting_criterion)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate the cumulative sum of heuristics to use for normalization
    cumulative_sum = np.cumsum(combined_sorting_criterion[sorted_indices]) / total_prize

    # Assign heuristic values based on the sorted order
    heuristics[sorted_indices] = cumulative_sum

    return heuristics
```
