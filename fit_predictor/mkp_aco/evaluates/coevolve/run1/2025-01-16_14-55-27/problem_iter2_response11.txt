```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on a combination of weighted prize ratio and sparsity of weight dimensions
    def get_combined_score(item_idx):
        prize_ratio = prize[item_idx] / weight[item_idx, :].sum()
        sparsity_score = np.count_nonzero(weight[item_idx, :] > 0) / m
        return prize_ratio * sparsity_score

    sorted_indices = np.argsort(-np.array([get_combined_score(i) for i in range(n)]))

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Track the accumulated weight for each dimension
    accumulated_weight = np.zeros(m)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        # Update the accumulated weight for each dimension
        accumulated_weight += weight[i, :]

        # Sparsify the heuristic by considering the non-zero accumulated weight
        sparsity_score = np.count_nonzero(accumulated_weight > 0) / m

        # Calculate the heuristic for the current item based on the prize ratio, sparsity, and accumulated weight
        heuristics[i] = prize[i] / weight[i, :].sum() * sparsity_score

        # Normalize the heuristics at each step
        heuristics /= np.sum(heuristics)

        # If the accumulated weight exceeds the maximum weight, reset the accumulated weight
        if np.any(accumulated_weight > 1):
            accumulated_weight = np.clip(accumulated_weight, 0, 1)
            heuristics *= (1 - np.sum(np.abs(accumulated_weight - 1) / np.abs(accumulated_weight)))

    return heuristics
```
