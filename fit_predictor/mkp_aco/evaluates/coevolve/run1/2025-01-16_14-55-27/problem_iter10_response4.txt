```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate weighted ratio and sparsity
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity = np.count_nonzero(weight, axis=1)

    # Combine sorting criteria: weighted ratio divided by sparsity
    combined_sorting_criterion = weighted_ratio / sparsity

    # Sort items based on combined criteria
    sorted_indices = np.argsort(-combined_sorting_criterion)

    # Initialize heuristic values array
    heuristics = np.zeros(n)

    # Assign heuristic values based on sorted order
    for i in sorted_indices:
        heuristics[i] = combined_sorting_criterion[i]

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
