```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Define a function to calculate the combined score for sorting items
    def get_combined_score(item_idx):
        weighted_ratio = prize[item_idx] / weight[item_idx, :].sum()
        average_weight = weight[item_idx, :].mean()
        total_prize = prize.sum()
        return weighted_ratio * (1 - average_weight) * (prize[item_idx] / total_prize)

    # Sort items based on the combined score
    combined_scores = np.array([get_combined_score(i) for i in range(n)])
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on total prize
    heuristics.fill(prize.sum() / n)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        # Calculate the contribution of the current item to the heuristic
        contribution = get_combined_score(i)

        # Adjust the heuristic for the current item
        heuristics[i] += contribution

    # Sparsify heuristics by focusing on the top x% of items based on the heuristic value
    percentile = 0.8
    threshold = np.percentile(heuristics, (1 - percentile) * 100)
    heuristics[heuristics < threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
