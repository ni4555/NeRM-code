```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on a multi-factor heuristic
    # Combining the inverse of the weighted prize ratio, the sum of the inverse of individual weights,
    # and the sparsity factor which is the sum of the inverses of the individual weights
    sparsity_factor = np.sum(1 / weight, axis=1)
    multi_factor = -prize / weight.sum(axis=1) - sparsity_factor
    sorted_indices = np.argsort(multi_factor)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the weight capacity
    weight_capacity = weight.sum(axis=1).max()

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        if weight[i, :].sum() <= weight_capacity:
            # Calculate the weighted ratio for the current item
            weighted_ratio = prize[i] / weight[i, :].sum()
            
            # Calculate the sum of current and previous heuristics
            current_sum = np.sum(heuristics[:i+1])
            
            # Calculate the heuristic for the current item based on the weighted ratio and previous sum
            heuristics[i] = weighted_ratio + current_sum

            # Update the weight capacity
            weight_capacity -= weight[i, :].sum()
        else:
            # If the item cannot be added without exceeding the capacity, set the heuristic to zero
            heuristics[i] = 0

    # Sparsify the heuristics by setting values below a dynamic threshold to zero
    # The threshold is calculated as the average heuristic value of items that are within the weight constraint
    within_capacity_indices = heuristics > 0
    threshold = np.mean(heuristics[within_capacity_indices]) if np.sum(within_capacity_indices) > 0 else 0
    heuristics[heuristics < threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
