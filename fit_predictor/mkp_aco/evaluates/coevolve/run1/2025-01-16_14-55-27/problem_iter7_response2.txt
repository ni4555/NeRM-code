```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to account for dimensionality
    normalized_prize = prize / np.sqrt(m)

    # Calculate the weighted ratio for each item
    weighted_ratio = normalized_prize / weight.sum(axis=1)

    # Calculate sparsity score for each item
    sparsity_score = np.count_nonzero(weight, axis=1)

    # Combine the weighted ratio and sparsity score into a single heuristic score
    heuristic_scores = weighted_ratio - sparsity_score

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Sample adaptively based on logarithmic sparsity
    sparsity_threshold = np.log(n) / np.log(heuristic_scores)

    # Iterate over the items and adjust heuristic values
    for i in range(n):
        # Calculate the heuristic for the current item
        heuristic_value = heuristic_scores[i]

        # Update the heuristic value if it exceeds the sparsity threshold
        if heuristic_value > sparsity_threshold[i]:
            heuristics[i] = heuristic_value

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
