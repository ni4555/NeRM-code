```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted ratio for each item, considering sparsity and total weight
    weighted_ratio = prize / (weight.sum(axis=1) * (1 + np.count_nonzero(weight, axis=1)))

    # Use softmax to normalize the weighted ratios and avoid overflow
    exp_weighted_ratio = np.exp(weighted_ratio - np.max(weighted_ratio))
    softmax_normalized = exp_weighted_ratio / np.sum(exp_weighted_ratio)

    # Initialize the heuristic values array
    heuristics = softmax_normalized

    # Sparsify the heuristics by setting a dynamic threshold
    dynamic_threshold = np.max(heuristics) / 10

    # Filter out items with heuristic below the dynamic threshold
    heuristics[heuristics < dynamic_threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
