```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted ratio for each item
    weighted_ratio = prize / (weight.sum(axis=1) + 1e-9)

    # Calculate sparsity for each item
    sparsity = np.count_nonzero(weight, axis=1) / m

    # Calculate total weight for each item
    total_weight = weight.sum(axis=1)

    # Dynamic item sorting based on weighted ratio, sparsity, and total weight
    combined_scores = weighted_ratio / (sparsity + total_weight)
    sorted_indices = np.argsort(-combined_scores)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.max(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        current_item_score = combined_scores[i]
        heuristics[i] = current_item_score / threshold

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristics[i])

        # Ensure the heuristic does not fall below a minimum threshold
        heuristics[i] = max(heuristics[i], 0.1)

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
