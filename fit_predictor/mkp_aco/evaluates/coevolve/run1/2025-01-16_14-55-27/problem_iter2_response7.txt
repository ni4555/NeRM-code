```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on a combination of weighted prize ratio, sparsity, and logarithmic accumulated weight
    def get_combination_score(item_idx):
        weighted_ratio = prize[item_idx] / weight[item_idx, :].sum()
        sparsity = np.count_nonzero(weight[item_idx, :] > 0) / m
        accumulated_weight = np.sum(weight[item_idx, :])
        return weighted_ratio + sparsity + np.log(accumulated_weight)

    sorted_indices = np.argsort(-np.array([get_combination_score(i) for i in range(n)]))

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        heuristics[i] = get_combination_score(i)

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Trim unpromising elements to a small fraction of the highest heuristic value
    heuristics[heuristics < np.max(heuristics) * 0.1] = 0

    return heuristics
```
