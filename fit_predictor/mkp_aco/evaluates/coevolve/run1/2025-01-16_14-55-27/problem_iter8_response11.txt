```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight to reduce the scale discrepancies
    prize_normalized = prize / prize.max()
    weight_normalized = weight / weight.max()

    # Dynamically sort items based on normalized weighted prize ratio, sparsity, and total normalized weight
    combined_scores = (-prize_normalized / weight_normalized.sum(axis=1) -
                       np.count_nonzero(weight_normalized, axis=1) -
                       weight_normalized.sum(axis=1))
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = prize_normalized[i] / weight_normalized[i, :].sum()
        sparsity = np.count_nonzero(weight_normalized[i, :])
        total_weight = weight_normalized[i, :].sum()

        # Calculate the heuristic for the current item
        heuristic_value = weighted_ratio / (sparsity + total_weight)

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Adjust the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[heuristics < threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
