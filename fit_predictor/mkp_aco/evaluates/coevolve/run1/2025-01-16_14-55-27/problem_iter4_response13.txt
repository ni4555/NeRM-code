```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Define sorting criteria
    criteria = (
        -prize / weight.sum(axis=1)  # Weighted prize ratio
        -weight.mean(axis=1)  # Average weight per dimension
        * (prize.sum() / n)  # Total prize
        * (1 / np.std(weight, axis=1))  # Inverse of the standard deviation of weight dimensions
    )
    sorted_indices = np.argsort(criteria)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Sparsity factor to encourage inclusion of more items
    sparsity_factor = np.sum(1 / weight, axis=1)

    # Initialize total heuristic sum for normalization
    total_heuristic_sum = 0

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = prize[i] / weight[i, :].sum()
        average_weight = weight[i, :].mean()
        uniformity = 1 / np.std(weight[i, :])  # Uniformity factor

        # Calculate the contribution of the current item to the heuristic
        contribution = weighted_ratio * average_weight * uniformity * sparsity_factor[i]

        # Update the heuristic value for the current item
        heuristics[i] = contribution

        # Update the total heuristic sum
        total_heuristic_sum += contribution

    # Normalize the heuristics to ensure their sum equals 1
    heuristics /= total_heuristic_sum

    # Sparsify the heuristics by setting values below a dynamic threshold to zero
    within_capacity_indices = heuristics > 0
    threshold = np.mean(heuristics[within_capacity_indices]) if np.sum(within_capacity_indices) > 0 else 0
    heuristics[heuristics < threshold] = 0

    return heuristics
```
