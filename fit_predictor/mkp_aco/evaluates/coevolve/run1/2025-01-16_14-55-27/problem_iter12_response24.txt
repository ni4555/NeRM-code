```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple criteria: inverse of weighted prize ratio, sparsity, and total weight
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity = np.count_nonzero(weight, axis=1)
    total_weight = weight.sum(axis=1)
    combined_scores = -(weighted_ratio + sparsity + total_weight)
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the adaptive threshold
    threshold = 0.1

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        current_weight = weight[i, :]
        current_prize = prize[i]
        current_weight_sum = current_weight.sum()
        current_sparsity = np.count_nonzero(current_weight)
        current_score = -1 * (current_prize / current_weight_sum + current_sparsity + current_weight_sum)

        # Update the threshold based on the current score
        threshold = threshold + 0.9 * (current_score / max(combined_scores))

        # Calculate the heuristic for the current item
        heuristic_value = current_score / (current_sparsity + current_weight_sum)

        # Update the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[heuristics < threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
