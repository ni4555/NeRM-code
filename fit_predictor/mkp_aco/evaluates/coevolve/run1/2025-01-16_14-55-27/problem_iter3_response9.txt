```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple criteria: weighted ratio and total prize
    combined_sorting_criterion = (-prize / weight.sum(axis=1)).ravel() * (prize.sum() / n)
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on weighted ratio
    weighted_ratios = prize / weight.sum(axis=1)
    initial_heuristic = weighted_ratios.mean()
    heuristics.fill(initial_heuristic)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        current_weighted_ratio = weighted_ratios[i]
        
        # Adjust the heuristic for the current item based on its weighted ratio
        heuristics[i] = current_weighted_ratio

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Dynamically adjust the threshold based on the distribution of heuristic values
    sorted_heuristics = np.sort(heuristics)[::-1]
    threshold_index = np.argmin(sorted_heuristics[sorted_heuristics < sorted_heuristics[0] * 0.1])
    threshold = sorted_heuristics[threshold_index]

    # Set the unpromising elements to zero based on the dynamic threshold
    heuristics[heuristics < threshold] = 0

    return heuristics
```
