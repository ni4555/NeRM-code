```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize weights to be between 0 and 1 for each dimension
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)

    # Calculate combined score for sorting, considering inverse of weighted prize ratio, sparsity, and total weight
    combined_scores = (-prize / normalized_weight.sum(axis=1) - np.count_nonzero(weight, axis=1) - normalized_weight.sum(axis=1))
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold as a fraction of the maximum combined score
    threshold_fraction = 0.1
    threshold = combined_scores[sorted_indices[0]] * threshold_fraction

    # Iterate over sorted items, update heuristics, and adjust the threshold dynamically
    for i in sorted_indices:
        current_score = combined_scores[i]

        # Update the heuristic value based on the current item's attributes
        heuristics[i] = 1.0 / (1.0 + current_score)

        # If the current score is greater than the current threshold, adjust the threshold
        if current_score > threshold:
            threshold = current_score

        # If the heuristic value of the current item is below the threshold, sparsify it
        if heuristics[i] < threshold_fraction:
            heuristics[i] = 0.0

    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
