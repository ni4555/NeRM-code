{
  "generation": 3,
  "description": "Enhancing MDKP resolution through a hybrid approach that combines adaptive stochastic sampling with an advanced Genetic Algorithm (GA), featuring a dynamic sorting mechanism based on a multi-dimensional weighted ratio metric, and leveraging cumulative sum analysis for precise item contribution assessment to optimize prize collection while rigorously adhering to intricate weight and capacity constraints.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Calculate the cumulative sum for sorting\n    cumulative_sum = np.cumsum(weighted_ratio)\n    \n    # Calculate the multi-dimensional weighted ratio metric\n    multi_dimensional_weighted_ratio = weighted_ratio / cumulative_sum\n    \n    # Apply the dynamic sorting mechanism based on the multi-dimensional weighted ratio metric\n    sorted_indices = np.argsort(-multi_dimensional_weighted_ratio)\n    \n    # Calculate the heuristics based on the sorted indices\n    heuristics = np.zeros_like(prize)\n    for i, index in enumerate(sorted_indices):\n        heuristics[index] = i + 1\n    \n    return heuristics",
      "fitness": 12.839362614720761,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_3/stdout_8.txt",
      "code_file": "coevolve/generation_3/code_8.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(prize)\n    \n    # Calculate the multi-dimensional weighted ratio metric\n    weighted_sum = np.sum(weight, axis=1)\n    # Avoid division by zero by adding a small epsilon\n    epsilon = 1e-10\n    weighted_ratio = prize / (weighted_sum + epsilon)\n    \n    # Calculate the cumulative sum for each item\n    cumulative_sum = np.cumsum(weighted_ratio)\n    \n    # Apply a dynamic sorting mechanism based on the cumulative sum\n    sorted_indices = np.argsort(-cumulative_sum)\n    \n    # Update the heuristics based on the sorted indices\n    for index in sorted_indices:\n        heuristics[index] = cumulative_sum[index]\n    \n    return heuristics",
      "fitness": 16.941481296307273,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_3/stdout_3.txt",
      "code_file": "coevolve/generation_3/code_3.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the multi-dimensional weighted ratio for each item\n    weighted_ratio = np.prod(weight, axis=1) / np.sum(weight, axis=1)\n    \n    # Use the prize to adjust the weighted ratio, as it represents the item's desirability\n    adjusted_ratio = weighted_ratio * prize\n    \n    # Sort items based on the adjusted ratio in descending order\n    sorted_indices = np.argsort(-adjusted_ratio)\n    \n    # Initialize heuristics array with zeros\n    heuristics = np.zeros_like(prize)\n    \n    # Assign a higher heuristic value to more promising items\n    heuristics[sorted_indices] = adjusted_ratio[sorted_indices]\n    \n    return heuristics",
      "fitness": 16.95867107769591,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_3/stdout_10.txt",
      "code_file": "coevolve/generation_3/code_10.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the multi-dimensional weighted ratio for each item\n    weighted_ratio = np.sum(weight, axis=1) / np.sum(weight, axis=1) ** 2\n    \n    # Apply the cumulative sum analysis to the prize array\n    cumulative_prize = np.cumsum(prize)\n    \n    # Combine the weighted ratio and cumulative prize to get the heuristic value\n    heuristics = weighted_ratio * cumulative_prize\n    \n    return heuristics",
      "fitness": 18.582002581891224,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_3/stdout_7.txt",
      "code_file": "coevolve/generation_3/code_7.py"
    }
  ]
}