{
  "generation": 6,
  "description": "Optimizing a Multi-dimensional Knapsack Problem with Adaptive Stochastic Sampling and Advanced Heuristic Algorithms, involving Dynamic Item Sorting and Weighted Ratio Analysis to Maximize Prize Collection While Efficiently Adapting to Complex Weight Constraints and Multi-dimensional Maximum Weight Limitations.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = prize.shape[0]\n    m = weight.shape[1]\n\n    # Dynamic item sorting based on a heuristic, e.g., inverse of weighted prize ratio\n    sorted_indices = np.argsort(-prize / weight.sum(axis=1))\n\n    # Initialize the heuristic values array\n    heuristics = np.zeros(n)\n\n    # Iterate over the sorted items and assign a heuristic value\n    for i in sorted_indices:\n        # Calculate the weighted ratio for the current item\n        weighted_ratio = prize[i] / weight[i, :].sum()\n        \n        # Calculate the sum of current and previous heuristics\n        current_sum = np.sum(heuristics[:i+1])\n        \n        # Calculate the heuristic for the current item based on the weighted ratio and previous sum\n        heuristics[i] = weighted_ratio + current_sum\n\n    # Normalize the heuristics so that they sum to 1\n    heuristics /= np.sum(heuristics)\n\n    return heuristics",
      "fitness": 9.568346614380298,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_3.txt",
      "code_file": "coevolve/generation_6/code_3.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = prize.shape[0]\n    m = weight.shape[1]\n    \n    # Initialize heuristics array\n    heuristics = np.zeros(n)\n    \n    # Calculate weighted ratio for each item\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        weighted_ratio = np.sum(prize[i] * weight[i]) / total_weight\n        heuristics[i] = weighted_ratio\n    \n    # Dynamic item sorting based on weighted ratio\n    sorted_indices = np.argsort(heuristics)[::-1]\n    heuristics = heuristics[sorted_indices]\n    \n    return heuristics",
      "fitness": 16.87328075026837,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_9.txt",
      "code_file": "coevolve/generation_6/code_9.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = prize.shape[0]\n    m = weight.shape[1]\n    heuristics = np.zeros(n)\n\n    # Calculate weighted ratio for each item\n    weighted_ratio = prize / (weight.sum(axis=1))\n\n    # Calculate heuristic value based on weighted ratio and dynamic item sorting\n    for i in range(n):\n        # Apply some heuristic logic to determine the heuristic value\n        # For example, using weighted ratio and a simple sort\n        heuristics[i] = weighted_ratio[i]  # This is a placeholder; actual heuristic logic would go here\n\n    return heuristics",
      "fitness": 22.08407874485468,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_10.txt",
      "code_file": "coevolve/generation_6/code_10.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Ensure the input arrays are NumPy arrays\n    prize = np.asarray(prize)\n    weight = np.asarray(weight)\n    \n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Calculate the heuristic score based on the weighted ratio\n    # Assuming that the heuristic is the weighted ratio itself, but this can be modified\n    # based on the specific heuristic requirements of the problem\n    heuristics = weighted_ratio\n    \n    return heuristics",
      "fitness": 22.112122477385764,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_7.txt",
      "code_file": "coevolve/generation_6/code_7.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(prize)\n\n    # Iterate over each item to calculate its heuristics value\n    for i in range(len(prize)):\n        # Calculate the weighted ratio for the current item\n        weighted_ratio = prize[i] / np.sum(weight[i])\n\n        # Update the heuristics value based on the weighted ratio\n        heuristics[i] = weighted_ratio\n\n    return heuristics",
      "fitness": 22.17120316395331,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_1.txt",
      "code_file": "coevolve/generation_6/code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize a heuristic array with zeros\n    n = prize.size\n    heuristics = np.zeros(n)\n    \n    # Calculate the weighted ratio for each item\n    ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios by summing them and dividing by the sum\n    normalized_ratio = ratio / ratio.sum()\n    \n    # Calculate the heuristic for each item by its weighted ratio\n    heuristics = normalized_ratio\n    \n    return heuristics",
      "fitness": 22.19351796745344,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_6/stdout_8.txt",
      "code_file": "coevolve/generation_6/code_8.py"
    }
  ]
}