{
  "generation": 8,
  "description": "Develop an advanced optimization algorithm for the Multi-dimensional Knapsack Problem (MKP) that incorporates a dynamic multi-criteria sorting mechanism, a comprehensive weighted ratio evaluation, and a robust heuristic normalization technique. The algorithm aims to achieve the maximum total value of selected items, respecting stringent multi-dimensional weight limits. By leveraging state-of-the-art adaptive stochastic sampling strategies, the algorithm will systematically navigate the intricate solution landscape, ensuring optimal adaptation to complex weight constraints and multi-dimensional weight restrictions.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Step 1: Calculate weighted ratio (prize/total weight for each item)\n    weighted_ratio = prize / np.sum(weight, axis=1)\n    \n    # Step 2: Sort items based on weighted ratio in descending order\n    sorted_indices = np.argsort(weighted_ratio)[::-1]\n    \n    # Step 3: Normalize the sorted items\n    # Calculate the maximum weighted ratio\n    max_ratio = np.max(weighted_ratio)\n    # Normalize by dividing by the max ratio\n    normalized_ratios = weighted_ratio / max_ratio\n    \n    # Step 4: Return the sorted and normalized heuristic values\n    return normalized_ratios[sorted_indices]\n\n# Example usage:\n# Assuming we have 3 items with prizes and weights\nprize = np.array([50, 60, 40])\nweight = np.array([[1, 2], [1, 3], [1, 1]])\n\n# Call the function\nheuristic_values = heuristics_v2(prize, weight)\nprint(heuristic_values)",
      "fitness": 16.03181971903839,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_8/stdout_6.txt",
      "code_file": "coevolve/generation_8/code_6.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = len(prize)\n    m = len(weight[0])\n    \n    # Step 1: Calculate the total weight for each item\n    total_weight = np.sum(weight, axis=1)\n    \n    # Step 2: Calculate the weighted ratio for each item\n    weighted_ratio = prize / total_weight\n    \n    # Step 3: Dynamic multi-criteria sorting\n    # Assuming we sort by the weighted ratio in descending order and then by prize in descending order\n    # Note: This is a simplification; a more complex sorting mechanism could be implemented here\n    sorted_indices = np.argsort(weighted_ratio)[::-1]\n    sorted_indices = np.argsort(prize[sorted_indices])[::-1][sorted_indices]\n    \n    # Step 4: Apply a robust heuristic normalization technique\n    # We normalize by the maximum weighted ratio\n    max_weighted_ratio = np.max(weighted_ratio)\n    normalized_weights = weighted_ratio / max_weighted_ratio\n    \n    # Step 5: Return the normalized weights as heuristics\n    heuristics = normalized_weights[sorted_indices]\n    \n    return heuristics",
      "fitness": 16.206869047347862,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_8/stdout_1.txt",
      "code_file": "coevolve/generation_8/code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the average weight across all dimensions for each item\n    avg_weight = np.mean(weight, axis=1)\n    \n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / avg_weight\n    \n    # Sort the weighted ratios in descending order to prioritize items with higher ratios\n    sorted_indices = np.argsort(weighted_ratio)[::-1]\n    \n    # Normalize the sorted weighted ratios to ensure they are on a comparable scale\n    max_ratio = np.max(weighted_ratio)\n    normalized_ratios = weighted_ratio / max_ratio\n    \n    # Return the normalized ratios, which represent the heuristics for each item\n    return normalized_ratios[sorted_indices]",
      "fitness": 16.517538973017345,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_8/stdout_2.txt",
      "code_file": "coevolve/generation_8/code_2.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = prize.shape[0]\n    m = weight.shape[1]\n    \n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Calculate the sum of weights for each item\n    weight_sum = weight.sum(axis=1)\n    \n    # Combine weighted ratio and weight sum for dynamic sorting\n    combined_heuristics = weighted_ratio * weight_sum\n    \n    # Sort the items based on the combined heuristics (e.g., descending order)\n    sorted_indices = np.argsort(-combined_heuristics)\n    \n    # Normalize the sorted heuristics to the range [0, 1]\n    max_heuristic = combined_heuristics[sorted_indices[0]]\n    normalized_heuristics = combined_heuristics / max_heuristic\n    \n    return normalized_heuristics[sorted_indices]\n\n# Example usage:\n# n = 4\n# m = 2\n# prize = np.array([10, 20, 30, 40])\n# weight = np.array([[1, 2], [1, 3], [1, 4], [1, 5]])\n# print(heuristics_v2(prize, weight))",
      "fitness": 16.665185562939225,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_8/stdout_9.txt",
      "code_file": "coevolve/generation_8/code_9.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    \n    # Calculate the total weight for each item\n    total_weight = np.sum(weight, axis=1)\n    \n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / total_weight\n    \n    # Apply a dynamic multi-criteria sorting\n    # We will sort by weighted ratio in descending order\n    # Since each dimension's constraint is fixed to 1, we can sort by any dimension's ratio\n    sorted_indices = np.argsort(weighted_ratio)[::-1]\n    \n    # Normalize the heuristics based on the sorted indices\n    # We will normalize by dividing by the sum of the sorted ratios\n    sorted_ratios = weighted_ratio[sorted_indices]\n    max_ratio = np.max(sorted_ratios)\n    min_ratio = np.min(sorted_ratios)\n    # Normalize to a range between 0 and 1\n    normalized_ratios = (sorted_ratios - min_ratio) / (max_ratio - min_ratio)\n    \n    # The normalized ratios are now the heuristics\n    heuristics = normalized_ratios[sorted_indices]\n    \n    return heuristics",
      "fitness": 16.7583777871687,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_8/stdout_11.txt",
      "code_file": "coevolve/generation_8/code_11.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = len(prize)\n    m = len(weight[0])\n    \n    # Step 1: Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / np.sum(weight, axis=1)\n    \n    # Step 2: Dynamic multi-criteria sorting\n    # For simplicity, we are only considering value-to-weight ratio, but in a full implementation,\n    # you could add additional criteria and use a more complex sorting mechanism.\n    sorted_indices = np.argsort(value_to_weight_ratio)[::-1]\n    \n    # Step 3: Normalize the heuristics\n    # Normalize based on the maximum ratio to ensure the heuristics are on the same scale\n    max_ratio = np.max(value_to_weight_ratio)\n    normalized_heuristics = value_to_weight_ratio / max_ratio\n    \n    # Step 4: Adaptive stochastic sampling\n    # This step is conceptual and depends on the specific algorithm used. Here, we'll just repeat\n    # the normalization step as a placeholder for the adaptive sampling strategy.\n    adaptive_stochastic_sampling = np.random.choice(n, size=int(n / 2), replace=False)\n    for i in adaptive_stochastic_sampling:\n        normalized_heuristics[i] = np.random.random()\n    \n    # The final heuristics array is the normalized heuristics, which is already of shape (n,)\n    return normalized_heuristics\n\n# Example usage:\n# prize = np.array([10, 30, 20])\n# weight = np.array([[1, 1], [2, 1], [1, 2]])\n# print(heuristics_v2(prize, weight))",
      "fitness": 18.74423023613827,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_8/stdout_0.txt",
      "code_file": "coevolve/generation_8/code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n\n    # Sort items by weighted ratio in descending order\n    sorted_indices = np.argsort(weighted_ratio)[::-1]\n\n    # Apply dynamic multi-criteria sorting based on constraints\n    constraints = np.ones((weight.shape[0], 1))\n    for i in range(weight.shape[1]):\n        # Normalize the weight by the sum of weights to ensure each dimension is considered\n        normalized_weight = weight[:, i] / weight.sum(axis=1)\n        # Sort items by normalized weight in each dimension, descending order\n        sorted_indices_by_dim = np.argsort(normalized_weight)[::-1]\n        # Update sorted indices based on the sorted indices by dimension\n        sorted_indices = np.intersect1d(sorted_indices, sorted_indices_by_dim)\n\n    # Compute the heuristic value for each item\n    heuristics = np.zeros(prize.shape)\n    heuristics[sorted_indices] = weighted_ratio[sorted_indices]\n\n    return heuristics",
      "fitness": 22.212129765303477,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_8/stdout_4.txt",
      "code_file": "coevolve/generation_8/code_4.py"
    }
  ]
}