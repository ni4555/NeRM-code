{
  "generation": 4,
  "description": "Revise the Multi-dimensional Knapsack Problem (MKP) using a hybrid evolutionary algorithm that integrates adaptive stochastic sampling with a dynamic sorting mechanism. This mechanism leverages a heuristic combining weighted ratio analysis and cumulative prize normalization to maximize prize collection under stringent weight limitations, thereby enhancing the algorithm's ability to navigate complex weight constraints and achieve optimal solutions.",
  "failed_solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    # Ensure weight is 1 for all dimensions\n    if weight.shape[1] != 1:\n        raise ValueError(\"Expected weight to have a single dimension with value 1 for each item.\")\n    \n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight\n    \n    # Normalize the prize by the cumulative prize sum\n    cumulative_prize = np.cumsum(prize)\n    normalized_prize = prize / cumulative_prize\n    \n    # Combine the weighted ratio and normalized prize for heuristic\n    combined_heuristics = weighted_ratio * normalized_prize\n    \n    # Return the resulting heuristics array\n    return combined_heuristics\n\n# Example usage:\n# prize = np.array([10, 20, 30])\n# weight = np.array([[1], [1], [1]])\n# print(heuristics_v2(prize, weight))",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Traceback (most recent call last):\n  File \"/home/lars/workspace/COP/reevo_2/problems/mkp_aco/eval.py\", line 58, in <module>\n    obj = solve(prize, weight)\n          ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/lars/workspace/COP/reevo_2/problems/mkp_aco/eval.py\", line 23, in solve\n    heu = heuristics(prize.copy(), weight.copy()) + 1e-9\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/lars/workspace/COP/reevo_2/problems/mkp_aco/gpt.py\", line 8, in heuristics_v2\n    # Calculate cumulative prize normalization\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nValueError: Expected weight to have a single dimension with value 1 for each item.\n",
      "stdout_file": "coevolve/generation_4/stdout_5.txt",
      "code_file": "coevolve/generation_4/code_5.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate weighted ratio\n    weighted_ratio = prize / weight.sum(axis=1, keepdims=True)\n    \n    # Calculate cumulative prize normalization\n    cumulative_prize = np.cumsum(prize)\n    cumulative_prize /= cumulative_prize[-1]  # Normalize to the last value for consistency\n    \n    # Combine the two heuristics with a simple weighted sum\n    heuristics = weighted_ratio * 0.6 + cumulative_prize * 0.4  # Adjust weights as needed\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Traceback (most recent call last):\n  File \"/home/lars/workspace/COP/reevo_2/problems/mkp_aco/eval.py\", line 58, in <module>\n    obj = solve(prize, weight)\n          ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/lars/workspace/COP/reevo_2/problems/mkp_aco/eval.py\", line 24, in solve\n    assert heu.shape == (n,)\n           ^^^^^^^^^^^^^^^^^\nAssertionError\n",
      "stdout_file": "coevolve/generation_4/stdout_6.txt",
      "code_file": "coevolve/generation_4/code_6.py"
    }
  ]
}