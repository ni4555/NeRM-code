{
  "generation": 4,
  "description": "Revise the Multi-dimensional Knapsack Problem (MKP) using a hybrid evolutionary algorithm that integrates adaptive stochastic sampling with a dynamic sorting mechanism. This mechanism leverages a heuristic combining weighted ratio analysis and cumulative prize normalization to maximize prize collection under stringent weight limitations, thereby enhancing the algorithm's ability to navigate complex weight constraints and achieve optimal solutions.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = prize.shape[0]\n    m = weight.shape[1]\n    \n    # Calculate the cumulative prize for each item\n    cumulative_prize = np.cumsum(prize)\n    \n    # Calculate the weighted ratio for each item\n    weighted_ratio = cumulative_prize / weight.sum(axis=1)\n    \n    # Calculate the cumulative normalized prize for each item\n    cumulative_normalized_prize = cumulative_prize / cumulative_prize.sum()\n    \n    # Combine the weighted ratio and cumulative normalized prize to create a heuristic value\n    heuristic_values = weighted_ratio * cumulative_normalized_prize\n    \n    return heuristic_values",
      "fitness": 17.539622410592436,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_11.txt",
      "code_file": "coevolve/generation_4/code_11.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the prize for each item by the cumulative prize sum\n    cumulative_prize = np.cumsum(prize)\n    normalized_prize = prize / cumulative_prize\n    \n    # Combine the weighted ratio and normalized prize to form a heuristic\n    heuristics = weighted_ratio * normalized_prize\n    \n    return heuristics",
      "fitness": 20.50526997079848,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_1.txt",
      "code_file": "coevolve/generation_4/code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the cumulative prize for each item\n    cumulative_prize = np.cumsum(prize)\n    normalized_prize = cumulative_prize / cumulative_prize[-1]\n    \n    # Combine the weighted ratio and normalized prize using a heuristic\n    heuristics = weighted_ratio * normalized_prize\n    \n    # Return the heuristics array\n    return heuristics",
      "fitness": 20.90348481740469,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_0.txt",
      "code_file": "coevolve/generation_4/code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate weighted ratio for each item\n    weighted_ratio = prize / np.sum(weight, axis=1)\n    \n    # Calculate cumulative prize for each item\n    cumulative_prize = np.cumsum(prize)\n    \n    # Normalize cumulative prize\n    normalized_cumulative_prize = cumulative_prize / cumulative_prize[-1]\n    \n    # Combine weighted ratio analysis and cumulative prize normalization\n    heuristics = weighted_ratio * normalized_cumulative_prize\n    \n    return heuristics",
      "fitness": 20.90904220014162,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_9.txt",
      "code_file": "coevolve/generation_4/code_9.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = prize.shape[0]\n    m = weight.shape[1]\n    \n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / np.sum(weight, axis=1)\n    \n    # Calculate the cumulative prize normalization\n    cumulative_prize = np.cumsum(prize)\n    cumulative_prize_ratio = cumulative_prize / np.sum(cumulative_prize)\n    \n    # Combine the heuristic values\n    heuristics = weighted_ratio * cumulative_prize_ratio\n    \n    return heuristics",
      "fitness": 20.917401352800795,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_3.txt",
      "code_file": "coevolve/generation_4/code_3.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = len(prize)\n    m = weight.shape[1]\n    \n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the cumulative prize\n    cumulative_prize = np.cumsum(prize)\n    cumulative_prize /= cumulative_prize[-1]\n    \n    # Combine weighted ratio analysis and cumulative prize normalization\n    heuristics = weighted_ratio * cumulative_prize\n    \n    # Scale the heuristics to ensure they sum to 1\n    heuristics /= heuristics.sum()\n    \n    return heuristics",
      "fitness": 20.97973434282904,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_2.txt",
      "code_file": "coevolve/generation_4/code_2.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / np.sum(weight, axis=1)\n    \n    # Normalize the cumulative prize for each dimension\n    cumulative_prize = np.cumsum(prize)\n    normalized_cumulative_prize = cumulative_prize / np.sum(cumulative_prize)\n    \n    # Combine weighted ratio and normalized cumulative prize\n    heuristics = weighted_ratio * normalized_cumulative_prize\n    \n    return heuristics",
      "fitness": 21.04219391438756,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_7.txt",
      "code_file": "coevolve/generation_4/code_7.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = prize.shape[0]\n    m = weight.shape[1]\n    \n    # Calculate weighted ratio analysis\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Calculate cumulative prize for each item\n    cumulative_prize = np.cumsum(prize)\n    \n    # Normalize cumulative prize to account for different total prizes\n    normalized_cumulative_prize = cumulative_prize / cumulative_prize.sum()\n    \n    # Combine weighted ratio and normalized cumulative prize\n    heuristics = weighted_ratio * normalized_cumulative_prize\n    \n    return heuristics",
      "fitness": 21.11379574763628,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_10.txt",
      "code_file": "coevolve/generation_4/code_10.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate weighted ratio for each item\n    weighted_ratio = prize / np.sum(weight, axis=1)\n    \n    # Calculate cumulative prize normalization\n    cumulative_prize = np.cumsum(prize)\n    cumulative_prize_ratio = cumulative_prize / np.sum(cumulative_prize)\n    \n    # Combine weighted ratio and cumulative prize normalization\n    heuristics = weighted_ratio * cumulative_prize_ratio\n    \n    return heuristics",
      "fitness": 21.142316607040925,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_4.txt",
      "code_file": "coevolve/generation_4/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the prize by cumulative sum to handle items with varying total prize\n    cumulative_prize = np.cumsum(prize)\n    normalized_prize = cumulative_prize / cumulative_prize[-1]\n    \n    # Combine the heuristic using both weighted ratio and normalized prize\n    combined_heuristic = weighted_ratio * normalized_prize\n    \n    # Return the heuristics array\n    return combined_heuristic",
      "fitness": 21.21884722520417,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_8.txt",
      "code_file": "coevolve/generation_4/code_8.py"
    }
  ]
}