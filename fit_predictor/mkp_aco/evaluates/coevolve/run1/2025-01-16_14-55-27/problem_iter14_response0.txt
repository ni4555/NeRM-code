```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple criteria: inverse of weighted prize ratio, sparsity, and total weight
    combined_scores = (-prize / weight.sum(axis=1) - np.count_nonzero(weight, axis=1) - weight.sum(axis=1))
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = prize[i] / weight[i, :].sum()
        sparsity = np.count_nonzero(weight[i, :])
        total_weight = weight[i, :].sum()

        # Calculate the heuristic for the current item
        heuristic_value = weighted_ratio / (sparsity + total_weight)

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Refine the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[i] = 0 if heuristic_value < threshold * 0.1 else heuristic_value

    # Normalize the heuristics so that they sum to 1
    heuristics /= heuristics.sum()

    return heuristics
```
