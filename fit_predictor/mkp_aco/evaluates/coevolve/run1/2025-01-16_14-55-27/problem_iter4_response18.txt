```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted ratio and average weight per dimension
    weighted_ratio = prize / weight.sum(axis=1)
    average_weight = weight.mean(axis=1)

    # Combine criteria to create a sorting metric
    combined_sorting_metric = weighted_ratio * (1 - average_weight)

    # Sort indices based on the combined metric
    sorted_indices = np.argsort(combined_sorting_metric)[::-1]

    # Initialize the heuristic array
    heuristics = np.zeros(n)

    # Assign initial heuristics based on the sorting metric
    heuristics[sorted_indices] = combined_sorting_metric[sorted_indices]

    # Normalize the heuristics to ensure they sum to 1
    heuristics /= heuristics.sum()

    # Ensure sparsity by setting a lower threshold
    threshold = np.mean(heuristics) / 2
    heuristics[heuristics < threshold] = 0

    return heuristics
```
