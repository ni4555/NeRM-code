```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight to consider each item's dimensional impact
    normalized_prize = prize / n
    normalized_weight = weight / m

    # Dynamic item sorting based on the normalized weighted prize ratio and logarithmic sparsity
    combined_scores = (normalized_prize / normalized_weight.sum(axis=1) - np.log2(np.count_nonzero(weight, axis=1)))
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold using the median of the combined scores
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = normalized_prize[i] / normalized_weight[i, :].sum()
        sparsity = np.log2(np.count_nonzero(weight[i, :]))
        total_weight = normalized_weight[i, :].sum()

        # Calculate the heuristic for the current item
        heuristic_value = weighted_ratio / (sparsity + total_weight)

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Adjust the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[heuristics < threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
