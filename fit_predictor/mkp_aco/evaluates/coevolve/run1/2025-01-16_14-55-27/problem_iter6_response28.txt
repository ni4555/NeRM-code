```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple criteria: weighted ratio, average weight per dimension, and total prize
    weighted_prize_ratio = prize / weight.sum(axis=1)
    average_weight = weight.mean(axis=1)
    combined_sorting_criterion = weighted_prize_ratio * (1 - average_weight) * (prize.sum() / n)
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on total prize
    total_prize = prize.sum()
    heuristics.fill(total_prize / n)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        # Calculate the contribution of the current item to the heuristic
        contribution = prize[i] / weight[i, :].sum()
        
        # Adjust the heuristic for the current item
        heuristics[i] = heuristics[i] + contribution

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Apply adaptive stochastic sampling by focusing on the top 10% most promising items
    top_indices = np.argsort(heuristics)[::-1][:int(n * 0.1)]
    heuristics[~np.isin(np.arange(n), top_indices)] = 0

    return heuristics
```
