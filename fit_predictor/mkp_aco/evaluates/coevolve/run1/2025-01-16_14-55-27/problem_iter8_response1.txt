```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight per dimension
    normalized_prize = prize / np.sum(prize)
    normalized_weight = weight / np.sum(weight, axis=1)

    # Calculate the weighted ratio and sparsity for each item
    weighted_ratio = normalized_prize / normalized_weight.sum(axis=1)
    sparsity = np.log2(np.count_nonzero(weight, axis=1))

    # Combine multiple criteria for sorting: weighted ratio, sparsity, and normalized prize
    combined_scores = weighted_ratio / (sparsity + 1) * 2 + (normalized_prize / normalized_weight.sum(axis=1)) * 0.5
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold using the median of the combined scores
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        heuristic_value = combined_scores[i]

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[i] = 1 if heuristic_value >= threshold * 0.1 else 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
