```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize vector to make the heuristic calculations stable
    normalized_prize = prize / prize.sum()

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.median(normalized_prize)

    # Iterate over the items and adjust heuristic values
    for i in range(n):
        # Calculate the weighted ratio for the current item
        weighted_ratio = normalized_prize[i] / weight[i, :].sum()

        # Calculate the sparsity of the current item
        sparsity = np.count_nonzero(weight[i, :])

        # Calculate the heuristic for the current item
        heuristic_value = weighted_ratio / (sparsity + weight[i, :].sum())

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Adjust the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[heuristics < threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
