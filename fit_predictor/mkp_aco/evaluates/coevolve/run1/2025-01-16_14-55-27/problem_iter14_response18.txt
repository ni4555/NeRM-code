```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate weighted ratio
    weighted_ratio = prize / weight.sum(axis=1)

    # Calculate sparsity
    sparsity = np.count_nonzero(weight, axis=1)

    # Calculate combined score based on weighted ratio, sparsity, and inverse total weight
    combined_scores = weighted_ratio - sparsity - 1 / weight.sum(axis=1)

    # Sort items based on combined score
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize dynamic threshold
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        heuristic_value = weighted_ratio[i] / (sparsity[i] + weight[i, :].sum())

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Adjust the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[heuristics < threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
