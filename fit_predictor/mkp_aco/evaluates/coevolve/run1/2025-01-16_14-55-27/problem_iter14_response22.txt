```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted prize ratio for each item
    weighted_prize_ratio = prize / (weight.sum(axis=1) + 1e-8)

    # Calculate the sparsity for each item
    sparsity = 1 - (np.count_nonzero(weight, axis=1) / n)

    # Calculate the normalized sparsity
    sparsity_normalized = sparsity / np.max(sparsity)

    # Combine the weighted prize ratio and normalized sparsity to create a heuristic value for each item
    combined_score = weighted_prize_ratio * sparsity_normalized

    # Normalize the combined score using softmax to prevent numerical instability and ensure sum is 1
    exp_scores = np.exp(combined_score - np.max(combined_score))
    heuristics = exp_scores / np.sum(exp_scores)

    return heuristics
```
