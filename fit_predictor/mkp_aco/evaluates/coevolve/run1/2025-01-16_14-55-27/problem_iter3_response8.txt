```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple criteria: weighted ratio, average weight per dimension, and total prize
    combined_sorting_criterion = (-prize / weight.sum(axis=1)).ravel() * (1 - weight.mean(axis=1)) * (prize.sum() / n)
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on total prize
    total_prize = prize.sum()
    heuristics.fill(total_prize / n)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = prize[i] / weight[i, :].sum()
        average_weight = weight[i, :].mean()
        
        # Calculate the contribution of the current item to the heuristic
        contribution = weighted_ratio - average_weight
        
        # Adjust the heuristic for the current item
        heuristics[i] = heuristics[i] + contribution

    # Sparsify heuristics by focusing on the top x% of items based on the heuristic value
    percentile = 0.8
    threshold = np.percentile(heuristics, (1 - percentile) * 100)
    heuristics[heuristics < threshold] = 0

    return heuristics
```
