```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prizes and weights for each dimension
    normalized_prize = prize / np.linalg.norm(prize)
    normalized_weight = weight / np.linalg.norm(weight, axis=1, keepdims=True)

    # Dynamic item sorting based on weighted prize ratio, sparsity, and total normalized weight
    combined_scores = (-normalized_prize - np.count_nonzero(normalized_weight, axis=1) - normalized_weight.sum(axis=1))
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.exp(-combined_scores)  # Using exponential to avoid large numbers and stabilize softmax

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = normalized_prize[i]
        sparsity = np.count_nonzero(normalized_weight[i, :])
        total_weight = normalized_weight[i, :].sum()

        # Calculate the heuristic for the current item
        heuristic_value = np.exp(weighted_ratio / (sparsity + total_weight))

        # Update the threshold based on the maximum heuristic encountered
        threshold[i] = max(threshold[i], heuristic_value)

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[i] = heuristic_value if heuristic_value > threshold[i] * 0.1 else 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
