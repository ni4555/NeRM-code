```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted prize ratio for each item
    weighted_prize_ratio = prize / (weight.sum(axis=1) + 1e-8)  # Adding a small constant to avoid division by zero

    # Calculate the sparsity for each item
    sparsity = 1 - (np.count_nonzero(weight, axis=1) / n)

    # Combine the weighted prize ratio and sparsity to create a heuristic value for each item
    heuristics = weighted_prize_ratio * sparsity

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
