```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the average weighted ratio
    avg_weighted_ratio = (prize * weight.sum(axis=1)) / (weight ** 2).sum(axis=1)
    
    # Calculate the weight variance
    variance = np.var(weight, axis=1)
    
    # Combine the criteria using a weighted sum approach
    combined_score = avg_weighted_ratio * (1 / variance)
    
    # Sort items based on the combined score
    sorted_indices = np.argsort(-combined_score)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        weighted_ratio = prize[i] / weight[i, :].sum()
        variance_ratio = 1 / variance[i]
        heuristic_value = weighted_ratio * variance_ratio

        # Adaptively update the heuristic values
        heuristics[:i+1] += heuristic_value / (1 + np.sum(heuristics[:i+1]))

    # Sparsify the heuristics to ensure they do not all cluster together
    sparsity_threshold = 0.5
    heuristics[heuristics < sparsity_threshold] = 0

    # Normalize the heuristics so that they sum to the sparsity threshold
    heuristics /= np.sum(heuristics)
    heuristics[heuristics > sparsity_threshold] = sparsity_threshold

    return heuristics
```
