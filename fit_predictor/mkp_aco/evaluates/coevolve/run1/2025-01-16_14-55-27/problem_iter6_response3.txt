```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Define a function to calculate the adaptive weighted ratio
    def adaptive_weighted_ratio(item_idx):
        item_prize = prize[item_idx]
        item_weight_sum = weight[item_idx, :].sum()
        if item_weight_sum > 0:
            # Calculate the ratio and normalize by the sum of the maximum possible weight
            return item_prize / (item_weight_sum / m)
        else:
            return 0

    # Sort items based on the adaptive weighted ratio, average weight per dimension, and total prize
    adaptive_ratios = np.array([adaptive_weighted_ratio(i) for i in range(n)])
    average_weights = weight.mean(axis=1)
    combined_sorting_criterion = (adaptive_ratios * (1 - average_weights)).ravel() * (prize.sum() / n)
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on total prize
    total_prize = prize.sum()
    heuristics.fill(total_prize / n)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        item_idx = sorted_indices[i]
        weighted_ratio = adaptive_weighted_ratio(item_idx)
        average_weight = average_weights[item_idx]
        
        # Calculate the contribution of the current item to the heuristic
        contribution = weighted_ratio - average_weight
        
        # Adjust the heuristic for the current item
        heuristics[item_idx] = heuristics[item_idx] + contribution

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Dynamically adjust weights based on the sparsity of the current heuristic distribution
    sparsity_weights = np.zeros(n)
    for i in range(n):
        if heuristics[i] > 0:
            sparsity_weights[i] = 1 / heuristics[i]
        else:
            sparsity_weights[i] = 0

    # Adjust heuristics to promote diversity
    heuristics *= sparsity_weights

    return heuristics
```
