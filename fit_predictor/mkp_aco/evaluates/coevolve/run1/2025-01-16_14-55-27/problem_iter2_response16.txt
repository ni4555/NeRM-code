```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on weighted ratio and sparsity
    sorted_indices = np.argsort(-prize / weight.sum(axis=1))

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on sparsity
    sparsity = 1 - (weight.sum(axis=1) > 0).mean()
    heuristics.fill(sparsity)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = prize[i] / weight[i, :].sum()
        sparsity = 1 - (weight[i, :].sum() > 0).mean()

        # Normalize contributions based on current and previous heuristics
        current_sum = np.sum(heuristics[:i+1])
        normalized_contribution = (weighted_ratio - sparsity) / (1 + current_sum)

        # Adjust the heuristic for the current item
        heuristics[i] += normalized_contribution

        # Sparsify the heuristic by setting it to zero if the contribution is below a threshold
        if heuristics[i] <= 0:
            heuristics[i] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
