```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate weighted ratio and average weight per dimension
    weighted_ratio = prize / weight.sum(axis=1)
    average_weight = weight.mean(axis=1)

    # Combine multiple criteria for dynamic item sorting
    combined_sorting_criterion = weighted_ratio * (1 - average_weight) * (prize.sum() / n)
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Apply normalization based on the sum of prizes
    heuristics = prize / prize.sum()

    # Adjust heuristics based on the sorting criterion
    for i in sorted_indices:
        heuristics[i] += 1 - average_weight[i]

    # Introduce adaptive stochastic sampling
    potential = heuristics / heuristics.sum()
    heuristics *= potential

    # Introduce sparsity by setting a dynamic threshold
    sparsity_threshold = 0.5
    heuristics[heuristics < sparsity_threshold] = 0

    # Normalize again to maintain a certain level of sparsity
    heuristics /= np.sum(heuristics)

    # Return the final heuristics array
    return heuristics
```
