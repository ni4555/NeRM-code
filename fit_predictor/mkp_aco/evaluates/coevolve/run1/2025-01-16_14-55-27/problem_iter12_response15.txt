```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize by the maximum prize available
    normalized_prize = prize / np.max(prize)

    # Calculate the combined score for each item using logarithmic transformation and sparsity
    combined_scores = -np.log(normalized_prize / weight.sum(axis=1)) - np.count_nonzero(weight, axis=1) - weight.sum(axis=1)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items
    for i in range(n):
        item_combined_score = combined_scores[i]
        # Calculate the heuristic for the current item using the exponential transformation
        heuristic_value = np.exp(-item_combined_score)
        # Sparsify the heuristic by setting it to zero if the contribution is below a dynamic threshold
        heuristics[i] = heuristic_value if heuristic_value > 0.1 * np.min(combined_scores) else 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
