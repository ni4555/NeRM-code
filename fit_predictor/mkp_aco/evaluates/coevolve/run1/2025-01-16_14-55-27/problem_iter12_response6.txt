```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted ratio for each item
    weighted_ratio = prize / (weight.sum(axis=1) + 1e-9)

    # Sort items based on weighted ratio
    sorted_indices = np.argsort(-weighted_ratio)

    # Calculate the contribution of each item considering dimension-specific analysis
    contribution = np.zeros(n)
    for i in range(n):
        index = sorted_indices[i]
        accumulated_weight = np.sum(weight[index, :])
        # Introduce a penalty for items that exceed a certain average weight per dimension
        weight_penalty = np.exp(-accumulated_weight / m)
        contribution[index] = weighted_ratio[index] * weight_penalty

    # Normalize the contributions so that they sum to 1
    contribution /= np.sum(contribution)

    # Apply sparsity consideration by calculating the sparsity of each item
    sparsity = np.count_nonzero(weight > 0, axis=1) / m
    sparsity_normalized = sparsity / np.max(sparsity)  # Normalize sparsity

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Combine weighted ratio contributions and sparsity into heuristics
    heuristics[sorted_indices] = contribution[sorted_indices] * sparsity_normalized[sorted_indices]

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
