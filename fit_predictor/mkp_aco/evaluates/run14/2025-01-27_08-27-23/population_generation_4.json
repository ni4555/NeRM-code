[
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        total_prize = np.sum(prize[i])\n        heuristics[i] = total_prize / total_weight\n    return heuristics_matrix",
          "objective": -22.47896,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros((n, m))\n    for i in range(n):\n        for j in range(m):\n            heuristics_matrix[i, j] = np.log(prize[i]) / (weight[i, j] * np.log(n))\n    return heuristics_matrix",
          "objective": -22.4779,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_ratio = 0\n        for j in range(m):\n            ratio = prize[i] / weight[i, j]\n            if ratio > max_ratio:\n                max_ratio = ratio\n        heuristics[i] = max_ratio\n    return heuristics_matrix",
          "objective": -22.47585,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        ratio = prize[i] / np.sum(weight[i])\n        heuristics[i] = 1 / (1 + ratio)\n    return heuristics_matrix",
          "objective": -22.47555,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        for j in range(m):\n            if weight[i, j] <= 1:\n                heuristics[i] += prize[i] / weight[i, j]\n    return heuristics_matrix",
          "objective": -22.47002,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the probability of selecting each item based on the cumulative ratio of the total prize to the cumulative sum of weights, excluding any items that have exceeded a single unit weight constraint in any dimension.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        valid_indices = np.sum(weight[:i+1] <= 1, axis=1) == m\n        cumulative_prize = np.sum(prize[:i+1][valid_indices])\n        cumulative_weight = np.sum(weight[:i+1][valid_indices], axis=1)\n        if np.any(cumulative_weight > 1):\n            heuristics[i] = 0\n        else:\n            heuristics[i] = cumulative_prize / np.prod(cumulative_weight)\n    return heuristics_matrix",
          "objective": -22.46866,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        if np.all(weight[i] <= 1):\n            heuristics[i] = np.sum(prize) / np.sum(weight) - np.sum(prize) / (np.sum(weight) - weight[i])\n    return heuristics_matrix",
          "objective": -22.46655,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    item_max_ratio = prize / weight\n    sorted_indices = np.argsort(-item_max_ratio)\n    heuristics_matrix = sorted_indices.reshape(n)\n    return heuristics_matrix",
          "objective": -22.46527,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = weight.shape\n    heuristics = np.zeros(n)\n    for i in range(n):\n        if np.all(weight[i] <= 1):\n            heuristics[i] = np.mean(prize[i] / weight[i])\n    return heuristics_matrix",
          "objective": -22.46453,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        sum_weight = np.sum(weight[i] == 1)\n        heuristics[i] = prize[i] / sum_weight if sum_weight > 0 else 0\n    return heuristics_matrix",
          "objective": -22.46376,
          "other_inf": null
     },
     {
          "algorithm": "\n        n, m = prize.shape[0], weight.shape[1]\n        heuristics = np.zeros(n)\n        for i in range(n):\n            heuristics[i] = np.prod(prize[:i+1]) / np.prod(prize[:i+1][weight[:i+1, 0] <= 1])\n        return heuristics\n    ",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    {\n        n, m = prize.shape[0], weight.shape[1]\n        heuristics = np.zeros(n)\n        for i in range(n):\n            heuristics[i] = np.prod(prize[:i+1]) / np.prod(prize[:i+1][weight[:i+1, 0] <= 1])\n        return heuristics_matrix",
          "objective": -22.46319,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    cumulative_weight = np.cumsum(weight, axis=1)\n    probabilities = cumulative_weight.sum(axis=1) / cumulative_weight\n    heuristics = prize * probabilities\n    return heuristics_matrix",
          "objective": -22.46275,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        sum_weight = np.sum(weight[i] == 1)\n        max_ratio = max(prize[i] / (sum_weight if sum_weight > 0 else 1))\n        heuristics[i] = max_ratio\n    return heuristics_matrix",
          "objective": -22.46087,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = weight.shape\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_weight = np.amax(weight[i, :])\n        if max_weight <= 1:\n            heuristics[i] = np.sum(prize[i] * max_weight)\n    return heuristics_matrix",
          "objective": -22.46042,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    normalized_weight = weight / weight.sum(axis=1, keepdims=True)\n    weighted_probabilities = prize * normalized_weight\n    heuristics = weighted_probabilities.sum(axis=1)\n    return heuristics_matrix",
          "objective": -22.4601,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros((n, m))\n    for i in range(n):\n        for j in range(m):\n            heuristics_matrix[i, j] = (np.log(prize[i]) + np.log(n)) / (weight[i, j] * np.log(n) + 1)\n    return heuristics_matrix",
          "objective": -22.45982,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros((n, m))\n    for i in range(n):\n        for j in range(m):\n            heuristics_matrix[i, j] = (prize[i] / weight[i, j])\n    return heuristics_matrix",
          "objective": -22.45958,
          "other_inf": null
     },
     {
          "algorithm": "\n  \"The algorithm dynamically adjusts the heuristic values by considering the average prize-to-weight ratio for each item, normalized by the average of the ratios up to that item.\"\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    cumulative_avg = np.mean(prize)\n    for i in range(n):\n        item_avg = np.mean(prize[:i+1])\n        heuristics[i] = item_avg / cumulative_avg\n        cumulative_avg = item_avg\n    return heuristics_matrix",
          "objective": -22.45925,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_ratio = 0\n        for j in range(m):\n            ratio = prize[i] / (weight[i, j] + 1e-6)  # Adding a small value to avoid division by zero\n            max_ratio = max(max_ratio, ratio)\n        heuristics[i] = max_ratio\n    return heuristics_matrix",
          "objective": -22.45431,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    cumulative_weight = np.cumsum(weight, axis=1)\n    probabilities = cumulative_weight.sum(axis=1) / cumulative_weight\n    heuristics = prize * probabilities\n    return heuristics_matrix",
          "objective": -22.45277,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight == 0:\n            heuristics[i] = 0\n        else:\n            heuristics[i] = np.sum(prize[i]) / total_weight\n    return heuristics_matrix",
          "objective": -22.4519,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_ratio = 0\n        for j in range(m):\n            ratio = (prize[i] / (weight[i, j] + 1e-6)) ** (1 + j * 0.1)  # Modified score function with increasing exponent on dimension\n            max_ratio = max(max_ratio, ratio)\n        heuristics[i] = max_ratio\n    return heuristics_matrix",
          "objective": -22.45081,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_ratio = 0\n        for j in range(m):\n            ratio = prize[i] / (weight[i, j] + 1e-6)\n            max_ratio = max(max_ratio, ratio)\n        heuristics[i] = (max_ratio * np.sum(weight[i, :])) / prize[i]\n    return heuristics_matrix",
          "objective": -22.44994,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        if np.all(weight[i] <= 1):\n            heuristics[i] = (np.max(prize) - np.max(prize[i])) / (np.max(weight) - np.max(weight[i]))\n    return heuristics_matrix",
          "objective": -22.44379,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        sum_weight = np.sum(weight[i, :])\n        if sum_weight > 0:\n            heuristics[i] = prize[i] / sum_weight\n        else:\n            heuristics[i] = float('-inf')\n    return heuristics_matrix",
          "objective": -22.42564,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = weight.shape\n    heuristics = np.zeros(n)\n    for i in range(n):\n        if np.all(weight[i] <= 1):\n            heuristics[i] = np.sum(prize[i] * weight[i])\n    return heuristics_matrix",
          "objective": -22.41526,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros((n, m))\n    for i in range(n):\n        heuristics_matrix[i, :] = prize[i] / np.sum(weight[:, i])\n    return heuristics_matrix",
          "objective": -22.41383,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        ratio = prize[i] / (1 + weight[i, :].max())\n        heuristics[i] = np.exp(ratio)\n    return heuristics_matrix",
          "objective": -22.41245,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = weight.shape\n    heuristics = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight <= 1:\n            heuristics[i] = np.sum(prize[i])\n    return heuristics_matrix",
          "objective": -22.41029,
          "other_inf": null
     },
     {
          "algorithm": "brace\nAlgorithm description: The new algorithm evaluates items based on their total prize and average weight, penalizing items with a high ratio of average weight to total prize.\n```\n",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        avg_weight = np.sum(weight[i]) / m\n        heuristics[i] = prize[i] / avg_weight if avg_weight != 0 else 0\n        if np.all(weight[i] == 0):\n            heuristics[i] = -1.0\n    return heuristics_matrix",
          "objective": -22.38902,
          "other_inf": null
     }
]