[
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_ratio = 0\n        for j in range(m):\n            ratio = prize[i] / weight[i, j]\n            if ratio > max_ratio:\n                max_ratio = ratio\n        heuristics[i] = max_ratio\n    return heuristics_matrix",
          "objective": -22.47585,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        for j in range(m):\n            if weight[i, j] <= 1:\n                heuristics[i] += prize[i] / weight[i, j]\n    return heuristics_matrix",
          "objective": -22.47002,
          "other_inf": null
     },
     {
          "algorithm": "\n        n, m = prize.shape[0], weight.shape[1]\n        heuristics = np.zeros(n)\n        for i in range(n):\n            heuristics[i] = np.prod(prize[:i+1]) / np.prod(prize[:i+1][weight[:i+1, 0] <= 1])\n        return heuristics\n    ",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    {\n        n, m = prize.shape[0], weight.shape[1]\n        heuristics = np.zeros(n)\n        for i in range(n):\n            heuristics[i] = np.prod(prize[:i+1]) / np.prod(prize[:i+1][weight[:i+1, 0] <= 1])\n        return heuristics_matrix",
          "objective": -22.46319,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros((n, m))\n    for i in range(n):\n        for j in range(m):\n            heuristics_matrix[i, j] = (prize[i] / weight[i, j])\n    return heuristics_matrix",
          "objective": -22.45958,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = weight.shape\n    heuristics = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight <= 1:\n            heuristics[i] = np.sum(prize[i])\n    return heuristics_matrix",
          "objective": -22.41029,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.array([sum(prize[:i+1] * weight[:i+1]) - sum(prize[:i+1]) for i in range(n)])\n    return heuristics_matrix",
          "objective": -22.3263,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        if np.all(weight[i] <= 1):\n            heuristics[i] = np.sum(prize) / np.sum(weight)\n    return heuristics_matrix",
          "objective": -22.10072,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        sum_weight = weight[i].sum()\n        heuristics[i] = prize[i] / sum_weight if sum_weight > 0 else 0\n    return heuristics_matrix",
          "objective": -21.92393,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        heuristics[i] = prize[i] / np.sum(weight[i])\n    return heuristics_matrix",
          "objective": -21.14216,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        for j in range(m):\n            heuristics[i] += prize[i] / weight[i, j]\n    heuristics_matrix = np.where(weight.sum(axis=1) == 1, heuristics, 0)\n    return heuristics_matrix",
          "objective": -18.69218,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_promising = -np.inf\n        for j in range(m):\n            if weight[i, j] == 1:\n                promising = prize[i] / weight[i, j]\n                if promising > max_promising:\n                    max_promising = promising\n        heuristics[i] = max_promising\n    return heuristics_matrix",
          "objective": -17.41747,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        for j in range(m):\n            heuristics[i] += prize[i] / weight[i, j]\n    heuristics_matrix = np.argsort(-heuristics)\n    return heuristics_matrix",
          "objective": -16.88937,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        for j in range(m):\n            if weight[i, j] == 1:\n                heuristics[i] += prize[i] / weight[i, j]\n    return heuristics_matrix",
          "objective": Infinity,
          "other_inf": null
     }
]