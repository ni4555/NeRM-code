[
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros((n, m))\n    for i in range(n):\n        for j in range(m):\n            heuristics_matrix[i, j] = np.log(prize[i]) / (weight[i, j] * np.log(n))\n    return heuristics_matrix",
          "objective": -22.4779,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_ratio = 0\n        for j in range(m):\n            ratio = prize[i] / weight[i, j]\n            if ratio > max_ratio:\n                max_ratio = ratio\n        heuristics[i] = max_ratio\n    return heuristics_matrix",
          "objective": -22.47585,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        for j in range(m):\n            if weight[i, j] <= 1:\n                heuristics[i] += prize[i] / weight[i, j]\n    return heuristics_matrix",
          "objective": -22.47002,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        if np.all(weight[i] <= 1):\n            heuristics[i] = np.sum(prize) / np.sum(weight) - np.sum(prize) / (np.sum(weight) - weight[i])\n    return heuristics_matrix",
          "objective": -22.46655,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = weight.shape\n    heuristics = np.zeros(n)\n    for i in range(n):\n        if np.all(weight[i] <= 1):\n            heuristics[i] = np.mean(prize[i] / weight[i])\n    return heuristics_matrix",
          "objective": -22.46453,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        sum_weight = np.sum(weight[i] == 1)\n        heuristics[i] = prize[i] / sum_weight if sum_weight > 0 else 0\n    return heuristics_matrix",
          "objective": -22.46376,
          "other_inf": null
     },
     {
          "algorithm": "\n        n, m = prize.shape[0], weight.shape[1]\n        heuristics = np.zeros(n)\n        for i in range(n):\n            heuristics[i] = np.prod(prize[:i+1]) / np.prod(prize[:i+1][weight[:i+1, 0] <= 1])\n        return heuristics\n    ",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    {\n        n, m = prize.shape[0], weight.shape[1]\n        heuristics = np.zeros(n)\n        for i in range(n):\n            heuristics[i] = np.prod(prize[:i+1]) / np.prod(prize[:i+1][weight[:i+1, 0] <= 1])\n        return heuristics_matrix",
          "objective": -22.46319,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros((n, m))\n    for i in range(n):\n        for j in range(m):\n            heuristics_matrix[i, j] = (prize[i] / weight[i, j])\n    return heuristics_matrix",
          "objective": -22.45958,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    cumulative_weight = np.cumsum(weight, axis=1)\n    probabilities = cumulative_weight.sum(axis=1) / cumulative_weight\n    heuristics = prize * probabilities\n    return heuristics_matrix",
          "objective": -22.45277,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        sum_weight = np.sum(weight[i, :])\n        if sum_weight > 0:\n            heuristics[i] = prize[i] / sum_weight\n        else:\n            heuristics[i] = float('-inf')\n    return heuristics_matrix",
          "objective": -22.42564,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = weight.shape\n    heuristics = np.zeros(n)\n    for i in range(n):\n        if np.all(weight[i] <= 1):\n            heuristics[i] = np.sum(prize[i] * weight[i])\n    return heuristics_matrix",
          "objective": -22.41526,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = weight.shape\n    heuristics = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        if total_weight <= 1:\n            heuristics[i] = np.sum(prize[i])\n    return heuristics_matrix",
          "objective": -22.41029,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros((n, m))\n    for i in range(n):\n        heuristics_matrix[i, 0] = (np.log(prize[i] + 1)) / weight[i][0]\n        if m > 1:\n            heuristics_matrix[i, 1:] = weight[i][1:] * (1 - heuristics_matrix[i, 0])\n    return heuristics_matrix",
          "objective": -22.34197,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.array([sum(prize[:i+1] * weight[:i+1]) - sum(prize[:i+1]) for i in range(n)])\n    return heuristics_matrix",
          "objective": -22.3263,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        sum_weight = np.sum(weight[i] == 1)\n        heuristics[i] = np.prod((prize[i] / (sum_weight + 1)) for _ in range(m)) if sum_weight > 0 else 0\n    return heuristics_matrix",
          "objective": -22.2964,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        if np.all(weight[i] <= 1):\n            heuristics[i] = np.sum(prize) / np.sum(weight)\n    return heuristics_matrix",
          "objective": -22.10072,
          "other_inf": null
     },
     {
          "algorithm": "Compute the probability of inclusion for each item based on their cumulative weight.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    cumulative_weight = np.cumsum(weight, axis=1)\n    probabilities = cumulative_weight.sum(axis=1) / cumulative_weight\n    heuristics = prize * probabilities\n    return heuristics_matrix",
          "objective": -21.99724,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_ratio = 0\n        for j in range(m):\n            ratio = prize[i] / weight[i, j]\n            max_ratio = max(max_ratio, ratio)\n        heuristics[i] = max_ratio\n    return heuristics_matrix",
          "objective": -21.97856,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        sum_weight = weight[i].sum()\n        heuristics[i] = prize[i] / sum_weight if sum_weight > 0 else 0\n    return heuristics_matrix",
          "objective": -21.92393,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        if np.all(weight[i] <= 1):\n            heuristics[i] = (np.sum(prize) - np.sum(prize[i])) / (np.sum(weight) - np.sum(weight[i]))\n    return heuristics_matrix",
          "objective": -21.69345,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        heuristics[i] = prize[i] / np.sum(weight[i])\n    return heuristics_matrix",
          "objective": -21.14216,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_ratio = 0\n        for j in range(m):\n            ratio = prize[i] / weight[i][j]\n            if ratio > max_ratio:\n                max_ratio = ratio\n        heuristics[i] = max_ratio / (n + 1)\n    heuristics_matrix = np.argsort(-heuristics)\n    return heuristics_matrix",
          "objective": -20.39405,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        for j in range(m):\n            heuristics[i] += prize[i] / weight[i, j]\n    heuristics_matrix = np.where(weight.sum(axis=1) == 1, heuristics, 0)\n    return heuristics_matrix",
          "objective": -18.69218,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        item_proportion = prize[i] / weight[i].sum()\n        for j in range(m):\n            heuristics[i] += item_proportion / weight[i, j]\n    heuristics_matrix = np.where(weight.sum(axis=1) == 1, heuristics, 0)\n    return heuristics_matrix",
          "objective": -18.36047,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_promising = -np.inf\n        for j in range(m):\n            if weight[i, j] == 1:\n                promising = prize[i] / weight[i, j]\n                if promising > max_promising:\n                    max_promising = promising\n        heuristics[i] = max_promising\n    return heuristics_matrix",
          "objective": -17.41747,
          "other_inf": null
     },
     {
          "algorithm": "Normalize each item's prize per unit weight in each dimension, then combine the normalized values by their geometric mean, and rank items accordingly.",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    normalized_ranks = np.zeros(n)\n    for i in range(n):\n        for j in range(m):\n            normalized_weights = prize[i] / weight[i][j]\n        normalized_ranks[i] = np.prod(normalized_weights)\n    sorted_indices = np.argsort(-normalized_ranks)\n    heuristics_matrix = np.argsort(-sorted_indices)\n    return heuristics_matrix",
          "objective": -17.30144,
          "other_inf": null
     },
     {
          "algorithm": "\n    \"Apply the \"Best Weighted Ratio\" method for each dimension and rank items by their maximum weighted ratio.\"\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    max_weighted_ratios = np.zeros(n)\n    for j in range(m):\n        if np.any(weight[:, j] == 0):\n            max_ratio = np.nanmax(prize / (weight[:, j] / np.nanmax(weight[:, j])))\n        else:\n            max_ratio = np.nanmax(prize / weight[:, j])\n        max_weighted_ratios += max_ratio * weight[:, j]\n    max_weighted_ratios = max_weighted_ratios / np.sum(weight)\n    sorted_indices = np.argsort(max_weighted_ratios)[::-1]\n    heuristics_matrix = np.argsort(-sorted_indices)\n    return heuristics_matrix",
          "objective": -17.19515,
          "other_inf": null
     },
     {
          "algorithm": "\nImprove the heuristic function by considering the weighted sum of item ratios and using the average ratio to assess item promise.\n",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    weighted_ratios = np.zeros(n)\n    for i in range(n):\n        weighted_sum = 0\n        for j in range(m):\n            ratio = prize[i] / weight[i][j]\n            weighted_sum += ratio\n        weighted_ratios[i] = weighted_sum / (m + 1)\n    heuristics_matrix = np.argsort(-weighted_ratios)\n    return heuristics_matrix",
          "objective": -17.02855,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        for j in range(m):\n            heuristics[i] += prize[i] / weight[i, j]\n    heuristics_matrix = np.argsort(-heuristics)\n    return heuristics_matrix",
          "objective": -16.88937,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        avg_weight = np.mean(weight[i])\n        heuristics[i] = (prize[i] / avg_weight) * (1 / (n + 1))\n    heuristics_matrix = np.argsort(-heuristics)\n    return heuristics_matrix",
          "objective": -16.76707,
          "other_inf": null
     }
]