[
    {
        "objective": -22.47896,
        "code": "def heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        total_weight = np.sum(weight[i])\n        total_prize = np.sum(prize[i])\n        heuristics[i] = total_prize / total_weight\n    return heuristics_matrix",
        "algorithm": "```"
    },
    {
        "objective": -22.4779,
        "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics_matrix = np.zeros((n, m))\n    for i in range(n):\n        for j in range(m):\n            heuristics_matrix[i, j] = np.log(prize[i]) / (weight[i, j] * np.log(n))\n    return heuristics_matrix",
        "algorithm": "```"
    },
    {
        "objective": -22.47585,
        "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        max_ratio = 0\n        for j in range(m):\n            ratio = prize[i] / weight[i, j]\n            if ratio > max_ratio:\n                max_ratio = ratio\n        heuristics[i] = max_ratio\n    return heuristics_matrix",
        "algorithm": "```"
    },
    {
        "objective": -22.47555,
        "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        ratio = prize[i] / np.sum(weight[i])\n        heuristics[i] = 1 / (1 + ratio)\n    return heuristics_matrix",
        "algorithm": "```"
    },
    {
        "objective": -22.47002,
        "code": "import numpy as np\n\ndef heuristics_v2(prize, weight):\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n    for i in range(n):\n        for j in range(m):\n            if weight[i, j] <= 1:\n                heuristics[i] += prize[i] / weight[i, j]\n    return heuristics_matrix",
        "algorithm": "```"
    }
]