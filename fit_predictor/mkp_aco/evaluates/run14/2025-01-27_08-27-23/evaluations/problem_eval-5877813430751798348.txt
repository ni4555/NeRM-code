import numpy as np

def heuristics_v2(prize, weight):
    n, m = prize.shape[0], weight.shape[0]
    heuristics = np.zeros(n)
    
    # Initialize the ratio of prize to weight for each item in each dimension
    ratio = np.zeros((n, m))
    for i in range(n):
        ratio[i] = prize[i] / weight[i]
    
    # Sort items based on their ratio of prize to weight at each dimension in descending order
    for d in range(m):
        sorted_indices = np.argsort(ratio[:, d])[::-1]
        for i in range(n):
            item_index = sorted_indices[i]
            # If the total weight of the selected items at this dimension does not exceed the constraint, update the heuristic
            if np.sum(weight[item_index]) <= 1:
                heuristics[item_index] = ratio[item_index, d]
                break  # Move to the next dimension after selecting the item with the best ratio
    
    return heuristics_matrix
