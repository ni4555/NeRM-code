import numpy as np

def heuristics_v2(prize, weight):
    n, m = weight.shape
    heuristics = np.zeros(n)
    
    # Global sampling to estimate the potential profit of each item
    samples = np.random.rand(n)
    global_potentials = np.dot(prize, samples) / np.dot(weight, samples)
    
    # Local search by trying to swap each item with the highest profit item in its dimension
    for i in range(n):
        best_swap = np.argmax(prize)
        best_gain = prize[best_swap] / weight[best_swap][i]
        for j in range(n):
            if i != j and weight[j][i] == 1:
                potential_gain = prize[j] / weight[j][i]
                if potential_gain > best_gain:
                    best_swap = j
                    best_gain = potential_gain
        heuristics[i] = best_gain + global_potentials[i]
    
    return heuristics_matrix
