import numpy as np

def heuristics_v2(prize, weight):
    n, m = prize.shape[0], weight.shape[1]
    heuristics = np.zeros(n)
    cumulative_weight = np.zeros(n)
    cumulative_prize = np.zeros(n)
    current_index = 0
    for item_index in np.argsort(-prize):
        ratio = prize[item_index]
        if cumulative_weight[current_index] + weight[item_index, 0] <= 1:
            cumulative_prize[current_index] += ratio
            cumulative_weight[current_index] += weight[item_index, 0]
            heuristics[item_index] = cumulative_prize[current_index] / cumulative_weight[current_index]
            if cumulative_prize[current_index] / cumulative_weight[current_index] > heuristics[current_index]:
                current_index = item_index
        else:
            cumulative_prize[item_index] = 0
            cumulative_weight[item_index] = weight[item_index, 0]
            heuristics[item_index] = cumulative_prize[item_index] / cumulative_weight[item_index]
            current_index = item_index
    return heuristics_matrix
