import numpy as np

def heuristics_v2(prize, weight):
    n, m = prize.shape[0], weight.shape[1]
    if m != 1:
        raise ValueError("Each item should have a single weight dimension with constraint fixed to 1.")
    
    heuristics = np.zeros(n)
    for i in range(n):
        # Initialize the probabilities to a uniform distribution
        probabilities = np.ones(n) / n
        # Iterate for a certain number of steps to allow the system to evolve
        for _ in range(100):
            # Calculate the probabilities based on the current heuristics
            new_probabilities = np.copy(probabilities)
            for j in range(n):
                if probabilities[j] > 0:
                    # Use a simple exponential decay function to determine the next probability
                    new_probabilities[j] = probabilities[j] * np.exp(-prize[j] / weight[j])
            # Normalize the new probabilities
            new_probabilities /= np.sum(new_probabilities)
            probabilities = new_probabilities
        # Sum the probabilities for the item to estimate its heuristics
        heuristics[i] = np.sum(probabilities)
    
    return heuristics_matrix
