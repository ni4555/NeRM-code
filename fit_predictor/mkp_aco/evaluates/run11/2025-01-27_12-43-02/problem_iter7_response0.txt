```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Emphasize high-scores
    emphasized_combined_score = combined_score * (1 + 0.1 * np.argsort(-combined_score))
    
    # Minimize sparsity by setting a threshold
    threshold = np.mean(emphasized_combined_score)
    heuristics = np.where(emphasized_combined_score >= threshold, emphasized_combined_score, 0)
    
    # Refine selection by further normalizing scores
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
