```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Calculate normalized weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate score based on normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate ratio of prize to weight (with small epsilon to avoid division by zero)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate combined score considering both score and ratio
    combined_score = score * ratio
    
    # Normalize the combined scores to create a heuristic
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Adjust sparsity by setting lower heuristics to zero
    sparsity_threshold = np.quantile(importance_normalized, 0.1)  # 10% of the sorted values are set to zero
    heuristics = np.where(importance_normalized > sparsity_threshold, importance_normalized, 0)
    
    # Dynamically tune the threshold for adaptability
    dynamic_threshold = np.max(importance_normalized) * 0.5  # 50% of the maximum heuristic
    heuristics = np.where(importance_normalized > dynamic_threshold, importance_normalized, 0)
    
    return heuristics
```
