```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights based on the sum of weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights, avoiding division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Combine score and ratio to get a more balanced importance measure
    combined_importance = (score + ratio) / 2
    
    # Normalize the importance scores for comparison
    max_importance = np.max(combined_importance)
    min_importance = np.min(combined_importance)
    normalized_importance = (combined_importance - min_importance) / (max_importance - min_importance)
    
    # Adjust for sparsity by adding a small positive value to avoid zero heuristics
    heuristics = normalized_importance + 1e-8
    
    # Introduce randomness to encourage exploration, but avoid extreme values
    random_perturbation = np.random.rand(*heuristics.shape) * 0.05 - 0.025
    heuristics = np.clip(heuristics + random_perturbation, 0, 1)
    
    return heuristics
```
