```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]

    # Calculate importance based on ratio of prize to average weight
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    importance = np.sum(prize * normalized_weights, axis=1) * ratio

    # Normalize importance scores
    importance_normalized = importance / np.sum(importance)

    # Calculate diversity score based on standard deviation of normalized weights
    diversity_score = np.std(normalized_weights, axis=1)

    # Combine importance and diversity with a tunable balance factor
    balance_factor = 0.5  # This factor can be tuned
    combined_score = importance_normalized * balance_factor + diversity_score * (1 - balance_factor)

    # Use dynamic percentile threshold based on the distribution of combined scores
    threshold_percentile = 75  # Example percentile
    threshold = np.percentile(combined_score, threshold_percentile)

    # Apply thresholding to determine the heuristics
    heuristics = (combined_score >= threshold).astype(float)

    # Introduce randomness for exploration
    random_factor = np.random.rand(n)
    exploration_factor = 0.1  # Exploration factor can be tuned
    exploration_threshold = 0.01  # Threshold below which randomness is minimal
    heuristics = np.where(combined_score < exploration_threshold, random_factor, heuristics)

    return heuristics
```
