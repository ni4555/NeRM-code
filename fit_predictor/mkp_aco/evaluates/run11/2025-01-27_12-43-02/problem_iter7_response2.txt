```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Emphasize high-scores and minimize sparsity
    threshold = np.percentile(importance_normalized, 95)
    heuristics = importance_normalized >= threshold
    
    # Refine selection by applying a domain insight
    # For example, we could give a slight boost to items with a high prize-to-weight ratio
    heuristics *= (combined_score > threshold)
    
    return heuristics
```
