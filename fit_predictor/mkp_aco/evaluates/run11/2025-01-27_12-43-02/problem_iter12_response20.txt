```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio

    # Calculate a dynamic threshold based on the interquartile range (IQR)
    Q1 = np.percentile(combined_score, 25)
    Q3 = np.percentile(combined_score, 75)
    IQR = Q3 - Q1
    threshold = Q1 + 1.5 * IQR  # Use the 1.5*IQR rule to determine the lower bound of the IQR

    # Normalize the combined scores to ensure they can be compared across different items
    importance_normalized = combined_score / np.max(combined_score)

    # Apply sparsity to balance simplicity and performance
    sparsity_factor = 1 / (np.sum(importance_normalized > threshold) + 1e-8)
    importance_normalized = importance_normalized * sparsity_factor

    # Binary thresholding to produce heuristics
    heuristics = (importance_normalized > threshold).astype(float)

    return heuristics
```
