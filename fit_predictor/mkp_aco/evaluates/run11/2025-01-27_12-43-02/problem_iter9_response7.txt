```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Calculate normalized weights based on their average
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Score based on weighted average prize per weight dimension
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate a diversity factor to avoid selecting similar items
    diversity_factor = 1 / np.sum(weight, axis=1) + 1e-8
    
    # Normalize scores by balancing diversity and score
    normalized_score = score * diversity_factor
    
    # Adjust scores to minimize sparsity by ensuring some minimum value
    adjusted_normalized_score = np.maximum(normalized_score, 1 / n)
    
    # Normalize adjusted scores for consistency
    importance_normalized = adjusted_normalized_score / np.sum(adjusted_normalized_score)
    
    return importance_normalized
```
