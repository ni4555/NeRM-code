```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate the combined score using both score and ratio
    combined_score = np.sum(prize * normalized_weights, axis=1) * (prize / (np.sum(weight, axis=1) + 1e-8))
    # Normalize the combined scores to create a probability distribution
    probability_distribution = combined_score / np.sum(combined_score)
    # Apply sparsity by setting a dynamic threshold
    threshold = np.percentile(probability_distribution, 90)  # 90th percentile as a dynamic threshold
    heuristics = (probability_distribution >= threshold).astype(float)
    
    return heuristics
```
