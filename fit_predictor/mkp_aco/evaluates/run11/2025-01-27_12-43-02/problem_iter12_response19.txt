```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Non-linear transformation to emphasize high importance items
    sparsity_factor = np.exp(-np.abs(importance_normalized - np.mean(importance_normalized)))
    
    # Adjust sparsity by adding a multiplicative factor to emphasize high-scores
    adjusted_importance = importance_normalized * sparsity_factor
    
    # Normalize the adjusted importance scores
    heuristics = adjusted_importance / np.sum(adjusted_importance)
    
    return heuristics
```
