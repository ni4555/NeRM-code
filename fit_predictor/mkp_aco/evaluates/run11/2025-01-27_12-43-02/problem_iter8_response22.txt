```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights across dimensions for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate a balanced score that combines the item's total prize and weight ratio
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    # Apply domain knowledge: use a percentile threshold that considers both prize and weight ratio
    percentile_threshold = np.percentile(combined_score, 90)  # Threshold based on 90th percentile
    # Sparsify the combined score based on the percentile threshold
    sparsified_score = np.where(combined_score > percentile_threshold, combined_score, 0)
    # Normalize and scale the sparsified scores to be between 0 and 1
    max_score = np.max(sparsified_score)
    min_score = np.min(sparsified_score)
    normalized_sparsified_score = (sparsified_score - min_score) / (max_score - min_score)
    # Apply a balance factor to ensure the heuristic doesn't heavily favor any one item type
    balance_factor = np.max(normalized_sparsified_score) / np.mean(normalized_sparsified_score)
    normalized_sparsified_score *= balance_factor
    return normalized_sparsified_score
```
