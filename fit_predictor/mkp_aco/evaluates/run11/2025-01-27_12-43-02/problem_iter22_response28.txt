```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights to create a diversity score
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    diversity_score = np.std(normalized_weights, axis=1)

    # Calculate importance based on the ratio of prize to total weight
    total_weight = np.sum(weight, axis=1)
    importance = prize / (total_weight + 1e-8)

    # Combine importance and diversity to create a heuristic score
    combined_score = importance * diversity_score

    # Normalize the combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)

    # Calculate a dynamic threshold based on the distribution of combined scores
    threshold = np.percentile(combined_score_normalized, 90)

    # Create a heuristic score that encourages selection of items with high combined score
    heuristics = np.where(combined_score_normalized >= threshold, 1.0, 0.0)

    # Introduce a small random factor to maintain some level of exploration
    random_factor = np.random.rand(n)
    heuristics *= (random_factor > 0.1)

    # Adjust the heuristic scores based on the sparsity level
    sparsity_threshold = np.percentile(combined_score_normalized, 95)
    heuristics[combined_score_normalized < sparsity_threshold] = 0.0

    # Adjust the random factor to balance exploration and exploitation
    heuristics *= np.random.rand(n) * 0.9 + 0.1

    return heuristics
```
