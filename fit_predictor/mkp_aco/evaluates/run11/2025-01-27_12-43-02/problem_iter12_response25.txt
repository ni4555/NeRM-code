```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights and calculate the score for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to total weight for each item
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    
    # Calculate sparsity for each item
    sparsity = 1 - (np.count_nonzero(weight, axis=1) / weight.shape[0])
    
    # Combine score, ratio, and sparsity into a single importance metric
    importance = (score * ratio) * sparsity
    
    # Normalize the importance scores to ensure they can be compared across different items
    max_importance = np.max(importance)
    min_importance = np.min(importance)
    importance_normalized = (importance - min_importance) / (max_importance - min_importance)
    
    # Apply a percentile threshold for item selection
    threshold = np.percentile(importance_normalized, 90)  # Use the 90th percentile as a threshold
    
    # Create heuristics based on the threshold
    heuristics = (importance_normalized >= threshold).astype(float)
    
    return heuristics
```
