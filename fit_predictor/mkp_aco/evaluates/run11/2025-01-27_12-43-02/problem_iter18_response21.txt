```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights based on the sum of weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the weight ratio for each item
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    
    # Combine relevance and diversity by using both score and the inverse of the weighted standard deviation
    diversity = np.std(normalized_weights, axis=1)
    combined_diversity = score / diversity
    
    # Normalize the combined relevance and diversity scores
    max_combined = np.max(combined_diversity)
    min_combined = np.min(combined_diversity)
    importance_normalized = (combined_diversity - min_combined) / (max_combined - min_combined)
    
    # Apply sparsity by using a threshold on the normalized importance scores
    threshold = np.percentile(importance_normalized, 90)  # Use the 90th percentile as a threshold
    heuristics = (importance_normalized >= threshold).astype(float)
    
    # Refine the binary conversion
    heuristics = np.where(heuristics >= 0.5, 1.0, 0.0)
    
    return heuristics
```
