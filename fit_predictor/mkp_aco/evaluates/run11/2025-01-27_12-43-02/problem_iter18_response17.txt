```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    combined_importance = score * ratio
    importance_normalized = combined_importance / np.sum(combined_importance)
    diversity_score = np.std(normalized_weights, axis=1)
    combined_score = importance_normalized * diversity_score
    threshold = np.std(combined_score)
    heuristics = (combined_score >= threshold).astype(float)
    sparsity_param = np.percentile(combined_score, 90)
    heuristics[combined_score < sparsity_param] = 0
    return heuristics
```
