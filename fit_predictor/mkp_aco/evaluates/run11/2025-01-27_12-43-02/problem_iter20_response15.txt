```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]

    # Calculate importance based on the product of score and the ratio of prize to average weight
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    importance = score * ratio

    # Normalize importance scores
    importance_normalized = importance / np.sum(importance)

    # Calculate diversity score based on the variance of normalized weights
    diversity_score = np.var(normalized_weights, axis=1)

    # Combine importance and diversity using a dynamic balance factor
    balance_factor = 0.6  # This factor can be tuned dynamically if needed
    combined_score = importance_normalized * balance_factor + diversity_score * (1 - balance_factor)

    # Refine thresholds dynamically
    threshold = np.percentile(combined_score, 70)  # Dynamic percentile threshold

    # Apply thresholding to determine the heuristics
    heuristics = (combined_score >= threshold).astype(float)

    # Control exploration-exploitation balance by introducing a random factor
    random_factor = np.random.rand(n)
    exploration_exploitation_balance = 0.2  # This factor can be tuned
    heuristics = heuristics * (1 - exploration_exploitation_balance) + random_factor * exploration_exploitation_balance

    return heuristics
```
