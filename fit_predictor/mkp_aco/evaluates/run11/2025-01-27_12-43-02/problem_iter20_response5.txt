```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Calculate the score for each item as the ratio of prize to the sum of weights
    score = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero

    # Calculate diversity score as the standard deviation of the normalized weights
    diversity_score = np.std(weight, axis=1) / np.linalg.norm(weight, axis=1)

    # Combine score and diversity to form a heuristic
    heuristics = score * diversity_score

    # Normalize the heuristic scores
    heuristics /= np.sum(heuristics)

    # Apply dynamic thresholding based on the maximum heuristic score
    threshold = np.max(heuristics)
    heuristics[heuristics < threshold] = 0

    return heuristics
```
