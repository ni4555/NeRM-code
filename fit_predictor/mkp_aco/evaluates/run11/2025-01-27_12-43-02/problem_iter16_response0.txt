```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights based on the sum of weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights, avoiding division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate combined importance using score and ratio
    combined_importance = score * ratio
    
    # Normalize the importance scores for better comparison
    min_combined_importance = np.min(combined_importance)
    max_combined_importance = np.max(combined_importance)
    normalized_importance = (combined_importance - min_combined_importance) / (max_combined_importance - min_combined_importance)
    
    # Set a threshold for sparsity, considering a small range of values
    threshold = np.percentile(normalized_importance, 90)
    
    # Create heuristics array based on normalized importance
    heuristics = (normalized_importance >= threshold).astype(float)
    
    return heuristics
```
