```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate the normalized weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate the score based on the normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    # Calculate the score-to-weight ratio to balance global and local features
    score_weight_ratio = score / np.linalg.norm(weight, axis=1)
    # Avoid dominance assumptions by considering the average score-to-weight ratio
    sparsity_threshold = np.mean(score_weight_ratio)
    # Use domain knowledge to add a sparsity component
    sparsity_component = (np.sum(weight, axis=1) < m / 2) * 1.5
    # Combine the score-to-weight ratio and sparsity component
    combined_heuristics = score_weight_ratio + sparsity_component
    # Utilize a multi-objective evaluation by considering both the score-to-weight ratio and sparsity
    combined_score = np.where(combined_heuristics > sparsity_threshold, combined_heuristics, 0)
    return combined_score
```
