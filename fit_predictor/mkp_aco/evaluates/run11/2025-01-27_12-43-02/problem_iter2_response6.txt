```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    # Calculate the normalized weight for each dimension
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate the score based on the normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    # Calculate the ratio of prize to the sum of weights with a small epsilon to avoid division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    # Combine the score and ratio
    combined_score = score * ratio
    # Apply data-driven sparsity thresholding
    sparsified_score = np.where(combined_score > np.mean(combined_score), combined_score, 0)
    # Use multiple attributes to create a heuristic value for each item
    heuristic_value = sparsified_score + score / np.linalg.norm(weight, axis=1)
    # Apply a thresholding mechanism to filter out the least promising items
    sparsity_threshold = np.mean(heuristic_value)
    heuristics = heuristic_value > sparsity_threshold
    return heuristics.astype(int)
```
