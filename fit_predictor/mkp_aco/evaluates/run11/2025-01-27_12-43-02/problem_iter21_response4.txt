```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights to a 0-1 scale for each dimension
    normalized_weights = weight / np.linalg.norm(weight, axis=1)[:, None]
    # Calculate the importance of each item based on its normalized weight
    importance = np.sum(normalized_weights, axis=1)
    # Calculate the normalized prize to weight ratio
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    # Combine importance and ratio to get a combined score
    combined_score = importance * ratio
    # Normalize the combined score to get the heuristics
    heuristics = combined_score / np.sum(combined_score)
    # Apply a diversity heuristic by ensuring no two items have the same heuristic value
    diversity_heuristics = np.argsort(np.argsort(heuristics))
    # Sparsify the heuristics by setting similar values to zero
    sparsified_heuristics = heuristics * (np.abs(np.diff(diversity_heuristics)) > 1)
    return sparsified_heuristics
```
