```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the diversity score, which is the ratio of the maximum normalized weight to the item's normalized weight
    diversity = np.max(normalized_weights, axis=1) / normalized_weights
    
    # Combine the prize value and diversity score
    combined_score = prize * diversity
    
    # Normalize the combined scores to ensure they can be compared across different items
    max_combined = np.max(combined_score)
    min_combined = np.min(combined_score)
    importance_normalized = (combined_score - min_combined) / (max_combined - min_combined)
    
    # Apply sparsity by using a threshold
    threshold = np.percentile(importance_normalized, 90)  # Use the 90th percentile as a threshold
    heuristics = (importance_normalized >= threshold).astype(float)
    
    # Adjust the heuristics scores to be more binary (0 or 1)
    heuristics[heuristics > 0.5] = 1
    heuristics[heuristics <= 0.5] = 0
    
    return heuristics
```
