```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights by their sum to ensure they are comparable
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]

    # Calculate the importance score for each item based on the ratio of prize to normalized weight
    importance_score = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the diversity score based on the standard deviation of normalized weights
    diversity_score = np.std(normalized_weights, axis=1)

    # Combine importance and diversity scores using a weighted sum
    combined_score = importance_score * 0.7 + diversity_score * 0.3

    # Normalize the combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)

    # Dynamic threshold based on the standard deviation of the normalized scores
    threshold = np.std(combined_score_normalized)

    # Apply thresholding to determine the heuristics
    heuristics = (combined_score_normalized >= threshold).astype(float)

    # Incorporate sparsity to enhance diversity by setting low combined_score_normalized to 0
    sparsity_threshold = np.percentile(combined_score_normalized, 90)
    heuristics[combined_score_normalized < sparsity_threshold] = 0

    # Add a heuristic that favors items with a higher proportion of unique weights
    uniqueness_score = np.unique(normalized_weights, axis=0).shape[0] / normalized_weights.shape[0]
    heuristics *= uniqueness_score

    return heuristics
```
