```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Incorporate diversity by considering the spread of the normalized weights
    diversity_score = np.std(normalized_weights, axis=1)
    importance_diversified = importance_normalized * diversity_score
    
    # Sparsify by setting a threshold
    threshold = np.percentile(importance_diversified, 95)  # 95th percentile as an example
    heuristics = (importance_diversified >= threshold).astype(float)
    
    return heuristics
```
