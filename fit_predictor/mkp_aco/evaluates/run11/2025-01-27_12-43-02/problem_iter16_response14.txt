```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Balance relevance and diversity
    relevance = score / np.sum(score)
    diversity = 1 / np.linalg.norm(normalized_weights, axis=1)
    
    # Normalize both relevance and diversity
    max_relevance = np.max(relevance)
    min_relevance = np.min(relevance)
    relevance_normalized = (relevance - min_relevance) / (max_relevance - min_relevance)
    
    max_diversity = np.max(diversity)
    min_diversity = np.min(diversity)
    diversity_normalized = (diversity - min_diversity) / (max_diversity - min_diversity)
    
    # Combine relevance and diversity scores
    combined = relevance_normalized * diversity_normalized
    
    # Apply sparsity by using a threshold on the combined scores
    threshold = np.percentile(combined, 95)  # Use the 95th percentile as a threshold
    heuristics = (combined >= threshold).astype(float)
    
    return heuristics
```
