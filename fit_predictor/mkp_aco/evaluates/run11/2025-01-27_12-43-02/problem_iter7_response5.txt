```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Emphasize high-scores
    high_score_threshold = np.percentile(score, 95)
    score[score < high_score_threshold] = 0
    
    # Normalize scores
    score /= np.sum(score)
    
    # Adapt thresholds based on the distribution of weights
    weight_threshold = np.percentile(np.sum(weight, axis=1), 90)
    score[np.sum(weight, axis=1) > weight_threshold] *= 1.5
    
    # Minimize sparsity by ensuring there are always some items selected
    if np.sum(score) == 0:
        score[np.argmax(score)] = 1
    
    return score
```
