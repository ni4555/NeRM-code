```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Calculate multiple sparsity thresholds based on percentiles
    sparsity_thresholds = np.percentile(importance_normalized, np.linspace(0, 100, 5))
    
    # Create heuristics based on thresholds
    heuristics = np.zeros_like(importance_normalized)
    for threshold in sparsity_thresholds:
        heuristics += (importance_normalized > threshold).astype(float)
    
    # Normalize heuristics to ensure maximum is 1
    heuristics /= np.max(heuristics)
    
    # Ensure diversity by adding a small random noise to the heuristics
    noise = np.random.rand(*importance_normalized.shape) * 0.1
    heuristics = (heuristics + noise) / (1 + np.abs(noise))
    
    # Adjust heuristics to reflect the balance between score and ratio
    adjusted_heuristics = heuristics * (1 + (score / np.sum(score)))
    
    # Apply a final sparsity to promote diversity
    final_threshold = np.mean(adjusted_heuristics)
    final_heuristics = (adjusted_heuristics >= final_threshold).astype(float)
    
    return final_heuristics.astype(int)
```
