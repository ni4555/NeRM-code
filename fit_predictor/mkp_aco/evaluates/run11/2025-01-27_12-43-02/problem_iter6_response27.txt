```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Use the 90th percentile as a threshold for the initial sparsity
    percentile_threshold = np.percentile(combined_score, 90)
    sparsified_score = np.where(combined_score > percentile_threshold, combined_score, 0)
    
    # Use the mean of the remaining scores as a second threshold
    mean_score = np.mean(combined_score[combined_score > 0])
    final_sparsified_score = np.where(sparsified_score > mean_score, sparsified_score, 0)
    
    return final_sparsified_score
```
