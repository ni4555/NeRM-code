```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    value_to_weight_ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    diversity_score = np.sum(weight * normalized_weights, axis=1)
    combined_score = value_to_weight_ratio * diversity_score
    normalized_combined_score = (combined_score - np.min(combined_score)) / (np.max(combined_score) - np.min(combined_score))
    sparsified_score = np.where(normalized_combined_score > 0.5, combined_score, 0)
    return sparsified_score
```
