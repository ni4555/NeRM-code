```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate normalized weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate score based on normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    # Calculate ratio of prize to total weight per item, adding a small epsilon to avoid division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    # Combine score and ratio into a single heuristic
    combined_score = score * ratio
    # Normalize the combined score to account for diversity and importance
    importance_normalized = combined_score / np.sum(combined_score)
    # Introduce randomness and diversity by adding a random perturbation
    random_perturbation = np.random.rand(len(importance_normalized))
    heuristics = importance_normalized + random_perturbation
    # Ensure the heuristics sum to 1 by normalizing
    heuristics /= np.sum(heuristics)
    # Set less promising items to zero to sparsify the heuristics
    heuristics[heuristics < 0.1] = 0
    return heuristics
```
