```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    # Introduce randomness by adding a random component to the score
    random_component = np.random.rand(score.shape[0])[:, None]
    combined_score = score + random_component
    # Normalize combined score by dividing by the maximum score + a small epsilon to avoid division by zero
    max_combined_score = np.max(combined_score) + 1e-8
    importance_normalized = combined_score / max_combined_score
    # Ensure diversity by adding diversity factor based on variance
    diversity_factor = np.var(combined_score) / np.sum(combined_score)
    importance_normalized *= (1 + diversity_factor)
    return importance_normalized
```
