```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize the weights for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the importance score by summing the prize times the normalized weights
    importance_score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the diversity score by using the percentile of the importance score
    diversity_score = np.partition(importance_score, int(n * 0.9))[:int(n * 0.1)]
    diversity_score = diversity_score / np.max(diversity_score)
    
    # Combine the importance and diversity scores
    combined_score = importance_score * diversity_score
    
    # Normalize the combined score to get the heuristics
    heuristics = combined_score / np.sum(combined_score)
    
    # Introduce randomness to explore diverse solutions
    np.random.shuffle(heuristics)
    
    # Set the heuristics below a certain threshold to zero to sparsify the solution
    threshold = np.percentile(heuristics, 20)
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
