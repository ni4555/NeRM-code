```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    diversity_score = np.mean(prize) / prize  # Higher diversity, lower ratio, more promising
    balance_score = np.mean(weight, axis=1) / np.sum(weight, axis=1)  # Balance the weight distribution
    combined_score = (score * diversity_score * balance_score).flatten()
    normalized_combined_score = (combined_score - np.min(combined_score)) / (np.max(combined_score) - np.min(combined_score))
    sparsified_score = np.where(normalized_combined_score > 0.5, normalized_combined_score, 0)
    return sparsified_score
```
