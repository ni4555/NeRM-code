```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    balance_ratio = np.max(ratio) / np.min(ratio)
    combined_score = score * ratio * balance_ratio
    diversity_score = np.sum(weight, axis=1) / np.sum(weight, axis=1).max()
    sparsified_score = np.where(combined_score > np.mean(combined_score), combined_score, 0)
    return sparsified_score
```
