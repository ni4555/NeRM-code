```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    sum_weights = np.sum(weight, axis=1)
    
    # Efficient normalization by subtracting the minimum and dividing by the range
    normalized_weights = (weight - np.min(weight, axis=1, keepdims=True)) / np.ptp(weight, axis=1, keepdims=True)
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights, avoiding division by zero
    ratio = prize / (sum_weights + 1e-8)
    
    # Calculate combined importance using score and ratio
    combined_importance = score * ratio
    
    # Normalize the importance scores
    importance_normalized = combined_importance / np.sum(combined_importance)
    
    # Calculate diversity score
    diversity_score = np.std(normalized_weights, axis=1)
    
    # Combine importance and diversity
    combined_score = importance_normalized * diversity_score
    
    # Normalize combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)
    
    # Dynamic threshold based on the standard deviation of the normalized scores
    threshold = np.std(combined_score_normalized)
    
    # Apply thresholding to determine the heuristics
    heuristics = (combined_score_normalized >= threshold).astype(float)
    
    # Incorporate a sparsity parameter that balances the diversity and importance
    sparsity_param = np.percentile(combined_score_normalized, 90)  # Sparsity level as an example
    heuristics[combined_score_normalized < sparsity_param] = 0
    
    # Dynamically balance exploration and exploitation by adding a random factor
    random_factor = np.random.rand(len(combined_score_normalized))
    heuristics = heuristics * random_factor + (1 - random_factor)
    
    return heuristics
```
