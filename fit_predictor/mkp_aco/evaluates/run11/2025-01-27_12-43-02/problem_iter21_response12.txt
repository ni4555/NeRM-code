```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights and calculate the average weight for each item
    average_weight = np.mean(weight, axis=1)
    normalized_weights = weight / average_weight[:, None]
    
    # Calculate the weighted prize score for each item
    weighted_prize_score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the average weight to balance importance and diversity
    ratio = prize / (average_weight + 1e-8)  # Avoid division by zero
    
    # Combine the weighted prize score with the ratio to create a combined score
    combined_score = weighted_prize_score * ratio
    
    # Normalize the combined score to get importance normalized
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Introduce randomness to encourage diversity in the selection process
    random_factor = np.random.rand(len(importance_normalized))
    random_normalized = random_factor / np.sum(random_factor)
    
    # Combine the importance normalized score with the random factor
    final_heuristics = importance_normalized * (1 - 0.1) + random_normalized * 0.1
    
    # Ensure non-negative values and set low scores to zero to sparsify the heuristics
    final_heuristics = np.clip(final_heuristics, 0, 1)
    sparsified_heuristics = np.where(final_heuristics < 0.05, 0, final_heuristics)
    
    return sparsified_heuristics
```
