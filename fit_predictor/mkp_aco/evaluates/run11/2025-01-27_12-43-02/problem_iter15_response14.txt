```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Adjust for sparsity by adding a small value to avoid zero heuristics
    heuristics = importance_normalized + 1e-8
    
    # Random perturbation to encourage exploration
    random_perturbation = np.random.rand(*heuristics.shape) * 0.01
    heuristics += random_perturbation
    
    return heuristics
```
