```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize the prize based on the sum of all weights for each item
    normalized_prize = prize / np.sum(prize) * 100
    # Normalize the weights by the sum of weights for each item
    normalized_weight = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate the importance score considering both normalized prize and weight
    importance_score = normalized_prize * normalized_weight
    # Use a percentile threshold to balance diversity and filter out unpromising items
    percentile_threshold = np.percentile(importance_score, 90)
    # Create a heuristics array where high importance score items are more likely to be selected
    heuristics = np.where(importance_score >= percentile_threshold, importance_score, 0)
    return heuristics
```
