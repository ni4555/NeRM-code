```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    # Normalize combined score to get a weighted importance
    importance_normalized = combined_score / np.sum(combined_score)
    # Apply a sigmoid function to transform the importance scores into a probability distribution
    heuristics = 1 / (1 + np.exp(-importance_normalized))
    # Threshold the probability distribution to create a binary heuristic
    sparsity_threshold = np.mean(heuristics)
    heuristics = heuristics > sparsity_threshold
    return heuristics.astype(int)
```
