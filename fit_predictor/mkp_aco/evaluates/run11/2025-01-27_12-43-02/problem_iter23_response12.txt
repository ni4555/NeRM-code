```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Calculate importance score based on normalized prize and weight ratio
    importance_normalized = heuristics_v1(prize, weight)
    
    # Introduce diversity by considering the standard deviation of the weights for each item
    diversity_score = np.sum(weight**2, axis=1) / np.sum(weight**2, axis=1)[:, None]
    
    # Integrate both importance and diversity to create a heuristic score
    combined_score = 0.7 * importance_normalized + 0.3 * diversity_score
    
    # Apply percentile thresholds to sparsify the heuristics
    threshold = np.percentile(combined_score, 75)  # Choose the 75th percentile as a threshold
    heuristics = np.where(combined_score > threshold, combined_score, 0)
    
    return heuristics
```
