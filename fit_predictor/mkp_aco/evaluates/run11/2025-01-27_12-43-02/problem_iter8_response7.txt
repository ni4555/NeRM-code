```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Use a dynamic threshold based on the standard deviation of the combined score
    std_dev = np.std(combined_score)
    threshold = np.mean(combined_score) + 1.96 * std_dev  # 95% confidence interval
    
    # Normalize the scores to a scale between 0 and 1 based on the threshold
    sparsified_score = np.where(combined_score > threshold, combined_score, 0)
    
    # Adjust the scores based on the problem scale by multiplying with a factor
    scale_factor = np.sum(prize) / (np.sum(weight) + 1)  # Normalize by total weight capacity
    normalized_sparsified_score = sparsified_score / np.max(sparsified_score)
    normalized_sparsified_score *= scale_factor
    
    return normalized_sparsified_score
```
