```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights based on the sum of weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights, avoiding division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate combined importance using score and ratio
    combined_importance = score * ratio
    
    # Normalize the importance scores for comparison
    max_importance = np.max(combined_importance)
    min_importance = np.min(combined_importance)
    normalized_importance = (combined_importance - min_importance) / (max_importance - min_importance)
    
    # Use a combination of percentiles to control sparsity and set a threshold
    percentiles = [90, 95, 99]
    thresholds = np.percentile(normalized_importance, percentiles)
    
    # Create heuristics array based on normalized importance and thresholds
    heuristics = np.zeros_like(normalized_importance)
    for i in range(len(thresholds) - 1):
        heuristics[(normalized_importance >= thresholds[i]) & (normalized_importance < thresholds[i + 1])] = i + 1
    
    # Optional binary adjustment of heuristics scores
    heuristics[heuristics > 0.5] = 1
    heuristics[heuristics <= 0.5] = 0
    
    return heuristics
```
