```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Data smoothing
    smoothed_combined_score = np.where(combined_score > np.mean(combined_score), combined_score, 0)
    
    # Refine sparsity measures
    sparsity_threshold = np.percentile(smoothed_combined_score, 90)  # Use the 90th percentile as a sparsity threshold
    heuristics = smoothed_combined_score > sparsity_threshold
    
    return heuristics.astype(int)
```
