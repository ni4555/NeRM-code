```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Add randomness to the score to encourage diversity in the solution
    randomness_factor = np.random.random(size=prize.shape)
    
    # Use percentile to filter the importance of items
    item_percentiles = np.percentile(score, [25, 75])
    
    # Combine importance with randomness and normalize by percentile range
    importance_normalized = (score - item_percentiles[0]) / (item_percentiles[1] - item_percentiles[0])
    importance_normalized = importance_normalized * randomness_factor + importance_normalized
    
    # Sparsify the heuristics by setting a threshold and setting unpromising elements to zero
    threshold = np.percentile(importance_normalized, 50)
    sparsified_heuristics = (importance_normalized >= threshold).astype(float)
    
    return sparsified_heuristics
```
