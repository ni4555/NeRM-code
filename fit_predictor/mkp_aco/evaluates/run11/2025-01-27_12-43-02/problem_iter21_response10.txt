```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights per dimension
    per_dim_weights = np.linalg.norm(weight, axis=1)
    # Normalize per item based on the sum of weights of its dimensions
    normalized_weights = per_dim_weights / np.sum(weight, axis=1)[:, None]
    # Calculate the score as the weighted sum of prizes
    score = np.sum(prize * normalized_weights, axis=1)
    # Calculate the diversity score by penalizing items with higher density
    density_penalty = np.min(normalized_weights, axis=1)
    diversity_score = score - density_penalty
    # Normalize the diversity score to get a heuristic value
    importance_normalized = diversity_score / np.sum(diversity_score)
    # Introduce randomness to avoid local optima
    importance_normalized += np.random.rand(len(importance_normalized)) * 0.1 - 0.05
    # Clip values to be within a range [0, 1]
    importance_normalized = np.clip(importance_normalized, 0, 1)
    return importance_normalized
```
