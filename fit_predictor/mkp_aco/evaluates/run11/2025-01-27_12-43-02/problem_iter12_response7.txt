```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights and calculate the score for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to weight sum for each item
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    
    # Combine score and ratio into a single importance metric
    importance = score * ratio
    
    # Normalize the importance metric to ensure they can be compared across different items
    max_importance = np.max(importance)
    min_importance = np.min(importance)
    normalized_importance = (importance - min_importance) / (max_importance - min_importance)
    
    # Calculate sparsity reduction metric that considers the inverse of the importance and the ratio
    sparsity_reduction_metric = 1 / (importance + 1e-8)
    
    # Dynamic thresholding based on the distribution of the normalized importance metric
    threshold = np.percentile(normalized_importance, 70)  # Adjust percentile for threshold
    
    # Apply a combination of importance normalization and sparsity reduction
    # to select items that balance between high importance and low sparsity
    combined_metric = normalized_importance / sparsity_reduction_metric
    
    # Select items based on the combined metric
    heuristics = (combined_metric >= threshold).astype(float)
    
    return heuristics
```
