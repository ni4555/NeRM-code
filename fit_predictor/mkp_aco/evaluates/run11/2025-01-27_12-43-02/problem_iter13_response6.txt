```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Sparsify by setting a threshold for the score
    threshold = np.percentile(score, 90)  # Set the top 10% as threshold
    sparsified_score = np.where(score >= threshold, score, 0)
    
    # Normalize the sparsified scores
    importance_normalized = sparsified_score / np.sum(sparsified_score)
    
    # Dynamically adjust threshold based on the current total weight
    total_weight = np.sum(weight, axis=0)
    dynamic_threshold = np.mean(importance_normalized * total_weight) * 0.9
    
    # Further adjust the heuristics to avoid dominance
    adjusted_heuristics = importance_normalized / (1 + np.exp(-dynamic_threshold))
    
    return adjusted_heuristics
```
