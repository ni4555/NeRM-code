```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    
    # Normalize weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate importance using both the prize and the normalized weights
    importance = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate diversity using the standardized normalized weights
    diversity = np.std(normalized_weights, axis=1)
    
    # Combine importance and diversity to create a score
    combined_score = importance * diversity
    
    # Normalize the combined score to be between 0 and 1
    max_score = np.max(combined_score)
    min_score = np.min(combined_score)
    normalized_combined_score = (combined_score - min_score) / (max_score - min_score)
    
    # Apply a threshold based on the 90th percentile of the normalized combined score
    threshold = np.percentile(normalized_combined_score, 90)
    
    # Create heuristics by applying the threshold
    heuristics = (normalized_combined_score >= threshold).astype(float)
    
    # Binary thresholding to create a more binary heuristic score
    heuristics = (heuristics > 0.5).astype(int)
    
    return heuristics
```
