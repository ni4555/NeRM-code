```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    
    # Normalize weights based on the sum of weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate combined importance using score
    combined_importance = score
    
    # Normalize the importance scores
    importance_normalized = combined_importance / np.sum(combined_importance)
    
    # Calculate diversity score
    diversity_score = np.std(normalized_weights, axis=1)
    
    # Combine importance and diversity
    combined_score = importance_normalized * diversity_score
    
    # Normalize combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)
    
    # Dynamic threshold based on the 90th percentile of the normalized scores
    sparsity_param = np.percentile(combined_score_normalized, 90)
    
    # Apply sparsity threshold to determine the heuristics
    heuristics = (combined_score_normalized >= sparsity_param).astype(float)
    
    # Further refine the heuristics with diversity threshold
    diversity_threshold = np.percentile(diversity_score, 80)
    heuristics[diversity_score < diversity_threshold] = 0
    
    return heuristics
```
