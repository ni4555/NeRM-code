```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Adding diversity through random noise to encourage exploration of different solutions
    random_noise = np.random.rand(len(prize))
    random_noise = random_noise / np.sum(random_noise)
    
    # Calculating balance between relevance and diversity
    diversity_score = np.dot(random_noise, score)
    combined_score = diversity_score * (0.5 + 0.5 * (score / np.max(score)))
    
    importance_normalized = combined_score / np.sum(combined_score)
    return importance_normalized
```
