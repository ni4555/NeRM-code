```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    balance_score = ratio / (np.max(ratio) + 1e-8)  # Normalize balance score
    diversity_score = np.exp(-np.sum(weight**2, axis=1) / (np.sum(weight, axis=1) + 1e-8))  # Sparsity score
    combined_score = (score * balance_score * diversity_score).mean(axis=1)  # Combine all scores
    sparsified_score = np.where(combined_score > combined_score.mean(), combined_score, 0)
    return sparsified_score
```
