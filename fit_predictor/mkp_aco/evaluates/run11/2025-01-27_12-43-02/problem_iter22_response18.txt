```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights to create a diversity score
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    diversity_score = np.std(normalized_weights, axis=1)

    # Calculate importance based on the ratio of prize to total weight
    total_weight = np.sum(weight, axis=1)
    importance = prize / (total_weight + 1e-8)

    # Combine importance and diversity to create a heuristic score
    combined_score = importance * diversity_score

    # Normalize the combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)

    # Use a dynamic threshold to balance exploration and exploitation
    threshold = np.percentile(combined_score_normalized, 75)  # Adjusted percentile to encourage exploitation

    # Apply threshold to determine the heuristics
    heuristics = np.exp((combined_score_normalized - threshold) / np.max(combined_score_normalized))

    # Sparsity level for diversity
    sparsity_param = np.percentile(combined_score_normalized, 90)
    heuristics[combined_score_normalized < sparsity_param] = 0

    # Reduce randomness to increase the stability of the heuristics
    randomness_reduction = 0.8
    random_factor = np.random.rand(len(combined_score_normalized)) * randomness_reduction + (1 - randomness_reduction)
    heuristics *= random_factor

    # Ensure exploration by adjusting the threshold to not be too restrictive
    adjusted_threshold = threshold * 0.9
    heuristics[combined_score_normalized < adjusted_threshold] = 0

    # Soften the heuristics by scaling
    heuristics /= np.sum(heuristics)

    return heuristics
```
