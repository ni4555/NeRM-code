```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    value_score = np.sum(prize * normalized_weights, axis=1)
    diversity_score = np.sum((normalized_weights - np.mean(normalized_weights))**2, axis=1)
    sparsity_score = np.sum(weight, axis=1) / np.sum(weight)
    balance_score = np.sum((prize / np.sum(prize)) * value_score, axis=1)
    
    # Normalize and smooth scores
    smoothed_value_score = value_score / np.max(value_score)
    smoothed_diversity_score = diversity_score / np.max(diversity_score)
    smoothed_balance_score = balance_score / np.max(balance_score)
    
    # Combine scores with a weighted sum approach
    combined_score = 0.5 * smoothed_value_score + 0.3 * smoothed_diversity_score + 0.2 * smoothed_balance_score
    
    # Apply threshold to sparsify the heuristics
    threshold = np.percentile(combined_score, 90)
    sparsified_score = np.where(combined_score > threshold, combined_score, 0)
    
    return sparsified_score
```
