```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Calculate a dynamic threshold for sparsity based on the distribution of combined_score
    median_score = np.median(combined_score)
    percentile_threshold = median_score * 0.95  # Using 95% of the median as a dynamic threshold
    
    # Sparsify the heuristics based on the dynamic percentile threshold
    sparsified_score = np.where(combined_score >= percentile_threshold, combined_score, 0)
    
    # Normalize the sparsified score
    normalized_sparsified_score = sparsified_score / np.max(sparsified_score)
    
    return normalized_sparsified_score
```
