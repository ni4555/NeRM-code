```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate normalized weights per dimension
    norm_weights = np.linalg.norm(weight, axis=1)
    # Calculate percentile-based normalized scores for each item
    score = np.percentile(norm_weights, 95, axis=1) - np.percentile(norm_weights, 5, axis=1)
    # Calculate importance based on prize to weight ratio
    importance = prize / np.sum(weight, axis=1)[:, None]
    # Combine scores and importance, normalize, and ensure sparsity
    combined_score = score * importance
    importance_normalized = combined_score / np.sum(combined_score)
    importance_normalized[importance_normalized < 0.01] = 0  # Sparsify
    return importance_normalized
```
