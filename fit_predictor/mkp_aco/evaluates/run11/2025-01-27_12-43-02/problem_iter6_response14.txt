```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio

    # Calculate sparsity threshold based on standard deviation
    std_score = np.std(combined_score)
    sparsity_threshold = np.mean(combined_score) + std_score

    # Apply sparsity by setting scores above threshold to 1, others to 0
    sparsified_score = np.where(combined_score > sparsity_threshold, combined_score, 0)
    
    # Incorporate diversity by adding a random element to ensure diversity
    diversity_factor = np.random.rand(n)
    heuristics = (sparsified_score + diversity_factor[:, None]) > np.mean(sparsified_score[:, None])
    return heuristics.astype(int)
```
