```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize prize based on the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    # Normalize weights based on the sum of each item's weights
    normalized_weight = weight / np.sum(weight, axis=1)[:, None]
    # Calculate the diversity score by considering the average weight across dimensions
    diversity_score = np.mean(normalized_weight, axis=1)
    # Calculate the relevance score by considering the normalized prize
    relevance_score = normalized_prize * diversity_score
    # Combine relevance and diversity scores with a balance factor
    balance_factor = 0.5  # This can be adjusted for sensitivity analysis
    combined_score = relevance_score * balance_factor + (1 - balance_factor) * diversity_score
    # Avoid division by zero in the normalization
    combined_score = combined_score / (np.maximum(np.sum(combined_score), 1e-8))
    return combined_score
```
