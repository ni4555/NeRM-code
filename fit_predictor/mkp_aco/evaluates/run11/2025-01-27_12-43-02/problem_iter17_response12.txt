```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate normalized weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate scores based on normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    # Calculate ratio of prize to total weight (including a small epsilon to avoid division by zero)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    # Combine scores with ratios to get a heuristic score
    combined_score = score * ratio
    # Normalize the combined scores to create a probability distribution
    importance_normalized = combined_score / np.sum(combined_score)
    # Sparsify the heuristics by setting a percentile threshold (e.g., 95th percentile)
    threshold = np.percentile(importance_normalized, 95)
    # Apply the threshold to the heuristics
    heuristics = np.where(importance_normalized >= threshold, importance_normalized, 0)
    return heuristics
```
