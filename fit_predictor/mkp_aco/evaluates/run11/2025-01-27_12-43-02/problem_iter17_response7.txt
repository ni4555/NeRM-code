```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate normalized weight for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate normalized prize for each item
    normalized_prize = prize / np.linalg.norm(prize)
    # Calculate a basic score based on normalized prize and weight
    score = normalized_prize * normalized_weights
    # Use a percentile threshold to sparsify the heuristics
    sparsity_threshold = np.percentile(score, 50)  # Use 50th percentile as an example
    # Apply the threshold to create sparsity
    sparsity = score > sparsity_threshold
    # Normalize the scores to balance exploration and exploitation
    importance_normalized = sparsity / np.sum(sparsity)
    return importance_normalized
```
