```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Diversity by the inverse of the norm of the weight
    diversity_score = 1 / np.linalg.norm(weight, axis=1)
    
    # Combine score and diversity score
    combined_score_with_diversity = importance_normalized + diversity_score
    
    # Normalize combined score to ensure maximum is 1
    combined_score_with_diversity /= np.max(combined_score_with_diversity)
    
    # Calculate dynamic sparsity thresholds based on percentiles
    sparsity_thresholds = np.percentile(combined_score_with_diversity, np.linspace(0, 100, num=11)[1:])
    
    # Create heuristics based on thresholds
    heuristics = np.zeros_like(combined_score_with_diversity)
    for threshold in sparsity_thresholds:
        heuristics += (combined_score_with_diversity > threshold).astype(float)
    
    # Normalize heuristics to ensure maximum is 1
    heuristics /= np.max(heuristics)
    return heuristics.astype(int)
```
