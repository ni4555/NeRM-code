```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Calculate the importance of each item based on its prize value and weight
    item_value_to_weight_ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    importance = np.max(item_value_to_weight_ratio, axis=1)  # Take the max ratio as importance

    # Calculate the diversity of the items based on their weight distribution
    diversity = np.std(weight, axis=1)  # Standard deviation of weights as a proxy for diversity

    # Normalize the importance and diversity scores
    importance_normalized = importance / np.sum(importance)
    diversity_normalized = diversity / np.sum(diversity)

    # Combine the normalized importance and diversity to form a combined score
    combined_score = importance_normalized * diversity_normalized

    # Normalize the combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)

    # Define a dynamic threshold for heuristics based on the standard deviation of the normalized scores
    threshold = np.std(combined_score_normalized)

    # Apply the threshold to create heuristics: higher scores are more promising
    heuristics = combined_score_normalized >= threshold

    return heuristics
```
