```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    # Adjust the ratio to include the average prize to account for the diversity of item value
    average_prize = np.mean(prize)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    # Introduce sparsity by setting a threshold for the importance normalized score
    sparsity_threshold = np.percentile(score * ratio, 90)  # 90th percentile to keep top 10%
    importance_normalized = np.where(score * ratio > sparsity_threshold, score * ratio, 0)
    importance_normalized /= np.sum(importance_normalized)
    return importance_normalized
```
