```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate importance score
    importance_score = np.sum(prize * normalized_weights, axis=1)
    # Calculate diversity score by considering the variance of normalized weights
    diversity_score = np.var(normalized_weights, axis=1)
    # Combine scores with a dynamic threshold based on average importance score
    importance_normalized = importance_score / np.mean(importance_score)
    diversity_normalized = diversity_score / np.mean(diversity_score)
    combined_score = importance_normalized * diversity_normalized
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = np.percentile(combined_score, 90)  # Set threshold at the 90th percentile
    heuristics = np.where(combined_score >= threshold, combined_score, 0)
    return heuristics
```
