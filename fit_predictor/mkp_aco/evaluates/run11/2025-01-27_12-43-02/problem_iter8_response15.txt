```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Dynamic threshold based on the median of the scores
    median_score = np.median(combined_score)
    # Calculate a sparsity threshold that filters out items below the median
    sparsity_threshold = median_score * 0.95
    
    # Create a boolean mask where items with a combined_score above the threshold are True
    above_threshold = combined_score >= sparsity_threshold
    
    # Normalize the scores to ensure they are between 0 and 1
    heuristics = above_threshold.astype(float) / np.sum(above_threshold.astype(float))
    
    return heuristics
```
