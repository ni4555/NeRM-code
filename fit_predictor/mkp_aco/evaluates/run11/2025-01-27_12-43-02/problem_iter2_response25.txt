```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize the prize to incorporate the value characteristic
    normalized_prize = prize / np.linalg.norm(prize)
    # Normalize the weight to incorporate the weight characteristic
    normalized_weight = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate the value per unit weight for each item
    value_per_weight = normalized_prize / (normalized_weight + 1e-8)
    # Normalize the value per unit weight to smooth scores
    normalized_value_per_weight = value_per_weight / np.linalg.norm(value_per_weight)
    # Combine the normalized value per weight with the normalized prize
    combined_score = normalized_value_per_weight * normalized_prize
    # Apply a non-linear transformation to enhance discrimination
    non_linear_score = np.tanh(combined_score)
    # Apply sparsity to filter out less promising items
    sparsified_score = np.where(non_linear_score > np.mean(non_linear_score), non_linear_score, 0)
    return sparsified_score
```
