```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    # Adjusting for sparsity by considering the number of dimensions in the weight vector
    sparsity_score = np.sum(weight > 0, axis=1) / m
    # Balancing exploration and exploitation by combining score and sparsity score
    combined_score = 0.5 * score + 0.5 * sparsity_score
    # Normalize the combined score to ensure all elements are comparable
    importance_normalized = combined_score / np.sum(combined_score)
    return importance_normalized
```
