```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    # Using the average score to sparsify rather than the median
    average_score = np.mean(combined_score)
    sparsified_score = np.where(combined_score >= average_score, combined_score, 0)
    # Normalize the sparsified score so that the maximum value is 1
    sparsified_score /= np.max(sparsified_score)
    # Using a threshold based on the 95th percentile to determine which items are included
    threshold = np.percentile(sparsified_score, 95)
    heuristics = sparsified_score > threshold
    return heuristics.astype(int)
```
