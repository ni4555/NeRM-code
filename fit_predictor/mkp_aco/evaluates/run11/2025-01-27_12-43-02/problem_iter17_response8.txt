```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate the ratio of prize to weight for each item
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    # Normalize the weights in each dimension
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate the combined score by multiplying the ratio with normalized weight
    combined_score = ratio * normalized_weights
    # Normalize the combined score to ensure it is between 0 and 1
    importance_normalized = combined_score / np.sum(combined_score)
    # Use a percentile threshold to sparsify the heuristics
    percentile_threshold = np.percentile(importance_normalized, 90)
    # Set the less promising items to zero
    heuristics = np.where(importance_normalized > percentile_threshold, importance_normalized, 0)
    return heuristics
```
