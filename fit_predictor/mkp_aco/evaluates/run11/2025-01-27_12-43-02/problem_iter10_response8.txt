```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    # Calculate the diversity score by considering the difference from the mean
    diversity_score = np.sum((normalized_weights - np.mean(normalized_weights))**2, axis=1)
    # Combine importance and diversity into a single heuristic
    importance_diversity_score = combined_score + diversity_score
    # Normalize the combined score to ensure it is between 0 and 1
    importance_diversity_normalized = importance_diversity_score / np.sum(importance_diversity_score)
    # Apply a threshold to filter the most promising items
    threshold = np.percentile(importance_diversity_normalized, 70)  # Adjust percentile for threshold
    heuristics = (importance_diversity_normalized >= threshold).astype(float)
    return heuristics
```
