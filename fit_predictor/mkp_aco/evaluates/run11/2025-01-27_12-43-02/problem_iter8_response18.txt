```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Adjust the percentile threshold based on specific problem characteristics
    # For example, if the problem has items with very high prize compared to others,
    # a higher threshold might be appropriate.
    percentile_threshold = np.percentile(combined_score, 90)
    
    # Sparsify the heuristics based on a more selective percentile threshold
    sparsified_score = np.where(combined_score >= percentile_threshold, combined_score, 0)
    
    # Normalize the scores to maintain a consistent scale, ensuring that the
    # heuristics are interpretable and can be compared across different runs.
    normalized_sparsified_score = sparsified_score / np.max(sparsified_score)
    
    # Adjust the scaling factor to ensure that the heuristics are not too
    # sparse while still reflecting the relative importance of items.
    scaling_factor = np.max(normalized_sparsified_score)
    normalized_sparsified_score /= scaling_factor
    
    return normalized_sparsified_score
```
