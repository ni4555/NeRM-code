```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Adjusting sparsity
    sparsity_threshold = 0.1
    sparsity_factor = 1 / (1 + importance_normalized)
    sparsity_factor[sparsity_factor < sparsity_threshold] = 0
    
    # Dynamically balancing exploration and exploitation
    exploration_factor = 0.2
    combined_score *= (1 - exploration_factor) + (exploration_factor * np.random.rand(n))
    
    return combined_score * sparsity_factor
```
