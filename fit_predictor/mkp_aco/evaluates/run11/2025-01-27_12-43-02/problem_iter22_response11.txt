```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights by their sum to avoid the dominance of high weight items
    normalized_weights = weight / np.sum(weight, axis=1)[:, None]

    # Calculate the importance based on the ratio of prize to normalized weight
    importance = prize / (np.linalg.norm(weight, axis=1) + 1e-8)

    # Calculate diversity by considering the spread of normalized weights
    diversity = np.std(normalized_weights, axis=1)

    # Combine importance and diversity scores using a weighted sum
    # Weights are chosen to balance between exploration and exploitation
    importance_weight = 0.6
    diversity_weight = 0.4
    combined_score = importance_weight * importance + diversity_weight * diversity

    # Normalize the combined scores to ensure they sum to 1
    combined_score_normalized = combined_score / np.sum(combined_score)

    # Dynamic threshold for heuristics based on the median of the normalized scores
    threshold = np.median(combined_score_normalized)

    # Generate heuristics based on the threshold
    heuristics = (combined_score_normalized >= threshold).astype(float)

    # Normalize heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
