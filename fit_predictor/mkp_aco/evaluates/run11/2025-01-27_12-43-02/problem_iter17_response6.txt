```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Determine percentile threshold based on score distribution
    thresholds = np.percentile(score, [25, 50, 75])
    sparsity_level = np.where(score >= thresholds[2], 1, 0)
    
    # Normalize scores by subtracting the mean to avoid overfitting
    normalized_score = score - np.mean(score)
    
    # Avoid overfitting and simplify the scoring
    importance_normalized = normalized_score * (1 - sparsity_level)
    
    # Apply dynamic thresholding based on the sparsity level
    dynamic_threshold = np.where(importance_normalized >= thresholds[1], 1, 0)
    importance_normalized *= dynamic_threshold
    
    return importance_normalized
```
