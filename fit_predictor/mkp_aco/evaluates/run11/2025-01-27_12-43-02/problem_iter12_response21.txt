```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio

    # Calculate diversity score to adapt the threshold
    diversity_score = np.std(combined_score)
    if diversity_score < 1:
        threshold = np.percentile(combined_score, 50)  # Use 50th percentile as an initial threshold
    else:
        threshold = np.percentile(combined_score, 75)  # Use higher percentile if there's high diversity

    # Use sparsity to balance simplicity and performance
    sparsity_factor = 1 / (np.sum(combined_score > threshold) + 1e-8)
    importance_normalized = combined_score * sparsity_factor

    # Normalize the importance scores to ensure they sum to 1
    importance_normalized = importance_normalized / np.sum(importance_normalized)
    
    return importance_normalized
```
