```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    item_scores = np.sum(prize * normalized_weights, axis=1)
    item_ratios = prize / (np.sum(weight, axis=1) + 1e-8)
    combined_importance = item_scores * item_ratios
    importance_min = np.min(combined_importance)
    importance_max = np.max(combined_importance)
    normalized_importance = (combined_importance - importance_min) / (importance_max - importance_min)
    percentile_threshold = np.percentile(normalized_importance, 90)
    heuristics = (normalized_importance >= percentile_threshold).astype(float)
    return heuristics
```
