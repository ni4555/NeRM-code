```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]

    # Calculate importance based on ratio of prize to average weight
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    importance = np.sum(prize * normalized_weights, axis=1) * ratio

    # Normalize importance scores
    importance_normalized = importance / np.sum(importance)

    # Calculate diversity score based on standard deviation of normalized weights
    diversity_score = np.std(normalized_weights, axis=1)

    # Calculate combined score with adaptive sparsity and balance factors
    sparsity_factor = np.percentile(importance_normalized, 25)  # Sparsity level as an example
    balance_factor = np.percentile(diversity_score, 50)  # Balance factor as an example

    combined_score = importance_normalized * balance_factor + (diversity_score / np.mean(diversity_score)) * (1 - balance_factor)

    # Refine thresholds dynamically based on the distribution of the combined scores
    threshold = np.percentile(combined_score, 75)

    # Apply thresholding to determine the heuristics
    heuristics = (combined_score >= threshold).astype(float)

    # Introduce randomness for exploration using a Gaussian distribution
    random_noise = np.random.normal(loc=0, scale=0.05, size=n)
    heuristics = heuristics * (1 - random_noise) + random_noise * heuristics

    # Ensure that the heuristics sum up to 1 for selection purposes
    heuristics /= np.sum(heuristics)

    return heuristics
```
