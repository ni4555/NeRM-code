```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio

    # Introduce a diversity factor that favors items with unique weight profiles
    diversity_factor = np.exp(-np.sum(weight ** 2, axis=1) / np.sum(weight, axis=1))
    combined_score *= diversity_factor

    # Normalize scores to balance relevance and diversity
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Sparsify by setting a threshold for the heuristics
    threshold = np.percentile(importance_normalized, 90)  # Set threshold to 90th percentile
    importance_normalized[importance_normalized < threshold] = 0
    
    return importance_normalized
```
