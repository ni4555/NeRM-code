```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]

    # Calculate importance based on ratio of prize to average weight
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    importance = np.sum(prize * normalized_weights, axis=1) * ratio

    # Normalize importance scores
    importance_normalized = importance / np.sum(importance)

    # Calculate diversity score based on standard deviation of normalized weights
    diversity_score = np.std(normalized_weights, axis=1)

    # Introduce a dynamic balance factor between importance and diversity
    balance_factor = 0.5 + 0.5 * np.random.rand()  # Random factor for balancing

    # Combine importance and diversity
    combined_score = importance_normalized * balance_factor + diversity_score * (1 - balance_factor)

    # Normalize combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)

    # Dynamically refine thresholds based on the current distribution of scores
    threshold = np.percentile(combined_score_normalized, 75)  # Use a dynamic percentile

    # Apply thresholding to determine the heuristics
    heuristics = (combined_score_normalized >= threshold).astype(float)

    # Introduce randomness for exploration, using a probability that is a function of the score
    exploration_probability = 1 / (1 + np.exp(-combined_score_normalized))
    random_factor = np.random.rand(n) < exploration_probability

    # Update heuristics based on exploration and exploitation
    heuristics[random_factor] = 1
    heuristics[~random_factor] = 0

    return heuristics
```
