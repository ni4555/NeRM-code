```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Non-linear transformation using a logarithmic function to enhance the impact of high-value items
    log_combined_score = np.log1p(combined_score)
    
    # Apply a Gaussian function to smooth the score distribution
    gaussian_kernel = np.exp(-np.square(log_combined_score - np.mean(log_combined_score)) / (2 * np.var(log_combined_score)))
    
    # Refine sparsity by comparing with the smoothed score
    sparsified_score = np.where(gaussian_kernel > np.mean(gaussian_kernel), combined_score, 0)
    return sparsified_score
```
