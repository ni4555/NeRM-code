```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Balance criteria, emphasize high-scores, minimize sparsity
    balanced_score = combined_score * (1 - np.exp(-0.1 * combined_score))
    sparsified_score = np.where(balanced_score > np.percentile(balanced_score, 95), balanced_score, 0)
    
    return sparsified_score
```
