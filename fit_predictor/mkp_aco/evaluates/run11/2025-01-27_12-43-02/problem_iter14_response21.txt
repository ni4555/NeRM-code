```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights by dividing by the sum of weights in each dimension
    normalized_weights = np.sum(weight, axis=1, keepdims=True) / np.linalg.norm(weight, axis=1, keepdims=True)
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights, avoiding division by zero
    weight_sum = np.sum(weight, axis=1) + 1e-8
    ratio = prize / weight_sum
    
    # Combine the score and ratio to create a composite heuristic
    combined_heuristic = score * ratio
    
    # Normalize the combined heuristic scores
    max_combined = np.max(combined_heuristic)
    min_combined = np.min(combined_heuristic)
    normalized_combined = (combined_heuristic - min_combined) / (max_combined - min_combined)
    
    # Apply sparsity by using a threshold
    threshold = np.percentile(normalized_combined, 90)
    heuristics = (normalized_combined >= threshold).astype(float)
    
    # Convert the heuristics to a binary array
    heuristics = (heuristics > 0.5).astype(int)
    
    return heuristics
```
