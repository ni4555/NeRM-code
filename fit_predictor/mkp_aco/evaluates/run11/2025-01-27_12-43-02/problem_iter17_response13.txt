```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate the normalized weight for each item
    normalized_weights = np.sum(weight, axis=1) / m
    # Calculate the score based on normalized weights
    score = np.dot(prize, normalized_weights)
    # Apply percentile threshold for sparsity
    percentile_threshold = np.percentile(score, 90)
    # Create a binary sparsity vector
    sparsity_vector = score > percentile_threshold
    # Normalize scores to balance between sparsity and exploration
    normalized_score = score / np.sum(score[sparsity_vector])
    # Return the normalized score as the heuristic value
    return normalized_score
```
