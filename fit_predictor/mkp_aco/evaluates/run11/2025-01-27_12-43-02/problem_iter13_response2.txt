```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights by each item's total weight
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate the normalized prize per weight unit
    normalized_prize = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    # Calculate a score based on both normalized prize and normalized weight
    score = normalized_weights * normalized_prize
    # Sparsify the heuristics by setting a threshold for the score
    sparsity_threshold = np.sum(score) / (n * m)
    importance_normalized = np.where(score > sparsity_threshold, score, 0)
    return importance_normalized
```
