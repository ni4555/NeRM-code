```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate normalized weights based on the sum of weights
    normalized_weights = np.sum(weight, axis=1, keepdims=True) ** (-1)
    # Calculate the combined score by considering the prize, normalized weight, and inverse of the number of dimensions
    combined_score = (prize * normalized_weights) * (m / (m + 1))
    # Normalize the combined score to get the importance of each item
    importance_normalized = combined_score / np.sum(combined_score)
    # Set a threshold to sparsify the heuristics
    threshold = np.percentile(importance_normalized, 90)
    # Create heuristics array based on normalized importance
    heuristics = np.where(importance_normalized >= threshold, 1.0, 0.0)
    return heuristics
```
