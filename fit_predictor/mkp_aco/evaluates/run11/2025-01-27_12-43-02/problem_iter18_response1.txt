```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined = score * ratio
    importance_normalized = (combined - np.min(combined)) / (np.max(combined) - np.min(combined))
    diversity_score = np.std(normalized_weights, axis=1)
    importance_diversified = importance_normalized * diversity_score
    threshold = np.percentile(importance_diversified, 80)  # Use the 80th percentile as a threshold
    heuristics = (importance_diversified >= threshold).astype(float)
    heuristics = np.where(heuristics >= 0.5, 1.0, 0.0)
    return heuristics
```
