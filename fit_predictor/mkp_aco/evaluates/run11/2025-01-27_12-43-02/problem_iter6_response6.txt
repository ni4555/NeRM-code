```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    importance_normalized = combined_score / np.sum(combined_score)
    sparsity_threshold = np.mean(importance_normalized)
    
    # Calculate heuristic as a weighted average between the importance normalized score
    # and a threshold based on the mean sparsity
    weight_importance = 0.6
    weight_threshold = 0.4
    heuristics = importance_normalized * weight_importance + (1 - sparsity_threshold) * weight_threshold
    
    # Apply a simple cutoff to ensure heuristics are non-negative and normalized
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics.astype(int)
```
