```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate the normalized weights based on their contribution to the overall weight
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the weight of each item
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    
    # Calculate the importance of each item by balancing the score and ratio
    combined_score = score * ratio
    
    # Normalize the combined score to ensure diversity
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Sparsify the heuristics by setting items with low combined score to zero
    sparsity_threshold = np.percentile(importance_normalized, 95)  # Choose a threshold based on the 95th percentile
    heuristics = (importance_normalized >= sparsity_threshold).astype(float)
    
    return heuristics
```
