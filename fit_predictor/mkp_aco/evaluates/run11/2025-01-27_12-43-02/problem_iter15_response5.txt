```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    # Introduce randomness for exploration and sparsity for less crowded heuristics
    random_noise = np.random.rand(*score.shape)
    noise_threshold = 0.1
    sparsified_score = np.where(score > noise_threshold, score, 0)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = sparsified_score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    return importance_normalized
```
