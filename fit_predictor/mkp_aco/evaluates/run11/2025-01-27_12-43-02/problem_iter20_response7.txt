```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Score based on weighted normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Ratio of prize to sum of weights, with small epsilon to avoid division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Combined importance score from both score and ratio
    combined_importance = score * ratio
    
    # Diversity score based on the standard deviation of normalized weights
    diversity_score = np.std(normalized_weights, axis=1)
    
    # Combined score considering both importance and diversity
    combined_score = combined_importance + diversity_score
    
    # Sparsity parameter to ensure some diversity
    sparsity_param = np.percentile(combined_score, 10)
    
    # Items below the sparsity threshold are penalized in the importance score
    penalized_importance = np.where(combined_score < sparsity_param, 0, combined_importance)
    
    # Weighted sum of penalized importance and diversity to ensure balance
    heuristics = (penalized_importance + diversity_score) / np.sum(penalized_importance + diversity_score)
    
    # Uniqueness heuristic based on the proportion of unique weights across all items
    uniqueness_score = np.unique(normalized_weights, axis=0).shape[0] / n
    heuristics *= uniqueness_score
    
    return heuristics
```
