```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Normalize the combined score to a scale between 0 and 1
    max_combined_score = np.max(combined_score)
    min_combined_score = np.min(combined_score)
    normalized_combined_score = (combined_score - min_combined_score) / (max_combined_score - min_combined_score)
    
    # Apply a sparsity minimization technique, such as thresholding
    threshold = np.percentile(normalized_combined_score, 95)
    heuristics = normalized_combined_score >= threshold
    
    # Use domain insights to refine the heuristics further
    # For example, penalize items with a low prize-to-weight ratio
    heuristics *= (combined_score > threshold)
    
    # Normalize heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
