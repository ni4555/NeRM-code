```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Calculate normalized weights based on L1 norm
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate score based on prize and normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate diversity score based on uniform distribution assumption
    diversity_score = np.exp(-np.sum(weight, axis=1) / (m * np.mean(weight, axis=1) + 1))
    
    # Calculate combined heuristic score by balancing relevance and diversity
    combined_score = (score + diversity_score) / (score + diversity_score + 1e-8)  # Avoid division by zero
    
    # Normalize combined scores to balance between high-relevance and high-diversity items
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Sparsify by setting lower scores to zero based on a dynamic threshold
    threshold = np.mean(importance_normalized)
    sparsified_heuristics = np.where(importance_normalized < threshold, 0, importance_normalized)
    
    return sparsified_heuristics
```
