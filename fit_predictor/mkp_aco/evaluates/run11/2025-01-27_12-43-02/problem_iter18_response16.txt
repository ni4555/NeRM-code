```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]

    # Calculate importance based on score and ratio
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    importance = score * ratio

    # Normalize importance scores
    max_importance = np.max(importance)
    min_importance = np.min(importance)
    importance_normalized = (importance - min_importance) / (max_importance - min_importance)

    # Calculate diversity score
    diversity_score = np.std(normalized_weights, axis=1)

    # Combine importance and diversity
    combined_score = importance_normalized * diversity_score

    # Normalize combined scores
    max_combined_score = np.max(combined_score)
    min_combined_score = np.min(combined_score)
    combined_score_normalized = (combined_score - min_combined_score) / (max_combined_score - min_combined_score)

    # Apply sparsity by setting a threshold and only including items above this threshold
    sparsity_threshold = np.percentile(combined_score_normalized, 90)
    heuristics = (combined_score_normalized >= sparsity_threshold).astype(float)

    # Adjust the heuristics scores to be more binary (0 or 1) if needed
    heuristics = (heuristics > 0.5).astype(int)

    return heuristics
```
