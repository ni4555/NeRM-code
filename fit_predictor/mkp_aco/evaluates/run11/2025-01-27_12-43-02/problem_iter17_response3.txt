```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate the average prize and average weight for each item
    avg_prize = np.mean(prize)
    avg_weight = np.mean(np.sum(weight, axis=1)) / m
    
    # Compute the difference from the average prize and weight for each item
    prize_diff = prize - avg_prize
    weight_diff = np.sum(weight, axis=1) - avg_weight
    
    # Normalize by the maximum difference to scale the heuristics
    normalized_prize_diff = prize_diff / np.max(np.abs(prize_diff))
    normalized_weight_diff = weight_diff / np.max(np.abs(weight_diff))
    
    # Combine normalized differences and use a simple threshold to set low scores to zero
    combined_diff = normalized_prize_diff + normalized_weight_diff
    heuristic_scores = np.where(combined_diff > 0.5, combined_diff, 0)
    
    # Apply a simple percentile-based sparsity to control the density of non-zero scores
    percentile_threshold = np.percentile(heuristic_scores, 90)
    heuristic_scores = np.where(heuristic_scores > percentile_threshold, heuristic_scores, 0)
    
    return heuristic_scores
```
