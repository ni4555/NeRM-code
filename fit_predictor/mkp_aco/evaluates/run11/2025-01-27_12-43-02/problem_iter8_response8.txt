```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Based on reflection, using a slightly higher threshold for sparsification
    percentile_threshold = np.percentile(combined_score, 88)
    
    # Sparsify the heuristics with a higher threshold, reducing the sparsity rate
    sparsified_score = np.where(combined_score >= percentile_threshold, combined_score, 0)
    
    # Normalize the sparsified scores for balance while ensuring no zero values remain
    non_zero_scores = sparsified_score[sparsified_score > 0]
    if non_zero_scores.size > 0:
        max_non_zero_score = np.max(non_zero_scores)
        normalized_sparsified_score = sparsified_score / max_non_zero_score
    else:
        normalized_sparsified_score = np.zeros_like(sparsified_score)
    
    return normalized_sparsified_score
```
