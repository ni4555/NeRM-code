```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights by percentile to balance sparsity and exploration
    for i in range(m):
        weight[:, i] = np.percentile(weight[:, i], 90)
    # Normalize prize to ensure fairness in comparison
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    # Calculate importance based on normalized prize and normalized weight
    importance = normalized_prize * np.sum(weight, axis=1)[:, None]
    # Use a simple threshold to sparsify the heuristics
    threshold = np.percentile(importance, 90)
    heuristics = (importance >= threshold)
    return heuristics
```
