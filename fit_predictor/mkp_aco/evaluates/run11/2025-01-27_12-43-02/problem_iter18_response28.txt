```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    importance = np.sum(prize * normalized_weights, axis=1)
    diversity_score = np.std(normalized_weights, axis=1)
    
    # Normalize importance and diversity scores
    importance_normalized = importance / np.sum(importance)
    diversity_normalized = diversity_score / np.max(diversity_score)
    
    # Combine importance and diversity using a weighted sum
    combined_score = importance_normalized * diversity_normalized
    
    # Apply a threshold to determine the heuristics
    threshold = np.percentile(combined_score, 80)  # 80th percentile as a threshold
    heuristics = (combined_score >= threshold).astype(float)
    
    # Convert the heuristics to binary values
    heuristics = np.where(heuristics >= 0.5, 1.0, 0.0)
    
    return heuristics
```
