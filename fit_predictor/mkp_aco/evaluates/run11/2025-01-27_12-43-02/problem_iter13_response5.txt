```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Sparsify heuristics by setting a threshold
    threshold = np.percentile(importance_normalized, 90)  # 90th percentile as an example
    sparsified_heuristics = np.where(importance_normalized >= threshold, importance_normalized, 0)
    
    # Dynamically tune thresholds for adaptability
    # This could be replaced with a more complex adaptive mechanism
    for i in range(n):
        if sparsified_heuristics[i] > 0:
            # Increase the threshold for items that are already selected
            threshold += 0.1
    
    return sparsified_heuristics
```
