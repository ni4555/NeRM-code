```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate a diversity score based on the sum of weights
    diversity_score = np.sum(weight, axis=1)
    
    # Adjust scores for balance between relevance and diversity
    relevance_score = np.sum(prize * normalized_weights, axis=1)
    balance_score = relevance_score / (diversity_score + 1e-8)  # Avoid division by zero
    
    # Normalize the balance score
    importance_normalized = balance_score / np.sum(balance_score)
    
    # Sparsify by setting the lowest heuristics scores to zero
    sparsity_threshold = np.percentile(importance_normalized, 25)
    importance_normalized[importance_normalized < sparsity_threshold] = 0
    
    return importance_normalized
```
