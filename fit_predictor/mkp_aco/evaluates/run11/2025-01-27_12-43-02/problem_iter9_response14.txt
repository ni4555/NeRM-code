```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    diversity_score = np.sum((normalized_weights - np.mean(normalized_weights))**2, axis=1)
    importance_normalized = (score + diversity_score) / (np.sum(score + diversity_score) + 1e-8)
    sparsified = importance_normalized > np.random.rand(len(importance_normalized))  # Stochastic sparsification
    return sparsified.astype(float)
```
