```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    importance = score * ratio
    
    # Normalize importance scores
    importance_normalized = importance / np.sum(importance)
    
    # Calculate diversity score
    diversity_score = np.std(normalized_weights, axis=1)
    
    # Combine importance and diversity
    combined_score = importance_normalized * diversity_score
    
    # Normalize combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)
    
    # Dynamic threshold based on the standard deviation of the normalized scores
    threshold = np.std(combined_score_normalized)
    
    # Apply thresholding to determine the heuristics
    heuristics = (combined_score_normalized >= threshold).astype(float)
    
    # Adjust sparsity based on the standard deviation of the normalized combined scores
    sparsity_param = np.std(combined_score_normalized)
    heuristics[combined_score_normalized < sparsity_param] = 0
    
    return heuristics
```
