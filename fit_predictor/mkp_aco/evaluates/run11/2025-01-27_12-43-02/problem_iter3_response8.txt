```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    value_density = np.sum(prize * normalized_weights, axis=1)
    weight_density = np.sum(weight, axis=1)
    balance_ratio = value_density / weight_density
    normalized_balance_ratio = balance_ratio / np.max(balance_ratio)
    
    diversity_score = np.mean(normalized_weights)
    sparsity_threshold = np.percentile(normalized_balance_ratio, 90)
    sparsified_score = np.where(normalized_balance_ratio > sparsity_threshold, normalized_balance_ratio, 0)
    
    return sparsified_score
```
