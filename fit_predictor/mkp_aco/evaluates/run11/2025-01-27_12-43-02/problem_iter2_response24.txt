```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights along each dimension
    normalized_weights = np.linalg.norm(weight, axis=1) / np.linalg.norm(weight, axis=1)[:, None]
    
    # Calculate the score for each item
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights, adding a small constant to avoid division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Combine the score and ratio to get a more holistic measure of item value
    combined_score = score * ratio
    
    # Apply a non-linear transformation to enhance the discrimination of high-value items
    transformed_score = np.exp(combined_score)
    
    # Use a cumulative sum to model the distribution of item values
    cumulative_score = np.cumsum(transformed_score)
    
    # Normalize the cumulative scores to form the heuristics
    heuristics = cumulative_score / cumulative_score[-1]
    
    # Use a threshold to further refine the heuristics
    threshold = np.mean(heuristics)
    heuristics = heuristics > threshold
    
    return heuristics.astype(int)
```
