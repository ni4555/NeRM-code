```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Use the 80th percentile as a quantile threshold
    percentile_threshold = np.percentile(combined_score, 80)
    
    # Normalize the scores to a scale between 0 and 1 based on the percentile threshold
    sparsified_score = np.where(combined_score > percentile_threshold, combined_score, 0)
    normalized_sparsified_score = sparsified_score / np.max(sparsified_score)
    
    # Adjust the scores based on the problem scale by multiplying with a factor
    scale_factor = np.sum(prize) / 1000  # Assuming a scale factor for a given problem scale
    normalized_sparsified_score *= scale_factor
    
    # Incorporate domain knowledge by considering the sparsity of the solution
    # and adjusting the scores accordingly
    sparsity_adjustment = 1 - np.count_nonzero(normalized_sparsified_score > 0) / prize.size
    normalized_sparsified_score *= sparsity_adjustment
    
    return normalized_sparsified_score
```
