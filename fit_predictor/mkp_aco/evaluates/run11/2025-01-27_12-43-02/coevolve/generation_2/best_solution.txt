Fitness: inf

Description:
The goal is to develop a heuristic-based approach for solving the Multiple Knapsack Problem (MKP), where the objective is to select a subset of items from multiple knapsacks to maximize the total prize while adhering to each knapsack's individual weight constraints. The solution strategy should employ stochastic sampling to explore the solution space efficiently, leveraging established heuristics for item subset selection. The emphasis is on creating a clear and direct optimization process that focuses on the core problem and effective strategies, without the complexity of ensemble methods or over-simplification through stochastic sampling alone.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a list to store heuristic values
    heuristic_values = np.zeros_like(prize, dtype=float)
    
    # Normalize the prize array to be in the range of [0, 1]
    prize_normalized = prize / np.sum(prize)
    
    # Initialize a random number generator
    rng = np.random.default_rng()
    
    # Use a random sampling approach to estimate the heuristic values
    for i in range(len(prize)):
        # Sample a random item subset
        random_subset = rng.choice(len(prize), replace=False, size=np.random.randint(1, len(prize)))
        # Calculate the total prize of the subset
        subset_prize = np.sum(prize[random_subset])
        # Normalize the subset prize by the total prize of all items
        subset_prize_normalized = subset_prize / np.sum(prize)
        # Update the heuristic value for the item
        heuristic_values[i] = subset_prize_normalized
    
    # Adjust heuristic values based on their relative contribution to the total prize
    total_normalized_prize = np.sum(heuristic_values)
    heuristic_values /= total_normalized_prize
    
    return heuristic_values