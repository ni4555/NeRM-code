Fitness: inf

Description:
Integrating a dynamic heuristic for the Multi-Knapsack Problem, this solution harnesses a probabilistic reinforcement learning framework alongside an adaptive sampling mechanism. It implements a synergistic fusion of evolutionary genetic algorithms and stochastic optimization algorithms to iteratively refine the selection of optimal item clusters, optimizing both item diversity and weight distribution constraints.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    heuristic_values = np.zeros(n)
    
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Calculate the total prize for each item
    total_prize = np.sum(prize * weight, axis=1)
    
    # Calculate the heuristic value for each item
    for i in range(n):
        heuristic_values[i] = total_prize[i] / total_weight[i]
    
    # Normalize the heuristic values to sum to 1
    heuristic_values /= np.sum(heuristic_values)
    
    return heuristic_values