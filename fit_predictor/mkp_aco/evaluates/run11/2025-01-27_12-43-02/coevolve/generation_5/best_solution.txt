Fitness: inf

Description:
Develop a hybrid heuristic leveraging a probabilistic Genetic Algorithm (GA) for initial item subset exploration combined with a sophisticated Stochastic Local Search (SLS) algorithm to iteratively refine the solution space, ultimately maximizing total prize accumulation while ensuring compliance with stringent weight limitations across a multi-knapsack setup.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Probabilistic Genetic Algorithm (GA) for initial exploration
    population_size = 100
    generations = 20
    mutation_rate = 0.01
    
    # Initialize population
    population = np.random.randint(0, 2, (population_size, n))
    
    # GA main loop
    for _ in range(generations):
        # Evaluate fitness
        fitness = np.sum(prize * population, axis=1)
        
        # Selection
        sorted_indices = np.argsort(fitness)[::-1]
        population = population[sorted_indices[:population_size // 2]]
        
        # Crossover
        for i in range(0, population_size, 2):
            idx1, idx2 = sorted_indices[i], sorted_indices[i+1]
            child1, child2 = population[idx1].copy(), population[idx2].copy()
            for j in range(n):
                if np.random.rand() < 0.5:
                    child1[j], child2[j] = child2[j], child1[j]
            population[i], population[i+1] = child1, child2
        
        # Mutation
        for i in range(population_size):
            for j in range(n):
                if np.random.rand() < mutation_rate:
                    population[i][j] = 1 - population[i][j]
    
    # Initial heuristics from GA
    ga_heuristics = np.sum(prize * population[0], axis=1)
    
    # Stochastic Local Search (SLS) to refine the solution
    max_iterations = 100
    step_size = 0.1
    
    # Initial random solution
    current_solution = np.random.randint(0, 2, n)
    current_prize = np.sum(prize * current_solution)
    
    for _ in range(max_iterations):
        # Neighbourhood search
        for _ in range(int(n * step_size)):
            i = np.random.randint(n)
            neighbour = current_solution.copy()
            neighbour[i] = 1 - neighbour[i]
            if np.sum(weight * neighbour, axis=1).max() <= 1:
                if np.sum(prize * neighbour) > current_prize:
                    current_solution, current_prize = neighbour, np.sum(prize * neighbour)
        
        # Update heuristics based on refined solution
        ga_heuristics[current_solution] = current_prize
    
    return ga_heuristics