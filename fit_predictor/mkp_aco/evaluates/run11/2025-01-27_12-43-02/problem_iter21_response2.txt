```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    diversity_score = (1 / normalized_weights).mean(axis=1)
    heuristics = (combined_score + diversity_score) / 2  # Balance between combined score and diversity
    threshold = np.percentile(heuristics, 75)  # Dynamic threshold based on 75th percentile
    return (heuristics > threshold) * 1  # Sparsify by setting elements below threshold to zero
```
