```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    # Normalize the combined score
    normalized_combined_score = combined_score / np.max(combined_score)
    # Use adaptive thresholds based on the 80th and 20th percentiles
    lower_threshold = np.percentile(normalized_combined_score, 20)
    upper_threshold = np.percentile(normalized_combined_score, 80)
    # Create heuristics matrix based on the thresholds
    heuristics = np.zeros_like(normalized_combined_score)
    heuristics[(normalized_combined_score >= lower_threshold) & (normalized_combined_score <= upper_threshold)] = 1.0
    return heuristics
```
