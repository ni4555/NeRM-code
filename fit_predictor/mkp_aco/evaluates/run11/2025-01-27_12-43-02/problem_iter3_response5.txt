```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    value_per_weight = prize / (np.sum(weight, axis=1) + 1e-8)  # Value per weight per dimension
    average_value_per_weight = np.mean(value_per_weight, axis=1)
    score = value_per_weight - average_value_per_weight  # Relative value per weight
    diversity_score = np.exp(-np.abs(score - np.mean(score)))  # Diversity-based scoring
    balance_score = np.exp(-np.sum((score - np.mean(score))**2, axis=1))  # Balance-based scoring
    combined_score = (score * diversity_score * balance_score) / (np.sum(diversity_score * balance_score, axis=1) + 1e-8)
    sparsified_score = np.where(combined_score > np.percentile(combined_score, 90), combined_score, 0)
    return sparsified_score
```
