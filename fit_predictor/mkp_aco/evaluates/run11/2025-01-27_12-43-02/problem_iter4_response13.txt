```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate normalized weights for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate score based on normalized weights and prizes
    score = np.sum(prize * normalized_weights, axis=1)
    # Calculate importance of each item by normalizing the score
    importance_normalized = score / np.sum(score)
    # Calculate the diversity score for each item, avoiding division by zero
    diversity_score = np.sum(normalized_weights, axis=1) / (np.sum(normalized_weights) + 1e-8)
    # Calculate the sparsity score based on the number of dimensions with weight > 0.5
    sparsity_score = np.mean(normalized_weights > 0.5)
    # Combine the importance, diversity, and sparsity scores
    combined_score = importance_normalized * diversity_score * sparsity_score
    # Normalize the combined score for interpretability
    normalized_combined_score = (combined_score - np.min(combined_score)) / (np.max(combined_score) - np.min(combined_score))
    # Apply a threshold to filter out less promising items
    threshold = np.mean(normalized_combined_score)
    # Create the heuristic scores based on the threshold
    heuristics = normalized_combined_score > threshold
    return heuristics.astype(int)
```
