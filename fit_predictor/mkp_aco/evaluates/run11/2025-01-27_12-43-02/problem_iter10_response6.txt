```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights based on the sum of weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights, avoiding division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate a combined importance metric using both score and ratio
    combined_importance = score * ratio
    
    # Normalize the importance scores to ensure they can be compared across different items
    max_importance = np.max(combined_importance)
    min_importance = np.min(combined_importance)
    normalized_importance = (combined_importance - min_importance) / (max_importance - min_importance)
    
    # Apply sparsity by setting a threshold to exclude items with low normalized importance
    threshold = np.percentile(normalized_importance, 90)  # Use the 90th percentile as a threshold
    
    # Create heuristics array where high importance items are more likely to be selected
    heuristics = (normalized_importance >= threshold).astype(float)
    
    # Optionally, you can adjust the heuristics scores to be more binary (0 or 1)
    # This step could be omitted if binary heuristics are not required
    heuristics[heuristics > 0.5] = 1
    heuristics[heuristics <= 0.5] = 0
    
    return heuristics
```
