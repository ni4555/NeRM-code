```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize prize by total prize
    normalized_prize = prize / np.sum(prize)
    # Normalize weights for each dimension
    normalized_weights = weight / np.sum(weight, axis=1)[:, None]
    # Calculate a score based on the ratio of prize to normalized weight
    score = normalized_prize * np.sum(normalized_weights, axis=1)
    # Apply a simple sparsity by setting scores below a threshold to zero
    threshold = np.percentile(score, 50)  # 50th percentile threshold
    heuristics = np.where(score >= threshold, score, 0)
    # Normalize the scores again to ensure they are all between 0 and 1
    heuristics /= np.sum(heuristics)
    return heuristics
```
