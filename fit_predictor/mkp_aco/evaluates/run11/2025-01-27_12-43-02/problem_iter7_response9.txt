```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Emphasize high-scores by applying a sigmoid function to the scores
    emphasized_score = 1 / (1 + np.exp(-combined_score))
    
    # Refine selection by ensuring at least one dimension of each item contributes
    refinement_factor = np.min(weight, axis=1) / np.sum(weight, axis=1)
    
    # Normalize scores and apply domain insight
    normalized_combined_score = emphasized_score * refinement_factor
    importance_normalized = normalized_combined_score / np.sum(normalized_combined_score)
    
    # Minimize sparsity by setting unpromising elements to zero
    importance_normalized[importance_normalized < 0.1] = 0
    
    return importance_normalized
```
