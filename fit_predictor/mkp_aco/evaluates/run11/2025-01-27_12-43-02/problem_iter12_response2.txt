```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio

    # Calculate a dynamic threshold based on the 75th percentile
    threshold = np.percentile(combined_score, 75)

    # Use a dynamic sparsity factor that decreases with the size of the gap between the item's score
    # and the threshold, encouraging sparsity
    sparsity_factor = np.exp(-np.abs(combined_score - threshold))
    
    # Adjust the importance normalized by the sparsity factor
    importance_normalized = combined_score * sparsity_factor / np.sum(sparsity_factor)

    return importance_normalized
```
