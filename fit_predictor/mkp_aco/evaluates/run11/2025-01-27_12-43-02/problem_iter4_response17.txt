```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Calculate normalized weights for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Value score based on normalized weights
    value_score = np.sum(prize * normalized_weights, axis=1)
    
    # Diversity score to ensure no item is too dominant
    diversity_score = np.mean(normalized_weights)
    
    # Sparsity score to encourage inclusion of fewer items
    sparsity_score = np.sum(normalized_weights > 0.5)
    
    # Balance score to encourage uniform weight distribution
    balance_score = np.mean(weight, axis=1) / np.sum(weight, axis=1)
    
    # Combine scores using a weighted sum
    combined_score = (0.4 * value_score + 0.2 * diversity_score + 0.2 * sparsity_score + 0.2 * balance_score)
    
    # Apply a threshold based on the 90th percentile of the combined scores
    sparsity_threshold = np.percentile(combined_score, 90)
    heuristics = combined_score > sparsity_threshold
    
    return heuristics.astype(int)
```
