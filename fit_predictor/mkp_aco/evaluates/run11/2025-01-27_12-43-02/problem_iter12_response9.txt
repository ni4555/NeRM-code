```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio

    # Dynamically adjust the threshold based on the 50th percentile of combined_score
    threshold = np.percentile(combined_score, 50)

    # Use sparsity to balance simplicity and performance
    sparsity_factor = 1 / (np.sum(combined_score > threshold) + 1e-8)
    importance_normalized = combined_score * sparsity_factor

    # Emphasize high scores by increasing the sparsity factor
    importance_normalized[combined_score > threshold] *= (1 + sparsity_factor)

    return importance_normalized
```
