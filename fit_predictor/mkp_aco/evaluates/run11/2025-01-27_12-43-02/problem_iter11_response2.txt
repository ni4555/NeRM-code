```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Introduce diversity by considering the sparsity of the weight matrix
    sparsity = np.count_nonzero(weight, axis=1) / weight.shape[0]
    
    # Balance relevance and diversity
    combined_score = score * (1 - sparsity)
    
    # Normalize scores to ensure they sum to 1
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Dynamically adapt thresholds based on the average prize value
    threshold = np.max(importance_normalized) * 0.5
    
    # Sparsify the heuristics by setting elements below the threshold to zero
    heuristics = np.where(importance_normalized > threshold, importance_normalized, 0)
    
    return heuristics
```
