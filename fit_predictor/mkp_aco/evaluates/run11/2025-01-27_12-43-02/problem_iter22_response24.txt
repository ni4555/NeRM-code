```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]

    # Calculate the importance of each item
    importance = np.sum(prize * normalized_weights, axis=1)

    # Calculate diversity score
    diversity_score = np.std(normalized_weights, axis=1)

    # Combine importance and diversity into a single heuristic score
    combined_score = importance / (importance + diversity_score)

    # Normalize the combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)

    # Incorporate exploration by adding a random factor
    exploration_factor = np.random.rand(n)
    heuristics = combined_score_normalized * (1 - 0.1) + exploration_factor * 0.1

    # Ensure the heuristics sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
