```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize the prize to consider the overall value of items
    normalized_prize = prize / np.sum(prize)
    # Normalize the weights to consider the density of items
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate the score by multiplying normalized prize and normalized weights
    score = np.sum(normalized_prize * normalized_weights, axis=1)
    # Calculate the ratio of prize to the sum of weights to account for the remaining capacity
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    # Combine the scores and ratios to get a final score
    combined_score = score * ratio
    # Normalize the combined scores to ensure they sum to 1
    importance_normalized = combined_score / np.sum(combined_score)
    # Sparsify the heuristics by setting a threshold for the minimum acceptable score
    threshold = np.mean(importance_normalized)
    heuristics = np.where(importance_normalized >= threshold, importance_normalized, 0)
    return heuristics
```
