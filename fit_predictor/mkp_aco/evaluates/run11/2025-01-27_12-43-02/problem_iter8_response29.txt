```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Using domain knowledge or experimentation to determine the percentile threshold
    percentile_threshold = np.percentile(combined_score, 90)
    
    # Dynamically sparsifying based on the percentile threshold
    sparsified_score = np.where(combined_score >= percentile_threshold, combined_score, 0)
    
    # Adding small perturbations to avoid local optima
    perturbation = np.random.normal(0, 0.01, size=sparsified_score.shape)
    sparsified_score += perturbation
    
    # Normalizing scores for consistent interpretation
    normalized_sparsified_score = sparsified_score / np.max(sparsified_score)
    
    return normalized_sparsified_score
```
