```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Add a small value to the combined score to prevent zero values
    importance_normalized += 1e-8
    
    # Apply a diversity factor to encourage different item selections
    diversity_factor = np.random.rand(*importance_normalized.shape)
    importance_with_diversity = importance_normalized * diversity_factor
    
    # Normalize the scores with the diversity factor included
    min_combined_score = np.min(importance_with_diversity)
    max_combined_score = np.max(importance_with_diversity)
    normalized_combined_score = (importance_with_diversity - min_combined_score) / (max_combined_score - min_combined_score)
    
    # Random perturbation to encourage exploration
    random_perturbation = np.random.rand(*normalized_combined_score.shape) * 0.01
    heuristics = normalized_combined_score + random_perturbation
    
    return heuristics
```
