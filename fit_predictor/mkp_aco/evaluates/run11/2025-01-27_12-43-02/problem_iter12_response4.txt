```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Calculate the sparsity level based on the standard deviation and the 90th percentile
    sparsity_level = np.std(importance_normalized)
    dynamic_threshold = np.percentile(importance_normalized, 90) + sparsity_level
    
    # Apply the dynamic threshold to create the heuristics
    heuristics = np.where(importance_normalized >= dynamic_threshold, importance_normalized, 0)
    
    return heuristics
```
