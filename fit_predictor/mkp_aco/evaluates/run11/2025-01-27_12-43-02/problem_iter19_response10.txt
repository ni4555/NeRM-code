```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    # Calculate normalized prizes based on the maximum prize
    normalized_prize = prize / np.max(prize)
    # Calculate normalized weights by using the 75th percentile of each dimension
    weight_percentile = np.percentile(weight, 75, axis=1)
    normalized_weight = weight / weight_percentile[:, None]
    # Calculate importance by combining normalized prize and weight
    importance = normalized_prize * normalized_weight
    # Apply sparsity by setting importance below a threshold to zero
    threshold = np.percentile(importance, 5)
    sparsified_importance = np.where(importance > threshold, importance, 0)
    # Refine heuristics by balancing exploration and exploitation
    # Use a simple exploration-exploitation strategy: higher weights for higher importance
    heuristics = sparsified_importance / np.sum(sparsified_importance)
    return heuristics
```
