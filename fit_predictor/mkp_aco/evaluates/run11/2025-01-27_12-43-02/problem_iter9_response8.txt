```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate the contribution of each item to the overall diversity
    diversity_score = np.mean(weight, axis=1)
    # Normalize the weights by their diversity score
    normalized_weights = weight / diversity_score[:, None]
    # Calculate the score based on the normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    # Normalize the scores to balance relevance and diversity
    normalized_score = score / np.sum(score)
    # Add a diversity factor to balance with relevance
    diversity_factor = diversity_score / np.sum(diversity_score)
    # Combine relevance and diversity into a final heuristic score
    combined_score = normalized_score * diversity_factor
    # Set low scoring items to zero to minimize sparsity
    combined_score[combined_score < 0.1] = 0
    return combined_score
```
