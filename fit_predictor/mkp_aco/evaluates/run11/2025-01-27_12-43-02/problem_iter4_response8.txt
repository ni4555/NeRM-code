```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    value_score = np.sum(prize * normalized_weights, axis=1)
    balance_score = np.mean(weight, axis=1) / np.sum(weight, axis=1)
    # Combine scores with proper weighting
    combined_score = 0.6 * value_score + 0.2 * np.mean(normalized_weights) + 0.2 * np.mean(balance_score)
    # Normalize combined score to get a weighted importance
    importance_normalized = combined_score / np.sum(combined_score)
    sparsity_threshold = np.percentile(importance_normalized, 90)
    heuristics = importance_normalized > sparsity_threshold
    return heuristics.astype(int)
```
