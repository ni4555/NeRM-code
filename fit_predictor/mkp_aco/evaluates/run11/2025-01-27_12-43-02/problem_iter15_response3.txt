```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate normalized weights based on the sum of weights
    normalized_weights = np.sum(weight, axis=1, keepdims=True) ** (-1)
    # Calculate a score based on the prize and normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    # Calculate a ratio that balances the prize-to-weight ratio and the inverse of the number of dimensions
    ratio = (prize / (np.sum(weight, axis=1) + 1e-8)) * (m / (m + 1))
    # Combine the score with the ratio
    combined_score = score * ratio
    # Normalize the combined score to get the importance of each item
    importance_normalized = combined_score / np.sum(combined_score)
    # Sparsify the heuristics by setting a threshold
    threshold = np.percentile(importance_normalized, 90)  # Set threshold to 90th percentile
    heuristics = np.where(importance_normalized >= threshold, importance_normalized, 0)
    return heuristics
```
