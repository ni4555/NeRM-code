```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    # Normalize weights based on the sum of weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights, avoiding division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate combined importance using score and ratio
    combined_importance = score * ratio
    
    # Incorporate diversity by using the standard deviation of the normalized weights
    diversity = np.std(normalized_weights, axis=1)
    
    # Combine importance and diversity
    combined_score = combined_importance * diversity
    
    # Normalize the importance-diversity scores
    normalized_combined_score = combined_score / np.sum(combined_score)
    
    # Calculate dynamic thresholds for importance and diversity
    importance_threshold = np.percentile(normalized_combined_score, 90)
    diversity_threshold = np.percentile(diversity, 80)
    
    # Apply thresholding to the normalized scores
    heuristics = np.zeros(n)
    heuristics[normalized_combined_score >= importance_threshold] = 1
    
    # Refine heuristics by emphasizing diversity
    heuristics[diversity >= diversity_threshold] = 1
    
    # Adjust the heuristics to have a sparsity effect
    sparsity_level = np.percentile(normalized_combined_score, 10)
    heuristics[normalized_combined_score < sparsity_level] = 0
    
    return heuristics
```
