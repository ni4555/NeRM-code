```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Calculate the ratio of prize to the sum of weights for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Normalize the ratios to obtain importance scores
    importance_normalized = ratio / np.sum(ratio)
    
    # Incorporate a sparsity parameter to balance diversity and importance
    sparsity_param = np.percentile(importance_normalized, 90)  # Sparsity level as an example
    heuristics = (importance_normalized >= sparsity_param).astype(float)
    
    return heuristics
```
