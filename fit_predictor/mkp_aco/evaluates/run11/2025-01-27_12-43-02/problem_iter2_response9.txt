```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate the ratio of prize to the sum of weights
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    # Calculate the score for each item as the product of ratio and normalized weight
    score = np.sum(ratio * weight, axis=1)
    # Normalize the scores by their sum to avoid sparsity
    normalized_score = score / np.sum(score)
    # Apply a threshold to filter out items with low scores
    sparsity_threshold = np.mean(normalized_score)
    heuristics = normalized_score > sparsity_threshold
    return heuristics.astype(int)
```
