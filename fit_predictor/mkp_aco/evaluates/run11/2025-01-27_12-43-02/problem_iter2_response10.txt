```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio

    # Non-linear transformation to amplify differences
    amplified_score = np.log(1 + combined_score)

    # Use sparsity to filter out less promising items
    sparsity_threshold = np.mean(amplified_score)
    heuristics = amplified_score > sparsity_threshold

    # Normalize and scale the final heuristics values
    heuristics_normalized = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())

    return heuristics_normalized.astype(int)
```
