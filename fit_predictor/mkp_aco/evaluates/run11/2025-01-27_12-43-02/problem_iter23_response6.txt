```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    diversity_score = 1 / np.linalg.norm(weight, axis=1)  # Sparsity
    combined_score = (score * diversity_score) / (np.sum(score * diversity_score) + 1e-8)
    importance_normalized = combined_score / np.sum(combined_score)
    importance_normalized[np.argsort(-combined_score) > 0.1 * n] = 0  # Sparsify
    return importance_normalized
```
