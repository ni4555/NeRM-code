```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights based on the sum of weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights, avoiding division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate combined importance using score and ratio
    combined_importance = score * ratio
    
    # Normalize the importance scores for comparison
    min_importance = np.min(combined_importance)
    max_importance = np.max(combined_importance)
    normalized_importance = (combined_importance - min_importance) / (max_importance - min_importance)
    
    # Incorporate diversity by considering the spread of the normalized weights
    diversity_score = np.std(normalized_weights, axis=1)
    importance_diversified = normalized_importance * diversity_score
    
    # To avoid threshold overfitting, calculate thresholds based on percentile scores
    median_importance = np.median(importance_diversified)
    heuristics = (importance_diversified >= median_importance).astype(float)
    
    # Balance normalization by ensuring that items are not all pushed to either extreme
    # Adjust the heuristics based on a percentile that balances the scores
    lower_threshold = np.percentile(importance_diversified, 25)  # 25th percentile
    upper_threshold = np.percentile(importance_diversified, 75)  # 75th percentile
    heuristics = np.where((importance_diversified >= lower_threshold) & (importance_diversified <= upper_threshold), 1.0, 0.0)
    
    return heuristics
```
