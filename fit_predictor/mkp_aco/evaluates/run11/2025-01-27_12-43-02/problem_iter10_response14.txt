```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    combined_score = score * ratio
    # Normalize combined score and use a higher percentile threshold
    importance_normalized = combined_score / np.sum(combined_score)
    threshold = np.percentile(importance_normalized, 95)
    heuristics = (importance_normalized >= threshold).astype(float)
    return heuristics
```
