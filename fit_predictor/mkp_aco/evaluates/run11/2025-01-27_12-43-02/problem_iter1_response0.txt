```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate the ratio of prize to total weight in each dimension
    prize_per_weight = prize / weight
    # Calculate the average of the ratios across dimensions
    avg_prize_per_weight = np.mean(prize_per_weight, axis=1)
    # Calculate the standard deviation of the ratios across dimensions
    std_prize_per_weight = np.std(prize_per_weight, axis=1)
    # Use the average and standard deviation to create a score
    score = avg_prize_per_weight / (std_prize_per_weight + 1e-6)
    # Sparsify the heuristics by setting low-scoring items to zero
    sparsified_score = np.where(score > 1, score, 0)
    return sparsified_score
```
