```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    value_score = np.sum(prize * normalized_weights, axis=1)
    weight_score = np.sum(weight, axis=1) / np.sum(weight, axis=1).max()
    diversity_score = np.where(weight_score < 1.5, 1, 0)
    balance_score = 1 - weight_score
    combined_score = value_score * balance_score * diversity_score
    smoothed_score = np.clip(combined_score, 0, np.max(combined_score))
    sparsified_score = smoothed_score / np.sum(smoothed_score) * len(combined_score)
    sparsified_score[sparsified_score < 0.1] = 0  # Filter out scores that are too low
    return sparsified_score
```
