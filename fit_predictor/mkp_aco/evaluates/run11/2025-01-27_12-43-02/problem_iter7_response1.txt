```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    # Emphasize high-scores
    high_score_factor = np.exp(score / (np.max(score) + 1e-8))
    # Minimize sparsity
    sparsity_factor = 1 / (np.sum(combined_score > 0) + 1e-8)
    # Refine selection
    refined_score = high_score_factor * sparsity_factor
    importance_normalized = refined_score / np.sum(refined_score)
    return importance_normalized
```
