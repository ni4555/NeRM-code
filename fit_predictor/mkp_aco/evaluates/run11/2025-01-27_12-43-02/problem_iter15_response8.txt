```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    sparsity_factor = np.mean(weight.sum(axis=1)) / np.mean(weight)
    importance = score / (sparsity_factor + 1e-8)  # Adjusting sparsity factor
    exploration_exploitation_balance = np.random.random(len(importance))
    combined_heuristic = importance * exploration_exploitation_balance
    return combined_heuristic / np.sum(combined_heuristic)
```
