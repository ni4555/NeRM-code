```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    # Emphasize sparsity by setting a threshold below which the score is set to zero
    threshold = np.percentile(combined_score, 25)  # Lower 25th percentile
    sparsified_score = np.where(combined_score > threshold, combined_score, 0)
    # Normalize the sparsified score to get a weighted importance
    importance_normalized = sparsified_score / np.sum(sparsified_score)
    return importance_normalized
```
