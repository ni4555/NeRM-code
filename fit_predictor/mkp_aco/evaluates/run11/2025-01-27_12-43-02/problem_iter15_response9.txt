```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    # Adjust the score by adding sparsity (items with lower normalized weight get lower score)
    sparsity_adjustment = 1 - normalized_weights
    adjusted_combined_score = combined_score * sparsity_adjustment
    importance_normalized = adjusted_combined_score / np.sum(adjusted_combined_score)
    return importance_normalized
```
