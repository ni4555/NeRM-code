```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Balance item relevance and diversity
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    relevance_score = np.sum(prize * normalized_weights, axis=1)
    
    # Minimize sparsity
    diversity_score = -np.log(1 / (prize + 1e-8))  # Using log as a diversity metric
    
    # Normalize scores for consistency
    combined_score = relevance_score + diversity_score
    normalized_combined_score = combined_score / np.sum(combined_score)
    
    # Minimize sparsity by setting low heuristics to zero
    heuristics = np.where(normalized_combined_score > 0.1, normalized_combined_score, 0.0)
    
    return heuristics
```
