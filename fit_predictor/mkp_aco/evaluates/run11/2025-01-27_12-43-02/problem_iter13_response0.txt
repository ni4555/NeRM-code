```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Adjusting for sparsity by setting low-score items to a very low value
    sparsity_threshold = np.percentile(combined_score, 10)
    importance_normalized = np.where(combined_score >= sparsity_threshold, combined_score, 0)
    
    # Normalize scores to sum to 1
    normalized_scores = importance_normalized / np.sum(importance_normalized)
    
    return normalized_scores
```
