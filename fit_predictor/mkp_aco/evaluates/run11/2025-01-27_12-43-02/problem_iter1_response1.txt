```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    # Calculate the ratio of prize to weight for each item and each dimension
    ratio = np.zeros((n, m))
    for i in range(n):
        for j in range(m):
            ratio[i, j] = prize[i] / weight[i, j]
    # Calculate the average ratio across all dimensions for each item
    average_ratio = np.sum(ratio, axis=1)
    # Calculate the overall score by considering the product of average ratio and dimension constraints
    score = average_ratio * np.ones(m)
    # Sparsify the score by setting a threshold, any score below the threshold is set to 0
    threshold = np.max(score) * 0.5
    score[score < threshold] = 0
    return score
```
