```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate normalized weight for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate the score based on normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    # Calculate the ratio of prize to the sum of weights for each item
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Adding a small constant to avoid division by zero
    # Calculate the combined score
    combined_score = score * ratio
    # Apply sparsity by setting items with low combined score to zero
    sparsity_threshold = np.percentile(combined_score, 10)  # Using the 10th percentile as a threshold
    importance_normalized = np.where(combined_score >= sparsity_threshold, combined_score, 0)
    # Normalize the heuristics to sum to 1
    importance_normalized /= np.sum(importance_normalized)
    return importance_normalized
```
