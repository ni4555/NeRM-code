```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate the weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)[:, None]
    # Normalize the ratio by its maximum value to balance the importance of items
    normalized_ratio = ratio / np.max(ratio)
    # Use the percentile of the prize to determine the importance of each item
    importance = np.argsort(prize)[::-1]
    # Define a threshold based on the 90th percentile of the sorted prize values
    threshold = np.percentile(prize, 90)
    # Create a boolean mask where items are considered important
    important_items = prize > threshold
    # Sparsify the heuristics by setting less important items to 0
    sparsified_heuristics = np.where(important_items[:, None], normalized_ratio, 0)
    return sparsified_heuristics
```
