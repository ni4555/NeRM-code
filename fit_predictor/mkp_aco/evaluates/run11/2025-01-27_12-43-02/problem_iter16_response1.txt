```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights and calculate the norm of weights for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate the score based on the prize and normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    # Balance the score with the inverse of the number of dimensions
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    # Normalize the combined score to get the importance of each item
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Add a small constant to ensure non-zero values for sparsity
    importance_normalized += 1e-8
    
    # Random perturbation to encourage exploration
    random_perturbation = np.random.rand(*importance_normalized.shape) * 0.01
    heuristics = importance_normalized + random_perturbation
    
    # Normalize again after adding perturbation to ensure the sum is 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
