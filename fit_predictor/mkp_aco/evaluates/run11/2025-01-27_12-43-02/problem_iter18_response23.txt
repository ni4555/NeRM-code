```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize weights
    norm_weights = np.linalg.norm(weight, axis=1)
    normalized_weights = weight / norm_weights[:, None]
    
    # Calculate item scores based on prize and normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate diversity by measuring how spread out the weights are
    diversity = np.sum(weight, axis=1) ** -0.5  # Weight inversely proportional to square root of total weight
    
    # Calculate combined importance considering both score and diversity
    importance = score * diversity
    
    # Normalize importance to scale values between 0 and 1
    max_importance = np.max(importance)
    min_importance = np.min(importance)
    importance_normalized = (importance - min_importance) / (max_importance - min_importance)
    
    # Balance local and global considerations by considering a dynamic threshold
    global_score = np.mean(importance_normalized)
    heuristics = (importance_normalized > global_score).astype(float)
    
    # Optionally, to enforce sparsity, we can use a percentile threshold
    threshold = np.percentile(importance_normalized, 80)  # Use 80th percentile as threshold
    heuristics = (heuristics >= threshold).astype(float)
    
    # If needed, convert heuristics to binary (0 or 1)
    heuristics = (heuristics > 0.5).astype(int)
    
    return heuristics
```
