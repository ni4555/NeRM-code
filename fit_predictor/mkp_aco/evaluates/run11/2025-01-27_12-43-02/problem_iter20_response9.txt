```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    
    # Normalize weights based on the sum of weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights, avoiding division by zero
    sum_weights = np.sum(weight, axis=1) + 1e-8  # Small value to avoid division by zero
    ratio = prize / sum_weights
    
    # Calculate combined importance using score and ratio
    combined_importance = score * ratio
    
    # Normalize the importance scores
    importance_normalized = combined_importance / np.sum(combined_importance)
    
    # Calculate diversity score
    diversity_score = np.std(normalized_weights, axis=1)
    
    # Combine importance and diversity using a weighted sum with dynamic weights
    importance_weight = 0.6 + 0.1 * np.random.rand()  # Weight for importance, varies slightly with each call
    diversity_weight = 0.4 + 0.1 * np.random.rand()  # Weight for diversity, varies slightly with each call
    combined_score = importance_weight * importance_normalized + diversity_weight * diversity_score
    
    # Normalize combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)
    
    # Dynamic threshold based on the standard deviation of the normalized scores
    threshold = np.std(combined_score_normalized)
    
    # Apply thresholding to determine the heuristics
    heuristics = (combined_score_normalized >= threshold).astype(float)
    
    # Incorporate a sparsity parameter that balances the diversity and importance
    sparsity_param = np.percentile(combined_score_normalized, 90)  # Sparsity level as an example
    heuristics[combined_score_normalized < sparsity_param] = 0
    
    # Introduce a balancing factor to control the influence of the random factor
    random_factor = np.random.rand(len(combined_score_normalized))
    random_factor *= 0.2  # Random factor for balancing exploration and exploitation
    heuristics = heuristics * (1 - random_factor) + random_factor
    
    return heuristics
```
