```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate normalized weights based on the sum of weights in each dimension
    normalized_weights = weight / np.sum(weight, axis=1)[:, None]
    # Normalize prizes based on the sum of prizes
    normalized_prize = prize / np.sum(prize)
    # Calculate a diversity score that promotes items with higher diversity
    diversity_score = np.exp(-np.sum(normalized_weights**2, axis=1))
    # Calculate importance based on prize and weight ratio
    importance = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    # Combine importance and diversity scores, balancing the two factors
    combined_score = (importance * 0.7 + diversity_score * 0.3) / np.sum(importance * 0.7 + diversity_score * 0.3)
    # Apply percentile threshold to promote diversity in the selection
    percentile_threshold = np.percentile(combined_score, 75)
    # Set scores below the percentile threshold to zero to sparsify the heuristics
    sparsified_combined_score = np.where(combined_score >= percentile_threshold, combined_score, 0)
    return sparsified_combined_score
```
