```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights based on the sum of weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the combined importance metric using prize and normalized weight
    importance = prize * normalized_weights
    
    # Normalize the importance scores to ensure they can be compared across different items
    max_importance = np.max(importance)
    min_importance = np.min(importance)
    normalized_importance = (importance - min_importance) / (max_importance - min_importance)
    
    # Apply sparsity by setting a threshold to exclude items with low normalized importance
    threshold = np.percentile(normalized_importance, 90)  # Use the 90th percentile as a threshold
    
    # Create heuristics array where high importance items are more likely to be selected
    heuristics = (normalized_importance >= threshold).astype(float)
    
    # Adjust the heuristics scores to be more binary (0 or 1)
    heuristics[heuristics > 0.5] = 1
    heuristics[heuristics <= 0.5] = 0
    
    return heuristics
```
