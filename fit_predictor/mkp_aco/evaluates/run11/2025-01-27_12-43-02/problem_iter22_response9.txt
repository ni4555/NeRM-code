```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights using min-max scaling
    min_weight = np.min(weight, axis=1)
    max_weight = np.max(weight, axis=1)
    normalized_weights = (weight - min_weight) / (max_weight - min_weight)

    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)

    # Calculate the ratio of prize to the sum of weights, avoiding division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)

    # Combine importance using score and ratio
    importance = score * ratio

    # Normalize importance scores
    importance_normalized = importance / np.sum(importance)

    # Calculate diversity score
    diversity_score = np.std(normalized_weights, axis=1)

    # Combine importance and diversity using a weighted sum
    importance_weight = 0.6
    diversity_weight = 0.4
    combined_score = importance_weight * importance_normalized + diversity_weight * diversity_score

    # Normalize combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)

    # Dynamically adjust thresholds based on the distribution of scores
    threshold = np.percentile(combined_score_normalized, 75)  # Using 75th percentile as a threshold

    # Apply thresholding to determine the heuristics
    heuristics = (combined_score_normalized >= threshold).astype(float)

    # Adjust sparsity based on the 95th percentile of the normalized combined scores
    sparsity_param = np.percentile(combined_score_normalized, 95)
    heuristics[combined_score_normalized < sparsity_param] = 0

    return heuristics
```
