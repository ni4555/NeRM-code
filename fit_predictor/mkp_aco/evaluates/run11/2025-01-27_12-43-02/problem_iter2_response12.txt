```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    
    # Calculate additional criteria such as sparsity and diversity
    sparsity = np.sum(normalized_weights, axis=1)
    diversity = np.sum((normalized_weights - np.mean(normalized_weights))**2, axis=1)
    
    # Balance scores based on different criteria
    balanced_score = 0.5 * combined_score + 0.3 * sparsity + 0.2 * diversity
    
    # Refine thresholds and apply heuristics
    sparsified_score = np.where(balanced_score > np.mean(balanced_score), balanced_score, 0)
    heuristics = sparsified_score / np.max(sparsified_score)  # Normalize to get probability-like values
    heuristics = (heuristics > 0.5).astype(int)  # Threshold to get binary heuristics
    return heuristics
```
