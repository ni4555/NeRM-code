```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the weight ratio for each item
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    
    # Combine relevance and diversity by using both score and ratio
    combined = score * ratio
    
    # Normalize the combined scores to ensure they can be compared across different items
    max_combined = np.max(combined)
    min_combined = np.min(combined)
    normalized_combined = (combined - min_combined) / (max_combined - min_combined)
    
    # Incorporate diversity by considering the spread of the normalized weights
    diversity_score = np.std(normalized_weights, axis=1)
    
    # Combine normalized scores with diversity score
    importance_combined = normalized_combined * diversity_score
    
    # Apply sparsity by using a threshold
    threshold = np.percentile(importance_combined, 95)  # Use the 95th percentile as a threshold
    
    # Enforce binary output by thresholding
    heuristics = (importance_combined >= threshold).astype(float)
    
    return heuristics
```
