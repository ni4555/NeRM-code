```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights and calculate the score for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the weight ratio for each item
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    
    # Combine relevance and diversity by using both score and ratio
    combined = score * ratio
    
    # Normalize the combined scores to ensure they can be compared across different items
    max_combined = np.max(combined)
    min_combined = np.min(combined)
    importance_normalized = (combined - min_combined) / (max_combined - min_combined)
    
    # Incorporate diversity by considering the spread of the normalized weights
    diversity_score = np.std(normalized_weights, axis=1)
    
    # Combine importance and diversity into a final score
    final_score = importance_normalized * diversity_score
    
    # Normalize the final scores to ensure they can be compared across different items
    max_final = np.max(final_score)
    min_final = np.min(final_score)
    importance_final = (final_score - min_final) / (max_final - min_final)
    
    # Apply sparsity by using a percentile threshold
    threshold = np.percentile(importance_final, 95)  # Use the 95th percentile as a threshold
    heuristics = (importance_final >= threshold).astype(float)
    
    return heuristics
```
