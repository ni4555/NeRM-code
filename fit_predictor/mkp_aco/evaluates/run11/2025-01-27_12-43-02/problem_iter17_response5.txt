```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate normalized weight per item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate score based on normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    # Calculate importance ratio
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    # Calculate combined importance score
    combined_score = score * ratio
    # Normalize combined score for sparsity
    sparsity_threshold = np.percentile(combined_score, 25)
    importance_normalized = np.where(combined_score >= sparsity_threshold, combined_score, 0)
    return importance_normalized
```
