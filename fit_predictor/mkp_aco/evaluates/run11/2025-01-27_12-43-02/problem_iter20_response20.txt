```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Calculate the importance score based on prize-to-weight ratio
    importance_score = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the diversity score based on the standard deviation of normalized weights
    diversity_score = np.std(weight / np.sum(weight, axis=1)[:, None], axis=1)
    
    # Combine the importance and diversity scores using a simple weighted sum
    combined_score = 0.6 * importance_score + 0.4 * diversity_score
    
    # Normalize the combined scores
    combined_score_normalized = combined_score / np.sum(combined_score)
    
    # Use a threshold based on the maximum score to determine the heuristics
    threshold = np.max(combined_score_normalized)
    heuristics = (combined_score_normalized >= threshold).astype(float)
    
    # Incorporate a sparsity parameter that balances the diversity and importance
    sparsity_param = np.percentile(combined_score_normalized, 90)  # Sparsity level as an example
    heuristics[combined_score_normalized < sparsity_param] = 0
    
    return heuristics
```
