```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Calculate normalized weight
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    # Calculate score based on normalized weights
    score = np.sum(prize * normalized_weights, axis=1)
    # Calculate the inverse of the sum of weights plus a small epsilon to avoid zero division
    epsilon = 1e-8
    ratio = prize / (np.sum(weight, axis=1) + epsilon)
    # Combine the score and ratio into a heuristic
    combined_score = score * ratio
    # Normalize the combined score to get the heuristics
    importance_normalized = combined_score / np.sum(combined_score)
    # Adjust sparsity: items with lower combined score get a lower heuristic value
    sparsity_threshold = np.quantile(combined_score, 0.2)
    importance_normalized[combined_score < sparsity_threshold] = 0
    return importance_normalized
```
