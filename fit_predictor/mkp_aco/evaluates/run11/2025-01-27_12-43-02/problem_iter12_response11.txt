```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Calculate the average prize per unit weight for each item
    average_prize_per_weight = prize / np.sum(weight, axis=1)[:, None]
    
    # Calculate the average prize per unit weight in each dimension
    average_prize_per_weight_dimension = np.sum(prize * weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Combine the average prize per weight and the average prize per weight in each dimension
    combined_score = average_prize_per_weight * average_prize_per_weight_dimension
    
    # Normalize the combined score to ensure it can be compared across different items
    max_combined_score = np.max(combined_score)
    min_combined_score = np.min(combined_score)
    combined_score_normalized = (combined_score - min_combined_score) / (max_combined_score - min_combined_score)
    
    # Apply a logarithmic transformation to the normalized score to reduce the impact of outliers
    # and ensure that the heuristic values are well-distributed
    heuristics = np.log1p(combined_score_normalized)
    
    # Apply sparsity by setting a threshold and only including items above this threshold
    threshold = np.percentile(heuristics, 90)  # Use the 90th percentile as a threshold
    heuristics[heuristics >= threshold] = 1
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
