```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights to get the density of each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    density = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the utility ratio for each item
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Add a small constant to avoid division by zero
    
    # Importance based on density and utility ratio
    importance = density * ratio
    
    # Normalize the importance scores
    importance_normalized = importance / np.sum(importance)
    
    # Adjust sparsity by setting lower threshold values to zero
    threshold = np.mean(importance_normalized) * 0.5
    heuristics = np.where(importance_normalized > threshold, importance_normalized, 0)
    
    return heuristics
```
