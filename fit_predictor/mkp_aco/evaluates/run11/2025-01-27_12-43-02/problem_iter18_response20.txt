```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    
    # Calculate the normalized weight for each item across all dimensions
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the importance based on the sum of prizes weighted by normalized weights
    importance = np.dot(prize, normalized_weights)
    
    # Normalize the importance scores to ensure comparability
    normalized_importance = importance / np.sum(importance)
    
    # Calculate diversity by considering the spread of the normalized weights
    diversity = np.std(normalized_weights, axis=1)
    
    # Balance importance and diversity by using a combination of both
    balanced_score = normalized_importance * diversity
    
    # Normalize the balanced score to have a sum of 1 for all items
    normalized_balanced_score = balanced_score / np.sum(balanced_score)
    
    # Use the normalized balanced score to create heuristics
    heuristics = normalized_balanced_score
    
    # Apply a sparsity threshold to ensure diversity
    sparsity_param = np.percentile(normalized_balanced_score, 90)
    heuristics[heuristics < sparsity_param] = 0
    
    # Binary adjustment of heuristics scores to ensure they are either 0 or 1
    heuristics = np.where(heuristics >= 0.5, 1.0, 0.0)
    
    return heuristics
```
