```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    
    # Normalize the prize to account for the relative value of items
    prize_normalized = prize / np.sum(prize)
    
    # Normalize the weights to get a sense of the space each item occupies
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the importance of each item based on the normalized prize and weight
    importance = prize_normalized * np.sum(normalized_weights, axis=1)
    
    # Calculate the diversity score for each item
    diversity_score = np.std(normalized_weights, axis=1)
    
    # Combine importance and diversity into a single score
    combined_score = importance * diversity_score
    
    # Normalize the combined score to make it relative to the entire set of items
    combined_score_normalized = combined_score / np.sum(combined_score)
    
    # Define a dynamic threshold for inclusion based on the 95th percentile of the normalized scores
    threshold = np.percentile(combined_score_normalized, 95)
    
    # Use the threshold to determine the heuristics for each item
    heuristics = (combined_score_normalized >= threshold).astype(float)
    
    # Refine sparsity parameters by considering the 90th percentile of the normalized combined score
    sparsity_param = np.percentile(combined_score_normalized, 90)
    heuristics[combined_score_normalized < sparsity_param] = 0
    
    # Introduce a random perturbation to encourage exploration and avoid local optima
    random_factor = np.random.rand(len(combined_score_normalized))
    perturbation = np.random.normal(0, 0.1, len(combined_score_normalized))  # Small noise for exploration
    heuristics = heuristics * random_factor + (1 - random_factor) + perturbation
    
    # Ensure that the heuristics are bounded between 0 and 1
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
