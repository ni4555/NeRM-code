```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    
    # Normalize weights based on the sum of weights
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate the score for each item based on the normalized weight
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights, avoiding division by zero
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Combine score and ratio to get a comprehensive importance measure
    combined_score = score * ratio
    
    # Incorporate diversity by considering the spread of the normalized weights
    diversity_score = np.std(normalized_weights, axis=1)
    
    # Use multiple metrics to calculate the importance of each item
    importance = combined_score * diversity_score
    
    # Normalize the importance scores to ensure they sum to 1
    importance_normalized = importance / np.sum(importance)
    
    # Set a dynamic threshold based on a specified percentile
    threshold = np.percentile(importance_normalized, 90)  # 90th percentile as an example
    
    # Create heuristics array where high importance items are more likely to be selected
    heuristics = (importance_normalized >= threshold).astype(float)
    
    return heuristics
```
