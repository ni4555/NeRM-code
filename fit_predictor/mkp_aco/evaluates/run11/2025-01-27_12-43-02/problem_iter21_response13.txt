```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Introduce randomness for diversity
    randomness = np.random.rand(len(importance_normalized))
    diversity_heuristic = importance_normalized * randomness
    
    # Combine normalized importance and diversity
    final_heuristic = (importance_normalized + diversity_heuristic) / 2
    
    # Sparsify the heuristics by setting a threshold
    threshold = np.mean(final_heuristic) * 0.5
    sparsified_heuristic = (final_heuristic > threshold).astype(float)
    
    return sparsified_heuristic
```
