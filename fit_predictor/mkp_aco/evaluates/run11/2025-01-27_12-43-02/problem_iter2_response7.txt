```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize weights by their norm to get a uniform scale
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    
    # Calculate score by multiplying normalized weights with prize
    score = np.sum(prize * normalized_weights, axis=1)
    
    # Calculate the ratio of prize to the sum of weights
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    
    # Combine the score and ratio to get a combined score
    combined_score = score * ratio
    
    # Prune scores based on a global measure (mean combined score)
    sparsified_score = np.where(combined_score > np.mean(combined_score), combined_score, 0)
    
    # Incorporate item diversity considerations by considering sparsity
    # Here, we are simply using the number of non-zero elements as a proxy for diversity
    sparsity_threshold = np.count_nonzero(sparsified_score) / n
    heuristics = (sparsified_score > 0) & (sparsified_score < sparsity_threshold)
    
    return heuristics.astype(int)
```
