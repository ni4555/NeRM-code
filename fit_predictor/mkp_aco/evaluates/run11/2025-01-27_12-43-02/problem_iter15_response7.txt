```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    exploration_factor = np.random.rand(prize.size)
    exploitation_factor = combined_score
    balance_factor = exploration_factor + exploitation_factor
    sparsity_factor = balance_factor / np.sum(balance_factor)
    return sparsity_factor
```
