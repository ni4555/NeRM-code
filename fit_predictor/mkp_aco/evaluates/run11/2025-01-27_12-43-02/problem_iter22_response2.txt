```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize weights based on the sum of weights for each item
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]

    # Calculate the importance of each item as the ratio of its prize to the sum of weights
    importance = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate diversity score
    diversity_score = np.std(normalized_weights, axis=1)

    # Combine importance and diversity into a heuristic score
    combined_score = importance * diversity_score

    # Normalize the combined scores for comparison
    combined_score_normalized = combined_score / np.sum(combined_score)

    # Employ dynamic thresholds for exploration and exploitation
    importance_threshold = np.percentile(combined_score_normalized, 80)
    diversity_threshold = np.percentile(combined_score_normalized, 20)

    # Apply the thresholds to determine the heuristics
    heuristics = np.zeros_like(combined_score_normalized)
    heuristics[(combined_score_normalized >= importance_threshold) & 
                (combined_score_normalized >= diversity_threshold)] = 1

    # Refine the heuristics to balance diversity and importance
    heuristics[combined_score_normalized < np.percentile(combined_score_normalized, 95)] = 0

    # Incorporate a sparsity parameter that emphasizes diversity
    sparsity_param = np.percentile(combined_score_normalized, 85)
    heuristics[combined_score_normalized < sparsity_param] = 0

    return heuristics
```
