```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    # Normalize the weights by the sum of each item's weights
    normalized_weights = weight / np.sum(weight, axis=1)[:, None]
    # Normalize the prize by the maximum prize value
    normalized_prize = prize / np.max(prize)
    # Calculate the score by summing the product of normalized prize and normalized weight
    score = np.sum(normalized_prize * normalized_weights, axis=1)
    # Calculate the score-to-weight ratio for each item
    score_to_weight_ratio = score / np.sum(weight, axis=1)
    # Use a sparsity threshold based on the maximum score-to-weight ratio
    sparsity_threshold = np.max(score_to_weight_ratio)
    # Filter heuristics based on the ratio being above the sparsity threshold
    heuristics = score_to_weight_ratio > sparsity_threshold
    return heuristics.astype(int)
```
