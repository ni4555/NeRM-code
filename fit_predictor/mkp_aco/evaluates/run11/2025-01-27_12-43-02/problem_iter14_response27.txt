```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    normalized_weights = np.linalg.norm(weight, axis=1) / np.sum(weight, axis=1)[:, None]
    score = np.sum(prize * normalized_weights, axis=1)
    ratio = prize / (np.sum(weight, axis=1) + 1e-8)  # Avoid division by zero
    combined_score = score * ratio
    importance_normalized = combined_score / np.sum(combined_score)
    
    # Calculate sparsity level based on standard deviation and a percentile
    sparsity_level = np.std(importance_normalized)
    dynamic_threshold = np.percentile(importance_normalized, 90) + sparsity_level
    
    # Consider multiple heuristics, such as variance reduction and sparsity
    variance_reducing_heuristics = combined_score / np.max(combined_score)
    sparsity_reducing_heuristics = np.exp(-importance_normalized / sparsity_level)
    
    # Combine heuristics based on weighted average where variance reduction is 0.5 and sparsity is 0.5
    combined_heuristics = (0.5 * variance_reducing_heuristics) + (0.5 * sparsity_reducing_heuristics)
    heuristics_normalized = combined_heuristics / np.sum(combined_heuristics)
    
    # Apply the dynamic threshold to create the heuristics
    heuristics = np.where(importance_normalized >= dynamic_threshold, heuristics_normalized, 0)
    
    return heuristics
```
