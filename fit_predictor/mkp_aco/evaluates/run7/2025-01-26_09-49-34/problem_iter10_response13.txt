```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize array to create a probability distribution
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average weight per item across all dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Calculate the normalized average weight for each item
    normalized_average_weight = average_weight / np.sum(average_weight)
    
    # Calculate the sparsity factor for each item
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the heuristic values based on normalized prize and normalized average weight
    heuristics = normalized_prize * normalized_average_weight
    
    # Adjust heuristics by penalizing low sparsity items
    heuristics *= (1 - sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold that balances prize-to-weight ratio and sparsity
    sparsity_threshold = np.mean(heuristics * (1 - sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Ensure that heuristics are positive
    heuristics = np.clip(heuristics, 0, None)
    
    return heuristics
```
