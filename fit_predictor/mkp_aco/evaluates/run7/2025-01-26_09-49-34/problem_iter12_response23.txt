```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight per item
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item, adding a small constant to avoid division by zero
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the initial heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Adjust heuristics based on sparsity, penalizing items with low sparsity
    heuristics *= (1 - sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Further refine heuristics using diversity and problem characteristics
    # Calculate diversity by considering the sum of normalized weights across all dimensions
    diversity = np.sum(weight, axis=0) / np.sum(weight)
    
    # Consider the overall problem characteristics by including both sparsity and diversity
    sparsity_diversity_factor = sparsity_factor * diversity
    
    # Adjust heuristics based on the combined sparsity and diversity factor
    heuristics *= (1 - sparsity_diversity_factor)
    
    # Normalize heuristics to balance the importance of different factors
    max_adjusted_heuristic = np.max(heuristics)
    if max_adjusted_heuristic > 0:
        heuristics /= max_adjusted_heuristic
    
    return heuristics
```
