```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to give relative importance to items
    normalized_prize = prize / np.sum(prize)
    
    # Calculate a diversity factor based on the standard deviation of weights
    diversity_factor = np.std(weight, axis=1)
    
    # Calculate a variance factor based on the sum of squared weights
    variance_factor = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Create a combined factor that balances prize value, diversity, and variance
    combined_factor = (normalized_prize / (diversity_factor + 1e-8)) * (1 - variance_factor)
    
    # Introduce a sparsity factor that encourages selecting only a subset of items
    sparsity_factor = np.random.rand(len(prize))
    
    # Adjust sparsity factor to be inversely proportional to the combined factor
    sparsity_factor = 1 / (sparsity_factor + 1e-8)
    sparsity_factor = sparsity_factor * combined_factor / np.sum(sparsity_factor * combined_factor)
    
    # Normalize sparsity factor to sum to 1
    sparsity_factor /= np.sum(sparsity_factor)
    
    # Multiply the combined factor with the sparsity factor to get the heuristics
    heuristics = combined_factor * sparsity_factor
    
    # Refine heuristics by iterating to adjust the balance between exploration and exploitation
    for _ in range(5):  # Perform iterative refinement for 5 iterations
        heuristics = (heuristics / np.sum(heuristics)) * (combined_factor / np.sum(combined_factor))
    
    return heuristics
```
