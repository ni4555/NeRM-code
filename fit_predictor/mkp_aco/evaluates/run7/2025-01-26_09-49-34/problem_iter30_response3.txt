```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to avoid dominated items
    normalized_prize = prize / np.max(prize)
    
    # Normalize weight to ensure all dimensions are comparable
    normalized_weight = weight / np.max(weight, axis=1, keepdims=True)
    
    # Calculate the diversity factor based on the standard deviation of normalized weights
    diversity_factor = np.std(normalized_weight, axis=1)
    
    # Calculate the variance of the normalized weights
    weight_variance = np.sum(normalized_weight**2, axis=1) / np.sum(normalized_weight, axis=1)
    
    # Adjust diversity factor to penalize items with low diversity
    diversity_factor = 1 - diversity_factor
    
    # Adjust weight variance to penalize high variance
    weight_variance = 1 + np.exp(-weight_variance)
    
    # Calculate the weighted heuristic value for each item
    weighted_heuristic = normalized_prize * (1 - np.mean(normalized_weight, axis=1)) * diversity_factor * weight_variance
    
    # Normalize the weighted heuristic values to ensure a range of [0, 1]
    max_heuristic = np.max(weighted_heuristic)
    if max_heuristic > 0:
        heuristics = weighted_heuristic / max_heuristic
    else:
        heuristics = weighted_heuristic
    
    # Incorporate domain-specific knowledge by giving a higher score to lighter items
    # and items with higher utility
    domain_factor = np.mean(weight, axis=1) * normalized_prize
    
    # Apply the domain factor to the heuristics
    heuristics *= domain_factor
    
    # Refine heuristics based on additional factors, e.g., item availability
    # Assuming item availability is stored in `availability`, which is an array of binary values
    availability = np.random.binomial(1, 0.8, size=len(prize))  # Random availability for example
    availability_factor = availability * 1.2  # Boost heuristics for available items
    
    # Apply the availability factor to the heuristics
    heuristics *= availability_factor
    
    # Sparsify heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
