```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics with a random component to encourage diversity
    heuristics = np.random.rand(*prize.shape)
    
    # Normalize prize to avoid dominance by high values
    normalized_prize = prize / np.max(prize)
    
    # Introduce a dynamic threshold for amplification based on the distribution of the normalized prize
    amplification_threshold = np.percentile(normalized_prize, 70)
    
    # Amplify heuristics for items with higher normalized prize value
    heuristics[normalized_prize > amplification_threshold] *= 1.5
    
    # Introduce sparsity by zeroing out heuristics for items with very low normalized prize value
    sparsity_threshold = np.percentile(normalized_prize, 30)
    heuristics[normalized_prize < sparsity_threshold] = 0
    
    # Iterate to refine heuristics by balancing exploitation and exploration
    for _ in range(3):
        # Select items with the highest heuristics as a form of exploitation
        top_items = np.argsort(heuristics)[::-1][:int(0.2 * heuristics.shape[0])]
        heuristics[top_items] *= 1.1
        
        # Randomly shuffle the heuristics to introduce exploration and encourage diversity
        np.random.shuffle(heuristics)
    
    # Normalize the heuristics to ensure they sum to 1, maintaining the probability of selection
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
