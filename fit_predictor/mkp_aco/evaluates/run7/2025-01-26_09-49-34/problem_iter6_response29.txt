```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Sparsify by considering the average weight in the other dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Incorporate global insight by penalizing high variance in item weights
    global_insight = 1 / (1 + np.sqrt(np.sum(weight**2, axis=1)))
    
    # Introduce diversity in heuristic generation by using item-based weight averages
    diversity_insight = np.exp(-np.sum(weight**2, axis=1) / (np.sum(weight, axis=1) + 1))
    
    # Create heuristics by combining the ratio, average weight, global insight, and diversity insight
    heuristics = ratio * average_weight * global_insight * diversity_insight
    
    # Introduce local optimization insight by using item-to-average weight deviation
    local_optimization = (ratio * average_weight) / (np.abs(ratio * average_weight - average_weight).mean())
    
    # Balance heuristics by normalizing local and global factors
    balanced_heuristics = (local_optimization * heuristics) / (local_optimization + heuristics)
    
    # Apply a sparsification threshold using the balanced heuristic average
    sparsity_threshold = balanced_heuristics.mean() * 0.7
    
    # Filter the heuristics, retaining those above the threshold
    heuristics[heuristics < sparsity_threshold] = 0
    
    return balanced_heuristics
```
