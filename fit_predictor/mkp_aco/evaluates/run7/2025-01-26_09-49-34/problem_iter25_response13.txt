```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure the sum is 1
    normalized_prize = prize / np.sum(prize)
    
    # Introduce a diversity factor that emphasizes selecting items with diverse weights
    diversity_factor = np.mean(weight, axis=1)
    
    # Use a combination of utility and diversity to form the initial heuristics
    heuristics = normalized_prize * diversity_factor
    
    # Apply a weighted balance between utility and diversity to adjust heuristics
    utility_weight = 0.7
    diversity_weight = 0.3
    heuristics = heuristics * utility_weight + diversity_factor * diversity_weight
    
    # Incorporate a variance adjustment to encourage selecting items with less variance in weights
    variance_adjustment = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    heuristics *= variance_adjustment
    
    # Implement a dynamic adjustment based on the current solution state
    current_solution = np.zeros_like(prize)
    current_solution_weight = np.zeros_like(weight)
    for i in range(len(prize)):
        if np.all(current_solution_weight[:, i] < 1):
            heuristics[i] *= 1.1  # Increase the heuristic for items that can still be included
    
    # Normalize heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    # Introduce a sparsity factor to reduce the heuristics of items with high redundancy
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    heuristics *= sparsity_factor
    
    return heuristics
```
