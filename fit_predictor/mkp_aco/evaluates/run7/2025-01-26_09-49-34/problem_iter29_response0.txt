```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on a weighted combination of factors
    heuristics = 0.5 * normalized_prize * sparsity_factor + 0.5 * inv_variance_factor
    
    # Apply a dynamic threshold to balance exploration and exploitation
    # Adjust heuristics for items that are not in the top percentile
    threshold = np.percentile(heuristics, 70)  # 70% threshold
    heuristics[heuristics < threshold] *= 1.1  # Increase heuristic values below the threshold
    
    # Refine heuristics iteratively by combining domain-specific factors
    # Adjust for the diversity of the solution by considering the sum of heuristics
    diversity_factor = np.sum(heuristics) / np.sum(heuristics != 0)
    heuristics *= diversity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
