```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure the sum is 1
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)  # Avoid division by zero
    
    # Calculate a sparsity factor based on the number of non-zero dimensions
    sparsity_factor = 1 - (weight == 0).mean(axis=1)
    
    # Combine normalized prize and inverse average weight to get initial heuristics
    heuristics = normalized_prize * inverse_average_weight
    
    # Adjust heuristics by considering the sparsity factor, penalizing low sparsity
    heuristics *= sparsity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold that considers both the average normalized weight
    # and the sparsity factor, setting elements below the threshold to zero
    sparsity_threshold = np.mean(average_normalized_weight) * 0.5
    
    # Set heuristics below the sparsity threshold to zero
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
