```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize prize to reduce dominance by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate an item-specific heuristic based on prize, sparsity, and diversity
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    diversity = np.random.normal(0, 0.01, size=normalized_prize.shape)
    item_specific_heuristic = normalized_prize * sparsity_factor + diversity
    
    # Amplify items with higher potential while maintaining diversity
    amplification_threshold = np.percentile(item_specific_heuristic, 70)
    amplified_heuristic = np.where(item_specific_heuristic > amplification_threshold, 
                                   item_specific_heuristic * 1.2, 
                                   item_specific_heuristic)
    
    # Introduce a dynamic threshold for amplification based on the mean heuristic
    dynamic_threshold = np.mean(amplified_heuristic[amplified_heuristic > 0])
    amplified_heuristic[amplified_heuristic > dynamic_threshold] *= 1.5
    
    # Iterate to refine heuristics by encouraging exploration over exploitation
    for _ in range(3):
        # Randomly shuffle the items to encourage diversity
        shuffled_indices = np.random.permutation(amplified_heuristic.shape[0])
        shuffled_heuristic = amplified_heuristic[shuffled_indices]
        
        # Amplify non-dominated items based on the shuffled heuristic
        for i in range(amplified_heuristic.shape[0]):
            dominated_by = np.any(shuffled_heuristic > amplified_heuristic[i])
            if not dominated_by:
                amplified_heuristic[i] *= 1.1
    
    # Normalize the final heuristics to sum to 1
    heuristic_sum = np.sum(amplified_heuristic)
    if heuristic_sum > 0:
        amplified_heuristic /= heuristic_sum
    
    return amplified_heuristic
```
