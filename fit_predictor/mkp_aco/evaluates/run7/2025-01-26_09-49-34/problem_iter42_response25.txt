```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate a balance factor considering both sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Incorporate diversity by adding a random component
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Use a dynamic threshold to amplify the heuristics of items with higher potential
    amplification_threshold = np.percentile(balanced_prize, 70)  # 70% threshold
    amplified_prize = np.where(balanced_prize > amplification_threshold, 
                                balanced_prize * 1.2, 
                                balanced_prize)
    
    # Introduce sparsity by zeroing out low-value heuristic values
    sparsity_threshold = np.percentile(amplified_prize, 30)  # 30% threshold for sparsity
    amplified_prize[amplified_prize < sparsity_threshold] = 0
    
    # Dynamically adjust amplification thresholds based on the mean heuristic value
    amplification_threshold_dynamic = np.mean(amplified_prize[amplified_prize > 0])
    amplified_prize[amplified_prize > amplification_threshold_dynamic] *= 1.5
    
    # Refine the heuristics by amplifying non-dominated items
    for i in range(amplified_prize.shape[0]):
        dominated_by = np.any(amplified_prize > amplified_prize[i])
        if not dominated_by:
            amplified_prize[i] *= 1.1
    
    # Normalize the final heuristics
    heuristic_sum = np.sum(amplified_prize)
    if heuristic_sum > 0:
        amplified_prize /= heuristic_sum
    
    return amplified_prize
```
