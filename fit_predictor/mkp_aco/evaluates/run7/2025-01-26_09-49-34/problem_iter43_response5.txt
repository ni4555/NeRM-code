```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize and weight
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)
    
    min_weight = np.min(weight, axis=1)
    max_weight = np.max(weight, axis=1)
    normalized_weight = (weight - min_weight) / (max_weight - min_weight)
    
    # Calculate diversity using entropy and sparsity
    entropy = -np.sum(normalized_prize * np.log2(normalized_prize))
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Blend exploration with exploitation using entropy and sparsity
    exploration_factor = entropy * 0.01
    exploitation_factor = sparsity_factor * 0.5
    
    # Introduce controlled noise for diversity
    noise = np.random.normal(0, 0.01, size=normalized_prize.shape)
    
    # Combine factors to create heuristics
    heuristics = normalized_prize * (exploitation_factor + noise) + exploration_factor
    
    # Refine heuristics using dynamic thresholds
    sparsity_threshold = np.percentile(heuristics, 25)
    amplification_threshold = np.percentile(heuristics, 75)
    
    # Apply sparsity
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Amplify high-potential heuristics
    heuristics[heuristics > amplification_threshold] *= 1.2
    
    # Normalize the heuristics
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
