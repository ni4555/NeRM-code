```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate a diversity factor that encourages selecting items with unique weight profiles
    diversity_factor = np.mean(weight, axis=1) / np.std(weight, axis=1)
    
    # Calculate a relevance factor based on the sum of the weights across dimensions
    relevance_factor = weight.sum(axis=1)
    
    # Combine the factors into a composite heuristic value
    combined_heuristic = normalized_prize * diversity_factor * relevance_factor
    
    # Refine the heuristics by applying a threshold that balances exploration and exploitation
    threshold = np.percentile(combined_heuristic, 75)  # 75% threshold
    heuristics = np.where(combined_heuristic > threshold, combined_heuristic, 0)
    
    # Dynamically adjust weights based on the performance of the current solution
    current_solution_performance = np.sum(normalized_prize[heuristics > 0] * heuristics[heuristics > 0])
    heuristics = heuristics * (1 + current_solution_performance / np.sum(normalized_prize))
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
