```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to sum to 1 for easier comparison
    normalized_prize = prize / np.sum(prize)
    
    # Create a diversity factor to balance different item types
    diversity_factor = np.max(weight, axis=1) / np.sum(weight, axis=1)
    
    # Incorporate domain knowledge by adding a custom factor
    # Favoring items with high utility and low weight, and penalizing high variance
    domain_factor = (normalized_prize * (1 - np.mean(weight, axis=1))) / (np.std(weight, axis=1) + 1e-5)
    
    # Calculate a sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Combine all factors into a heuristic value
    heuristics = normalized_prize * diversity_factor * domain_factor * sparsity_factor
    
    # Normalize heuristics
    heuristics /= np.sum(heuristics)
    
    # Refine heuristics based on domain-specific criteria, e.g., item availability
    # Assuming item availability is stored in `availability`, which is an array of binary values
    availability = np.random.binomial(1, 0.8, size=len(prize))  # Random availability for example
    availability_factor = availability * 1.2  # Boost heuristics for available items
    
    # Apply the availability factor to heuristics
    heuristics *= availability_factor
    
    # Refine heuristics further by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
