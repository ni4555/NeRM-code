```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Calculate the sparsity factor, which is the proportion of non-zero weights
    sparsity_factor = 1 - (weight == 0).mean(axis=1)
    
    # Calculate the inverse of the average weight to prioritize lighter items
    inverse_average_weight = 1 / (average_weight + 1e-8)
    
    # Calculate the variance of weights to prefer items with more uniform weight distribution
    weight_variance = np.var(weight, axis=1)
    
    # Calculate the heuristics by combining normalized prize, sparsity, and weight properties
    heuristics = normalized_prize * inverse_average_weight * sparsity_factor * (1 / (1 + weight_variance))
    
    # Normalize the heuristics to ensure they are on a comparable scale
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Adjust heuristics to balance objectives more effectively
    # Increase heuristics for sparser items and those with lower variance
    adjusted_heuristics = heuristics * (sparsity_factor + 1 / (1 + weight_variance))
    
    # Normalize the adjusted heuristics to maintain a comparable scale
    max_adjusted_heuristic = np.max(adjusted_heuristics)
    if max_adjusted_heuristic > 0:
        adjusted_heuristics /= max_adjusted_heuristic
    
    return adjusted_heuristics
```
