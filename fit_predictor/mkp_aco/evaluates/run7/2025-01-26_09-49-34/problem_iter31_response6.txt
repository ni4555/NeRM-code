```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor by using the max value of each weight dimension
    diversity_factor = np.max(weight, axis=1)
    
    # Calculate the inverse sparsity factor by using the sum of weight dimensions
    inv_sparsity_factor = 1 / (weight.sum(axis=1) + 1e-6)  # Adding a small constant to avoid division by zero
    
    # Calculate the balance factor based on the difference between the min and max weight per dimension
    balance_factor = np.mean(np.abs(np.min(weight, axis=1) - np.max(weight, axis=1)))
    
    # Calculate the initial heuristics based on the weighted sum of normalized prize, diversity, inverse sparsity, and balance factors
    heuristics = (normalized_prize * 0.5 +
                  diversity_factor * 0.3 +
                  inv_sparsity_factor * 0.2 -
                  balance_factor * 0.1)
    
    # Apply a dynamic threshold to balance exploration and exploitation
    # Increase heuristics for items closer to the threshold
    threshold = np.percentile(heuristics, 75)  # 75% threshold
    heuristics[heuristics > threshold] *= 1.2
    
    # Normalize heuristics by dividing by the sum of heuristics to maintain a sum of 1
    heuristics /= np.sum(heuristics)
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.15)  # Zero out 15% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
