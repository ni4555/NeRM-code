```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the average prize per unit of weight across all dimensions
    average_prize_per_weight = np.sum(prize, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the average weight in each dimension
    average_weight = np.mean(weight, axis=1)
    
    # Create heuristics by considering the ratio of prize to weight and the average prize per weight
    heuristics = ratio * average_prize_per_weight * average_weight
    
    # Normalize heuristics to ensure that the sum of heuristics is 1
    heuristics /= np.sum(heuristics)
    
    # Dynamically set a sparsity threshold based on the maximum heuristic value
    sparsity_threshold = np.max(heuristics) / 2
    
    # Apply sparsity threshold, setting elements below the threshold to zero
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
