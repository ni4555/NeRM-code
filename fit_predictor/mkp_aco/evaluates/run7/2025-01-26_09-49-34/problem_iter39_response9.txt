```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to reduce dominance of high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate a balance factor considering sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Introduce a dynamic threshold for amplification
    amplification_threshold = np.percentile(normalized_prize * balance_factor, 70)
    
    # Amplify higher potential items
    amplified_prize = np.where(normalized_prize * balance_factor > amplification_threshold,
                                normalized_prize * balance_factor * 1.2,
                                normalized_prize * balance_factor)
    
    # Add diversity by incorporating a small random component
    diversity = np.random.normal(0, 0.01, size=amplified_prize.shape)
    diverse_prize = np.maximum(amplified_prize + diversity, 0)
    
    # Introduce sparsity by zeroing out elements below a certain percentile
    sparsity_threshold = np.percentile(diverse_prize, 30)
    sparse_prize = np.where(diverse_prize > sparsity_threshold, diverse_prize, 0)
    
    # Normalize the final heuristics to ensure sum is 1
    heuristic_sum = np.sum(sparse_prize)
    if heuristic_sum > 0:
        sparse_prize /= heuristic_sum
    
    return sparse_prize
```
