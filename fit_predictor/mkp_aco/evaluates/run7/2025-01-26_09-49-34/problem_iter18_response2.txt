```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor by counting the number of zero weights
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    
    # Calculate the item-specific metrics, considering both prize and sparsity
    item_metrics = ratio * sparsity_factor
    
    # Normalize heuristics by dividing by the maximum item metric value
    max_metric = np.max(item_metrics)
    if max_metric > 0:
        item_metrics /= max_metric
    
    # Dynamically adjust the threshold for sparsification based on the average of the item metrics
    average_metric = np.mean(item_metrics)
    sparsity_threshold = average_metric * (1 - np.mean(sparsity_factor))
    
    # Apply the dynamic threshold to sparsify the heuristics, setting elements below the threshold to zero
    heuristics = np.where(item_metrics < sparsity_threshold, 0, item_metrics)
    
    return heuristics
```
