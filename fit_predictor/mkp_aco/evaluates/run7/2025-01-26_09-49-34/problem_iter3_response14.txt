```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate a balance factor that considers both high prize ratio and low average weight
    balance_factor = ratio * (1 / np.mean(weight, axis=1))
    
    # Normalize the balance factor to maintain a scale
    normalized_balance_factor = balance_factor / np.max(balance_factor)
    
    # Combine with a dynamic threshold based on the average of the normalized factors
    dynamic_threshold = np.mean(normalized_balance_factor)
    
    # Create heuristics by using the normalized balance factor and apply sparsification
    heuristics = normalized_balance_factor
    heuristics[heuristics < dynamic_threshold] = 0
    
    return heuristics
```
