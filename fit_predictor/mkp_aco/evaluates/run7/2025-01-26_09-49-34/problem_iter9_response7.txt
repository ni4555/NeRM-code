```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to average weight per item
    ratio = prize / np.mean(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the normalized sparsity factor by subtracting from 1
    normalized_sparsity = 1 - sparsity_factor
    
    # Combine the ratio with the normalized sparsity factor
    heuristics = ratio * normalized_sparsity
    
    # Incorporate a penalty for high variance in the weights
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_penalty = 1 / (1 + weight_variance)
    
    # Adjust heuristics by the variance penalty
    heuristics = heuristics * variance_penalty
    
    # Normalize heuristics by the maximum heuristic value to maintain sparsity
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold for sparsification
    dynamic_threshold = np.mean(ratio) * (1 - np.mean(normalized_sparsity))
    heuristics[heuristics < dynamic_threshold] = 0
    
    return heuristics
```
