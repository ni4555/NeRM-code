```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Introduce domain knowledge factors
    # Calculate the diversity factor based on the spread of weights
    diversity_factor = np.std(weight, axis=1)
    
    # Integrate domain-specific factors
    # Calculate the density factor, which promotes items with higher density
    density_factor = (prize / np.sum(weight, axis=1)).reshape(-1, 1)
    
    # Combine factors to calculate a preliminary heuristic
    preliminary_heuristics = normalized_prize * diversity_factor * density_factor
    
    # Introduce an adaptive sparsity factor that promotes sparsity
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Integrate a variance control factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine all factors to get a comprehensive heuristic
    heuristics = preliminary_heuristics * sparsity_factor * inv_variance_factor
    
    # Apply exploration-exploitation balancing by amplifying promising heuristics
    threshold = np.percentile(heuristics, 80)  # 80% threshold
    heuristics[heuristics > threshold] *= 1.2
    
    # Normalize heuristics to maintain scale and facilitate comparison
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Iteratively refine heuristics by promoting diversity and variance control
    for _ in range(3):
        # Rebalance heuristics to promote diversity and variance control
        heuristics *= (sparsity_factor + inv_variance_factor) * diversity_factor
    
    # Sparsify heuristics to encourage selection of a smaller subset of items
    num_to_zero = int(len(heuristics) * 0.15)  # Zero out 15% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
