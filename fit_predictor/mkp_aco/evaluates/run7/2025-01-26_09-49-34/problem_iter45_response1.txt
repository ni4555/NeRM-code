```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize and weight
    normalized_prize = (prize - np.mean(prize)) / np.std(prize)
    normalized_weight = (weight - np.mean(weight, axis=1, keepdims=True)) / np.std(weight, axis=1, keepdims=True)
    
    # Compute a heuristic based on normalized prize and weight
    heuristics = normalized_prize * np.mean(normalized_weight, axis=1)
    
    # Add exploration using Gaussian noise
    exploration_noise = np.random.normal(0, 0.01, size=heuristics.shape)
    
    # Add exploitation based on weight sparsity
    exploitation_factor = np.mean(weight, axis=1)
    
    # Combine exploration and exploitation
    heuristics += exploration_noise * exploitation_factor
    
    # Adjust heuristics to ensure non-negative values
    heuristics = np.maximum(heuristics, 0)
    
    # Sparsify the heuristics
    sparsity_factor = (exploitation_factor > 0).astype(float)
    heuristics *= sparsity_factor
    
    # Introduce diversity to the heuristics
    diversity = np.random.normal(0, 0.05, size=heuristics.shape)
    diversity = np.maximum(diversity, -0.05)
    heuristics += diversity
    
    # Refine heuristics by amplifying higher values
    amplification_threshold = np.percentile(heuristics, 90)
    heuristics[heuristics > amplification_threshold] *= 1.1
    
    # Normalize heuristics to maintain a proper balance
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
