```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the variance of the normalized weights for each item
    variance_weight = np.var(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of dimensions with zero weight
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the diversity factor based on the variance of normalized weights
    diversity_factor = variance_weight
    
    # Initial heuristics based on normalized prize
    heuristics = normalized_prize
    
    # Adjust heuristics by penalizing items with high sparsity and low diversity
    heuristics -= sparsity_factor
    heuristics += diversity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Sparsify heuristics by setting below a certain threshold to zero
    # The threshold is dynamic and depends on the average normalized weight
    sparsity_threshold = np.mean(average_normalized_weight)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Adjust heuristics based on the weighted sum of normalized prize and variance
    weighted_factors = normalized_prize * (1 + variance_weight)
    heuristics *= weighted_factors
    
    return heuristics
```
