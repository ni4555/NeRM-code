```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the ratio of prize to weight for each item
    prize_to_weight_ratio = normalized_prize / weight.sum(axis=1)
    
    # Calculate the standard deviation of weights for each item to promote diversity
    std_dev_weight = np.std(weight, axis=1)
    
    # Calculate the mean of standard deviations to control variance
    mean_std_dev_weight = np.mean(std_dev_weight)
    
    # Combine factors: prize-to-weight ratio, diversity, and variance control
    combined_factor = prize_to_weight_ratio / (std_dev_weight + mean_std_dev_weight)
    
    # Introduce exploration and exploitation by using a weighted sum of factors
    exploration_factor = np.random.rand()
    exploitation_factor = 1 - exploration_factor
    heuristics = exploration_factor * combined_factor + exploitation_factor * (1 / (combined_factor + 1))
    
    # Normalize heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    # Refine heuristics by iteratively adjusting based on their rank
    for _ in range(3):
        previous_heuristics = heuristics.copy()
        weighted_sum = heuristics * (heuristics / previous_heuristics)
        heuristics = weighted_sum / np.sum(weighted_sum)
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Adjust heuristics based on the performance of the selected items
    performance_factor = np.mean(prize[heuristics > 0]) / np.mean(prize)
    heuristics *= performance_factor
    
    return heuristics
```
