```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sum of weights across all dimensions for each item
    sum_weight = np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of non-zero weights
    sparsity_factor = 1 - (sum_weight == 0).mean(axis=1)
    
    # Calculate the diversity factor by considering the variance of weights
    diversity_factor = np.var(weight, axis=1)
    
    # Adjust heuristics based on normalized prize, sparsity, and diversity
    heuristics = normalized_prize * sparsity_factor * diversity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold that considers the diversity factor
    # Setting elements below the threshold to zero
    diversity_threshold = np.mean(diversity_factor)
    heuristics[heuristics < diversity_threshold] = 0
    
    # Adjust heuristics based on the sum of weights, rewarding items with a balance between prize and weight
    balance_factor = sum_weight / (1 + sum_weight)
    heuristics *= balance_factor
    
    # Incorporate a dynamic adjustment based on the average sparsity and diversity
    dynamic_adjustment = np.exp(-0.5 * (sparsity_factor + diversity_factor))
    heuristics *= dynamic_adjustment
    
    return heuristics
```
