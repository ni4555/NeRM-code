```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the balance factor to balance between high prize and low weight
    balance_factor = normalized_prize / (weight.sum(axis=1) + 1e-6)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors to create initial heuristics
    heuristics = normalized_prize * sparsity_factor * balance_factor * inv_variance_factor
    
    # Introduce noise to increase diversity
    np.random.seed(0)
    noise = np.random.normal(0, 0.01, size=heuristics.shape)
    heuristics += noise
    
    # Adapt thresholds based on the current distribution of heuristics
    threshold = np.percentile(heuristics, 80)  # Higher threshold to encourage exploration
    heuristics[heuristics < threshold] = 0
    
    # Introduce sparsity by setting a lower threshold for heuristics
    lower_threshold = np.percentile(heuristics, 10)  # Lower threshold to encourage exploitation
    heuristics[heuristics > lower_threshold] = 0
    
    # Refine heuristics by balancing exploration and exploitation
    for i in range(len(heuristics)):
        if heuristics[i] > threshold and sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.1
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
