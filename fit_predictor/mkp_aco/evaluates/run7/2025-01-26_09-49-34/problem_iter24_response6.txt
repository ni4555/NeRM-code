```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the diversity factor based on the standard deviation of weights
    diversity_factor = np.std(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the variance of the weights
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the initial heuristics based on normalized prize
    heuristics = normalized_prize
    
    # Adjust heuristics based on diversity, rewarding items with high diversity
    heuristics *= (1 + np.exp(-diversity_factor))
    
    # Adjust heuristics based on sparsity, penalizing items with low sparsity
    heuristics *= (1 + sparsity_factor)
    
    # Adjust heuristics based on variance, rewarding items with low variance
    heuristics *= (1 / (1 + weight_variance))
    
    # Dynamic threshold for diversity based on average normalized weight and diversity factor
    diversity_threshold = np.mean(average_normalized_weight * (1 + np.exp(-diversity_factor)))
    heuristics[heuristics < diversity_threshold] = 0
    
    # Dynamic threshold for sparsity based on average normalized weight and sparsity factor
    sparsity_threshold = np.mean(average_normalized_weight * (1 + sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Incorporate domain-specific factors
    # For example, if items that are unique in a certain dimension are desirable, we could add a factor for that
    domain_specific_factor = np.sum(weight == 1, axis=0) / n
    heuristics *= domain_specific_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(np.abs(heuristics))
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Final adjustment of heuristics based on a balance parameter
    balance_param = 0.5  # Example balance parameter
    heuristics = heuristics * balance_param + (1 - balance_param) * np.abs(heuristics)
    
    return heuristics
```
