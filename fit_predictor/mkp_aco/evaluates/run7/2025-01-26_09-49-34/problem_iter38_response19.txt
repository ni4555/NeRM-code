```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate value-to-weight ratio to prioritize items with better ratios
    value_to_weight = normalized_prize / weight.sum(axis=1)
    
    # Incorporate diversity by adding a random component
    diversity = np.random.normal(0, 0.02, size=value_to_weight.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    heuristic_value = value_to_weight + diversity
    
    # Introduce sparsity by zeroing out low-value heuristic values
    sparsity_threshold = np.percentile(heuristic_value, 10)  # 10% threshold for sparsity
    heuristic_value[heuristic_value < sparsity_threshold] = 0
    
    # Calculate a balance factor considering both sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Integrate the balance factor to adjust the heuristic values
    heuristic_value *= balance_factor
    
    # Apply amplification to items with higher potential
    amplification_threshold = np.percentile(heuristic_value, 70)  # 70% threshold
    amplification_factor = 1.5  # Amplification factor for high-value heuristics
    heuristic_value[heuristic_value > amplification_threshold] *= amplification_factor
    
    # Normalize the final heuristics
    heuristic_sum = np.sum(heuristic_value)
    if heuristic_sum > 0:
        heuristic_value /= heuristic_sum
    
    return heuristic_value
```
