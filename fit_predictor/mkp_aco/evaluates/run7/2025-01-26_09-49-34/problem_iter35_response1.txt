```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the balance factor, which is the ratio of minimum to maximum weight dimension
    balance_factor = weight.min(axis=1) / weight.max(axis=1)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors to get initial heuristics
    heuristics = normalized_prize * sparsity_factor * balance_factor * inv_variance_factor
    
    # Introduce noise to encourage exploration
    np.random.seed(0)
    noise = np.random.normal(0, 0.05, size=heuristics.shape)
    heuristics += noise
    
    # Define dynamic thresholds for sparsity
    sparsity_threshold = np.percentile(heuristics, 30)  # 30% threshold for sparsity
    heuristics[sparsity_factor < 0.5] = 0
    
    # Adjust heuristics based on the dynamic thresholds for both high and low heuristics
    for i in range(len(heuristics)):
        if heuristics[i] > sparsity_threshold:
            heuristics[i] *= 1.2  # Increase for high heuristics
        elif heuristics[i] < sparsity_threshold:
            heuristics[i] *= 0.8  # Decrease for low heuristics
    
    # Normalize heuristics by dividing by the sum of heuristics to ensure a total sum of 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    # Refine heuristics by balancing exploration and exploitation
    # Reward items that are within a certain range of the threshold
    for i in range(len(heuristics)):
        if (sparsity_factor[i] > 0.5 and heuristics[i] > threshold):
            heuristics[i] *= 1.1
    
    return heuristics
```
