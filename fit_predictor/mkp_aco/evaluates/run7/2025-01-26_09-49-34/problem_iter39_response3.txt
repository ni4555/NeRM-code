```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate a balance factor considering both sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Incorporate diversity by adding a random component
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Use a dynamic threshold to amplify the heuristics based on item's historical performance
    amplification_threshold = np.percentile(balanced_prize, 70)  # 70% threshold
    amplification_factor = (balanced_prize - amplification_threshold) / amplification_threshold
    amplification_factor = np.clip(amplification_factor, 0, 1)
    amplified_prize = balanced_prize * amplification_factor
    
    # Introduce sparsity by zeroing out low-value heuristic values
    sparsity_threshold = np.percentile(amplified_prize, 30)  # 30% threshold for sparsity
    sparsity_factor = (amplified_prize > sparsity_threshold).astype(float)
    
    # Normalize the final heuristics
    heuristic_sum = np.sum(sparsity_factor * amplified_prize)
    if heuristic_sum > 0:
        sparsity_factor *= amplified_prize / heuristic_sum
    
    return sparsity_factor
```
