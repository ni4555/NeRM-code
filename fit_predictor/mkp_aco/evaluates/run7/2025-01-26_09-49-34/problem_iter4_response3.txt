```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the normalized weight for each item to reflect sparsity
    normalized_weight = np.max(weight, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the variance of weights for each item to quantify weight distribution
    weight_variance = np.var(weight, axis=1)
    
    # Combine the prize ratio, normalized weight, and variance into a single heuristic value
    heuristics = ratio * normalized_weight * (1 - weight_variance)
    
    # Apply logarithmic transformation to emphasize higher heuristics
    heuristics = np.log1p(heuristics)
    
    # Normalize heuristics to ensure non-negative values and set a strategic threshold
    max_heuristic = np.max(heuristics)
    min_threshold = max_heuristic / 10
    heuristics[heuristics < min_threshold] = 0
    
    return heuristics
```
