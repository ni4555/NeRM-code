```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor based on the number of unique weight combinations
    diversity_factor = np.sum(np.sum(weight == weight[:, np.newaxis], axis=1) == m) / (n * m)
    
    # Calculate the utility factor based on the ratio of prize to weight
    utility_factor = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate the variance factor
    variance_factor = np.var(weight, axis=1)
    
    # Combine factors to determine the initial heuristics
    heuristics = normalized_prize * diversity_factor * utility_factor * (1 / variance_factor)
    
    # Adjust heuristics for items with a higher ratio of utility to variance
    adjusted_heuristics = heuristics * (1 + 0.1 * (utility_factor / variance_factor))
    
    # Apply a domain-specific adjustment to prioritize items with more unique combinations
    domain_adjustment = np.exp(-diversity_factor)
    adjusted_heuristics *= domain_adjustment
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(adjusted_heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    adjusted_heuristics[np.argsort(adjusted_heuristics)[:num_to_zero]] = 0
    
    return adjusted_heuristics
```
