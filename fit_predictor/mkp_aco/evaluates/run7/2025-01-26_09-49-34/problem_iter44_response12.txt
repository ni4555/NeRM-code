```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize to avoid dominance and ensure a consistent scale
    normalized_prize = prize / np.max(prize)
    
    # Calculate balance factor using variance and sparsity
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Introduce diversity with a floor to avoid all-zero heuristics
    diversity_floor = 0.001
    diversity = np.random.normal(0, diversity_floor, size=normalized_prize.shape)
    diversity = np.maximum(diversity, diversity_floor)
    heuristics = normalized_prize * balance_factor + diversity
    
    # Apply sparsity by setting low heuristics to zero
    sparsity_threshold = np.percentile(heuristics, 30)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Amplify high-potential heuristics and refine
    amplification_threshold = np.percentile(heuristics, 70)
    amplification_factor = 1.2
    items_to_amplify = (heuristics > amplification_threshold) & (sparsity_factor > 0.5)
    heuristics[items_to_amplify] *= amplification_factor
    
    # Normalize the heuristics to maintain balance
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum

    return heuristics
```
