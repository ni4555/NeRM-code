```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure all prizes are on the same scale
    normalized_prize = prize / np.sum(prize)
    
    # Calculate sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate inverse variance factor using normalized weights
    inv_variance_factor = np.mean(weight / np.sum(weight), axis=1) / np.mean((weight / np.sum(weight)) ** 2, axis=1)
    
    # Combine factors to create initial heuristics
    combined_factor = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Apply adaptive weights based on percentiles to emphasize important factors
    combined_factor[sparsity_factor > np.percentile(sparsity_factor, 70)] *= 1.2
    combined_factor[inv_variance_factor > np.percentile(inv_variance_factor, 70)] *= 1.2
    
    # Normalize heuristics to maintain a total of 1
    heuristics = combined_factor / np.sum(combined_factor)
    
    # Apply sparsification by zeroing out a fraction of the lowest heuristics
    num_to_zero = int(len(heuristics) * 0.1)
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
