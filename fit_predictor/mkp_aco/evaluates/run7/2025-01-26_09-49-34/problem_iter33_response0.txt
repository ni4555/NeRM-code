```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor by considering the standard deviation
    diversity_factor = 1 / np.std(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Combine factors to create a weighted heuristic score
    heuristics = normalized_prize * diversity_factor * sparsity_factor
    
    # Introduce noise for diversity by adding a small random perturbation
    np.random.seed(0)  # Ensure reproducibility
    perturbation = np.random.normal(0, 0.01, size=heuristics.shape)
    heuristics += perturbation
    
    # Dynamically adjust heuristics based on the mean score, avoiding overfitting
    mean_score = np.mean(heuristics)
    heuristics = np.where(heuristics > mean_score, heuristics, mean_score)
    
    # Sparsify the heuristics by setting values below a percentile threshold to zero
    lower_threshold = np.percentile(heuristics, 30)  # 30% threshold for sparsity
    heuristics[heuristics < lower_threshold] = 0
    
    # Refine heuristics by balancing exploration and exploitation
    # Increase heuristics for items that are less sparse and closer to the threshold
    for i in range(len(heuristics)):
        if sparsity_factor[i] > 0.5 and heuristics[i] < mean_score:
            heuristics[i] *= 1.1
    
    return heuristics
```
