```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the average sparsity across non-zero weights
    average_non_zero_sparsity = np.mean(np.where(weight > 0, sparsity_factor, 0))
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Calculate the average weight across all dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Calculate the standard deviation of the weights across dimensions for each item
    std_dev_weight = np.std(weight, axis=1)
    
    # Calculate a dynamic threshold based on various factors
    dynamic_threshold = (
        np.mean(ratio) * min_average_weight * 
        (1 - average_sparsity) * 
        (1 - average_non_zero_sparsity) * 
        (1 + np.sqrt(std_dev_weight / average_weight))
    )
    
    # Combine the ratio with the sparsity factor and apply the dynamic threshold
    heuristics = ratio * (1 - sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = dynamic_threshold / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
