```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure no item is completely dominated
    normalized_prize = prize / np.max(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the diversity factor based on the standard deviation of weights
    diversity_factor = np.std(weight, axis=1)
    
    # Calculate the variance of the weights
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight to favor lighter items
    inv_avg_weight_factor = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate a diversity bonus for items with high diversity in weight
    diversity_bonus = 1 + np.exp(-diversity_factor)
    
    # Calculate a variance penalty for items with high variance in weight
    variance_penalty = 1 + np.exp(-weight_variance)
    
    # Combine the factors to create the initial heuristics
    initial_heuristics = normalized_prize * inv_avg_weight_factor * diversity_bonus * variance_penalty
    
    # Normalize heuristics to avoid dominated items
    max_heuristic = np.max(initial_heuristics)
    if max_heuristic > 0:
        heuristics = initial_heuristics / max_heuristic
    else:
        heuristics = initial_heuristics
    
    # Incorporate domain knowledge by adding a custom factor
    # Example: Favouring items with high utility and low weight
    domain_factor = (normalized_prize * (1 - np.mean(weight, axis=1)))
    
    # Apply the domain factor to heuristics
    heuristics *= domain_factor
    
    # Refine heuristics by incorporating a weighted factor that balances the normalized prize and variance adjustment
    weighted_factor = normalized_prize * variance_penalty
    
    # Apply the weighted factor to heuristics
    heuristics *= weighted_factor
    
    # Refine heuristics based on additional factors, e.g., item availability
    # Assuming item availability is stored in `availability`, which is an array of binary values
    availability = np.random.binomial(1, 0.8, size=len(prize))  # Random availability for example
    availability_factor = availability * 1.2  # Boost heuristics for available items
    
    # Apply the availability factor to heuristics
    heuristics *= availability_factor
    
    # Sparsify heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
