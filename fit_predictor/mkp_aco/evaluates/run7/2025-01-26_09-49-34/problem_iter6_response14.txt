```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the average weight per dimension, excluding the fixed dimension
    average_weight = np.mean(weight[:, 1:], axis=1)
    
    # Incorporate interaction terms between the ratio and average weight
    interaction = ratio * average_weight
    
    # Adjust for sparsity by considering the sum of the weights
    sparsity_factor = 1 / (1 + np.sum(weight, axis=1))
    
    # Normalize heuristics by incorporating the interaction term and sparsity factor
    heuristics = interaction * sparsity_factor
    
    # Apply a sparsification threshold based on the normalized heuristic
    sparsity_threshold = np.max(heuristics) / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
