```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize using min-max scaling
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)

    # Calculate variance to penalize fluctuating weights
    variance = np.mean(weight, axis=1) ** 2 - (np.mean(weight, axis=1)) ** 2

    # Calculate sparsity factor for items that do not contribute weight to the knapsack
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)

    # Use balance factor that penalizes high variance and rewards sparsity
    balance_factor = 1 / (1 + variance * 0.1) * sparsity_factor

    # Initialize heuristics with a balance of importance and diversity
    heuristics = normalized_prize * balance_factor + np.random.rand(n)

    # Refine heuristics to ensure a diverse spread of values
    heuristics[heuristics < np.percentile(heuristics, 10)] = np.percentile(heuristics, 10)
    heuristics[heuristics > np.percentile(heuristics, 90)] = np.percentile(heuristics, 90)

    # Iterate to exploit and explore more effectively
    for i in range(n):
        if heuristics[i] > np.percentile(heuristics, 90) and sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.2

    # Normalize heuristics to sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
