```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate value-to-weight ratio
    value_to_weight_ratio = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Introduce diversity by considering the standard deviation of the weights
    std_factor = np.mean(np.std(weight, axis=1))
    diversity_factor = 1 / (std_factor + 1e-5)
    
    # Combine factors to get initial heuristics
    heuristics = value_to_weight_ratio * sparsity_factor * diversity_factor
    
    # Normalize heuristics by dividing by the sum of heuristics to avoid division by zero
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    # Introduce sparsity by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Refine heuristics iteratively to promote exploration
    # Select the top heuristics with non-zero sparsity and update them to emphasize the most promising items
    sorted_indices = np.argsort(heuristics)[::-1]
    for i in sorted_indices:
        if sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.1  # Emphasize the most promising items
    
    return heuristics
```
