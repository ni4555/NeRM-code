```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate sparsity as a factor by penalizing items with more than half of their weights being zero
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    sparsity_factor[sparsity_factor <= 0.5] = 0  # Only penalize if more than half the weights are zero
    
    # Calculate a diversity factor based on the variance of the ratio
    diversity_factor = np.var(ratio)
    
    # Combine the ratio, sparsity factor, and diversity factor
    heuristics = ratio * sparsity_factor * diversity_factor
    
    # Normalize heuristics by dividing by the sum of heuristics to ensure they sum up to 1
    heuristics /= np.sum(heuristics)
    
    # Apply a dynamic threshold to sparsify the heuristics, setting elements below a threshold to zero
    sparsity_threshold = np.mean(ratio) * (1 - np.mean(sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
