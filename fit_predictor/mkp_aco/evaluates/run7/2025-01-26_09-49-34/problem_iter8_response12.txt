```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Calculate a dynamic threshold based on the average sparsity and minimum average weight
    dynamic_threshold = (np.mean(ratio) * min_average_weight) * (1 - average_sparsity)
    
    # Calculate a dynamic balance factor to weigh sparsity and prize ratio
    balance_factor = 0.6 * sparsity_factor + 0.4 * ratio
    
    # Apply the dynamic threshold to balance sparsity and prize ratio
    heuristics = balance_factor * (1 - (average_sparsity - sparsity_factor))
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = dynamic_threshold * (1 - average_sparsity) / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Adjust the heuristics to be adaptive based on the sparsity and weight distribution
    adaptive_factor = (sparsity_factor - average_sparsity) * 0.5 + 1
    heuristics *= adaptive_factor
    
    return heuristics
```
