```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to encourage exploration of all items
    normalized_prize = prize / np.sum(prize)
    
    # Calculate sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate variance within each item's weight to account for risk
    item_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the inverse of the variance for each item to promote variance
    inverse_variance = 1 / (item_variance + 1e-8)
    
    # Use a weighted sum to generate the initial heuristics
    heuristics = normalized_prize * sparsity_factor * inverse_variance
    
    # Dynamically adjust heuristics to balance exploration and exploitation
    threshold = np.percentile(heuristics, 80)  # Use a 80% threshold
    heuristics[heuristics < threshold] *= 0.8  # Reduce weights for less promising items
    heuristics[heuristics >= threshold] *= 1.2  # Increase weights for more promising items
    
    # Normalize heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
