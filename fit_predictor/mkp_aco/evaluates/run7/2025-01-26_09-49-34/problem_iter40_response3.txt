```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate a balance factor considering both sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Incorporate diversity by adding a random component
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Introduce sparsity by zeroing out low-value heuristic values
    sparsity_threshold = np.percentile(balanced_prize, 30)  # 30% threshold for sparsity
    balanced_prize[balanced_prize < sparsity_threshold] = 0
    
    # Amplify the heuristics of items with higher potential
    amplification_threshold = np.percentile(balanced_prize, 70)  # 70% threshold
    balanced_prize[balanced_prize > amplification_threshold] *= 1.2
    
    # Dynamically adapt thresholds based on the distribution of the heuristics
    amplification_threshold_dynamic = np.mean(balanced_prize[balanced_prize > 0])
    balanced_prize[balanced_prize > amplification_threshold_dynamic] *= 1.5
    
    # Optimize sparsity based on the average sparsity factor
    average_sparsity = np.mean(sparsity_factor)
    balanced_prize *= (average_sparsity + 0.5)
    
    # Refine the heuristics by amplifying those not dominated by others
    for i in range(balanced_prize.shape[0]):
        dominated_by = np.any(balanced_prize > balanced_prize[i])
        if not dominated_by:
            balanced_prize[i] *= 1.1
    
    # Introduce a penalty for items that are too heavy
    penalty_factor = (weight.sum(axis=1) > 1).astype(float)
    penalty = penalty_factor * 0.1  # Penalty for exceeding weight constraint by 1 unit
    balanced_prize *= (1 - penalty)
    
    # Normalize the final heuristics
    heuristic_sum = np.sum(balanced_prize)
    if heuristic_sum > 0:
        balanced_prize /= heuristic_sum
    
    return balanced_prize
```
