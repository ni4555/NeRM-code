```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor by considering the maximum weight among all dimensions
    diversity_factor = 1 / np.max(weight, axis=1)
    
    # Calculate the utility factor based on the product of normalized prize and diversity factor
    utility_factor = normalized_prize * diversity_factor
    
    # Apply domain-specific knowledge: Increase heuristics for items with higher utility
    # and balance the influence of weight by dividing by the sum of weights
    utility_factor /= np.sum(weight, axis=1)
    
    # Integrate variance into the heuristic by considering the variance of weights
    variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine the utility and variance factors to form the heuristic
    heuristics = utility_factor * variance_factor
    
    # Adjust heuristics to balance exploration and exploitation
    # Use a threshold to increase the heuristics of items closer to the threshold
    threshold = np.percentile(heuristics, 80)  # 80% threshold
    heuristics[heuristics > threshold] *= 1.2
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply post-processing to sparsify the heuristics
    # Zero out a fraction of the lowest heuristics to encourage diversity in the solution
    num_to_zero = int(len(heuristics) * 0.15)  # Zero out 15% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
