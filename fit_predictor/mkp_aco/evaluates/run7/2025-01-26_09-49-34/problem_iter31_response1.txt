```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate a feature-based heuristic which incorporates diversity and balance
    diversity_factor = 1 / (1 + np.std(weight, axis=1))
    balance_factor = 1 / np.sum(weight, axis=1)
    feature_based_heuristic = normalized_prize * diversity_factor * balance_factor
    
    # Use a variance-based heuristic which incorporates exploration and exploitation
    exploration_factor = 1 / np.std(weight ** 2, axis=1)
    exploitation_factor = np.mean(weight, axis=1) / np.sum(weight, axis=1)
    variance_heuristic = exploration_factor * exploitation_factor
    
    # Combine feature-based and variance-based heuristics
    combined_heuristic = feature_based_heuristic * variance_heuristic
    
    # Introduce dynamic thresholding and adapt based on item heuristics
    threshold = np.percentile(combined_heuristic, 80)  # 80% threshold
    adapted_heuristics = np.where(combined_heuristic > threshold, combined_heuristic * 1.2, combined_heuristic)
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(adapted_heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics_to_zero = np.argsort(adapted_heuristics)[:num_to_zero]
    adapted_heuristics[heuristics_to_zero] = 0
    
    # Ensure that the heuristic values are not zero as this may be unrepresentative
    adapted_heuristics[adapted_heuristics == 0] = np.finfo(float).eps
    
    return adapted_heuristics
```
