```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Incorporate domain knowledge by promoting diversity and considering item sparsity
    diversity_factor = np.exp(-np.sum(weight ** 2, axis=1))
    
    # Calculate the inverse sum of normalized weights
    inv_sum_norm_weights = np.sum(normalized_prize * sparsity_factor, axis=0)
    
    # Combine factors to get the initial heuristics, weighting towards diversity, sparsity, and inv variance
    heuristics = sparsity_factor * diversity_factor * inv_variance_factor * normalized_prize / inv_sum_norm_weights
    
    # Introduce random noise to encourage exploration and diversity
    noise_factor = np.random.rand(n) * 0.1
    
    # Update heuristics with noise
    heuristics += noise_factor
    
    # Set an adaptive threshold to encourage exploration in sparse areas
    threshold = np.percentile(heuristics, 75)
    
    # Promote exploration in regions of the search space that have less accumulated weight
    exploratory_weighting = heuristics < threshold
    heuristics *= exploratory_weighting.astype(float)
    
    # Normalize heuristics to maintain a balanced influence of all factors
    heuristics /= np.sum(heuristics)
    
    # Apply domain knowledge to further adjust heuristics
    adjusted_diversity = diversity_factor * np.exp(-np.sum(weight ** 2, axis=1))
    heuristics *= adjusted_diversity
    
    # Apply sparsity by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.05)
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Normalize heuristics again to ensure they are in a usable range
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
