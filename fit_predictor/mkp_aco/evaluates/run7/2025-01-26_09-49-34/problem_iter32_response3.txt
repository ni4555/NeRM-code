```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Integrate domain knowledge: Consider items with a higher ratio of prize to weight as more promising
    ratio_factor = normalized_prize / weight.sum(axis=1)
    
    # Promote diversity and control variance by calculating a dynamic factor based on the mean of the ratio
    mean_ratio = np.mean(ratio_factor)
    diversity_factor = ratio_factor / mean_ratio
    
    # Introduce sparsity to avoid overfitting and to explore a wider range of solutions
    sparsity_factor = 1 / (np.sum(diversity_factor) + 1)
    
    # Balance exploration and exploitation by adjusting the heuristics
    heuristics = diversity_factor * sparsity_factor
    
    # Introduce a penalty for items that are too heavy compared to their prize value
    penalty_factor = np.exp(-heuristics / (normalized_prize + 1e-6))
    heuristics *= penalty_factor
    
    # Refine heuristics iteratively to improve balance between exploration and exploitation
    for _ in range(3):
        heuristics = heuristics / (np.sum(heuristics) + 1)
    
    # Normalize heuristics to ensure a proper sum
    heuristics /= np.sum(heuristics)
    
    # Apply a thresholding method to introduce sparsity
    threshold = np.mean(heuristics)
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
