```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the diversity factor based on the entropy of the weight distribution
    entropy = -np.sum(sparsity_factor * np.log(sparsity_factor + 1e-8))
    diversity_factor = entropy
    
    # Combine the factors into the initial heuristics
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor * diversity_factor
    
    # Apply a non-linear transformation to adjust the heuristics dynamically
    heuristics = np.tanh(heuristics)
    
    # Normalize heuristics by dividing by the maximum absolute heuristic value
    max_abs_heuristic = np.max(np.abs(heuristics))
    if max_abs_heuristic > 0:
        heuristics /= max_abs_heuristic
    
    # Dynamically adjust the heuristics based on a balance parameter
    balance_param = np.random.rand()  # Example dynamic balance parameter
    heuristics = heuristics * balance_param + (1 - balance_param) * heuristics
    
    # Sparsify the heuristics by setting low values to zero
    sparsity_threshold = np.exp(-np.log(2))  # Example sparsity threshold
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
