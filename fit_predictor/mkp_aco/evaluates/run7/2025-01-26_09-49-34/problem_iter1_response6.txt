```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the sum of weights for each dimension
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a normalized weight that reflects how 'sparsely' the item's weight is spread across dimensions
    normalized_weight = np.max(weight, axis=1) / weight_sum
    
    # Calculate the heuristic based on a combination of normalized prize and sparsity of weight
    heuristics = (prize / np.sum(prize)) * normalized_weight
    
    # Set unpromising elements to zero
    heuristics[heuristics < 0.1] = 0
    
    return heuristics
```
