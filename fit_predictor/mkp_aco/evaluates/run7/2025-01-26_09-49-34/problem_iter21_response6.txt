```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    # Adding a small value to avoid division by zero
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate the sparsity factor based on the number of dimensions with zero weight
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the variance of the weights, rewarding items with low variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Combine normalized prize, inverse average weight, sparsity factor, and variance
    base_heuristics = normalized_prize * inverse_average_weight * (1 + np.exp(-sparsity_factor)) * (1 / (1 + weight_variance))
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(base_heuristics)
    if max_heuristic > 0:
        base_heuristics /= max_heuristic
    
    # Introduce diversity by considering the range of normalized prize values
    prize_range = np.ptp(normalized_prize)
    diversity_factor = 1 / (1 + (normalized_prize - np.mean(normalized_prize)) / prize_range)
    
    # Final heuristics incorporating diversity and variance adjustments
    heuristics = base_heuristics * diversity_factor
    
    return heuristics
```
