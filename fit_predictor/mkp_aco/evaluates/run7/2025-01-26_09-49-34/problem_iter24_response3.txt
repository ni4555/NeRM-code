```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate diversity by using the range of weight in each dimension
    diversity_factor = (np.ptp(weight, axis=1)).astype(float)
    
    # Calculate sparsity factor, favoring items with non-zero weights in all dimensions
    sparsity_factor = 1 / ((weight.sum(axis=1) > 0).astype(float) == m)
    
    # Calculate the inverse variance factor, penalizing items with high variance in the weights
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors into initial heuristics
    heuristics = normalized_prize * diversity_factor * sparsity_factor * inv_variance_factor
    
    # Balance between exploitation and exploration by using an adaptive threshold
    balance_param = 0.5  # Example balance parameter
    heuristics = heuristics * balance_param + (1 - balance_param) * heuristics
    
    # Domain knowledge: penalize items with a variance that is too high compared to the average
    variance_penalty = (np.mean(weight ** 2, axis=1) - np.mean(weight, axis=1) ** 2) / np.mean(weight, axis=1) ** 2
    heuristics -= variance_penalty
    
    # Normalize heuristics to avoid dominated items
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Set unpromising elements to zero for sparsification
    threshold = np.exp(-np.log(2))  # Example threshold
    heuristics[heuristics < threshold] = 0
    
    # Ensure non-zero heuristics for selection
    heuristics[heuristics <= 0] = np.finfo(float).eps
    
    return heuristics
```
