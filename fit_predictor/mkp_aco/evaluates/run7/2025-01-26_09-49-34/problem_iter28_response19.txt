```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = np.sum(weight > 0, axis=1) / weight.shape[1]
    
    # Calculate the variance factor
    variance_factor = np.var(weight, axis=1) / np.mean(weight, axis=1)
    
    # Combine normalized prize, sparsity, and variance into a heuristic
    heuristics = normalized_prize * sparsity_factor * variance_factor
    
    # Apply adaptive thresholding
    sparsity_threshold = np.percentile(sparsity_factor, 70)
    variance_threshold = np.percentile(variance_factor, 70)
    
    # Increase heuristics for items with sparsity and variance factors above their respective thresholds
    heuristics[sparsity_factor > sparsity_threshold] *= 1.2
    heuristics[variance_factor > variance_threshold] *= 1.2
    
    # Normalize heuristics by dividing by the sum of heuristics to maintain the sum-to-1 property
    heuristics /= np.sum(heuristics)
    
    # Optionally, you could introduce a diversity factor, but since we already have sparsity
    # as part of the sparsity_factor, this may not be necessary.
    
    return heuristics
```
