```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor using normalized weights
    inv_variance_factor = np.mean(weight / np.sum(weight), axis=1) / np.mean((weight / np.sum(weight)) ** 2, axis=1)
    
    # Calculate the heuristic based on the weighted sum of factors
    heuristics = (normalized_prize * sparsity_factor) + (inv_variance_factor)
    
    # Apply adaptive weighting based on percentiles
    sparsity_threshold = np.percentile(sparsity_factor, 70)
    inv_variance_threshold = np.percentile(inv_variance_factor, 70)
    
    # Increase heuristics for sparser items and items with lower variance
    heuristics[sparsity_factor > sparsity_threshold] *= 1.2
    heuristics[inv_variance_factor > inv_variance_threshold] *= 1.2
    
    # Normalize heuristics by dividing by the sum of heuristics to maintain a total of 1
    heuristics /= np.sum(heuristics)
    
    # Apply sparsification by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Introduce diversity by perturbing the heuristics slightly
    diversity_factor = np.random.rand(len(heuristics)) * 0.1  # Limit perturbation to prevent large changes
    heuristics += diversity_factor
    
    # Ensure that the sum of heuristics remains 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
