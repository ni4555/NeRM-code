```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the normalized weight per item (since each dimension's constraint is 1)
    normalized_weight = np.sum(weight, axis=1)
    
    # Normalize the weight to ensure it is between 0 and 1
    normalized_weight = normalized_weight / np.max(normalized_weight)
    
    # Calculate the prize-to-weight ratio
    prize_to_weight_ratio = normalized_prize / normalized_weight
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Initialize heuristics
    heuristics = np.zeros_like(prize_to_weight_ratio)
    
    # Adjust heuristics based on the ratio and sparsity factor
    heuristics = prize_to_weight_ratio * (1 - sparsity_factor)
    
    # Normalize heuristics
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
