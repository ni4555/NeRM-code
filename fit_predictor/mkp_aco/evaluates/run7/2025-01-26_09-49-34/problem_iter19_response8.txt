```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    # Adding a small value to avoid division by zero
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate diversity scores based on the number of dimensions with non-zero weight
    diversity_score = (1 - (weight == 0).mean(axis=1))
    
    # Calculate the initial heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Adjust heuristics based on diversity, rewarding items with higher diversity
    heuristics *= diversity_score
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold that considers the diversity score
    # Setting elements below the threshold to zero
    diversity_threshold = np.mean(diversity_score)
    heuristics[heuristics < diversity_threshold] = 0
    
    # Adjust heuristics based on the variance of the weights, rewarding items with low variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_adjustment = 1 / (1 + weight_variance)
    heuristics *= variance_adjustment
    
    # Incorporate weighted factors based on the normalized prize, diversity score, and variance adjustment
    weighted_factors = normalized_prize * diversity_score * variance_adjustment
    
    # Final heuristics based on the sum of weighted factors
    heuristics *= weighted_factors
    
    return heuristics
```
