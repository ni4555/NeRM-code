```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the maximum prize
    normalized_prize = prize / np.max(prize)
    
    # Calculate a diversity factor based on the standard deviation of the weight dimensions
    diversity_factor = np.std(weight, axis=1)
    
    # Calculate an adaptability factor considering the sum of weights
    adaptability_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the initial heuristics as a combination of normalized prize, diversity, and adaptability
    heuristics = normalized_prize * diversity_factor * adaptability_factor
    
    # Introduce a feature balance factor to ensure no single dimension dominates
    feature_balance_factor = 1 / (np.sum(weight, axis=1) ** 2)
    heuristics *= feature_balance_factor
    
    # Introduce a dynamic exploration factor to encourage diverse selections
    exploration_factor = np.exp(-np.sum(weight, axis=1) / (np.std(weight, axis=1) + 1))
    heuristics *= exploration_factor
    
    # Normalize heuristics by dividing by the sum of heuristics to maintain scale
    heuristics /= np.sum(heuristics)
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.15)  # Zero out 15% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
