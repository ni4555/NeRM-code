```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor based on the sum of normalized weights across dimensions
    diversity_factor = np.sum(weight, axis=1)
    
    # Calculate the variance of weights for each item across all dimensions
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the inverse variance for each item
    # Adding a small value to avoid division by zero
    inverse_variance = 1 / (weight_variance + 1e-8)
    
    # Calculate the sparsity factor based on the number of dimensions with zero weight
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize, inverse variance, and diversity factor
    heuristics = normalized_prize * inverse_variance * diversity_factor
    
    # Adjust heuristics based on diversity, rewarding items with high diversity
    heuristics *= (1 + np.exp(-diversity_factor))
    
    # Adjust heuristics based on sparsity, rewarding items with high sparsity
    heuristics *= (1 + np.exp(-sparsity_factor))
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic normalization threshold that considers both the average normalized weight
    # and the diversity factor, setting elements above the threshold to one
    normalization_threshold = np.mean(normalized_prize * inverse_variance * diversity_factor)
    heuristics[heuristics > normalization_threshold] = 1
    
    # Adjust heuristics based on the variance of the weights, rewarding items with low variance
    heuristics *= (1 + np.exp(-weight_variance))
    
    # Incorporate weighted factors based on the normalized prize, inverse variance, and diversity factor
    weighted_factors = normalized_prize * inverse_variance * diversity_factor
    
    # Final heuristics based on the sum of weighted factors and adjusted diversity and sparsity factors
    heuristics *= weighted_factors * (1 + np.exp(-diversity_factor)) * (1 + np.exp(-sparsity_factor))
    
    # Incorporate non-linearity using exponential functions for better differentiation
    heuristics = np.exp(heuristics)
    
    # Normalize heuristics again by dividing by the maximum heuristic value after applying exponential
    max_heuristic_after_exp = np.max(heuristics)
    if max_heuristic_after_exp > 0:
        heuristics /= max_heuristic_after_exp
    
    return heuristics
```
