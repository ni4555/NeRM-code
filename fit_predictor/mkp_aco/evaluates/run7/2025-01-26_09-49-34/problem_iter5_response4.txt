```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize and weight for each dimension to consider uniform contribution
    prize_normalized = prize / np.linalg.norm(prize, axis=1)
    weight_normalized = np.linalg.norm(weight, axis=1).reshape(-1, 1)
    
    # Calculate the ratio of normalized prize to normalized weight
    ratio = prize_normalized / weight_normalized
    
    # Define a sparsity score by considering items with zero weight
    sparsity_score = np.where(weight.sum(axis=1) == 0, 0, 1)
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_score)
    
    # Apply a heuristic by considering the balance between high prize-weight ratio and low sparsity
    # Also include the normalized sparsity score as a weight
    heuristics = ratio + (1 - ratio) * (average_sparsity / 2)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Set heuristics to zero for items with too high sparsity to prioritize diversity
    heuristics[sparsity_score == 0] = 0
    
    return heuristics
```
