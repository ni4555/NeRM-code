```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the average weight in the other dimensions
    average_weight = np.mean(weight, axis=1)
    sparsity_factor = 1 - (np.sum(weight, axis=1) / np.prod(weight, axis=1))
    
    # Combine factors to create heuristics
    heuristics = ratio * average_weight * sparsity_factor
    
    # Normalize heuristics to ensure values are within a certain range
    max_heuristic = np.max(heuristics)
    min_heuristic = np.min(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Apply a dynamic threshold based on the normalized heuristics
    dynamic_threshold = np.mean(heuristics) + np.std(heuristics)
    heuristics[heuristics < dynamic_threshold] = 0
    
    return heuristics
```
