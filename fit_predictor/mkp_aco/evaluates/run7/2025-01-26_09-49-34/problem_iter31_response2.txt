```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor by considering the range of weight dimensions
    diversity_factor = (np.ptp(weight, axis=1) + 1) / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) == 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors using a weighted sum to form a composite heuristic value
    combined_factor = 0.4 * normalized_prize + 0.3 * sparsity_factor + 0.2 * inv_variance_factor + 0.1 * diversity_factor
    
    # Apply a threshold to encourage diversity
    threshold = np.percentile(combined_factor, 60)  # 60% threshold
    combined_factor[combined_factor < threshold] *= 1.5
    
    # Introduce sparsity thoughtfully by setting a certain proportion of low-composite-value items to zero
    num_to_zero = int(len(combined_factor) * 0.08)  # Zero out 8% of the lowest combined-factor values
    combined_factor[np.argsort(combined_factor)[:num_to_zero]] = 0
    
    # Normalize the combined factor to get heuristics
    max_combined = np.max(combined_factor)
    if max_combined > 0:
        heuristics = combined_factor / max_combined
    else:
        heuristics = np.zeros_like(combined_factor)
    
    return heuristics
```
