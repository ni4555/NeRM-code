```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the inverse of the average normalized weight for each item
    average_normalized_weight = np.mean(weight, axis=1)
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the variance of the weights, rewarding items with low variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Adjust heuristics based on sparsity, penalizing items with low sparsity
    adjusted_sparsity = (1 - sparsity_factor) ** 2
    # Adjust heuristics based on variance, rewarding items with low variance
    variance_adjustment = 1 / (1 + weight_variance)
    # Combine the adjustments
    heuristics = normalized_prize * inverse_average_weight * adjusted_sparsity * variance_adjustment
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
