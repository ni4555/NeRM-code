```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Consider items with a higher ratio of prize to weight as more promising
    ratio_factor = normalized_prize / weight.sum(axis=1)
    
    # Calculate a dynamic factor based on the standard deviation to promote diversity
    std_factor = np.mean(np.std(weight, axis=1))
    
    # Promote items with lower variance in weight dimensions
    variance_factor = 1 / (std_factor + 1e-5)
    
    # Combine factors into a weighted sum
    combined_factor = ratio_factor * variance_factor
    
    # Introduce sparsity by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(combined_factor) * 0.1)
    combined_factor[np.argsort(combined_factor)[:num_to_zero]] = 0
    
    # Adjust heuristics based on the average prize value of selected items
    selected_prize_average = np.mean(prize[combined_factor > 0])
    adjustment_factor = selected_prize_average / np.mean(prize)
    combined_factor *= adjustment_factor
    
    return combined_factor
```
