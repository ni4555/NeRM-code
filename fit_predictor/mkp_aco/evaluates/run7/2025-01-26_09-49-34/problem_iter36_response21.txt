```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to encourage more evenly distributed decisions
    normalized_prize = prize / np.sum(prize)
    
    # Sparsity factor is a bonus for items that are non-zero across all dimensions
    sparsity_factor = np.where(np.sum(weight, axis=1) == weight.shape[1], 1, 0)
    
    # Inverse variance factor to prevent overfitting on high variance items
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combining all factors with proper weighting to form heuristics
    combined_factor = 0.6 * normalized_prize + 0.2 * sparsity_factor + 0.2 * inv_variance_factor
    
    # Add Gaussian noise to heuristics to promote diversity in the solution space
    noise_factor = np.random.normal(0, 0.01, size=combined_factor.shape)
    
    # Adjust heuristics based on a weighted combination of factors and noise
    heuristics = combined_factor + noise_factor
    
    # Adaptive thresholding to explore the middle ground of heuristics
    threshold = np.percentile(heuristics, 50)  # Set the 50% threshold
    heuristics[heuristics > threshold] *= 1.2
    
    # Refine heuristics to ensure balance between exploration and exploitation
    for _ in range(3):  # Iterate to refine heuristics multiple times
        lower_threshold = np.percentile(heuristics, 25)  # 25% lower threshold
        heuristics[(heuristics < threshold) & (heuristics > lower_threshold)] *= 0.9  # Scale down
        
        higher_threshold = np.percentile(heuristics, 75)  # 75% higher threshold
        heuristics[(heuristics > threshold) & (heuristics < higher_threshold)] *= 1.1  # Scale up
    
    # Incorporate domain knowledge by favoring items with high diversity
    diversity_factor = np.exp(-np.sum(weight ** 2, axis=1))
    heuristics *= diversity_factor
    
    # Normalize by the maximum heuristic value to maintain a range of 0-1
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Introduce sparsity to prevent overreliance on a few items
    sparsity_fraction = 0.05  # Fraction of items to set to zero for sparsity
    num_to_zero = int(len(heuristics) * sparsity_fraction)
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
