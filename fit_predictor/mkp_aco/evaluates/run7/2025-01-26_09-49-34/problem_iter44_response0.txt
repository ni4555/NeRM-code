```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Sparsity factor for items with zero weight in all dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Inverse variance factor to account for variability in weights
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Factor to balance the importance of high prize and low variance
    balance_factor = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Noise factor for diversity, with a level based on the sum of the balance factors
    noise_level = np.random.rand() / np.sum(balance_factor)
    perturbation = np.random.normal(0, noise_level, size=balance_factor.shape)
    
    # Apply noise to balance factors to increase diversity
    heuristics = balance_factor + perturbation
    
    # Calculate the mean heuristic to use as a base threshold
    mean_heuristic = np.mean(heuristics)
    
    # Set heuristics below a certain percentile of the mean to zero to promote sparsity
    percentile_threshold = np.percentile(heuristics, 20)  # 20th percentile as an example
    heuristics[heuristics < percentile_threshold] = 0
    
    # Refine heuristics by promoting those that are above the mean and are sparse
    # Items that are above the mean and have a sparsity factor above a certain threshold are kept
    items_to_keep = (heuristics > mean_heuristic) & (sparsity_factor > 0.5)
    heuristics[~items_to_keep] = 0
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
