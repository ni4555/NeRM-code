```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Sparsify by considering the average weight in the other dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Create heuristics by multiplying ratio by a factor of average weight
    heuristics = ratio * average_weight
    
    # Incorporate global insight by penalizing high variance in item weights
    global_insight = 1 / (1 + np.sqrt(np.sum(weight**2, axis=1)))
    
    # Combine heuristics with global insight to get a more informed heuristic value
    heuristics = heuristics * global_insight
    
    # Dynamically adjust the sparsification threshold based on the distribution of heuristics
    sorted_heuristics = np.sort(heuristics)[::-1]
    sparsity_threshold = np.mean(sorted_heuristics) * 0.5
    
    # Apply the sparsification threshold, setting elements below the threshold to zero
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
