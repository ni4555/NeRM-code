```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the prize to weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor by considering the number of dimensions with zero weight
    sparsity_factor = (np.sum(weight == 0, axis=1) / weight.shape[1]) < 0.5
    
    # Calculate the diversity factor based on the variance of the ratio
    diversity_factor = np.var(ratio)
    
    # Combine the factors to create the heuristic values
    heuristics = ratio * sparsity_factor * diversity_factor
    
    # Normalize the heuristics by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold to sparsify the heuristics, setting elements below the mean of the heuristics to zero
    sparsity_threshold = np.mean(heuristics)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
