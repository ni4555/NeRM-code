```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors thoughtfully to determine the initial heuristics
    initial_heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce noise for diversity
    noise = np.random.normal(0, 0.01, size=initial_heuristics.shape)
    heuristics = initial_heuristics + noise
    
    # Introduce a dynamic threshold for adjusting heuristics
    threshold = np.percentile(heuristics, 75)  # 75% threshold to balance exploration and exploitation
    heuristics[heuristics < threshold] *= 1.2
    
    # Sparsify heuristics by setting elements below a certain percentile to zero
    sparsity_threshold = np.percentile(heuristics, 10)  # 10% threshold for sparsity
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Iteratively refine heuristics to balance exploration and exploitation
    # Adjust heuristics based on their distance to the threshold and sparsity
    for i in range(len(heuristics)):
        if heuristics[i] > threshold and sparsity_factor[i] > 0.4:
            heuristics[i] *= 1.1
    
    # Normalize heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
