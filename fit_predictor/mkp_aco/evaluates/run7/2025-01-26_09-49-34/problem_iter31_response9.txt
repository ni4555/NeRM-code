```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor to encourage selection of different items
    diversity_factor = 1 / np.mean(np.std(weight, axis=1))
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the balance factor by considering the difference between min and max weight in each dimension
    balance_factor = 1 / np.mean(np.max(weight, axis=1) - np.min(weight, axis=1))
    
    # Calculate the initial heuristics based on the product of normalized prize and factors
    heuristics = normalized_prize * diversity_factor * sparsity_factor * balance_factor
    
    # Introduce dynamic exploration and exploitation by modifying heuristics based on a percentile threshold
    threshold = np.percentile(heuristics, 75)  # 75% threshold for exploration
    heuristics[heuristics < threshold] *= 1.2  # Exploit items close to the threshold
    heuristics[heuristics >= threshold] *= 0.8  # Explore more diverse items
    
    # Normalize heuristics by dividing by the sum of heuristics to maintain sum-to-one property
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Introduce sparsity by zeroing out a fraction of the lowest heuristics
    num_to_zero = int(len(heuristics) * 0.15)  # Zero out 15% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
