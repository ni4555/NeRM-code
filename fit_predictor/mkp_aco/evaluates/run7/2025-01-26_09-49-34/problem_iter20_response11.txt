```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    # Adding a small value to avoid division by zero
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate the sparsity factor based on the number of dimensions with zero weight
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Incorporate multiple criteria in a weighted manner
    # Sparsity adjustment: Reward high sparsity
    sparsity_adjustment = np.exp(-sparsity_factor)
    
    # Variance adjustment: Reward low variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_adjustment = 1 / (1 + weight_variance)
    
    # Diversity adjustment: Prioritize item diversity
    diversity_factor = np.sum(weight != 0, axis=1) / weight.shape[1]
    
    # Apply a weighted sum of adjustments
    heuristics *= (normalized_prize * variance_adjustment * sparsity_adjustment * diversity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Dynamically adapt thresholds to problem complexity
    # Use a threshold based on the mean of heuristics adjusted by the variance
    threshold = np.mean(heuristics * variance_adjustment)
    heuristics[heuristics < threshold] = 0
    
    # Return the final heuristics
    return heuristics
```
