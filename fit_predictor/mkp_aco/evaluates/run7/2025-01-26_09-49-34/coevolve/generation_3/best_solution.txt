Fitness: inf

Description:
Enhance the MKP resolution with an advanced stochastic iterative heuristic that leverages adaptive sampling, real-time fitness recalibration, and resilient perturbation strategies. The core strategy is to maximize the cumulative value of selected items within complex weight constraints, ensuring an optimal trade-off between exploration and exploitation. This innovative approach integrates a sophisticated multi-objective optimization framework to synergistically refine candidate solutions and broaden the search space, ultimately yielding robust solutions under stringent weight limitations.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    # Initialize heuristic values with 0
    heuristics = np.zeros(n)
    # Adaptive sampling
    alpha = 0.5
    # Resilient perturbation parameters
    max_perturbation = 0.1
    perturbation_std = 0.05
    # Real-time fitness recalibration
    for _ in range(100):  # Number of iterations
        # Randomly select a subset of items for exploration
        selected_indices = np.random.choice(n, size=int(n * alpha), replace=False)
        # Calculate fitness of the selected items
        fitness = np.sum(prize[selected_indices] * weight[selected_indices], axis=1)
        # Update heuristics based on fitness
        heuristics[selected_indices] = fitness / np.sum(fitness)
        # Resilient perturbation
        perturbation = np.random.normal(0, perturbation_std, size=n)
        perturbation = np.clip(perturbation, -max_perturbation, max_perturbation)
        heuristics += perturbation
        # Recalibrate heuristics to ensure they sum to 1
        heuristics /= np.sum(heuristics)
    return heuristics