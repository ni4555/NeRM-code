Fitness: inf

Description:
Developing a heuristic-based stochastic solution sampler for the Multi-Knapsack Problem (MKP) with a focus on fairness through normalization, direct heuristic calculation, and efficiency under strict multi-dimensional weight constraints. This approach employs a simplified version of adaptive sampling, which iteratively refines candidate solutions through a combination of static and dynamic fitness evaluations, and incorporates robust perturbation techniques to balance exploration and exploitation, resulting in an optimized prize collection strategy without the complexity of full-fledged metaheuristics.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    m = weight.shape[1]
    heuristic = np.zeros_like(prize, dtype=float)
    cumulative_weight = np.zeros_like(weight, dtype=float)
    
    for j in range(m):
        sorted_indices = np.argsort(weight[:, j])[::-1]
        sorted_prize = prize[sorted_indices]
        sorted_weight = weight[sorted_indices, j]
        
        cumulative_weight[sorted_indices] = np.cumsum(sorted_weight)
        heuristic[sorted_indices] = np.where(cumulative_weight >= 1, sorted_prize, 0)
    
    # Normalize the heuristics
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    
    return heuristic