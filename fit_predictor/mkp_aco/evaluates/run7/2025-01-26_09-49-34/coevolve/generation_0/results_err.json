{
  "generation": 0,
  "description": "Solving Multiple Knapsack Problems (MKP) through stochastic solution sampling based on \"heuristics\". MKP involves selecting a subset of items to maximize the total prize collected, subject to multi-dimensional maximum weight constraints.",
  "failed_solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    heuristic_scores = np.zeros(n)\n    \n    # Use a priority queue to store the items based on their heuristic score\n    priority_queue = []\n    \n    for i in range(n):\n        # Calculate the heuristic score for each item\n        score = np.sum(prize[i] / weight[i, :])\n        # Add the item to the priority queue\n        priority_queue.append((score, i))\n    \n    # Sort the priority queue based on the heuristic score\n    priority_queue.sort(reverse=True)\n    \n    # Assign higher heuristic scores to the top items\n    for rank, (score, item) in enumerate(priority_queue):\n        heuristic_scores[item] = rank + 1\n    \n    return heuristic_scores",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize a random generator for stochastic sampling\n    rng = np.random.default_rng()\n    \n    # Normalize the prize to create a relative measure of item value\n    normalized_prize = prize / np.sum(prize)\n    \n    # Calculate the total weight for each item\n    total_weight = np.sum(weight, axis=1)\n    \n    # Calculate the probability of selecting each item based on normalized prize and total weight\n    probabilities = normalized_prize / total_weight\n    \n    # Sample the items based on the calculated probabilities\n    sampled_indices = rng.choice(range(len(prize)), size=int(len(prize) / 2), p=probabilities)\n    \n    # Create a heuristic array where selected items have higher values\n    heuristics = np.zeros_like(prize)\n    heuristics[sampled_indices] = 1.0\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the ratio of prize to weight for each item\n    ratio = prize / weight.sum(axis=1, keepdims=True)\n    # Normalize the ratio to get the heuristics\n    return ratio / ratio.sum(axis=0, keepdims=True)",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by random selection",
      "stdout_file": null,
      "code_file": null
    }
  ]
}