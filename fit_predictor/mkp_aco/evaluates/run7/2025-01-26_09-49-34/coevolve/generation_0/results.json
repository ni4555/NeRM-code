{
  "generation": 0,
  "description": "Solving Multiple Knapsack Problems (MKP) through stochastic solution sampling based on \"heuristics\". MKP involves selecting a subset of items to maximize the total prize collected, subject to multi-dimensional maximum weight constraints.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Normalize the prize to be between 0 and 1\n    normalized_prize = prize / np.sum(prize)\n    \n    # Calculate the heuristic based on normalized prize\n    heuristics = normalized_prize * np.sum(weight, axis=1)\n    \n    return heuristics",
      "fitness": 19.37143156200888,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_0.txt",
      "code_file": "coevolve\\generation_0\\code_0.py"
    }
  ]
}