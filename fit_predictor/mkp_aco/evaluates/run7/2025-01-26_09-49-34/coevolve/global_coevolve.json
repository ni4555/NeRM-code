{
  "generations": [
    {
      "generation": 0,
      "description": "Solving Multiple Knapsack Problems (MKP) through stochastic solution sampling based on \"heuristics\". MKP involves selecting a subset of items to maximize the total prize collected, subject to multi-dimensional maximum weight constraints.",
      "best_fitness": 19.37143156200888,
      "best_code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Normalize the prize to be between 0 and 1\n    normalized_prize = prize / np.sum(prize)\n    \n    # Calculate the heuristic based on normalized prize\n    heuristics = normalized_prize * np.sum(weight, axis=1)\n    \n    return heuristics"
    },
    {
      "generation": 9,
      "description": "The problem description is as follows:\n\nDesign a novel heuristic algorithm for solving Multiple Knapsack Problems (MKP), which involves selecting an optimal subset of items from various knapsacks to maximize total prize collection while adhering to multi-dimensional weight constraints. The algorithm must integrate stochastic sampling, adaptive sampling strategies, and a dynamic fitness evaluation system to iteratively refine candidate solutions. Key features include multi-objective optimization, robust perturbation techniques, and a balanced approach to exploration and exploitation. The algorithm's performance will be assessed through comprehensive testing using standard benchmark instances, focusing on maximizing prize collection while minimizing computational effort, and evaluating results based on objective function values, computational time, and robustness against varying knapsack capacities and item distributions.",
      "best_fitness": 21.65863807264683,
      "best_code": "import numpy as np\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = weight.shape\n    num_samples = 1000\n    item_means = np.mean(weight, axis=0)\n    item_covariances = np.cov(weight, rowvar=False)\n    max_prize = np.max(prize)\n    heuristics = np.zeros(n)\n    \n    for i in range(n):\n        # Generate random samples around the mean\n        samples = multivariate_normal.rvs(item_means, item_covariances, num_samples)\n        # Calculate fitness for each sample\n        fitness = (prize[i] * np.exp(-np.sum(samples, axis=1) / max_prize))\n        # Normalize fitness for the item\n        heuristics[i] = np.sum(fitness) / num_samples\n    \n    return heuristics"
    },
    {
      "generation": 1,
      "description": "Employing advanced metaheuristics and stochastic optimization techniques, we propose a novel solution framework for the Multi-Knapsack Problem (MKP) that leverages adaptive sampling strategies to iteratively refine candidate solutions. This approach integrates dynamic fitness evaluation, multi-objective optimization, and robust perturbation algorithms to achieve a synergistic balance between exploration and exploitation, ultimately leading to more effective and efficient prize maximization under stringent weight constraints.",
      "best_fitness": Infinity,
      "best_code": ""
    }
  ]
}