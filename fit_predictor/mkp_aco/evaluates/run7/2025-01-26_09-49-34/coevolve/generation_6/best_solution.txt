Fitness: inf

Description:
Develop a probabilistic optimization heuristic tailored for the Multiple Knapsack Problem (MKP) that integrates adaptive stochastic sampling, real-time fitness assessment, and multi-objective decision-making. This heuristic will utilize a dynamic probability model for item selection, which weights the likelihood of including items based on a normalized value-to-weight ratio and a heuristic assessment of feasibility considering the remaining knapsack capacities. The algorithm will iteratively refine candidate solutions by combining intelligent perturbation techniques and heuristic-driven search strategies to balance the exploration of the solution space with the exploitation of the most promising solutions. The core goal is to maximize the cumulative reward across multiple knapsacks while ensuring a balance between computational efficiency and solution robustness.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    # Calculate normalized value-to-weight ratio for each item
    value_to_weight = prize / weight.sum(axis=1)[:, np.newaxis]
    # Heuristic assessment of feasibility
    feasibility = 1 / (1 + weight.sum(axis=1)[:, np.newaxis] / n)
    # Combine the two into a heuristic score
    heuristic_scores = value_to_weight * feasibility
    # Normalize the heuristic scores
    max_score = heuristic_scores.max()
    min_score = heuristic_scores.min()
    normalized_scores = (heuristic_scores - min_score) / (max_score - min_score)
    return normalized_scores