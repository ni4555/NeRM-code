Fitness: 21.65863807264683

Description:
The problem description is as follows:

Design a novel heuristic algorithm for solving Multiple Knapsack Problems (MKP), which involves selecting an optimal subset of items from various knapsacks to maximize total prize collection while adhering to multi-dimensional weight constraints. The algorithm must integrate stochastic sampling, adaptive sampling strategies, and a dynamic fitness evaluation system to iteratively refine candidate solutions. Key features include multi-objective optimization, robust perturbation techniques, and a balanced approach to exploration and exploitation. The algorithm's performance will be assessed through comprehensive testing using standard benchmark instances, focusing on maximizing prize collection while minimizing computational effort, and evaluating results based on objective function values, computational time, and robustness against varying knapsack capacities and item distributions.

Code:
import numpy as np
import numpy as np
from scipy.stats import multivariate_normal

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    num_samples = 1000
    item_means = np.mean(weight, axis=0)
    item_covariances = np.cov(weight, rowvar=False)
    max_prize = np.max(prize)
    heuristics = np.zeros(n)
    
    for i in range(n):
        # Generate random samples around the mean
        samples = multivariate_normal.rvs(item_means, item_covariances, num_samples)
        # Calculate fitness for each sample
        fitness = (prize[i] * np.exp(-np.sum(samples, axis=1) / max_prize))
        # Normalize fitness for the item
        heuristics[i] = np.sum(fitness) / num_samples
    
    return heuristics