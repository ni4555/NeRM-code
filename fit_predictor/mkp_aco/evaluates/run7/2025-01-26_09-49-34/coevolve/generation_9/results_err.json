{
  "generation": 9,
  "description": "The problem description is as follows:\n\nDesign a novel heuristic algorithm for solving Multiple Knapsack Problems (MKP), which involves selecting an optimal subset of items from various knapsacks to maximize total prize collection while adhering to multi-dimensional weight constraints. The algorithm must integrate stochastic sampling, adaptive sampling strategies, and a dynamic fitness evaluation system to iteratively refine candidate solutions. Key features include multi-objective optimization, robust perturbation techniques, and a balanced approach to exploration and exploitation. The algorithm's performance will be assessed through comprehensive testing using standard benchmark instances, focusing on maximizing prize collection while minimizing computational effort, and evaluating results based on objective function values, computational time, and robustness against varying knapsack capacities and item distributions.",
  "failed_solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize heuristic values with a small random value\n    heuristics = np.random.rand(len(prize))\n\n    # Adaptive sampling strategy: start with a larger step size and reduce it over time\n    step_size = 1.0\n    step_size_reduction = 0.99\n    iterations = 100\n\n    for _ in range(iterations):\n        # Stochastic sampling: select a random subset of items to evaluate\n        indices = np.random.choice(len(prize), size=int(len(prize) * 0.1), replace=False)\n        selected_items = weight[indices]\n\n        # Dynamic fitness evaluation: calculate the fitness of each item based on its prize-to-weight ratio\n        fitness = prize[indices] / selected_items.sum(axis=1)\n\n        # Update heuristic values based on fitness\n        heuristics[indices] = (1 - step_size) * heuristics[indices] + step_size * fitness\n\n        # Robust perturbation techniques: occasionally swap heuristic values to explore new solutions\n        if np.random.rand() < 0.01:\n            swap_indices = np.random.choice(len(prize), size=2, replace=False)\n            heuristics[swap_indices] = heuristics[swap_indices[::-1]]\n\n        # Reduce step size for the next iteration\n        step_size *= step_size_reduction\n\n    # Normalize heuristic values to sum to 1 for each knapsack\n    heuristics /= heuristics.sum(axis=0, keepdims=True)\n\n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by predictor (rank: 2, confidence: 0.9985)",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape\n    # Initialize a probability matrix based on inverse weight\n    probability = 1 / (weight.sum(axis=1) + 1e-10)\n    probability /= probability.sum()\n    \n    # Adaptive sampling based on the current state of probability matrix\n    num_samples = int(0.1 * n)\n    samples = np.random.choice(n, num_samples, replace=False, p=probability)\n    \n    # Dynamic fitness evaluation system\n    fitness_scores = prize[samples] / (weight[samples].sum(axis=1) + 1e-10)\n    \n    # Robust perturbation technique\n    perturbation_indices = np.random.choice(num_samples, int(num_samples * 0.2), replace=False)\n    fitness_scores[perturbation_indices] *= np.random.rand(len(perturbation_indices))\n    \n    # Balancing exploration and exploitation\n    exploration_rate = 0.1\n    exploitation_rate = 0.9\n    heuristics = (exploration_rate * probability) + (exploitation_rate * fitness_scores)\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by predictor (rank: 3, confidence: 0.9972)",
      "stdout_file": null,
      "code_file": null
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    m = weight.shape[1]\n    n = prize.size\n    heuristic = np.zeros(n)\n    \n    # Initialize with random values\n    np.random.seed(42)\n    heuristic = np.random.rand(n)\n    \n    # Stochastic sampling and dynamic fitness evaluation\n    for _ in range(100):\n        # Adaptive sampling based on current heuristic\n        indices = np.argsort(heuristic)[::-1]\n        for i in indices:\n            if np.all(weight[i] <= 1):\n                # Robust perturbation technique\n                heuristic[i] = 1\n                break\n        \n        # Balanced exploration and exploitation\n        for i in range(n):\n            if np.random.rand() < heuristic[i]:\n                if np.all(weight[i] <= 1):\n                    heuristic[i] = 1\n                else:\n                    heuristic[i] *= 0.9\n    \n    # Normalize heuristic values to sum to 1\n    heuristic /= np.sum(heuristic)\n    return heuristic",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Filtered by predictor (rank: 4, confidence: 0.7795)",
      "stdout_file": null,
      "code_file": null
    }
  ]
}