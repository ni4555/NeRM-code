```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the variance of weight across all dimensions for each item
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Normalize prize by its maximum value to ensure the heuristic scale is consistent
    normalized_prize = prize / np.max(prize)
    
    # Calculate heuristics by combining normalized prize, inverse sparsity factor, and variance considerations
    heuristics = normalized_prize * (1 - sparsity_factor) / (1 + weight_variance)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a sigmoid transformation to smoothly map heuristics to a range [0, 1]
    heuristics = 1 / (1 + np.exp(-heuristics))
    
    # Adjust heuristics based on the inverse of the variance to balance out the variance influence
    heuristics *= 1 / (1 + weight_variance)
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = np.mean(1 / (1 + weight_variance)) * (1 - average_sparsity)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
