```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the inverse of the average normalized weight for each item
    average_normalized_weight = np.mean(weight, axis=1)
    inverse_average_weight = 1 / average_normalized_weight
    
    # Create heuristics by combining the ratio with the inverse average weight
    # and adjusting by the sparsity factor
    heuristics = ratio * inverse_average_weight * (1 - sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Dynamically set a threshold for sparsification
    sparsity_threshold = np.max(heuristics) / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
