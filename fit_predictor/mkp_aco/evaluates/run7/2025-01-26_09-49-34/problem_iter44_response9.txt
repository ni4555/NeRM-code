```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)

    # Sparsity factor for items with zero weight in all dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)

    # Inverse variance factor to account for variability in weights
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)

    # Factor to balance the importance of high prize and low variance
    balance_factor = normalized_prize * sparsity_factor * inv_variance_factor

    # Calculate the median balance factor for dynamic thresholding
    median_balance_factor = np.median(balance_factor)

    # Dynamic thresholding with adaptive weighting
    adaptive_weight = np.exp(-np.sum(weight ** 2, axis=1) / np.sum(weight ** 4, axis=1))
    threshold = adaptive_weight * median_balance_factor * (1 - np.random.rand())

    # Set heuristics below the threshold to zero to promote sparsity
    heuristics = np.where(balance_factor >= threshold, balance_factor, 0)

    # Refine heuristics by promoting those that are above the threshold and are sparse
    # Items that are above the threshold and have a sparsity factor above a certain threshold are kept
    refined_heuristics = np.where((heuristics > 0) & (sparsity_factor > 0.5), heuristics, 0)

    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(refined_heuristics)
    if heuristic_sum > 0:
        refined_heuristics /= heuristic_sum

    return refined_heuristics
```
