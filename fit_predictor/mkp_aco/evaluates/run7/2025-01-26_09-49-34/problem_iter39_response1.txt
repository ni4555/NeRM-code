```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate a balance factor considering both sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Incorporate diversity by adding a random component with a bias towards sparser items
    np.random.seed(0)
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity[sparsity_factor < 1] *= 1.5  # Bias towards sparser items
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Dynamically adapt the sparsity threshold based on the number of items
    sparsity_threshold = np.percentile(balanced_prize, 30)  # 30% threshold for sparsity
    sparsity_threshold *= (1 + 0.1 * (len(balanced_prize) / n))  # Adjust based on problem scale
    balanced_prize[balanced_prize < sparsity_threshold] = 0
    
    # Use a threshold to amplify the heuristics of items with higher potential
    amplification_threshold = np.percentile(balanced_prize, 70)  # 70% threshold
    amplification_threshold *= (1 - 0.1 * (len(balanced_prize) / n))  # Adjust based on problem scale
    balanced_prize[balanced_prize > amplification_threshold] *= 1.2
    
    # Refine the heuristics by iterating and adjusting based on the current state
    for _ in range(3):  # Iterate for refinement
        heuristic_sum = np.sum(balanced_prize)
        if heuristic_sum > 0:
            balanced_prize /= heuristic_sum
    
    return balanced_prize
```
