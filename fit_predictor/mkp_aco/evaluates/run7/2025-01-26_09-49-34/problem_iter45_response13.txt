```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize using min-max scaling to avoid dominance by high prizes
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)
    
    # Introduce sparsity with adaptive sparsity_factor based on mean variance
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    sparsity_factor = 1 / (1 + inv_variance_factor)
    
    # Add noise for exploration and diversity
    noise = np.random.normal(0, 0.01, size=normalized_prize.shape)
    
    # Combine factors for heuristics
    heuristics = normalized_prize * sparsity_factor + noise
    
    # Introduce controlled diversity by using a floor and ceiling
    heuristics = np.clip(heuristics, 0.01, 0.99)
    
    # Amplify higher potential heuristics based on the balance of weights
    balance_factor = sparsity_factor * np.mean(weight, axis=1)
    heuristics *= balance_factor
    
    # Refine heuristics by adjusting weights for high sparsity items
    for i in range(n):
        if sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.5
    
    return heuristics
```
