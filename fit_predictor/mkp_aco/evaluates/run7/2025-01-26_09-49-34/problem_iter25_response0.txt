```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the variance-based factor
    variance_factor = (np.mean(weight, axis=1) ** 2) / np.var(weight, axis=1)
    
    # Combine normalized prize, sparsity, and variance factors
    combined_factor = normalized_prize * sparsity_factor * variance_factor
    
    # Integrate domain-specific knowledge by adjusting the factors
    # For example, we might prioritize items with higher prize values
    combined_factor *= (normalized_prize + 0.5)
    
    # Adjust heuristics based on a threshold that promotes diversity
    threshold = np.percentile(combined_factor, 50)  # 50% threshold for balance
    heuristics = np.where(combined_factor >= threshold, combined_factor, 0)
    
    # Refine thresholds dynamically based on the current heuristics
    # This step could be adapted to the specific problem domain
    refined_threshold = np.percentile(heuristics, 70)  # 70% threshold
    heuristics[heuristics > refined_threshold] *= 1.2
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply post-processing to promote sparsity
    # For instance, we might zero out the lowest 10% of heuristics
    num_to_zero = int(len(heuristics) * 0.1)
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
