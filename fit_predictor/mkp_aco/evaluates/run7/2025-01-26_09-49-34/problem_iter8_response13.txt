```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Introduce a complexity factor based on the average weight of each item
    complexity_factor = np.mean(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Incorporate a domain-specific characteristic, such as the diversity of weights
    diversity_factor = np.std(weight, axis=1)
    
    # Combine factors using a weighted sum, with ratio being the most important factor
    combined_factors = ratio * 0.6 + complexity_factor * 0.2 + diversity_factor * 0.2
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(combined_factors)
    if max_heuristic > 0:
        combined_factors /= max_heuristic
    
    # Dynamically adjust the threshold for the heuristic values
    # Use the median heuristic value as a threshold to filter out less promising items
    median_heuristic = np.median(combined_factors)
    threshold = median_heuristic * 0.9  # Set threshold to 90% of the median
    
    # Apply the threshold to filter heuristics
    heuristics = np.where(combined_factors >= threshold, combined_factors, 0)
    
    return heuristics
```
