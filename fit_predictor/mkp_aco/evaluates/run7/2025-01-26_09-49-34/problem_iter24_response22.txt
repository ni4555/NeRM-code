```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    # Adding a small value to avoid division by zero
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate the diversity factor based on the standard deviation of weights
    diversity_factor = np.std(weight, axis=1)
    
    # Calculate the variance of the weights
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Adjust heuristics based on diversity and variance, rewarding items with high diversity and low variance
    diversity_adjustment = (1 + np.exp(-diversity_factor))
    variance_adjustment = (1 + np.exp(-weight_variance))
    heuristics *= diversity_adjustment * variance_adjustment
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Incorporate weighted factors based on the normalized prize and variance adjustment
    weighted_factors = normalized_prize * variance_adjustment
    
    # Final heuristics based on the sum of weighted factors and adjusted diversity factor
    heuristics *= weighted_factors
    
    # Adjust heuristics to ensure that the sum of selected items' weights does not exceed the knapsack capacity
    total_weight = np.sum(weight, axis=1)
    max_weight = np.array([1] * len(total_weight))  # Assuming the maximum weight constraint is 1 per dimension
    feasible_heuristics = heuristics[total_weight <= max_weight]
    if feasible_heuristics.size > 0:
        feasible_max_heuristic = np.max(feasible_heuristics)
        heuristics[total_weight > max_weight] = 0
        heuristics[total_weight <= max_weight] /= feasible_max_heuristic
    
    return heuristics
```
