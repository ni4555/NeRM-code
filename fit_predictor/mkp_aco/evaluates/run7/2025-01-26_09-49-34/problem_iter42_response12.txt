```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize to avoid dominance by high prizes
    normalized_prize = prize / np.max(prize)

    # Calculate balance factor using variance and sparsity
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    balance_factor = sparsity_factor * inv_variance_factor

    # Introduce diversity with a floor for non-negativity
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)
    heuristics = normalized_prize * balance_factor + diversity

    # Dynamically adjust thresholds based on the distribution of heuristics
    sparsity_threshold = np.percentile(heuristics, 30)
    amplification_threshold = np.percentile(heuristics, 70)

    # Apply sparsity by setting low heuristics to zero
    heuristics[heuristics < sparsity_threshold] = 0

    # Amplify high-potential heuristics
    heuristics[heuristics > amplification_threshold] *= 1.2

    # Normalize the heuristics to maintain balance and sparsity
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum

    # Iteratively refine heuristics to balance exploration and exploitation
    for i in range(n):
        if heuristics[i] > amplification_threshold and sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.2

    return heuristics
```
