```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize for each item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor as the fraction of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the average weight across dimensions for each item
    average_weight = np.mean(weight, axis=1)
    
    # Calculate the heuristic combining normalized prize, sparsity, and average weight
    heuristics = normalized_prize * (1 - sparsity_factor) * average_weight
    
    # Apply a sigmoid transformation to smoothly map heuristics to a range [0, 1]
    heuristics = 1 / (1 + np.exp(-heuristics))
    
    # Normalize heuristics to ensure non-negative values
    max_heuristic = np.max(heuristics)
    min_threshold = max_heuristic / 10
    
    # Apply a strategic threshold to filter out less promising items
    heuristics[heuristics < min_threshold] = 0
    
    return heuristics
```
