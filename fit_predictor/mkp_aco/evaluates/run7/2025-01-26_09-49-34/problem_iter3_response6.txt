```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the average prize per dimension
    average_prize_per_dimension = np.mean(prize, axis=0)
    
    # Calculate the average weight per dimension
    average_weight_per_dimension = np.mean(weight, axis=0)
    
    # Combine factors: ratio, average prize per dimension, and average weight per dimension
    combined_factors = ratio * average_prize_per_dimension / average_weight_per_dimension
    
    # Normalize the combined factors
    max_combined_factor = np.max(combined_factors)
    normalized_factors = combined_factors / max_combined_factor
    
    # Sparsify by setting a dynamic threshold based on the normalized factors
    sparsity_threshold = np.mean(normalized_factors) * 0.5
    heuristics = np.where(normalized_factors > sparsity_threshold, normalized_factors, 0)
    
    return heuristics
```
