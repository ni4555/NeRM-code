```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight per item for each dimension
    item_ratios = prize / weight
    
    # Calculate the average weight per dimension
    average_weight = np.mean(weight, axis=0)
    
    # Calculate the weighted average ratio for each item
    weighted_ratios = np.sum(item_ratios * average_weight, axis=1)
    
    # Normalize the weighted ratios to get a relative measure of each item's value
    normalized_ratios = weighted_ratios / np.sum(weighted_ratios)
    
    # Apply a sparsity threshold to the normalized ratios
    sparsity_threshold = np.percentile(normalized_ratios, 90)
    heuristics = np.where(normalized_ratios > sparsity_threshold, normalized_ratios, 0)
    
    return heuristics
```
