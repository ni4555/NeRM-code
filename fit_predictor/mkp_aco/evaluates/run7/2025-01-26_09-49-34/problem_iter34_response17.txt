```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the ratio of prize to the sum of weights in each dimension
    ratio_to_weight_sum = normalized_prize / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate the standard deviation of each item's weight
    std_dev = np.std(weight, axis=1)
    
    # Promote diversity and control variance by using a dynamic factor
    dynamic_factor = 1 / (std_dev + 1e-8)  # Add a small constant to avoid division by zero
    
    # Introduce sparsity to avoid overfitting and to explore a wider range of solutions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Combine factors and normalize to ensure all factors contribute equally
    combined_factor = ratio_to_weight_sum * dynamic_factor * sparsity_factor
    
    # Iteratively refine heuristics to balance exploration and exploitation
    for _ in range(2):
        combined_factor = combined_factor / (np.sum(combined_factor) + 1)
    
    # Normalize heuristics to prevent overflow and ensure a proper sum
    heuristics = combined_factor / np.sum(combined_factor)
    
    # Apply dynamic thresholding to introduce sparsity
    dynamic_threshold = np.percentile(heuristics, 5)
    heuristics[heuristics < dynamic_threshold] = 0
    
    return heuristics
```
