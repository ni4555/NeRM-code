```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the inverse of the average normalized weight for each item
    average_normalized_weight = np.mean(weight, axis=1)
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)  # Adding a small value to avoid division by zero
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the variance of the weights for each item
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Combine sparsity and variance factors to adjust heuristics
    sparsity_variance_factor = (1 - sparsity_factor) * (1 / (1 + weight_variance))
    
    # Calculate the initial heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Adjust heuristics based on the combined sparsity and variance factors
    heuristics *= sparsity_variance_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold that considers both the average normalized weight
    # and the sparsity factor, setting elements below the threshold to zero
    sparsity_threshold = np.mean(average_normalized_weight * sparsity_factor)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
