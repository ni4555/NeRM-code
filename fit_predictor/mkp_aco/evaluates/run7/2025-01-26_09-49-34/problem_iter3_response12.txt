```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate domain-specific ratios to enhance the heuristics
    density = prize / np.sum(weight**2, axis=1)
    diversity = np.max(weight, axis=1) / np.mean(weight, axis=1)
    
    # Combine ratios using a weighted average, where diversity might be emphasized
    combined_ratio = 0.5 * ratio + 0.3 * density + 0.2 * diversity
    
    # Sparsify by considering the average weight in the other dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Normalize heuristics by the average weight
    normalized_heuristics = combined_ratio / average_weight
    
    # Apply a dynamic threshold to sparsify
    dynamic_threshold = np.mean(normalized_heuristics) / 2
    heuristics = np.where(normalized_heuristics >= dynamic_threshold, normalized_heuristics, 0)
    
    return heuristics
```
