```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prize values
    normalized_prize = prize / np.sum(prize)

    # Sparsity factor for items with at least one zero weight dimension
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)

    # Inverse variance factor to account for variability in weights
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)

    # Factor to balance the importance of high prize, low variance, and sparsity
    balance_factor = normalized_prize * sparsity_factor * inv_variance_factor

    # Apply adaptive noise based on the sum of the balance factors
    noise_level = np.random.rand() / np.sum(balance_factor)
    np.random.seed(0)
    perturbation = np.random.normal(0, noise_level, size=balance_factor.shape)

    # Apply noise to balance factors to encourage diversity
    heuristics = balance_factor + perturbation

    # Use a dynamic threshold based on the median heuristic value
    median_heuristic = np.median(heuristics)
    threshold = median_heuristic * 0.9  # 90th percentile threshold

    # Set heuristics below the threshold to zero to promote sparsity
    heuristics[heuristics < threshold] = 0

    # Refine heuristics by promoting those that are above the threshold and are sparse
    # Only keep items that have a sparsity factor above a certain threshold
    sparsity_threshold = 0.5  # 50% sparsity threshold
    heuristics[sparsity_factor < sparsity_threshold] = 0

    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum

    return heuristics
```
