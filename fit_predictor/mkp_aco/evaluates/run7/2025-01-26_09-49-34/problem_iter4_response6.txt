```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Add sparsity by considering the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Incorporate dynamic thresholds based on domain-specific ratios
    dynamic_threshold = np.mean(ratio) * np.mean(min_average_weight)
    
    # Create heuristics by multiplying ratio by a factor of minimum average weight
    heuristics = ratio * min_average_weight
    
    # Normalize heuristics to balance the multi-faceted factors
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = dynamic_threshold / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Adjust heuristics to ensure a positive range by taking the max between 0 and the adjusted heuristics
    heuristics = np.maximum(0, heuristics)
    
    return heuristics
```
