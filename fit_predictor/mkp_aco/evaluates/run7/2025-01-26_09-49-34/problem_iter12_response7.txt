```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate sparsity as a factor by penalizing items with a high number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    sparsity_factor[sparsity_factor <= 0.5] = 1  # Only penalize if more than half the weights are zero
    
    # Combine the ratio and sparsity factor in a way that emphasizes higher ratios and lower sparsity
    combined_heuristic = ratio * (1 - sparsity_factor)
    
    # Normalize the combined heuristic by its mean to ensure comparability across items
    combined_heuristic_mean = np.mean(combined_heuristic)
    heuristics = combined_heuristic / combined_heuristic_mean
    
    # Apply a dynamic threshold to sparsify the heuristics, setting elements below a threshold to zero
    dynamic_threshold = np.percentile(heuristics, 95)  # Use 95th percentile to keep most promising items
    heuristics[heuristics < dynamic_threshold] = 0
    
    return heuristics
```
