```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the prize-to-weight ratio
    ratio = prize / np.sum(weight, axis=1)
    
    # Define a base factor using a sparsity penalty for non-zero weights
    sparsity_penalty = (weight != 0).mean()
    base_factor = 1 - sparsity_penalty * (1 - ratio)
    
    # Normalize the base factor to maintain consistency across items
    normalized_factor = base_factor / np.max(base_factor)
    
    # Incorporate the variance of the weight into the heuristic to penalize high weight variance
    weight_variance = np.var(weight, axis=1)
    variance_factor = 1 / (1 + weight_variance)
    
    # Combine all factors to create a comprehensive heuristic
    heuristics = normalized_factor * variance_factor
    
    # Apply sparsification by setting heuristics with low ratios to zero
    sparsity_threshold = np.percentile(ratio, 25)  # Use the 25th percentile as a threshold
    heuristics[ratio < sparsity_threshold] = 0
    
    return heuristics
```
