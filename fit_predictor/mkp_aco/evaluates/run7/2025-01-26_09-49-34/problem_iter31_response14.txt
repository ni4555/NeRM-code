```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure fairness
    normalized_prize = prize / np.sum(prize)
    
    # Introduce a diversity factor to encourage selection of different types of items
    diversity_factor = (1 / np.linalg.norm(weight, axis=1)) ** 2
    
    # Calculate a balance factor to ensure items with higher sparsity are favored
    balance_factor = np.mean(weight, axis=1) / np.sum(weight, axis=1)
    
    # Leverage variance as a feature to encourage items with lower variance
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors to generate initial heuristics
    initial_heuristics = normalized_prize * diversity_factor * balance_factor * inv_variance_factor
    
    # Apply an adaptive threshold to enhance the balance between exploration and exploitation
    threshold = np.percentile(initial_heuristics, 75)  # 75% threshold
    initial_heuristics[initial_heuristics > threshold] *= 1.2
    
    # Use a variance control mechanism to refine heuristics
    variance_control = np.max(initial_heuristics) / np.mean(initial_heuristics)
    initial_heuristics *= variance_control
    
    # Iterate to refine heuristics based on the domain criteria
    refined_heuristics = initial_heuristics.copy()
    for _ in range(5):  # Iterative refinement
        refined_heuristics *= (refined_heuristics / np.max(refined_heuristics))
    
    # Introduce sparsity thoughtfully by zeroing out a fraction of unpromising items
    num_to_zero = int(len(refined_heuristics) * 0.2)  # Zero out 20% of the lowest heuristics
    refined_heuristics[np.argsort(refined_heuristics)[:num_to_zero]] = 0
    
    return refined_heuristics
```
