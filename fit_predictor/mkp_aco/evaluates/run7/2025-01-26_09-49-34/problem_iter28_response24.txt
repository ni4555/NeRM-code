```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the diversity factor based on the sum of weights, penalizing items with similar weight profiles
    diversity_factor = np.sum(weight ** 2, axis=1)
    diversity_factor = 1 / (diversity_factor + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Combine multiple factors for initial heuristics
    initial_heuristics = normalized_prize * sparsity_factor * inv_variance_factor * diversity_factor
    
    # Calculate a performance metric based on the average prize per dimension
    performance_metric = np.mean(prize * sparsity_factor, axis=1) / np.mean(weight, axis=1)
    
    # Refine thresholds dynamically based on the performance metric, here using a percentile of the heuristics
    percentile_threshold = np.percentile(initial_heuristics, 90)  # 90th percentile as a dynamic threshold
    heuristics = np.where(initial_heuristics > percentile_threshold, initial_heuristics, 0)
    
    # Introduce a weighted refinement that balances the normalized prize, variance, and diversity
    weighted_refinement = normalized_prize + 0.5 * inv_variance_factor + 0.5 * diversity_factor
    heuristics *= weighted_refinement / (np.sum(weighted_refinement) + 1e-8)
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero based on the performance metric
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    performance_sort_indices = np.argsort(-performance_metric)
    heuristics[performance_sort_indices[:num_to_zero]] = 0
    
    return heuristics
```
