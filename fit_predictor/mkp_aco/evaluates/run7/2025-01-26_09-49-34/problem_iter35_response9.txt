```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate a balance factor by comparing each item's weight across dimensions
    balance_factor = np.mean(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics
    heuristics = normalized_prize * balance_factor * inv_variance_factor
    
    # Introduce noise to heuristics for diversification
    np.random.seed(0)  # Ensure reproducibility
    noise = np.random.normal(0, 0.01, size=heuristics.shape)
    heuristics += noise
    
    # Introduce a dynamic threshold and adjust heuristics
    threshold = np.percentile(heuristics, 80)  # Higher threshold to include more items
    heuristics[heuristics < threshold] *= 1.2
    
    # Sparsify heuristics by removing elements below a low percentile
    low_threshold = np.percentile(heuristics, 15)  # Low percentile to remove
    heuristics[heuristics < low_threshold] = 0
    
    # Normalize heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    # Refine heuristics by balancing exploration and exploitation
    # Promote items with a high balance factor and a weight closer to the median
    for i in range(len(heuristics)):
        median_weight = np.median(weight[i])
        if heuristics[i] > threshold and balance_factor[i] > 0.5 and np.abs(weight[i] - median_weight) < np.median(weight.sum(axis=1)):
            heuristics[i] *= 1.1
    
    return heuristics
```
