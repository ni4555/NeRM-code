```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the prize-to-weight ratio
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity of the weight for each item
    sparsity = (weight != 0).mean(axis=1)
    
    # Normalize the sparsity to ensure consistency across items
    normalized_sparsity = (sparsity - sparsity.min()) / (sparsity.max() - sparsity.min())
    
    # Incorporate the variance of the weight into the heuristic to penalize high weight variance
    weight_variance = np.var(weight, axis=1)
    
    # Combine factors to create a comprehensive heuristic
    heuristics = ratio * (1 - normalized_sparsity) / (1 + weight_variance)
    
    # Normalize heuristics to ensure non-negative values and maintain consistency
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
