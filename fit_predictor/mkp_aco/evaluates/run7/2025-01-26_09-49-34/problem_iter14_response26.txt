```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate sparsity as a factor by penalizing items with a high proportion of zero weights
    sparsity_factor = np.mean(weight == 0, axis=1)
    
    # Normalize the ratio and sparsity factor by dividing by the maximum value of each
    max_ratio = np.max(ratio)
    max_sparsity_factor = np.max(sparsity_factor)
    ratio /= max_ratio
    sparsity_factor /= max_sparsity_factor
    
    # Combine the normalized ratio and sparsity factor, adjusting for their impact
    heuristics = ratio / (1 + sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold to sparsify the heuristics, setting elements below a threshold to zero
    sparsity_threshold = np.mean(heuristics)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
