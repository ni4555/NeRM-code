```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    # Adding a small value to avoid division by zero
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate the diversity factor based on the standard deviation of weights
    diversity_factor = np.std(weight, axis=1)
    
    # Calculate the variance of the weights
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Adjust heuristics based on diversity and variance, rewarding items with high diversity and low variance
    heuristics *= (1 + np.exp(-diversity_factor)) * (1 + np.exp(-weight_variance))
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Incorporate weighted factors based on the normalized prize and variance adjustment
    weighted_factors = normalized_prize * (1 + np.exp(-weight_variance))
    
    # Adaptively adjust the heuristics by considering the sparsity of items
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    adaptive_factor = np.exp(-sparsity_factor)
    heuristics *= adaptive_factor
    
    # Final heuristics based on the sum of weighted factors and adjusted diversity factor
    heuristics *= weighted_factors
    
    # Regularize the heuristics to avoid overfitting by penalizing high variance
    regularization_factor = np.mean(weight_variance)
    heuristics -= regularization_factor * np.exp(-heuristics)
    
    return heuristics
```
