```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the quality-to-weight ratio for each item
    quality_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Apply sparsification by considering the sparsity in the first dimension
    sparsity = np.sum(weight[:, 0] == 0) / weight.shape[1]
    
    # Create heuristics by multiplying the quality-to-weight ratio with sparsity
    heuristics = quality_to_weight_ratio * (1 - sparsity)
    
    # Apply a threshold to the heuristics to eliminate less promising items
    max_heuristic = np.max(heuristics)
    threshold = max_heuristic / 3
    
    # Filter out heuristics below the threshold
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
