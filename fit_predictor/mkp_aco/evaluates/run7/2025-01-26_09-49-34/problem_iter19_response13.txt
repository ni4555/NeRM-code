```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    # Adding a small value to avoid division by zero
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate the diversity factor based on the variance of the normalized weights
    diversity_factor = np.var(weight, axis=1) / np.mean(weight, axis=1)
    
    # Combine the diversity and sparsity factors for balancing the selection criteria
    balanced_factors = 1 / (1 + np.exp(-(diversity_factor + sparsity_factor)))
    
    # Initial heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Normalize heuristics by dividing by the sum of heuristics to maintain a sum of 1
    heuristics /= np.sum(heuristics)
    
    # Apply a dynamic sparsification threshold that considers the diversity and sparsity factors
    sparsity_threshold = np.mean(balanced_factors * np.exp(-diversity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Adjust heuristics based on the variance of the weights, rewarding items with low variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_adjustment = 1 / (1 + weight_variance)
    
    # Incorporate weighted factors based on the normalized prize and variance adjustment
    weighted_factors = normalized_prize * variance_adjustment
    
    # Final heuristics based on the sum of weighted factors and balanced factors
    heuristics *= weighted_factors * balanced_factors
    
    return heuristics
```
