```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to avoid dominance by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate value-to-weight ratio as a basic heuristic
    value_to_weight_ratio = normalized_prize / weight.sum(axis=1)
    
    # Introduce exploration-exploitation balance
    exploration = np.random.normal(0, 0.01, size=value_to_weight_ratio.shape)
    exploitation = normalized_prize - np.mean(normalized_prize)
    exploration_exploitation = value_to_weight_ratio + exploration + exploitation
    
    # Promote diversity through randomness
    diversity = np.random.normal(0, 0.05, size=value_to_weight_ratio.shape)
    combined_score = exploration_exploitation + diversity
    
    # Amplify promising items
    amplified_score = np.where(combined_score > np.percentile(combined_score, 75), combined_score * 1.1, combined_score)
    
    # Apply sparsity by setting lower-scoring items to zero
    sparsity_threshold = np.percentile(amplified_score, 25)
    sparse_score = np.where(amplified_score > sparsity_threshold, amplified_score, 0)
    
    # Normalize to ensure sum of heuristics is 1
    heuristic_sum = np.sum(sparse_score)
    if heuristic_sum > 0:
        sparse_score /= heuristic_sum
    
    return sparse_score
```
