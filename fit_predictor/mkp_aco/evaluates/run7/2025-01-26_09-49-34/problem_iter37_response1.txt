```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate value-to-weight ratio to prioritize items with better ratios
    value_to_weight = normalized_prize / weight.sum(axis=1)
    
    # Adaptively determine thresholds for amplification and reduction
    amplification_threshold = np.percentile(value_to_weight, 70)
    reduction_threshold = np.percentile(value_to_weight, 30)
    
    # Amplify higher potential items and reduce lower potential items
    heuristics = value_to_weight
    heuristics[heuristics > amplification_threshold] *= 1.5
    heuristics[heuristics < reduction_threshold] *= 0.5
    
    # Add a noise term to promote diversity
    noise = np.random.normal(0, 0.1, size=heuristics.shape)
    heuristics += noise
    
    # Apply sparsity by zeroing out low-value heuristic values
    sparsity_threshold = np.percentile(heuristics, 10)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize the final heuristics
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
