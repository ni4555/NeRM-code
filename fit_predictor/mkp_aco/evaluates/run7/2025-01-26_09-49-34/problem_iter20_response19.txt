```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight per item
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item, adding a small epsilon to avoid division by zero
    epsilon = 1e-8
    inverse_average_weight = 1 / (average_normalized_weight + epsilon)
    
    # Calculate the initial heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Normalize heuristics by dividing by the sum of heuristics, maintaining consistency
    sum_heuristics = np.sum(heuristics)
    heuristics /= sum_heuristics
    
    # Apply a non-linear transformation for sparsity, using the square of (1 - sparsity factor)
    sparsity_factor = (weight == 0).mean(axis=1)
    heuristics *= (1 - sparsity_factor) ** 2
    
    # Further normalize heuristics by subtracting the mean and scaling to the range [0, 1]
    heuristics -= np.mean(heuristics)
    heuristics /= np.std(heuristics)
    
    return heuristics
```
