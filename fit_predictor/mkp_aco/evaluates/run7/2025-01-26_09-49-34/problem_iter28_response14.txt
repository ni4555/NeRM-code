```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to sum to 1 for easier comparison
    normalized_prize = prize / np.sum(prize)
    
    # Calculate sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate diversity factor to penalize items with similar weight profiles
    diversity_factor = np.sum(weight ** 2, axis=1)
    diversity_factor = 1 / (diversity_factor + 1e-5)  # Avoid division by zero
    
    # Combine multiple factors for initial heuristics
    initial_heuristics = normalized_prize * sparsity_factor * inv_variance_factor * diversity_factor
    
    # Refine heuristics based on performance metrics
    median_heuristic = np.median(initial_heuristics)
    threshold = median_heuristic * 1.2  # 20% above the median heuristics
    
    # Select items with heuristics above the threshold
    selected_indices = initial_heuristics > threshold
    heuristics = np.where(selected_indices, initial_heuristics, 0)
    
    # Adjust heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics.sort()
    heuristics[:num_to_zero] = 0
    
    return heuristics
```
