```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the prize-to-weight ratio
    ratio = prize / np.sum(weight, axis=1)
    
    # Normalize the ratio to a range between 0 and 1
    max_ratio = np.max(ratio)
    min_ratio = np.min(ratio)
    normalized_ratio = (ratio - min_ratio) / (max_ratio - min_ratio)
    
    # Calculate the sparsity factor
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Normalize the sparsity factor
    max_sparsity = np.max(sparsity_factor)
    min_sparsity = np.min(sparsity_factor)
    normalized_sparsity = (sparsity_factor - min_sparsity) / (max_sparsity - min_sparsity)
    
    # Combine the normalized ratio and sparsity factor
    combined_heuristics = normalized_ratio * (1 - normalized_sparsity)
    
    # Normalize the combined heuristics
    max_heuristic = np.max(combined_heuristics)
    if max_heuristic > 0:
        combined_heuristics /= max_heuristic
    
    # Adjust heuristics based on weight variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_adjustment = 1 / (1 + weight_variance)
    heuristics = combined_heuristics * variance_adjustment
    
    # Sparsify the heuristics by setting a threshold
    sparsity_threshold = np.mean(heuristics)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
