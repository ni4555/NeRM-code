```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to avoid dominance of high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate sparsity factor
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate variance factor
    mean_weight = np.mean(weight, axis=1)
    inv_variance_factor = mean_weight / np.mean(weight ** 2, axis=1)
    
    # Calculate diversity by adding a random component with a positive minimum
    np.random.seed(0)
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)
    
    # Combine factors into balance factor
    balance_factor = sparsity_factor * inv_variance_factor * diversity
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(balance_factor)
    if heuristic_sum > 0:
        balance_factor /= heuristic_sum
    
    return balance_factor
```
