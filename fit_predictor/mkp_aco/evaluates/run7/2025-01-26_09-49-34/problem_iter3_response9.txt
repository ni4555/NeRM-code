```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate a balance factor considering the average prize per unit weight
    balance_factor = prize / np.mean(prize)
    
    # Sparsify by considering the standard deviation of weights in the other dimensions
    std_weight = np.std(weight, axis=1)
    
    # Combine factors: ratio, balance factor, and standard deviation
    combined_factor = ratio * balance_factor / std_weight
    
    # Normalize combined_factor to ensure all values are positive
    max_combined_factor = np.max(combined_factor)
    combined_factor = combined_factor / max_combined_factor
    
    # Apply a dynamic threshold based on the normalized combined factor
    dynamic_threshold = np.mean(combined_factor)
    heuristics = np.where(combined_factor > dynamic_threshold, combined_factor, 0)
    
    return heuristics
```
