```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to sum to 1
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor based on the sum of weights
    diversity_factor = np.sum(weight, axis=1)
    
    # Calculate the variance of weights for each item
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Normalize the inverse variance to promote variance
    inverse_variance = 1 / (weight_variance + 1e-8)
    normalized_variance = inverse_variance / np.mean(inverse_variance)
    
    # Combine factors into a heuristic value
    heuristics = normalized_prize * diversity_factor * normalized_variance
    
    # Normalize heuristics by the sum of heuristics
    heuristics /= np.sum(heuristics)
    
    # Apply domain-specific knowledge for adjustments
    # Example: Boost heuristics for items with high prize and low variance
    high_prize_low_variance = np.where((normalized_prize > np.mean(normalized_prize)) & (weight_variance < np.mean(weight_variance)), heuristics, heuristics)
    
    # Apply selective thresholds to enhance high-value items
    threshold = np.percentile(high_prize_low_variance, 90)  # 90% threshold
    high_prize_low_variance[high_prize_low_variance > threshold] = 1
    
    # Final adjustment to balance rewards
    heuristics *= normalized_prize
    
    return heuristics
```
