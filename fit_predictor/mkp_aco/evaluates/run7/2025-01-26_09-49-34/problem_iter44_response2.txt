```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize to avoid dominance
    normalized_prize = prize / np.max(prize)
    
    # Calculate sparsity factor for items with zero weight in all dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate balance factor using variance
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine normalized prize, sparsity, and inverse variance to form a balance factor
    balance_factor = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce diversity with a floor and cap
    diversity = np.random.normal(0, 0.01, size=balance_factor.shape)
    diversity = np.maximum(diversity, 0.01)
    diversity = np.minimum(diversity, 0.03)
    heuristics = balance_factor + diversity
    
    # Apply sparsity by setting low heuristics to zero using a percentile threshold
    sparsity_threshold = np.percentile(heuristics, 20)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Amplify high-potential heuristics and refine
    amplification_threshold = np.percentile(heuristics, 80)
    for i in range(n):
        if heuristics[i] > amplification_threshold and sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.3
    
    # Normalize the heuristics to maintain balance
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
