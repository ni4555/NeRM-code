```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Consider a domain-specific factor such as standard deviation
    std_dev = np.std(weight, axis=1)
    
    # Create heuristics by combining the ratio with the domain-specific factor
    heuristics = ratio * std_dev
    
    # Apply normalization to balance the influence of different factors
    max_heuristic = np.max(heuristics)
    min_heuristic = np.min(heuristics)
    normalized_heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Sparsify by setting a dynamic threshold based on the normalized heuristics
    sparsity_threshold = np.mean(normalized_heuristics)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
