```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape

    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the diversity factor based on the distance from the mean
    diversity_factor = np.exp(-np.linalg.norm(weight - np.mean(weight, axis=1), axis=1))
    
    # Calculate the initial heuristics based on a weighted combination of normalized prize, sparsity, and diversity factors
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor * diversity_factor
    
    # Balance exploration and exploitation by using a dynamic threshold
    # Items with a higher score than the threshold are promoted to explore more
    threshold = np.percentile(heuristics, 60)  # 60% threshold
    heuristics[heuristics > threshold] *= 1.2
    
    # Apply a penalty for items with high variance to balance out exploration and exploitation
    # Decrease the heuristic score of items that deviate from the average variance
    penalty = 1.0 / (1.0 + np.exp((np.mean(inv_variance_factor) - inv_variance_factor) * 5))
    heuristics *= penalty
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Finally, ensure all heuristic values are non-negative
    heuristics = np.clip(heuristics, 0, None)
    
    return heuristics
```
