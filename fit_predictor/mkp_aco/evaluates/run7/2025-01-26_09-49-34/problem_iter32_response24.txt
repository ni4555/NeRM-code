```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the ratio of prize to total weight of each item
    ratio_factor = normalized_prize / weight.sum(axis=1)
    
    # Calculate a dynamic sparsity factor that rewards items with a high standard deviation in their weights
    std_factor = np.std(weight, axis=1)
    sparsity_factor = std_factor / np.mean(std_factor)
    
    # Calculate a variance control factor that rewards items with lower variance in their weights
    variance_factor = np.mean(np.std(weight, axis=1) / (np.std(weight, axis=1) + 1))
    
    # Calculate a diversity factor based on the number of unique weight dimensions
    diversity_factor = np.count_nonzero(weight == 0, axis=1) / weight.shape[1]
    
    # Combine factors into a weighted sum
    combined_factor = ratio_factor * sparsity_factor * variance_factor * diversity_factor
    
    # Normalize the combined factor to ensure equal contribution
    combined_factor /= np.sum(combined_factor)
    
    # Iteratively adjust heuristics for exploration and exploitation
    for _ in range(5):
        weighted_sum = combined_factor * (combined_factor / previous_heuristics)
        previous_heuristics = combined_factor
        combined_factor = weighted_sum / np.sum(weighted_sum)
    
    # Refine heuristics based on performance, promoting items that have a higher ratio of collected prize
    performance_factor = np.mean(prize[combined_factor > 0]) / np.mean(prize)
    combined_factor *= performance_factor
    
    # Normalize heuristics to introduce sparsity
    combined_factor /= np.sum(combined_factor)
    
    # Apply sparsification by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(combined_factor) * 0.05)
    combined_factor[np.argsort(combined_factor)[:num_to_zero]] = 0
    
    return combined_factor
```
