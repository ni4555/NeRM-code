```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate sparsity factor as the proportion of non-zero weight dimensions
    sparsity_factor = np.mean(weight > 0, axis=1)
    
    # Calculate inverse variance factor as the ratio of the mean to the mean of squares
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine the factors to form the heuristic values
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
