```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize to avoid dominance
    normalized_prize = prize / np.max(prize)
    
    # Calculate balance factor considering sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Add a diversity component with positive constraints
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Dynamically adjust thresholds for sparsity
    sparsity_threshold = np.percentile(balanced_prize, 30)
    sparsity_factor[balanced_prize < sparsity_threshold] = 0
    
    # Dynamically adjust thresholds for amplification
    amplification_threshold = np.percentile(balanced_prize, 70)
    amplification_factor = np.zeros_like(balanced_prize)
    amplification_factor[balanced_prize > amplification_threshold] = 1.2
    
    # Apply amplification and adjust based on mean of non-zero heuristics
    amplification_factor_mean = np.mean(amplification_factor[amplification_factor > 0])
    amplification_factor[amplification_factor > amplification_factor_mean] *= 1.5
    
    # Apply amplification to heuristics
    balanced_prize *= amplification_factor
    
    # Emphasize non-dominated items
    for i in range(n):
        dominated_by = np.any(balanced_prize > balanced_prize[i])
        if not dominated_by:
            balanced_prize[i] *= 1.1
    
    # Refine heuristics with iterative amplification
    for _ in range(3):
        amplification_factor_mean = np.mean(balanced_prize[balanced_prize > 0])
        amplification_factor[balanced_prize > amplification_factor_mean] *= 1.05
    
    # Normalize the final heuristics
    heuristic_sum = np.sum(balanced_prize)
    if heuristic_sum > 0:
        balanced_prize /= heuristic_sum
    
    return balanced_prize
```
