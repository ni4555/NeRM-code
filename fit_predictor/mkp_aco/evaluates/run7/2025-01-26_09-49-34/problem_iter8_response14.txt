```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Normalize the ratio by the maximum ratio value
    max_ratio = np.max(ratio)
    normalized_ratio = ratio / max_ratio
    
    # Incorporate item-specific characteristics by penalizing items with high variance in weights
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_penalty = 1 / (1 + weight_variance)
    
    # Combine normalized ratio with sparsity factor and variance penalty
    heuristics = normalized_ratio * (1 - sparsity_factor) * variance_penalty
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = np.mean(heuristics)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
