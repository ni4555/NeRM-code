```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the prize-to-weight ratio
    ratio = prize / np.sum(weight, axis=1)
    
    # Normalize the ratio to sum to 1
    normalized_ratio = ratio / np.sum(ratio)
    
    # Calculate the variance of the ratio to penalize high variance
    ratio_variance = np.var(ratio)
    
    # Use the ratio variance as a penalty factor
    penalty_factor = 1 / (1 + ratio_variance)
    
    # Normalize the penalty factor to maintain consistency across items
    normalized_penalty_factor = penalty_factor / np.max(penalty_factor)
    
    # Apply the normalized penalty factor to the normalized ratio
    heuristics = normalized_ratio * normalized_penalty_factor
    
    # Apply sparsification by setting heuristics with low ratios to zero
    sparsity_threshold = np.percentile(ratio, 25)  # Use the 25th percentile as a threshold
    heuristics[ratio < sparsity_threshold] = 0
    
    return heuristics
```
