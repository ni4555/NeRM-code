```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to a range [0, 1]
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate sparsity based on the number of non-zero weight dimensions
    sparsity = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the variance of weights for each item
    variance = np.var(weight, axis=1)
    
    # Calculate the diversity factor based on the sum of the squares of the weight
    diversity = np.sum(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and sparsity
    heuristics = normalized_prize * sparsity
    
    # Adjust heuristics using a balance between variance and diversity
    adjusted_heuristics = heuristics * (1 + variance) * (1 / (1 + diversity))
    
    # Refine heuristics by incorporating a weighted factor that balances the normalized prize and variance adjustment
    weighted_factor = normalized_prize + variance
    heuristics *= weighted_factor / (np.sum(weighted_factor) + 1e-8)
    
    # Normalize heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    # Simplify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
