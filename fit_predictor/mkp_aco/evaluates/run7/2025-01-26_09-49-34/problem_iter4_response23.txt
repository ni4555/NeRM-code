```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Normalize the prize to consider the average prize
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the normalized weight by considering the sparsity of the weight distribution
    normalized_weight = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine the normalized prize and sparsity of weight
    combined_heuristic = normalized_prize * normalized_weight
    
    # Apply a logarithmic transformation to penalize items with extremely low heuristics
    combined_heuristic = np.log1p(combined_heuristic)
    
    # Normalize heuristics to ensure non-negative values and set a strategic threshold
    max_heuristic = np.max(combined_heuristic)
    min_threshold = max_heuristic / 10
    heuristics = np.where(combined_heuristic < min_threshold, 0, combined_heuristic)
    
    return heuristics
```
