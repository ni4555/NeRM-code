```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by dividing by the sum of prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight per item
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the ratio of prize to the average normalized weight
    prize_to_weight_ratio = normalized_prize / average_normalized_weight
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Combine the prize-to-weight ratio with the sparsity factor
    heuristics = prize_to_weight_ratio * (1 - sparsity_factor)
    
    # Normalize the heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Incorporate diversity by penalizing items with high variance in normalized weights
    variance = np.var(weight, axis=1)
    diversity_factor = 1 / (1 + variance)
    
    # Adjust the heuristics based on diversity
    heuristics *= diversity_factor
    
    # Apply a dynamic sparsification threshold that considers the average normalized weight
    # and the sparsity factor, setting elements below the threshold to zero
    sparsity_threshold = np.mean(average_normalized_weight * (1 - sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
