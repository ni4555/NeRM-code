```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)

    # Calculate a balance factor considering both sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor

    # Introduce diversity through noise or random components
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    heuristics = normalized_prize * balance_factor + diversity

    # Use adaptive thresholds for amplification and sparsity
    amplification_threshold = np.percentile(heuristics, 70)  # 70% threshold
    heuristics[heuristics > amplification_threshold] *= 1.2

    sparsity_threshold = np.percentile(heuristics, 30)  # 30% threshold for sparsity
    heuristics[heuristics < sparsity_threshold] = 0

    # Refine the heuristics iteratively to promote non-domination
    for _ in range(5):
        for i in range(n):
            dominated_by = np.any(heuristics > heuristics[i])
            if not dominated_by:
                heuristics[i] *= 1.1

    # Normalize the final heuristics
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum

    return heuristics
```
