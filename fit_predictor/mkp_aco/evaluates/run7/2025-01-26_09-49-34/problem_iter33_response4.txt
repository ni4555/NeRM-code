```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Introduce diversity by adding a random perturbation to normalized prize
    np.random.seed(0)  # Ensure reproducibility
    perturbation = np.random.normal(0, 0.005, size=normalized_prize.shape)
    normalized_prize += perturbation
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors to determine initial heuristics
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce sparsity by setting a portion of the heuristics to zero
    sparsity_level = np.percentile(heuristics, 20)  # 20% of the heuristics to be set to zero
    heuristics[heuristics < sparsity_level] = 0
    
    # Adjust heuristics based on a dynamic threshold
    threshold = np.percentile(heuristics, 70)  # 70% threshold
    heuristics[heuristics > threshold] *= 1.2  # Increase heuristics that are above the threshold
    
    # Refine heuristics by balancing exploration and exploitation
    for i in range(len(heuristics)):
        if heuristics[i] > threshold and sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.1  # Further increase heuristics for items that are promising and not too sparse
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(heuristics[heuristics > 0])
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
