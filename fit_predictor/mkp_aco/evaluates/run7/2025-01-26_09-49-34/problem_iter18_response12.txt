```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the prize-to-weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate a sparsity factor that penalizes items with significant zero weights
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) > 0.5)
    
    # Combine the prize-to-weight ratio and sparsity factor to create heuristics
    heuristics = ratio * sparsity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a sparsity threshold to zero out heuristics that are below a certain level
    sparsity_threshold = np.mean(ratio) * (1 - np.mean(sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
