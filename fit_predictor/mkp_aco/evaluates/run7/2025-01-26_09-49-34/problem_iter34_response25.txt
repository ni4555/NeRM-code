```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight
    normalized_prize = prize / np.sum(prize)
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate heuristic based on normalized prize, sparsity, and inverse variance
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce noise for diversity
    noise_level = np.random.rand() / np.sum(sparsity_factor)
    np.random.seed(0)
    perturbation = np.random.normal(0, noise_level, size=heuristics.shape)
    heuristics += perturbation
    
    # Adaptive thresholding with dynamic weight
    threshold_weight = np.random.rand()
    threshold = np.percentile(heuristics, (1 - threshold_weight) * 100)
    heuristics[heuristics < threshold] = 0
    
    # Iterative refinement
    for i in range(len(heuristics)):
        if heuristics[i] == 0 and sparsity_factor[i] > 0.3:
            # Increase the heuristic of items with high sparsity and below threshold
            heuristics[i] = threshold
    
    # Sparsify to avoid overfitting
    sparsity_threshold = np.percentile(heuristics, 20)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize heuristics to ensure sum equals 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
