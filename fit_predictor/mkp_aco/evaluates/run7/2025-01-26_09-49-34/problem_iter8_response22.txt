```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to have a mean of 1
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average weight per item
    average_weight = np.mean(weight, axis=1)
    
    # Normalize the weight by dividing by the maximum average weight to balance out the scale
    normalized_weight = weight / np.maximum(1, average_weight)
    
    # Calculate the inverse of the normalized weight for each item
    inverse_normalized_weight = 1 / normalized_weight
    
    # Calculate the sparsity factor based on the number of non-zero weights in each dimension
    sparsity_factor = np.mean(np.sum(normalized_weight > 0, axis=1)) / normalized_weight.shape[1]
    
    # Combine normalized prize with inverse normalized weight
    heuristics = normalized_prize * inverse_normalized_weight
    
    # Incorporate a penalty for sparsity, penalizing items with low sparsity
    heuristics *= (1 - sparsity_factor)
    
    # Apply a dynamic threshold that considers the average of the heuristics and the penalty for sparsity
    sparsity_threshold = np.mean(heuristics * (1 - sparsity_factor))
    
    # Apply the dynamic threshold to set elements below the threshold to zero
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
