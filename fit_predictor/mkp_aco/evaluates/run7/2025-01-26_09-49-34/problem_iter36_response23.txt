```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to emphasize higher prize values
    normalized_prize = prize / np.sum(prize)
    
    # Calculate sparsity factor for items with at least one non-zero weight dimension
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate inverse variance to promote items with lower variance in weights
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors using a weighted approach
    combined_factor = 0.6 * normalized_prize + 0.2 * sparsity_factor + 0.2 * inv_variance_factor
    
    # Introduce noise for diversity
    noise_factor = np.random.rand(*combined_factor.shape) * 0.1
    
    # Apply combined factor and noise
    heuristics = combined_factor + noise_factor
    
    # Apply a percentile-based threshold for exploration
    threshold = np.percentile(heuristics, 25)  # 25% threshold for exploration
    heuristics[heuristics < threshold] = 0
    
    # Refine heuristics iteratively
    for _ in range(3):  # Refine 3 times for robustness
        median_heuristic = np.median(heuristics)
        heuristics[heuristics < median_heuristic] = median_heuristic / 2
    
    # Incorporate domain knowledge: favor items with higher diversity and lower variance
    diversity_factor = np.exp(-np.sum(weight ** 2, axis=1))
    heuristics *= diversity_factor
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.05)  # Zero out 5% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
