```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    inverse_average_weight = 1 / average_normalized_weight
    
    # Calculate a sparsity factor based on the number of dimensions with zero weight
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the heuristics as the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Adjust heuristics to penalize low sparsity by subtracting the sparsity factor
    heuristics -= sparsity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Dynamically determine a sparsification threshold based on the average heuristic value
    sparsity_threshold = np.mean(heuristics) * 0.5
    
    # Apply the sparsification threshold by setting values below the threshold to zero
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
