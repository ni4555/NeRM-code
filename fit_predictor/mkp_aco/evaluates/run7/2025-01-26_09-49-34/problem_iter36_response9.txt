```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Promote diversity by using a factor based on the standard deviation
    std_factor = np.mean(np.std(weight, axis=1))
    
    # Promote items with lower variance in weight dimensions
    variance_factor = 1 / (std_factor + 1e-5)
    
    # Promote items with a higher ratio of prize to weight as more promising
    ratio_factor = normalized_prize / weight.sum(axis=1)
    
    # Combine factors into a weighted sum
    combined_factor = ratio_factor * variance_factor
    
    # Introduce exploration by using a greedy selection strategy
    greedy_selection = np.argsort(combined_factor)[::-1]
    
    # Introduce sparsity by selecting a fraction of the top items
    num_items = int(len(combined_factor) * 0.1)
    top_items = greedy_selection[:num_items]
    
    # Promote items that are not too heavily weighted in any dimension
    weight_balance_factor = 1 / (np.max(weight, axis=1) + 1e-5)
    
    # Calculate the initial heuristics based on the factors
    heuristics = combined_factor * weight_balance_factor
    
    # Refine heuristics for the selected items
    for item in top_items:
        heuristics[item] *= 2  # Double the heuristic value for selected items
    
    # Normalize heuristics to ensure all factors contribute equally
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
