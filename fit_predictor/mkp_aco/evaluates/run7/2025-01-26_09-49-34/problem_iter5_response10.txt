```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to average weight per item
    ratio = prize / np.mean(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Calculate a dynamic threshold based on the average sparsity and minimum average weight
    dynamic_threshold = (np.mean(ratio) * min_average_weight) * (1 - average_sparsity)
    
    # Combine the ratio with the sparsity factor and apply the dynamic threshold
    heuristics = ratio * (1 - sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = dynamic_threshold / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Introduce a mutation factor to further refine the heuristics
    mutation_factor = np.random.rand(weight.shape[0])
    heuristics = heuristics * mutation_factor
    
    # Ensure that the heuristics are still normalized after mutation
    max_mutation = np.max(mutation_factor)
    if max_mutation > 0:
        heuristics /= max_mutation
    
    return heuristics
```
