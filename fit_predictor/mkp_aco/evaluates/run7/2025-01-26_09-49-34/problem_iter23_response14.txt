```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the diversity factor by considering the spread of weights
    diversity_factor = np.sqrt(np.mean(weight ** 2, axis=1))
    
    # Combine factors to create a weighted sum for heuristics
    combined_factor = normalized_prize * sparsity_factor * inv_variance_factor * diversity_factor
    
    # Apply adaptive thresholding to balance exploration and exploitation
    threshold = np.mean(combined_factor)
    heuristics = np.where(combined_factor > threshold, combined_factor, 0)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
