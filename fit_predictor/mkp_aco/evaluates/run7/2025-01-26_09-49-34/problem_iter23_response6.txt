```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor by using the entropy of the normalized prize distribution
    diversity_factor = -np.sum(normalized_prize * np.log(normalized_prize + 1e-8))
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine the factors using a weighted sum approach, where we tune the weights based on their relevance
    combined_factor = 0.6 * diversity_factor + 0.3 * sparsity_factor + 0.1 * inv_variance_factor
    
    # Apply dynamic sparsity adjustment by reducing heuristics of less sparse items
    sparsity_adjustment = 1 / (1 + np.exp(-sparsity_factor))
    combined_factor *= sparsity_adjustment
    
    # Normalize combined factor by dividing by the maximum value
    max_combined_factor = np.max(combined_factor)
    if max_combined_factor > 0:
        combined_factor /= max_combined_factor
    
    return combined_factor
```
