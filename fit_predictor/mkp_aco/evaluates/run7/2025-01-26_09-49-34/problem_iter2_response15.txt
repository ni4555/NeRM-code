```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight for each item
    prize_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate a sparsity factor that reduces the heuristic of dense items
    sparsity_factor = 1 / (1 + np.sum(weight, axis=1))
    
    # Combine the factors to create a heuristic value
    heuristic = prize_to_weight_ratio * sparsity_factor
    
    # Use a dynamic threshold based on the maximum heuristic value and a sparsity adjustment
    max_heuristic = np.max(heuristic)
    threshold = max_heuristic / 2
    heuristics = np.where(heuristic >= threshold, heuristic, 0)
    
    # Adjust the sparsity factor for items with low heuristic values
    sparsity_adjustment = 1 + np.log(np.sum(weight, axis=1) + 1)
    heuristics *= sparsity_adjustment
    
    return heuristics
```
