```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the diversity factor to balance the sparsity
    diversity_factor = 1 / np.std(weight, axis=1)
    
    # Combine all factors into a single heuristic score
    combined_heuristics = normalized_prize * sparsity_factor * inv_variance_factor * diversity_factor
    
    # Apply dynamic thresholding to exploit promising items
    dynamic_threshold = np.exp(-combined_heuristics)
    adjusted_heuristics = combined_heuristics * (1 - dynamic_threshold)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(adjusted_heuristics)
    if max_heuristic > 0:
        adjusted_heuristics /= max_heuristic
    
    return adjusted_heuristics
```
