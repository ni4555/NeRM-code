```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to give equal importance to each item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate inverse variance factor to promote diversity
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors with weights that reflect their importance
    combined_factor = normalized_prize * 0.8 * sparsity_factor * inv_variance_factor * 0.5
    
    # Introduce random noise to promote diversity and avoid local optima
    noise_factor = np.random.rand(*combined_factor.shape) * 0.05
    
    # Adjust heuristics based on the weighted combination of factors and noise
    heuristics = combined_factor + noise_factor
    
    # Apply adaptive thresholding to encourage exploration and balance exploitation
    threshold = np.percentile(heuristics, 50)  # Use 50% threshold for exploration
    heuristics[heuristics > threshold] *= 1.5  # Increase higher heuristics
    heuristics[heuristics < threshold] *= 0.5  # Decrease lower heuristics
    
    # Iteratively refine heuristics to enhance robustness
    for _ in range(3):  # Refine heuristics iteratively
        heuristics = np.clip(heuristics, 0, 1)  # Ensure heuristics are within [0, 1]
        sorted_indices = np.argsort(heuristics)[::-1]  # Sort indices in descending order
        cumulative_sum = np.cumsum(heuristics[sorted_indices])
        cumulative_sum /= cumulative_sum[-1]  # Normalize to sum to 1
        heuristics = cumulative_sum[sorted_indices]  # Reassign sorted heuristics
    
    # Incorporate domain knowledge: favor items with higher diversity and lower variance
    diversity_factor = np.exp(-np.sum(weight ** 2, axis=1))
    heuristics *= diversity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.05)  # Zero out 5% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
