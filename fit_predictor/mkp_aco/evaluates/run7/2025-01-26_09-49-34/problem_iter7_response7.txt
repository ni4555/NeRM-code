```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the quality-to-weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate a sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate a dynamic threshold for inclusion based on the ratio and sparsity
    dynamic_threshold = (np.mean(ratio) * (1 - sparsity_factor))
    
    # Combine ratio and sparsity factor, penalizing high sparsity
    heuristics = ratio * (1 - sparsity_factor)
    
    # Normalize heuristics to a range [0, 1]
    max_heuristic = np.max(heuristics)
    heuristics /= max_heuristic
    
    # Incorporate a variance factor to penalize items with high weight variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_penalty = 1 / (1 + weight_variance)
    
    # Adjust heuristics with the variance penalty
    heuristics *= variance_penalty
    
    # Apply the dynamic threshold to promote sparsity
    heuristics[heuristics < dynamic_threshold] = 0
    
    return heuristics
```
