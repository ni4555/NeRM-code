```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the variance factor
    variance_factor = np.mean(weight ** 2, axis=1) - np.mean(weight, axis=1) ** 2
    
    # Calculate the heuristic value based on the product of normalized prize, sparsity, and variance
    heuristics = normalized_prize * sparsity_factor * np.sqrt(variance_factor)
    
    # Apply adaptive thresholding to adjust heuristics based on sparsity
    threshold = np.exp(-sparsity_factor)
    heuristics[sparsity_factor < threshold] = 0
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
