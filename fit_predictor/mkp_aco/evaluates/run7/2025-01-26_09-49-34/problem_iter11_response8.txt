```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Combine the ratio with the sparsity factor and apply a normalization factor
    heuristics = ratio * (1 - sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Incorporate a dynamic threshold for sparsity based on the average sparsity
    sparsity_threshold = np.mean(min_average_weight) * (1 - average_sparsity)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Adjust heuristics based on variance, penalizing high variance items
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_penalty = 1 / (1 + weight_variance)
    heuristics *= variance_penalty
    
    # Further refine the heuristics by considering the average prize per dimension
    average_prize_per_dimension = np.mean(prize)
    prize_per_dimension_ratio = prize / average_prize_per_dimension
    heuristics *= prize_per_dimension_ratio
    
    # Apply a final sparsification step to ensure the heuristics are sparse
    heuristics[heuristics < 0.1] = 0
    
    return heuristics
```
