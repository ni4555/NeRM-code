```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to avoid dominance by high values
    normalized_prize = prize / np.max(prize)
    
    # Calculate balance factor considering sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Introduce diversity with a random component
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Apply sparsity by zeroing out low-value heuristic values
    sparsity_threshold = np.percentile(balanced_prize, 30)  # 30% threshold for sparsity
    balanced_prize[balanced_prize < sparsity_threshold] = 0
    
    # Adapt thresholds dynamically based on the distribution of the heuristics
    amplification_threshold = np.percentile(balanced_prize, 70)  # 70% threshold
    average_amplification = np.mean(balanced_prize[balanced_prize > amplification_threshold])
    balanced_prize[balanced_prize > amplification_threshold] *= (1 + average_amplification)
    
    # Refine heuristics by considering item dominance
    for i in range(balanced_prize.shape[0]):
        dominated_by = np.any(balanced_prize > balanced_prize[i])
        if not dominated_by:
            balanced_prize[i] *= 1.1
    
    # Explore occasionally by swapping heuristics
    exploration_rate = 0.05  # 5% chance of swapping
    for _ in range(int(prize.shape[0] * exploration_rate)):
        i, j = np.random.choice(balanced_prize.shape[0], 2, replace=False)
        if np.random.rand() < 0.5:  # 50% chance to swap
            balanced_prize[[i, j]] = balanced_prize[[j, i]]
    
    # Optimize sparsity by considering the average sparsity factor
    average_sparsity = np.mean(sparsity_factor)
    balanced_prize *= (average_sparsity + 0.5)
    
    # Normalize the final heuristics
    heuristic_sum = np.sum(balanced_prize)
    if heuristic_sum > 0:
        balanced_prize /= heuristic_sum
    
    return balanced_prize
```
