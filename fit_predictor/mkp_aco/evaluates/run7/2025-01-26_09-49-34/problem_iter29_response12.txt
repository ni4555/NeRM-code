```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Integrate domain knowledge: Consider items with a higher ratio of prize to weight as more promising
    # This encourages selection of items that are relatively more valuable
    ratio_factor = normalized_prize / weight.sum(axis=1)
    
    # Promote diversity and control variance by calculating a dynamic factor based on the standard deviation
    std_factor = np.mean(np.std(weight, axis=1))
    
    # Combine factors and normalize to ensure all factors contribute equally
    combined_factor = ratio_factor / (std_factor + 1)
    
    # Adjust heuristics based on the weighted sum of factors
    heuristics = combined_factor
    
    # Refine heuristics iteratively to balance exploration and exploitation
    # Use a feedback mechanism that adjusts heuristics based on their performance in previous iterations
    # This is a simple example of iterative refinement
    previous_heuristics = heuristics.copy()
    for _ in range(3):
        weighted_sum = heuristics * (heuristics / previous_heuristics)
        previous_heuristics = heuristics
        heuristics = weighted_sum / np.sum(weighted_sum)
    
    # Normalize heuristics to prevent overflow
    heuristics /= np.sum(heuristics)
    
    # Apply a thresholding method to introduce sparsity
    threshold = np.mean(heuristics)
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
