```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight per item
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)  # Adding a small value to avoid division by zero
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Adjust heuristics based on sparsity, using a more nuanced approach to penalize items
    adjusted_sparsity = np.sqrt(sparsity_factor)  # Using square root to introduce a non-linear effect
    heuristics *= (1 - adjusted_sparsity)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Introduce a variance-based adjustment to reward items with low variance in weights
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_adjustment = 1 / (1 + weight_variance)
    heuristics *= variance_adjustment
    
    # Introduce a balance factor to ensure a mix of high-value and low-weight items
    balance_factor = np.sum(prize) / np.sum(weight)
    heuristics *= balance_factor
    
    return heuristics
```
