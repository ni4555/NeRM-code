```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the average weight across dimensions for each item
    average_weight = np.mean(weight, axis=1)
    
    # Calculate the minimum average weight across all items
    min_average_weight = np.min(average_weight)
    
    # Normalize the ratio and average weight by the minimum average weight
    normalized_ratio = ratio / min_average_weight
    normalized_weight = average_weight / min_average_weight
    
    # Calculate the heuristic by combining the normalized ratio and average weight
    heuristics = normalized_ratio * normalized_weight
    
    # Normalize the heuristics to ensure no value exceeds 1
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a sparsity threshold, setting elements below the threshold to zero
    sparsity_threshold = np.mean(heuristics) * 0.1  # Dynamic sparsity threshold
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
