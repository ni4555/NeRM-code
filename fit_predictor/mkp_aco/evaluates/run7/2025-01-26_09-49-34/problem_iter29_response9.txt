```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and sparsity factor
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce a domain-specific factor based on the ratio of prize to weight
    domain_factor = normalized_prize / (np.mean(weight, axis=1) + 1e-6)
    
    # Combine various factors to refine heuristics
    heuristics *= domain_factor
    
    # Apply adaptive sparsity by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.15)  # Zero out 15% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Use a dynamic threshold to balance exploration and exploitation
    threshold = np.percentile(heuristics, 75)  # 75% threshold
    heuristics[heuristics > threshold] *= 1.2
    
    return heuristics
```
