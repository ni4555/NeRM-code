```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and sparsity factor
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Combine metrics: add a diversity factor that encourages selecting items from different weight distributions
    diversity_factor = (np.sum(weight**2, axis=1) / np.sum(weight, axis=1))**0.5
    heuristics *= diversity_factor
    
    # Refine thresholds: adjust heuristics based on the distance from the mean
    mean_heuristics = np.mean(heuristics)
    distance_from_mean = np.abs(heuristics - mean_heuristics)
    heuristics[distance_from_mean > mean_heuristics] *= 1.2
    
    # Dynamically adjust weights: increase the weight of items with higher normalized prize
    heuristics *= normalized_prize
    
    # Sparsify the heuristics: zero out items that are less than a fraction of the median
    num_to_zero = int(len(heuristics) * 0.05)  # Zero out 5% of the lowest heuristics
    median_heuristic = np.median(heuristics)
    heuristics[heuristics < median_heuristic * 0.95] = 0
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
