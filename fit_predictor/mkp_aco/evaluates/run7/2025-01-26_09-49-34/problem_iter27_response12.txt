```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor based on the difference in weight across dimensions
    diversity_factor = np.sum(np.abs(weight), axis=1)
    
    # Calculate the relevance factor based on the average prize value
    relevance_factor = normalized_prize
    
    # Calculate the initial heuristics based on the weighted sum of diversity and relevance factors
    heuristics = diversity_factor * 0.6 + relevance_factor * 0.4
    
    # Apply a dynamic adjustment to the heuristics based on a performance metric
    # Assume performance_metric is a function that evaluates the quality of the heuristic
    # Here, we use a simple example: the ratio of normalized prize to normalized weight
    performance_metric = normalized_prize / diversity_factor
    heuristics *= performance_metric
    
    # Refine heuristics by considering a threshold based on domain-specific relevance
    threshold = np.percentile(heuristics, 80)  # 80% threshold
    heuristics[heuristics > threshold] *= 1.2
    
    # Dynamically adjust the weights based on a diversity threshold
    diversity_threshold = np.percentile(diversity_factor, 90)
    heuristics[diversity_factor < diversity_threshold] *= 0.8
    
    # Integrate diversity and sparsity by zeroing out a fraction of the lowest heuristics
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
