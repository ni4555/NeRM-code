```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the ratio of prize to the sum of weights in all dimensions for each item
    ratio_factor = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate a diversity factor by taking the inverse of the average distance to the centroid of the weight space
    centroid = np.mean(weight, axis=0)
    diversity_factor = 1 / np.mean(np.linalg.norm(weight - centroid, axis=1))
    
    # Calculate a variance factor that penalizes high variance in weight dimensions
    variance_factor = 1 / np.mean(np.var(weight, axis=1))
    
    # Combine factors to form heuristics, adding a small constant to avoid division by zero
    combined_heuristics = (ratio_factor + diversity_factor + variance_factor) / 3
    
    # Normalize heuristics to sum to 1
    combined_heuristics /= np.sum(combined_heuristics)
    
    # Introduce sparsity to encourage exploration
    sparsity_threshold = np.mean(combined_heuristics)
    combined_heuristics[combined_heuristics < sparsity_threshold] = 0
    
    # Refine heuristics based on performance, assuming performance data is available
    # Here we simulate performance data where the better the performance, the higher the heuristic
    performance_data = np.random.rand(len(prize))
    performance_factor = performance_data / np.sum(performance_data)
    refined_heuristics = combined_heuristics * performance_factor
    
    # Normalize heuristics again to ensure they sum to 1 after applying performance factor
    refined_heuristics /= np.sum(refined_heuristics)
    
    return refined_heuristics
```
