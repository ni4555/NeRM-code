```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the prize-to-weight ratio
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Normalize the ratio and sparsity factor
    normalized_ratio = ratio / np.max(ratio)
    normalized_sparsity = sparsity_factor / np.max(sparsity_factor)
    
    # Combine the normalized factors with a dynamic threshold
    heuristics = normalized_ratio * (1 - normalized_sparsity)
    
    # Apply a variance-based penalty
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_penalty = 1 / (1 + weight_variance)
    
    # Combine heuristics with variance penalty
    heuristics = heuristics * variance_penalty
    
    # Apply a dynamic sparsification threshold
    sparsity_threshold = np.mean(heuristics) * 0.5
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
