```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate diversity by considering the standard deviation of the ratio
    diversity_factor = 1 / np.std(ratio)
    
    # Use a non-linear interaction by applying the logarithm to the ratio
    non_linear_factor = np.log(ratio)
    
    # Combine the ratio, diversity, and non-linear interaction
    combined_factor = ratio * diversity_factor * non_linear_factor
    
    # Apply normalization by dividing by the maximum combined factor value
    max_combined_factor = np.max(combined_factor)
    if max_combined_factor > 0:
        combined_factor /= max_combined_factor
    
    # Sparsify the heuristics by setting elements below a certain threshold to zero
    sparsity_threshold = np.mean(combined_factor) * (1 - np.mean(diversity_factor))
    heuristics = np.where(combined_factor >= sparsity_threshold, combined_factor, 0)
    
    return heuristics
```
