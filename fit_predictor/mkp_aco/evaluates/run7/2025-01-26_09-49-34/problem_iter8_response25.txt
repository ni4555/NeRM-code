```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate domain-specific factors such as item rarity, complexity, or urgency
    rarity_factor = np.random.rand(weight.shape[0])  # Assuming rarity factor is random
    complexity_factor = np.random.rand(weight.shape[0])  # Assuming complexity factor is random
    urgency_factor = np.random.rand(weight.shape[0])  # Assuming urgency factor is random
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Use the combination of the ratio, domain-specific factors, and sparsity factor to determine heuristics
    heuristics = ratio * rarity_factor * complexity_factor * urgency_factor * (1 - sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold, which can be based on statistical properties of heuristics
    mean_heuristic = np.mean(heuristics)
    std_dev_heuristic = np.std(heuristics)
    dynamic_threshold = mean_heuristic + std_dev_heuristic  # A threshold based on mean + standard deviation
    heuristics[heuristics < dynamic_threshold] = 0
    
    return heuristics
```
