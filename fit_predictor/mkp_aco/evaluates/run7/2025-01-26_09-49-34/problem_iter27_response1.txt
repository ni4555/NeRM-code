```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and sparsity factor
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Apply a weighted combination of metrics with dynamic weights
    # Increase weight for domain-specific relevance (e.g., high prize)
    dynamic_weights = np.array([1.2, 1.0, 0.8])  # Weights for prize, sparsity, and variance
    heuristics = (dynamic_weights[0] * normalized_prize +
                  dynamic_weights[1] * sparsity_factor +
                  dynamic_weights[2] * inv_variance_factor)
    
    # Refine thresholds based on a combination of percentile and mean values
    threshold = np.mean(heuristics[heuristics > 0])
    heuristics[heuristics > threshold] *= 1.5
    
    # Integrate diversity by reducing the influence of items that are too similar
    # Calculate the similarity matrix and its inverse
    similarity_matrix = np.dot(weight.T, weight) / (np.linalg.norm(weight, axis=1) ** 2)
    inv_similarity_matrix = 1 / (similarity_matrix + 1e-8)  # Adding a small value to avoid division by zero
    diversity_factor = np.mean(inv_similarity_matrix, axis=1)
    heuristics *= diversity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Simplify by sparsifying the heuristics
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
