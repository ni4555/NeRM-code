```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor by considering the mean and standard deviation of weight dimensions
    diversity_factor = np.mean(weight, axis=1) * np.std(weight, axis=1)
    
    # Calculate the utility factor as the product of normalized prize and diversity factor
    utility_factor = normalized_prize * diversity_factor
    
    # Adjust utility factor to emphasize items with lower variance
    variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    utility_factor *= variance_factor
    
    # Integrate domain-specific knowledge by emphasizing sparsity
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    utility_factor *= sparsity_factor
    
    # Apply a dynamic threshold to balance exploration and exploitation
    threshold = np.percentile(utility_factor, 80)  # 80% threshold
    utility_factor[utility_factor < threshold] *= 0.5
    
    # Normalize the utility factor to ensure all values are on the same scale
    max_utility = np.max(utility_factor)
    if max_utility > 0:
        utility_factor /= max_utility
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(utility_factor) * 0.1)  # Zero out 10% of the lowest heuristics
    utility_factor[np.argsort(utility_factor)[:num_to_zero]] = 0
    
    return utility_factor
```
