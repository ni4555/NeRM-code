```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the variance factor
    variance_factor = (weight.var(axis=1) / weight.mean(axis=1))
    
    # Calculate the initial heuristics based on the product of normalized prize and sparsity factor
    heuristics = normalized_prize * sparsity_factor
    
    # Incorporate variance factor into heuristics to reward lower variance
    heuristics *= variance_factor
    
    # Apply a weighted sum of prize and variance to balance exploitation and exploration
    # Heuristics will be higher for items with high prize value and low variance
    weighted_heuristics = heuristics * (1 + variance_factor)
    
    # Normalize heuristics by subtracting the minimum heuristic value to prevent negative weights
    min_heuristic = np.min(weighted_heuristics)
    heuristics -= min_heuristic
    
    # Sparsify the heuristics by zeroing out a certain percentage of the lowest heuristics
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Adjust heuristics to ensure non-negative values
    heuristics = np.maximum(0, heuristics)
    
    return heuristics
```
