```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor as the standard deviation of weight dimensions
    diversity_factor = np.std(weight, axis=1)
    
    # Calculate the utility factor as the ratio of prize to weight sum
    utility_factor = normalized_prize / weight.sum(axis=1)
    
    # Calculate the domain-specific factor based on item dimensions with non-zero weights
    domain_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the initial heuristics based on the weighted sum of factors
    heuristics = normalized_prize * diversity_factor * utility_factor * domain_factor
    
    # Adjust heuristics based on a weighted combination of factors
    # Increase heuristics for diverse, high utility, and domain-specific items
    adjusted_heuristics = heuristics * (diversity_factor + utility_factor + domain_factor)
    
    # Apply a dynamic adjustment to balance exploration and exploitation
    # Increase heuristics for items with higher adjusted heuristics
    adjusted_threshold = np.percentile(adjusted_heuristics, 75)  # 75% threshold
    heuristics[adjusted_heuristics > adjusted_threshold] *= 1.5
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.2)  # Zero out 20% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
