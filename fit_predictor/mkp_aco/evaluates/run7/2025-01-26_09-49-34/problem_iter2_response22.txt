```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the sum of weights for each dimension
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a normalized weight that reflects how 'sparsely' the item's weight is spread across dimensions
    normalized_weight = np.max(weight, axis=1) / weight_sum
    
    # Calculate the heuristic based on a combination of normalized prize and sparsity of weight
    heuristics = (prize / np.sum(prize)) * normalized_weight
    
    # Identify the maximum heuristic value to use as a meaningful threshold
    max_heuristic = np.max(heuristics)
    
    # Sparsify the heuristics by setting a threshold that is a fraction of the maximum heuristic value
    threshold = max_heuristic * 0.8  # Set threshold to 80% of the maximum heuristic value
    
    # Set unpromising elements to zero based on the calculated threshold
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
