```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate a balance factor considering both sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Incorporate diversity by adding a random component
    np.random.seed(0)
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Use a dynamic threshold to determine sparsity
    sparsity_threshold = np.percentile(balanced_prize, 30)  # 30% threshold for sparsity
    
    # Dynamically adjust the amplification threshold based on the distribution of heuristics
    amplification_threshold = np.percentile(balanced_prize, 70)  # 70% threshold
    balanced_prize[balanced_prize < sparsity_threshold] = 0
    balanced_prize[balanced_prize > amplification_threshold] *= 1.2
    
    # Introduce a penalty for items that are too heavy
    penalty_factor = (weight.sum(axis=1) > 1).astype(float)
    penalty = penalty_factor * 0.1  # Penalty for exceeding weight constraint by 1 unit
    balanced_prize *= (1 - penalty)
    
    # Refine heuristics by iterating
    for _ in range(5):  # Iterate 5 times to refine heuristics
        # Amplify heuristics that are within a certain range
        refined_prize = np.copy(balanced_prize)
        mid_threshold = np.percentile(balanced_prize, 50)  # Middle threshold
        refined_prize[refined_prize < mid_threshold] *= 0.8
        refined_prize[refined_prize > mid_threshold] *= 1.2
        
        # Update heuristics with refined values
        balanced_prize = np.maximum(balanced_prize, refined_prize)
    
    # Normalize the final heuristics
    heuristic_sum = np.sum(balanced_prize)
    if heuristic_sum > 0:
        balanced_prize /= heuristic_sum
    
    return balanced_prize
```
