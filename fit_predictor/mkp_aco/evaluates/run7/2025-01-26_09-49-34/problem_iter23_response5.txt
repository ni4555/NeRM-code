```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor by considering the variance of weights
    diversity_factor = np.var(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Combine factors to create the initial heuristics
    heuristics = normalized_prize * diversity_factor * sparsity_factor
    
    # Normalize heuristics by dividing by the sum of all heuristics
    # This helps to balance exploration and exploitation
    max_heuristic = np.max(heuristics)
    heuristics /= max_heuristic
    
    # Apply a dynamic threshold based on the average heuristic value
    average_heuristic = np.mean(heuristics)
    threshold = average_heuristic * 0.5  # Adjust the threshold as needed
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
