```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure it's a probability distribution
    normalized_prize = prize / np.sum(prize)
    
    # Calculate a diversity factor using the variance of the weights
    variance_factor = 1 / np.mean(np.var(weight, axis=1) + 1e-5)
    
    # Calculate a ratio factor that promotes items with higher prize to weight ratio
    ratio_factor = normalized_prize / weight.sum(axis=1)
    
    # Calculate a balance factor to promote items with more balanced weight across dimensions
    weight_balance_factor = 1 / np.mean(np.max(weight, axis=1) + 1e-5)
    
    # Combine factors into a weighted sum
    combined_factor = ratio_factor * variance_factor * weight_balance_factor
    
    # Iteratively refine the heuristics to balance exploration and exploitation
    heuristics = combined_factor
    for _ in range(5):
        weighted_sum = heuristics * combined_factor / np.sum(combined_factor * heuristics)
        heuristics = weighted_sum / np.sum(weighted_sum)
    
    # Normalize heuristics to ensure all factors contribute equally
    heuristics /= np.sum(heuristics)
    
    # Introduce sparsity by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Adjust heuristics based on the average prize value of selected items
    selected_items = heuristics > 0
    selected_prize_average = np.mean(prize[selected_items])
    adjustment_factor = selected_prize_average / np.mean(prize)
    heuristics *= adjustment_factor
    
    return heuristics
```
