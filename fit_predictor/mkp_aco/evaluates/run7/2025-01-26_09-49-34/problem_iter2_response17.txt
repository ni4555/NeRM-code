```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate a combination of factors including the ratio of prize to total weight, sparsity factor, and a diversity factor
    sparsity_factor = 1 / (1 + np.sum(weight, axis=1))
    normalized_prize = prize / np.sum(prize)
    diversity_factor = np.max(weight, axis=1) / np.sum(weight, axis=1)
    total_factor = normalized_prize * np.sum(weight, axis=1)
    
    # Enhance sparsity by incorporating diversity and sparsity factors
    heuristics = (total_factor * sparsity_factor * diversity_factor).astype(np.float32)
    
    # Dynamically adjust the threshold based on the maximum heuristic value
    threshold = np.max(heuristics) / 2
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
