```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize values by dividing with the maximum prize value
    normalized_prize = prize / np.max(prize)
    
    # Normalize the weights to get a weight ratio for each item
    weight_ratio = np.sum(weight, axis=1) / np.sum(weight)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the heuristic value by combining normalized prize and sparsity
    heuristic_value = normalized_prize * (1 - sparsity)
    
    # Apply a dynamic sparsity adjustment to enhance the weight of sparse items
    sparsity_adjustment = 1 - sparsity
    heuristic_value *= sparsity_adjustment
    
    # Normalize the heuristic values to ensure they are within a reasonable range
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic
    
    # Sparsify the heuristic values by setting below a certain threshold to zero
    threshold = np.mean(heuristic_value)
    heuristics = np.where(heuristic_value > threshold, heuristic_value, 0)
    
    return heuristics
```
