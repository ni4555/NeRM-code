```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and sparsity factor
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce diversity by adding a random perturbation to heuristics
    np.random.seed(0)  # Ensure reproducibility
    perturbation = np.random.normal(0, 0.005, size=heuristics.shape)
    heuristics += perturbation
    
    # Use a dynamic threshold that adapts to the current distribution of heuristics
    threshold = np.percentile(heuristics, 80)  # Higher threshold to encourage riskier choices
    
    # Adjust heuristics based on a balance between exploration and exploitation
    exploration_factor = np.random.uniform(0.8, 1.2, size=heuristics.shape)
    exploitation_factor = heuristics / threshold
    balanced_heuristics = exploration_factor * exploitation_factor
    
    # Introduce sparsity thoughtfully by setting heuristics below a certain percentile to zero
    lower_threshold = np.percentile(balanced_heuristics, 10)  # Lower threshold for sparsity
    sparsity_heuristics = np.where(balanced_heuristics < lower_threshold, 0, balanced_heuristics)
    
    # Refine heuristics iteratively to optimize for diversity and sparsity
    # Increase heuristics for items that are diverse and not too sparse
    for i in range(len(sparsity_heuristics)):
        if sparsity_factor[i] > 0.3 and np.random.uniform() < 0.1:  # 10% chance to adjust heuristics
            sparsity_heuristics[i] *= 1.05
    
    # Normalize heuristics by dividing by the sum of heuristics to avoid division by zero
    heuristic_sum = np.sum(sparsity_heuristics)
    if heuristic_sum > 0:
        sparsity_heuristics /= heuristic_sum
    
    return sparsity_heuristics
```
