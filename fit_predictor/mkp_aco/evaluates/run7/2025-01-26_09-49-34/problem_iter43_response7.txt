```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize using min-max scaling
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)
    
    # Calculate balance factor using variance and sparsity
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Introduce controlled noise for diversity and a floor
    noise = np.random.normal(0, 0.01, size=normalized_prize.shape)
    heuristics = normalized_prize * balance_factor + noise
    heuristics = np.maximum(heuristics, 0)
    
    # Emphasize non-dominated items with dynamic thresholds
    median_heuristics = np.median(heuristics)
    low_threshold = median_heuristics - median_heuristics * 0.1
    high_threshold = median_heuristics + median_heuristics * 0.1
    
    # Sparsify by setting out-of-bound heuristics to zero
    heuristics[heuristics < low_threshold] = 0
    heuristics[heuristics > high_threshold] = 0
    
    # Amplify high-potential heuristics
    amplification_factor = heuristics.max() / median_heuristics
    heuristics *= (1 + amplification_factor * np.random.rand(n))
    
    # Iterate to balance exploration and exploitation
    for i in range(n):
        if sparsity_factor[i] > 0.5:
            heuristics[i] = np.max(heuristics[i] * 1.1, 0)
    
    # Normalize to balance variance
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
