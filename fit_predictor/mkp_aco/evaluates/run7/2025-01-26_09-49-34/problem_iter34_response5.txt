```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the ratio of prize to the sum of weights in each dimension
    ratio_factor = normalized_prize / weight.sum(axis=1)
    
    # Use the standard deviation of the weights to introduce a diversity factor
    std_factor = np.mean(np.std(weight, axis=1))
    
    # Promote items with lower standard deviation to encourage diversity
    diversity_factor = 1 / (std_factor + 1e-5)
    
    # Combine factors to create an initial heuristic value
    initial_heuristics = ratio_factor * diversity_factor
    
    # Use a simple ranking adjustment to balance exploration and exploitation
    rank_adjustment = np.argsort(-initial_heuristics)
    adjusted_heuristics = initial_heuristics * np.exp(-rank_adjustment / np.max(rank_adjustment))
    
    # Introduce sparsity by zeroing out a fraction of the lowest heuristics
    num_to_zero = int(len(adjusted_heuristics) * 0.1)
    adjusted_heuristics[np.argsort(adjusted_heuristics)[:num_to_zero]] = 0
    
    # Refine heuristics iteratively to improve balance
    for _ in range(3):
        adjusted_heuristics /= np.sum(adjusted_heuristics)
    
    # Adjust heuristics based on the average prize value of selected items
    selected_prize_average = np.mean(prize[adjusted_heuristics > 0])
    adjustment_factor = selected_prize_average / np.mean(prize)
    adjusted_heuristics *= adjustment_factor
    
    return adjusted_heuristics
```
