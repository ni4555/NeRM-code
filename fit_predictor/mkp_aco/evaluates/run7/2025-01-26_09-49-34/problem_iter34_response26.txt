```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight
    normalized_prize = prize / np.sum(prize)
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Inverse variance factor for diversity
    inv_variance_factor = 1 / np.mean(weight ** 2, axis=1) / np.mean(weight, axis=1)
    
    # Initial heuristic calculation
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce noise for diversity
    noise_level = np.random.rand() / np.sum(sparsity_factor)
    np.random.seed(0)
    perturbation = np.random.normal(0, noise_level, size=heuristics.shape)
    heuristics += perturbation
    
    # Adaptive thresholding based on mean and standard deviation
    mean_heuristics = np.mean(heuristics)
    std_dev_heuristics = np.std(heuristics)
    adaptive_threshold = mean_heuristics + 2 * std_dev_heuristics
    
    # Refine heuristic values around the threshold
    for i in range(len(heuristics)):
        if heuristics[i] < adaptive_threshold:
            heuristics[i] = adaptive_threshold * (1 - sparsity_factor[i])
    
    # Iterative refinement to balance diversity and concentration
    while True:
        mean_heuristics = np.mean(heuristics)
        std_dev_heuristics = np.std(heuristics)
        adaptive_threshold = mean_heuristics + 2 * std_dev_heuristics
        
        # Check if the heuristics have stabilized
        if np.allclose(heuristics, adaptive_threshold * (1 - sparsity_factor), atol=1e-5):
            break
        
        # Refine heuristic values again
        for i in range(len(heuristics)):
            if heuristics[i] < adaptive_threshold:
                heuristics[i] = adaptive_threshold * (1 - sparsity_factor[i])
    
    # Normalize heuristics
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
