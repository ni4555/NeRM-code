```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Define a factor that accounts for the variance of the prize to balance out outliers
    variance_factor = np.mean((prize - np.mean(prize)) ** 2) / (np.std(prize) ** 2)
    
    # Calculate a diversity factor by considering the number of distinct weight dimensions per item
    diversity_factor = (np.count_nonzero(weight, axis=1) / weight.shape[1])
    
    # Combine factors for heuristic creation
    heuristic_base = normalized_prize * variance_factor * diversity_factor
    
    # Apply adaptive thresholding to balance exploration and exploitation
    heuristic_threshold = heuristic_base - np.random.rand(len(heuristic_base)) * 0.05
    
    # Filter out the items below the threshold
    heuristics = np.where(heuristic_base > heuristic_threshold, heuristic_base, 0)
    
    return heuristics
```
