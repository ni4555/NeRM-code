```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the variance of the weights for each item
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of dimensions with zero weight
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * (1 / (average_normalized_weight + 1e-8))
    
    # Adjust heuristics based on sparsity, penalizing items with low sparsity
    heuristics *= (1 - sparsity_factor)
    
    # Adjust heuristics based on the variance of the weights, rewarding items with low variance
    heuristics *= (1 / (1 + weight_variance))
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Integrate diversity by ensuring a minimum diversity factor is applied
    diversity_factor = np.sum(1 / (1 + np.exp(-sparsity_factor)))
    heuristics *= diversity_factor
    
    # Apply a dynamic sparsification threshold that considers both the average normalized weight
    # and the sparsity factor, setting elements below the threshold to zero
    sparsity_threshold = np.mean(average_normalized_weight * sparsity_factor)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Final adjustment to heuristics to ensure a balance between sparsity and diversity
    heuristics *= (1 / (1 + np.exp(-diversity_factor)))
    
    return heuristics
```
