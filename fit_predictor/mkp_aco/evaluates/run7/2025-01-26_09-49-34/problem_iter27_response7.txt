```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor based on the distance from the centroid of weights
    centroid = np.mean(weight, axis=1)
    diversity_factor = 1 / np.linalg.norm(weight - centroid, axis=1)
    
    # Calculate the variance factor
    variance_factor = np.mean(weight ** 2, axis=1) / np.mean(weight, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize, diversity, and variance factors
    heuristics = normalized_prize * diversity_factor * variance_factor
    
    # Adjust heuristics based on a weighted combination of diversity and variance factors
    # Increase heuristics for diverse items and items with lower variance
    heuristics *= (diversity_factor + variance_factor)
    
    # Integrate domain-specific relevance by adding a factor based on the number of zero weight dimensions
    domain_relevance_factor = (weight.sum(axis=1) == 0).astype(float)
    heuristics *= domain_relevance_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Refine thresholds dynamically based on performance
    # Use a simple performance-based feedback loop
    performance = np.sum(heuristics * prize)  # Example performance metric
    if performance < np.sum(prize) / 2:  # If performance is below 50% of the maximum, relax the threshold
        threshold = np.percentile(heuristics, 50)  # 50% threshold
    else:
        threshold = np.percentile(heuristics, 70)  # 70% threshold if performance is high
    
    heuristics[heuristics > threshold] *= 1.5
    
    return heuristics
```
