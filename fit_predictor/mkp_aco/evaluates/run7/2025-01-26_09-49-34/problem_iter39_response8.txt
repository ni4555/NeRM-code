```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate sparsity and diversity factors
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    diversity = np.random.normal(0, 0.01, size=normalized_prize.shape)
    
    # Adjust sparsity and diversity based on item dimension constraints
    for i in range(weight.shape[1]):
        weight[:, i] = np.where(weight[:, i] == 1, 1 - diversity[:, i], weight[:, i])
    
    # Calculate heuristic values
    heuristic_values = normalized_prize * sparsity_factor * weight.sum(axis=1)
    
    # Refine heuristics based on variance to promote exploitation
    heuristic_variance = np.var(heuristic_values, axis=0)
    heuristic_values *= (1 + 0.5 * (heuristic_variance - np.mean(heuristic_variance)) / np.std(heuristic_variance))
    
    # Apply a dynamic threshold based on the 25th and 75th percentiles to promote exploration
    lower_threshold = np.percentile(heuristic_values, 25)
    upper_threshold = np.percentile(heuristic_values, 75)
    heuristic_values = np.clip(heuristic_values, lower_threshold, upper_threshold)
    
    # Introduce sparsity by setting values below a threshold to zero
    sparsity_threshold = np.percentile(heuristic_values, 20)
    heuristic_values[heuristic_values < sparsity_threshold] = 0
    
    # Normalize the heuristics
    heuristic_sum = np.sum(heuristic_values)
    if heuristic_sum > 0:
        heuristic_values /= heuristic_sum
    
    return heuristic_values
```
