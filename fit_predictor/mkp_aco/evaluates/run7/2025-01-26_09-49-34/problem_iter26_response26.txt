```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the total weight for each item
    total_weight_per_item = np.sum(weight, axis=1)
    
    # Calculate the variance of weights for each item across all dimensions
    weight_variance = np.sum(weight**2, axis=1) / total_weight_per_item
    
    # Calculate the utility factor as the product of normalized prize and the inverse of total weight
    utility_factor = normalized_prize * (1 / total_weight_per_item)
    
    # Promote variance by adding it to the utility factor
    utility_factor += weight_variance
    
    # Promote diversity by penalizing low variance
    diversity_promotion = (1 + weight_variance) / np.sum(1 + weight_variance)
    
    # Promote high normalized prize per unit weight
    utility_factor *= normalized_prize
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(utility_factor)
    if max_heuristic > 0:
        utility_factor /= max_heuristic
    
    # Apply a threshold to ensure that high utility factors are not excessively dominant
    threshold = np.mean(utility_factor) * 0.9  # 90% threshold
    utility_factor[utility_factor > threshold] = threshold
    
    # Refine heuristics further by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(utility_factor) * 0.1)  # Zero out 10% of the lowest heuristics
    utility_factor[np.argsort(utility_factor)[:num_to_zero]] = 0
    
    # Balance the heuristics by ensuring they do not sum to a value too high
    balance_factor = 1 / (1 + np.sum(utility_factor) / len(utility_factor))
    utility_factor *= balance_factor
    
    return utility_factor
```
