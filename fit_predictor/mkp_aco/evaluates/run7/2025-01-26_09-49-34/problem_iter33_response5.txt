```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and sparsity factor
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce noise for diversity by adding a random perturbation
    np.random.seed(0)
    perturbation = np.random.normal(0, 0.01, size=heuristics.shape)
    heuristics += perturbation
    
    # Introduce a dynamic threshold based on the current distribution
    threshold = np.percentile(heuristics, 70)
    heuristics[heuristics > threshold] *= 1.5
    
    # Sparsify heuristics by reducing the influence of less promising items
    lower_threshold = np.percentile(heuristics, 30)
    heuristics[heuristics < lower_threshold] *= 0.5
    
    # Iteratively refine heuristics
    for _ in range(5):  # Refine 5 times
        # Identify promising items
        promising_indices = np.where(heuristics > threshold)[0]
        # Adjust the heuristics of promising items to balance exploration and exploitation
        for i in promising_indices:
            if sparsity_factor[i] > 0.5:
                heuristics[i] *= 1.1
    
    # Normalize heuristics to ensure the sum is 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
