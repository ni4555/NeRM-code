```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the diversity factor based on the standard deviation of weights
    diversity_factor = np.std(weight, axis=1)
    
    # Calculate the variance of the weights
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Initialize heuristics with a focus on normalized prize and diversity
    initial_heuristics = normalized_prize * (1 / (average_normalized_weight + 1e-8))
    
    # Adjust heuristics to favor items with higher diversity and lower variance
    adjusted_diversity = 1 + np.exp(-diversity_factor)
    adjusted_variance = 1 + np.exp(-weight_variance)
    
    # Combine adjusted diversity and variance to the initial heuristics
    combined_heuristics = initial_heuristics * adjusted_diversity * adjusted_variance
    
    # Normalize heuristics by dividing by the maximum heuristic value to avoid dominated items
    max_heuristic = np.max(combined_heuristics)
    if max_heuristic > 0:
        heuristics = combined_heuristics / max_heuristic
    else:
        heuristics = combined_heuristics
    
    # Refine heuristics by incorporating a weighted factor that balances the normalized prize
    # and variance adjustment, while also promoting items with low diversity and low variance
    weighted_factor = normalized_prize * adjusted_variance
    low_diversity_adjustment = 1 / (1 + diversity_factor)
    low_variance_adjustment = 1 / (1 + weight_variance)
    
    # Final heuristics incorporating the weighted factor and adjustments for low diversity and low variance
    heuristics *= weighted_factor * low_diversity_adjustment * low_variance_adjustment
    
    return heuristics
```
