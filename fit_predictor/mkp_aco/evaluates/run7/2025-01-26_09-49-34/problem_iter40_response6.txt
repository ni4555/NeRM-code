```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.sum(prize)
    
    # Sparsity factor for items with zero weight in all dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Inverse variance factor to account for variability in weights
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors to get a balance factor that emphasizes high prize and low variance
    balance_factor = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Generate noise to introduce diversity and randomness
    noise_level = np.random.rand() / np.sum(balance_factor)
    np.random.seed(0)
    perturbation = np.random.normal(0, noise_level, size=balance_factor.shape)
    
    # Add noise to balance factors to enhance diversity
    heuristics = balance_factor + perturbation
    
    # Dynamically calculate thresholds based on statistical measures
    median_heuristic = np.median(heuristics)
    amplification_threshold = median_heuristic * 1.5  # Amplify above the median
    reduction_threshold = median_heuristic * 0.5   # Reduce below the median
    
    # Amplify or reduce heuristics based on the thresholds
    heuristics[heuristics > amplification_threshold] *= 1.5
    heuristics[heuristics < reduction_threshold] *= 0.5
    
    # Promote sparsity by filtering out low-potential items
    sparsity_threshold = np.percentile(sparsity_factor, 80)
    heuristics[sparsity_factor < sparsity_threshold] = 0
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
