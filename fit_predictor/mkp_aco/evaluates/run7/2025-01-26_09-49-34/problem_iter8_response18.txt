```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to average weight per item
    ratio = prize / np.mean(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Combine the ratio with the sparsity factor and apply a dynamic adjustment
    combined_score = ratio * (1 - sparsity_factor)
    
    # Incorporate a variance penalty that penalizes items with high weight variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_penalty = 1 / (1 + weight_variance)
    
    # Refine heuristics with the variance penalty
    refined_heuristics = combined_score * variance_penalty
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(refined_heuristics)
    if max_heuristic > 0:
        refined_heuristics /= max_heuristic
    
    # Introduce a penalty for items with sparsity above the average sparsity level
    sparsity_penalty = 1 / (1 + (sparsity_factor - average_sparsity)**2)
    refined_heuristics *= sparsity_penalty
    
    # Normalize heuristics to ensure the balance between sparsity and prize value
    refined_heuristics /= np.max(refined_heuristics)
    
    return refined_heuristics
```
