```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    heuristics = np.zeros(n)
    
    for i in range(n):
        # Calculate the prize to weight ratio for the item
        ratio = prize[i] / np.sum(weight[i])
        
        # Calculate sparsity factor based on the number of non-zero dimensions
        sparsity_factor = 1 - np.mean(weight[i] == 0)
        
        # Calculate the minimum average weight across all items for sparsity comparison
        min_average_weight = np.min(np.sum(weight, axis=0)) / m
        
        # Calculate the variance of weights within the item across dimensions
        weight_variance = np.var(weight[i])
        
        # Calculate heuristic using a combination of features
        heuristic = ratio * (sparsity_factor / (1 - min_average_weight)) * (1 / (1 + weight_variance))
        
        # Normalize the heuristic by the maximum heuristic value
        heuristics[i] = heuristic / np.max(heuristic) if np.max(heuristic) > 0 else heuristic
    
    return heuristics
```
