```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize to enhance sparsity and reduce dominance
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)
    
    # Calculate a dynamic threshold for balancing exploration and exploitation
    dynamic_threshold = np.percentile(normalized_prize, 50)
    
    # Create a base heuristic based on normalized prize
    base_heuristic = normalized_prize
    
    # Introduce controlled noise for diversity while maintaining non-negativity
    noise = np.random.normal(0, 0.01, size=n)
    noise = np.maximum(noise, 0)
    noise_factor = np.random.uniform(0.1, 0.3, size=n)
    heuristics = base_heuristic + noise * noise_factor
    
    # Amplify higher heuristics to promote exploitation, while keeping a balance with exploration
    amplification_factor = np.where(heuristics > dynamic_threshold, 1.1, 1)
    heuristics *= amplification_factor
    
    # Adjust the heuristic contribution based on sparsity and weight sum
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    weight_sum = weight.sum(axis=1)
    heuristics *= sparsity_factor / (1 + weight_sum)  # Avoid dominance by dividing by the sum of weights
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
