```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize and weight to emphasize non-linear interactions
    prize_normalized = (prize - np.mean(prize)) / np.std(prize)
    weight_normalized = (weight - np.mean(weight, axis=1, keepdims=True)) / np.std(weight, axis=1, keepdims=True)
    
    # Calculate the ratio of normalized prize to normalized weight per item
    ratio = prize_normalized / np.sum(weight_normalized, axis=1)
    
    # Introduce diversity by penalizing items with very high or very low sparsity factor
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    sparsity_factor[sparsity_factor < 0.1] = 0.1  # Avoid extreme low values
    sparsity_factor[sparsity_factor > 0.9] = 0.9  # Avoid extreme high values
    
    # Combine the ratio and sparsity factor
    heuristics = ratio * sparsity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold to sparsify the heuristics, setting elements below a threshold to zero
    diversity_threshold = np.mean(ratio) * np.mean(sparsity_factor)
    heuristics[heuristics < diversity_threshold] = 0
    
    return heuristics
```
