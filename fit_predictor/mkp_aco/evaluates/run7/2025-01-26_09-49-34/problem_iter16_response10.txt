```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate sparsity as a factor by penalizing items with more than half of their weights being zero
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    sparsity_factor[sparsity_factor <= 0.5] = 1  # Only penalize if more than half the weights are zero
    
    # Introduce a diversity factor based on the average ratio of non-zero weights
    diversity_factor = np.mean(ratio[np.where(weight.sum(axis=1) > 0)[0]])
    
    # Calculate the normalized prize per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight per item
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Introduce a balance factor based on the inverse of the average normalized weight
    balance_factor = 1 / (average_normalized_weight + 1e-8)
    
    # Combine the ratio, sparsity factor, diversity factor, normalized prize, and balance factor
    heuristics = ratio * sparsity_factor * diversity_factor * normalized_prize * balance_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold to sparsify the heuristics, setting elements below a threshold to zero
    sparsity_threshold = np.mean(ratio) * np.mean(sparsity_factor) * (1 - np.mean(balance_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
