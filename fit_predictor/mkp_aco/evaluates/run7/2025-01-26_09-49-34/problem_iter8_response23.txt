```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the average ratio across all items
    average_ratio = np.mean(ratio)
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Combine the ratio with the sparsity factor, adjusting for the average ratio
    combined_factors = ratio * (1 - sparsity_factor) * (1 - average_sparsity)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(combined_factors)
    if max_heuristic > 0:
        combined_factors /= max_heuristic
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = average_ratio * average_sparsity
    heuristics = np.where(combined_factors >= sparsity_threshold, combined_factors, 0)
    
    # To ensure a balance between local and global properties, add a global property adjustment
    global_adjustment = np.sum(ratio) / prize.shape[0]
    heuristics += global_adjustment
    
    return heuristics
```
