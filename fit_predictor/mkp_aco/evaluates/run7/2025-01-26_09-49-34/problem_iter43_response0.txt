```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize and weight to avoid dominance and balance variance
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)
    
    min_weight = np.min(weight, axis=1)
    max_weight = np.max(weight, axis=1)
    normalized_weight = (weight - min_weight) / (max_weight - min_weight)
    
    # Calculate the dominance factor by emphasizing non-dominated items
    dominance_factor = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Introduce a noise factor for diversity
    noise_factor = np.random.normal(0, 0.01, size=normalized_prize.shape)
    
    # Combine factors to create heuristics
    heuristics = dominance_factor + noise_factor
    
    # Set a floor for the heuristics to maintain diversity
    heuristics = np.maximum(heuristics, 0.01)
    
    # Dynamically adjust heuristics based on the current state
    median_heuristic = np.median(heuristics)
    heuristics[heuristics < median_heuristic] *= 0.8
    heuristics[heuristics > median_heuristic] *= 1.2
    
    # Amplify high-potential heuristics to exploit
    amplification_threshold = np.percentile(heuristics, 90)
    heuristics[heuristics > amplification_threshold] *= 1.5
    
    # Sparsify by zeroing out low-potential heuristics
    sparsity_threshold = np.percentile(heuristics, 10)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize the heuristics to balance exploration and exploitation
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
