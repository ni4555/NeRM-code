```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights by dividing each dimension of the weight array by the sum of that dimension
    normalized_weight = weight / np.sum(weight, axis=0)
    
    # Calculate the product of the normalized prize and normalized weight
    product_prize_weight = prize * normalized_weight
    
    # Adjust penalties based on the sum of each item's weights in all dimensions, higher the sum, higher the penalty
    penalties = np.sum(normalized_weight, axis=0)
    
    # Normalize heuristics by subtracting penalties, giving less importance to heavier items
    heuristics = product_prize_weight - penalties
    
    # Apply a dynamic sparsity threshold that is proportional to the average sum of weights
    average_penalty = np.mean(penalties)
    sparsity_threshold = average_penalty
    
    # Set heuristics below the threshold to zero to simulate a sparsity factor
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize the final heuristics so they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
