```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity by summing the number of zero weights in each dimension
    sparsity = np.sum(weight == 0, axis=1)
    
    # Calculate the dynamic threshold based on the average sparsity
    average_sparsity = np.mean(sparsity)
    dynamic_threshold = average_sparsity * 0.5
    
    # Normalize the heuristics by adding a domain-specific ratio
    domain_specific_ratio = np.sum(weight, axis=1) / n  # Assuming n is the total number of items
    heuristics = ratio * domain_specific_ratio
    
    # Sparsify by setting elements below the dynamic threshold to zero
    heuristics[sparsity < dynamic_threshold] = 0
    
    return heuristics
```
