```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and sparsity factor
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce noise for diversity
    np.random.seed(0)
    noise = np.random.normal(0, 0.02, size=heuristics.shape)
    heuristics += noise
    
    # Dynamically adjust thresholds
    threshold = np.percentile(heuristics, 80)  # Adjust threshold to 80% to encourage more exploration
    lower_threshold = np.percentile(heuristics, 20)  # Maintain sparsity at 20%
    
    # Refine heuristics based on the dynamic thresholds
    heuristics[heuristics > threshold] *= 1.5
    heuristics[heuristics < lower_threshold] = 0
    
    # Iteratively refine heuristics by balancing exploration and exploitation
    for i in range(len(heuristics)):
        if heuristics[i] > threshold and sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.1
        elif heuristics[i] < lower_threshold and sparsity_factor[i] < 0.5:
            heuristics[i] /= 1.1
    
    # Normalize heuristics by dividing by the sum of heuristics to avoid division by zero
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
