```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to sum to 1
    normalized_prize = prize / np.sum(prize)
    
    # Normalize the weight for each dimension to sum to 1
    normalized_weight = weight / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate the average normalized weight per item
    average_normalized_weight = np.mean(normalized_weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)  # Add a small constant to avoid division by zero
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(normalized_weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the heuristics based on the ratio of prize to inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Adjust heuristics based on sparsity, penalizing items with low sparsity
    sparsity_penalty = 1 - sparsity_factor
    heuristics *= sparsity_penalty
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Incorporate variance in weights to penalize items with high variance
    weight_variance = np.sum(normalized_weight**2, axis=1)
    variance_penalty = 1 / (1 + weight_variance)
    
    # Combine variance penalty with heuristics
    heuristics *= variance_penalty
    
    # Apply a dynamic sparsification threshold
    sparsity_threshold = np.mean(average_normalized_weight * sparsity_penalty)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
