```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to reduce dominance of high values
    normalized_prize = prize / np.max(prize)
    
    # Calculate heuristic based on normalized prize and a diversity factor
    diversity_factor = np.random.normal(0, 0.01, size=normalized_prize.shape)
    heuristic = normalized_prize + diversity_factor
    
    # Encourage sparsity by adding a sparsity factor
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Introduce an exploitation factor based on the average of the normalized prize
    exploitation_factor = np.mean(normalized_prize)
    
    # Blend exploration and exploitation, and encourage diversity
    heuristic = (heuristic * 0.7 + exploitation_factor * 0.3 + sparsity_factor * 0.5) / 1.5
    
    # Refine heuristics by iterating over a subset of items
    for _ in range(3):
        for i in range(heuristic.shape[0]):
            # Amplify heuristics for non-dominated items
            if not np.any(heuristic > heuristic[i]):
                heuristic[i] *= 1.1
    
    # Introduce sparsity by zeroing out low-value heuristics
    sparsity_threshold = np.percentile(heuristic, 20)  # 20% threshold for sparsity
    heuristic[heuristic < sparsity_threshold] = 0
    
    return heuristic
```
