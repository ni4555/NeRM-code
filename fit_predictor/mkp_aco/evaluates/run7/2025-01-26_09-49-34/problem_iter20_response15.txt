```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate the sparsity factor based on the number of dimensions with zero weight
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the diversity factor based on the number of non-zero dimensions
    diversity_factor = np.sum(weight != 0, axis=1) / weight.shape[1]
    
    # Calculate initial heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Adjust heuristics based on sparsity, rewarding items with high sparsity
    heuristics *= (1 + np.exp(-sparsity_factor))
    
    # Adjust heuristics based on diversity, prioritizing items with high diversity
    heuristics *= (1 + np.exp(-diversity_factor))
    
    # Normalize heuristics by dividing by the sum of heuristics
    sum_heuristics = np.sum(heuristics)
    if sum_heuristics > 0:
        heuristics /= sum_heuristics
    
    # Adjust heuristics based on the variance of the weights, rewarding items with low variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_adjustment = 1 / (1 + weight_variance)
    heuristics *= variance_adjustment
    
    # Final adjustment to ensure all heuristics are non-negative
    heuristics = np.maximum(heuristics, 0)
    
    return heuristics
```
