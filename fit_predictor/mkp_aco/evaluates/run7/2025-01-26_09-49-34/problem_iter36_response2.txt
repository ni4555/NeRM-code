```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to avoid dominance by using min-max normalization
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)
    
    # Calculate sparsity factor based on the presence of weight in each dimension
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate inverse variance factor to balance variance in weights
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Introduce randomness for diversity
    np.random.seed(0)
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    
    # Combine factors into a weighted sum
    combined_factor = normalized_prize * sparsity_factor * inv_variance_factor * diversity
    
    # Introduce sparsity by zeroing out low-value heuristic values
    sparsity_threshold = np.percentile(combined_factor, 30)  # 30% threshold for sparsity
    combined_factor[combined_factor < sparsity_threshold] = 0
    
    # Amplify heuristics of items with higher potential using a threshold
    amplification_threshold = np.percentile(combined_factor, 70)  # 70% threshold
    combined_factor[combined_factor > amplification_threshold] *= 1.2
    
    # Normalize the final heuristics to ensure sum equals 1
    heuristic_sum = np.sum(combined_factor)
    if heuristic_sum > 0:
        combined_factor /= heuristic_sum
    
    return combined_factor
```
