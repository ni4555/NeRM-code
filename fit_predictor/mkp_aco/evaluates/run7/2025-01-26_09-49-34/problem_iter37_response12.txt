```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate a balance factor considering both sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Incorporate diversity by adding a random component
    np.random.seed(0)
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Use a dynamic threshold based on the mean value to adapt the heuristics
    mean_value = np.mean(balanced_prize)
    threshold = mean_value + np.random.normal(0, 0.1, size=balanced_prize.shape)
    
    # Amplify high-value heuristics and reduce low-value heuristics
    amplified_prize = np.where(balanced_prize > threshold, balanced_prize * 1.2, balanced_prize * 0.8)
    
    # Introduce sparsity by zeroing out unpromising elements
    sparsity_threshold = np.percentile(amplified_prize, 10)  # 10% threshold for sparsity
    amplified_prize[amplified_prize < sparsity_threshold] = 0
    
    # Normalize the final heuristics
    heuristic_sum = np.sum(amplified_prize)
    if heuristic_sum > 0:
        amplified_prize /= heuristic_sum
    
    return amplified_prize
```
