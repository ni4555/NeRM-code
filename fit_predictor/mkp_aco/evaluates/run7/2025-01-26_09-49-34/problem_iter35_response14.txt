```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the balance factor by checking the variance of weight dimensions
    balance_factor = np.mean((weight ** 2).sum(axis=1) / weight.sum(axis=1))
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Introduce noise to encourage exploration in less promising areas
    noise = np.random.normal(0, 0.005, size=normalized_prize.shape)
    
    # Combine factors to create initial heuristics
    initial_heuristics = normalized_prize * balance_factor * sparsity_factor + noise
    
    # Introduce diversity by random perturbation
    np.random.seed(0)  # Ensure reproducibility
    perturbation = np.random.normal(0, 0.01, size=initial_heuristics.shape)
    heuristics = initial_heuristics + perturbation
    
    # Adjust heuristics to ensure a balance between high-value and balanced weight distribution
    for i in range(len(heuristics)):
        # Increase heuristics for balanced items with high prize and weight variance
        if balance_factor[i] > 0.7 and sparsity_factor[i] > 0.6:
            heuristics[i] *= 1.2
    
    # Apply sparsity by setting heuristics below a certain percentile to zero
    lower_threshold = np.percentile(heuristics, 10)  # 10% threshold for sparsity
    heuristics[heuristics < lower_threshold] = 0
    
    # Normalize heuristics by dividing by the sum of heuristics to avoid division by zero
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    # Refine heuristics by balancing exploration and exploitation iteratively
    for i in range(len(heuristics)):
        # Incrementally adjust heuristics for less explored items that are above the threshold
        if heuristics[i] > 0.5 and sparsity_factor[i] < 0.8:
            heuristics[i] *= 1.05
    
    return heuristics
```
