```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to prevent dominance
    normalized_prize = prize / np.max(prize)
    
    # Balance factors with sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Add diversity and use adaptive thresholds
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Introduce sparsity through thresholds
    sparsity_threshold = np.percentile(balanced_prize, 30)
    balanced_prize[balanced_prize < sparsity_threshold] = 0
    
    # Amplify heuristics of items with higher potential
    amplification_threshold = np.percentile(balanced_prize, 70)
    balanced_prize[balanced_prize > amplification_threshold] *= 1.2
    
    # Refine heuristics iteratively
    for _ in range(5):
        for i in range(balanced_prize.shape[0]):
            dominated_by = np.any(balanced_prize > balanced_prize[i])
            if not dominated_by:
                balanced_prize[i] *= 1.1
    
    # Optimize by promoting non-dominated and sparse heuristics
    average_sparsity = np.mean(sparsity_factor)
    balanced_prize *= (average_sparsity + 0.5)
    
    # Normalize the final heuristics
    heuristic_sum = np.sum(balanced_prize)
    if heuristic_sum > 0:
        balanced_prize /= heuristic_sum
    
    return balanced_prize
```
