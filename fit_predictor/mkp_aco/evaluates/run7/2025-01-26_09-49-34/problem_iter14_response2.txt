```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Incorporate problem-aware features:
    # - Use the ratio of prize to total weight
    # - Sparsity factor to encourage items that are less dense in the knapsack
    # - Normalize by the minimum average weight to ensure diversity
    heuristic_features = ratio * (1 - sparsity_factor) / (min_average_weight + 1e-8)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristic_features)
    if max_heuristic > 0:
        heuristic_features /= max_heuristic
    
    # Incorporate variance considerations by penalizing items with high weight variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_penalty = 1 / (1 + weight_variance)
    
    # Combine heuristics with variance penalty to get a more informed heuristic value
    heuristic_features = heuristic_features * variance_penalty
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = np.mean(min_average_weight) * (1 - average_sparsity)
    heuristic_features[heuristic_features < sparsity_threshold] = 0
    
    # Incorporate convergence criteria by penalizing items that are too close to the average heuristic
    average_heuristic = np.mean(heuristic_features)
    convergence_penalty = np.exp(-np.abs(heuristic_features - average_heuristic))
    
    # Combine all heuristics to get the final heuristic values
    heuristics = heuristic_features * convergence_penalty
    
    return heuristics
```
