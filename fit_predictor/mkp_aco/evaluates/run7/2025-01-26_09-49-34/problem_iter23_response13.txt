```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor by using the range of weight in each dimension
    diversity_factor = (np.ptp(weight, axis=1)).astype(float)
    
    # Calculate the inverse sparsity factor, favoring items with non-zero weights in all dimensions
    inv_sparsity_factor = 1 / ((weight.sum(axis=1) > 0).astype(float) == 1)
    
    # Calculate the initial heuristics by combining normalized prize, diversity factor, and inverse sparsity factor
    heuristics = normalized_prize * diversity_factor * inv_sparsity_factor
    
    # Apply an adaptive threshold based on a dynamic ratio to balance exploration and exploitation
    dynamic_threshold = 1 / (1 + np.exp(-0.01 * heuristics))
    heuristics *= dynamic_threshold
    
    # Apply domain knowledge by giving a penalty to items with a low variance in the weights
    variance_penalty = 1 / np.mean(weight ** 2, axis=1)
    heuristics -= variance_penalty
    
    # Normalize heuristics by dividing by the maximum heuristic value to avoid dominated items
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Ensure non-zero heuristics for selection and zero out unpromising elements
    heuristics[heuristics <= 0] = 0
    
    return heuristics
```
