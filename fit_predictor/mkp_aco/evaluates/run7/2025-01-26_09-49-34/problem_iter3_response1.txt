```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Sparsify by considering the average weight in the other dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Create heuristics by multiplying ratio by a factor of average weight
    heuristics = ratio * average_weight
    
    # Apply a sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = np.max(heuristics) / 2
    
    # Enhance heuristics with a domain-specific ratio by considering the sum of weights in the other dimensions
    domain_specific_ratio = np.sum(weight, axis=1) / np.sum(weight)
    
    # Normalize heuristics to ensure balanced multi-faceted factors
    heuristics = (heuristics + domain_specific_ratio) / 2
    
    # Apply a dynamic threshold that adjusts based on the normalized heuristics
    dynamic_threshold = np.mean(heuristics) * 0.75
    
    # Set elements below the dynamic threshold to zero
    heuristics[heuristics < dynamic_threshold] = 0
    
    return heuristics
```
