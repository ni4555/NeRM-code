```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    # Adding a small value to avoid division by zero
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate the sparsity factor based on the number of dimensions with zero weight
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the variance of the normalized weights for each item
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Combine factors: normalized prize, inverse average weight, sparsity factor, and variance
    # Each factor is given a weight to emphasize or de-emphasize its contribution
    factor_weights = [0.4, 0.3, 0.2, 0.1]
    combined_factor = (
        normalized_prize * factor_weights[0] +
        inverse_average_weight * factor_weights[1] +
        (1 - np.exp(-sparsity_factor)) * factor_weights[2] +
        (1 / (1 + weight_variance)) * factor_weights[3]
    )
    
    # Normalize the combined factor by dividing by the maximum combined factor value
    max_combined_factor = np.max(combined_factor)
    if max_combined_factor > 0:
        combined_factor /= max_combined_factor
    
    # Apply dynamic sparsification based on a threshold
    sparsity_threshold = np.mean(combined_factor)
    heuristics = np.where(combined_factor > sparsity_threshold, combined_factor, 0)
    
    return heuristics
```
