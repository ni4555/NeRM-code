```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Calculate a dynamic threshold based on the average sparsity and minimum average weight
    dynamic_threshold = (np.mean(ratio) * min_average_weight) * (1 - average_sparsity)
    
    # Combine the ratio with the sparsity factor and apply the dynamic threshold
    heuristics = ratio * (1 - sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Incorporate item-specific characteristics by penalizing items with high variance in weights
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_penalty = 1 / (1 + weight_variance)
    
    # Combine heuristics with variance penalty to get a more informed heuristic value
    heuristics = heuristics * variance_penalty
    
    # Use a combination of factors to set a sparsity threshold
    sparsity_threshold = dynamic_threshold / 2 + np.mean(ratio) * average_sparsity
    
    # Apply sparsification by setting elements below the threshold to zero
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Adjust heuristics based on a domain-specific insight, e.g., items with a higher prize per weight ratio are preferred
    heuristics *= (heuristics > 0)
    
    return heuristics
```
