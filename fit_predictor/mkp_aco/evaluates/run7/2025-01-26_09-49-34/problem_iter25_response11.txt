```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to account for utility per unit weight
    utility = prize / weight.sum(axis=1)
    
    # Calculate sparsity by considering items with at least one non-zero weight dimension
    sparsity = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate inverse variance to prioritize more diverse item selection
    inv_variance = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine the utility, sparsity, and inverse variance factors to form the heuristics
    heuristics = utility * sparsity * inv_variance
    
    # Use a weighted combination to balance the factors
    # Higher weights for utility and sparsity
    weighted_heuristics = 0.6 * heuristics + 0.2 * sparsity + 0.2 * inv_variance
    
    # Refine heuristics based on a dynamic threshold
    threshold = np.percentile(weighted_heuristics, 80)  # 80% threshold
    weighted_heuristics[weighted_heuristics < threshold] = 0
    
    # Adjust heuristics based on the domain-specific knowledge
    # For example, if certain items are known to be more valuable or essential, increase their heuristic
    # Assuming we have some domain knowledge that items in indices [0, 2, 4] are more valuable
    domain_knowledge = np.ones_like(weighted_heuristics)
    domain_knowledge[[0, 2, 4]] *= 1.2
    
    # Final heuristic value is the combination of weighted heuristics and domain knowledge
    final_heuristics = weighted_heuristics * domain_knowledge
    
    # Normalize heuristics by their maximum value to avoid dominance by high prize values
    max_heuristic = np.max(final_heuristics)
    if max_heuristic > 0:
        final_heuristics /= max_heuristic
    
    # Apply sparsification to reduce the dimensionality of the heuristics
    # Zero out the lowest 5% heuristics to achieve a balance between diversity and sparsity
    num_to_zero = int(len(final_heuristics) * 0.05)
    final_heuristics[np.argsort(final_heuristics)[:num_to_zero]] = 0
    
    return final_heuristics
```
