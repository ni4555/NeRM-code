```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the balance factor by considering the variance within each dimension
    balance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize, sparsity, and balance factors
    heuristics = normalized_prize * sparsity_factor * balance_factor
    
    # Introduce noise to promote diversity
    np.random.seed(0)  # Ensure reproducibility
    noise = np.random.normal(0, 0.02, size=heuristics.shape)
    heuristics += noise
    
    # Introduce a dynamic threshold to adjust heuristics
    dynamic_threshold = np.percentile(heuristics, 75)  # 75% threshold
    heuristics[heuristics > dynamic_threshold] *= 1.2
    
    # Introduce sparsity by setting a lower threshold
    lower_threshold = np.percentile(heuristics, 25)  # 25% threshold for sparsity
    heuristics[heuristics < lower_threshold] = 0
    
    # Normalize heuristics to ensure non-zero sum
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    # Refine heuristics by balancing exploration and exploitation
    # Enhance heuristics for items that are not too sparse and have a high balance factor
    for i in range(len(heuristics)):
        if sparsity_factor[i] > 0.5 and balance_factor[i] > 0.5:
            heuristics[i] *= 1.1
    
    return heuristics
```
