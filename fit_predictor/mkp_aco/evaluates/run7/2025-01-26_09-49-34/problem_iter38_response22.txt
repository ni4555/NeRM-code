```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize to avoid dominance by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate value-to-weight ratio for each item
    value_to_weight = normalized_prize / weight.sum(axis=1)
    
    # Introduce diversity with noise
    diversity_noise = np.random.normal(0, 0.1, size=n)
    
    # Combine value-to-weight ratio and diversity noise
    initial_heuristics = value_to_weight + diversity_noise
    
    # Dynamically adapt thresholds for amplification and reduction
    amplification_threshold = np.percentile(initial_heuristics, 70)
    reduction_threshold = np.percentile(initial_heuristics, 30)
    
    # Amplify higher potential items and reduce lower potential items
    heuristics = np.copy(initial_heuristics)
    heuristics[initial_heuristics > amplification_threshold] *= 1.5
    heuristics[initial_heuristics < reduction_threshold] *= 0.5
    
    # Apply sparsity by zeroing out low-value heuristic values
    sparsity_threshold = np.percentile(heuristics, 10)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize the heuristics to maintain balance
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
