```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and sparsity factor
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce diversity by adding a random perturbation to heuristics
    np.random.seed(0)  # Ensure reproducibility
    perturbation = np.random.normal(0, 0.01, size=heuristics.shape)
    heuristics += perturbation
    
    # Adjust heuristics based on a dynamic threshold that considers the current distribution
    threshold = np.percentile(heuristics, 70)  # 70% threshold
    heuristics[heuristics > threshold] *= 1.5
    
    # Introduce sparsity thoughtfully by setting heuristics below a certain percentile to zero
    lower_threshold = np.percentile(heuristics, 20)  # 20% threshold for sparsity
    heuristics[heuristics < lower_threshold] = 0
    
    # Refine heuristics iteratively by balancing exploration and exploitation
    # Increase heuristics for items that are closer to the threshold but not too sparse
    for i in range(len(heuristics)):
        if heuristics[i] > threshold and sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.1
    
    # Iterate the refinement step to allow the heuristics to converge over a few iterations
    for _ in range(3):
        # Sort heuristics in descending order and reapply the thresholding
        sorted_indices = np.argsort(-heuristics)
        sorted_heuristics = heuristics[sorted_indices]
        sorted_threshold = np.percentile(sorted_heuristics, 70)  # 70% threshold
        sorted_heuristics[sorted_heuristics > sorted_threshold] *= 1.5
        sorted_heuristics[sorted_heuristics < lower_threshold] = 0
        
        # Apply sparsity by setting the lowest heuristics to zero
        sparsity_indices = sorted_indices[np.argsort(sorted_heuristics)[:int(len(sorted_heuristics) * 0.2)]]
        sorted_heuristics[sparsity_indices] = 0
        
        # Update heuristics with the sorted and sparsified heuristics
        heuristics = sorted_heuristics[np.argsort(sorted_indices)]
    
    return heuristics
```
