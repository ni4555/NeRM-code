```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and sparsity factor
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Adjust heuristics to encourage diversity and balance exploration & exploitation
    # Use a combination of the inverse of the variance and the sparsity factor
    diversity_factor = 1 / (inv_variance_factor + sparsity_factor)
    heuristics *= diversity_factor
    
    # Introduce an adaptive threshold that considers the mean and standard deviation
    mean_heuristics = np.mean(heuristics)
    std_dev = np.std(heuristics)
    adaptive_threshold = mean_heuristics + 2 * std_dev
    heuristics[heuristics > adaptive_threshold] *= 1.5
    
    # Introduce sparsity by setting a fraction of the lowest heuristics to zero
    # Based on the current state of the heuristics, decide the sparsity level
    sparsity_level = np.random.rand()  # Random sparsity level between 0 and 1
    num_to_zero = int(len(heuristics) * sparsity_level)
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
