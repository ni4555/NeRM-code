```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the diversity factor to balance exploration and exploitation
    diversity_factor = np.mean(weight, axis=0)
    
    # Combine all factors to calculate initial heuristics
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor * diversity_factor
    
    # Introduce noise to encourage diversity in the initial solution
    np.random.seed(0)
    noise = np.random.normal(0, 0.01, size=heuristics.shape)
    heuristics += noise
    
    # Apply a dynamic threshold based on the median of heuristics
    median_heuristics = np.median(heuristics)
    threshold = median_heuristics * 1.5  # Adjust the threshold dynamically
    
    # Adjust heuristics for items with high heuristics values above the threshold
    heuristics[heuristics > threshold] *= 1.5
    
    # Apply a sparsity heuristic, setting elements below a percentile threshold to zero
    lower_threshold = np.percentile(heuristics, 20)
    heuristics[heuristics < lower_threshold] = 0
    
    # Balance the heuristic values to avoid dominance of any single factor
    for i in range(len(heuristics)):
        # Adjust heuristics to balance sparsity and diversity
        heuristics[i] = heuristics[i] * sparsity_factor[i] * diversity_factor[i]
    
    # Refine heuristics by adjusting based on a balance factor that considers sparsity and diversity
    balance_factor = (sparsity_factor + diversity_factor) / 2
    heuristics *= balance_factor
    
    return heuristics
```
