```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine the factors to create the initial heuristics
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce noise for diversity
    np.random.seed(1)  # Ensure different seed for diversity
    noise = np.random.normal(0, 0.05, size=heuristics.shape)
    heuristics += noise
    
    # Use a dynamic threshold to adapt heuristics
    threshold = np.percentile(heuristics, 75)  # 75% threshold for dynamic adjustment
    heuristics[heuristics > threshold] *= 1.2
    
    # Introduce sparsity by setting a lower threshold
    lower_threshold = np.percentile(heuristics, 25)  # 25% threshold for sparsity
    heuristics[heuristics < lower_threshold] = 0
    
    # Balance exploration and exploitation by iteratively refining heuristics
    for i in range(len(heuristics)):
        if heuristics[i] > threshold and sparsity_factor[i] > 0.5:
            heuristics[i] = min(heuristics[i] * 1.1, threshold * 1.5)
    
    return heuristics
```
