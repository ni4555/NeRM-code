```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the prize-to-weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the heuristics based on the prize-to-weight ratio and sparsity factor
    heuristics = ratio * (1 - sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value to avoid loss of information
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold that considers both the prize-to-weight ratio
    # and the sparsity factor, setting elements below the threshold to zero
    sparsity_threshold = np.mean(ratio * (1 - sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
