```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to avoid dominance by high prize items
    normalized_prize = prize / np.max(prize)
    
    # Calculate sparsity factor, favoring items with fewer weight dimensions in use
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate variance balance factor, favoring items with more balanced weight distribution
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate diversity by adding a random perturbation to promote exploration
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    
    # Combine the factors for balance
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Add diversity to the normalized prize
    combined_prize = normalized_prize * balance_factor + diversity
    
    # Introduce dynamic thresholding for amplification
    amplification_threshold = np.percentile(combined_prize, 70)  # 70% threshold for amplification
    amplification_factor = 1.2  # Factor by which to amplify high-potential heuristics
    
    # Amplify high-potential heuristics
    combined_prize[combined_prize > amplification_threshold] *= amplification_factor
    
    # Normalize the combined prize to maintain a consistent scale
    heuristic_sum = np.sum(combined_prize)
    if heuristic_sum > 0:
        combined_prize /= heuristic_sum
    
    return combined_prize
```
