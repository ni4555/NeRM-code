```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Calculate a dynamic threshold based on the average sparsity and minimum average weight
    dynamic_threshold = (np.mean(ratio) * min_average_weight) * (1 - average_sparsity)
    
    # Incorporate item-specific characteristics by penalizing items with high variance in weights
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_penalty = 1 / (1 + weight_variance)
    
    # Calculate a normalized heuristics value by combining ratio, sparsity, and variance penalty
    normalized_heuristics = ratio * (1 - sparsity_factor) * variance_penalty
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = dynamic_threshold * 0.5
    heuristics = np.where(normalized_heuristics >= sparsity_threshold, normalized_heuristics, 0)
    
    # Adapt thresholds with domain insights and smooth the heuristics using a sigmoid transformation
    domain_insight_threshold = dynamic_threshold * 0.8
    heuristics = np.where(heuristics >= domain_insight_threshold, heuristics, 0)
    
    # Apply sigmoid transformation to map heuristics to a range [0, 1]
    heuristics = 1 / (1 + np.exp(-heuristics))
    
    return heuristics
```
