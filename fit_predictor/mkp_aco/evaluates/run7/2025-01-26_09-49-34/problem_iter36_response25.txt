```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to scale values for comparison
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor for each item
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine normalized prize, sparsity, and inverse variance factors using a weighted sum
    combined_factor = normalized_prize * 0.6 * sparsity_factor * inv_variance_factor * 0.4
    
    # Introduce noise for diversity while maintaining the sparsity of items
    noise_factor = np.random.rand(*combined_factor.shape) * 0.01 * sparsity_factor
    
    # Adjust heuristics based on the weighted combination and noise
    heuristics = combined_factor + noise_factor
    
    # Set an adaptive threshold for balancing exploration and exploitation
    threshold = np.percentile(heuristics, 75)  # 75% threshold to balance exploration and exploitation
    
    # Increase heuristics for items that are above the threshold to encourage exploration
    heuristics[heuristics > threshold] *= 1.2
    
    # Reduce heuristics for items that are below the threshold to promote exploitation
    heuristics[heuristics < threshold] *= 0.8
    
    # Introduce diversity by promoting items with lower variance
    diversity_factor = np.exp(-np.sum(weight ** 2, axis=1))
    heuristics *= diversity_factor
    
    # Normalize heuristics to ensure the sum of heuristics is 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    # Iteratively refine heuristics to improve the quality of the solution
    for _ in range(2):  # Perform two iterations of refinement
        # Sparsify the heuristics by zeroing out a fraction of the lowest values
        num_to_zero = int(len(heuristics) * 0.05)  # Zero out 5% of the lowest heuristics
        heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
        
        # Reapply thresholding
        threshold = np.percentile(heuristics, 75)
        heuristics[heuristics > threshold] *= 1.2
        heuristics[heuristics < threshold] *= 0.8
    
    return heuristics
```
