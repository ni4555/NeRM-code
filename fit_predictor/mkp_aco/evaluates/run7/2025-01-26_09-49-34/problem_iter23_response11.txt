```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized utility by dividing prize by the weighted average of the items
    weighted_avg = np.sum(prize * weight, axis=1) / np.sum(weight, axis=1)
    normalized_utility = prize / weighted_avg
    
    # Calculate diversity factor based on the number of non-zero weight dimensions
    diversity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the exploration factor based on inverse of the standard deviation
    exploration_factor = 1 / np.std(weight, axis=1)
    
    # Combine factors to create a heuristic score
    heuristics = normalized_utility * diversity_factor * exploration_factor
    
    # Apply an adaptive threshold to exploit known good items
    adaptive_threshold = np.percentile(heuristics, 90)
    heuristics[heuristics < adaptive_threshold] = 0
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
