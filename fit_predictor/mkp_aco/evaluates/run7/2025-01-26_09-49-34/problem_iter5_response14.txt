```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the sparsity score adjusted by the average sparsity
    sparsity_score = sparsity_factor * (1 / np.mean(sparsity_factor))
    
    # Calculate the density score, which is the inverse of sparsity score
    density_score = 1 / (sparsity_score + 1e-5)
    
    # Calculate the combined heuristic score by blending ratio and density score
    combined_heuristic = ratio * density_score
    
    # Normalize the combined heuristic by its maximum value
    max_combined_heuristic = np.max(combined_heuristic)
    if max_combined_heuristic > 0:
        combined_heuristic /= max_combined_heuristic
    
    # Apply a dynamic sparsification threshold based on the average of combined heuristic scores
    sparsity_threshold = np.mean(combined_heuristic)
    heuristics = np.where(combined_heuristic > sparsity_threshold, combined_heuristic, 0)
    
    return heuristics
```
