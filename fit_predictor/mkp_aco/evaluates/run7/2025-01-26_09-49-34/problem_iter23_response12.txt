```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor based on the product of weights across dimensions
    diversity_factor = np.prod(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the risk factor based on the standard deviation of weights across dimensions
    risk_factor = np.std(weight, axis=1)
    
    # Calculate the heuristic value as a combination of the factors above
    heuristics = normalized_prize * diversity_factor * sparsity_factor / (1 + risk_factor)
    
    # Adjust heuristics to ensure a balance between exploration and exploitation
    exploration_exploitation_balance = np.random.rand(len(heuristics))
    adjusted_heuristics = heuristics * exploration_exploitation_balance
    
    # Normalize heuristics by dividing by the sum of heuristics to ensure they sum to 1
    normalized_heuristics = adjusted_heuristics / np.sum(adjusted_heuristics)
    
    return normalized_heuristics
```
