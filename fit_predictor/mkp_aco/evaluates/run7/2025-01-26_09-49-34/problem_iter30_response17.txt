```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to the range [0, 1]
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the ratio of prize to the sum of weights in each dimension to encourage diversity
    ratio_to_weight_sum = normalized_prize / weight.sum(axis=1)
    
    # Calculate the standard deviation of each item's weight to control variance
    std_dev = np.std(weight, axis=1)
    
    # Use the inverse of the standard deviation to promote selection of items with lower variance
    std_dev_factor = 1 / (std_dev + 1e-8)  # Add a small constant to avoid division by zero
    
    # Combine factors: ratio to weight sum and standard deviation factor
    combined_factors = ratio_to_weight_sum * std_dev_factor
    
    # Normalize combined factors to ensure they sum to 1
    heuristics = combined_factors / np.sum(combined_factors)
    
    # Introduce sparsity to avoid overfitting and encourage diversity
    sparsity_factor = np.where(heuristics > 0.5, heuristics, 0)
    
    # Refine heuristics iteratively
    for _ in range(3):
        previous_heuristics = heuristics.copy()
        weighted_sum = heuristics * previous_heuristics
        heuristics = weighted_sum / np.sum(weighted_sum)
    
    # Apply a feedback mechanism by balancing exploration and exploitation
    # Increase the weight of items that are performing well in the weighted sum
    performance_factor = np.argsort(-weighted_sum)[:int(len(weighted_sum) * 0.3)]
    heuristics[performance_factor] *= 1.5
    
    return sparsity_factor
```
