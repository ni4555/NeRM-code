```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Sparsify by considering the average weight in the other dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Incorporate domain insight by focusing on the items with the highest prize to weight ratio
    heuristics = ratio * average_weight
    
    # Add sparsity by penalizing items that have a high variance in their weights
    variance = np.var(weight, axis=1)
    sparsity_factor = 1 / (1 + variance)
    
    # Combine the ratio and sparsity to get a more balanced heuristic
    heuristics *= sparsity_factor
    
    # Normalize heuristics to ensure they are on a similar scale
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a global insight that penalizes items that have an excessive average weight
    # in any of the dimensions
    excessive_weight_penalty = 1 / (1 + np.mean(average_weight / np.max(average_weight)))
    
    # Incorporate this global insight into the heuristic values
    heuristics *= excessive_weight_penalty
    
    return heuristics
```
