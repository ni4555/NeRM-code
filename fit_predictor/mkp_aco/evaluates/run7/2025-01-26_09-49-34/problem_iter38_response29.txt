```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to avoid dominance by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate sparsity factor considering the sum of weights
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate inverse variance factor for balance
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine sparsity and inverse variance factors
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Introduce randomness to enhance diversity
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Set a sparsity threshold and zero out low-value heuristic values
    sparsity_threshold = np.percentile(balanced_prize, 30)  # 30% threshold for sparsity
    balanced_prize[balanced_prize < sparsity_threshold] = 0
    
    # Dynamically adapt thresholds based on the distribution of the heuristics
    amplification_threshold = np.percentile(balanced_prize, 70)  # 70% threshold
    balanced_prize[balanced_prize > amplification_threshold] *= 1.2
    
    # Iteratively refine the heuristics based on value-to-weight ratio
    for _ in range(5):  # Iterate 5 times to refine
        value_to_weight = balanced_prize / weight.sum(axis=1)
        balanced_prize[value_to_weight > np.percentile(value_to_weight, 90)] *= 1.1
    
    # Normalize the final heuristics
    heuristic_sum = np.sum(balanced_prize)
    if heuristic_sum > 0:
        balanced_prize /= heuristic_sum
    
    return balanced_prize
```
