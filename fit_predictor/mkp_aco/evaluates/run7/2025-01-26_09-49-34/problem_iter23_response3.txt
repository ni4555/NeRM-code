```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the maximum prize value
    normalized_prize = prize / np.max(prize)
    
    # Calculate a diversity factor based on the sum of inverse weight norms
    diversity_factor = np.sum(1 / np.linalg.norm(weight, axis=1), axis=0)
    
    # Calculate a sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate a utility factor based on the prize divided by the total weight
    utility_factor = normalized_prize / weight.sum(axis=1)
    
    # Calculate the initial heuristics as a weighted sum of the factors
    heuristics = normalized_prize * diversity_factor * sparsity_factor * utility_factor
    
    # Apply adaptive thresholding to balance exploration and exploitation
    threshold = np.percentile(heuristics, 70)  # Example threshold
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
