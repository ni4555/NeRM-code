```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(np.sum(weight == 0, axis=1) / weight.shape[1])
    
    # Calculate the standard deviation of the weight ratios
    std_ratio = np.std(ratio)
    
    # Calculate a dynamic threshold based on the standard deviation and average sparsity
    dynamic_threshold = (std_ratio + np.mean(ratio)) * (1 - average_sparsity)
    
    # Normalize heuristics by dividing by the standard deviation
    max_heuristic = np.max(ratio)
    if max_heuristic > 0:
        heuristics = ratio / max_heuristic
    else:
        heuristics = np.zeros_like(ratio)
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = dynamic_threshold / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
