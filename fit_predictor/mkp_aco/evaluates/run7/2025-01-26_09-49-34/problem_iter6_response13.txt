```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Calculate a dynamic threshold based on the average sparsity and minimum average weight
    dynamic_threshold = (np.mean(ratio) * min_average_weight) * (1 - average_sparsity)
    
    # Calculate a dynamic penalty for low sparsity
    penalty_for_low_sparsity = 1 - average_sparsity
    
    # Calculate the average prize
    average_prize = np.mean(prize)
    
    # Combine factors to create heuristics:
    # - Prize ratio emphasizes high-value items
    # - Sparsity factor encourages items with lower total weight
    # - Dynamic threshold ensures a balance between value and sparsity
    # - Penalty for low sparsity encourages adding more items
    heuristics = ratio * (1 - sparsity_factor) * penalty_for_low_sparsity * (prize / average_prize)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = dynamic_threshold * penalty_for_low_sparsity / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
