```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize using min-max scaling
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)
    
    # Calculate balance factor using variance and sparsity
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Introduce controlled noise and floors for diversity
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)
    heuristics = normalized_prize * balance_factor + diversity
    
    # Emphasize non-dominated items and refine with dynamic thresholds
    heuristics = heuristics / np.sum(heuristics)
    heuristics = np.sort(heuristics)[::-1]
    
    # Sparsify the heuristics by setting unpromising elements to zero
    sparsity_threshold = np.percentile(heuristics, 20)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Dynamically adjust amplification for high-potential heuristics
    amplification_threshold = np.percentile(heuristics, 80)
    heuristics[heuristics > amplification_threshold] *= 1.2
    
    # Iteratively refine heuristics to balance exploration and exploitation
    for i in range(n):
        if sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.2
    
    return heuristics
```
