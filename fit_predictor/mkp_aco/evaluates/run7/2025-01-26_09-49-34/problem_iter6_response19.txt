```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the variance of weights per item
    variance = np.var(weight, axis=1)
    
    # Calculate the average normalized weight across dimensions for each item
    average_weight = np.mean(weight, axis=1)
    
    # Calculate a dynamic factor based on variance and average weight
    dynamic_factor = average_weight / (1 + variance)
    
    # Calculate the initial heuristics by combining normalized prize and dynamic factor
    heuristics = normalized_prize * dynamic_factor
    
    # Apply a sparsification threshold dynamically
    sparsity_threshold = np.mean(heuristics) * 0.5
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Incorporate a penalty for high variance to prevent overly sparse solutions
    penalty_factor = 1 / (1 + variance)
    heuristics *= penalty_factor
    
    return heuristics
```
