```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate a diversity factor to promote selection of diverse items
    diversity_factor = 1 / np.sqrt(np.sum(weight ** 2, axis=1))
    
    # Calculate the initial heuristics based on the product of normalized prize and diversity factor
    heuristics = normalized_prize * diversity_factor
    
    # Incorporate item properties into the heuristic calculation
    # For example, items with a high proportion of unique dimensions might be more valuable
    unique_dimension_factor = np.mean(np.sum(weight > 0, axis=1) > 1, axis=0)
    heuristics *= unique_dimension_factor
    
    # Refine thresholds based on item performance and adjust weights dynamically
    # Here, we use a performance-based weight adjustment, increasing weight for high-performing items
    performance_based_weight = np.argsort(heuristics)[::-1]
    for i, item_idx in enumerate(performance_based_weight):
        heuristics[item_idx] *= (i + 1)
    
    # Integrate domain-specific relevance by promoting items that are more likely to be beneficial
    # Assuming that some items are more relevant based on domain knowledge, we can adjust their heuristic
    # For simplicity, let's assume we have a relevance vector
    relevance_vector = np.random.rand(len(prize))
    relevance_vector /= np.sum(relevance_vector)
    heuristics *= relevance_vector
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
