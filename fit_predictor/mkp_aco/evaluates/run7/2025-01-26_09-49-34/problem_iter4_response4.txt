```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sum of weights for each item across all dimensions
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the normalized weight for each item, reflecting how sparsely the weight is spread
    normalized_weight = np.max(weight, axis=1) / weight_sum
    
    # Calculate the entropy of the weight distribution for each item to consider the spread
    weight_entropy = -np.sum((weight / np.sum(weight, axis=1)) * np.log(weight / np.sum(weight, axis=1)))
    
    # Combine the normalized prize, sparsity of weight, and entropy to get the heuristic
    heuristics = normalized_prize * normalized_weight * (1 / (1 + weight_entropy))
    
    # Apply a logarithmic transformation to penalize items with extremely low heuristics
    heuristics = np.log1p(heuristics)
    
    # Normalize heuristics to ensure non-negative values
    max_heuristic = np.max(heuristics)
    heuristics /= max_heuristic
    
    # Set a strategic threshold to filter out the least promising items
    threshold = 0.1
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
