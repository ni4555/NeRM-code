```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the sum of prizes to use for normalization
    sum_prize = np.sum(prize)
    
    # Normalize the prize to be between 0 and 1
    normalized_prize = prize / sum_prize
    
    # Calculate the heuristic based on normalized prize and sparsity factor
    sparsity_factor = np.sum(weight, axis=1)
    heuristics = normalized_prize * np.sum(weight, axis=1)
    
    # Sparsify the heuristics by setting values below a threshold to zero
    threshold = 0.1 * np.max(heuristics)
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
