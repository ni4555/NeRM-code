```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight for each item
    prize_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor as the inverse of the sum of weights
    sparsity_factor = 1 / (1 + np.sum(weight, axis=1))
    
    # Combine the prize-to-weight ratio with the sparsity factor
    heuristic = prize_to_weight_ratio * sparsity_factor
    
    # Adjust the threshold dynamically based on the distribution of the heuristic values
    threshold = np.percentile(heuristic, 95)  # Use a higher percentile to reduce sparsity
    
    # Sparsify the heuristics by setting a threshold
    heuristics = np.where(heuristic >= threshold, heuristic, 0)
    
    return heuristics
```
