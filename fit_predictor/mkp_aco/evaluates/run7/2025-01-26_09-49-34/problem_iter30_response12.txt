```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate variance factor by using the inverse of the variance of weights
    variance_factor = np.mean(weight ** 2, axis=1) / np.var(weight, axis=1)
    
    # Combine factors to create initial heuristics
    heuristics = normalized_prize * sparsity_factor * variance_factor
    
    # Normalize heuristics to ensure a good balance between items
    max_heuristic = np.max(heuristics)
    heuristics /= max_heuristic
    
    # Apply a dynamic threshold to enhance the exploration of less selected items
    threshold = np.percentile(heuristics, 70)
    heuristics[heuristics < threshold] *= 1.2  # Increase heuristics for less selected items
    heuristics[heuristics >= threshold] *= 1.5  # Further enhance heuristics for more selected items
    
    # Introduce variability while preserving sparsity
    variability_perturbation = np.random.normal(0, max_heuristic * 0.1, heuristics.shape)
    heuristics += variability_perturbation
    
    # Zero out a fraction of the lowest heuristics to maintain a sparse solution
    num_to_zero = int(len(heuristics) * 0.1)
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Normalize heuristics to the range [0, 1] again after perturbation
    max_heuristic_after_perturbation = np.max(heuristics)
    if max_heuristic_after_perturbation > 0:
        heuristics /= max_heuristic_after_perturbation
    
    return heuristics
```
