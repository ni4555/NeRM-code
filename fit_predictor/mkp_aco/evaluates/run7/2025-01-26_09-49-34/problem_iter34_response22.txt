```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors to create initial heuristics
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce diversity by adding a random perturbation to heuristics
    perturbation = np.random.normal(0, 0.01, size=heuristics.shape)
    heuristics += perturbation
    
    # Apply dynamic thresholds to heuristics
    threshold = np.percentile(heuristics, 70)  # 70% threshold
    heuristics[heuristics > threshold] *= 1.5
    
    # Introduce sparsity by setting heuristics below a certain percentile to zero
    lower_threshold = np.percentile(heuristics, 20)  # 20% threshold for sparsity
    heuristics[heuristics < lower_threshold] = 0
    
    # Balance exploration and exploitation iteratively
    for _ in range(2):
        # Adjust heuristics to encourage diversity and explore less dense regions
        density_factor = (weight.sum(axis=1) > 0).astype(float)
        heuristics *= density_factor / (np.mean(density_factor) + 0.01)
    
    # Normalize heuristics to prevent overflow and introduce sparsity
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
