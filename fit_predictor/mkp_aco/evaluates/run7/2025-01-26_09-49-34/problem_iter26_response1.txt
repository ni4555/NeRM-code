```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = np.mean((weight > 0).astype(float), axis=1)
    
    # Calculate the variance factor to balance diversity
    variance_factor = 1 / (1 + np.mean(weight**2, axis=1) / (np.mean(weight, axis=1)**2))
    
    # Combine factors into heuristics
    heuristics = normalized_prize * sparsity_factor * variance_factor
    
    # Apply dynamic threshold to balance exploration and exploitation
    threshold = np.percentile(heuristics, 70)  # 70% threshold
    heuristics[heuristics > threshold] *= 1.5
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Apply a balance factor to prevent any single heuristic from being too high
    balance_factor = 1 / np.sum(heuristics)
    heuristics *= balance_factor
    
    return heuristics
```
