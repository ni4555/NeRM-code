```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the prize-to-weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights per item
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the average sparsity across all items
    average_sparsity = sparsity_factor.mean()
    
    # Normalize the sparsity factor by the average sparsity
    normalized_sparsity = sparsity_factor / average_sparsity
    
    # Calculate the average weight per dimension for each item
    average_weight = np.sum(weight, axis=1) / weight.shape[1]
    
    # Calculate the penalty for high variance in weight across dimensions
    variance_penalty = np.sqrt(np.sum(weight**2, axis=1) / weight.shape[1])
    
    # Combine factors to create an initial heuristic
    heuristics = ratio * (1 - normalized_sparsity) / (1 + variance_penalty)
    
    # Normalize the heuristics by their maximum value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold to sparsify the heuristics
    sparsity_threshold = np.min(heuristics) * (1 - average_sparsity)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
