```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize value for each item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the normalized weight for each dimension by dividing each weight by the sum of that dimension
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate the weighted prize for each item by multiplying normalized prize with the sum of normalized weights for each item
    weighted_prize = np.sum(normalized_prize * normalized_weight, axis=1)
    
    # Apply an adaptive sparsity threshold to set less promising items to zero
    sparsity_threshold = np.percentile(weighted_prize, 95)  # Use 95th percentile as a more conservative threshold
    heuristics = np.where(weighted_prize >= sparsity_threshold, weighted_prize, 0)
    
    return heuristics
```
