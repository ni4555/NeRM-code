```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor based on the variance of the weights across dimensions
    diversity_factor = np.var(weight, axis=1)
    
    # Calculate the utility factor based on the normalized prize
    utility_factor = normalized_prize
    
    # Calculate the heuristics by combining utility and diversity factors
    heuristics = utility_factor * diversity_factor
    
    # Integrate domain-specific information, e.g., by giving more weight to certain dimensions
    domain_specific_factor = np.exp(-np.sum(weight, axis=1))  # Example: inversely proportional to total weight
    heuristics *= domain_specific_factor
    
    # Refine heuristics by balancing objectives, e.g., by reducing the impact of less diverse items
    balance_factor = (1 + diversity_factor) / (1 + np.mean(diversity_factor))
    heuristics *= balance_factor
    
    # Normalize heuristics to maintain a consistent scale
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic adjustment based on the overall distribution of heuristics
    median_heuristic = np.median(heuristics)
    heuristics[heuristics < median_heuristic] *= 1.1  # Boost lower heuristics
    heuristics[heuristics > median_heuristic] *= 0.9  # Reduce higher heuristics
    
    # Sparsify the heuristics by zeroing out a fraction of the lowest heuristics
    num_to_zero = int(len(heuristics) * 0.05)  # Zero out 5% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
