```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to consider the relative value of each item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor, but give more weight to items with higher normalized prize
    sparsity_factor = (weight == 0) * normalized_prize
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Calculate a dynamic threshold based on the average sparsity and minimum average weight
    dynamic_threshold = (np.mean(normalized_prize) * min_average_weight) * (1 - average_sparsity)
    
    # Combine the normalized prize with the sparsity factor and apply the dynamic threshold
    heuristics = normalized_prize * (1 - sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = dynamic_threshold / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
