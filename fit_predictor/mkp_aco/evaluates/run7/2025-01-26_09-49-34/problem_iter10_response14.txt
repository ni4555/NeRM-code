```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to have a maximum value of 1
    normalized_prize = prize / np.max(prize)
    
    # Calculate the average weight for each item across all dimensions
    average_weight = np.sum(weight, axis=1)
    
    # Normalize the average weight for each item by dividing by the maximum average weight
    normalized_average_weight = average_weight / np.max(average_weight)
    
    # Calculate the sparsity factor based on the number of dimensions with zero weight
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Combine normalized prize and normalized average weight
    heuristics = normalized_prize * normalized_average_weight
    
    # Adjust heuristics to penalize low sparsity
    heuristics -= sparsity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Dynamically determine a sparsification threshold
    sparsity_threshold = np.mean(heuristics) * 0.5
    
    # Apply the sparsification threshold by setting values below the threshold to zero
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
