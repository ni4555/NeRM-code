```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a matrix to hold the heuristics
    heuristics = np.zeros_like(prize)
    
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate a balance factor considering both sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Incorporate diversity by adding a random component
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Amplify heuristics based on normalized prize and balance factor
    amplification_threshold = np.percentile(balanced_prize, 70)  # 70% threshold
    heuristics[balanced_prize > amplification_threshold] = 1
    
    # Introduce sparsity by zeroing out low-value heuristic values
    sparsity_threshold = np.percentile(balanced_prize, 30)  # 30% threshold for sparsity
    heuristics[balanced_prize < sparsity_threshold] = 0
    
    # Refine the heuristics by iterating a fixed number of times
    for _ in range(3):
        # Amplify the heuristics that are not dominated by others
        for i in range(heuristics.shape[0]):
            dominated_by = np.any(heuristics > heuristics[i])
            if not dominated_by:
                heuristics[i] *= 1.1
    
    # Normalize the final heuristics to sum to 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
