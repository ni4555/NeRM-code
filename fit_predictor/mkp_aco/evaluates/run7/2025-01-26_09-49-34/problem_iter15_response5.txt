```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate sparsity as a factor by penalizing items with more than half of their weights being zero
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    sparsity_factor[sparsity_factor <= 0.5] = 1  # Only penalize if more than half the weights are zero
    
    # Add a diversity factor that encourages selecting items with distinct weight profiles
    diversity_factor = np.sum(weight ** 2, axis=1) ** -1
    diversity_factor[diversity_factor == np.inf] = 0  # Handle division by zero
    
    # Combine factors with a non-linear interaction
    combined_factors = ratio * sparsity_factor * diversity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(combined_factors)
    if max_heuristic > 0:
        combined_factors /= max_heuristic
    
    # Apply a dynamic threshold to sparsify the heuristics, setting elements below a threshold to zero
    sparsity_threshold = np.mean(combined_factors) * (1 - np.mean(sparsity_factor))
    heuristics = np.where(combined_factors >= sparsity_threshold, combined_factors, 0)
    
    return heuristics
```
