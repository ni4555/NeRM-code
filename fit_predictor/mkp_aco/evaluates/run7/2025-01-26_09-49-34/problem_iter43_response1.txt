```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize using min-max scaling to avoid dominance by high prizes
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)
    
    # Calculate balance factor using variance and sparsity
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Introduce diversity with a floor and controlled noise
    diversity_floor = 0.001
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, diversity_floor)
    heuristics = normalized_prize * balance_factor + diversity
    
    # Dynamically adjust thresholds based on the distribution of heuristics
    sparsity_threshold = np.percentile(heuristics, 20)
    amplification_threshold = np.percentile(heuristics, 80)
    
    # Amplify high-potential heuristics and apply sparsity
    heuristics[heuristics > amplification_threshold] *= 1.2
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize the heuristics to maintain balance
    heuristics /= np.sum(heuristics)
    
    # Iteratively refine heuristics to balance exploration and exploitation
    for i in range(n):
        if heuristics[i] > amplification_threshold and sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.2
    
    return heuristics
```
