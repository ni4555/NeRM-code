```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize
    normalized_prize = prize / np.sum(prize)
    
    # Calculate sparsity factor
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors to form initial heuristics
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce noise for diversity
    np.random.seed(0)
    perturbation = np.random.normal(0, 0.02, size=heuristics.shape)
    heuristics += perturbation
    
    # Dynamic threshold adjustment
    threshold = np.percentile(heuristics, 70)
    heuristics[heuristics > threshold] *= 1.5
    
    # Sparsify heuristics by setting values below a lower threshold to zero
    lower_threshold = np.percentile(heuristics, 20)
    heuristics[heuristics < lower_threshold] = 0
    
    # Refine heuristics to balance exploration and exploitation
    for i in range(len(heuristics)):
        if heuristics[i] > threshold and sparsity_factor[i] > 0.5:
            heuristics[i] = min(heuristics[i] * 1.1, 2)  # Limit the heuristic value to avoid extreme values
    
    # Normalize heuristics to ensure the sum is 1
    heuristic_sum = np.sum(heuristics)
    heuristics /= heuristic_sum
    
    return heuristics
```
