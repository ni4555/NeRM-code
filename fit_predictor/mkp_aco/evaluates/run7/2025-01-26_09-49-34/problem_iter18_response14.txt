```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate sparsity as a factor by penalizing items with more than half of their weights being zero
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    sparsity_factor[sparsity_factor <= 0.5] = 1  # Only penalize if more than half the weights are zero
    
    # Calculate a diversity factor based on the standard deviation of the ratio
    diversity_factor = 1 / (1 + np.std(ratio))
    
    # Calculate a balance factor that combines the inverse of the ratio and the diversity factor
    balance_factor = 1 / (ratio + diversity_factor)
    
    # Combine all factors to calculate the heuristics
    heuristics = balance_factor * sparsity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Dynamically determine a sparsification threshold based on the balance factor and mean ratio
    sparsity_threshold = np.mean(balance_factor) * np.mean(ratio) * (1 - np.mean(sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
