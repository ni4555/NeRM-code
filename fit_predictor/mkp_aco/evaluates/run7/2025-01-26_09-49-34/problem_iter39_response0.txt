```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure items are not dominated by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Introduce diversity by adding a random component, weighted by sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    diversity = sparsity_factor * inv_variance_factor * np.random.normal(0, 0.01, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    
    # Balance prize and diversity
    balanced_prize = normalized_prize + diversity
    
    # Introduce sparsity by zeroing out low-value heuristic values
    sparsity_threshold = np.percentile(balanced_prize, 25)  # 25% threshold for sparsity
    balanced_prize[balanced_prize < sparsity_threshold] = 0
    
    # Amplify heuristics of promising items based on variance, avoiding dominated items
    amplification_threshold = np.percentile(balanced_prize, 75)  # 75% threshold
    non_dominated = balanced_prize > sparsity_threshold
    balanced_prize[non_dominated & (balanced_prize > amplification_threshold)] *= 1.3
    
    # Refine the heuristics to avoid too many zeros
    if np.count_nonzero(balanced_prize == 0) > n * 0.8:  # If more than 80% are zero
        non_zero_indices = balanced_prize > 0
        total_non_zero = np.count_nonzero(non_zero_indices)
        for _ in range(n - total_non_zero):
            random_index = np.random.choice(np.nonzero(non_zero_indices)[0])
            balanced_prize[random_index] = 1
    
    return balanced_prize
```
