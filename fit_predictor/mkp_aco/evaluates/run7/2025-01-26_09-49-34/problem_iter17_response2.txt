```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate sparsity as a factor by penalizing items with more than half of their weights being zero
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    sparsity_factor[sparsity_factor <= 0.5] = 1  # Only penalize if more than half the weights are zero
    
    # Incorporate diversity by penalizing items with similar sparsity and ratio characteristics
    diversity_factor = 1 - np.sum((sparsity_factor - np.mean(sparsity_factor))**2 + 
                                   (ratio - np.mean(ratio))**2, axis=1) / (2 * len(ratio))
    
    # Combine the factors
    heuristics = ratio * sparsity_factor * diversity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold to sparsify the heuristics, setting elements below a threshold to zero
    sparsity_threshold = np.mean(ratio) * np.mean(sparsity_factor) * (1 - np.mean(diversity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
