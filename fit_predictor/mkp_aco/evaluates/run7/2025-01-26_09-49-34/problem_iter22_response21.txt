```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    # Adding a small value to avoid division by zero
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate the sparsity factor based on the number of non-zero dimensions
    sparsity_factor = 1 - (weight == 0).mean(axis=1)
    
    # Calculate the sparsity contribution, using a non-linear function
    sparsity_contribution = np.log(1 + sparsity_factor)
    
    # Calculate the variance of weights for each item, adjusted for dimensionality
    adjusted_variance = np.sum(weight**2, axis=1) / (weight.shape[1] * np.mean(weight, axis=1)**2)
    
    # Calculate the variance contribution, using a non-linear function
    variance_contribution = 1 / (1 + np.exp(-adjusted_variance))
    
    # Combine contributions and calculate the initial heuristics
    heuristics = (normalized_prize * inverse_average_weight *
                  sparsity_contribution *
                  variance_contribution)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Adjust heuristics based on a combination of weighted factors
    # that incorporate the normalized prize and variance contribution
    weighted_factors = normalized_prize * variance_contribution
    
    # Apply a dynamic sparsification threshold considering the average normalized weight
    # and the sparsity factor, setting elements below the threshold to zero
    sparsity_threshold = np.mean(average_normalized_weight * np.exp(sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Final heuristics based on the weighted factors and adjusted sparsity
    heuristics *= weighted_factors * np.exp(-sparsity_factor)
    
    return heuristics
```
