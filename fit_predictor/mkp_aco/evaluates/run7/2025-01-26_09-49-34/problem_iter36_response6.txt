```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Ratio of prize to weight for each item
    ratio_factor = normalized_prize / weight.sum(axis=1)
    
    # Promote items with lower variance in weight dimensions
    variance_factor = 1 / (np.mean(np.std(weight, axis=1)) + 1e-5)
    
    # Combine factors into a weighted sum
    combined_factor = ratio_factor * variance_factor
    
    # Dynamic adjustment based on the average prize value of selected items
    selected_indices = np.argsort(combined_factor)[::-1]
    selected_prize = prize[selected_indices]
    selected_prize_average = np.mean(selected_prize)
    adjustment_factor = selected_prize_average / np.mean(prize)
    
    # Apply the adjustment factor to the combined factor
    combined_factor *= adjustment_factor
    
    # Introduce sparsity by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(combined_factor) * 0.1)
    combined_factor[np.argsort(combined_factor)[:num_to_zero]] = 0
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(combined_factor)
    if heuristic_sum > 0:
        combined_factor /= heuristic_sum
    
    return combined_factor
```
