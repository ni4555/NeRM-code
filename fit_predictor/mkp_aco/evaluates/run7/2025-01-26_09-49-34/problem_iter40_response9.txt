```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Sparsity factor for items with zero weight in all dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Inverse variance factor to account for variability in weights
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Factor to balance the importance of high prize and low variance
    balance_factor = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Generate diverse noise using multiple random sources
    noise_level = np.random.rand()
    noise1 = np.random.normal(0, noise_level, size=balance_factor.shape)
    noise2 = np.random.uniform(-noise_level, noise_level, size=balance_factor.shape)
    
    # Apply noise to balance factors to increase diversity
    heuristics = balance_factor + noise1 + noise2
    
    # Dynamic thresholding with an adaptive weight based on the median heuristic value
    median_heuristic = np.median(heuristics)
    threshold = median_heuristic * (1 - np.random.rand() * 0.5)  # Adjusting the range of the threshold
    
    # Set heuristics below the threshold to zero to promote sparsity
    heuristics[heuristics < threshold] = 0
    
    # Refine heuristics by promoting those that are above the threshold and are sparse
    items_to_keep = (heuristics > 0) & (sparsity_factor > 0.5)
    heuristics[~items_to_keep] = 0
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    # Iteratively refine heuristics to balance exploration and exploitation
    for i in range(n):
        # Adjust weight of items based on their position relative to the threshold
        if heuristics[i] > threshold:
            heuristics[i] *= 1.1
        elif heuristics[i] < threshold:
            heuristics[i] *= 0.9
    
    return heuristics
```
