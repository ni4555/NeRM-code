```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize to avoid dominated items
    normalized_prize = prize / np.max(prize)

    # Calculate sparsity factor for items with non-zero weight in all dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)

    # Calculate inverse variance to account for variability in weights
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)

    # Combine factors into a balance factor that promotes high prize and low variance
    balance_factor = normalized_prize * sparsity_factor * inv_variance_factor

    # Add noise for diversity
    noise = np.random.normal(0, 0.01, size=balance_factor.shape)
    heuristics = balance_factor + noise

    # Introduce sparsity by zeroing out low-value heuristic values
    sparsity_threshold = np.percentile(heuristics, 20)  # 20% threshold for sparsity
    heuristics[heuristics < sparsity_threshold] = 0

    # Amplify the heuristics for items that are above the median value
    median_heuristic = np.median(heuristics)
    amplification_threshold = median_heuristic * (1 + np.random.rand() * 0.2)  # 20% variation around median
    heuristics[heuristics > amplification_threshold] *= 1.1

    # Dynamically adapt the amplification threshold based on the distribution of the heuristics
    mean_heuristic = np.mean(heuristics[heuristics > 0])
    amplification_threshold_dynamic = mean_heuristic * (1 + np.random.rand() * 0.2)
    heuristics[heuristics > amplification_threshold_dynamic] *= 1.2

    # Consider item dominance and adjust heuristics accordingly
    for i in range(n):
        dominated_by = np.any(heuristics > heuristics[i])
        if not dominated_by:
            heuristics[i] *= 1.1

    # Introduce exploration by occasionally swapping heuristics
    exploration_rate = 0.05  # 5% chance of swapping
    for _ in range(int(n * exploration_rate)):
        i, j = np.random.choice(n, 2, replace=False)
        if np.random.rand() < 0.5:  # 50% chance to swap
            heuristics[[i, j]] = heuristics[[j, i]]

    # Normalize the final heuristics to sum to 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum

    return heuristics
```
