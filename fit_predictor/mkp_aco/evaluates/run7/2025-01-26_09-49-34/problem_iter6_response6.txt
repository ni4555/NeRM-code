```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Sparsify by considering the average weight in the other dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Create heuristics by multiplying ratio by a factor of average weight
    heuristics = ratio * average_weight
    
    # Incorporate domain-specific insights by emphasizing items with higher prize to weight ratio
    domain_insight = np.log(ratio + 1)  # Adding 1 to avoid log(0)
    
    # Incorporate global problem understanding by penalizing items with high weight variance
    global_insight = 1 / (1 + np.sqrt(np.sum(weight**2, axis=1)))
    
    # Combine domain-specific insights and global understanding to get a more informed heuristic value
    heuristics = heuristics * domain_insight * global_insight
    
    # Apply a sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = np.mean(heuristics) * 0.5
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize heuristics to ensure a balanced influence of all factors
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
