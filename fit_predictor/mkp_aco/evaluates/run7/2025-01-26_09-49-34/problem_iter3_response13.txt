```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the maximum ratio for normalization
    max_ratio = np.max(ratio)
    
    # Normalize the ratio
    normalized_ratio = ratio / max_ratio
    
    # Consider a balance factor based on the standard deviation of weights in other dimensions
    std_dev_weight = np.std(weight, axis=1)
    
    # Calculate the heuristics as a weighted sum of normalized ratio and inverse standard deviation
    heuristics = normalized_ratio * std_dev_weight
    
    # Apply dynamic thresholds to sparsify the heuristics
    mean_heuristics = np.mean(heuristics)
    threshold = mean_heuristics / 2
    
    # Sparsify the heuristics by setting elements below the threshold to zero
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
