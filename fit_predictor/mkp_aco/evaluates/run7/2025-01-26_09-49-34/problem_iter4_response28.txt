```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the sum of weights for each dimension
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a normalized weight that reflects how 'sparsely' the item's weight is spread across dimensions
    normalized_weight = np.max(weight, axis=1) / weight_sum
    
    # Calculate the normalized prize
    normalized_prize = prize / np.sum(prize)
    
    # Combine the normalized prize and sparsity of weight to get the heuristic
    heuristics = normalized_prize * normalized_weight
    
    # Apply a logarithmic transformation to penalize items with extremely low heuristics
    heuristics = np.log1p(heuristics)
    
    # Normalize heuristics to ensure non-negative values
    heuristics -= np.min(heuristics)
    
    # Calculate the mean and standard deviation of the heuristics
    mean_heuristics = np.mean(heuristics)
    std_heuristics = np.std(heuristics)
    
    # Use the mean and standard deviation to determine a strategic threshold
    heuristics_threshold = mean_heuristics + 2 * std_heuristics
    
    # Apply a penalty for heuristics above the threshold to avoid extreme values
    heuristics[heuristics > heuristics_threshold] *= 0.5
    
    # Combine sparsity, diversity, and the strategic threshold to shape the heuristics
    heuristics = (1 - np.exp(-heuristics)) / (1 + np.exp(-heuristics))
    
    return heuristics
```
