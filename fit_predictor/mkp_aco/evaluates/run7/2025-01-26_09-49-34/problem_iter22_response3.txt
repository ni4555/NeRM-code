```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the variance of the weights for each item
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weight dimensions
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the diversity factor as the inverse of the weight variance
    diversity_factor = 1 / (weight_variance + 1e-8)
    
    # Calculate the average weight per item
    average_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average weight for each item
    inverse_average_weight = 1 / (average_weight + 1e-8)
    
    # Combine factors into heuristics
    heuristics = (normalized_prize * diversity_factor * inverse_average_weight * sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a penalty for high variance in weights
    variance_penalty = 1 / (1 + weight_variance)
    heuristics *= variance_penalty
    
    # Promote sparsity by giving higher heuristics to items with more zero weight dimensions
    sparsity_promotion = np.exp(-sparsity_factor)
    heuristics *= sparsity_promotion
    
    # Return the final heuristics
    return heuristics
```
