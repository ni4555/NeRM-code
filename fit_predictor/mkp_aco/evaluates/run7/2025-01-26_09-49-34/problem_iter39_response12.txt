```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to reduce dominance of high prize items
    normalized_prize = prize / np.max(prize)
    
    # Incorporate a sparsity and diversity factor
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)
    
    # Combine the factors to create a heuristic
    combined_factor = sparsity_factor * diversity * normalized_prize
    
    # Dynamically adjust thresholds based on the distribution of the heuristics
    median_heuristic = np.median(combined_factor)
    low_threshold = median_heuristic - 0.5 * (median_heuristic - np.percentile(combined_factor, 25))
    high_threshold = median_heuristic + 0.5 * (np.percentile(combined_factor, 75) - median_heuristic)
    
    # Amplify heuristics above the high threshold and zero out below the low threshold
    heuristics = np.copy(combined_factor)
    heuristics[combined_factor < low_threshold] = 0
    heuristics[combined_factor > high_threshold] *= 1.2
    
    # Normalize to sum to 1
    heuristic_sum = np.sum(heuristics)
    heuristics /= heuristic_sum
    
    return heuristics
```
