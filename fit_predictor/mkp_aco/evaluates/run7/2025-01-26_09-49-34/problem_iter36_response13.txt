```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the ratio of prize to the sum of all weights in each dimension
    ratio_to_weight_sum = normalized_prize / weight.sum(axis=1)
    
    # Calculate the standard deviation of weights in each dimension
    std_deviation = np.std(weight, axis=1)
    
    # Promote items with lower standard deviation (more consistent weights)
    consistency_factor = 1 / (std_deviation + 1e-5)
    
    # Combine factors into a weighted sum
    combined_factor = ratio_to_weight_sum * consistency_factor
    
    # Introduce sparsity by promoting diversity
    # Sample a subset of items with the highest combined factors
    num_items_to_select = int(len(combined_factor) * 0.1)
    sorted_indices = np.argsort(combined_factor)[::-1]
    selected_indices = sorted_indices[:num_items_to_select]
    combined_factor[~np.isin(sorted_indices, selected_indices)] = 0
    
    # Refine heuristics by promoting items with a higher average prize value of the selected subset
    average_prize_selected = np.mean(prize[selected_indices])
    adjustment_factor = average_prize_selected / np.mean(prize)
    combined_factor *= adjustment_factor
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(combined_factor)
    if heuristic_sum > 0:
        combined_factor /= heuristic_sum
    
    return combined_factor
```
