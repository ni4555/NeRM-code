```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the inverse of the sum of all weights for each item, to prioritize items that are less heavy
    inverse_total_weight = 1 / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity factor based on the number of dimensions with zero weight
    sparsity_factor = (weight == 0).mean(axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and inverse total weight
    heuristics = normalized_prize * inverse_total_weight
    
    # Use exponential adjustments to emphasize high sparsity
    sparsity_adjustment = np.exp(sparsity_factor)
    
    # Incorporate variance in the weight as a heuristic, rewarding items with low variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_adjustment = 1 / (1 + weight_variance)
    
    # Calculate weighted factors based on normalized prize and variance adjustment
    weighted_factors = normalized_prize * variance_adjustment
    
    # Final heuristics based on the sum of weighted factors and adjusted sparsity factor
    final_heuristics = heuristics * sparsity_adjustment * variance_adjustment
    
    return final_heuristics
```
