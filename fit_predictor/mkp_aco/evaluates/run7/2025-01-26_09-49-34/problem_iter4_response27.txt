```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the sum of weights for each dimension
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a normalized weight that reflects how 'sparsely' the item's weight is spread across dimensions
    normalized_weight = np.max(weight, axis=1) / weight_sum
    
    # Calculate the normalized prize
    normalized_prize = prize / np.sum(prize)
    
    # Combine the normalized prize and sparsity of weight to get the heuristic
    heuristics = normalized_prize * normalized_weight
    
    # Apply a logarithmic transformation to penalize items with extremely low heuristics
    heuristics = np.log1p(heuristics)
    
    # Normalize heuristics to ensure non-negative values and set a strategic threshold
    max_heuristic = np.max(heuristics)
    min_threshold = max_heuristic / 10
    heuristics[heuristics < min_threshold] = 0
    
    # Incorporate sparsity by further penalizing items with high sparsity factor
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    heuristics *= (1 - sparsity_factor)
    
    return heuristics
```
