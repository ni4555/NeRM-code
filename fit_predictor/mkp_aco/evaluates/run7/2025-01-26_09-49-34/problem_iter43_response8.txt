```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize using min-max scaling to avoid dominance by high prizes
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)
    
    # Calculate balance factor using variance and sparsity
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Introduce controlled noise and floors for diversity
    noise = np.random.normal(0, 0.01, size=n)
    floor = 0.001
    diversity = np.maximum(noise, floor)
    
    # Blend exploration with exploitation
    exploration_factor = np.random.rand(n)
    exploitation_factor = np.random.rand(n)
    exploration_factor = np.where(exploitation_factor < 0.5, 1, 0.5)
    
    # Calculate initial heuristics
    heuristics = normalized_prize * balance_factor + diversity * exploration_factor
    
    # Iteratively refine heuristics
    for _ in range(5):  # Iterate a few times to refine heuristics
        # Identify non-dominated items
        dominated_items = np.any(heuristics > heuristics, axis=1)
        non_dominated_items = ~dominated_items
        
        # Amplify heuristics of non-dominated items
        heuristics[non_dominated_items] *= 1.1
        
        # Apply sparsity by setting dominated items to zero
        heuristics[dominated_items] = 0
        
        # Normalize the heuristics to maintain balance
        heuristics /= np.sum(heuristics)
    
    return heuristics
```
