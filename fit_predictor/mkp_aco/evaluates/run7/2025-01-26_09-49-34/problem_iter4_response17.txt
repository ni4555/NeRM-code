```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Sparsify by considering the average weight in the other dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Incorporate additional factors such as the maximum prize per dimension
    max_prize_per_dim = np.max(prize, axis=0)
    dimension_ratio = max_prize_per_dim / np.sum(weight, axis=1)
    
    # Balance the factors using a weighted sum approach
    combined_factor = 0.4 * ratio + 0.3 * average_weight + 0.3 * dimension_ratio
    
    # Apply dynamic threshold based on the combined factor
    dynamic_threshold = np.percentile(combined_factor, 90)
    heuristics = combined_factor
    heuristics[combined_factor < dynamic_threshold] = 0
    
    return heuristics
```
