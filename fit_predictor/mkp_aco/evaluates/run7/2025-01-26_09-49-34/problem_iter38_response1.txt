```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize prize to avoid domination by high prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate balance factor using sparsity and inv variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Add random diversity
    np.random.seed(0)
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Introduce sparsity with dynamic percentile thresholds
    current_sum = np.sum(balanced_prize)
    sparsity_threshold = np.percentile(balanced_prize, 30)
    amplification_threshold = np.percentile(balanced_prize, 70)
    
    # Amplify high potential heuristics
    amplified_prize = np.where(balanced_prize > amplification_threshold,
                               balanced_prize * 1.2, balanced_prize)
    
    # Normalize heuristics to ensure they sum to 1
    amplified_prize /= np.sum(amplified_prize)
    
    return amplified_prize
```
