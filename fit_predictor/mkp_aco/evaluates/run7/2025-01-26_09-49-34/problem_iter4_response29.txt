```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the dynamic threshold based on the maximum ratio and sparsity factor
    dynamic_threshold = np.max(ratio) * (1 - sparsity_factor)
    
    # Initialize the heuristics array
    heuristics = np.zeros_like(ratio)
    
    # Update heuristics for items with non-zero weights that meet the dynamic threshold
    for i in range(weight.shape[0]):
        if weight[i].any() and ratio[i] >= dynamic_threshold:
            heuristics[i] = 1
    
    return heuristics
```
