```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the variance factor
    variance_factor = 1 / (np.var(weight, axis=1) + 1e-6)  # Add a small constant to avoid division by zero
    
    # Calculate the initial heuristics based on the normalized prize
    heuristics = normalized_prize * sparsity_factor * variance_factor
    
    # Refine heuristics by considering domain-specific relevance and item properties
    # For example, if certain dimensions are more relevant, we can increase their influence
    domain_specific_relevance = np.array([1.5, 1.2, 1.0])  # Assuming three dimensions with increasing relevance
    heuristics *= domain_specific_relevance[:weight.shape[1]]
    
    # Dynamically adjust weights based on item properties
    # Increase weights for items with higher normalized prize
    adjusted_weights = heuristics * normalized_prize
    
    # Apply a diversity factor to encourage exploration of less popular items
    diversity_factor = 1 / (np.argsort(adjusted_weights)[:int(len(adjusted_weights) * 0.1)] + 1)
    heuristics *= diversity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
