```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by the maximum prize value to reduce scale effects
    normalized_prize = prize / np.max(prize)
    
    # Sparsity factor to encourage diverse item selection
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Factor that penalizes variance in weights
    variance_factor = np.mean(np.var(weight, axis=1))
    
    # Heuristic based on the ratio of prize to the square root of the sum of squared weights
    # This encourages balance in selecting items
    heuristic_factor = normalized_prize / np.sqrt(weight.sum(axis=1, keepdims=True) ** 2)
    
    # Dynamic noise level based on the average item sparsity
    average_sparsity = np.mean(sparsity_factor)
    noise_level = np.random.rand() / (average_sparsity + 1)
    
    # Add noise to promote diversity
    noise = np.random.normal(0, noise_level, size=heuristic_factor.shape)
    
    # Calculate combined heuristics with noise
    heuristics = heuristic_factor + noise
    
    # Adaptive thresholding based on a dynamic percentile
    dynamic_threshold = np.percentile(heuristics, 5)
    heuristics[heuristics < dynamic_threshold] = 0
    
    # Refine heuristics by adding a variance-based weight to the items below the threshold
    variance_weighted_threshold = np.percentile(heuristics, 15)
    variance_threshold = variance_factor * np.sum(heuristics) / np.sum(variance_factor)
    heuristics[heuristics < variance_threshold] = variance_weighted_threshold
    
    # Sparsify heuristics to maintain diversity and encourage exploration
    sparsity_threshold = np.percentile(heuristics, 20)
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
