```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to sum to 1
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the diversity factor based on the sum of weights
    diversity_factor = np.sum(weight, axis=1)
    
    # Calculate the variance of weights for each item
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Normalize the inverse variance to promote variance
    inverse_variance = 1 / (weight_variance + 1e-8)
    normalized_variance = inverse_variance / np.mean(inverse_variance)
    
    # Combine factors into a heuristic value
    heuristics = normalized_prize * diversity_factor * normalized_variance
    
    # Normalize heuristics by the sum of heuristics
    heuristics /= np.sum(heuristics)
    
    # Apply domain-specific adjustments, e.g., availability
    availability = np.random.binomial(1, 0.8, size=len(prize))  # Random availability for example
    availability_factor = availability * 1.2  # Boost heuristics for available items
    heuristics *= availability_factor
    
    # Apply selective thresholds to promote high prize items with low variance
    threshold = np.mean(heuristics) * np.sum(normalized_prize < np.mean(normalized_prize))
    heuristics[heuristics > threshold] = 1
    
    # Final adjustment to balance rewards
    heuristics *= normalized_prize
    
    return heuristics
```
