```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Blend exploration with exploitation by using a weighted sum of exploration and exploitation factors
    exploration_factor = np.random.normal(0, 0.01, size=prize.shape)
    exploitation_factor = prize / np.sum(prize)
    exploration_exploitation_factor = exploration_factor + exploitation_factor

    # Adapt thresholds dynamically based on item's relative value and sparsity
    relative_value = prize / np.max(prize)
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    dynamic_threshold = np.percentile(exploration_exploitation_factor, 50)  # 50% threshold for dynamic adjustment
    dynamic_sparsity_threshold = np.percentile(sparsity_factor, 20)  # 20% threshold for sparsity

    # Encourage diversity by adding a random component
    diversity = np.random.normal(0, 0.03, size=prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity

    # Combine factors to determine the heuristics
    combined_heuristics = exploration_exploitation_factor * relative_value + diversity

    # Introduce sparsity by zeroing out elements below the sparsity threshold
    combined_heuristics[sparsity_factor < dynamic_sparsity_threshold] = 0

    # Amplify the heuristics of items with higher potential based on the dynamic threshold
    amplification_threshold = dynamic_threshold
    combined_heuristics[combined_heuristics > amplification_threshold] *= 1.1

    # Refine the heuristics by iterating a fixed number of times, favoring exploration
    for _ in range(3):
        # Amplify exploration factor for items that are not yet fully explored
        for i in range(combined_heuristics.shape[0]):
            not_explored = combined_heuristics[i] < amplification_threshold
            if not_explored:
                combined_heuristics[i] *= 1.2

    # Normalize the final heuristics to ensure they sum to 1
    heuristic_sum = np.sum(combined_heuristics)
    if heuristic_sum > 0:
        combined_heuristics /= heuristic_sum

    return combined_heuristics
```
