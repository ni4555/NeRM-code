```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors in a weighted manner to get initial heuristics
    combined_factors = 0.6 * normalized_prize + 0.3 * sparsity_factor + 0.1 * inv_variance_factor
    heuristics = combined_factors
    
    # Introduce diversity by random perturbation within a range
    random_factor = np.random.uniform(0.5, 1.5, heuristics.shape)
    heuristics *= random_factor
    
    # Use a dynamic threshold to adapt the balance between exploration and exploitation
    threshold = np.percentile(heuristics, 70)
    heuristics[heuristics < threshold] *= 0.5
    
    # Apply a sparsity adjustment, ensuring that not too many items are considered unpromising
    sparsity_adjustment = np.maximum(1 - sparsity_factor, 0)
    heuristics *= sparsity_adjustment
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Further sparsify the heuristics to control variance, but avoid setting too many items to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Adjust heuristics based on item diversity, ensuring the heuristic values do not overlap too much
    diversity_factor = 1 / np.bincount(heuristics.astype(int), minlength=int(max(heuristics)))
    heuristics *= diversity_factor
    
    return heuristics
```
