```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize and weighted prize
    normalized_prize = prize / np.sum(prize)
    weighted_prize = prize / np.sum(weight, axis=1) * weight
    
    # Incorporate sparsity factor considering the sum of weights
    sparsity_factor = 1 / (1 + np.sum(weight, axis=1))
    
    # Calculate the heuristic by combining the factors
    heuristics = (normalized_prize * weighted_prize * sparsity_factor).astype(np.float32)
    
    # Adjust heuristics based on a dynamic threshold
    threshold = np.percentile(heuristics, 95)  # Using 95th percentile for threshold
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
