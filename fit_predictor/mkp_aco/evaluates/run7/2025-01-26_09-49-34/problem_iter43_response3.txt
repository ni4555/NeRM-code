```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize and weight for fairness
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)
    
    min_weight = np.min(weight, axis=1)
    max_weight = np.max(weight, axis=1)
    normalized_weight = (weight - min_weight) / (max_weight - min_weight)
    
    # Evaluate dominance and diversity
    dominance_factor = np.sum(normalized_prize * normalized_weight, axis=1)
    diversity_factor = np.random.normal(0, 0.02, size=n)
    
    # Combine factors with dynamic scaling
    heuristics = dominance_factor + diversity_factor
    heuristics = np.maximum(heuristics, 0)  # Introduce a floor for diversity
    
    # Adjust heuristics based on variance and sparsity
    variance_factor = np.mean((normalized_weight ** 2 - np.mean(normalized_weight) ** 2) / (n - 1))
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    heuristics *= (sparsity_factor / variance_factor)
    
    # Introduce noise and refine iteratively
    noise_factor = np.random.normal(0, 0.01, size=n)
    heuristics += noise_factor
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    # Iteratively amplify high-potential heuristics
    for i in range(n):
        if heuristics[i] > 0.5 and sparsity_factor[i] > 0.5:
            heuristics[i] *= 1.1
    
    return heuristics
```
