```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of non-zero weights
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    
    # Normalize the ratio and sparsity factor by dividing by the maximum value of each
    max_ratio = np.max(ratio)
    max_sparsity_factor = np.max(sparsity_factor)
    ratio /= max_ratio
    sparsity_factor /= max_sparsity_factor
    
    # Combine the normalized ratio and sparsity factor
    heuristics = ratio * sparsity_factor
    
    # Normalize heuristics by dividing by the sum to ensure they sum up to 1
    heuristics /= np.sum(heuristics)
    
    # Dynamically adjust the threshold based on the average ratio and sparsity factor
    average_ratio = np.mean(ratio)
    average_sparsity_factor = np.mean(sparsity_factor)
    threshold = average_ratio * (1 - average_sparsity_factor)
    
    # Apply the threshold to sparsify the heuristics
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
