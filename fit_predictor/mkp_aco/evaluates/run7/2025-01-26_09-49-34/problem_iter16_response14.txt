```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize array
    normalized_prize = prize / np.sum(prize)
    
    # Normalize the weights for each dimension by their sum in that dimension
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)  # Avoid division by zero
    
    # Calculate the sparsity factor for each item
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the heuristic score based on normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Adjust the heuristic score based on sparsity, penalizing items with low sparsity
    adjusted_sparsity = 1 - (1 - sparsity_factor) ** 2  # Squaring to emphasize the penalty for lower sparsity
    heuristics *= adjusted_sparsity
    
    # Normalize the heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold for sparsification, considering both average normalized weight and sparsity
    sparsity_threshold = np.mean(average_normalized_weight * adjusted_sparsity)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
