```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate a sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate an inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate a diversity factor based on the distribution of weights
    diversity_factor = np.prod(weight, axis=1)
    
    # Combine metrics into a single heuristic score
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor * diversity_factor
    
    # Apply a dynamic threshold to balance exploration and exploitation
    threshold = np.percentile(heuristics, 70)  # 70% threshold
    heuristics[heuristics > threshold] *= 1.5
    
    # Adjust weights dynamically based on performance and refine thresholds
    sorted_indices = np.argsort(heuristics)[::-1]
    for i, index in enumerate(sorted_indices):
        if i % 5 == 0:  # Adjust every 5th item in the sorted list
            heuristics[index] *= 1.1
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Integrate diversity by reducing the impact of items with high variance
    variance_factor = np.mean(weight ** 2, axis=1)
    heuristics /= variance_factor
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
