```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate a diversity factor based on the number of unique weights
    diversity_factor = 1.0 / (np.sum(np.abs(weight - np.mean(weight, axis=1)) > 1e-5, axis=1) + 1)
    
    # Calculate a utility factor based on the ratio of prize to weight
    utility_factor = normalized_prize / np.sum(weight, axis=1)
    
    # Combine the diversity and utility factors to get a heuristic value
    heuristics = diversity_factor * utility_factor
    
    # Apply a dynamic adjustment based on the standard deviation of the heuristics
    std_dev = np.std(heuristics)
    heuristics += np.abs(np.random.normal(0, std_dev, len(heuristics))) * 0.1
    
    # Refine the heuristics using a domain-specific threshold
    threshold = np.percentile(heuristics, 85)  # 85% threshold
    heuristics[heuristics < threshold] = 0
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.15)  # Zero out 15% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
