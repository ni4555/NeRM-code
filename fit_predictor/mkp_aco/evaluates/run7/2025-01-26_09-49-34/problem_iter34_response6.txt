```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors to determine initial heuristics
    combined_heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce noise for diversity
    noise = np.random.normal(0, 0.02, size=combined_heuristics.shape)
    combined_heuristics += noise
    
    # Dynamically adjust heuristics based on a threshold
    threshold = np.percentile(combined_heuristics, 80)  # 80% threshold
    combined_heuristics[combined_heuristics > threshold] *= 1.2
    
    # Sparsify heuristics by setting a percentile below which heuristics are zeroed
    lower_threshold = np.percentile(combined_heuristics, 10)  # 10% threshold for sparsity
    combined_heuristics[combined_heuristics < lower_threshold] = 0
    
    # Refine heuristics iteratively
    for i in range(len(combined_heuristics)):
        # Increase heuristics for items with high sparsity factor and above the threshold
        if sparsity_factor[i] > 0.5 and combined_heuristics[i] > threshold:
            combined_heuristics[i] *= 1.1
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(combined_heuristics)
    if heuristic_sum > 0:
        combined_heuristics /= heuristic_sum
    
    return combined_heuristics
```
