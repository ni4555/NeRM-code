```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate a combination of factors including the ratio of prize to total weight,
    # a sparsity factor, and a dynamic threshold based on the 90th percentile of the
    # weighted prize to total prize ratio.
    sparsity_factor = 1 / (1 + np.sum(weight, axis=1))
    normalized_prize = prize / np.sum(prize)
    weighted_prize = prize * np.sum(weight, axis=1)
    weighted_prize_ratio = weighted_prize / np.sum(weighted_prize)
    
    dynamic_threshold = np.percentile(weighted_prize_ratio, 90)
    weighted_prize_ratio_thresholded = np.where(weighted_prize_ratio >= dynamic_threshold, weighted_prize_ratio, 0)
    
    heuristics = normalized_prize * sparsity_factor * weighted_prize_ratio_thresholded
    
    # Set unpromising elements to zero by a threshold
    threshold = np.max(heuristics) / 2
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
