```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the quality-to-weight ratio for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Identify items with unique weights (non-zero weight in all dimensions)
    unique_weight_items = np.where(np.sum(weight, axis=1) > 0)[0]
    
    # Calculate sparsity factor for these items
    sparsity_factor = np.sum(weight[unique_weight_items] == 0, axis=1) / weight.shape[1]
    
    # Calculate the dynamic threshold for selection based on the average sparsity
    dynamic_threshold = np.mean(ratio) * (1 - np.mean(sparsity_factor))
    
    # Calculate the average variance of weights for all items
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate a penalty factor for variance
    variance_penalty = 1 / (1 + weight_variance)
    
    # Combine the quality-to-weight ratio, sparsity factor, and variance penalty
    combined_heuristics = ratio * variance_penalty
    
    # Apply the dynamic threshold to filter out less promising items
    filtered_heuristics = combined_heuristics[combined_heuristics >= dynamic_threshold]
    
    # Normalize the heuristics by the maximum value
    max_heuristic = np.max(filtered_heuristics)
    if max_heuristic > 0:
        filtered_heuristics /= max_heuristic
    
    # Initialize the final heuristics array with zeros
    heuristics = np.zeros_like(prize)
    
    # Assign the filtered heuristics to the corresponding items
    heuristics[unique_weight_items] = filtered_heuristics
    
    # Apply sparsification by setting below threshold values to zero
    sparsity_threshold = dynamic_threshold / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
