```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to avoid dominance by high values
    normalized_prize = prize / np.max(prize)
    
    # Calculate diversity by using a factor based on the standard deviation
    diversity_factor = np.std(weight, axis=1)
    
    # Calculate a balance factor considering both sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Combine factors into a weighted sum
    combined_factor = normalized_prize * diversity_factor * balance_factor
    
    # Introduce exploration by adding a random noise component
    exploration_noise = np.random.normal(0, 0.05, size=combined_factor.shape)
    combined_factor += exploration_noise
    
    # Introduce exploitation by amplifying heuristics of items with higher potential
    amplification_threshold = np.percentile(combined_factor, 75)  # 75% threshold for amplification
    combined_factor[combined_factor > amplification_threshold] *= 1.2
    
    # Normalize the final heuristics to ensure all factors contribute equally
    heuristic_sum = np.sum(combined_factor)
    if heuristic_sum > 0:
        combined_factor /= heuristic_sum
    
    return combined_factor
```
