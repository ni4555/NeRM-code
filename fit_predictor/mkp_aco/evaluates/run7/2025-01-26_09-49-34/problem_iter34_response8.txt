```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate a sparsity factor based on the number of non-zero weights
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate an inverse variance factor to promote diversity
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors to form the heuristic
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce noise to encourage exploration
    noise_level = np.random.rand() / np.sum(sparsity_factor)
    np.random.seed(0)
    perturbation = np.random.normal(0, noise_level, size=heuristics.shape)
    heuristics += perturbation
    
    # Apply dynamic thresholding to introduce sparsity
    threshold = np.percentile(heuristics, 95)
    heuristics[heuristics < threshold] = 0
    
    # Iteratively refine the heuristics by adjusting items that are on the edge of the threshold
    for i in range(len(heuristics)):
        if heuristics[i] > 0 and sparsity_factor[i] > 0.2:
            # Adjust heuristics based on the distance from the threshold
            heuristics[i] = max(heuristics[i], threshold)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
