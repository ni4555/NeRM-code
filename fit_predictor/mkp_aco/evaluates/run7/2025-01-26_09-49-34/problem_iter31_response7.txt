```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the variance factor
    variance_factor = np.mean(weight ** 2, axis=1) / np.mean(weight, axis=1) ** 2
    
    # Calculate the feature importance factor
    feature_importance_factor = np.mean(weight, axis=0)
    
    # Combine the factors into a single heuristic score
    heuristics = normalized_prize * sparsity_factor * variance_factor * feature_importance_factor
    
    # Introduce diversity by ensuring a minimum heuristics value for all items
    min_heuristics = np.min(heuristics)
    heuristics += min_heuristics
    
    # Introduce sparsity by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Adjust heuristics based on a dynamic threshold to balance exploration and exploitation
    threshold = np.percentile(heuristics, 70)  # 70% threshold
    heuristics[heuristics > threshold] *= 1.5
    
    return heuristics
```
