```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize values
    prize_normalized = prize / np.sum(prize)
    
    # Normalize weights and calculate average normalized weight
    weight_normalized = weight / np.sum(weight, axis=1)
    average_weight = np.mean(weight_normalized, axis=1)
    
    # Calculate the sparsity factor for each item
    sparsity_factor = np.sum(weight_normalized == 0, axis=1)
    
    # Calculate the variance of normalized weights
    weight_variance = np.sum(weight_normalized**2, axis=1) / average_weight
    
    # Combine factors: normalize prize, penalize high sparsity, and adjust for variance
    heuristics = prize_normalized * (1 - sparsity_factor) * (1 + weight_variance)
    
    # Apply a dynamic threshold for sparsification
    sparsity_threshold = np.mean(heuristics) * 0.1  # Example threshold, can be adjusted
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
