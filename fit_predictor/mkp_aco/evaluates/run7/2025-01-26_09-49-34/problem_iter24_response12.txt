```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the variance of weights for each item
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on the number of zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) == 0).astype(float)
    
    # Combine normalized prize and sparsity factor to create an initial heuristic
    initial_heuristics = normalized_prize * sparsity_factor
    
    # Adjust heuristics to reward variance by decreasing values for high variance items
    adjusted_variance = 1 / (1 + weight_variance)
    heuristics_with_variance = initial_heuristics * adjusted_variance
    
    # Non-linearly enhance sparsity factor for items with more zero weight dimensions
    sparsity_enhancement = (1 + np.log(1 + np.exp(-sparsity_factor)))
    heuristics_with_sparsity = heuristics_with_variance * sparsity_enhancement
    
    # Further adjust heuristics to give more importance to items with high normalized prize
    final_heuristics = heuristics_with_sparsity * normalized_prize
    
    # Normalize final heuristics to ensure they are within a certain range
    max_final_heuristic = np.max(final_heuristics)
    if max_final_heuristic > 0:
        final_heuristics /= max_final_heuristic
    
    return final_heuristics
```
