```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the variance of weights for each item
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the diversity factor as the inverse of the weight variance
    diversity_factor = 1 / (weight_variance + 1e-8)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) == weight.shape[1]).astype(float)
    
    # Combine the factors into heuristics
    heuristics = normalized_prize * diversity_factor * sparsity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Adjust heuristics to promote variance by decreasing heuristics of high variance items
    heuristics *= (1 - weight_variance)
    
    # Dynamic sparsification, rewarding items with a high number of zero weight dimensions
    heuristics *= (1 + np.exp(-sparsity_factor))
    
    # Incorporate the variance adjustment into heuristics
    heuristics *= diversity_factor
    
    # Return the final heuristics
    return heuristics
```
