```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize, sparsity factor, and inverse variance factor
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Introduce diversity by adding a random perturbation to heuristics
    perturbation = np.random.normal(0, 0.01, size=heuristics.shape)
    heuristics += perturbation
    
    # Normalize heuristics by dividing by the sum of heuristics to avoid division by zero
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    # Introduce sparsity by setting heuristics below a certain percentile to zero
    lower_threshold = np.percentile(heuristics, 20)  # 20% threshold for sparsity
    heuristics[heuristics < lower_threshold] = 0
    
    # Refine heuristics iteratively by balancing exploration and exploitation
    # Increase heuristics for items that are closer to the threshold but not too sparse
    threshold = np.percentile(heuristics, 70)  # 70% threshold
    heuristics[heuristics > threshold] *= 1.1
    
    # Introduce diversity by ensuring a minimum number of heuristics are non-zero
    min_nonzero = np.sum(sparsity_factor) * 0.1  # Keep at least 10% of heuristics non-zero
    counts = np.sum(sparsity_factor)
    while counts < min_nonzero:
        # Incrementally increase heuristics for the sparsest items until diversity is maintained
        increment = (min_nonzero - counts) / len(heuristics)
        heuristics[sparsity_factor == 0] += increment
        counts = np.sum(sparsity_factor)
    
    return heuristics
```
