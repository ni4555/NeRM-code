```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate sparsity as a factor by penalizing items with a high percentage of zero weights
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    
    # Incorporate diversity by penalizing items that are too similar to each other
    diversity_factor = np.zeros_like(ratio)
    for i in range(weight.shape[0]):
        for j in range(i+1, weight.shape[0]):
            similarity = np.sum(np.abs(weight[i] - weight[j]))
            diversity_factor[i] += similarity
            diversity_factor[j] += similarity
    diversity_factor /= 2
    diversity_factor = 1 / (1 + diversity_factor)
    
    # Incorporate balance by considering the average of all dimensions for each item
    balance_factor = np.mean(weight, axis=1)
    
    # Combine the factors into the heuristic value
    heuristics = ratio * sparsity_factor * diversity_factor * balance_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold to sparsify the heuristics, setting elements below a threshold to zero
    sparsity_threshold = np.mean(ratio) * (1 - np.mean(sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
