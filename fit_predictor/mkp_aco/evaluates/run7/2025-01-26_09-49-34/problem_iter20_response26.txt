```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the inverse of the sum of all weights for each item, to prioritize items that are less heavy
    inverse_total_weight = 1 / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity factor based on the number of dimensions with zero weight
    sparsity_factor = np.exp(-((weight == 0).mean(axis=1)))
    
    # Calculate the variance of the weights for each item
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Adjust heuristics based on the normalized prize, inverse total weight, sparsity factor, and weight variance
    heuristics = normalized_prize * inverse_total_weight * sparsity_factor * (1 / (1 + weight_variance))
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
