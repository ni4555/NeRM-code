```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the sum of weights for each dimension
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a normalized weight that reflects how 'sparsely' the item's weight is spread across dimensions
    normalized_weight = np.max(weight, axis=1) / weight_sum
    
    # Calculate the normalized prize
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the heuristic based on a combination of normalized prize and sparsity of weight
    heuristics = (normalized_prize + normalized_weight) / 2
    
    # Use a dynamic threshold based on the minimum heuristic value plus a small margin
    threshold = np.min(heuristics) + 0.1
    
    # Set unpromising elements to zero based on the threshold
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
