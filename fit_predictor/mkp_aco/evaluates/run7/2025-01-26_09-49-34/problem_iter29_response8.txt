```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Integrate domain knowledge by considering the ratio of prize to weight
    prize_to_weight_ratio = normalized_prize / weight
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the variance factor
    variance_factor = np.mean(weight ** 2, axis=1) - np.mean(weight, axis=1) ** 2
    
    # Calculate the initial heuristics based on the weighted combination of factors
    heuristics = prize_to_weight_ratio * sparsity_factor * (1 / (1 + variance_factor))
    
    # Apply an adaptive threshold to balance exploration and exploitation
    threshold = np.percentile(heuristics, 60)  # 60% threshold
    heuristics[heuristics > threshold] *= 1.2
    
    # Normalize heuristics by scaling them to a [0, 1] range
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.15)  # Zero out 15% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
