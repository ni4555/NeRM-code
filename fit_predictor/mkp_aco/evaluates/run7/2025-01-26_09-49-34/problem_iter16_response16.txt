```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to the sum of weights for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor, penalizing items with high sparsity
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    sparsity_factor[sparsity_factor <= 0.5] = 0  # Set to zero if more than half the weights are zero
    
    # Combine the ratio and sparsity factor, giving more weight to items with lower sparsity
    heuristics = ratio * sparsity_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold to sparsify the heuristics, setting elements below a threshold to zero
    sparsity_threshold = np.mean(ratio) * (1 - np.mean(sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
