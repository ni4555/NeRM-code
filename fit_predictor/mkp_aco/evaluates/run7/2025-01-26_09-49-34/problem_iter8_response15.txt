```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Assume complexity factor is based on item size and the number of unique features
    # This is a placeholder for a domain-specific complexity function
    complexity_factor = np.log1p(np.sum(weight, axis=1))  # Logarithmic complexity factor
    
    # Incorporate item rarity by dividing the sum of weights by the sum of the rarest item's weights
    rarity_factor = np.sum(weight, axis=1) / np.min(np.sum(weight, axis=1))
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Use the combination of the ratio, complexity factor, rarity factor, and sparsity factor to determine heuristics
    heuristics = ratio * complexity_factor * rarity_factor * (1 - sparsity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic threshold, setting elements below the threshold to zero
    dynamic_threshold = (np.mean(heuristics) / 2)  # Using mean heuristic as a simple dynamic threshold
    heuristics[heuristics < dynamic_threshold] = 0
    
    # Apply a sigmoid transformation to smoothly map heuristics to a range [0, 1]
    heuristics = 1 / (1 + np.exp(-heuristics))
    
    return heuristics
```
