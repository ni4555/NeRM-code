```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor for each item
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    
    # Calculate the combined heuristics using the ratio and sparsity factor
    heuristics = ratio * sparsity_factor
    
    # Normalize the heuristics using the mean prize ratio and the weighted mean of sparsity factors
    mean_prize_ratio = np.mean(ratio)
    weighted_sparsity_mean = np.mean(sparsity_factor * ratio)
    normalized_heuristics = (heuristics - mean_prize_ratio) / weighted_sparsity_mean
    
    # Apply a dynamic sparsification threshold that considers both the ratio and sparsity
    # and sets elements below the threshold to zero
    sparsity_threshold = np.mean(normalized_heuristics) * (1 - np.mean(sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
