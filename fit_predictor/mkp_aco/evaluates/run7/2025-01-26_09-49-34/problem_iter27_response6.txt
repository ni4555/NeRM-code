```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate a domain-specific relevance factor by considering the number of unique weight combinations
    domain_relevance_factor = np.sum(np.apply_along_axis(lambda x: len(set(x)), axis=1, arr=weight))
    
    # Calculate a diversity factor based on the inverse of the average distance from the centroid
    centroid = np.mean(weight, axis=0)
    diversity_factor = 1. / np.mean(np.linalg.norm(weight - centroid, axis=1))
    
    # Calculate the initial heuristics based on the product of normalized prize and the factors
    heuristics = normalized_prize * domain_relevance_factor * diversity_factor
    
    # Adjust heuristics based on a weighted combination of factors
    # Increase heuristics for items with higher domain relevance and diversity
    heuristics *= (domain_relevance_factor + diversity_factor)
    
    # Integrate diversity by setting a fraction of the heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
