```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Incorporate sparsity as a factor by penalizing items with more than half of their weights being zero
    sparsity_factor = 1 - (np.sum(weight == 0, axis=1) / weight.shape[1])
    sparsity_factor[sparsity_factor <= 0.5] = 1  # Only penalize if more than half the weights are zero
    
    # Balance relevance by combining the ratio and sparsity factor
    relevance_factor = ratio * sparsity_factor
    
    # Normalize relevance by dividing by the maximum relevance value
    max_relevance = np.max(relevance_factor)
    if max_relevance > 0:
        relevance_factor /= max_relevance
    
    # Leverage diversity by including a random component to encourage exploration
    diversity_factor = np.random.rand(len(relevance_factor))
    
    # Combine factors to form heuristics
    heuristics = relevance_factor * diversity_factor
    
    # Apply a dynamic threshold to sparsify the heuristics, setting elements below a threshold to zero
    sparsity_threshold = np.mean(relevance_factor) * (1 - np.mean(sparsity_factor))
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
