```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the variance factor
    variance_factor = (np.var(weight, axis=1) + 1e-8) ** (-0.5)
    
    # Calculate the initial heuristics based on the product of normalized prize and factors
    heuristics = normalized_prize * sparsity_factor * variance_factor
    
    # Apply dynamic sparsity adjustment by reducing heuristics of less sparse items
    sparsity_adjustment = 1 / (1 + np.exp(-sparsity_factor))
    heuristics *= sparsity_adjustment
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    return heuristics
```
