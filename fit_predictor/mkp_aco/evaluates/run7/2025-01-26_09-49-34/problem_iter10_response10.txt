```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight per item
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    inverse_average_weight = 1 / average_normalized_weight
    
    # Calculate the sparsity factor based on the number of zero weights
    sparsity_factor = np.sum(weight == 0, axis=1) / weight.shape[1]
    
    # Calculate the initial heuristics based on the product of normalized prize and inverse average weight
    heuristics = normalized_prize * inverse_average_weight
    
    # Balance the sparsity factor by penalizing low sparsity items
    balance_factor = 1 - sparsity_factor
    heuristics *= balance_factor
    
    # Normalize heuristics to ensure the sum is 1
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Calculate a dynamic sparsification threshold based on both the average normalized weight
    # and the adjusted sparsity factor
    sparsity_threshold = np.mean(average_normalized_weight * balance_factor)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
