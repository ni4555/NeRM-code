```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to get the ratio of prize to total weight per item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor as the number of non-zero weights
    sparsity_factor = np.sum(weight > 0, axis=1) / weight.shape[1]
    
    # Calculate the sparsity penalty, favoring items with higher sparsity
    sparsity_penalty = (1 - sparsity_factor) / np.mean(1 - sparsity_factor)
    
    # Calculate the average sparsity across all items
    average_sparsity = np.mean(sparsity_factor)
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Incorporate variance considerations by penalizing items with high weight variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_penalty = 1 / (1 + weight_variance)
    
    # Combine the factors into a heuristic score
    heuristics = normalized_prize * sparsity_penalty * variance_penalty
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Sparsify heuristics by setting a lower threshold, which is dynamic based on the average minimum weight
    sparsity_threshold = np.mean(min_average_weight) * (1 - average_sparsity)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
