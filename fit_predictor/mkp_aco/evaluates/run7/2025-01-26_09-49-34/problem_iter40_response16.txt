```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    
    # Normalize prize to avoid dominance by high prizes
    normalized_prize = prize / np.max(prize)
    
    # Calculate balance factor considering sparsity and variance
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    balance_factor = sparsity_factor * inv_variance_factor
    
    # Introduce diversity with a random component
    diversity = np.random.normal(0, 0.02, size=normalized_prize.shape)
    diversity = np.maximum(diversity, 0)  # Ensure non-negative diversity
    balanced_prize = normalized_prize * balance_factor + diversity
    
    # Apply a penalty for items that exceed weight constraints
    penalty_factor = (weight.sum(axis=1) > 1).astype(float)
    penalty = penalty_factor * 0.1  # Penalty for exceeding weight constraint by 1 unit
    balanced_prize *= (1 - penalty)
    
    # Dynamically adjust thresholds for sparsity and amplification
    sparsity_threshold = np.percentile(balanced_prize, 30)  # 30% threshold for sparsity
    amplification_threshold = np.percentile(balanced_prize, 70)  # 70% threshold
    
    # Refine heuristics by amplifying those within the sparsity threshold and penalizing those above the amplification threshold
    heuristics = np.where(balanced_prize < sparsity_threshold, 0,
                          np.where(balanced_prize > amplification_threshold, 1.2 * balanced_prize,
                                   balanced_prize))
    
    # Iterate to refine heuristics
    for _ in range(5):  # Iterate 5 times to refine heuristics
        mid_threshold = np.percentile(heuristics, 50)  # Middle threshold
        refined_heuristics = np.where(heuristics < mid_threshold, 0.8 * heuristics,
                                      np.where(heuristics > mid_threshold, 1.2 * heuristics, heuristics))
        heuristics = np.maximum(heuristics, refined_heuristics)
    
    # Normalize heuristics to ensure they sum to 1
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
