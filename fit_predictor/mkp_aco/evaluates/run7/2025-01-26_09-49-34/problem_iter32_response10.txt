```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = 1 / np.mean(weight ** 2, axis=1)
    
    # Combine factors using a weighted approach, prioritizing normalized prize and sparsity
    combined_factor = normalized_prize * 0.7 * sparsity_factor * inv_variance_factor * 0.5
    
    # Introduce noise for diversity
    noise_factor = np.random.rand(*combined_factor.shape) * 0.05
    
    # Adjust heuristics based on a weighted combination of factors and noise
    heuristics = combined_factor + noise_factor
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply adaptive thresholds for exploration
    threshold = np.percentile(heuristics, 50)  # 50% threshold for exploration
    heuristics[heuristics > threshold] *= 1.2
    
    # Iteratively refine heuristics to ensure robustness
    for _ in range(2):  # Iteratively refine heuristics
        heuristics[heuristics < threshold] *= 0.9  # Reduce lower heuristics
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.05)  # Zero out 5% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
