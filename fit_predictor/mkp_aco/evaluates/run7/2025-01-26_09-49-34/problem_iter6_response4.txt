```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the normalized sparsity score, where a higher score indicates a less sparsified item
    sparsity_score = 1 / (np.sum(weight == 0, axis=1) + 1)
    
    # Normalize the sparsity score by the maximum possible sparsity score
    normalized_sparsity = sparsity_score / np.max(sparsity_score)
    
    # Calculate the minimum average weight across dimensions for each item
    min_average_weight = np.min(weight, axis=1)
    
    # Combine ratio and normalized sparsity score using a weighted average
    combined_score = 0.6 * ratio + 0.4 * normalized_sparsity
    
    # Incorporate dynamic thresholds based on domain-specific ratios
    dynamic_threshold = np.mean(combined_score) * np.mean(min_average_weight)
    
    # Create heuristics by multiplying the combined score by minimum average weight
    heuristics = combined_score * min_average_weight
    
    # Normalize heuristics to balance the multi-faceted factors
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Apply a dynamic sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = dynamic_threshold / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Incorporate a balance factor that emphasizes higher prize ratios
    balance_factor = np.mean(prize) / np.sum(heuristics)
    heuristics *= balance_factor
    
    # Refine heuristics to ensure the balance between sparsity and prize value
    refined_heuristics = heuristics / np.max(heuristics)
    
    return refined_heuristics
```
