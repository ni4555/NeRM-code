```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Factor to account for variability in weights by standard deviation
    std_factor = np.std(weight, axis=1)
    
    # Promote items with lower variability
    variability_factor = 1 / (std_factor + 1e-5)
    
    # Promote items with a higher ratio of prize to average weight in dimensions
    average_weight = np.mean(weight, axis=1)
    ratio_factor = normalized_prize / average_weight
    
    # Promote items with a high prize-to-weight ratio and lower variability
    combined_factor = ratio_factor * variability_factor
    
    # Introduce sparsity by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(combined_factor) * 0.1)
    combined_factor[np.argsort(combined_factor)[:num_to_zero]] = 0
    
    # Introduce exploration-exploitation by iterative balancing
    heuristics = combined_factor
    for _ in range(3):
        weighted_sum = heuristics * (combined_factor / heuristics)
        heuristics = weighted_sum / np.sum(weighted_sum)
    
    # Promote items that are not too heavily weighted in any dimension
    max_weight_factor = 1 / (np.max(weight, axis=1) + 1e-5)
    heuristics *= max_weight_factor
    
    # Normalize heuristics to ensure all factors contribute equally
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    return heuristics
```
