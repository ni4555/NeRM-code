```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight per item
    ratio = prize / np.sum(weight, axis=1)
    
    # Normalize the weight to account for all dimensions
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate the weighted prize for each item
    weighted_prize = np.sum(prize[:, np.newaxis] * normalized_weight, axis=1)
    
    # Create heuristics by combining the ratio with the weighted prize
    heuristics = ratio * weighted_prize
    
    # Apply a sparsification threshold, setting elements below the threshold to zero
    sparsity_threshold = np.max(heuristics) / 2
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
