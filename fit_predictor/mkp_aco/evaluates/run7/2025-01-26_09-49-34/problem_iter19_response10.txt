```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the inverse of the average normalized weight for each item
    # Adding a small value to avoid division by zero
    inverse_average_weight = 1 / (average_normalized_weight + 1e-8)
    
    # Calculate diversity score by considering the sum of normalized weights across dimensions
    diversity_score = np.sum(weight, axis=1)
    
    # Calculate a factor to encourage diversity, high diversity gets higher factor
    diversity_factor = (1 - diversity_score / np.max(diversity_score))
    
    # Combine factors: normalized prize, inverse average weight, and diversity factor
    initial_heuristics = normalized_prize * inverse_average_weight * diversity_factor
    
    # Adjust heuristics based on the variance of the weights, rewarding items with low variance
    weight_variance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    variance_adjustment = 1 / (1 + weight_variance)
    
    # Normalize variance adjustment by the maximum variance adjustment value
    max_variance_adjustment = np.max(variance_adjustment)
    if max_variance_adjustment > 0:
        variance_adjustment /= max_variance_adjustment
    
    # Combine all factors to create the heuristics
    heuristics = initial_heuristics * variance_adjustment
    
    # Apply sparsification by setting a threshold, only keeping items with heuristics above this threshold
    sparsity_threshold = np.mean(heuristics)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
