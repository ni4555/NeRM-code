```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the utility factor as a ratio of normalized prize to sum of weights in each dimension
    utility_factor = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors into heuristics using a weighted sum
    heuristics = 0.6 * sparsity_factor + 0.2 * utility_factor + 0.2 * inv_variance_factor
    
    # Apply domain-specific knowledge: increase heuristics for items with a higher utility factor
    domain_specific_factor = np.maximum(0, utility_factor - 0.5)
    heuristics *= (1 + domain_specific_factor)
    
    # Dynamically adjust thresholds based on distribution statistics
    dynamic_threshold = np.percentile(heuristics, 90)  # 90% threshold
    heuristics[heuristics > dynamic_threshold] *= 1.5
    
    # Refine heuristics further by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
