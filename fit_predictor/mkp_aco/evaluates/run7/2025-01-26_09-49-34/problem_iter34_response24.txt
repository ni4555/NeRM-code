```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Combine factors using a weighted approach, giving more weight to normalized prize
    combined_factor = normalized_prize * 0.7 * sparsity_factor * inv_variance_factor * 0.5
    
    # Introduce random noise to promote diversity
    noise_factor = np.random.rand(*combined_factor.shape) * 0.05
    
    # Adjust heuristics based on the weighted combination of factors and noise
    heuristics = combined_factor + noise_factor
    
    # Dynamically adjust thresholds based on the current distribution of heuristics
    median_heuristics = np.median(heuristics)
    lower_threshold = np.percentile(heuristics, 25)  # 25% threshold for exploration
    upper_threshold = np.percentile(heuristics, 75)  # 75% threshold for exploitation
    
    # Apply adaptive thresholding to encourage exploration
    heuristics[(heuristics < lower_threshold) | (sparsity_factor < 0.5)] *= 1.2
    
    # Apply adaptive thresholding to encourage exploitation
    heuristics[(heuristics > upper_threshold) & (sparsity_factor > 0.5)] *= 0.8
    
    # Refine heuristics iteratively to ensure robustness
    for _ in range(2):  # Iteratively refine heuristics
        heuristics[heuristics < lower_threshold] *= 0.9  # Reduce lower heuristics
        heuristics[heuristics > upper_threshold] *= 1.1  # Increase higher heuristics
    
    # Incorporate domain knowledge: favor items with higher diversity and lower variance
    diversity_factor = np.exp(-np.sum(weight ** 2, axis=1))
    heuristics *= diversity_factor
    
    # Normalize heuristics by dividing by the sum of heuristics to avoid division by zero
    heuristic_sum = np.sum(heuristics)
    if heuristic_sum > 0:
        heuristics /= heuristic_sum
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.05)  # Zero out 5% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
