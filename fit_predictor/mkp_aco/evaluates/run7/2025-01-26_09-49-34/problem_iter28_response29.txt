```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average normalized weight for each item across all dimensions
    average_normalized_weight = np.mean(weight, axis=1)
    
    # Calculate the diversity factor based on the standard deviation of weights
    diversity_factor = np.std(weight, axis=1)
    
    # Combine normalized prize with inverse of average normalized weight to favor items with lighter average weight
    initial_heuristics = normalized_prize * (1 / (average_normalized_weight + 1e-8))
    
    # Adjust heuristics based on diversity, rewarding items with high diversity
    adjusted_diversity = 1 + np.exp(-diversity_factor)
    
    # Normalize heuristics by dividing by the maximum heuristic value to avoid dominated items
    max_heuristic = np.max(initial_heuristics * adjusted_diversity)
    heuristics = initial_heuristics * adjusted_diversity / max_heuristic
    
    # Refine heuristics by incorporating a weighted factor that balances the normalized prize
    weighted_factor = normalized_prize + 2 * diversity_factor
    heuristics *= weighted_factor / (np.sum(weighted_factor) + 1e-8)
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
