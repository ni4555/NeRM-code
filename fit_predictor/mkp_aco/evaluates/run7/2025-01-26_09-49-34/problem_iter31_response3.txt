```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing each prize value by the sum of all prizes
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the sparsity factor based on the number of non-zero weight dimensions
    sparsity_factor = (weight.sum(axis=1) > 0).astype(float)
    
    # Calculate the inverse variance factor
    inv_variance_factor = np.mean(weight, axis=1) / np.mean(weight ** 2, axis=1)
    
    # Calculate the initial heuristics based on the product of normalized prize and sparsity factor
    heuristics = normalized_prize * sparsity_factor * inv_variance_factor
    
    # Adjust heuristics based on a weighted combination of sparsity and variance factors
    # Increase heuristics for sparser items and items with lower variance
    combined_factor = sparsity_factor + inv_variance_factor
    adjusted_heuristics = heuristics * combined_factor
    
    # Introduce diversity by considering the overall distribution of the adjusted heuristics
    diversity_factor = np.exp(-np.sum(adjusted_heuristics ** 2, axis=1))
    heuristics *= diversity_factor
    
    # Balance exploration and exploitation by applying a dynamic threshold
    threshold = np.percentile(adjusted_heuristics, 75)  # 75% threshold
    heuristics[adjusted_heuristics < threshold] *= 0.5
    
    # Refine heuristics iteratively by focusing on variance control
    variance_control = np.mean(adjusted_heuristics ** 2)
    heuristics *= (1 + variance_control)
    
    # Normalize heuristics by dividing by the maximum heuristic value
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Sparsify the heuristics by setting a fraction of the lowest heuristics to zero
    num_to_zero = int(len(heuristics) * 0.1)  # Zero out 10% of the lowest heuristics
    heuristics[np.argsort(heuristics)[:num_to_zero]] = 0
    
    return heuristics
```
