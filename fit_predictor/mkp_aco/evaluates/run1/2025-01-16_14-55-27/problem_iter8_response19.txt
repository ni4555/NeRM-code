```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate weighted ratio and average weight per dimension
    weighted_ratio = prize / weight.sum(axis=1)
    average_weight = weight.mean(axis=1)

    # Combine criteria for sorting items: weighted ratio and average weight
    combined_sorting_criterion = weighted_ratio / average_weight
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on the total prize
    total_prize = prize.sum()
    initial_heuristic = total_prize / n
    heuristics.fill(initial_heuristic)

    # Calculate sparsity scores
    sparsity_scores = (m - np.count_nonzero(weight, axis=1)) / m

    # Calculate a dynamic threshold based on the standard deviation of the sparsity scores
    sparsity_threshold = np.std(sparsity_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        current_sparsity_score = sparsity_scores[i]
        current_combined_score = combined_sorting_criterion[i]

        # Adjust the heuristic for the current item based on its combined score
        contribution = current_combined_score - average_weight[i]

        # Maintain sparsity by setting heuristic to zero if the contribution is negative
        if contribution < 0:
            heuristics[i] = 0
        else:
            # Update the heuristic for the current item
            heuristics[i] += contribution

            # Dynamically adjust the threshold based on the sparsity score
            if current_sparsity_score > sparsity_threshold:
                # If the item contributes positively to sparsity, increase its heuristic
                heuristics[i] *= 1.1
            else:
                # If the item does not contribute positively to sparsity, decrease its heuristic
                heuristics[i] *= 0.9

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
