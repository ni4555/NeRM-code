```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted ratio for each item
    weighted_ratio = (prize / weight.sum(axis=1))

    # Calculate the average weight per dimension for each item
    average_weight = weight.mean(axis=1)

    # Calculate sparsity score for each item
    sparsity_score = (np.count_nonzero(weight, axis=1) / m) ** 2

    # Calculate the item contribution for each item
    contribution = prize / weight.sum(axis=1)

    # Combine the criteria to get a sorting score
    sorting_score = weighted_ratio * (1 - average_weight) * sparsity_score * contribution
    sorted_indices = np.argsort(sorting_score)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Apply adaptive stochastic sampling by considering the top 10% of items
    adaptive_sample_size = int(n * 0.1)
    top_items = sorted_indices[:adaptive_sample_size]

    # Apply an exponential decay to enhance the importance of higher scoring items
    decay_factor = 0.95
    heuristics[top_items] = np.exp(sorting_score[top_items] * np.log(decay_factor))

    # Dynamically adjust the heuristics for the remaining items using a weighted average
    remaining_items = sorted_indices[adaptive_sample_size:]
    heuristics[remaining_items] = np.exp(np.mean(sorting_score[remaining_items]) * np.log(decay_factor))

    # Normalize the heuristics so that they sum to 1
    heuristics /= heuristics.sum()

    return heuristics
```
