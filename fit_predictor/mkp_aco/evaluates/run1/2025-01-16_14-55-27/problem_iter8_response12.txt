```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate weighted ratio and average weight per dimension
    weighted_ratio = prize / weight.sum(axis=1)
    average_weight = weight.mean(axis=1)

    # Combine criteria for sorting items: weighted ratio and average weight
    combined_sorting_criterion = weighted_ratio / average_weight
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on the total prize
    total_prize = prize.sum()
    heuristics.fill(total_prize / n)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        # Adjust the heuristic for the current item based on its weighted ratio and average weight
        contribution = weighted_ratio[i] - average_weight[i]
        heuristics[i] += contribution

    # Set heuristic to zero if the contribution is negative
    heuristics[heuristics < 0] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
