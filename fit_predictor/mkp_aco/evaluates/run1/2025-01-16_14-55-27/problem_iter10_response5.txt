```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate combined scores based on multiple criteria: inverse of weighted prize ratio, sparsity, and total weight
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity = np.count_nonzero(weight, axis=1)
    combined_scores = (-weighted_ratio - sparsity - weight.sum(axis=1))

    # Sort items based on combined scores
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        heuristic_value = weighted_ratio[i] / (sparsity[i] + weight[i, :].sum())

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # If the current heuristic value is above the threshold, assign it; otherwise, set to zero
        heuristics[i] = heuristic_value if heuristic_value >= threshold else 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
