```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate weighted ratio and average weight per dimension
    weighted_ratio = prize / weight.sum(axis=1)
    average_weight = weight.mean(axis=1)

    # Combine criteria for sorting items: weighted ratio and average weight
    combined_sorting_criterion = weighted_ratio / average_weight
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the sum of contributions to the heuristic
    sum_contributions = 0

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        # Calculate the contribution of the current item
        contribution = weighted_ratio[i] - average_weight[i]
        sum_contributions += contribution

        # Update the heuristic for the current item
        heuristics[i] = contribution

    # Normalize the heuristics so that they sum to the total prize
    heuristics /= sum_contributions

    return heuristics
```
