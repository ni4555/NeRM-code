```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to consider each item's dimensional impact
    normalized_prize = prize / n

    # Calculate the logarithmic sparsity scores
    sparsity_scores = np.log1p(np.count_nonzero(weight, axis=1))

    # Calculate the weighted ratio analysis
    weighted_ratio_scores = normalized_prize / weight.sum(axis=1)

    # Dynamic item sorting based on a composite score
    combined_scores = sparsity_scores + weighted_ratio_scores
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold using the 90th percentile of the combined scores
    threshold = np.percentile(combined_scores, 90)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        # Calculate the heuristic for the current item
        heuristic_value = combined_scores[i]

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        if heuristic_value < threshold * 0.1:
            heuristics[i] = 0
        else:
            heuristics[i] = 1

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
