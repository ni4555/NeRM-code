```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate combined scores based on multiple factors: inverse weighted prize ratio, sparsity, and total weight
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity = np.count_nonzero(weight, axis=1)
    total_weight = weight.sum(axis=1)
    combined_scores = -1 * (weighted_ratio / sparsity - total_weight)

    # Sort items based on combined scores
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = combined_scores[0]

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        current_score = combined_scores[i]

        # Update the threshold based on the maximum score encountered
        threshold = max(threshold, current_score)

        # Calculate the heuristic for the current item
        heuristic_value = weighted_ratio[i] / (sparsity[i] + total_weight[i])

        # Adjust the heuristic for the current item if it's above the threshold
        if heuristic_value > threshold:
            heuristics[i] = heuristic_value
        else:
            heuristics[i] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
