```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate weighted ratio and average weight per item
    weighted_ratio = (prize / weight.sum(axis=1)).ravel()
    average_weight = weight.mean(axis=1)

    # Combine the weighted ratio and average weight into a single sorting criterion
    combined_sorting_criterion = weighted_ratio / (1 + average_weight)

    # Sort items based on the combined criteria in descending order
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Assign the sorted weighted ratios to the heuristic values
    heuristics[sorted_indices] = combined_sorting_criterion[sorted_indices]

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Apply sparsity by reducing the value of the less promising elements
    threshold = np.max(heuristics) * 0.1
    heuristics[heuristics < threshold] = 0

    return heuristics
```
