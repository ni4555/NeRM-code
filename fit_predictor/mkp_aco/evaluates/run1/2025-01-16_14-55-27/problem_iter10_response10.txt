```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the sparsity of each item
    sparsity = np.count_nonzero(weight, axis=1)

    # Calculate the weighted ratio of each item
    weighted_ratio = prize / (weight.sum(axis=1) + sparsity)

    # Calculate the mean weight for each dimension
    mean_weight = weight.mean(axis=1)

    # Dynamic item sorting based on the weighted ratio, sparsity, and average weight
    combined_sorting_criterion = -weighted_ratio / (1 - mean_weight)
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        # Calculate the heuristic for the current item considering sparsity
        heuristics[i] = weighted_ratio[i] * (sparsity[i] / mean_weight[i])

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
