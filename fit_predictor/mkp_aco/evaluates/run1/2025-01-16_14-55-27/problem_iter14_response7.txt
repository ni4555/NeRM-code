```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate combined scores using inverse of weighted prize ratio, sparsity, and total weight
    weighted_prize_ratio = -prize / weight.sum(axis=1)
    sparsity = -np.count_nonzero(weight, axis=1)
    total_weight = -weight.sum(axis=1)
    combined_scores = weighted_prize_ratio + sparsity + total_weight
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        item_score = combined_scores[i]
        # Update the threshold based on the maximum score encountered
        threshold = max(threshold, item_score)

        # Set heuristic value for the current item
        heuristics[i] = 1 if item_score >= threshold else 0

    return heuristics
```
