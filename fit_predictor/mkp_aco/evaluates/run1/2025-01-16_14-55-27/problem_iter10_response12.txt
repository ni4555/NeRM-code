```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize by the maximum prize available
    normalized_prize = prize / np.max(prize)

    # Dynamic item sorting based on multiple criteria
    combined_scores = -np.log(normalized_prize / weight.sum(axis=1)) - np.count_nonzero(weight, axis=1) - weight.sum(axis=1)
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.min(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        item_combined_score = combined_scores[i]
        # Update the threshold if a new item has a lower combined score than the current threshold
        if item_combined_score < threshold:
            threshold = item_combined_score

        # Calculate the heuristic for the current item
        heuristic_value = np.exp(-item_combined_score)

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        if heuristic_value < threshold * 0.1:
            heuristics[i] = 0
        else:
            heuristics[i] = heuristic_value

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
