```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple criteria: weighted ratio, average weight per dimension, sparsity score, and item contribution
    def get_sparsity_score(item_idx):
        non_zero_weights = weight[item_idx, :].sum() > 0
        return (np.count_nonzero(non_zero_weights) / m) ** 2

    def get_contribution(item_idx):
        return prize[item_idx] / weight[item_idx, :].sum()

    combined_sorting_criterion = (-prize / weight.sum(axis=1)).ravel() * (1 - weight.mean(axis=1)) * get_sparsity_score(np.arange(n)) * get_contribution(np.arange(n))
    sorted_indices = np.argsort(combined_sorting_criterion)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on total prize
    total_prize = prize.sum()
    heuristics.fill(total_prize / n)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = prize[i] / weight[i, :].sum()
        average_weight = weight[i, :].mean()
        sparsity_score = get_sparsity_score(i)
        contribution = get_contribution(i)

        # Calculate the contribution of the current item to the heuristic
        item_contribution = weighted_ratio - average_weight + sparsity_score * contribution

        # Adjust the heuristic for the current item
        heuristics[i] = heuristics[i] + item_contribution

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Dynamically adjust thresholds and sparsify the heuristics
    dynamic_threshold = heuristics / (1 + np.exp(-np.arange(n) / 1000))
    heuristics[heuristics < dynamic_threshold] = 0

    return heuristics
```
