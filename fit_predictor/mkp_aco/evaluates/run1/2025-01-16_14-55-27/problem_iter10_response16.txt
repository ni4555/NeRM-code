```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted ratio for each item
    weighted_ratio = (prize / weight.sum(axis=1))

    # Calculate the average weight per dimension for each item
    average_weight = weight.mean(axis=1)

    # Calculate the sparsity score for each item
    sparsity_score = (np.count_nonzero(weight, axis=1) / m) ** 2

    # Calculate the item contribution for each item
    contribution = prize / weight.sum(axis=1)

    # Combine the criteria to get a sorting score
    sorting_score = weighted_ratio * (1 - average_weight) * sparsity_score * contribution

    # Dynamically adjust the heuristics based on an exponential decay function
    dynamic_threshold = np.exp(-np.arange(n) / 1000)
    heuristics = sorting_score / (1 + dynamic_threshold)

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
