```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize array
    normalized_prize = prize / prize.sum()

    # Normalize the weight array
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)

    # Calculate combined scores considering normalized prize, sparsity, and logarithmic sparsity
    combined_scores = -np.log((normalized_prize / normalized_weight).sum(axis=1) +
                              np.count_nonzero(normalized_weight, axis=1))

    # Dynamically adjust sorting and thresholds based on combined scores
    sorted_indices = np.argsort(combined_scores)[::-1]
    heuristics = np.zeros(n)

    # Adaptive stochastic sampling with logarithmic sparsity focus
    for i in sorted_indices:
        heuristic_value = -np.log(normalized_prize[i] / normalized_weight[i, :].sum())

        # Update heuristics values
        heuristics[i] = heuristic_value

    # Sparsify the heuristics by setting them to zero if the value is below a certain threshold
    threshold = np.percentile(heuristics, 95)
    heuristics[heuristics < threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= heuristics.sum()

    return heuristics
```
