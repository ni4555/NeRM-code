```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight
    prize_normalized = prize / np.max(prize)
    weight_normalized = weight / np.max(weight.sum(axis=1))[:, np.newaxis]

    # Calculate sparsity as the count of non-zero elements in each item
    sparsity = np.count_nonzero(weight_normalized, axis=1)

    # Calculate weighted ratio as the normalized prize divided by the sum of normalized weights
    weighted_ratio = prize_normalized / weight_normalized.sum(axis=1)

    # Combine the sparsity and weighted ratio into a single score
    combined_scores = weighted_ratio / (sparsity + 1)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Use logarithmic sparsity to sample adaptively
    adaptive_sampling = np.log(sparsity + 1)

    # Iterate over the items and adjust heuristic values based on combined scores and adaptive sampling
    for i in range(n):
        heuristics[i] = combined_scores[i] * adaptive_sampling[i]

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
