```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate the mean weight for each dimension
    mean_weight = weight.mean(axis=1)

    # Compute the weighted ratios and sort items based on these ratios
    weighted_ratios = prize / weight.sum(axis=1)
    for i in range(weight.shape[1]):
        weighted_ratios += (1 - mean_weight) * prize / weight[:, i].sum()
    sorted_indices = np.argsort(-weighted_ratios)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate an initial heuristic value based on total prize
    total_prize = prize.sum()
    heuristics.fill(total_prize / n)

    # Adjust the heuristic values based on sorted weighted ratios
    contribution = weighted_ratios[sorted_indices] - mean_weight[sorted_indices]
    heuristics[sorted_indices] += contribution

    # Sparsify the heuristics by setting non-positive values to zero
    heuristics[heuristics <= 0] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
