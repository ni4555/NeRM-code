```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize and weight
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    normalized_weight = (weight - np.min(weight, axis=0)) / (np.max(weight, axis=0) - np.min(weight, axis=0))

    # Create a sparsity measure based on the logarithmic ratio of normalized prize to normalized weight
    sparsity = -np.log(normalized_prize / normalized_weight.sum(axis=1))

    # Combine multiple criteria for sorting: sparsity, weighted ratio, and normalized prize
    combined_scores = sparsity + (normalized_prize / weight.sum(axis=1)) * 2 + normalized_prize * 0.5
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        heuristic_value = combined_scores[i]

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[i] = 1 if heuristic_value >= threshold * 0.1 else 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
