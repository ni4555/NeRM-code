```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Define a scoring function to calculate item importance
    def item_score(item_idx):
        # Weighted ratio based on prize
        weighted_ratio = prize[item_idx] / weight[item_idx, :].sum()
        
        # Sparsity score based on non-zero weight dimensions
        sparsity_score = np.count_nonzero(weight[item_idx, :] > 0) / m
        
        # Combine scores with a logarithmic adjustment to avoid dominance of high dimension counts
        return weighted_ratio + sparsity_score * np.log(np.sum(weight[item_idx, :] > 0))

    # Initialize heuristic values array
    heuristics = np.zeros(n)

    # Sample items stochastically for multiple iterations
    iterations = 5
    for _ in range(iterations):
        # Perform adaptive stochastic sampling
        item_scores = np.array([item_score(i) for i in range(n)])
        sorted_indices = np.argsort(-item_scores)
        
        # Dynamic item sorting
        for i in sorted_indices:
            if np.any(heuristics[:i] > 1 - np.sum(weight[i, :])):
                break

            # Update heuristic value for current item
            heuristics[i] += item_scores[i]

    # Sparsify heuristics by reducing low-scoring items to zero
    sparsity_threshold = np.mean(heuristics)
    heuristics[heuristics < sparsity_threshold] = 0

    # Normalize the heuristics
    heuristics /= np.sum(heuristics)

    return heuristics
```
