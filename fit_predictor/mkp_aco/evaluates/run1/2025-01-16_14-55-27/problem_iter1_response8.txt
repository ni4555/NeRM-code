```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple factors: inverse of weighted prize ratio and sparsity of weight
    sorted_indices = np.argsort(-prize / weight.sum(axis=1) - np.count_nonzero(weight, axis=1))

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        # Calculate the weighted ratio for the current item
        weighted_ratio = prize[i] / weight[i, :].sum()
        
        # Calculate the sparsity of the current item's weight
        sparsity = np.count_nonzero(weight[i, :])
        
        # Calculate the heuristic for the current item based on the weighted ratio and sparsity
        heuristics[i] = weighted_ratio / sparsity

    # Apply a threshold to sparsify the heuristics, setting unpromising elements to zero
    threshold = np.mean(heuristics)
    heuristics[heuristics < threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
