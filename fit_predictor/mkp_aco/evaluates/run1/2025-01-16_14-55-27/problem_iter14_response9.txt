```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multi-criteria
    combined_scores = (
        -prize / weight.sum(axis=1)  # Inverse of weighted prize ratio
        -np.count_nonzero(weight, axis=1)  # Sparsity
        -weight.sum(axis=1)  # Total weight
    )
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the adaptive threshold
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = prize[i] / weight[i, :].sum()
        sparsity = np.count_nonzero(weight[i, :])
        total_weight = weight[i, :].sum()

        # Calculate the heuristic for the current item
        heuristic_value = weighted_ratio / (sparsity + total_weight)

        # Incrementally update the threshold based on the heuristic value
        threshold = np.maximum(threshold, heuristic_value)

        # Adjust the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[heuristics < threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Further refine the heuristics by considering a balanced sparsity metric
    sparsity_sum = np.sum(heuristics)
    sparsity_threshold = np.sqrt(sparsity_sum * (n / sparsity_sum))
    heuristics[heuristics < sparsity_threshold] = 0

    return heuristics
```
