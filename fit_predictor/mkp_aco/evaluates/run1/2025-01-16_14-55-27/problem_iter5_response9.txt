```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on weighted prize ratio and sparsity
    combined_scores = (-prize / weight.sum(axis=1) - np.count_nonzero(weight, axis=1))
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the logarithmic sparsity factor
    log_sparsity_factor = np.logspace(-1, 1, n)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = prize[i] / weight[i, :].sum()
        sparsity = np.count_nonzero(weight[i, :])

        # Calculate the heuristic for the current item
        heuristic_value = weighted_ratio / (sparsity + weight[i, :].sum())

        # Apply logarithmic sparsity to encourage sparser solutions
        heuristic_value *= log_sparsity_factor[i]

        # Update the heuristic for the current item
        heuristics[i] = heuristic_value

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
