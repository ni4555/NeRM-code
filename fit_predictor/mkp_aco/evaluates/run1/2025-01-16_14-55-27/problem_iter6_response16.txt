```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on the multi-dimensional weighted ratio analysis
    combined_scores = np.empty(n)
    for i in range(n):
        ratio_sum = 0
        for j in range(m):
            ratio_sum += prize[i] / (weight[i, j] + 1e-5)  # Avoid division by zero
        combined_scores[i] = ratio_sum

    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate initial heuristic values based on the multi-dimensional weighted ratio analysis
    for i in sorted_indices:
        heuristics[i] = combined_scores[i]

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Sparsify the heuristics by setting non-positive values to zero
    heuristics[heuristics <= 0] = 0

    return heuristics
```
