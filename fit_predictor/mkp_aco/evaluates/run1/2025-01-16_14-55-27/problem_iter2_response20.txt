```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Dynamic item sorting based on weighted prize ratio and sparsity of weight
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity = np.count_nonzero(weight, axis=1)
    sorted_indices = np.argsort(-weighted_ratio / sparsity)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        # Calculate the sparsity of the current item's weight
        current_sparsity = np.count_nonzero(weight[i, :])
        
        # Calculate the heuristic for the current item based on the weighted ratio and sparsity
        heuristics[i] = weighted_ratio[i] / current_sparsity

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
