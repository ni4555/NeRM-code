```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to the range [0, 1]
    normalized_prize = (prize - prize.min()) / (prize.max() - prize.min())

    # Dynamic item sorting based on normalized prize, sparsity, and logarithmic weight
    combined_scores = (normalized_prize - np.log(np.sum(weight, axis=1)) - np.count_nonzero(weight, axis=1))
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = normalized_prize[i] / np.log(weight[i, :].sum())
        sparsity = np.count_nonzero(weight[i, :])
        total_weight = np.log(weight[i, :].sum())

        # Calculate the heuristic for the current item
        heuristic_value = weighted_ratio / (sparsity + total_weight)

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Adjust the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[heuristics < threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
