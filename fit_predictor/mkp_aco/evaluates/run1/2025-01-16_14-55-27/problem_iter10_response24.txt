```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to reduce scale difference
    prize_normalized = prize / prize.max()

    # Normalize the weight to reduce scale difference
    weight_normalized = weight / weight.max()

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic sorting criteria
    sorting_criteria = prize_normalized / weight_normalized.sum(axis=1)

    # Perform dynamic sorting based on the sorting criteria
    sorted_indices = np.argsort(sorting_criteria)[::-1]

    # Iterate over the sorted items
    for i in sorted_indices:
        # Calculate the sparsity and total normalized weight for the current item
        sparsity = np.count_nonzero(weight_normalized[i, :])
        total_weight = weight_normalized[i, :].sum()

        # Calculate the heuristic for the current item
        heuristic_value = prize_normalized[i] / (sparsity + total_weight)

        # Update the heuristic values array
        heuristics[i] = heuristic_value

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
