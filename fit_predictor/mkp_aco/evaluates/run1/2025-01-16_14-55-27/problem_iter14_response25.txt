```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted ratio and sparsity for each item
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity = np.count_nonzero(weight, axis=1)
    total_weight = weight.sum(axis=1)

    # Dynamic threshold for heuristic values
    threshold = np.percentile((weighted_ratio / (sparsity + 1e-8) - total_weight), 75)

    # Initialize heuristic values array
    heuristics = np.zeros(n)

    # Iterate over items and calculate heuristics
    for i in range(n):
        current_weight = weight[i, :].sum()
        if current_weight > 0:  # Only consider items with positive weight
            current_heuristic = weighted_ratio[i] / (sparsity[i] + current_weight + 1e-8)
            heuristics[i] = current_heuristic if current_heuristic > threshold else 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
