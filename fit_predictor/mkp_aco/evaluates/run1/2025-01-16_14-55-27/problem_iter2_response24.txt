```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on a multi-factor heuristic
    # We use a weighted ratio and a sparsity measure that accounts for the multi-dimensional weights
    sorted_indices = np.argsort(
        -prize / weight.sum(axis=1) - np.sum(1 / weight, axis=1)
    )

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Track the maximum weight constraint
    max_weight = weight.sum(axis=1).max()

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        if weight[i, :].sum() <= max_weight:
            # Calculate the weighted ratio for the current item
            weighted_ratio = prize[i] / weight[i, :].sum()
            
            # Calculate the sum of current and previous heuristics
            current_sum = np.sum(heuristics[:i+1])
            
            # Calculate a sparsity measure for the current item
            sparsity = np.sum(1 / weight[:i+1, :].sum(axis=1))
            
            # Calculate the heuristic for the current item based on the weighted ratio, previous sum, and sparsity
            heuristics[i] = weighted_ratio + current_sum + sparsity

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
