```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate the weighted ratio for each item
    weighted_ratio = prize / (weight.sum(axis=1) + 1e-6)  # Adding a small value to avoid division by zero

    # Calculate the sparsity for each item
    sparsity = 1 - (np.count_nonzero(weight, axis=1) / n)

    # Calculate the heuristic values based on weighted ratio and sparsity
    heuristics = weighted_ratio * sparsity

    # Since we are focusing on relevance and avoiding normalization, return the heuristics as is
    return heuristics
```
