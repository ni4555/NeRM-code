```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight to handle different scales
    normalized_prize = (prize - prize.min()) / (prize.max() - prize.min())
    normalized_weight = (weight - weight.min()) / (weight.max() - weight.min())

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Sample adaptively with stochastic elements
    log_sparsity = -np.log(1 - np.count_nonzero(normalized_weight, axis=1) / m)
    sorted_indices = np.argsort(log_sparsity)[::-1]

    # Initialize the dynamic threshold based on logarithmic sparsity
    threshold = np.median(log_sparsity)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = normalized_prize[i] / normalized_weight[i, :].sum()
        sparsity = np.count_nonzero(normalized_weight[i, :])
        total_weight = normalized_weight[i, :].sum()

        # Calculate the heuristic for the current item
        heuristic_value = weighted_ratio / (sparsity + total_weight)

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Adjust the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        heuristics[heuristics < threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
