```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Function to calculate the sparsity score for a given item
    def sparsity_score(item_idx):
        return np.count_nonzero(weight[item_idx, :] > 0) / m

    # Function to calculate the combination score for a given item
    def combination_score(item_idx):
        weighted_ratio = prize[item_idx] / weight[item_idx, :].sum()
        sparsity = sparsity_score(item_idx)
        return weighted_ratio + sparsity

    # Dynamic item sorting based on the combination score
    sorted_indices = np.argsort(-np.array([combination_score(i) for i in range(n)]))

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the accumulated sparsity scores
    accumulated_sparsity_scores = np.zeros(n)

    # Iterate over the sorted items and assign heuristic values
    for i in sorted_indices:
        weighted_ratio = prize[i] / weight[i, :].sum()
        sparsity = sparsity_score(i)
        # Adjust the heuristic value considering the sparsity of previous items
        heuristics[i] = weighted_ratio + accumulated_sparsity_scores[i]
        accumulated_sparsity_scores[i+1:] += sparsity

    # Sparsify the heuristics by setting values below a threshold to zero
    threshold = np.max(heuristics) / 2  # Example threshold
    heuristics[heuristics < threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
