```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Define a function to calculate the heuristic for an item
    def calculate_heuristic(item_index):
        weighted_ratio = prize[item_index] / weight[item_index, :].sum()
        sparsity = np.count_nonzero(weight[item_index, :])
        total_weight = weight[item_index, :].sum()
        return weighted_ratio / (sparsity + total_weight)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = 0.0

    # Initialize an array to store the combined scores
    combined_scores = np.zeros(n)

    # Iterate over all items to evaluate them
    for i in range(n):
        heuristic_value = calculate_heuristic(i)
        combined_scores[i] = heuristic_value

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Calculate the normalized heuristic value
        normalized_heuristic = heuristic_value / threshold

        # Set the heuristic value for the current item
        heuristics[i] = normalized_heuristic

    # Sparsify the heuristics by setting them to zero if the contribution is below a certain threshold
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
