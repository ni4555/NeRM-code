```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the normalized weighted ratio and sparsity for each item
    normalized_weighted_ratio = prize / (weight.sum(axis=1) + 1e-6)  # Adding a small constant to avoid division by zero
    sparsity = np.count_nonzero(weight, axis=1) / m

    # Combine the scores using a weighted sum
    combined_scores = 0.5 * normalized_weighted_ratio + 0.5 * (1 - sparsity)

    # Stochastically sample a subset of the highest scoring items
    sampled_indices = np.argsort(combined_scores)[::-1][:int(n * 0.2)]  # Sampling 20% of the items

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Adjust the heuristic values for the sampled items
    heuristics[sampled_indices] = 1.0

    # Apply logarithmic sparsity to the heuristics
    heuristics = np.log(1 + heuristics)

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
