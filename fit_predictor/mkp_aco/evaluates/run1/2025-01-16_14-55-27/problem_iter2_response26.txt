```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on a combination of weighted prize ratio, sparsity, and dimensionality
    def get_combination_score(item_idx):
        weighted_ratio = prize[item_idx] / weight[item_idx, :].sum()
        sparsity_score = np.count_nonzero(weight[item_idx, :] > 0) / m
        dimensionality_score = np.count_nonzero(weight[item_idx, :] == 1) / m
        return weighted_ratio + sparsity_score + dimensionality_score

    sorted_indices = np.argsort(-np.array([get_combination_score(i) for i in range(n)]))

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Track the cumulative sum of heuristics to adjust the heuristic value
    cumulative_sum = 0

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        # Calculate the weighted ratio for the current item
        weighted_ratio = prize[i] / weight[i, :].sum()

        # Update the cumulative sum
        cumulative_sum += weighted_ratio

        # Calculate the heuristic value considering multiple factors
        # Factor 1: Inverse of weighted ratio (promising items have high ratio)
        # Factor 2: Negative cumulative sum (to avoid selecting items too early)
        # Factor 3: Sparsity score (to enhance sparsity consideration)
        # Factor 4: Dimensionality score (to consider the number of 1s in the weight vector)
        heuristic_value = (1 / weighted_ratio) - cumulative_sum - (np.count_nonzero(weight[i, :] > 0) / n)

        # Set the heuristic value for the current item
        heuristics[i] = heuristic_value

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Set the unpromising elements to zero
    heuristics[heuristics < np.max(heuristics) * 0.1] = 0

    return heuristics
```
