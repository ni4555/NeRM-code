```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on a combination of factors
    # Here, we use the weighted prize ratio, the sum of the inverse of individual weights,
    # and the variance of weights for each dimension
    weighted_ratio = prize / weight.sum(axis=1)
    inverse_weight_sum = 1 / weight.sum(axis=1)
    variance = np.var(weight, axis=1)
    combined_factor = weighted_ratio + inverse_weight_sum + 1 / variance
    sorted_indices = np.argsort(-combined_factor)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        heuristics[i] = weighted_ratio[i] + inverse_weight_sum[i] + 1 / variance[i]

    # Dynamic threshold for sparsity
    sparsity_threshold = np.percentile(heuristics, 95)  # 95th percentile as the threshold
    heuristics[heuristics < sparsity_threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
