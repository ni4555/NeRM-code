```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted prize ratio for each item
    weighted_prize_ratio = prize / (weight.sum(axis=1) + 1e-6)

    # Calculate the sparsity for each item
    sparsity = 1 - (np.count_nonzero(weight, axis=1) / n)

    # Combine the weighted prize ratio and sparsity to create a heuristic value for each item
    combined_scores = weighted_prize_ratio * sparsity

    # Use the dynamic threshold based on the interquartile range of the combined scores
    q1 = np.percentile(combined_scores, 25)
    q3 = np.percentile(combined_scores, 75)
    iqr = q3 - q1
    threshold = q3 - iqr * 1.5

    # Sort items based on the combined scores using the dynamic threshold
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize heuristic values
    heuristics = np.zeros(n)

    # Iterate over sorted items to adjust heuristic values
    for i in sorted_indices:
        current_score = combined_scores[i]

        # Update the heuristic for the current item
        if current_score > threshold:
            heuristics[i] = (current_score - threshold) / (np.max(combined_scores) - threshold)

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
