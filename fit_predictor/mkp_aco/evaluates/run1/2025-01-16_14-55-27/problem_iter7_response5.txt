```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight
    normalized_prize = prize / np.sum(prize)
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]

    # Calculate the logarithmic sparsity and weighted ratio
    log_sparsity = -np.log1p(np.count_nonzero(weight, axis=1))
    weighted_ratio = normalized_prize / normalized_weight.sum(axis=1)

    # Combine the normalized prize, log sparsity, and weighted ratio
    combined_scores = normalized_prize - log_sparsity + weighted_ratio

    # Sort items based on combined scores
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        heuristics[i] = combined_scores[i]

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
