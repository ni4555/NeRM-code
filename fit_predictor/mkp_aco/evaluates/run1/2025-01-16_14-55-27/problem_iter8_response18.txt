```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the weighted ratio for each item
    weighted_ratio = (prize / weight.sum(axis=1))

    # Calculate the average weight per dimension for each item
    average_weight = weight.mean(axis=1)

    # Calculate the sparsity score for each item
    def get_sparsity_score(item_idx):
        non_zero_weights = weight[item_idx, :].sum() > 0
        return (np.count_nonzero(non_zero_weights) / m) ** 2

    sparsity_score = np.array([get_sparsity_score(i) for i in range(n)])

    # Calculate the item contribution for each item
    def get_contribution(item_idx):
        return prize[item_idx] / weight[item_idx, :].sum()

    contribution = np.array([get_contribution(i) for i in range(n)])

    # Combine the criteria to get a sorting score
    sorting_score = weighted_ratio * (1 - average_weight) * sparsity_score * contribution
    sorted_indices = np.argsort(sorting_score)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        heuristic_value = weighted_ratio[i] - average_weight[i] + sparsity_score[i] * contribution[i]
        heuristics[i] = heuristic_value

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    # Dynamically adjust the heuristics based on an exponential decay function
    dynamic_threshold = heuristics / (1 + np.exp(-np.arange(n) / 1000))
    heuristics[heuristics < dynamic_threshold] = 0

    # Normalize the heuristics again after sparsification
    heuristics /= np.sum(heuristics)

    return heuristics
```
