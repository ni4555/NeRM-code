```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight
    normalized_prize = prize / prize.sum()
    normalized_weight = weight / weight.sum(axis=1)[:, np.newaxis]

    # Calculate the weighted ratio for each item
    weighted_ratio = normalized_prize * normalized_weight.sum(axis=1)

    # Calculate the sparsity for each item
    sparsity = np.count_nonzero(weight, axis=1)

    # Use softmax to avoid overflow and ensure stability
    exp_weighted_ratio = np.exp(weighted_ratio - np.max(weighted_ratio))
    heuristics = exp_weighted_ratio / np.sum(exp_weighted_ratio)

    # Set the heuristic for sparsity to zero
    heuristics[sparsity > 0.5] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
