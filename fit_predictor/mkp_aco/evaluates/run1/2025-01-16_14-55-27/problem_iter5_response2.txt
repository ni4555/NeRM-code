```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize weights to dimensionless values for fair comparison
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)

    # Stochastic sampling of top sparsified candidates based on sparsity and normalized prize-weight ratio
    sparsity = np.count_nonzero(weight, axis=1)
    weighted_prize_ratio = -prize / normalized_weight.sum(axis=1)
    combined_scores = sparsity + weighted_prize_ratio
    sorted_indices = np.argsort(combined_scores)[::-1]
    stochastic_sample_size = min(10, n)  # Sample size for stochastic consideration

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold using the logarithmic sparsity and normalized weighted ratio
    threshold = np.log(1 + np.max(sparsity / (np.max(weighted_prize_ratio) + 1)))

    # Iterate over the stochastic sample and adjust heuristic values
    for i in sorted_indices[:stochastic_sample_size]:
        sparsity_i = sparsity[i]
        weighted_ratio_i = weighted_prize_ratio[i]

        # Calculate the heuristic for the current item
        heuristic_value = (sparsity_i + np.log(1 + weighted_ratio_i)) / (1 + threshold)

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Adjust the heuristic for the current item
        heuristics[i] = heuristic_value

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
