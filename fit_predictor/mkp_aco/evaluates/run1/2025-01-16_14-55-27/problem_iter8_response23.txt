```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize weighted ratios to ensure that the sum of weighted ratios is 1 for each item
    weighted_ratios = prize / (weight.sum(axis=1) + 1e-6)  # Adding a small value to avoid division by zero

    # Calculate sparsity scores
    sparsity_scores = (m - np.count_nonzero(weight, axis=1)) / m

    # Normalize both weighted ratios and sparsity scores
    normalized_weighted_ratios = weighted_ratios / np.sum(weighted_ratios)
    normalized_sparsity_scores = sparsity_scores / np.sum(sparsity_scores)

    # Combine the normalized scores to create a final score for each item
    combined_scores = normalized_weighted_ratios + normalized_sparsity_scores

    # Sort items based on the combined scores in descending order
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize heuristic values
    heuristics = np.zeros(n)

    # Calculate a dynamic threshold based on the standard deviation of the combined scores
    threshold = np.std(combined_scores)

    # Iterate over sorted items and adjust heuristic values based on the threshold
    for i in sorted_indices:
        current_score = combined_scores[i]

        # Update the heuristic for the current item if its score exceeds the threshold
        if current_score > threshold:
            heuristics[i] = (current_score - threshold) / (np.max(combined_scores) - threshold)

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
