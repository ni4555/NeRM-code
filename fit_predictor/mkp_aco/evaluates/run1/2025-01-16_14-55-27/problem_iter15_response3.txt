```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prizes to have a sum of 1 for each item
    normalized_prize = prize / prize.sum()

    # Sort items based on normalized prize ratio and sparsity, then by total weight
    combined_scores = (normalized_prize - np.count_nonzero(weight, axis=1) - weight.sum(axis=1))
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the softmax temperature parameter
    temperature = 1.0

    # Iterate over the sorted items and adjust heuristic values using softmax
    for i in sorted_indices:
        softmax_value = np.exp(normalized_prize[i] / temperature) / np.sum(np.exp(normalized_prize / temperature))
        heuristics[i] = softmax_value

    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
