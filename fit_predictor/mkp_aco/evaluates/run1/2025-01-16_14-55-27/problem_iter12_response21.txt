```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    def item_score(item_idx):
        weighted_ratio = prize[item_idx] / weight[item_idx].sum()
        sparsity = np.count_nonzero(weight[item_idx]) / weight.shape[1]
        accumulated_weight = weight[item_idx].sum()
        weight_penalty = np.exp(-accumulated_weight / weight.shape[1])
        return weighted_ratio + sparsity - weight_penalty

    def adapt_threshold(scores, fraction=0.1):
        max_score = np.max(scores)
        return max_score * fraction if max_score > 0 else 0

    scores = np.array([item_score(i) for i in range(n)])
    sorted_indices = np.argsort(-scores)

    threshold = adapt_threshold(scores)
    trimmed_indices = scores < threshold

    heuristics = np.zeros(n)
    heuristics[sorted_indices[~trimmed_indices]] = scores[sorted_indices[~trimmed_indices]]

    heuristics /= heuristics.sum()

    return heuristics
```
