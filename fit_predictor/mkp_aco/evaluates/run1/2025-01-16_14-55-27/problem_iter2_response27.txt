```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on multiple factors: inverse of weighted prize ratio, sparsity of weight, and weight variance
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity = np.count_nonzero(weight, axis=1)
    variance = np.var(weight, axis=1)
    combined_factor = -weighted_ratio - sparsity - (1 / variance)
    sorted_indices = np.argsort(combined_factor)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Iterate over the sorted items and assign a heuristic value
    for i in sorted_indices:
        # Calculate the heuristic for the current item based on the combined factors
        heuristics[i] = weighted_ratio[i] * (1 / variance[i]) * sparsity[i]

    # Sparsify the heuristics by setting a threshold below which the value is set to zero
    threshold = np.percentile(heuristics, 5)  # Setting the threshold to the 5th percentile
    heuristics[heuristics < threshold] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
