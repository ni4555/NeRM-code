```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to account for dimensionality
    normalized_prize = prize / (np.sum(prize) / n)

    # Create a matrix with weighted ratio of prize to total weight, sparsity, and normalized prize
    ratio_matrix = (normalized_prize / weight.sum(axis=1)) - np.count_nonzero(weight, axis=1) + normalized_prize

    # Apply logarithmic sparsity to encourage sparser item sets
    sparsity_factor = np.log(1 + np.count_nonzero(weight, axis=1))

    # Combine the factors for a final score
    combined_scores = ratio_matrix + sparsity_factor

    # Stochastic sampling to introduce randomness
    np.random.shuffle(combined_scores)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the cumulative weight sum
    cumulative_weight = np.zeros(n)

    # Iterate over the items and calculate the cumulative heuristics
    for i in range(n):
        if cumulative_weight[i] + weight[i, :].sum() <= 1:
            heuristics[i] = combined_scores[i]
            cumulative_weight[i] += weight[i, :].sum()

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
