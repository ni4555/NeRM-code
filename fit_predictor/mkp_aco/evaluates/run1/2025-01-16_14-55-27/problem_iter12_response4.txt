```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate combined scores for each item based on multiple criteria
    combined_scores = (-prize / weight.sum(axis=1) - np.count_nonzero(weight, axis=1) - weight.sum(axis=1))

    # Sort items based on combined scores
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the dynamic threshold
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        total_weight = weight[i, :].sum()
        heuristic_value = prize[i] / (total_weight + np.count_nonzero(weight[i, :]))

        # Update the threshold based on the maximum heuristic encountered
        threshold = max(threshold, heuristic_value)

        # Adjust the heuristic for the current item
        heuristics[i] = heuristic_value

        # Sparsify the heuristic by setting it to zero if the contribution is below the threshold
        if heuristics[i] < threshold * 0.1:
            heuristics[i] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
