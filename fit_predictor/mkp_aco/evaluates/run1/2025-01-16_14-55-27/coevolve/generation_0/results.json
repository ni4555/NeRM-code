{
  "generation": 0,
  "description": "Solving Multiple Knapsack Problems (MKP) through stochastic solution sampling based on \"heuristics\". MKP involves selecting a subset of items to maximize the total prize collected, subject to multi-dimensional maximum weight constraints.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the total potential value for each item\n    potential_value = prize * np.prod(weight, axis=1)\n    \n    # Normalize the potential value by the maximum value to scale the results\n    max_potential = np.max(potential_value)\n    normalized_potential = potential_value / max_potential\n    \n    # Calculate the heuristics by subtracting the normalized potential from 1\n    heuristics = 1 - normalized_potential\n    \n    return heuristics",
      "fitness": 17.994318867250215,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_4.txt",
      "code_file": "coevolve/generation_0/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize a heuristic value array with zeros\n    heuristics = np.zeros_like(prize)\n    \n    # Compute the heuristics based on the prize-to-weight ratio\n    for i in range(len(prize)):\n        # Only if the weight for dimension 0 is 1, as per the constraint\n        if weight[i][0] == 1:\n            heuristics[i] = prize[i] / weight[i][0]\n    \n    return heuristics",
      "fitness": 18.130263698653046,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_8.txt",
      "code_file": "coevolve/generation_0/code_8.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Since weight is fixed to 1 in each dimension, we can just return the prize as the heuristic.\n    # Each item's heuristic value is directly its prize value.\n    return prize",
      "fitness": 21.45874653089221,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_7.txt",
      "code_file": "coevolve/generation_0/code_7.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Since the weight constraint for each dimension is fixed to 1,\n    # we can directly use the prize values as the heuristic scores\n    # because the \"prominence\" of an item is directly proportional to its prize value.\n    # Here we assume that the higher the prize, the more promising it is to include the item.\n    return prize\n\n# Example usage:\n# n = 4 (number of items)\n# m = 1 (number of dimensions per item, fixed to 1)\n# prize = np.array([10, 20, 30, 40])\n# weight = np.array([[1], [1], [1], [1]])\n# The function should return the prize array as the heuristic scores.\n# heuristics_v2(prize, weight) -> np.array([10, 20, 30, 40])",
      "fitness": 21.489687791786103,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_2.txt",
      "code_file": "coevolve/generation_0/code_2.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming that the constraint for each dimension is fixed to 1,\n    # we can use a simple heuristic that considers the ratio of prize to weight.\n    # This heuristic assumes that each item's weight is in the same dimension.\n    # We'll calculate the \"prominence\" of each item based on its prize-to-weight ratio.\n    \n    # Check if the weights have only one dimension\n    if weight.ndim == 1:\n        weight = weight[:, np.newaxis]  # Reshape to (n, 1) if it's not already\n    \n    # Calculate the prize-to-weight ratio for each item\n    prize_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios to sum to 1, which will give us the \"prominence\" of each item\n    prominence = prize_to_weight_ratio / prize_to_weight_ratio.sum()\n    \n    return prominence",
      "fitness": 22.039725957225073,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_0.txt",
      "code_file": "coevolve/generation_0/code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros(prize.shape[0])\n    \n    # Assuming the \"promise\" of an item is proportional to its prize-to-weight ratio\n    # and that the weights are the same across all dimensions (fixed to 1),\n    # the promise can be directly calculated as the prize value of each item.\n    heuristics = prize / weight.sum(axis=1)\n    \n    # Return the calculated heuristics\n    return heuristics",
      "fitness": 22.06091141788994,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_11.txt",
      "code_file": "coevolve/generation_0/code_11.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the total weight for each item by summing across dimensions\n    total_weight = np.sum(weight, axis=1)\n    \n    # Calculate the heuristic score for each item\n    # The heuristic score is a ratio of the prize to the total weight\n    # This encourages items with higher prize relative to weight to be more promising\n    heuristic_scores = prize / total_weight\n    \n    # Normalize the heuristic scores to make them sum to 1 (softmax)\n    max_score = np.max(heuristic_scores)\n    normalized_scores = heuristic_scores / max_score\n    \n    # Return the normalized heuristic scores as the heuristics for each item\n    return normalized_scores",
      "fitness": 22.191328524592144,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_5.txt",
      "code_file": "coevolve/generation_0/code_5.py"
    }
  ]
}