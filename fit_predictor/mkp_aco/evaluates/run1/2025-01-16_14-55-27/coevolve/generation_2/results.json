{
  "generation": 2,
  "description": "Optimizing a Multi-dimensional Knapsack Problem using a combination of adaptive stochastic sampling and advanced heuristic algorithms to maximize prize collection while efficiently managing complex weight constraints through dynamic sorting and weighted ratio analysis.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Sort items based on the weighted ratio in descending order\n    sorted_indices = np.argsort(weighted_ratio)[::-1]\n    \n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(prize)\n    \n    # Calculate the cumulative prize for sorted items\n    cumulative_prize = np.zeros_like(prize)\n    cumulative_prize[sorted_indices[0]] = prize[sorted_indices[0]]\n    \n    for i in range(1, len(sorted_indices)):\n        cumulative_prize[sorted_indices[i]] = cumulative_prize[sorted_indices[i-1]] + prize[sorted_indices[i]]\n    \n    # Calculate the heuristics based on the cumulative prize\n    for i in range(len(sorted_indices)):\n        heuristics[sorted_indices[i]] = cumulative_prize[sorted_indices[i]] / (cumulative_prize[-1] if cumulative_prize[-1] != 0 else 1)\n    \n    return heuristics",
      "fitness": 11.649255767734395,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_10.txt",
      "code_file": "coevolve/generation_2/code_10.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Sort items based on the weighted ratio in descending order\n    sorted_indices = np.argsort(weighted_ratio)[::-1]\n    \n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(prize)\n    \n    # Calculate the cumulative sum of weighted ratio\n    cumulative_weighted_ratio = np.cumsum(weighted_ratio[sorted_indices])\n    \n    # Calculate the heuristic for each item\n    for i, index in enumerate(sorted_indices):\n        heuristics[index] = cumulative_weighted_ratio[i] / cumulative_weighted_ratio[-1]\n    \n    return heuristics",
      "fitness": 12.80401824557821,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_7.txt",
      "code_file": "coevolve/generation_2/code_7.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n, m = prize.shape[0], weight.shape[1]\n    heuristics = np.zeros(n)\n\n    # Placeholder for the complex logic of adaptive stochastic sampling and heuristic algorithms.\n    # This would involve iterating over the items, applying various heuristic methods, and calculating\n    # the heuristics for each item based on the prize and weight constraints.\n    # The following is a very simplified version of what this might look like:\n\n    # Example heuristic: use the prize-to-weight ratio (normalized to 0-1 scale)\n    for i in range(n):\n        weighted_ratio = prize[i] / weight[i].sum()\n        # Normalize the ratio to be between 0 and 1\n        normalized_ratio = weighted_ratio / weighted_ratio.max()\n        heuristics[i] = normalized_ratio\n\n    # Apply some adaptive stochastic sampling to adjust the heuristics based on some criteria\n    # For example, items with high normalized ratio but low heuristics could be given a boost\n    # This is a conceptual placeholder, not an actual algorithm\n    for i in range(n):\n        if heuristics[i] < 0.5:\n            heuristics[i] *= 1.1  # Increase heuristic if it's below a certain threshold\n\n    return heuristics",
      "fitness": 18.265867905609962,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_9.txt",
      "code_file": "coevolve/generation_2/code_9.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1, keepdims=True)\n    \n    # Sort items based on the weighted ratio in descending order\n    sorted_indices = np.argsort(weighted_ratio, axis=1)[::-1]\n    \n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(prize)\n    \n    # Assign heuristics based on the sorted order\n    for i, sorted_index in enumerate(sorted_indices):\n        heuristics[sorted_index] = 1\n    \n    return heuristics",
      "fitness": 18.7417309687501,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_0.txt",
      "code_file": "coevolve/generation_2/code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Dynamic sorting based on the weighted ratio\n    sorted_indices = np.argsort(weighted_ratio)[::-1]\n    \n    # Calculate the heuristic score based on the sorted order\n    heuristics = np.zeros_like(prize)\n    cumulative_weight = 0\n    for i in sorted_indices:\n        cumulative_weight += weight[i][0]\n        if cumulative_weight <= 1:\n            heuristics[i] = 1\n    \n    return heuristics",
      "fitness": 20.933223813463666,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_4.txt",
      "code_file": "coevolve/generation_2/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming weight is a 2D array of shape (n, m) with each dimension's constraint as 1\n    # Since the constraint of each dimension is fixed to 1, we can ignore the weight array\n    # and just use the prize array to calculate the heuristic.\n    # The heuristic is calculated as the prize-to-weight ratio, which is the prize since weight is fixed at 1.\n    return prize\n\n# Example usage:\n# Let's say we have 5 items with prize values [10, 20, 30, 40, 50]\nprize = np.array([10, 20, 30, 40, 50])\n# Since each dimension's constraint is 1, the weight for each item will be [1, 1, 1, 1, 1]\nweight = np.array([[1], [1], [1], [1], [1]])\n\n# We calculate the heuristics for each item\nheuristics = heuristics_v2(prize, weight)\nprint(heuristics)",
      "fitness": 21.559236166577325,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_5.txt",
      "code_file": "coevolve/generation_2/code_5.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Dynamic sorting by weighted ratio\n    sorted_indices = np.argsort(weighted_ratio)[::-1]\n    \n    # Initialize heuristics array\n    heuristics = np.zeros_like(prize)\n    \n    # Assign heuristic values based on sorted order\n    for i, idx in enumerate(sorted_indices):\n        heuristics[idx] = 1.0 / (i + 1)  # Using inverse order as heuristic value\n    \n    return heuristics",
      "fitness": 22.050234545129147,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_11.txt",
      "code_file": "coevolve/generation_2/code_11.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the weighted ratio for each item\n    weighted_ratio = prize / weight.sum(axis=1)\n    \n    # Sort items by their weighted ratio in descending order\n    sorted_indices = np.argsort(weighted_ratio)[::-1]\n    \n    # Initialize the heuristic values array\n    heuristics = np.zeros_like(prize)\n    \n    # Assign heuristic values based on the sorted order\n    for i, index in enumerate(sorted_indices):\n        heuristics[index] = 1 / (i + 1)  # Example heuristic function: inverse of rank\n    \n    return heuristics",
      "fitness": 22.05817413188557,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_2/stdout_6.txt",
      "code_file": "coevolve/generation_2/code_6.py"
    }
  ]
}