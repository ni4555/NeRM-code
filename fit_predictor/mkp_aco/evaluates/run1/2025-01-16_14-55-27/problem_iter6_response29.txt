```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize weights to maintain a fixed constraint of 1 in each dimension
    normalized_weight = weight / weight.sum(axis=1, keepdims=True)

    # Stochastic sampling with logarithmic sparsity and weighted ratio analysis
    sparsity = np.count_nonzero(normalized_weight, axis=1)
    weighted_ratio = prize / (normalized_weight.sum(axis=1) + 1e-5)  # Adding a small constant to avoid division by zero
    combined_scores = np.log(1 + sparsity) + weighted_ratio

    # Dynamic item sorting based on combined scores
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Calculate initial heuristic values
    for i in sorted_indices:
        heuristics[i] = combined_scores[i]

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
