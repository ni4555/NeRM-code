```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate weighted ratio and sparsity score
    weighted_ratio = prize / weight.sum(axis=1)
    sparsity_score = np.count_nonzero(weight, axis=1)

    # Dynamic item sorting based on weighted ratio and sparsity score
    combined_scores = (-weighted_ratio - sparsity_score)
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.median(combined_scores)

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        # Update the threshold based on the maximum score encountered
        threshold = max(threshold, combined_scores[i])

        # Calculate heuristic value
        heuristic_value = combined_scores[i] / (1 + sparsity_score[i])

        # Update the heuristic for the current item
        heuristics[i] = heuristic_value

        # Dynamically adjust the threshold based on heuristic values
        heuristics[heuristics < threshold * 0.1] = 0
        threshold = np.median(heuristics)

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
