```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight
    normalized_prize = prize / prize.max()
    normalized_weight = weight / weight.max()

    # Calculate weighted prize ratio and sparsity for each item
    weighted_ratio = normalized_prize / normalized_weight.sum(axis=1)
    sparsity = np.count_nonzero(normalized_weight, axis=1)

    # Combine multiple criteria to create a composite score
    combined_scores = weighted_ratio / (sparsity + normalized_weight.sum(axis=1))

    # Sort items based on the composite score
    sorted_indices = np.argsort(-combined_scores)

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold
    threshold = np.median(combined_scores)

    # Adaptively sample items based on the threshold
    while threshold > 0 and np.sum(combined_scores[sorted_indices]) > 0:
        # Select items above the current threshold
        selected_indices = sorted_indices[combined_scores[sorted_indices] > threshold]

        # Update the heuristic values for the selected items
        heuristics[selected_indices] = 1.0 / len(selected_indices)

        # Update the threshold to the minimum combined score of the selected items
        threshold = np.min(combined_scores[sorted_indices])

        # Update the indices to the next set of unselected items
        sorted_indices = np.argsort(-combined_scores)

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
