```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Define a function to calculate the heuristic for an item
    def calculate_heuristic(item_index):
        weighted_ratio = prize[item_index] / weight[item_index, :].sum()
        sparsity = np.count_nonzero(weight[item_index, :])
        total_weight = weight[item_index, :].sum()
        # Avoid division by zero
        sparsity = sparsity if total_weight > 0 else 1
        return weighted_ratio / (sparsity + total_weight)

    # Iterate over all items to evaluate them
    for i in range(n):
        heuristic_value = calculate_heuristic(i)
        heuristics[i] = heuristic_value

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
