```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Dynamic item sorting based on weighted prize ratio, sparsity, and total weight
    combined_scores = (prize / (weight.sum(axis=1) + 1e-8) - np.count_nonzero(weight, axis=1) - weight.sum(axis=1))
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the adaptive sparsity threshold
    sparsity_threshold = np.median(np.count_nonzero(weight, axis=1)) / m

    # Initialize the adaptive weighted ratio threshold
    weighted_ratio_threshold = np.median(prize / (weight.sum(axis=1) + 1e-8))

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        weighted_ratio = prize[i] / (weight[i, :].sum() + 1e-8)
        sparsity = np.count_nonzero(weight[i, :])
        total_weight = weight[i, :].sum()

        # Calculate the heuristic for the current item
        heuristic_value = weighted_ratio / (sparsity + total_weight)

        # Update the adaptive thresholds based on the current item's characteristics
        sparsity_threshold = max(sparsity_threshold, sparsity / m)
        weighted_ratio_threshold = max(weighted_ratio_threshold, weighted_ratio)

        # Adjust the heuristic for the current item based on the adaptive thresholds
        if sparsity > sparsity_threshold and weighted_ratio > weighted_ratio_threshold:
            heuristics[i] = heuristic_value

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
