```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight to avoid overflow and ensure stability
    normalized_prize = np.log(prize + 1)
    normalized_weight = np.log(weight + 1)

    # Dynamic item sorting based on utility and sparsity
    utility_scores = normalized_prize / (normalized_weight.sum(axis=1) + 1e-8)
    sparsity_scores = 1 / (1 + np.count_nonzero(weight, axis=1))
    combined_scores = utility_scores * sparsity_scores
    sorted_indices = np.argsort(combined_scores)[::-1]

    # Initialize the heuristic values array
    heuristics = np.zeros(n)

    # Initialize the dynamic threshold using softmax
    exp_scores = np.exp(combined_scores - np.max(combined_scores))
    probabilities = exp_scores / np.sum(exp_scores)
    threshold = probabilities.max()

    # Iterate over the sorted items and adjust heuristic values
    for i in sorted_indices:
        exp_score = np.exp(combined_scores[i] - np.max(combined_scores))
        probability = exp_score / np.sum(exp_score)

        # Update the threshold based on the maximum probability encountered
        threshold = max(threshold, probability)

        # Adjust the heuristic for the current item
        heuristics[i] = probability

        # Sparsify the heuristic by setting it to zero if the probability is below the threshold
        heuristics[heuristics < threshold * 0.1] = 0

    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
