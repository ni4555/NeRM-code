```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Combine multiple heuristic factors
    # 1. Normalize the ratio to reduce the influence of outliers
    # 2. Apply logarithm to further reduce the influence of extremely high ratios
    # 3. Introduce a penalty for high weights to avoid over-reliance on heavy items
    # 4. Use the sum of weights in each dimension as a heuristic adjustment
    penalty = weight.sum(axis=1)
    heuristic_factors = [
        1 / value_to_weight_ratio,
        np.log(1 / value_to_weight_ratio),
        1 / penalty,
        np.sum(weight, axis=1)
    ]
    
    # Combine factors into a single heuristic value
    heuristics = np.prod(heuristic_factors, axis=0)
    
    # Sparsify the heuristics by setting low heuristics to zero
    sparsified_heuristics = np.where(heuristics > np.mean(heuristics), heuristics, 0)
    
    return sparsified_heuristics
```
