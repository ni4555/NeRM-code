```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate the sum of the normalized value-to-weight ratio across dimensions
    sum_ratio = value_to_weight_ratio.sum(axis=1)
    
    # Sparsify the heuristics by setting the top ratios to a high value
    # and the rest to zero
    sparsified_heuristics = np.where(sum_ratio > 1, 1 / sum_ratio, 0)
    
    # Adjust the sparsified heuristics by adding a small penalty for higher dimensions
    penalty_factor = (np.arange(weight.shape[1]) + 1) / weight.shape[1]
    adjusted_heuristics = sparsified_heuristics * penalty_factor
    
    return adjusted_heuristics
```
