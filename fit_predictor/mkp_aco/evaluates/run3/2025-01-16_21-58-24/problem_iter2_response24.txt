```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Integrate multiple informative features: value-to-weight ratio and sparsity
    sparsity_factor = np.random.binomial(n=1, p=0.8, size=value_to_weight_ratio.shape)
    
    # Use the logarithm to prevent vanishing gradients and to penalize zero ratios
    log_value_to_weight_ratio = np.log(value_to_weight_ratio)
    
    # Create a heuristic by combining the features
    heuristic = sparsity_factor * (1 / (log_value_to_weight_ratio + 1))
    
    # Further refine the heuristic by incorporating the sum of the weights in each dimension
    heuristic_adjustment = np.sum(weight, axis=1)
    
    # Sparsify the heuristic by setting low value-to-weight ratio items to zero
    sparsified_heuristic = np.where(heuristic > 0.5, heuristic + heuristic_adjustment, 0)
    
    return sparsified_heuristic
```
