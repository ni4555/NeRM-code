```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate penalty factors for outliers
    q1 = np.percentile(value_to_weight_ratio, 25)
    q3 = np.percentile(value_to_weight_ratio, 75)
    iqr = q3 - q1
    penalty_factor_1 = np.where(value_to_weight_ratio < q1 - 1.5 * iqr, 
                                (q1 - value_to_weight_ratio) / (q1 - q1), 0)
    penalty_factor_2 = np.where(value_to_weight_ratio > q3 + 1.5 * iqr, 
                                (value_to_weight_ratio - q3) / (q3 - q1), 0)
    
    # Calculate penalty factor based on dimension and average weight factors
    penalty_factor_3 = weight.sum(axis=1) / weight.shape[1]
    penalty_factor_4 = np.mean(weight, axis=1) / np.max(weight, axis=1)
    
    # Combine penalty factors
    penalty_factor = penalty_factor_1 + penalty_factor_2 + penalty_factor_3 + penalty_factor_4
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate density factor
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Calculate heuristic based on normalized ratio, density factor, and penalty factor
    heuristic = (value_to_weight_ratio - penalty_factor + density_factor) / (1 + penalty_factor)
    
    # Normalize the heuristic to a range between 0 and 1
    min_heuristic = np.min(heuristic)
    max_heuristic = np.max(heuristic)
    heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Apply sparsity to promote diversity
    sparsity_factor = 0.1
    sparsity_threshold = np.percentile(heuristic, 1 - sparsity_factor)
    heuristic = np.where(heuristic > sparsity_threshold, heuristic, 0)
    
    return heuristic
```
