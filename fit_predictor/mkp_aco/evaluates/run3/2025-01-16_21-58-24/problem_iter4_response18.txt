```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate sparsity factor based on the ratio
    sparsity_factor = 1 - (value_to_weight_ratio / np.max(value_to_weight_ratio))
    
    # Calculate diversity factor considering the range of ratios
    diversity_factor = 1 / (1 + (np.abs(value_to_weight_ratio - np.mean(value_to_weight_ratio))))
    
    # Normalize the sparsity and diversity factors to balance their influence
    sparsity_normalized = sparsity_factor / (sparsity_factor + diversity_factor)
    diversity_normalized = diversity_factor / (sparsity_factor + diversity_factor)
    
    # Combine the normalized factors with the value-to-weight ratio
    combined_heuristics = value_to_weight_ratio * sparsity_normalized * diversity_normalized
    
    # Apply a threshold to ensure a non-negative heuristic
    threshold = np.percentile(combined_heuristics, 5)
    heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    return heuristics
```
