```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a penalty factor for outliers based on the percentile of the ratio
    penalty_factor = np.abs(value_to_weight_ratio - np.percentile(value_to_weight_ratio, 75))
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine the normalized ratio with the penalty and density factors
    combined_heuristics = value_to_weight_ratio * (1 - penalty_factor + density_factor)
    
    # Introduce randomness for exploration
    random_noise = np.random.normal(0, 0.1, size=combined_heuristics.shape)
    final_heuristics = combined_heuristics + random_noise
    
    # Incorporate diversity by adjusting the heuristic based on the standard deviation
    diversity_factor = np.exp(-np.square(value_to_weight_ratio - np.mean(value_to_weight_ratio)) / (2 * np.var(value_to_weight_ratio)))
    final_heuristics *= diversity_factor
    
    # Sparsify the heuristics by setting a threshold and incorporating diversity
    threshold = np.percentile(final_heuristics, 75)  # Use a lower threshold for sparsity
    sparsified_heuristics = np.where(final_heuristics > threshold, final_heuristics, 0)
    
    # Add a small diversity boost to the items above the threshold
    diversity_boost = np.random.binomial(1, 0.1, size=sparsified_heuristics.shape)  # 10% chance to add diversity
    sparsified_heuristics *= diversity_boost
    
    return sparsified_heuristics
```
