```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a penalty factor for outliers based on the percentile of the ratio
    penalty_factor = np.abs(value_to_weight_ratio - np.percentile(value_to_weight_ratio, 75)) / np.percentile(value_to_weight_ratio, 75)
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine the normalized ratio with the penalty and density factors
    combined_heuristics = value_to_weight_ratio * (1 - penalty_factor) * density_factor
    
    # Apply a clear threshold for sparsity
    sparsity_threshold = 0.5
    heuristics = np.where(combined_heuristics > sparsity_threshold, combined_heuristics, 0)
    
    # Introduce randomness for diversity
    random_factor = np.random.rand(n)
    heuristics = heuristics * random_factor
    
    # Apply mutation for exploration
    mutation_rate = 0.1
    mutation_indices = np.random.choice(n, int(n * mutation_rate), replace=False)
    heuristics[mutation_indices] = np.random.rand(len(mutation_indices))
    
    return heuristics
```
