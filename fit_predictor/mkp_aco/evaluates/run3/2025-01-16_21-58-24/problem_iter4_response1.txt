```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Apply a percentile threshold to filter out outliers
    percentile_threshold = np.percentile(value_to_weight_ratio, 95)
    value_to_weight_ratio = np.where(value_to_weight_ratio > percentile_threshold, value_to_weight_ratio, 0)
    
    # Calculate variance-based sparsity factor
    variance_factor = 1 - (np.var(value_to_weight_ratio) / np.max(np.var(value_to_weight_ratio)))
    
    # Normalize with care to avoid overflow
    normalized_ratio = (value_to_weight_ratio - np.min(value_to_weight_ratio)) / (np.max(value_to_weight_ratio) - np.min(value_to_weight_ratio))
    
    # Combine the factors to create the heuristics
    combined_heuristics = normalized_ratio * (variance_factor + 1)
    
    # Apply a threshold to the heuristics
    threshold = 0.5
    heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    return heuristics
```
