```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate penalties for outliers
    q1 = np.percentile(value_to_weight_ratio, 25)
    q3 = np.percentile(value_to_weight_ratio, 75)
    iqr = q3 - q1
    penalty_factor = np.where((value_to_weight_ratio < q1 - 1.5 * iqr) | (value_to_weight_ratio > q3 + 1.5 * iqr),
                              value_to_weight_ratio, 1)
    
    # Factor 1: Value-to-weight ratio with outlier penalty
    value_factor = value_to_weight_ratio * penalty_factor
    
    # Factor 2: Normalize the sum of weights (to avoid overly heavy items)
    weight_factor = weight.sum(axis=1) / np.mean(weight.sum(axis=1))
    
    # Factor 3: Normalize the number of non-zero weights (to avoid items with too many dimensions)
    dimension_factor = (weight != 0).sum(axis=1) / np.mean((weight != 0).sum(axis=1))
    
    # Factor 4: Normalize the average weight in each dimension (to balance the weight across dimensions)
    avg_weight_factor = np.mean(weight, axis=1) / np.mean(np.mean(weight, axis=1)))
    
    # Factor 5: The total value (to prioritize high-value items)
    value_factor /= np.max(prize)
    
    # Combine factors to create a heuristic
    heuristic = value_factor * weight_factor * dimension_factor * avg_weight_factor
    
    # Normalize the heuristic to a range between 0 and 1
    min_heuristic = np.min(heuristic)
    max_heuristic = np.max(heuristic)
    heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Introduce randomness to increase diversity
    np.random.seed(42)  # Seed for reproducibility
    random_factor = np.random.normal(0, 0.1, heuristic.shape)
    heuristic += random_factor
    
    # Normalize the heuristic after adding randomness
    min_heuristic = np.min(heuristic)
    max_heuristic = np.max(heuristic)
    heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Sparsify the heuristics by setting a threshold for zero
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristics = np.where(heuristic > sparsity_threshold, heuristic, 0)
    
    return heuristics
```
