```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate an additional factor based on the inverse of the number of dimensions
    dimension_factor = 1 / len(weight)
    
    # Combine the normalized ratio with the dimension factor
    combined_heuristics = value_to_weight_ratio * dimension_factor
    
    # Normalize the heuristics to a range between 0 and 1
    max_combined = np.max(combined_heuristics)
    min_combined = np.min(combined_heuristics)
    heuristics = (combined_heuristics - min_combined) / (max_combined - min_combined)
    
    # Sparsify the heuristics by setting values below a certain threshold to zero
    threshold = 0.5  # This threshold can be adjusted for better performance
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
