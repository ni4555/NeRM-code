```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Combine value-to-weight ratio with additional factors
    # Here we use the sum of weights (as a proxy for difficulty to select)
    # and the negative sum of prizes (to penalize items with lower value)
    difficulty = weight.sum(axis=1)
    penalty = -np.sum(prize)
    combined_heuristic = value_to_weight_ratio * (difficulty + penalty)
    
    # Sparsify the heuristic by setting lower ratios and penalties to zero
    # Introduce a multiplicative factor to balance the impact of value-to-weight ratio
    multiplicative_factor = np.random.normal(loc=1.0, scale=0.1, size=value_to_weight_ratio.shape)
    sparsity_threshold = np.percentile(combined_heuristic, 5)
    sparsified_heuristics = np.where(combined_heuristic > sparsity_threshold, combined_heuristic * multiplicative_factor, 0)
    
    return sparsified_heuristics
```
