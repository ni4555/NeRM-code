```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Combine value-to-weight ratio with additional factors
    # Additional factors could be the sum of individual weight components
    # to account for multi-dimensional constraints, and the inverse of the sum
    # of weights to encourage selecting items that are easier to fit in the knapsack
    dimension_factors = weight.sum(axis=1)
    ease_factor = 1 / (weight.sum(axis=1) + 1e-8)  # Add a small constant to avoid division by zero
    diversity_factor = np.log(1 + len(weight))
    combined_heuristic = value_to_weight_ratio * (dimension_factors + diversity_factor + ease_factor)
    
    # Normalize the combined heuristic to ensure non-negative values
    max_combined = np.max(combined_heuristic)
    if max_combined > 0:
        combined_heuristic /= max_combined
    
    # Apply a non-parametric sparsity method, such as thresholding at the
    # percentile of the combined heuristic distribution, to ensure a sparse heuristic
    sparsity_threshold = np.percentile(combined_heuristic, 95)  # Choose a high percentile
    sparsified_heuristics = np.where(combined_heuristic > sparsity_threshold, combined_heuristic, 0)
    
    return sparsified_heuristics
```
