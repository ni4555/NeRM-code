```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a penalty factor for outliers based on the percentile of the ratio
    penalty_factor = np.abs(value_to_weight_ratio - np.percentile(value_to_weight_ratio, 75))
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine the normalized ratio with the penalty and density factors
    combined_heuristics = value_to_weight_ratio * (1 - penalty_factor + density_factor)
    
    # Introduce randomness with a sparsity factor to balance exploration and exploitation
    sparsity_factor = np.random.rand(len(combined_heuristics))
    sparsified_heuristics = combined_heuristics * (1 - sparsity_factor)
    
    # Mutate the sparsified heuristics to maintain diversity
    mutation_rate = 0.1
    mutations = np.random.rand(len(sparsified_heuristics)) < mutation_rate
    sparsified_heuristics[mutations] = np.random.rand(mutations.sum())
    
    # Ensure that the heuristics are within a reasonable range
    min_heuristic = 0
    max_heuristic = 1
    scaled_heuristics = (sparsified_heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    return scaled_heuristics
```
