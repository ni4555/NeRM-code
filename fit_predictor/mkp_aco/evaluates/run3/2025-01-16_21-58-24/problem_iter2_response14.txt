```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate the logarithm of the normalized ratio to reduce the influence of high ratios
    log_ratio = np.log(value_to_weight_ratio)
    
    # Calculate a penalty based on the sum of weights to avoid over-reliance on heavier items
    penalty = weight.sum(axis=1)
    
    # Combine factors to create a heuristic that balances value-to-weight ratio, log ratio, and penalty
    heuristic_factor = (1 / value_to_weight_ratio) * log_ratio + 1 / penalty
    
    # Normalize the heuristic factor to ensure non-negative values
    max_factor = np.max(heuristic_factor)
    if max_factor > 0:
        heuristic_factor /= max_factor
    
    # Apply a threshold to sparsify the heuristics, keeping only the most promising items
    threshold = 0.5
    heuristics = np.where(heuristic_factor > threshold, heuristic_factor, 0)
    
    return heuristics
```
