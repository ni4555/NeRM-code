```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Apply a penalty to the ratio to balance between exploitation and exploration
    global_max_ratio = np.max(value_to_weight_ratio)
    penalty_factor = (global_max_ratio - value_to_weight_ratio) / global_max_ratio
    
    # Incorporate problem dimensions into the heuristic factor
    heuristic_factor = density_factor * (1 - penalty_factor) * (1 + np.log(1 + len(weight)))
    
    # Normalize the heuristic factor by its maximum value
    max_factor = np.max(heuristic_factor)
    normalized_factor = heuristic_factor / max_factor
    
    # Apply smoothing to avoid sharp transitions in heuristic values
    smoothing_factor = np.exp(-normalized_factor)
    
    # Introduce randomness to maintain heuristic diversity
    random_noise = np.random.normal(0, 0.05, size=normalized_factor.shape)
    final_factor = normalized_factor * smoothing_factor + random_noise
    
    # Sparsify to promote distinctiveness and avoid overfitting
    sparsity_threshold = np.percentile(final_factor, 25)
    heuristics = np.where(final_factor > sparsity_threshold, final_factor, 0)
    
    return heuristics
```
