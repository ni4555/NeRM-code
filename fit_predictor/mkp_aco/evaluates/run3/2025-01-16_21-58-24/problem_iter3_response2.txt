```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Apply a percentile-based threshold to identify outliers
    percentile_threshold = np.percentile(value_to_weight_ratio, 95)
    heuristics = np.where(value_to_weight_ratio > percentile_threshold, value_to_weight_ratio, 0)
    
    # Calculate a sparsity factor based on the ratio
    sparsity_factor = 1 - (np.var(value_to_weight_ratio) / np.var(np.ones_like(value_to_weight_ratio)))
    
    # Normalize the heuristics by sparsity factor
    normalized_heuristics = heuristics * sparsity_factor
    
    return normalized_heuristics
```
