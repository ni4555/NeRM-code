```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate logarithm of the ratio to reduce influence of high ratios
    log_ratio = np.log(value_to_weight_ratio)
    
    # Calculate penalty based on sum of weights to avoid over-reliance on heavier items
    penalty = weight.sum(axis=1)
    
    # Calculate density of items considering both value-to-weight ratio and log ratio
    item_density = log_ratio / (penalty + 1e-6)  # Adding a small constant to avoid division by zero
    
    # Normalize the density to ensure non-negative values
    max_density = np.max(item_density)
    if max_density > 0:
        item_density /= max_density
    
    # Apply a threshold to the density to keep only the most promising items
    threshold = 0.5
    heuristics = np.where(item_density > threshold, item_density, 0)
    
    return heuristics
```
