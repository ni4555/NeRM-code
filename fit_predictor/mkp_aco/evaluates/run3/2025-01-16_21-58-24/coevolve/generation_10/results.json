{
  "generation": 10,
  "description": "Design a hybrid optimization algorithm for the Multi-dimensional Knapsack Problem (MKP) that utilizes a genetic algorithm (GA) for diversity and a Simulated Annealing (SA) for refined local search. The algorithm should employ a value-to-weight ratio-based heuristic to prioritize items, ensuring maximum total value while respecting multi-dimensional weight and volume constraints. The genetic algorithm will use a fitness function that considers both constraint compliance and total value, with selection based on normalized value-to-weight ratios. The GA will employ specific operators such as tournament selection, single-point crossover, and mutation for evolution. The Simulated Annealing component will refine the solutions by allowing occasional violations of constraints at higher temperatures, which will be reduced over generations to exploit promising regions. Termination will be based on a predefined number of generations, a convergence threshold, or when no improvement is observed over a set number of iterations. The algorithm will be evaluated on its ability to maximize the average solution value, minimize constraint violations, and optimize computational efficiency, with the goal of achieving a balance between exploration and exploitation.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    # Normalize the ratios to sum to 1\n    normalized_ratios = value_to_weight_ratio / value_to_weight_ratio.sum()\n    return normalized_ratios",
      "fitness": 22.088481413881944,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_7.txt",
      "code_file": "coevolve/generation_10/code_7.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratios by the maximum ratio to ensure a proper scale\n    max_ratio = np.max(value_to_weight_ratio)\n    normalized_ratio = value_to_weight_ratio / max_ratio\n    \n    # The heuristic is simply the normalized value-to-weight ratio\n    return normalized_ratio",
      "fitness": 22.092271703064277,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_0.txt",
      "code_file": "coevolve/generation_10/code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Return the heuristics based on the value-to-weight ratio\n    return value_to_weight_ratio",
      "fitness": 22.103779168950656,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_9.txt",
      "code_file": "coevolve/generation_10/code_9.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    # Normalize the value-to-weight ratio by the maximum ratio\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.max()\n    return normalized_ratio",
      "fitness": 22.1062129403006,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_8.txt",
      "code_file": "coevolve/generation_10/code_8.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio to ensure they are comparable\n    normalized_vtw = value_to_weight / value_to_weight.max()\n    \n    # The heuristics array will be the normalized value-to-weight ratios\n    heuristics = normalized_vtw\n    return heuristics",
      "fitness": 22.13155886366812,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_1.txt",
      "code_file": "coevolve/generation_10/code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios to ensure they sum to 1\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Return the normalized value-to-weight ratios as heuristics\n    return normalized_ratio",
      "fitness": 22.140913299862323,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_6.txt",
      "code_file": "coevolve/generation_10/code_6.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    # Normalize the value-to-weight ratio to get the heuristics\n    heuristics = value_to_weight_ratio / value_to_weight_ratio.sum()\n    return heuristics",
      "fitness": 22.150421844638714,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_10.txt",
      "code_file": "coevolve/generation_10/code_10.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios to ensure they sum to 1\n    normalized_vtw_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Return the normalized value-to-weight ratios as heuristics\n    return normalized_vtw_ratio",
      "fitness": 22.19320501432398,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_3.txt",
      "code_file": "coevolve/generation_10/code_3.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio by the maximum ratio\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.max()\n    \n    # Return the normalized value-to-weight ratios as the heuristics\n    return normalized_ratio",
      "fitness": 22.222302105190558,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_2.txt",
      "code_file": "coevolve/generation_10/code_2.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios to ensure they sum to 1\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Return the normalized value-to-weight ratios as heuristics\n    return normalized_ratio",
      "fitness": 22.237094719893776,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_4.txt",
      "code_file": "coevolve/generation_10/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming prize is a 1-D array of length n and weight is an n x m array\n    # Calculate value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Calculate normalized value-to-weight ratio\n    max_ratio = np.max(value_to_weight_ratio)\n    normalized_ratio = value_to_weight_ratio / max_ratio\n    \n    # Assuming each dimension's constraint is fixed to 1, the heuristic is simply the normalized ratio\n    # because it is already prioritized by the value-to-weight ratio\n    heuristics = normalized_ratio\n    \n    return heuristics",
      "fitness": 22.276627021873487,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_11.txt",
      "code_file": "coevolve/generation_10/code_11.py"
    }
  ]
}