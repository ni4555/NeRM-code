{
  "generation": 7,
  "description": "Develop a hybrid optimization heuristic for the Multi-dimensional Knapsack Problem (MKP) that employs a combination of stochastic solution sampling, adaptive evolutionary computation, and robust local search algorithms. This heuristic should maximize the total prize collected by selecting a subset of items, while adhering to strict multi-dimensional weight and volume constraints. The approach will utilize probabilistic sampling to explore diverse solution landscapes and incorporate adaptive evolutionary strategies to exploit promising regions. The heuristic will define a precise fitness metric to evaluate candidate solutions, rigorously enforce MKP constraints, and focus on achieving a balance between computational efficiency and solution quality. The performance goal is to identify optimal or near-optimal solutions with minimal computational resources.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\nfrom scipy.optimize import differential_evolution\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Define the objective function for the differential evolution algorithm\n    def objective_function(x):\n        # Calculate the total prize for the selected items\n        selected_prize = np.sum(prize[x > 0])\n        # Calculate the total weight for the selected items\n        selected_weight = np.sum(weight[x > 0], axis=1)\n        # Check if the total weight is within the constraints\n        if np.all(selected_weight <= 1):\n            return -selected_prize  # Maximize the negative prize to minimize the function\n        else:\n            return -np.inf  # Return negative infinity if constraints are violated\n\n    # Initialize the bounds for each item, where 0 means the item is not selected and 1 means it is selected\n    bounds = [(0, 1) for _ in range(weight.shape[0])]\n\n    # Perform the differential evolution to find the optimal subset of items\n    result = differential_evolution(objective_function, bounds, strategy='best1bin', maxiter=1000, popsize=50)\n\n    # Convert the binary result to a heuristic score\n    heuristics = np.zeros_like(prize)\n    heuristics[result.x > 0] = 1\n\n    return heuristics",
      "fitness": 18.877917050336656,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_7/stdout_5.txt",
      "code_file": "coevolve/generation_7/code_5.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize an array to hold the promise values for each item\n    heuristics = np.zeros_like(prize)\n    \n    # Calculate the prize-to-weight ratio for each item in each dimension\n    # Since the constraint is fixed to 1 for each dimension, we can sum the weights across dimensions\n    total_weight_per_item = np.sum(weight, axis=1)\n    \n    # Calculate the promise as the ratio of prize to total weight per item\n    # We normalize the prize by dividing by the total weight to get a per-item prize-to-weight ratio\n    heuristics = prize / total_weight_per_item\n    \n    # Return the array of promises\n    return heuristics",
      "fitness": 22.256330061604462,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_7/stdout_3.txt",
      "code_file": "coevolve/generation_7/code_3.py"
    }
  ]
}