{
  "generation": 0,
  "description": "Solving Multiple Knapsack Problems (MKP) through stochastic solution sampling based on \"heuristics\". MKP involves selecting a subset of items to maximize the total prize collected, subject to multi-dimensional maximum weight constraints.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # This is a placeholder for the actual heuristic algorithm. The following code\n    # generates a random heuristic for each item based on the prize value.\n    # A real heuristic would take into account the constraints and the goal of the problem.\n    return np.random.rand(len(prize))",
      "fitness": 17.0677535742063,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_3.txt",
      "code_file": "coevolve/generation_0/code_3.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming the heuristic is to calculate the prize per unit weight for each item\n    # and then sort by this value to get the most promising items.\n    # The heuristic assumes that the constraint of each dimension is fixed to 1,\n    # so we can simply use the sum of weights along each dimension (which will be 1 for all items).\n    \n    # Calculate the prize per unit weight for each item\n    prize_per_unit_weight = prize / weight.sum(axis=1)\n    \n    # Sort items by the prize per unit weight in descending order\n    sorted_indices = np.argsort(prize_per_unit_weight)[::-1]\n    \n    # Create a boolean array to indicate if the item is promising based on the heuristic\n    promising = np.zeros_like(prize, dtype=bool)\n    promising[sorted_indices] = True\n    \n    return promising",
      "fitness": 18.392995587898035,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_6.txt",
      "code_file": "coevolve/generation_0/code_6.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(prize, dtype=float)\n    \n    # Normalize the weight matrix to the range [0, 1]\n    weight_normalized = weight / weight.sum(axis=1, keepdims=True)\n    \n    # Calculate the heuristics for each item\n    for i in range(prize.shape[0]):\n        # Compute the expected profit for item i, considering the normalized weights\n        expected_profit = prize[i] * weight_normalized[i].sum()\n        # Set the heuristics value as the expected profit\n        heuristics[i] = expected_profit\n    \n    return heuristics",
      "fitness": 21.870871680756714,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_8.txt",
      "code_file": "coevolve/generation_0/code_8.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Since the constraint of each dimension is fixed to 1, we can just sum the weights for each item.\n    total_weight = weight.sum(axis=1)\n    # The heuristic for each item is simply the prize of the item.\n    heuristics = prize / total_weight\n    return heuristics",
      "fitness": 22.098708368555386,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_0.txt",
      "code_file": "coevolve/generation_0/code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the total weight of each item\n    total_weight = np.sum(weight, axis=1)\n    \n    # Avoid division by zero if there are items with zero total weight\n    with np.errstate(divide='ignore', invalid='ignore'):\n        # Normalize prize by total weight to get the density\n        density = np.true_divide(prize, total_weight)\n        # Set the density to 0 where the total weight is 0\n        density[np.isnan(density)] = 0\n    \n    return density",
      "fitness": 22.147357353655913,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_7.txt",
      "code_file": "coevolve/generation_0/code_7.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming that the weight of each item is 1 for all dimensions, we can simplify the problem\n    # by using the sum of weights across all dimensions for each item.\n    total_weight = weight.sum(axis=1)\n    \n    # Calculate the \"prominence\" of each item as the ratio of its prize to its total weight.\n    # This heuristic assumes that items with a higher prize-to-weight ratio are more promising.\n    prominence = prize / total_weight\n    \n    # We can use the prominence values as our heuristic scores.\n    return prominence",
      "fitness": 22.20278475497544,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_11.txt",
      "code_file": "coevolve/generation_0/code_11.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the total weight for each item\n    total_weight_per_item = np.sum(weight, axis=1)\n    \n    # Avoid division by zero if any item has zero weight\n    total_weight_per_item[total_weight_per_item == 0] = 1\n    \n    # Calculate the prize-to-weight ratio for each item\n    prize_to_weight_ratio = prize / total_weight_per_item\n    \n    # Normalize the prize-to-weight ratio so that the highest ratio gets the highest score\n    max_ratio = np.max(prize_to_weight_ratio)\n    heuristics = prize_to_weight_ratio / max_ratio\n    \n    return heuristics",
      "fitness": 22.222356051044073,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_0/stdout_2.txt",
      "code_file": "coevolve/generation_0/code_2.py"
    }
  ]
}