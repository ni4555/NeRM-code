Fitness: 20.843306950915554

Description:
Develop a hybrid optimization algorithm for the Multi-dimensional Knapsack Problem (MKP) that leverages a combination of stochastic sampling, evolutionary computation, and advanced local search techniques. The algorithm should prioritize maximizing the total value of selected items while strictly adhering to multi-dimensional weight and volume constraints. A robust fitness function will evaluate solutions based on both constraint compliance and total value. The proposed strategy should effectively balance the exploration of diverse solution spaces with the exploitation of promising regions to optimize solution quality. Key performance metrics include minimizing constraint violations, enhancing the average value of solutions, and optimizing computational efficiency. The algorithm should be designed to achieve a measurable balance between exploration and exploitation, with a focus on improving the percentage of solutions meeting all constraints, the average solution value, and the time to convergence.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # This is a simple heuristic that calculates the value-to-weight ratio for each item
    # and multiplies it by a random factor to introduce some stochasticity in the heuristic
    # values. The idea is to favor items with a high value-to-weight ratio, but still
    # allow some randomness to explore the solution space more thoroughly.
    
    value_to_weight_ratio = prize / weight.sum(axis=1)
    random_factor = np.random.rand(prize.size)
    heuristics = value_to_weight_ratio * random_factor
    
    return heuristics