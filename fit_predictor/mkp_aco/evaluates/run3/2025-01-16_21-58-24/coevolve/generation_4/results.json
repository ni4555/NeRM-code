{
  "generation": 4,
  "description": "Develop an integrated optimization framework for addressing the Multi-dimensional Knapsack Problem (MKP) that synergistically integrates probabilistic sampling methods with adaptive evolutionary computation and robust local search algorithms. This framework should meticulously construct a comprehensive fitness metric to assess candidate solutions, rigorously enforce the MKP's weight and volume constraints, and evaluate performance metrics based on the aggregate value of selected items. The heuristic must emphasize both the exploration of diverse solution landscapes and the exploitation of promising regions to enhance the discovery of optimal or highly effective solutions, ensuring a balance between computational efficiency and solution quality.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the normalized profit for each item\n    normalized_profit = prize / np.sum(prize)\n    \n    # Calculate the normalized weight for each item in each dimension\n    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]\n    \n    # Calculate the heuristic value for each item\n    heuristic = normalized_profit * np.prod(normalized_weight, axis=1)\n    \n    return heuristic",
      "fitness": 20.234799822958518,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_9.txt",
      "code_file": "coevolve/generation_4/code_9.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the normalized prize value for each item\n    normalized_prize = prize / np.sum(prize)\n    \n    # Calculate the normalized weight for each item in each dimension\n    normalized_weight = weight / np.sum(weight, axis=1, keepdims=True)\n    \n    # Construct the fitness metric by combining normalized prize and normalized weight\n    # The fitness metric is the ratio of normalized prize to the sum of normalized weights for each item\n    fitness = normalized_prize / np.sum(normalized_weight, axis=1)\n    \n    # Return the heuristics array\n    return fitness",
      "fitness": 21.447904857609462,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_7.txt",
      "code_file": "coevolve/generation_4/code_7.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming prize and weight are of shape (n,) and (n, m) respectively, and each dimension weight[i][j] is 1.\n    # We calculate the \"promise\" of each item as the ratio of its prize to the sum of weights across all dimensions.\n    # This assumes that all items are equally \"promising\" in each dimension, which is a simplification.\n    total_weight = weight.sum(axis=1)\n    heuristics = prize / total_weight\n    return heuristics",
      "fitness": 22.13304911812007,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_1.txt",
      "code_file": "coevolve/generation_4/code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming that all weights are 1 for each dimension (as per the problem description)\n    # Calculate the heuristic based on prize value\n    heuristics = prize / np.sum(weight, axis=1)\n    return heuristics",
      "fitness": 22.147152323676586,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_5.txt",
      "code_file": "coevolve/generation_4/code_5.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Assuming prize and weight have shape (n,) and (n, m) respectively.\n    # Each dimension weight has a constraint of 1.\n    \n    # Calculate the total weight capacity of the knapsack.\n    knapsack_capacity = np.sum(weight, axis=1)\n    \n    # Calculate the heuristic value for each item.\n    # The heuristic is a function of the ratio of the prize to the weight.\n    # Since the weight constraint is 1 for each dimension, we use the sum of weights as the total weight.\n    heuristic = prize / knapsack_capacity\n    \n    # Normalize the heuristic values to ensure they sum to 1.\n    heuristic /= np.sum(heuristic)\n    \n    return heuristic",
      "fitness": 22.155511125696243,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_4.txt",
      "code_file": "coevolve/generation_4/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the total weight for each item\n    total_weight = np.sum(weight, axis=1)\n    \n    # Calculate the heuristic value for each item\n    # Here we use a simple heuristic based on the ratio of prize to weight\n    # This heuristic assumes that the constraint for each dimension is 1\n    heuristic = prize / total_weight\n    \n    # Normalize the heuristic values to ensure they sum to 1\n    heuristic /= np.sum(heuristic)\n    \n    return heuristic",
      "fitness": 22.16800704604605,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_2.txt",
      "code_file": "coevolve/generation_4/code_2.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the total weight of each item\n    total_weight = np.sum(weight, axis=1)\n    \n    # Calculate the heuristic score for each item based on the prize-to-weight ratio\n    heuristic_scores = prize / total_weight\n    \n    # Normalize the heuristic scores to ensure they are non-negative\n    min_score = np.min(heuristic_scores)\n    heuristic_scores -= min_score\n    \n    # Return the heuristics array\n    return heuristic_scores",
      "fitness": 22.19530042831115,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_4/stdout_11.txt",
      "code_file": "coevolve/generation_4/code_11.py"
    }
  ]
}