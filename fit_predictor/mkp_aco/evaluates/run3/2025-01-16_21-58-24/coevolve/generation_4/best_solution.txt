Fitness: 20.234799822958518

Description:
Develop an integrated optimization framework for addressing the Multi-dimensional Knapsack Problem (MKP) that synergistically integrates probabilistic sampling methods with adaptive evolutionary computation and robust local search algorithms. This framework should meticulously construct a comprehensive fitness metric to assess candidate solutions, rigorously enforce the MKP's weight and volume constraints, and evaluate performance metrics based on the aggregate value of selected items. The heuristic must emphasize both the exploration of diverse solution landscapes and the exploitation of promising regions to enhance the discovery of optimal or highly effective solutions, ensuring a balance between computational efficiency and solution quality.

Code:
import numpy as np
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized profit for each item
    normalized_profit = prize / np.sum(prize)
    
    # Calculate the normalized weight for each item in each dimension
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate the heuristic value for each item
    heuristic = normalized_profit * np.prod(normalized_weight, axis=1)
    
    return heuristic