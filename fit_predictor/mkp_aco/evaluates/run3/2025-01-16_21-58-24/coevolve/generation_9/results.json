{
  "generation": 9,
  "description": "Design a stochastic hybrid optimization algorithm for the Multi-dimensional Knapsack Problem (MKP) that employs a heuristic based on the value-to-weight ratio to select items. The algorithm should balance exploration and exploitation by integrating a genetic algorithm for diversity and a Simulated Annealing (SA) for local search. The heuristic will prioritize items with a higher value-to-weight ratio, ensuring that the selected subset maximizes the total value while respecting the multi-dimensional weight and volume constraints. The fitness function will evaluate solutions based on constraint compliance and total value, aiming to minimize violations and enhance solution quality. Performance will be measured by the average solution value, the percentage of solutions meeting all constraints, and the computational efficiency, with a focus on achieving a balance between the exploration of diverse solution spaces and the exploitation of promising regions. The algorithm should follow a clear procedure, including initialization, selection of items based on value-to-weight ratio, genetic operators for evolution, and SA for refinement, followed by termination based on a predefined number of generations or convergence criteria.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio to ensure non-negative values\n    min_ratio = np.min(value_to_weight_ratio)\n    if min_ratio <= 0:\n        value_to_weight_ratio = -value_to_weight_ratio + 1\n    \n    # The heuristic is the inverse of the normalized value-to-weight ratio\n    heuristics = 1 / value_to_weight_ratio\n    return heuristics",
      "fitness": 9.86604457911397,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_0.txt",
      "code_file": "coevolve/generation_9/code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / np.sum(weight, axis=1)\n    \n    # The heuristic value is the negative of the value-to-weight ratio to maximize the selection\n    heuristics = -value_to_weight_ratio\n    \n    return heuristics",
      "fitness": 18.2478035611231,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_1.txt",
      "code_file": "coevolve/generation_9/code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio to ensure all values are non-negative\n    value_to_weight_ratio = np.abs(value_to_weight_ratio)\n    \n    # The heuristic is the value-to-weight ratio itself\n    heuristics = value_to_weight_ratio\n    return heuristics",
      "fitness": 22.111622726566118,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_6.txt",
      "code_file": "coevolve/generation_9/code_6.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    # Normalize the ratios to ensure they sum to 1\n    normalized_ratios = value_to_weight_ratio / value_to_weight_ratio.sum()\n    return normalized_ratios",
      "fitness": 22.114338169552774,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_11.txt",
      "code_file": "coevolve/generation_9/code_11.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio to get a heuristic score\n    max_ratio = np.max(value_to_weight_ratio)\n    heuristics = value_to_weight_ratio / max_ratio\n    \n    return heuristics",
      "fitness": 22.124460863322746,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_2.txt",
      "code_file": "coevolve/generation_9/code_2.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / np.sum(weight, axis=1)\n    \n    # Normalize the ratio to ensure a proper heuristic value\n    max_ratio = np.max(value_to_weight_ratio)\n    min_ratio = np.min(value_to_weight_ratio)\n    normalized_ratio = (value_to_weight_ratio - min_ratio) / (max_ratio - min_ratio)\n    \n    # Return the normalized value-to-weight ratio as the heuristic\n    return normalized_ratio",
      "fitness": 22.129498638183556,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_3.txt",
      "code_file": "coevolve/generation_9/code_3.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    # Return the heuristics based on the value-to-weight ratio\n    return value_to_weight_ratio",
      "fitness": 22.13785484334164,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_7.txt",
      "code_file": "coevolve/generation_9/code_7.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio by subtracting the minimum ratio\n    min_ratio = np.min(value_to_weight_ratio)\n    normalized_ratio = value_to_weight_ratio - min_ratio\n    \n    # Return the normalized value-to-weight ratio as the heuristic\n    return normalized_ratio",
      "fitness": 22.144547514492412,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_4.txt",
      "code_file": "coevolve/generation_9/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    return value_to_weight_ratio",
      "fitness": 22.167930069958636,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_8.txt",
      "code_file": "coevolve/generation_9/code_8.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    return value_to_weight_ratio",
      "fitness": 22.197428971870714,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_5.txt",
      "code_file": "coevolve/generation_9/code_5.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Return the value-to-weight ratio as the heuristic\n    return value_to_weight_ratio",
      "fitness": 22.230235224170144,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_10.txt",
      "code_file": "coevolve/generation_9/code_10.py"
    }
  ]
}