```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a sparsity factor based on the ratio
    sparsity_factor = 1 - (value_to_weight_ratio / np.max(value_to_weight_ratio))
    
    # Normalize the sparsity factor
    normalized_sparsity_factor = sparsity_factor / np.max(sparsity_factor)
    
    # Combine the normalized ratio with the normalized sparsity factor
    combined_heuristics = value_to_weight_ratio * normalized_sparsity_factor
    
    # Use a dynamic threshold based on the mean of the normalized ratio
    dynamic_threshold = np.mean(combined_heuristics)
    
    # Sparsify the heuristics by setting values below the dynamic threshold to zero
    heuristics = np.where(combined_heuristics > dynamic_threshold, combined_heuristics, 0)
    
    return heuristics
```
