```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a sparsity factor based on the ratio
    sparsity_factor = 1 - (value_to_weight_ratio / np.percentile(value_to_weight_ratio, 95))
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine the normalized ratio with the sparsity and density factors
    combined_heuristics = value_to_weight_ratio * (sparsity_factor + density_factor)
    
    # Use percentile threshold to select heuristics that are within the top 50%
    threshold = np.percentile(combined_heuristics, 50)
    heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    return heuristics
```
