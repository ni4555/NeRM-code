```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Adjust heuristic by adding a term based on the sum of the weights in each dimension
    heuristic_adjustment = np.sum(weight, axis=1)
    
    # Create a sparsified heuristic by setting low value-to-weight ratio items to zero
    sparsified_heuristic = np.where(value_to_weight_ratio > 0.5, 1 / value_to_weight_ratio + heuristic_adjustment, 0)
    
    return sparsified_heuristic
```
