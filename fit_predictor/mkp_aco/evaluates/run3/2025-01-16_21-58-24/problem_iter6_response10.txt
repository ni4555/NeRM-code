```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Incorporate problem dimensions into the heuristic factor
    heuristic_factor = value_to_weight_ratio * (1 + np.log(1 + len(weight)))
    
    # Normalize the heuristic factor by its maximum value
    max_factor = np.max(heuristic_factor)
    normalized_factor = heuristic_factor / max_factor
    
    # Calculate the distance from each item to the mean value-to-weight ratio
    mean_ratio = np.mean(value_to_weight_ratio)
    distance_to_mean = np.abs(value_to_weight_ratio - mean_ratio)
    
    # Calculate a variance-based factor to promote diversity
    variance = np.var(value_to_weight_ratio)
    variance_factor = 1 / (1 + variance)
    
    # Combine the normalized factor with the distance and variance factors
    combined_heuristics = normalized_factor * distance_to_mean * variance_factor
    
    # Apply a sparsity factor to enhance distinctiveness
    sparsity_factor = np.exp(-combined_heuristics)
    
    # Set elements with low heuristics to zero to sparsify the array
    sparsity_threshold = np.percentile(combined_heuristics, 25)
    heuristics = np.where(combined_heuristics >= sparsity_threshold, sparsity_factor, 0)
    
    return heuristics
```
