```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate density factor based on the value-to-weight ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Calculate the heuristic by combining the normalized ratio with the density factor
    combined_heuristics = value_to_weight_ratio * (1 + density_factor)
    
    # Introduce randomness to maintain heuristic diversity
    random_noise = np.random.normal(0, 0.01, size=combined_heuristics.shape)
    final_heuristics = combined_heuristics + random_noise
    
    # Apply constraints by considering only items that satisfy the weight and volume constraints
    # Assuming constraints are fixed to 1 for each dimension, check if the sum of weights is within the limit
    constraint_violation = weight.sum(axis=1) > 1
    final_heuristics[constraint_violation] = 0
    
    # Sparsify the heuristics by setting values below a threshold to zero
    threshold = np.percentile(final_heuristics, 25)
    sparsified_heuristics = np.where(final_heuristics >= threshold, final_heuristics, 0)
    
    return sparsified_heuristics
```
