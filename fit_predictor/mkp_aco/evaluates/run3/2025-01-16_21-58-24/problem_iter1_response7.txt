```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Apply a sparsity factor to the heuristics
    sparsity_factor = np.exp(-value_to_weight_ratio)
    
    # Combine factors to create a more complex heuristic
    heuristic_factor = (1 / value_to_weight_ratio) * (sparsity_factor + 0.5)
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = 0.1
    heuristics = np.where(heuristic_factor > threshold, heuristic_factor, 0)
    
    return heuristics
```
