```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.size
    
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a penalty factor for outliers based on the percentile of the ratio
    penalty_factor = np.abs(value_to_weight_ratio - np.percentile(value_to_weight_ratio, 75))
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine the normalized ratio with the penalty and density factors
    combined_heuristics = value_to_weight_ratio * (1 - penalty_factor + density_factor)
    
    # Introduce noise to enhance sparsity
    noise = np.random.normal(0, 0.1, size=combined_heuristics.shape)
    enhanced_sparsity = combined_heuristics + noise
    
    # Normalize the enhanced sparsity to ensure non-negative values
    min_enhanced = np.min(enhanced_sparsity)
    if min_enhanced < 0:
        enhanced_sparsity = enhanced_sparsity - min_enhanced
    
    # Introduce randomness with a controlled factor for diversity
    random_noise = np.random.rand(*enhanced_sparsity.shape)
    final_heuristics = enhanced_sparsity + random_noise
    
    # Normalize the final heuristics to ensure they are between 0 and 1
    max_heuristic = np.max(final_heuristics)
    final_heuristics = final_heuristics / max_heuristic
    
    # Apply thresholding to simplify decision-making
    threshold = 0.5
    heuristics = np.where(final_heuristics > threshold, final_heuristics, 0)
    
    return heuristics
```
