```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a penalty factor for outliers based on the interquartile range
    q1 = np.percentile(value_to_weight_ratio, 25)
    q3 = np.percentile(value_to_weight_ratio, 75)
    iqr = q3 - q1
    penalty_factor = np.where((value_to_weight_ratio < q1 - 1.5 * iqr) | (value_to_weight_ratio > q3 + 1.5 * iqr),
                              (value_to_weight_ratio - q1) / (q3 - q1),
                              0)
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine the normalized ratio with the penalty and density factors
    combined_heuristics = value_to_weight_ratio * (1 - penalty_factor + density_factor)
    
    # Sparsify the heuristics by setting lower elements to zero
    sparsity_threshold = np.percentile(combined_heuristics, 25)
    combined_heuristics[combined_heuristics < sparsity_threshold] = 0
    
    # Apply a randomness factor to enhance diversity
    randomness_factor = np.random.rand(len(combined_heuristics))
    heuristics = combined_heuristics * randomness_factor
    
    # Ensure the heuristics are non-negative
    heuristics = np.maximum(heuristics, 0)
    
    return heuristics
```
