```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Sparsify the heuristics by combining factors such as the normalized ratio,
    # its logarithm (to reduce the influence of extremely high ratios), a penalty
    # for high weights, and a multiplicative factor to introduce randomness.
    penalty = weight.sum(axis=1)
    multiplicative_factor = np.random.normal(loc=1.0, scale=0.1, size=value_to_weight_ratio.shape)
    heuristics = (1 / value_to_weight_ratio) * np.log(1 / value_to_weight_ratio) + 1 / penalty
    heuristics *= multiplicative_factor
    
    # Set elements with low heuristics to zero to sparsify the array
    sparsity_threshold = np.percentile(heuristics, 25)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
