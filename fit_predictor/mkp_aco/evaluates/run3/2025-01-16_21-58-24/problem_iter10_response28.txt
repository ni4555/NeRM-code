```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    value_to_weight_ratio = np.abs(value_to_weight_ratio) + 1e-8
    
    # Calculate a penalty factor for outliers based on the 75th percentile of the ratio
    penalty_factor = np.abs(value_to_weight_ratio - np.percentile(value_to_weight_ratio, 75))
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Incorporate diversity by adjusting the heuristic based on the standard deviation
    diversity_factor = np.exp(-np.square(value_to_weight_ratio - np.mean(value_to_weight_ratio)) / (2 * np.var(value_to_weight_ratio)))
    
    # Combine the normalized ratio with the penalty, density, and diversity factors
    combined_heuristics = value_to_weight_ratio * (1 - penalty_factor + density_factor + diversity_factor)
    
    # Normalize the combined heuristics to be between 0 and 1
    max_heuristic = np.max(combined_heuristics)
    min_heuristic = np.min(combined_heuristics)
    combined_heuristics = (combined_heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Apply a threshold to the heuristics to ensure sparsity
    threshold = 0.5
    heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    
    return heuristics
```
