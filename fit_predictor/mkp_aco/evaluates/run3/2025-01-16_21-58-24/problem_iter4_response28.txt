```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Factor 1: The value-to-weight ratio (to prioritize high-value items)
    ratio_factor = value_to_weight_ratio
    
    # Factor 2: The sum of the weights (to avoid overly heavy items)
    weight_factor = weight.sum(axis=1)
    
    # Factor 3: The number of non-zero weights (to avoid items with too many dimensions)
    dimension_factor = (weight != 0).sum(axis=1)
    
    # Factor 4: The average weight in each dimension (to balance the weight across dimensions)
    avg_weight_factor = np.mean(weight, axis=1)
    
    # Factor 5: The standard deviation of weights in each dimension (to avoid items with extreme weights)
    std_weight_factor = np.std(weight, axis=1)
    
    # Combine factors to create a heuristic
    heuristic = (ratio_factor * (1 / weight_factor) * (1 / (dimension_factor + 1))) * \
                (1 / (avg_weight_factor + 1)) * (1 / (std_weight_factor + 1))
    
    # Sparsify the heuristic by setting items with a low ratio, high weight, many dimensions, unbalanced weight, or extreme weight to zero
    sparsity_threshold = np.percentile(heuristic, 25)
    heuristic[heuristic < sparsity_threshold] = 0
    
    # Apply a selection pressure to prioritize items with higher heuristics
    selection_pressure = np.exp(heuristic)
    selection_pressure /= selection_pressure.sum()
    
    # Create a binary selection heuristic based on the selection pressure
    heuristics = np.random.rand(n)
    heuristics = np.where(heuristics < selection_pressure, 1, 0)
    
    return heuristics
```
