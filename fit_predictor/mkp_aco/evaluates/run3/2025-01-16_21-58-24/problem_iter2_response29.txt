```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Combine value-to-weight ratio with the number of dimensions
    # Use logarithmic functions for non-linear scaling to ensure that
    # the heuristic increases as the number of dimensions increases
    heuristic = np.log(value_to_weight_ratio + 1) * (1 + np.log(1 + len(weight)))
    
    # Sparsify heuristics by setting values below a threshold to zero
    # The threshold is dynamically set to a multiple of the average heuristic
    heuristic_threshold = np.mean(heuristic) * 0.95
    heuristics = np.where(heuristic > heuristic_threshold, heuristic, 0)
    
    return heuristics
```
