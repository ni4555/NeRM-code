```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Calculate a penalty factor for outliers based on the interquartile range
    q1 = np.percentile(value_to_weight_ratio, 25)
    q3 = np.percentile(value_to_weight_ratio, 75)
    iqr = q3 - q1
    penalty_factor = np.where((value_to_weight_ratio < q1 - 1.5 * iqr) | (value_to_weight_ratio > q3 + 1.5 * iqr),
                              (value_to_weight_ratio - q1) / (q3 - q1),
                              0)
    
    # Normalize the penalty factor
    max_penalty = np.max(penalty_factor)
    penalty_factor = penalty_factor / max_penalty
    
    # Calculate a density factor based on the ratio
    density_factor = value_to_weight_ratio / np.mean(value_to_weight_ratio)
    
    # Combine factors to create a heuristic
    heuristic = value_to_weight_ratio * (1 - penalty_factor) * (1 + density_factor)
    
    # Consider additional criteria:
    # Weight sum as a penalty
    weight_penalty = (weight.sum(axis=1) / weight.shape[1])**2
    
    # Non-zero weights dimension to balance item dimensionality
    dimension_factor = (weight != 0).sum(axis=1) / weight.shape[1]
    
    # Average weight in each dimension
    avg_weight_factor = np.mean(weight, axis=1)
    
    # Total value to prioritize high-value items
    value_factor = prize / prize.sum()
    
    # Combine all factors into the final heuristic
    combined_heuristic = (heuristic * weight_penalty *
                          (1 / (1 + dimension_factor)) *
                          (1 / (1 + avg_weight_factor)) *
                          (value_factor))
    
    # Normalize the heuristic to a range between 0 and 1
    min_combined_heuristic = np.min(combined_heuristic)
    max_combined_heuristic = np.max(combined_heuristic)
    normalized_heuristic = (combined_heuristic - min_combined_heuristic) / (max_combined_heuristic - min_combined_heuristic)
    
    # Introduce randomness for diversity
    diversity = np.random.rand(*normalized_heuristic.shape)
    
    # Sparsify the heuristic by keeping the top x% of values
    threshold = np.percentile(normalized_heuristic, 75)
    heuristics = np.where(normalized_heuristic > threshold, normalized_heuristic, 0)
    
    return heuristics
```
