```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.size
    m = weight.shape[1]
    
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / weight.sum(axis=1)
    
    # Normalize the value-to-weight ratio to ensure non-negative values
    min_ratio = np.min(value_to_weight_ratio)
    if min_ratio <= 0:
        value_to_weight_ratio = -value_to_weight_ratio + 1
    
    # Factor 1: The value-to-weight ratio (to prioritize high-value items)
    ratio_factor = value_to_weight_ratio
    
    # Factor 2: The sum of the weights (to avoid overly heavy items)
    weight_factor = weight.sum(axis=1)
    
    # Factor 3: The number of non-zero weights (to avoid items with too many dimensions)
    dimension_factor = (weight != 0).sum(axis=1)
    
    # Factor 4: The average weight in each dimension (to balance the weight across dimensions)
    avg_weight_factor = np.mean(weight, axis=1)
    
    # Factor 5: The sum of each dimension's weight (to consider individual constraints)
    dimension_constraints = weight.sum(axis=0)
    
    # Combine the factors with appropriate weights
    combined_heuristic = ratio_factor * (1 / weight_factor) * (1 / (dimension_factor + 1)) * (1 / (avg_weight_factor + 1)) * (1 / (dimension_constraints + 1))
    
    # Sparsify the heuristic to introduce diversity
    sparsity_threshold = np.percentile(combined_heuristic, 85)  # Use a lower percentile to increase diversity
    sparsified_heuristic = np.where(combined_heuristic > sparsity_threshold, combined_heuristic, 0)
    
    # Normalize the heuristic to ensure it is between 0 and 1
    min_combined = np.min(sparsified_heuristic)
    max_combined = np.max(sparsified_heuristic)
    normalized_heuristic = (sparsified_heuristic - min_combined) / (max_combined - min_combined)
    
    # Introduce diversity through mutation
    mutation_rate = 0.05
    random_indices = np.random.choice(len(normalized_heuristic), int(len(normalized_heuristic) * mutation_rate), replace=False)
    normalized_heuristic[random_indices] = 1 - normalized_heuristic[random_indices]
    
    return normalized_heuristic
```
