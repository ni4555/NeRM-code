```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Apply a non-linear transformation such as sigmoid to enhance sparsity
    non_linear_transformed_ratio = 1 / (1 + np.exp(-value_to_weight_ratio))
    # Apply a threshold to maintain a balance between global and local features
    thresholded_ratio = np.where(non_linear_transformed_ratio > 0.5, non_linear_transformed_ratio, 0)
    # Include a diversity factor by adding a random noise component
    diversity_factor = np.random.rand(*thresholded_ratio.shape) * 0.1
    final_heuristics = thresholded_ratio + diversity_factor
    return final_heuristics
```
