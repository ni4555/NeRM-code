```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by the sum of weights to emphasize high-value items
    normalized_prize = prize / np.sum(weight, axis=1)
    # Apply a non-linear transformation to amplify valuable features
    non_linear_transform = np.exp(normalized_prize) / (1 + np.exp(normalized_prize))
    # Integrate sparsity by setting lower values to zero and higher values to 1
    binary_sparsity = np.where(non_linear_transform > 0.5, 1, 0)
    # Enhance diversity by adding a random perturbation to the binary sparsity
    diversity_perturbation = np.random.rand(*binary_sparsity.shape) < 0.1
    heuristics = binary_sparsity * diversity_perturbation
    return heuristics
```
