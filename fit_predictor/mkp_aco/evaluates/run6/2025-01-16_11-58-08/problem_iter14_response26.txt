```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by the sum of weights for each item
    normalized_prize = prize / np.sum(weight, axis=1)
    # Scale the normalized prize using a logarithmic transformation to emphasize high-value items
    scaled_prize = np.log(1 + normalized_prize)
    # Apply a dynamic threshold to create sparsity in the heuristics
    threshold = 0.1
    heuristics = np.where(scaled_prize > threshold, scaled_prize, 0)
    # Introduce diversity by adding the sum of the weights to the heuristics
    heuristics += np.sum(weight, axis=1)
    # Adjust variance by squaring the heuristics and applying a threshold
    variance_adjusted_heuristics = np.where(np.abs(heuristics) > 0.5, heuristics ** 2, 0)
    return variance_adjusted_heuristics
```
