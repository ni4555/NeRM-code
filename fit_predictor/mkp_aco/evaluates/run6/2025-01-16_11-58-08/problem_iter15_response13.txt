```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight to scale them to a similar range
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    weight_normalized = (weight - np.min(weight, axis=1, keepdims=True)) / (np.max(weight, axis=1, keepdims=True) - np.min(weight, axis=1, keepdims=True))
    
    # Use log scaling for weight to prevent dominance by items with very high weight
    log_weight = np.log(weight_normalized + 1e-8)  # Adding a small constant to avoid log(0)
    
    # Calculate value-to-weight ratio
    value_to_weight_ratio = prize_normalized / log_weight
    
    # Use log scaling on the ratio to emphasize high-value items
    log_scaled_ratio = np.log(value_to_weight_ratio + 1e-8)
    
    # Amplify high-value features by multiplying the log-scaled ratio with the original prize
    amplified_heuristics = log_scaled_ratio * prize_normalized
    
    # Incorporate randomness by adding a small noise to encourage diversity
    noise = np.random.rand(*amplified_heuristics.shape)
    random_heuristics = amplified_heuristics + noise
    
    # Normalize the random heuristics to ensure they sum to 1
    heuristics = random_heuristics / np.sum(random_heuristics)
    
    return heuristics
```
