```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight for each item
    prize_weight_ratio = prize / np.sum(weight, axis=1)
    # Incorporate a penalty for weight based on the ratio
    penalty = np.sqrt(1 / np.sum(weight, axis=1)) * np.sqrt(prize_weight_ratio)
    # Normalize the heuristic by dividing by the sum of penalties
    normalized_heuristic = prize_weight_ratio / np.sum(penalty)
    # Sparsify the heuristic by setting a threshold below which heuristics are set to zero
    threshold = np.mean(normalized_heuristic)
    sparsified_heuristic = np.where(normalized_heuristic > threshold, normalized_heuristic, 0)
    return sparsified_heuristic
```
