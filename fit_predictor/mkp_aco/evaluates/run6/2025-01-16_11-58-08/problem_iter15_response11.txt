```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to have a mean of 1 and a standard deviation of 1
    normalized_prize = (prize - np.mean(prize)) / np.std(prize)
    
    # Apply log scaling to weight to emphasize high weights and control sparsity
    log_weight = np.log(weight + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Calculate value-to-weight ratio and normalize it
    value_to_weight_ratio = normalized_prize / np.sum(log_weight, axis=1)
    
    # Introduce sparsity by setting ratios that are too low or too high to zero
    sparsity_threshold = 0.01
    value_to_weight_ratio = np.where(np.abs(value_to_weight_ratio) < sparsity_threshold, 0, value_to_weight_ratio)
    
    # Introduce randomness for diversity by adding a small random noise
    random_noise = np.random.normal(0, 0.01, value_to_weight_ratio.shape)
    value_to_weight_ratio += random_noise
    
    # Normalize the value-to-weight ratio to ensure it sums to 1
    heuristics = value_to_weight_ratio / np.sum(value_to_weight_ratio)
    return heuristics
```
