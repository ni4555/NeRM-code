```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio and applying a threshold
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2) * (value_to_weight_ratio > 0.25)
    # Use diversity metric to balance global and local optimization
    diversity_metric = np.max(non_linear_scaled_ratio, axis=1)
    # Normalize the diversity metric to enhance sparsity
    normalized_diversity = (diversity_metric - np.min(diversity_metric)) / (np.max(diversity_metric) - np.min(diversity_metric))
    # Combine factors: non-linear ratio and diversity metric
    combined_heuristics = non_linear_scaled_ratio * normalized_diversity
    # Apply sparsity filter
    sparsified_heuristics = np.where(combined_heuristics > 0.1, combined_heuristics, 0)
    return sparsified_heuristics
```
