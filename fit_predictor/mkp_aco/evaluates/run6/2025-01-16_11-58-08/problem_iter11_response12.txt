```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio and applying a threshold
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2) * (value_to_weight_ratio > 0.25)
    # Incorporating diversity by considering the standard deviation
    diversity_factor = np.std(non_linear_scaled_ratio)
    # Combining factors: non-linear ratio and diversity
    combined_factor = non_linear_scaled_ratio + diversity_factor
    # Selective sparsity based on a combination of factors
    sparsified_factor = np.where(combined_factor > 0.1, combined_factor, 0)
    return sparsified_factor
```
