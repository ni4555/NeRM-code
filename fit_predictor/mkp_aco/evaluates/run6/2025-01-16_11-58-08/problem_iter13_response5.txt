```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio and applying a threshold
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2) * (value_to_weight_ratio > 0.25)
    # Integrate sparsity, diversity, and variance by normalizing the non-linear scaled ratio
    normalized_ratio = non_linear_scaled_ratio / np.max(non_linear_scaled_ratio)
    # Add a variance term to enhance diversity
    variance_term = np.var(value_to_weight_ratio)
    # Combine the normalized ratio and variance term
    combined_heuristics = normalized_ratio + variance_term
    # Apply a threshold to introduce sparsity
    sparsified_heuristics = np.where(combined_heuristics > 0.1, combined_heuristics, 0)
    return sparsified_heuristics
```
