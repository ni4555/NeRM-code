```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Enhance sparsity and variance by applying a logarithm transformation to the ratio
    log_transformed_ratio = np.log(value_to_weight_ratio + 1)  # Adding 1 to avoid log(0)
    # Amplify features by squaring the log-transformed ratio
    squared_log_ratio = log_transformed_ratio ** 2
    # Introduce diversity by adding a random component to the squared ratio
    random_component = np.random.random(size=squared_log_ratio.shape) * 0.1
    heuristics = squared_log_ratio + random_component
    # Set a threshold to control sparsity
    threshold = 0.5
    heuristics = np.where(heuristics > threshold, heuristics, 0)
    return heuristics
```
