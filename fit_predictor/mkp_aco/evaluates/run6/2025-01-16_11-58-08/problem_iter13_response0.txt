```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to emphasize high-value items
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    # Normalize the weights to maintain balance between weight dimensions
    normalized_weight = (weight - np.min(weight, axis=1, keepdims=True)) / (np.max(weight, axis=1, keepdims=True) - np.min(weight, axis=1, keepdims=True))
    # Combine normalized prize and weight to determine heuristic
    combined_heuristic = normalized_prize * (1 / np.sum(normalized_weight, axis=1))
    # Apply a non-linear transformation to the heuristic
    non_linear_heuristic = np.exp(combined_heuristic)
    # Sparsify the heuristics by setting a threshold
    thresholded_heuristic = np.where(non_linear_heuristic > 1, non_linear_heuristic, 0)
    return thresholded_heuristic
```
