```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize values
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    # Use log scaling to reduce the impact of high prize values and manage variance
    log_scaled_prize = np.log(normalized_prize + 1)
    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = log_scaled_prize / np.sum(weight, axis=1)
    # Introduce sparsity by setting ratios below a threshold to zero
    sparsified_ratio = np.where(value_to_weight_ratio > 0.1, value_to_weight_ratio, 0)
    # Use random elements to introduce diversity and randomness
    random_factor = np.random.rand(len(value_to_weight_ratio))
    # Combine the sparsified ratio with the random factor
    combined_heuristics = sparsified_ratio * random_factor
    # Normalize the heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    return heuristics
```
