```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight for each item
    value_per_weight = prize / np.sum(weight, axis=1)
    # Calculate the total value per weight for each dimension
    total_value_per_weight = np.sum(value_per_weight, axis=0)
    # Normalize the value per weight to sum to 1 for each dimension
    normalized_value_per_weight = value_per_weight / total_value_per_weight
    # Initialize heuristics with the normalized value per weight
    heuristics = normalized_value_per_weight
    # Initialize sparsity factors for each item
    sparsity_factors = np.ones_like(value_per_weight)
    # Loop over each weight dimension
    for i in range(weight.shape[1]):
        # Find items where the weight in this dimension is below a threshold
        sparsity_mask = weight[:, i] < 0.1
        # Set the heuristics for these items to 0
        heuristics[sparsity_mask] = 0
        # Calculate the sum of heuristics for each item, excluding sparsified items
        item_sum = np.sum(heuristics, axis=0)
        # Normalize the heuristics by the sum, excluding sparsified items
        item_sum[sparsity_mask] = 1
        heuristics /= item_sum
    return heuristics
```
