```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio and emphasizing high values
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2) * (value_to_weight_ratio > 0.5)
    # Incorporating diversity by penalizing low-value to weight ratios
    diversity_factor = np.exp(-value_to_weight_ratio * (value_to_weight_ratio < 0.1))
    # Sparsifying the heuristics based on the combined factor
    combined_heuristics = non_linear_scaled_ratio * diversity_factor
    # Normalize heuristics to be between 0 and 1
    heuristics = (combined_heuristics - np.min(combined_heuristics)) / (np.max(combined_heuristics) - np.min(combined_heuristics))
    # Ensure that all heuristics are within the range [0, 1]
    heuristics = np.clip(heuristics, 0, 1)
    return heuristics
```
