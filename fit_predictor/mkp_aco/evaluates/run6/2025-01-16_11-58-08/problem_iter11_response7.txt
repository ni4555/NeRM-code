```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio and applying a threshold
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2) * (value_to_weight_ratio > 0.25)
    # Incorporate diversity by considering both positive and negative ratios
    diversity_factor = np.abs(non_linear_scaled_ratio)
    # Balance simplicity with non-linear transformations by combining the ratios
    balanced_ratio = diversity_factor * (value_to_weight_ratio > 0.1)
    # Sparsify based on the non-linear transformation
    sparsified_ratio = np.where(balanced_ratio > 0.1, balanced_ratio, 0)
    return sparsified_ratio
```
