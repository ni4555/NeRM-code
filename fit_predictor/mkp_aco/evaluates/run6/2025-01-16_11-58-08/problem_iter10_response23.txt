```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize input to bring all values to a common scale
    min_ratio = np.min(prize / np.sum(weight, axis=1))
    max_ratio = np.max(prize / np.sum(weight, axis=1))
    normalized_ratio = (prize / np.sum(weight, axis=1) - min_ratio) / (max_ratio - min_ratio)
    
    # Apply a non-linear transformation to emphasize high values
    non_linear_transformed_ratio = np.log1p(normalized_ratio)  # Using log1p to avoid log(0)
    
    # Calculate the weighted average of the non-linear transformation and the normalized ratio
    combined_ratio = non_linear_transformed_ratio * normalized_ratio
    
    # Calculate the standard deviation of the combined values
    std_dev = np.std(combined_ratio)
    
    # Apply smoothing to the standard deviation
    smoothed_std_dev = std_dev * 0.8
    
    # Sparsify the heuristics by setting elements below a certain smoothed standard deviation threshold to zero
    threshold = smoothed_std_dev * 0.5
    heuristics = np.where(combined_ratio > threshold, combined_ratio, 0)
    
    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
