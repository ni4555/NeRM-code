```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by taking the square root and applying a threshold
    non_linear_scaled_ratio = np.sqrt(value_to_weight_ratio) * (value_to_weight_ratio > 0.25)
    # Balancing normalization by using a min-max normalization
    normalized_ratio = (non_linear_scaled_ratio - np.min(non_linear_scaled_ratio)) / (np.max(non_linear_scaled_ratio) - np.min(non_linear_scaled_ratio))
    # Maintain sparsity by only keeping elements above a certain threshold
    sparsified_ratio = np.where(normalized_ratio > 0.5, normalized_ratio, 0)
    return sparsified_ratio
```
