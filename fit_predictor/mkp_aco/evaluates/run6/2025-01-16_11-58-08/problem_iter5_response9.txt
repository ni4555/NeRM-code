```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Combine factors: value-to-weight ratio, squared ratio, and sparsity
    combined_factor = value_to_weight_ratio * (value_to_weight_ratio ** 2) * (1 / (1 + np.sum(weight, axis=1)))
    # Apply a non-linear scaling and threshold-based filtering
    non_linear_scaled_factor = (combined_factor ** 1.5) * (combined_factor > 0.5)
    # Normalize the factor by its maximum value
    normalized_factor = non_linear_scaled_factor / np.max(non_linear_scaled_factor)
    # Sparsify by setting elements below a certain threshold to zero
    threshold = 0.1  # Example threshold
    sparsified_factor = np.where(normalized_factor > threshold, normalized_factor, 0)
    return sparsified_factor
```
