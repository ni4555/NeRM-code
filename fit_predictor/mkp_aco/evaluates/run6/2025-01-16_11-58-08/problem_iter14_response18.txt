```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to emphasize high-value items
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the variance to enhance diversity
    variance = np.var(prize)
    
    # Calculate the sum of weights for each item
    sum_weights = np.sum(weight, axis=1)
    
    # Combine factors: normalized prize, variance, and inverse of sum of weights
    combined_factors = normalized_prize * variance * (1 / sum_weights)
    
    # Apply a non-linear transformation to amplify valuable features
    non_linear_transform = np.exp(combined_factors)
    
    # Introduce sparsity by setting a threshold and setting values below the threshold to zero
    threshold = np.percentile(non_linear_transform, 90)  # Use the 90th percentile as a dynamic threshold
    sparsified_non_linear_transform = np.where(non_linear_transform > threshold, non_linear_transform, 0)
    
    return sparsified_non_linear_transform
```
