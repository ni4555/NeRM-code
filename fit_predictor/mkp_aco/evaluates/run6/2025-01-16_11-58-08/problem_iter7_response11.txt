```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio and normalizing for scale
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2) / (np.sum(value_to_weight_ratio ** 2) + 1e-5)
    # Use a non-linear function to enhance sparsity
    sparsified_ratio = np.exp(non_linear_scaled_ratio) / (np.sum(np.exp(non_linear_scaled_ratio)) + 1e-5)
    # Ensure diversity and balance by incorporating variance in the sparsity
    variance_term = np.var(non_linear_scaled_ratio)
    heuristics = sparsified_ratio + variance_term
    # Trim low values to ensure diversity
    heuristics[heuristics < 0.01] = 0
    return heuristics
```
