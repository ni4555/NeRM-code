```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio and applying a threshold
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2) * (value_to_weight_ratio > 0.25)
    # Normalize for scale and balance sparsity by clipping the ratio
    normalized_ratio = np.clip(non_linear_scaled_ratio, 0, 1)
    # Apply multiple features with non-linear transformations
    # For example, using a logarithmic transformation to ensure positive values
    log_transformed_ratio = np.log1p(normalized_ratio)
    # Use the variance to balance the normalization and variance
    variance_threshold = np.var(log_transformed_ratio)
    # Apply a variance-based sparsity
    sparsified_ratio = np.where(log_transformed_ratio > variance_threshold, log_transformed_ratio, 0)
    return sparsified_ratio
```
