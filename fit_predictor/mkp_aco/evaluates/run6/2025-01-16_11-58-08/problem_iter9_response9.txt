```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by taking the exponential of the ratio
    non_linear_scaled_ratio = np.exp(value_to_weight_ratio)
    # Applying thresholds to enhance sparsity
    thresholded_ratio = np.where(non_linear_scaled_ratio > 1, non_linear_scaled_ratio, 0)
    # Balancing global and local selection by considering both value and diversity
    diversity_metric = np.where(np.abs(thresholded_ratio) > 0.5, thresholded_ratio, 0)
    # Filter for diversity by excluding items with the same value
    unique_items = np.where(np.unique(thresholded_ratio, axis=0) != thresholded_ratio, thresholded_ratio, 0)
    return unique_items
```
