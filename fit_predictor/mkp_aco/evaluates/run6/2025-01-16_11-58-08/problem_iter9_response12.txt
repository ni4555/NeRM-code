```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio and apply a non-linear transformation (e.g., log10)
    non_linear_ratio = np.log10(prize) - np.sum(np.log10(weight), axis=1)
    # Apply a threshold to enhance sparsity
    thresholded_ratio = np.where(non_linear_ratio > 0.5, non_linear_ratio, 0)
    # Balance between global and local by considering the total weight of the top-k items
    total_weight_of_top_k = np.sum(np.argsort(thresholded_ratio)[-3:], axis=0)
    # Normalize the thresholded ratios based on the total weight of the top-k items
    normalized_ratio = thresholded_ratio / (total_weight_of_top_k + 1e-6)
    return normalized_ratio
```
