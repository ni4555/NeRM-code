```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by taking the square root of the ratio and applying a threshold
    non_linear_scaled_ratio = np.sqrt(value_to_weight_ratio) * (value_to_weight_ratio > 0.25)
    # Enhance sparsity by using a combination of a threshold and absolute value
    combined_sparsity = np.where(np.abs(non_linear_scaled_ratio) > 0.05, non_linear_scaled_ratio, 0)
    # Apply a balance between global and local heuristics by considering both the individual and the average ratio
    global_heuristic = np.max(combined_sparsity, axis=1)
    return np.column_stack((global_heuristic, combined_sparsity))
```
