```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by applying a logarithmic transformation to amplify differences
    log_scaled_ratio = np.log1p(value_to_weight_ratio)
    # Thresholding to reduce the influence of low ratios
    thresholded_ratio = np.where(log_scaled_ratio > 0.1, log_scaled_ratio, 0)
    # Sparsity by using a soft thresholding technique, avoiding extreme values
    sparsified_ratio = np.where(np.abs(thresholded_ratio) > 0.05, thresholded_ratio, 0)
    return sparsified_ratio
```
