```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Normalize ratios and apply non-linear transformation (e.g., exponential)
    normalized_ratio = value_to_weight_ratio / np.max(value_to_weight_ratio)
    non_linear_transformed_ratio = np.exp(normalized_ratio)
    
    # Enhance sparsity by filtering for diversity using a threshold
    diversity_filtered_ratio = np.where(non_linear_transformed_ratio > 1, non_linear_transformed_ratio, 0)
    
    # Balance global and local considerations by considering both high value and diversity
    balanced_heuristics = diversity_filtered_ratio * (np.argsort(-prize) < 0.1 * len(prize))
    
    return balanced_heuristics
```
