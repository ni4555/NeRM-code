```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize vector
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the standardized weights for each dimension
    std_weight = np.std(weight, axis=1)
    
    # Inverse of the standard deviation of weights, to account for sparsity
    inverse_std_weight = 1 / (std_weight + 1e-8)
    
    # Calculate the combined heuristic value for each item
    combined = normalized_prize * inverse_std_weight
    
    # Use a dynamic threshold based on the distribution of the combined heuristic values
    sorted_combined = np.sort(combined)
    threshold_index = np.searchsorted(sorted_combined, np.percentile(combined, 90))
    threshold = sorted_combined[threshold_index]
    
    # Apply the threshold to create the heuristic vector
    heuristics = np.where(combined > threshold, combined, 0)
    
    return heuristics
```
