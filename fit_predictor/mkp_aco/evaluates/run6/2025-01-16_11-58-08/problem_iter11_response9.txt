```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to the range of 0 to 1
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    # Normalize weights to the range of 0 to 1
    normalized_weight = (weight - np.min(weight, axis=1, keepdims=True)) / (np.max(weight, axis=1, keepdims=True) - np.min(weight, axis=1, keepdims=True))
    # Calculate value to weight ratio and emphasize high values by increasing their ratio
    value_to_weight_ratio = normalized_prize / np.sum(normalized_weight, axis=1)
    value_to_weight_ratio = value_to_weight_ratio * (1 + np.log10(value_to_weight_ratio))
    # Apply a non-linear transformation and incorporate diversity by considering the variance
    diversity = np.sum((value_to_weight_ratio - np.mean(value_to_weight_ratio)) ** 2)
    non_linear_transformed_ratio = value_to_weight_ratio * (1 + diversity / np.sum(value_to_weight_ratio))
    # Sparsify based on a non-linear transformation
    sparsified_ratio = np.where(non_linear_transformed_ratio > 0.1, non_linear_transformed_ratio, 0)
    return sparsified_ratio
```
