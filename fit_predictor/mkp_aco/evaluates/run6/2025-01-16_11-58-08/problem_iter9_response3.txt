```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio and applying a threshold
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2) * (value_to_weight_ratio > 0.25)
    # Use multiple metrics to determine promise: average over dimensions, sum of absolute ratios
    avg_non_linear_scaled_ratio = np.mean(non_linear_scaled_ratio, axis=1)
    sum_non_linear_scaled_ratio = np.sum(np.abs(non_linear_scaled_ratio), axis=1)
    # Combine metrics into a single heuristic score
    combined_heuristics = (avg_non_linear_scaled_ratio + sum_non_linear_scaled_ratio) * (non_linear_scaled_ratio > 0.1)
    # Filter for diversity by setting all but the top 'k' highest values to zero
    # 'k' can be adjusted to control the sparsity level
    k = 5
    sorted_indices = np.argsort(combined_heuristics)[::-1]
    top_indices = sorted_indices[:k]
    sparsified_heuristics = np.zeros_like(combined_heuristics)
    sparsified_heuristics[sorted_indices] = combined_heuristics[sorted_indices]
    sparsified_heuristics[~np.isin(sorted_indices, top_indices)] = 0
    return sparsified_heuristics
```
