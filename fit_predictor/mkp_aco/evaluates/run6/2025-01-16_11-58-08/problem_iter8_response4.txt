```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    heuristics = value_to_weight_ratio * (value_to_weight_ratio >= 0.5)
    non_linear_scaled_ratio = np.log(heuristics + 1)  # Apply non-linear scaling
    # Use a filter that retains values above a certain threshold to introduce sparsity
    sparsity_filter = non_linear_scaled_ratio > np.percentile(non_linear_scaled_ratio, 90)
    # Apply the sparsity filter to introduce diversity
    final_heuristics = np.where(sparsity_filter, non_linear_scaled_ratio, 0)
    return final_heuristics
```
