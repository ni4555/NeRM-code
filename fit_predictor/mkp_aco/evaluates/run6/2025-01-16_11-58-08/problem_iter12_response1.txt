```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize values using a more meaningful normalization
    normalized_prize = (prize - np.mean(prize)) / np.std(prize)
    
    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Apply a non-linear transformation by taking the logarithm of the ratio
    non_linear_ratio = np.log1p(value_to_weight_ratio)
    
    # Incorporate diversity by focusing on the weighted variance of the ratio
    weighted_variance = np.sum(weight * (value_to_weight_ratio - np.mean(value_to_weight_ratio))**2) / np.sum(weight)
    
    # Combine the non-linear ratio with the weighted variance
    combined_heuristic = non_linear_ratio * weighted_variance
    
    # Use a dynamic sparsity threshold based on the 90th percentile of the heuristic values
    sparsity_threshold = np.percentile(combined_heuristic, 90)
    
    # Apply sparsity by setting values below the threshold to zero
    sparsified_heuristic = np.where(combined_heuristic >= sparsity_threshold, combined_heuristic, 0)
    
    return sparsified_heuristic
```
