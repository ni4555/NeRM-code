```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize to weight ratio for each item and dimension
    normalized_ratio = prize / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate the average of the normalized ratio for each dimension
    avg_normalized_ratio = np.mean(normalized_ratio, axis=0)
    
    # Calculate the difference between each normalized ratio and the average ratio
    diff = normalized_ratio - avg_normalized_ratio
    
    # Calculate the standard deviation of the differences for each dimension
    std_dev = np.std(diff, axis=0)
    
    # Sparsify the heuristics by setting elements below a certain standard deviation threshold to zero
    threshold = std_dev * 0.5
    heuristics = np.where(diff > threshold, diff, 0)
    
    # Normalize the heuristics to maintain diversity while ensuring they sum to 1
    total_nonzero = np.sum(heuristics)
    heuristics /= total_nonzero
    
    return heuristics
```
