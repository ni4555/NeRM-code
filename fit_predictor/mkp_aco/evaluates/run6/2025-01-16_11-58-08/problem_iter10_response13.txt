```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to a range between 0 and 1
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Normalize the value-to-weight ratio to maintain sparsity
    value_to_weight_ratio = normalized_prize / np.sum(weight, axis=1)
    
    # Apply a non-linear transformation to emphasize higher values
    non_linear_transformed_ratio = np.exp(value_to_weight_ratio)
    
    # Calculate the standard deviation of the non-linear transformed ratio
    std_dev = np.std(non_linear_transformed_ratio)
    
    # Apply smoothing to the standard deviation
    smoothed_std_dev = std_dev * 0.8
    
    # Use the smoothed standard deviation to sparsify the heuristics
    heuristics = non_linear_transformed_ratio / np.sum(non_linear_transformed_ratio)
    heuristics = np.where(heuristics > smoothed_std_dev * 0.5, heuristics, 0)
    
    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
