```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2)
    # Aggregating performance by taking the average across dimensions
    aggregated_performance = np.mean(non_linear_scaled_ratio, axis=1)
    # Normalizing for sparsity by dividing by the maximum value in the aggregated performance array
    normalized_performance = aggregated_performance / np.max(aggregated_performance)
    # Threshold-based filtering for sparsity
    threshold = 0.1  # Example threshold
    sparsified_performance = np.where(normalized_performance > threshold, normalized_performance, 0)
    return sparsified_performance
```
