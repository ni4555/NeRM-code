```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio
    normalized_ratio = prize / np.sum(weight, axis=1)
    
    # Initialize heuristics based on the normalized ratio
    heuristics = normalized_ratio
    
    # Apply a threshold to emphasize items with higher ratios
    threshold = np.max(heuristics) * 0.5
    heuristics[heuristics < threshold] = 0
    
    # Add a diversity factor based on the sparsity of the weight matrix
    sparsity_score = np.sum(weight == 0) / (weight.shape[0] * weight.shape[1])
    diversity_heuristic = (1 - sparsity_score) * 0.2
    
    # Combine the main heuristics with the diversity factor
    heuristics += diversity_heuristic
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
