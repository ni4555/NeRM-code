```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    non_linear_scaled_ratio = np.exp(value_to_weight_ratio)
    thresholded_ratio = np.where(non_linear_scaled_ratio > 1, non_linear_scaled_ratio, 0)
    
    # Calculate diversity by checking the variance within each item's weight dimensions
    diversity_metric = np.var(weight, axis=1)
    
    # Apply a transformation to balance diversity and value
    balanced_metrics = np.tanh(thresholded_ratio + diversity_metric)
    
    # Apply a non-linear transformation to ensure non-negative heuristics
    heuristics = np.log(1 + np.exp(balanced_metrics))
    
    return heuristics
```
