```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to emphasize high-value items
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the average weight per dimension
    average_weight = np.mean(weight, axis=1)
    
    # Create a heuristic based on normalized prize and inverse average weight
    heuristic = normalized_prize / (average_weight ** 0.5)
    
    # Apply a non-linear transformation by squaring the heuristic
    non_linear_heuristic = heuristic ** 2
    
    # Sparsify the heuristic by setting values below a threshold to zero
    sparsified_heuristic = np.where(non_linear_heuristic > 0.1, non_linear_heuristic, 0)
    
    return sparsified_heuristic
```
