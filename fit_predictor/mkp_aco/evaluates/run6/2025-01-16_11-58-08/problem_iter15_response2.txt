```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Apply log scaling to the ratio to penalize zero weights and emphasize higher values
    log_scaled_ratio = np.log(value_to_weight_ratio + 1)
    # Introduce randomness to promote diversity
    random_factor = np.random.rand(*log_scaled_ratio.shape)
    # Combine the log scaled ratio with a randomness factor
    combined_heuristics = log_scaled_ratio * random_factor
    # Normalize the combined heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    # Amplify high-value features by increasing the impact of high combined heuristics
    amplified_heuristics = heuristics * (1 + (heuristics > 0.5))
    # Apply sparsification by setting values below a certain threshold to zero
    sparsified_heuristics = np.where(amplified_heuristics > 0.1, amplified_heuristics, 0)
    return sparsified_heuristics
```
