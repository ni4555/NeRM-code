```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize vector
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the inverse of the weight for each dimension
    inverse_weight = 1 / np.sum(weight, axis=1)
    
    # Combine normalized prize and inverse weight
    combined_score = normalized_prize * inverse_weight
    
    # Apply a variance-based sparsity
    variance_threshold = np.mean(combined_score ** 2)
    sparsified_score = np.where(combined_score ** 2 > variance_threshold, combined_score, 0)
    
    # Apply diversity by ensuring the minimum sparsity threshold
    diversity_threshold = np.min(sparsified_score[sparsified_score > 0])
    sparsified_score = np.where(sparsified_score > diversity_threshold, sparsified_score, 0)
    
    return sparsified_score
```
