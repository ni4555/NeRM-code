```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Normalize the ratio to a range between 0 and 1
    normalized_ratio = (value_to_weight_ratio - np.min(value_to_weight_ratio)) / (np.max(value_to_weight_ratio) - np.min(value_to_weight_ratio))
    # Apply a non-linear transformation to emphasize higher values
    non_linear_transformed_ratio = np.exp(normalized_ratio)
    # Apply a logarithmic transformation to balance the influence of high and low ratios
    log_transformed_ratio = np.log(1 + non_linear_transformed_ratio)
    # Combine the transformed ratio with the original ratio for diversity
    combined_ratio = log_transformed_ratio * value_to_weight_ratio
    # Sparsify the heuristics by setting a threshold
    heuristics = np.where(combined_ratio > 1.5, combined_ratio, 0)
    # Normalize the final heuristics to ensure a good distribution
    heuristics = heuristics / np.sum(heuristics)
    return heuristics
```
