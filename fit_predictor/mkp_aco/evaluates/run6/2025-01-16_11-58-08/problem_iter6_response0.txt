```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the inverse of the average weight across dimensions
    avg_weight = np.mean(weight, axis=1)
    inverse_avg_weight = 1 / (avg_weight + 1e-8)  # Adding a small value to avoid division by zero
    
    # Combine normalized prize and inverse average weight
    combined = normalized_prize * inverse_avg_weight
    
    # Calculate the standard deviation of the combined values
    std_dev = np.std(combined)
    
    # Create a heuristics array that is high for items with high combined value and moderate standard deviation
    heuristics = combined - std_dev
    
    # Normalize the heuristics to ensure they sum to 1 and avoid negative values
    heuristics = np.maximum(heuristics, 0)
    total_nonzero = np.sum(heuristics)
    heuristics /= total_nonzero
    
    return heuristics
```
