```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2)
    # Aggregate performance by summing across dimensions
    aggregated_performance = np.sum(non_linear_scaled_ratio, axis=1)
    # Normalize for sparsity by dividing by the number of non-zero items
    sparsity_normalized_performance = aggregated_performance / np.count_nonzero(aggregated_performance)
    # Apply domain-specific insights: favoring items with higher ratio and avoiding zero weight items
    domain_specific_insight = sparsity_normalized_performance * (prize > 0)
    # Threshold-based filtering for sparsity
    threshold = 0.1  # Example threshold
    sparsified_insight = np.where(domain_specific_insight > threshold, domain_specific_insight, 0)
    return sparsified_insight
```
