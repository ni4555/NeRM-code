```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Normalize the ratio to emphasize high values
    normalized_ratio = (value_to_weight_ratio - np.min(value_to_weight_ratio)) / (np.max(value_to_weight_ratio) - np.min(value_to_weight_ratio))
    # Incorporate diversity by adding a random factor that introduces variability
    random_factor = np.random.rand(len(normalized_ratio))
    # Apply non-linear transformation and balance simplicity with non-linearity
    non_linear_transformed_ratio = np.log1p(normalized_ratio)
    # Introduce sparsity by setting values below a threshold to zero
    threshold = 0.1
    sparsified_ratio = np.where(non_linear_transformed_ratio > threshold, non_linear_transformed_ratio, 0)
    # Combine the random factor with the transformed ratio to maintain diversity
    combined_heuristic = sparsified_ratio * random_factor
    return combined_heuristic
```
