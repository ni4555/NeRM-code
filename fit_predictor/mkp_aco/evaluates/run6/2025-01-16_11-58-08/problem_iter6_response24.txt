```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize values to avoid scale sensitivity
    normalized_prize = prize / np.max(prize)
    # Calculate the average weight for each dimension
    average_weight = np.mean(weight, axis=1)
    # Normalize the average weights
    normalized_weight = average_weight / np.max(average_weight)
    # Calculate the heuristic values using a weighted combination of normalized prize and normalized weight
    heuristics = normalized_prize * (1 - normalized_weight)
    # Introduce thresholding to maintain sparsity and focus on high heuristic values
    threshold = 0.1  # Example threshold
    heuristics[heuristics < threshold] = 0
    # Consider inverse negative effects by further filtering out items with too low a heuristic
    heuristics[heuristics > 1 - threshold] = 0
    return heuristics
```
