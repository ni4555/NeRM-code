```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Combine non-linear scaling and sparsity based on variance
    variance_threshold = np.var(value_to_weight_ratio)
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2) * (value_to_weight_ratio > 0.25)
    sparsified_ratio = np.where(non_linear_scaled_ratio > variance_threshold, non_linear_scaled_ratio, 0)
    # Normalize the heuristics by the maximum sparsified ratio
    normalized_heuristics = sparsified_ratio / np.max(sparsified_ratio)
    return normalized_heuristics
```
