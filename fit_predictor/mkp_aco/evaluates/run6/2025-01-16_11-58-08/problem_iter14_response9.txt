```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to weight ratio for each item
    normalized_ratio = prize / np.sum(weight, axis=1)
    # Normalize the ratio to sum to 1 to get heuristics
    heuristics = normalized_ratio / np.sum(normalized_ratio)
    
    # Balance heuristic distribution by adding a random perturbation
    perturbation = np.random.rand(len(heuristics))
    heuristics = heuristics + perturbation / np.sum(perturbation)
    
    # Incorporate diversity by sorting items based on a random permutation
    indices = np.argsort(np.random.rand(len(heuristics)))
    heuristics = heuristics[indices]
    
    # Consider dimension-specific strategies by dividing the weight by the maximum weight in each dimension
    max_weight_per_dim = np.max(weight, axis=0)
    weight_normalized = weight / max_weight_per_dim
    # Normalize the prize to the normalized weight ratio
    prize_normalized = prize / np.sum(weight_normalized, axis=1)
    # Update heuristics based on the new normalized prize
    heuristics = prize_normalized / np.sum(prize_normalized)
    
    return heuristics
```
