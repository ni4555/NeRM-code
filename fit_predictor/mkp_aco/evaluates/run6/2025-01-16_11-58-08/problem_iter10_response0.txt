```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    non_linear_transformed_ratio = np.sqrt(value_to_weight_ratio)  # Apply square root non-linear transformation
    
    # Apply sparsity by keeping values above a certain percentile threshold
    sparsity_filter = non_linear_transformed_ratio > np.percentile(non_linear_transformed_ratio, 95)
    
    # Introduce diversity by considering items with high value-to-weight ratio and high sparsity
    diverse_heuristics = non_linear_transformed_ratio * sparsity_filter
    
    # Apply a statistical filter to introduce a balance between high value and sparsity
    balanced_heuristics = np.where(diverse_heuristics > np.mean(diverse_heuristics), diverse_heuristics, 0)
    
    return balanced_heuristics
```
