```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize to weight ratio
    normalized_ratio = prize / np.sum(weight, axis=1)
    # Apply a logarithmic transformation to the ratio to avoid domination by high ratios
    transformed_ratio = np.log1p(normalized_ratio)
    # Introduce sparsity by setting elements below a threshold to zero
    sparsity_threshold = np.percentile(normalized_ratio, 5)  # 5th percentile as a sparsity threshold
    heuristics = np.where(normalized_ratio >= sparsity_threshold, transformed_ratio, 0)
    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)
    # Incorporate domain-specific knowledge: use a sigmoid function to smooth the heuristics
    heuristics = 1 / (1 + np.exp(-heuristics))
    return heuristics
```
