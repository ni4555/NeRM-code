```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2)
    # Aggregate performance using a sum of weighted ratios
    aggregated_performance = np.sum(non_linear_scaled_ratio * prize, axis=1)
    # Normalize for sparsity by dividing by the number of non-zero ratios
    sparsity_normalized_performance = aggregated_performance / np.sum(non_linear_scaled_ratio > 0, axis=1)
    # Apply a domain-specific insight: higher performance items are more promising
    heuristics = sparsity_normalized_performance * (sparsity_normalized_performance > 0.1)
    return heuristics
```
