```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by dividing by the maximum prize value
    normalized_prize = prize / np.max(prize)
    # Normalize weights by dividing by the maximum weight in each dimension
    normalized_weight = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))
    # Calculate the value-to-weight ratio
    value_to_weight_ratio = normalized_prize / normalized_weight
    # Amplify high-value features by using a logarithmic transformation
    log_scaled_ratio = np.log(value_to_weight_ratio + 1)  # Adding 1 to avoid log(0)
    # Introduce randomness to promote diversity
    random_factor = np.random.rand(*log_scaled_ratio.shape)
    # Combine the log-scaled ratio with the randomness factor
    combined_heuristics = log_scaled_ratio * random_factor
    # Normalize the combined heuristics to sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics, axis=1, keepdims=True)
    return heuristics
```
