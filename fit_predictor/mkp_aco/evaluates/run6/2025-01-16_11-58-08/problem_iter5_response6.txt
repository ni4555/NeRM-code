```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio
    non_linear_scaled_ratio = value_to_weight_ratio ** 2
    # Aggregate performance by summing over dimensions
    aggregated_performance = np.sum(non_linear_scaled_ratio, axis=1)
    # Normalizing for sparsity by dividing by the max performance
    normalized_performance = aggregated_performance / np.max(aggregated_performance)
    # Apply domain-specific insights: increase heuristics for higher performance
    domain_specific_insights = normalized_performance * (normalized_performance > 0.1)
    return domain_specific_insights
```
