```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio and applying a threshold
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2) * (value_to_weight_ratio > 0.25)
    # Aggregate performance by summing over dimensions, normalizing for sparsity
    aggregated_performance = np.sum(non_linear_scaled_ratio, axis=1)
    normalized_performance = aggregated_performance / np.maximum(np.sum(weight, axis=1), 1e-6)
    # Threshold-based filtering for sparsity
    threshold = 0.1  # Example threshold
    sparsified_performance = np.where(normalized_performance > threshold, normalized_performance, 0)
    return sparsified_performance
```
