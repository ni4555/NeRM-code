```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Normalize the ratio to be between 0 and 1 for sparsity
    normalized_ratio = value_to_weight_ratio / np.max(value_to_weight_ratio)
    # Aggregate performance by taking the logarithm of the normalized ratio
    aggregated_performance = np.log(1 + normalized_ratio)
    # Apply domain-specific insights by adding an additional score based on item size
    additional_score = (prize / np.sum(weight, axis=1)) ** 0.5
    # Combine the scores and apply a threshold to create the heuristics
    final_score = aggregated_performance + additional_score
    threshold = 0.5  # Example threshold
    heuristics = np.where(final_score > threshold, final_score, 0)
    return heuristics
```
