```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure all values are within the same scale
    normalized_prize = prize / np.max(prize)
    
    # Calculate average weight per item for each dimension
    average_weight = np.mean(weight, axis=1)
    
    # Calculate diversity index for each item by computing the inverse variance
    # which is equivalent to the inverse of the sum of the weights squared divided by the number of dimensions
    diversity_index = np.mean(weight**2, axis=1) / (np.mean(weight, axis=1) * n)
    
    # Combine the normalized prize, average weight, and diversity index to calculate heuristics
    heuristics = normalized_prize * (1 / (1 + average_weight)) * diversity_index
    
    # Limit low-potential items by setting heuristics values below a threshold to zero
    threshold = 0.1
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
