```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Apply logarithm transformation to increase variance and avoid zero ratios
    log_transformed_ratio = np.log(value_to_weight_ratio + 1)
    # Amplify important features by squaring the log-transformed ratio
    squared_log_ratio = log_transformed_ratio ** 2
    # Introduce diversity and randomness to avoid convergence to local optima
    random_component = np.random.normal(loc=0, scale=0.1, size=squared_log_ratio.shape)
    heuristics = squared_log_ratio + random_component
    # Normalize heuristics to ensure that the sum is 1
    heuristics /= np.sum(heuristics)
    # Apply a threshold to control the sparsity of the solution
    threshold = 0.1
    heuristics = np.where(heuristics > threshold, heuristics, 0)
    return heuristics
```
