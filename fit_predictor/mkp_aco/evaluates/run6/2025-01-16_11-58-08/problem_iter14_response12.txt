```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Domain-specific non-linear transformation using hyperbolic tangent and a sigmoid
    transformed_ratio = np.tanh(value_to_weight_ratio) * (1 / (1 + np.exp(-value_to_weight_ratio)))
    # Apply non-linear scaling with an exponential decay to balance the transformed ratio
    exponential_scaled_ratio = transformed_ratio * np.exp(-np.abs(transformed_ratio))
    # Sparsify the ratio based on the exponential scaled ratio, enhancing selectivity
    sparsified_ratio = np.where(exponential_scaled_ratio > 0.5, exponential_scaled_ratio, 0)
    return sparsified_ratio
```
