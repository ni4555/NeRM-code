```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by exponentiating the ratio
    non_linear_scaled_ratio = np.exp(value_to_weight_ratio) * (value_to_weight_ratio > 0)
    # Apply sparsity by using a variance-based threshold
    variance_threshold = np.var(non_linear_scaled_ratio)
    sparsified_ratio = np.where(non_linear_scaled_ratio > variance_threshold, non_linear_scaled_ratio, 0)
    # Further balance diversity by adding the average value ratio
    average_value_ratio = np.mean(value_to_weight_ratio)
    balanced_heuristics = sparsified_ratio + (average_value_ratio - sparsified_ratio) * (sparsified_ratio > 0)
    return balanced_heuristics
```
