```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    normalized_ratio = (value_to_weight_ratio - np.min(value_to_weight_ratio)) / (np.max(value_to_weight_ratio) - np.min(value_to_weight_ratio))
    non_linear_transformed_ratio = np.exp(normalized_ratio)
    combined_ratio = non_linear_transformed_ratio * value_to_weight_ratio
    heuristics = np.where(combined_ratio > 1.5, combined_ratio, 0)
    sparsity_score = np.sum(weight == 0) / (weight.shape[0] * weight.shape[1])
    diversity_heuristic = (1 - sparsity_score) * 0.2
    heuristics += diversity_heuristic
    heuristics /= np.sum(heuristics)
    return heuristics
```
