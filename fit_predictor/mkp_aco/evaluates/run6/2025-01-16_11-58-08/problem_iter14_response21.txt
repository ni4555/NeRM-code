```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Apply a threshold based on the ratio to determine heuristic value
    heuristics = value_to_weight_ratio * (value_to_weight_ratio >= 0.5)
    
    # Incorporate diversity by adding a sparsity factor
    sparsity_factor = 1 / (1 + np.sum(weight, axis=1))
    heuristics *= sparsity_factor
    
    # Normalize heuristics to be between 0 and 1
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    
    # Ensure that all heuristics are within the range [0, 1]
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
