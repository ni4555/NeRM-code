```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by raising to a power and applying a threshold
    non_linear_scaled_ratio = (value_to_weight_ratio ** 1.5) * (value_to_weight_ratio > 0.1)
    # Incorporating diversity by considering the standard deviation
    diversity_factor = np.std(value_to_weight_ratio, axis=1)
    # Combining factors and sparsifying
    combined_heuristics = non_linear_scaled_ratio + diversity_factor
    sparsified_heuristics = np.where(combined_heuristics > 0.1, combined_heuristics, 0)
    return sparsified_heuristics
```
