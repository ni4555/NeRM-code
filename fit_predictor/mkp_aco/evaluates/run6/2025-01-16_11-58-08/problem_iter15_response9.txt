```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Normalize the ratio to ensure high values are emphasized
    normalized_ratio = value_to_weight_ratio / np.max(value_to_weight_ratio)
    # Amplify high-value features by applying a log transformation
    log_scaled_ratio = np.log(normalized_ratio + 1)
    # Introduce sparsity by using a soft threshold to set lower values to zero
    sparsified_ratio = np.where(log_scaled_ratio > 0.01, log_scaled_ratio, 0)
    # Incorporate randomness for diversity by adding a random noise term
    random_noise = np.random.rand(len(prize))
    random_factor = (random_noise > 0.5) * sparsified_ratio
    # Combine the sparsified ratio with the random factor
    combined_heuristics = sparsified_ratio + random_factor
    # Normalize the combined heuristics to ensure they sum to 1
    heuristics = combined_heuristics / np.sum(combined_heuristics)
    return heuristics
```
