```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the percentage of zero weight dimensions
    sparsity_scores = 1 - np.mean(weight.sum(axis=1) > 0, axis=0)  # Higher sparsity gives more points
    
    # Incorporate a variance score for each dimension to avoid overreliance on single dimension
    variance_scores = np.mean(np.var(weight, axis=0), axis=0)
    
    # Combine normalized prize, diversity, sparsity, and variance into a single score
    # Balancing the importance of prize, diversity, and variance
    total_score = normalized_prize * 0.4 + diversity_scores * 0.5 - sparsity_scores * 0.1 - variance_scores * 0.1
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Rank the items based on their normalized total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Set the top 25% of promising elements to 1 after accounting for the balance and scaling
    heuristics[ranked_indices[:len(ranked_indices) // 4]] = 1
    
    return heuristics
```
