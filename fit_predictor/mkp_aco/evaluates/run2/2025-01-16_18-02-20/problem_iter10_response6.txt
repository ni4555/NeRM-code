```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the diversity measure by considering the spread of normalized weights
    diversity_measure = np.var(weight, axis=1)
    
    # Use the normalized prize and diversity measure to create a composite heuristic
    composite_heuristic = normalized_prize + diversity_measure
    
    # Calculate an adaptive threshold based on the standard deviation of the composite heuristic
    threshold = np.std(composite_heuristic)
    
    # Sparsify the heuristics by setting a threshold and zeroing out lower values
    heuristics = np.zeros_like(prize)
    heuristics[composite_heuristic > threshold] = 1.0
    
    return heuristics
```
