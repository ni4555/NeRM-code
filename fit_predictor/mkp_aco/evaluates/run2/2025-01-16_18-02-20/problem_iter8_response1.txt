```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate a sparsity score based on the percentage of dimensions where the weight is zero
    sparsity_scores = np.mean(weight == 0, axis=1)
    
    # Calculate balance score between normalized prize and diversity
    balance_scores = normalized_prize * diversity_scores
    
    # Introduce a non-linear penalty for sparsity to avoid overfitting to items with high sparsity
    sparsity_penalty = 1 / (1 + np.exp(-sparsity_scores))
    
    # Combine the balance score with the sparsity score and penalty
    combined_score = balance_scores + sparsity_penalty - sparsity_penalty**2
    
    # Normalize the combined score to ensure the heuristics are on a similar scale
    combined_score = (combined_score - np.min(combined_score)) / (np.max(combined_score) - np.min(combined_score))
    
    # Rank the items based on their normalized combined score
    ranked_indices = np.argsort(combined_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 50% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//2]] = 1
    
    return heuristics
```
