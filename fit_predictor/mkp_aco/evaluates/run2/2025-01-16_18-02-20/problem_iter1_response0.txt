```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity factor by taking the inverse of the sum of the squares of the normalized weights
    diversity_factor = 1 / (np.sum(weight**2, axis=1) + 1e-10)
    
    # Combine the normalized prize value and diversity factor to get a combined score
    combined_score = normalized_prize * diversity_factor
    
    # Rank the items based on their combined score
    ranked_indices = np.argsort(combined_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    heuristics[ranked_indices[:len(prize) // 2]] = 1  # Only include top half of items for sparsity
```
