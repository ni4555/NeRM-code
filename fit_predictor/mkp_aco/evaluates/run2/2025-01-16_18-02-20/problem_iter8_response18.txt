```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the sum of the normalized weights, which serves as a diversity measure
    sum_normalized_weights = np.sum(weight, axis=1)
    
    # Calculate the average weight across all items for a base heuristic value
    average_weight = np.mean(total_weight)
    
    # Combine normalized prize, diversity measure, and base heuristic to form a composite heuristic
    composite_heuristic = normalized_prize + sum_normalized_weights - average_weight
    
    # Calculate the interquartile range (IQR) of the composite heuristic
    Q1 = np.percentile(composite_heuristic, 25)
    Q3 = np.percentile(composite_heuristic, 75)
    IQR = Q3 - Q1
    
    # Calculate a threshold based on the IQR
    threshold = Q3 - 1.5 * IQR
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Set the heuristics higher than the threshold to 1.0
    heuristics[composite_heuristic > threshold] = 1.0
    
    return heuristics
```
