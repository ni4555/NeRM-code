```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score based on the weighted spread of normalized prizes
    diversity_scores = np.mean(np.abs(normalized_prize - np.mean(normalized_prize)))
    
    # Calculate sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate weight variance across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Calculate a score based on the trade-off between normalized prize and diversity
    trade_off_factor = 0.5
    normalized_prize_score = normalized_prize * trade_off_factor
    diversity_score = diversity_scores * (1 - trade_off_factor)
    
    # Combine the scores with weights for each criterion
    total_score = normalized_prize_score + diversity_score - sparsity_scores * 0.2 + weight_variance * 0.1
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Rank the items based on their normalized total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an initial array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    
    # Dynamically determine the number of items to include based on the highest scoring 30%
    num_items_to_include = int(len(ranked_indices) * 0.3)
    
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    heuristics[ranked_indices[:num_items_to_include]] = 1
    
    # Return the resulting heuristics array
    return heuristics
```
