```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the percentage of non-zero weights
    sparsity_scores = np.mean((weight != 0).astype(int), axis=1)
    
    # Calculate a balanced score considering normalized prize, diversity, and sparsity
    alpha, beta, gamma = 0.6, 0.3, 0.1
    balanced_score = alpha * normalized_prize + beta * diversity_scores - gamma * sparsity_scores
    
    # Apply adaptive thresholds for balanced score
    adaptive_balanced_score_threshold = np.percentile(balanced_score, 75)
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Set the heuristics to 1 based on the balanced score threshold
    heuristics[balanced_score >= adaptive_balanced_score_threshold] = 1
    
    return heuristics
```
