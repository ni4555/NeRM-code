```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Create a comprehensive score that balances the normalized prize, diversity, and sparsity
    # Sparsity is measured by the sum of the weights that are zero across dimensions
    sparsity_scores = np.sum(weight == 0, axis=1)
    comprehensive_score = normalized_prize + 0.5 * diversity_scores - 0.3 * sparsity_scores
    
    # Rank the items based on their comprehensive score
    ranked_indices = np.argsort(comprehensive_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 50% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//2]] = 1
    
    return heuristics
```
