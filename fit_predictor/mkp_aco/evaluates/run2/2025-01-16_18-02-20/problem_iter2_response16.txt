```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the variance of the normalized prize values to identify outliers
    variance = np.var(normalized_prize)
    
    # Calculate the average normalized prize value
    average_prize = np.mean(normalized_prize)
    
    # Calculate the sparsity of the weight matrix (percentage of zeros in each row)
    sparsity = np.mean(weight, axis=1) / total_weight
    
    # Create a heuristic score combining normalized prize, variance, and sparsity
    heuristic_score = normalized_prize * (1 - variance / np.max(variance)) * (1 - sparsity)
    
    # Rank the items based on the heuristic score
    ranked_indices = np.argsort(heuristic_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    heuristics[ranked_indices] = np.arange(len(ranked_indices))
    
    # Sparsify the heuristics by setting items with normalized prize below the average to zero
    heuristics[weighted_prize < average_prize] = 0
    
    return heuristics
```
