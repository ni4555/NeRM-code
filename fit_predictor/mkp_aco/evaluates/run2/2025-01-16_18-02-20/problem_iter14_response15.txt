```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate weight variance for each item
    weight_variance = np.var(weight, axis=1)
    
    # Calculate the average prize per dimension for each item
    average_prize_per_dimension = np.mean(prize.reshape(-1, 1) * weight, axis=1) / np.sum(weight, axis=1)
    
    # Combine scores into a single heuristic score
    heuristic_scores = normalized_prize * 0.5 + diversity_scores * 0.3 + sparsity_scores * 0.1 - weight_variance * 0.1 + average_prize_per_dimension * 0.1
    
    # Normalize the heuristic scores to ensure they are on the same scale
    max_score = np.max(heuristic_scores)
    min_score = np.min(heuristic_scores)
    normalized_scores = (heuristic_scores - min_score) / (max_score - min_score)
    
    # Rank the items based on their normalized heuristic score
    ranked_indices = np.argsort(normalized_scores)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 60% of promising elements to 1
    threshold_index = len(ranked_indices) // 3
    heuristics[ranked_indices[:threshold_index]] = 1
    
    return heuristics
```
