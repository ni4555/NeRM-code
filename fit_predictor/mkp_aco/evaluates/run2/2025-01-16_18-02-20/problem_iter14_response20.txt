```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Incorporate a sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Calculate a trade-off factor for each item based on its diversity and sparsity
    trade_off_factors = diversity_scores * 0.6 + sparsity_scores * 0.4
    
    # Update the normalized prize with the trade-off factor
    updated_prize = normalized_prize * trade_off_factors
    
    # Include the weight variance in the heuristic calculation
    heuristics = updated_prize + weight_variance * -0.2
    
    # Normalize the heuristics to ensure they are on the same scale
    normalized_heuristics = heuristics / np.max(heuristics)
    
    # Dynamically adapt the trade-off factor based on the average diversity score
    average_diversity = np.mean(diversity_scores)
    dynamic_trade_off_factor = 0.5 + 0.4 * (average_diversity - 0.5)
    
    # Update the heuristics with the dynamic trade-off factor
    normalized_heuristics = updated_prize * dynamic_trade_off_factor + diversity_scores * (1 - dynamic_trade_off_factor)
    
    # Rank the items based on their updated normalized heuristic scores
    ranked_indices = np.argsort(normalized_heuristics)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//3]] = 1
    
    return heuristics
```
