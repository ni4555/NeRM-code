```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Define item-specific metrics
    # Use a simple average of the normalized prize values across dimensions to estimate diversity
    diversity = np.mean(normalized_prize, axis=1)
    
    # Use a sparsity score based on the percentage of dimensions with non-zero weight
    sparsity = 1 - np.mean(weight != 0, axis=1)
    
    # Combine metrics with adaptive weights
    combined_score = normalized_prize * 0.5 + diversity * 0.25 - sparsity * 0.25
    
    # Normalize the combined scores to ensure they are between 0 and 1
    max_score = np.max(combined_score)
    combined_score = combined_score / max_score
    
    # Use a soft ranking to sparsify the heuristics, focusing on the top 50%
    heuristics = np.where(combined_score >= 0.5, 1, 0)
    
    return heuristics
```
