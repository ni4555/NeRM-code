```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the sum of the normalized weights, which serves as a diversity measure
    sum_normalized_weights = np.sum(weight, axis=1)
    
    # Combine normalized prize and diversity measure to form a composite heuristic
    composite_heuristic = normalized_prize + sum_normalized_weights
    
    # Calculate the mean and standard deviation of the composite heuristic
    mean_composite_heuristic = np.mean(composite_heuristic)
    std_composite_heuristic = np.std(composite_heuristic)
    
    # Calculate a threshold using the mean and standard deviation
    threshold = mean_composite_heuristic + std_composite_heuristic
    
    # Sparsify the heuristics by setting a threshold and zeroing out lower values
    heuristics = np.zeros_like(prize)
    heuristics[np.where(composite_heuristic > threshold)[0]] = 1.0
    
    return heuristics
```
