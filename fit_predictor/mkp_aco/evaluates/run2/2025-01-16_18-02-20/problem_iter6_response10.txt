```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the number of zero weight dimensions
    sparsity_scores = np.sum(weight == 0, axis=1)
    
    # Calculate item-specific metric as a weighted sum of normalized prize, diversity, and sparsity scores
    item_metrics = 0.5 * normalized_prize + 0.3 * diversity_scores - 0.2 * sparsity_scores
    
    # Calculate a balance score to adapt thresholds dynamically
    balance_scores = item_metrics / np.sum(item_metrics)
    
    # Rank the items based on their balance score
    ranked_indices = np.argsort(balance_scores)[::-1]
    
    # Create an array to indicate how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 50% of high-metric elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//2]] = 1
    
    return heuristics
```
