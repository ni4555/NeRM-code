```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate the sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Combine the scores using a weighted sum, allowing for dynamic adjustment of weights
    score_weights = [0.4, 0.3, 0.2, 0.1]  # Dynamic weights for prize, diversity, sparsity, and variance
    total_score = score_weights[0] * normalized_prize + score_weights[1] * diversity_scores \
                  + score_weights[2] * sparsity_scores - score_weights[3] * weight_variance
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Dynamically adapt the score weights based on the total score variance
    average_score_variance = np.mean(np.var(total_score))
    if average_score_variance < 0.1:
        score_weights[1] = 0.5
    elif average_score_variance < 0.3:
        score_weights[1] = 0.4
    else:
        score_weights[1] = 0.3
    
    # Update the total score with the new score weights
    total_score = score_weights[0] * normalized_prize + score_weights[1] * diversity_scores \
                  + score_weights[2] * sparsity_scores - score_weights[3] * weight_variance
    
    # Rank the items based on their total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 20% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//5]] = 1
    
    return heuristics
```
