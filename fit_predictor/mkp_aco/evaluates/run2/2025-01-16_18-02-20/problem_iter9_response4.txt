```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate the sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Combine the normalized prize, diversity score, sparsity score, and weight variance
    # with a dynamic trade-off factor that considers the average prize and variance
    trade_off_factor = 0.6 * normalized_prize + 0.2 * diversity_scores + 0.1 * sparsity_scores - 0.05 * weight_variance
    trade_off_factor = trade_off_factor / np.mean(trade_off_factor)
    
    # Normalize the trade-off factor to ensure it is within a usable range
    trade_off_factor /= np.max(trade_off_factor)
    
    # Rank the items based on their normalized trade-off factor
    ranked_indices = np.argsort(trade_off_factor)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 20% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//5]] = 1
    
    return heuristics
```
