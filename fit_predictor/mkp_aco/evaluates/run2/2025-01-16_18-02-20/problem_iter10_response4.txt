```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Calculate the average prize per unit weight
    avg_prize_per_weight = prize / total_weight
    
    # Calculate the diversity score as the standard deviation of the average prize per unit weight
    diversity_score = np.std(avg_prize_per_weight)
    
    # Combine the average prize per unit weight with the diversity score
    # We use a weighted sum to balance the trade-off between profit and diversity
    weighted_score = 0.7 * avg_prize_per_weight + 0.3 * diversity_score
    
    # Rank the items based on the weighted score
    ranked_indices = np.argsort(weighted_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    
    # Include the top 60% of the highest scoring items in the heuristics array
    heuristics[ranked_indices[:int(len(ranked_indices) * 0.6)]] = 1
    
    return heuristics
```
