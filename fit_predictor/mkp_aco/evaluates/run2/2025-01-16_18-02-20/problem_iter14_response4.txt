```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate the sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Normalize diversity and sparsity scores
    normalized_diversity = diversity_scores / np.mean(diversity_scores)
    normalized_sparsity = sparsity_scores / np.mean(sparsity_scores)
    
    # Define domain-specific weights
    normalized_prize_weight = 0.4
    diversity_weight = 0.3
    sparsity_weight = 0.3
    
    # Combine the scores using a weighted average
    total_score = (normalized_prize * normalized_prize_weight +
                   normalized_diversity * diversity_weight +
                   normalized_sparsity * sparsity_weight)
    
    # Dynamically adapt the trade-off factor based on the average diversity score
    average_diversity = np.mean(normalized_diversity)
    if average_diversity < 0.3:
        trade_off_factor = 0.5
    elif average_diversity < 0.6:
        trade_off_factor = 0.7
    else:
        trade_off_factor = 0.9
    
    # Adjust the total score with the new trade-off factor
    total_score = (normalized_prize * trade_off_factor +
                   normalized_diversity * (1 - trade_off_factor))
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 25% of promising elements to 1
    heuristics[np.argsort(total_score)[::-1][:len(ranked_indices)//4]] = 1
    
    return heuristics
```
