```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity measure as the variance of normalized prize values
    diversity = np.var(normalized_prize)
    
    # Calculate a base heuristic value as the average normalized prize
    base_heuristic = np.mean(normalized_prize)
    
    # Combine normalized prize, diversity, and base heuristic to form a composite heuristic
    composite_heuristic = normalized_prize + diversity - base_heuristic
    
    # Calculate the interquartile range (IQR) of the composite heuristic for adaptive thresholding
    Q1 = np.percentile(composite_heuristic, 25)
    Q3 = np.percentile(composite_heuristic, 75)
    IQR = Q3 - Q1
    threshold = Q3 - 1.5 * IQR
    
    # Sparsify the heuristics by setting the threshold and zeroing out lower values
    heuristics = np.zeros_like(prize)
    heuristics[composite_heuristic > threshold] = 1.0
    
    return heuristics
```
