```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the percentage of non-zero weights
    sparsity_scores = np.mean((weight != 0).astype(int), axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Combine normalized prize, diversity, sparsity, and weight variance into a single heuristic score
    alpha, beta, gamma, delta = 0.5, 0.2, 0.1, 0.2
    combined_heuristic = alpha * normalized_prize + beta * diversity_scores + gamma * sparsity_scores - delta * weight_variance
    
    # Normalize the combined heuristic scores to ensure they are on the same scale
    combined_heuristic /= np.max(combined_heuristic)
    
    # Rank the items based on their normalized heuristic score
    ranked_indices = np.argsort(combined_heuristic)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 50% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//2]] = 1
    
    return heuristics
```
