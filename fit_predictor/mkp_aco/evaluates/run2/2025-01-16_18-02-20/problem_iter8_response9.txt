```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - np.repeat(normalized_prize, len(normalized_prize), axis=0)), axis=0)
    
    # Calculate sparsity score based on the percentage of non-zero dimensions
    sparsity_scores = 1 - np.mean(weight == 0, axis=1)
    
    # Normalize the diversity score to ensure it's on the same scale as the prize
    diversity_scores = (diversity_scores - np.min(diversity_scores)) / (np.max(diversity_scores) - np.min(diversity_scores))
    
    # Combine the normalized prize value, diversity score, and sparsity score to get a total score
    total_score = normalized_prize * 0.6 + diversity_scores * 0.3 + sparsity_scores * 0.1
    
    # Rank the items based on their total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 20% of promising elements to 1
    top_indices = ranked_indices[:int(len(ranked_indices) * 0.2)]
    heuristics[top_indices] = 1
    
    return heuristics
```
