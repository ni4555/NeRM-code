```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the percentage of zero weight dimensions
    sparsity_scores = np.mean(weight.sum(axis=1) == 0, axis=0)
    
    # Combine the normalized prize, diversity score, and sparsity score
    total_score = normalized_prize * diversity_scores + sparsity_scores
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    
    # Select a threshold for inclusion based on the total score's distribution
    sparsity_threshold = np.percentile(total_score, 80)  # 80% threshold, could be adjusted
    heuristics[total_score >= sparsity_threshold] = 1
    
    return heuristics
```
