```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate the sparsity score based on the sum of weights
    sparsity_scores = np.sum(weight, axis=1)
    
    # Combine normalized prize, diversity, and sparsity scores using a weighted sum
    trade_off_factors = [0.4, 0.3, 0.3]  # Adjust these factors as needed
    total_score = (normalized_prize * trade_off_factors[0] +
                   diversity_scores * trade_off_factors[1] +
                   sparsity_scores * trade_off_factors[2])
    
    # Rank the items based on their total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 50% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//2]] = 1
    
    return heuristics
```
