```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the sparsity of each item (how many dimensions have non-zero weight)
    sparsity = (weight != 0).sum(axis=1)
    
    # Combine normalized prize value and sparsity to get a heuristic score
    heuristic_score = normalized_prize * sparsity
    
    # Calculate dimension-specific sparsity and find the minimum sparsity across dimensions
    min_dimensional_sparsity = np.min(sparsity)
    
    # Rank the items based on their heuristic score and then by the minimum sparsity
    ranked_indices = np.argsort((heuristic_score, min_dimensional_sparsity))[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    heuristics[ranked_indices] = np.arange(len(ranked_indices))
    
    # Set the unpromising elements to zero to sparsify the heuristics
    threshold = np.percentile(heuristic_score, 90)  # Set a threshold for heuristic score
    heuristics[heuristic_score < threshold] = 0
    
    # Additional sparsification based on minimum dimension-specific sparsity
    additional_threshold = np.percentile(min_dimensional_sparsity, 90)
    heuristics[min_dimensional_sparsity < additional_threshold] = 0
    
    return heuristics
```
