```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by the sum of weights to get a per-unit-weight prize value
    normalized_prize = prize / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate the diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - np.tile(normalized_prize, (n, 1))), axis=1)
    
    # Calculate the sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Create a combined score using normalized prize, diversity, sparsity, and variance
    combined_score = (normalized_prize * 0.6 +
                      diversity_scores * 0.2 +
                      sparsity_scores * 0.1 -
                      weight_variance * 0.1)
    
    # Dynamically adapt the score based on the sum of weights
    total_weight_sum = np.sum(weight)
    if total_weight_sum < 10:
        combined_score *= 1.1
    elif total_weight_sum < 20:
        combined_score *= 0.9
    
    # Normalize the combined score to ensure they are on the same scale
    max_score = np.max(combined_score)
    combined_score = combined_score / max_score
    
    # Rank the items based on their combined score
    ranked_indices = np.argsort(combined_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 50% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//2]] = 1
    
    return heuristics
```
