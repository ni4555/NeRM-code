```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate weight variance across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Calculate a balanced score that considers all factors with different weights
    trade_off_factor_prize = 0.4
    trade_off_factor_diversity = 0.3
    trade_off_factor_sparsity = 0.2
    trade_off_factor_variance = 0.1
    
    # Combine the factors to create a composite heuristic
    composite_heuristic = (
        normalized_prize * trade_off_factor_prize +
        diversity_scores * trade_off_factor_diversity +
        sparsity_scores * trade_off_factor_sparsity -
        weight_variance * trade_off_factor_variance
    )
    
    # Normalize the composite heuristic to ensure all values are comparable
    normalized_heuristics = composite_heuristic / np.max(composite_heuristic)
    
    # Rank the items based on their normalized heuristic scores
    ranked_indices = np.argsort(normalized_heuristics)[::-1]
    
    # Sparsify the heuristics by setting the top 30% of items to 1
    heuristics = np.zeros_like(prize)
    heuristics[ranked_indices[:len(ranked_indices)//3]] = 1
    
    return heuristics
```
