```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Calculate sparsity score based on the percentage of non-zero weights
    sparsity_scores = np.mean((weight != 0).astype(int), axis=1)
    
    # Incorporate domain-specific weights for each score
    alpha, beta, gamma = 0.6, 0.3, 0.1  # Example coefficients
    prize_weight = alpha
    diversity_weight = beta
    sparsity_weight = gamma
    
    # Combine the scores with the domain-specific weights
    combined_score = prize_weight * normalized_prize + diversity_weight * diversity_scores - sparsity_weight * sparsity_scores
    
    # Adapt thresholds based on the distribution of the scores
    adaptive_prize_threshold = np.percentile(combined_score, 90)
    adaptive_diversity_threshold = np.percentile(diversity_scores, 90)
    
    # Create a final heuristic score by considering thresholds
    heuristic_score = (combined_score > adaptive_prize_threshold) + \
                      (combined_score > adaptive_diversity_threshold) * 0.5
    
    # Create an array indicating the promise of including each item
    heuristics = np.zeros_like(prize)
    # Set the heuristics to 1 based on the final score
    heuristics[heuristic_score >= 1] = 1
    
    return heuristics
```
