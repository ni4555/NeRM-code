{
  "generation": 9,
  "description": "The MKP is addressed through a hybrid probabilistic optimization heuristic that leverages a dynamic value-to-weight ratio for item prioritization. The algorithm implements a sophisticated ranking mechanism, which employs a normalized value metric to assess item worth per unit weight, thereby ensuring that items with the highest value-to-weight ratio are selected first. This value-centric ranking is integrated with an intelligent stochastic sampling strategy that adapts in real-time to evolving weight constraints during the iterative selection process. The ultimate goal is to maximize the collective prize across all knapsacks while adhering to the stringent weight limits of each knapsack, achieving an optimal balance between exploration and exploitation.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio to ensure it is between 0 and 1\n    max_ratio = np.max(value_to_weight_ratio)\n    normalized_ratio = value_to_weight_ratio / max_ratio\n    \n    # Apply a stochastic sampling strategy based on the normalized ratio\n    # Here we use a simple random sampling with replacement, but this can be replaced\n    # with more sophisticated sampling strategies if needed.\n    random_indices = np.random.choice(range(len(normalized_ratio)), size=len(normalized_ratio), replace=True)\n    sorted_indices = np.argsort(normalized_ratio)[random_indices]\n    \n    # The sorted indices represent the order of item selection based on their normalized value-to-weight ratio\n    heuristics = np.zeros_like(normalized_ratio)\n    heuristics[sorted_indices] = 1\n    \n    return heuristics",
      "fitness": 17.20400961774989,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_4.txt",
      "code_file": "coevolve/generation_9/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio to ensure it is comparable across items\n    max_ratio = np.max(value_to_weight_ratio)\n    normalized_ratio = value_to_weight_ratio / max_ratio\n    \n    # Apply a stochastic sampling strategy to select the most promising items\n    # This can be implemented in various ways; here, we simply use random selection\n    # with a probability proportional to the normalized ratio\n    # Note: In a real-world scenario, this part would be more complex and adaptive\n    # to the evolving constraints and should use techniques like simulated annealing,\n    # genetic algorithms, or other probabilistic optimization methods.\n    random_state = np.random.default_rng()\n    selection_probability = normalized_ratio / np.sum(normalized_ratio)\n    selected_indices = random_state.choice(range(len(value_to_weight_ratio)), \n                                          size=len(value_to_weight_ratio), \n                                          replace=False, \n                                          p=selection_probability)\n    \n    # Return the heuristics as an array of selected indices\n    return selected_indices",
      "fitness": 17.53355134226371,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_6.txt",
      "code_file": "coevolve/generation_9/code_6.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio to ensure items with the highest ratio are prioritized\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Apply stochastic sampling strategy to adapt to evolving weight constraints\n    # Here we simply use the normalized ratio as a heuristic, in a real scenario this would be more complex\n    heuristics = normalized_ratio\n    \n    return heuristics",
      "fitness": 22.09517350996166,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_2.txt",
      "code_file": "coevolve/generation_9/code_2.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio\n    normalized_value_to_weight_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Return the normalized value-to-weight ratio as the heuristic\n    return normalized_value_to_weight_ratio",
      "fitness": 22.15956610119145,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_1.txt",
      "code_file": "coevolve/generation_9/code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio for each item to ensure they sum to 1\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Return the normalized value-to-weight ratio as the heuristic\n    return normalized_ratio",
      "fitness": 22.163038868272615,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_9.txt",
      "code_file": "coevolve/generation_9/code_9.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio to ensure items with the highest ratio are selected first\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Return the normalized ratio as the heuristics score\n    return normalized_ratio",
      "fitness": 22.19073497954519,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_5.txt",
      "code_file": "coevolve/generation_9/code_5.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio to get a relative measure of item worth\n    normalized_value_to_weight_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Use the normalized ratio as the heuristics score for each item\n    heuristics = normalized_value_to_weight_ratio\n    return heuristics",
      "fitness": 22.307332516848966,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_9/stdout_8.txt",
      "code_file": "coevolve/generation_9/code_8.py"
    }
  ]
}