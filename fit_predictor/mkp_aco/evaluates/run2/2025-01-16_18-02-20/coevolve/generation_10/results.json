{
  "generation": 10,
  "description": "Develop a probabilistic algorithm for the Multi-Knapsack Problem (MKP) that leverages a dynamic ranking system to prioritize items with the highest value-to-weight ratio. This system should utilize adaptive stochastic sampling techniques to iteratively select items, optimizing their distribution across knapsacks while rigorously enforcing weight constraints. The algorithm must implement an advanced exploration strategy that systematically identifies and incorporates the most valuable and lightweight items, ensuring optimal load distribution and adherence to individual knapsack weight limits.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\nfrom scipy.stats import beta\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    n = prize.shape[0]\n    m = weight.shape[1]\n    \n    # Calculate value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio to a probability distribution\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Use Beta distribution to sample probabilities\n    # Alpha and beta parameters can be adjusted to control exploration vs exploitation\n    alpha = 1\n    beta_param = 1\n    \n    # Sample from the Beta distribution\n    heuristics = beta.rvs(alpha + 1, beta_param + 1, size=n)\n    \n    # Normalize to ensure the sum of probabilities is 1\n    heuristics /= heuristics.sum()\n    \n    return heuristics",
      "fitness": 17.483214246508794,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_11.txt",
      "code_file": "coevolve/generation_10/code_11.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios to get a score between 0 and 1\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.max()\n    \n    # Calculate the heuristics based on normalized ratio\n    heuristics = normalized_ratio\n    \n    return heuristics",
      "fitness": 22.104164252002114,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_10/stdout_2.txt",
      "code_file": "coevolve/generation_10/code_2.py"
    }
  ]
}