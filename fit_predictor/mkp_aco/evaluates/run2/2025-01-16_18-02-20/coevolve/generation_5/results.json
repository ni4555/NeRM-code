{
  "generation": 5,
  "description": "Solve the Multiple Knapsack Problem (MKP) by implementing a probabilistic optimization algorithm. This algorithm will prioritize items based on their value-to-weight ratio and utilize a quantifiable ranking mechanism to maximize the total prize collected. It will employ adaptive stochastic sampling, with criteria defined by the ranking, and dynamically adapt weight constraints iteratively. The process involves selecting a subset of items using a combination of normalized prize value and clear ranking to adhere to each knapsack's strict weight limitations and achieve optimal prize maximization.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios to a 0-1 scale\n    normalized_ratios = (value_to_weight_ratio - value_to_weight_ratio.min()) / (value_to_weight_ratio.max() - value_to_weight_ratio.min())\n    \n    # Rank the items based on the normalized value-to-weight ratio\n    ranked_indices = np.argsort(normalized_ratios)[::-1]\n    \n    # Create the heuristics array where the rank is used as a heuristic value\n    heuristics = np.zeros(len(prize))\n    heuristics[ranked_indices] = np.arange(1, len(ranked_indices) + 1)\n    \n    return heuristics",
      "fitness": 11.363147833510448,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_5.txt",
      "code_file": "coevolve/generation_5/code_5.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the value-to-weight ratio by subtracting the minimum ratio\n    normalized_ratio = value_to_weight_ratio - np.min(value_to_weight_ratio)\n    \n    # Rank the items based on the normalized ratio\n    ranking = np.argsort(normalized_ratio)[::-1]\n    \n    # Calculate the heuristic score for each item\n    # The heuristic score is the rank multiplied by the normalized ratio\n    heuristics = normalized_ratio[ranking] * (ranking + 1)\n    \n    return heuristics",
      "fitness": 15.79408384707159,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_4.txt",
      "code_file": "coevolve/generation_5/code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratio to sum to 1 across all items\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Rank items based on normalized ratio\n    ranking = np.argsort(-normalized_ratio)\n    \n    # Calculate the heuristics score for each item\n    heuristics = np.zeros_like(prize)\n    for i in ranking:\n        # Assign higher scores to higher ranked items\n        heuristics[i] = 1.0 / (i + 1)\n    \n    return heuristics",
      "fitness": 15.827746447530938,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_7.txt",
      "code_file": "coevolve/generation_5/code_7.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Normalize the prize values to ensure they sum to 1\n    normalized_prize = prize / np.sum(prize)\n    \n    # The heuristic is the normalized prize value, since the weight for each item is 1\n    heuristics = normalized_prize\n    \n    return heuristics\n\n# Example usage:\n# Let's assume we have 5 items with the following prize values:\nprize_example = np.array([10, 20, 30, 40, 50])\n# Since each item has a weight of 1 for each dimension, the weight array is simply:\nweight_example = np.ones_like(prize_example)\n\n# Calculate the heuristics for these items\nheuristics_example = heuristics_v2(prize_example, weight_example)\nprint(heuristics_example)",
      "fitness": 21.6162638748324,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_3.txt",
      "code_file": "coevolve/generation_5/code_3.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios so that they sum to 1\n    normalized_ratio = value_to_weight_ratio / value_to_weight_ratio.sum()\n    \n    # Rank the items based on their normalized ratio\n    ranking = np.argsort(normalized_ratio)[::-1]\n    \n    # Calculate the heuristics score for each item based on the ranking\n    heuristics = np.zeros_like(prize)\n    heuristics[ranking] = normalized_ratio[ranking]\n    \n    return heuristics",
      "fitness": 22.094010547264336,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_9.txt",
      "code_file": "coevolve/generation_5/code_9.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:\n    # Calculate the value-to-weight ratio for each item\n    value_to_weight_ratio = prize / weight.sum(axis=1)\n    \n    # Normalize the ratios to get a rank between 0 and 1\n    max_ratio = np.max(value_to_weight_ratio)\n    normalized_ratio = value_to_weight_ratio / max_ratio\n    \n    # Calculate a heuristic based on the normalized ratio and the prize\n    # This heuristic function is arbitrary and for the sake of this problem, \n    # we can just use the normalized ratio as it is.\n    heuristics = normalized_ratio * prize\n    \n    return heuristics",
      "fitness": 22.225072418064347,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve/generation_5/stdout_0.txt",
      "code_file": "coevolve/generation_5/code_0.py"
    }
  ]
}