```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Normalize diversity score to ensure it is on the same scale as prize and sparsity
    normalized_diversity = diversity_scores / np.max(diversity_scores)
    
    # Normalize sparsity score to ensure it is on the same scale
    sparsity_scores = np.sum(weight, axis=1)
    normalized_sparsity = sparsity_scores / np.max(sparsity_scores)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Normalize weight variance to ensure it is on the same scale
    normalized_weight_variance = weight_variance / np.max(weight_variance)
    
    # Combine normalized prize, normalized diversity, normalized sparsity, and normalized weight variance scores into a single heuristic score
    heuristic_scores = normalized_prize * 0.6 + normalized_diversity * 0.2 - normalized_sparsity * 0.1 - normalized_weight_variance * 0.1
    
    # Dynamically adapt weights based on the context of the problem
    average_diversity = np.mean(normalized_diversity)
    if average_diversity < 0.5:
        # Increase the weight of diversity to encourage it
        heuristic_scores *= 0.9
        heuristic_scores[heuristic_scores < 0] = 0
    elif average_diversity < 0.8:
        # Maintain balance between diversity and the other factors
        pass
    else:
        # Decrease the weight of diversity to reduce the risk of overly diverse solutions
        heuristic_scores *= 1.1
        heuristic_scores[heuristic_scores > 1] = 1
    
    # Normalize the heuristic scores to ensure they are on the same scale
    max_score = np.max(heuristic_scores)
    min_score = np.min(heuristic_scores)
    normalized_scores = (heuristic_scores - min_score) / (max_score - min_score)
    
    # Rank the items based on their normalized heuristic score
    ranked_indices = np.argsort(normalized_scores)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//3]] = 1
    
    # Mutate the heuristics by randomly flipping the inclusion of the next 10% of items
    mutation_rate = 0.1
    mutation_indices = np.random.choice(ranked_indices[len(ranked_indices)//3:len(ranked_indices)//3+int(len(ranked_indices)//10)], int(len(ranked_indices)//10), replace=False)
    heuristics[mutation_indices] = 1 - heuristics[mutation_indices]
    
    return heuristics
```
