```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate a diversity score based on the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - normalized_prize.reshape(-1, 1)), axis=0)
    
    # Combine normalized prize and diversity score with a trade-off factor
    trade_off_factor = 0.5
    total_score = normalized_prize * trade_off_factor + diversity_scores * (1 - trade_off_factor)
    
    # Incorporate a sparsity score based on the sum of weights across dimensions
    sparsity_scores = np.sum(weight, axis=1)
    
    # Calculate the variance of weights across dimensions for each item
    weight_variance = np.var(weight, axis=1)
    
    # Include the sparsity and weight variance in the total score
    total_score += sparsity_scores * 0.2 - weight_variance * 0.1
    
    # Normalize the total score to ensure they are on the same scale
    total_score /= np.max(total_score)
    
    # Rank the items based on their normalized total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    sparsity_threshold = 0.3
    heuristics[ranked_indices[:int(len(ranked_indices) * sparsity_threshold)]] = 1
    
    # Balance scores by considering the variance in heuristics
    variance_threshold = 0.01
    heuristics = np.where(
        np.var(heuristics[heuristics == 1]) < variance_threshold,
        heuristics,
        np.where(np.random.random(size=np.sum(heuristics == 1)) < variance_threshold / 2, 1, 0)
    )
    
    # Mutate the heuristics by adding random perturbations to the top 10% of the heuristics
    mutation_factor = 0.1
    mutation_indices = np.where(heuristics == 1)[0][:int(len(heuristics) * 0.1)]
    heuristics[mutation_indices] += np.random.uniform(-mutation_factor, mutation_factor, size=len(mutation_indices))
    
    # Ensure that the heuristics are within the range [0, 1]
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
