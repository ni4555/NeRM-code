```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate diversity score as the average difference from other items
    diversity_scores = np.mean(np.abs(normalized_prize - np.mean(normalized_prize, axis=0)), axis=0)
    
    # Calculate sparsity score as the fraction of zero weights in each item
    sparsity_scores = 1 - np.mean(weight > 0, axis=1)
    
    # Combine normalized prize, diversity score, and sparsity score into a total score
    total_score = normalized_prize * 0.6 + diversity_scores * 0.2 + sparsity_scores * 0.2
    
    # Rank the items based on their total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Determine the threshold based on the desired number of items to include in the solution
    threshold_count = int(len(ranked_indices) * 0.5)
    heuristics[ranked_indices[:threshold_count]] = 1
    
    return heuristics
```
