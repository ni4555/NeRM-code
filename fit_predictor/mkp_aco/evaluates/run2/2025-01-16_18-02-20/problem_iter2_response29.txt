```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total weight for each item by summing its weights across all dimensions
    total_weight = np.sum(weight, axis=1)
    
    # Normalize the prize by the total weight to get a per-unit-weight prize value
    normalized_prize = prize / total_weight
    
    # Calculate the sum of the normalized weights, which serves as a diversity measure
    sum_normalized_weights = np.sum(weight, axis=1)
    
    # Calculate the entropy of the normalized weights, which provides another diversity metric
    entropies = -np.sum((weight * np.log(weight)) / (weight.sum(axis=1)), axis=1)
    
    # Combine normalized prize, diversity measure, and entropy to form a composite heuristic
    composite_heuristic = normalized_prize + sum_normalized_weights + entropies
    
    # Normalize the composite heuristic to use it as a weight
    normalized_composite_heuristic = composite_heuristic / np.sum(composite_heuristic)
    
    # Determine a dynamic threshold for the sparsity based on the mean
    threshold = np.mean(composite_heuristic) * np.mean(normalized_composite_heuristic)
    
    # Initialize heuristics array
    heuristics = np.zeros_like(prize)
    
    # For each item, check if it exceeds the threshold
    for i in range(len(composite_heuristic)):
        if composite_heuristic[i] > threshold:
            heuristics[i] = 1.0
    
    return heuristics
```
