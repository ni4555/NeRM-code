```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to consider only the relative value
    normalized_prize = prize / np.max(prize)
    
    # Calculate the diversity score by considering the distance from the mean
    diversity_scores = np.mean(np.abs(normalized_prize - np.mean(normalized_prize)), axis=0)
    
    # Calculate the sparsity score as the number of non-zero weight dimensions
    sparsity_scores = np.mean(np.sum(weight != 0, axis=1) > 0, axis=0)
    
    # Combine normalized prize, diversity score, and sparsity score
    total_score = normalized_prize + diversity_scores - (1 - sparsity_scores)
    
    # Normalize the total score to be within the range [0, 1]
    total_score = (total_score - np.min(total_score)) / (np.max(total_score) - np.min(total_score))
    
    # Rank the items based on the total normalized score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates the level of promise for each item
    heuristics = np.zeros_like(prize)
    # Set the top 30% of items with the highest promise to 1
    heuristics[ranked_indices[:int(0.3 * len(ranked_indices))]] = 1
    
    return heuristics
```
