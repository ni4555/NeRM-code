```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to get a per-unit-weight prize value
    normalized_prize = prize / np.linalg.norm(prize)
    
    # Calculate the diversity score as the average difference from the weighted average
    weighted_avg = np.average(prize, weights=weight.sum(axis=1))
    diversity_scores = np.mean(np.abs(normalized_prize - weighted_avg))
    
    # Calculate a sparsity score based on the percentage of non-zero dimensions
    sparsity_scores = np.mean(np.sum(weight != 0, axis=1) / weight.shape[1])
    
    # Combine the normalized prize value, diversity score, and sparsity score to get a total score
    total_score = normalized_prize + diversity_scores - sparsity_scores
    
    # Rank the items based on their total score
    ranked_indices = np.argsort(total_score)[::-1]
    
    # Create an array that indicates how promising it is to include each item
    heuristics = np.zeros_like(prize)
    # Sparsify the heuristics by setting the top 30% of promising elements to 1
    heuristics[ranked_indices[:len(ranked_indices)//3]] = 1
    
    return heuristics
```
