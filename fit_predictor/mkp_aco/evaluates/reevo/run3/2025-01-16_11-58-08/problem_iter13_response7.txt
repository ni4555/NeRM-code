```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to emphasize high-value items
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the average weight per item across all dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Combine normalized prize and average weight to create a heuristic
    combined_heuristic = normalized_prize * (1 / (1 + average_weight))
    
    # Apply a non-linear transformation to amplify valuable features
    non_linear_transform = np.tanh(combined_heuristic)
    
    # Introduce sparsity by setting values below a threshold to zero
    threshold = 0.05
    sparsified_heuristic = np.where(non_linear_transform > threshold, non_linear_transform, 0)
    
    return sparsified_heuristic
```
