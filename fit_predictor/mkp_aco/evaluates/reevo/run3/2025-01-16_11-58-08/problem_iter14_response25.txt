```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Normalize the ratios to ensure that all values fall within a common range
    normalized_ratio = (value_to_weight_ratio - np.min(value_to_weight_ratio)) / (np.max(value_to_weight_ratio) - np.min(value_to_weight_ratio))
    # Apply a non-linear transformation to amplify the differences between the ratios
    non_linear_transform = 10 * (normalized_ratio - 0.5)
    # Introduce sparsity by setting a threshold and setting values below the threshold to zero
    threshold = np.percentile(non_linear_transform, 90)
    heuristics = np.where(non_linear_transform > threshold, non_linear_transform, 0)
    return heuristics
```
