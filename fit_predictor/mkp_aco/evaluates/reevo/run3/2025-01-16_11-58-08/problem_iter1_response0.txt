```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the average prize per unit weight for each item in each dimension
    average_prize_per_weight = prize / np.sum(weight, axis=1)
    # Calculate the overall average prize per unit weight
    overall_average_prize_per_weight = np.mean(average_prize_per_weight)
    # Create a heuristic based on the ratio of each item's average prize per weight to the overall average
    ratio_heuristic = average_prize_per_weight / overall_average_prize_per_weight
    # Create a sparsity factor based on the minimum weight in each dimension
    sparsity_factor = np.where(weight <= np.min(weight, axis=1, keepdims=True), 0, 1)
    # Combine the ratio heuristic with the sparsity factor and normalize to ensure positive values
    combined_heuristic = ratio_heuristic * sparsity_factor
    combined_heuristic = np.clip(combined_heuristic, 0, 1)
    return combined_heuristic
```
