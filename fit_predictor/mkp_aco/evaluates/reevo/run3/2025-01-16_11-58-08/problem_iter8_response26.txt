```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Use a robust non-linear scaling by applying a power transformation and ensuring non-negative ratios
    power = 2.0
    non_linear_scaled_ratio = np.maximum(value_to_weight_ratio ** power, 0)
    # Apply percentile-based thresholding to ensure sparsity
    threshold = np.percentile(non_linear_scaled_ratio, 90)  # Using 90th percentile as a more conservative threshold
    sparsified_ratio = np.where(non_linear_scaled_ratio > threshold, non_linear_scaled_ratio, 0)
    # Combine with domain knowledge, considering the overall average of the ratios to penalize outliers
    overall_average = np.mean(sparsified_ratio)
    domain_knowledge = sparsified_ratio / overall_average
    # Normalize the heuristics to maintain the same scale as the original ratio
    normalized_heuristics = (sparsified_ratio / np.maximum(np.sum(domain_knowledge, axis=1, keepdims=True), 1e-10)) * overall_average
    return normalized_heuristics
```
