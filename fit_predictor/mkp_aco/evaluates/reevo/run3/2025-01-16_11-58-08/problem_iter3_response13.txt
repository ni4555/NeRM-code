```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize to weight ratio
    normalized_ratio = prize / np.sum(weight, axis=1)
    # Normalize the ratios to sum to 1
    heuristics = normalized_ratio / np.sum(normalized_ratio)
    # Add a sparsity factor
    sparsity_factor = np.random.rand(len(heuristics))
    heuristics = heuristics * (1 - sparsity_factor)
    # Ensure the sum of heuristics remains 1
    heuristics /= np.sum(heuristics)
    return heuristics
```
