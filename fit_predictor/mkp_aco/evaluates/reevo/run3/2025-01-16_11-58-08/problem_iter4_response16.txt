```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize to weight ratio
    normalized_ratio = prize / np.sum(weight, axis=1)
    
    # Apply a non-linear transformation to the ratio
    # For example, logarithm to avoid very high ratios dominating
    transformed_ratio = np.log1p(normalized_ratio)
    
    # Normalize the ratios to sum to 1
    ratio_sum = np.sum(transformed_ratio)
    heuristics = transformed_ratio / ratio_sum
    
    # Incorporate domain-specific knowledge: if the average ratio is below a threshold, increase the heuristic
    average_ratio = np.mean(transformed_ratio)
    ratio_threshold = 0.5  # Assuming a threshold value of 0.5 for example
    heuristics = np.where(transformed_ratio < ratio_threshold, heuristics * 2, heuristics)
    
    # Add a sparsity factor: if any weight dimension is less than a threshold, set heuristic to 0
    sparsity_threshold = 0.1  # Assuming a threshold value of 0.1 for example
    for i in range(len(weight)):
        if np.any(weight[i] < sparsity_threshold):
            heuristics[i] = 0
    
    return heuristics
```
