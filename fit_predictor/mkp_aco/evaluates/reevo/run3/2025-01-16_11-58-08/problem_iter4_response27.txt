```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize vector
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the standardized weights for each dimension
    std_weight = np.std(weight, axis=1)
    
    # Inverse of the standard deviation of weights, to account for sparsity
    inverse_std_weight = 1 / (std_weight + 1e-8)
    
    # Calculate the combined heuristic value for each item
    combined = normalized_prize * inverse_std_weight
    
    # Apply a sparsity mechanism by setting below a certain threshold to zero
    threshold = np.mean(combined)
    heuristics = np.where(combined > threshold, combined, 0)
    
    # Normalize the heuristics to sum up to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
