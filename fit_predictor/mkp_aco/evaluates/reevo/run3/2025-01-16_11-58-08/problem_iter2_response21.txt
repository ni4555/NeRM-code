```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to the sum of weights for each item
    prize_weight_ratio = prize / np.sum(weight, axis=1)
    # Apply a logarithmic penalty to balance the effect of high and low weights
    penalty = -np.log(1 / np.sum(weight, axis=1))
    # Adjust the heuristic by combining the ratio and penalty
    adjusted_heuristic = prize_weight_ratio * penalty
    # Sparsify the heuristic by setting a threshold below which heuristics are set to zero
    threshold = np.mean(adjusted_heuristic)
    sparsified_heuristic = np.where(adjusted_heuristic > threshold, adjusted_heuristic, 0)
    return sparsified_heuristic
```
