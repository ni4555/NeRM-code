```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight dimensions
    normalized_prize = prize / np.sum(prize)
    avg_weight = np.mean(weight, axis=1)
    
    # Use max weight of each item as a multiplier to account for weight distribution
    max_weight = np.max(weight, axis=1)
    multiplier = max_weight / (np.sum(max_weight) + 1e-8)
    
    # Adjust the prize by considering the normalized prize and the average weight
    adjusted_prize = normalized_prize * avg_weight
    
    # Combine the adjusted prize with the multiplier to create a heuristic
    combined = adjusted_prize * multiplier
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = np.mean(combined)
    heuristics = np.where(combined > threshold, combined, 0)
    
    return heuristics
```
