```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by taking the hyperbolic tangent
    non_linear_scaled_ratio = np.tanh(value_to_weight_ratio)
    # Normalize the ratios by their maximum value to avoid dominance by large values
    normalized_ratio = non_linear_scaled_ratio / np.max(non_linear_scaled_ratio)
    # Combine sparsity with normalization using a sigmoid function
    # The sigmoid function provides a smooth transition and allows for a sparser output
    sparsified_normalized_ratio = 1 / (1 + np.exp(-normalized_ratio))
    # Apply a threshold to encourage sparsity and reduce the impact of smaller ratios
    sparsified_normalized_ratio = np.where(sparsified_normalized_ratio > 0.5, sparsified_normalized_ratio, 0)
    return sparsified_normalized_ratio
```
