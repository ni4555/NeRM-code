```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the value-to-weight ratios
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Normalize the ratio to a range between 0 and 1
    normalized_ratio = (value_to_weight_ratio - np.min(value_to_weight_ratio)) / (np.max(value_to_weight_ratio) - np.min(value_to_weight_ratio))
    # Apply a non-linear transformation to emphasize higher values
    non_linear_transformed_ratio = np.exp(normalized_ratio)
    # Incorporate diversity by considering the variance of the transformed ratios
    diversity_metric = np.var(non_linear_transformed_ratio)
    # Combine the non-linear transformation with the diversity metric
    combined_metric = non_linear_transformed_ratio * diversity_metric
    # Apply smoothing to the combined metric
    smoothed_combined_metric = np.exp(combined_metric)
    # Normalize the smoothed combined metric to sum to 1
    heuristics = smoothed_combined_metric / np.sum(smoothed_combined_metric)
    return heuristics
```
