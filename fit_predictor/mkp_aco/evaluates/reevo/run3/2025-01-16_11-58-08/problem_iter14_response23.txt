```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to emphasize high-value items and ensure no item has zero prize value
    normalized_prize = (prize - np.min(prize) + 1e-10) / (np.max(prize) - np.min(prize) + 1e-10)
    
    # Calculate the average weight per item across all dimensions
    average_weight = np.mean(weight, axis=1)
    
    # Combine normalized prize and average weight, then apply a logarithmic transformation
    combined_heuristic = np.log(normalized_prize + 1) / (average_weight + 1)
    
    # Smooth the heuristic values to avoid sharp changes
    smoothed_heuristic = scipy.ndimage.gaussian_filter(combined_heuristic, sigma=1)
    
    # Introduce sparsity by setting values below a threshold to zero
    threshold = 0.01
    sparsified_heuristic = np.where(smoothed_heuristic > threshold, smoothed_heuristic, 0)
    
    return sparsified_heuristic
```
