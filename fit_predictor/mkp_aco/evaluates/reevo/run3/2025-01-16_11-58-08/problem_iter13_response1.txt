```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize and weight by their respective max values
    normalized_prize = prize / np.max(prize)
    normalized_weight = weight / np.max(weight, axis=1, keepdims=True)
    
    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Apply a non-linear transformation (e.g., sigmoid) to the ratio to emphasize high-value items
    sigmoid = lambda x: 1 / (1 + np.exp(-x))
    transformed_ratio = sigmoid(value_to_weight_ratio - 0.5) * 2 - 1
    
    # Incorporate sparsity by setting the transformed ratio to zero below a certain threshold
    threshold = 0.1
    sparsified_ratio = np.where(transformed_ratio > threshold, transformed_ratio, 0)
    
    # Ensure that the heuristics have a minimum variance by adding a small constant to the non-zero elements
    variance = np.var(sparsified_ratio[sparsified_ratio > 0])
    min_variance = 0.01
    sparsified_ratio[sparsified_ratio > 0] += min_variance / variance
    
    return sparsified_ratio
```
