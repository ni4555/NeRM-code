```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize vector
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the standardized weights for each dimension
    std_weight = np.std(weight, axis=1)
    
    # Inverse of the standard deviation of weights, to account for sparsity
    inverse_std_weight = 1 / (std_weight + 1e-8)
    
    # Calculate the combined heuristic value for each item
    combined = normalized_prize * inverse_std_weight
    
    # Calculate a variability threshold using the interquartile range
    q1, q3 = np.percentile(combined, [25, 75])
    iqr = q3 - q1
    variability_threshold = (q3 + iqr * 1.5) / 2
    
    # Apply a sparsity mechanism by setting below the variability threshold to zero
    heuristics = np.where(combined > variability_threshold, combined, 0)
    
    # Ensure the sum of heuristics is equal to the number of items
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
