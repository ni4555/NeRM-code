```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize vector by its sum to get a probability distribution
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the average weight for each item
    avg_weight = np.mean(weight, axis=1)
    
    # Calculate the maximum weight for each item to account for weight distribution
    max_weight = np.max(weight, axis=1)
    
    # Create a weight factor to adjust the normalized prize based on the weight distribution
    weight_factor = normalized_prize / (max_weight + 1e-8)
    
    # Calculate the heuristics based on a combination of the normalized prize and weight factor
    heuristics = normalized_prize * weight_factor
    
    # Sparsify the heuristics by setting elements below a certain threshold to zero
    # The threshold is dynamically calculated as the mean of the heuristics
    threshold = np.mean(heuristics)
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
