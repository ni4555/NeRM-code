```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize to weight ratio
    normalized_ratio = prize / np.sum(weight, axis=1)
    # Normalize the ratios to sum to 1
    heuristics = normalized_ratio / np.sum(normalized_ratio)
    # Incorporate a sparsity factor to reduce complexity
    sparsity_factor = 1 / (1 + np.abs(np.argmax(normalized_ratio, axis=1) - np.arange(len(normalized_ratio))))
    # Balance the normalized ratios with the sparsity factor
    heuristics *= sparsity_factor
    return heuristics
```
