```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2)
    # Aggregating performance by taking the sum of the non-linear scaled ratios over all dimensions
    aggregated_performance = np.sum(non_linear_scaled_ratio, axis=1)
    # Normalizing for sparsity by dividing by the maximum performance
    normalized_performance = aggregated_performance / np.max(aggregated_performance)
    # Domain-specific insights: penalize negative ratios
    heuristics = np.where(value_to_weight_ratio > 0, normalized_performance, 0)
    return heuristics
```
