```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the average prize per unit weight for each item
    average_prize_per_weight = prize / np.sum(weight, axis=1)
    # Normalize the prize to consider the global maximum prize value
    normalized_prize = prize / np.max(prize)
    # Calculate the average normalized prize per unit weight
    average_normalized_prize_per_weight = np.sum(normalized_prize * average_prize_per_weight) / np.sum(average_prize_per_weight)
    # Combine the normalized prize with the average prize per weight
    heuristics = normalized_prize * average_prize_per_weight
    # Normalize the heuristics by the average normalized prize per unit weight
    heuristics /= average_normalized_prize_per_weight
    # Incorporate a balance factor to account for the global context
    balance_factor = 1.5
    heuristics *= balance_factor
    # Ensure the heuristics are non-negative
    heuristics[heuristics < 0] = 0
    return heuristics
```
