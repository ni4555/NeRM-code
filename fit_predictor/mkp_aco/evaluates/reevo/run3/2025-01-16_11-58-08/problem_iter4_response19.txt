```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize to weight ratio for each dimension
    normalized_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate average normalized prize to weight ratio across dimensions
    avg_normalized_ratio = np.mean(normalized_ratio)
    
    # Calculate the weight distribution across dimensions
    weight_distribution = np.sum(weight, axis=1) / np.sum(weight)
    
    # Calculate the maximum weight for each item
    max_weight = np.max(weight, axis=1)
    
    # Adjust normalized prize by considering both average normalized ratio and individual max weight
    adjusted_prize = (normalized_ratio / (avg_normalized_ratio + 1e-8)) * (max_weight / (max_weight + 1e-8))
    
    # Combine the adjusted prize with the weight distribution to form the heuristics
    combined_heuristics = adjusted_prize * weight_distribution
    
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = np.percentile(combined_heuristics, 95)  # Using the 95th percentile as the threshold
    heuristics = np.where(combined_heuristics >= threshold, combined_heuristics, 0)
    
    return heuristics
```
