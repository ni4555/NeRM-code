```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize vector by subtracting the mean and dividing by the standard deviation
    normalized_prize = (prize - np.mean(prize)) / np.std(prize)
    # Calculate the value-to-weight ratio
    value_to_weight_ratio = normalized_prize / np.sum(weight, axis=1)
    # Use logarithm to reduce the impact of very high ratios and to introduce sparsity
    log_ratio = np.log1p(value_to_weight_ratio)
    # Thresholding to enhance sparsity
    thresholded_ratio = np.where(log_ratio > 0.1, log_ratio, 0)
    # Introduce variance and diversity by adding random noise
    noise = np.random.rand(*thresholded_ratio.shape) * np.std(log_ratio)
    # Normalize the noise to ensure the heuristic values remain on a similar scale
    noise_normalized = noise / np.max(noise)
    heuristics = thresholded_ratio + noise_normalized
    return heuristics
```
