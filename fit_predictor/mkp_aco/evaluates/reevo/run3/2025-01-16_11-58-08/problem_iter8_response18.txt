```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Apply non-linear scaling to the ratios
    non_linear_scaled_ratio = np.exp(value_to_weight_ratio)
    # Normalize the scaled ratios to maintain sparsity
    normalized_ratio = np.clip(non_linear_scaled_ratio, 0, 1)
    # Introduce an additional factor to prioritize items with higher prize
    additional_factor = prize / np.sum(prize)
    # Combine the factors and normalize
    combined_heuristics = normalized_ratio * additional_factor
    # Apply a threshold to filter out less promising items
    threshold = 0.2
    # Ensure the heuristics are between 0 and threshold
    heuristics = np.clip(combined_heuristics, 0, threshold)
    return heuristics
```
