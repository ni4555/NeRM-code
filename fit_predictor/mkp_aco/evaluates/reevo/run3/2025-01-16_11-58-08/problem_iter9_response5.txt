```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratios
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Apply a non-linear transformation to enhance sparsity and balance global/local
    non_linear_transformed_ratio = np.log(1 + value_to_weight_ratio)
    # Filter for diversity by maintaining a threshold
    filtered_diversity = non_linear_transformed_ratio[non_linear_transformed_ratio > 0.1]
    # Normalize the transformed ratios to maintain item sparsity
    normalized_ratio = filtered_diversity / np.max(filtered_diversity)
    # Apply domain insights with simplicity by focusing on positive ratios
    return np.where(value_to_weight_ratio > 0, normalized_ratio, 0)
```
