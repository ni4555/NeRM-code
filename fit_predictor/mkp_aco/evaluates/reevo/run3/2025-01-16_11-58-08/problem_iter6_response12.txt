```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Apply exponential scaling to emphasize high-value items
    exponentiated_ratio = np.exp(value_to_weight_ratio)
    # Normalize the exponentiated values to maintain sparsity
    normalized_ratio = exponentiated_ratio / np.sum(exponentiated_ratio)
    # Apply a threshold to create sparsity
    threshold = 0.1  # Example threshold
    sparsified_ratio = np.where(normalized_ratio > threshold, normalized_ratio, 0)
    return sparsified_ratio
```
