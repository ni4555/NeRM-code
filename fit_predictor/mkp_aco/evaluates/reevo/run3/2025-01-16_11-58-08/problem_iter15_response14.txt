```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to balance the influence of high values
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    # Apply log scaling to amplify high-value features
    log_scaled_prize = np.log(normalized_prize + 1)
    # Introduce sparsity by setting values below a certain threshold to zero
    sparsity_threshold = 0.01
    sparse_prize = np.where(log_scaled_prize > sparsity_threshold, log_scaled_prize, 0)
    # Incorporate randomness for diversity
    random_diversity = np.random.rand(*sparse_prize.shape)
    # Adjust the diversity to balance with the sparsity
    adjusted_diversity = random_diversity * sparse_prize
    # Normalize the final heuristics to ensure they sum to 1
    heuristics = adjusted_diversity / np.sum(adjusted_diversity)
    return heuristics
```
