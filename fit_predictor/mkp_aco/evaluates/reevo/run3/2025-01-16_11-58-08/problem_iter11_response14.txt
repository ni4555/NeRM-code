```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Normalization of the ratio by its max value
    normalized_ratio = value_to_weight_ratio / np.max(value_to_weight_ratio)
    # Emphasizing high values by squaring the normalized ratio
    emphasized_ratio = (normalized_ratio ** 2) * (normalized_ratio > 0.5)
    # Incorporating diversity by ensuring non-zero values in the range of 0.5 to 1
    diverse_ratio = np.where(emphasized_ratio > 0.5, emphasized_ratio, 0.5)
    # Non-linear transformation by applying a sigmoid function
    sigmoid_ratio = 1 / (1 + np.exp(-10 * (diverse_ratio - 0.5)))
    # Balancing simplicity with non-linearity by sparsifying based on a threshold
    sparsified_ratio = np.where(sigmoid_ratio > 0.2, sigmoid_ratio, 0)
    return sparsified_ratio
```
