```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Apply a domain-specific non-linear transformation to the ratio
    non_linear_transformed_ratio = np.log1p(value_to_weight_ratio) * (value_to_weight_ratio > 0.1)
    # Normalize using a non-linear scaling with an exponential decay
    exponential_scaled_ratio = non_linear_transformed_ratio * np.exp(-np.abs(non_linear_transformed_ratio))
    # Selective sparsity based on the exponential scaled ratio
    sparsified_ratio = np.where(exponential_scaled_ratio > 0.5, exponential_scaled_ratio, 0)
    return sparsified_ratio
```
