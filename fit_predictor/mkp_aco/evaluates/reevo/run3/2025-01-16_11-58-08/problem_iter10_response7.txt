```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Normalize the ratio and apply a non-linear transformation
    normalized_non_linear_ratio = (value_to_weight_ratio - np.mean(value_to_weight_ratio)) / np.std(value_to_weight_ratio)
    normalized_non_linear_ratio = np.log1p(normalized_non_linear_ratio)  # log1p for better behavior at zero
    
    # Calculate sparsity by using the 90th percentile of the normalized non-linear ratio
    sparsity_threshold = np.percentile(normalized_non_linear_ratio, 90)
    
    # Create the heuristics array based on the sparsity threshold
    heuristics = np.where(normalized_non_linear_ratio > sparsity_threshold, normalized_non_linear_ratio, 0)
    
    # Calculate diversity score as the inverse of the average heuristics for items above the threshold
    diversity_score = 1 / np.mean(heuristics[heuristics > 0])
    
    # Adjust heuristics based on diversity score
    heuristics[heuristics > 0] /= diversity_score
    
    return heuristics
```
