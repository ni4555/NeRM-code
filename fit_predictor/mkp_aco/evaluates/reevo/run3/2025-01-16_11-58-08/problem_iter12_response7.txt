```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    total_weight = np.sum(weight, axis=1)
    value_to_weight_ratio = prize / total_weight
    avg_value_to_weight_ratio = np.mean(value_to_weight_ratio)
    normalized_ratios = value_to_weight_ratio / avg_value_to_weight_ratio
    
    # Calculate diversity by considering the spread of ratios
    diversity = np.sum((normalized_ratios - np.mean(normalized_ratios)) ** 2)
    
    # Balance diversity with average ratio
    balance_factor = 2.0
    balanced_ratios = normalized_ratios * (balance_factor / (1 + diversity))
    
    # Apply sigmoid function for balancing simplicity
    sigmoid_alpha = 0.1
    sigmoid_beta = 0.1
    sigmoid_sparsity = 1 / (1 + np.exp(-sigmoid_alpha * balanced_ratios - sigmoid_beta))
    
    # Normalize to get a probability distribution
    normalized_sparsity = sigmoid_sparsity / np.sum(sigmoid_sparsity)
    
    # Apply sparsity control by capping the heuristics values
    sparsified_ratios = np.clip(normalized_sparsity, 0, 1)
    
    return sparsified_ratios
```
