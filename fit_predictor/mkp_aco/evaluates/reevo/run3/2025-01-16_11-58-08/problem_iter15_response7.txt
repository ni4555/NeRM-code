```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to scale between 0 and 1
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Normalize weight to control sparsity and variance
    normalized_weight = (weight - np.min(weight, axis=1, keepdims=True)) / (np.max(weight, axis=1, keepdims=True) - np.min(weight, axis=1, keepdims=True))
    
    # Use log scaling to enhance the effect of high-value features
    log_scaled_prize = np.log(normalized_prize)
    log_scaled_weight = np.log(normalized_weight)
    
    # Calculate value to weight ratio after transformations
    value_to_weight_ratio = log_scaled_prize / np.sum(log_scaled_weight, axis=1)
    
    # Amplify high-value features by increasing their relative importance
    amplified_ratio = value_to_weight_ratio * (value_to_weight_ratio > 0.1)
    
    # Introduce randomness to encourage diversity in the solution
    random_factor = np.random.rand(len(amplified_ratio))
    
    # Combine factors and sparsify
    combined_heuristics = amplified_ratio * random_factor
    sparsified_heuristics = np.where(combined_heuristics > 0.1, combined_heuristics, 0)
    
    # Normalize to ensure heuristics sum to 1
    heuristics = sparsified_heuristics / np.sum(sparsified_heuristics)
    
    return heuristics
```
