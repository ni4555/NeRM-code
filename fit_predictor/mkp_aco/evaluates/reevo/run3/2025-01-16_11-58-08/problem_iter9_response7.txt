```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Apply non-linear scaling with exponential transformation
    non_linear_scaled_ratio = np.exp(value_to_weight_ratio) - 1
    # Filter for items with positive value-to-weight ratios
    positive_ratio = non_linear_scaled_ratio > 0
    # Normalize the non-linearly scaled ratios to maintain sparsity
    normalized_ratio = non_linear_scaled_ratio / np.sum(non_linear_scaled_ratio[positive_ratio])
    # Combine global and local factors, focusing on the positive normalized ratios
    combined_heuristics = normalized_ratio[positive_ratio]
    # Enhance sparsity by setting non-promising items to zero
    heuristics = np.where(combined_heuristics > 0.5, combined_heuristics, 0)
    return heuristics
```
