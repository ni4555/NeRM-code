```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the inverse of the average weight across dimensions
    avg_weight = np.mean(weight, axis=1)
    inverse_avg_weight = 1 / (avg_weight + 1e-8)  # Adding a small value to avoid division by zero
    
    # Combine normalized prize and inverse average weight
    combined = normalized_prize * inverse_avg_weight
    
    # Incorporate the diversity by considering the range of weights
    range_weight = np.ptp(weight, axis=1)
    diversity = range_weight / (np.max(range_weight) + 1e-8)
    
    # Create a combined heuristic that accounts for both value and diversity
    combined_heuristics = combined * diversity
    
    # Calculate the standard deviation of the combined heuristic values
    std_dev = np.std(combined_heuristics)
    
    # Filter out items with low heuristic values or high standard deviation
    high_std_threshold = 0.1  # Example threshold for high standard deviation
    low_value_threshold = -0.1  # Example threshold for low heuristic values
    heuristics = np.where(combined_heuristics < std_dev * high_std_threshold, 0,
                           np.where(combined_heuristics < low_value_threshold, combined_heuristics,
                                    combined_heuristics - std_dev))
    
    # Normalize the heuristics to ensure they sum to 1 and avoid negative values
    heuristics = np.maximum(heuristics, 0)
    total_nonzero = np.sum(heuristics)
    heuristics /= total_nonzero
    
    return heuristics
```
