```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratios directly
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Normalize the ratio to a range between 0 and 1
    normalized_ratio = (value_to_weight_ratio - np.min(value_to_weight_ratio)) / (np.max(value_to_weight_ratio) - np.min(value_to_weight_ratio))
    # Apply a non-linear transformation to emphasize higher values
    non_linear_transformed_ratio = np.exp(normalized_ratio)
    # Normalize the transformed ratio to maintain the original scale
    normalized_non_linear_ratio = (non_linear_transformed_ratio - np.min(non_linear_transformed_ratio)) / (np.max(non_linear_transformed_ratio) - np.min(non_linear_transformed_ratio))
    # Calculate the standard deviation of the normalized non-linear ratios
    std_dev = np.std(normalized_non_linear_ratio)
    # Apply smoothing to the standard deviation
    smoothed_std_dev = std_dev * 0.8
    # Calculate the threshold for sparsification
    threshold = smoothed_std_dev * 0.5
    # Sparsify the heuristics by setting elements below a certain threshold to zero
    heuristics = np.where(normalized_non_linear_ratio > threshold, normalized_non_linear_ratio, 0)
    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)
    return heuristics
```
