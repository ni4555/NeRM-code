```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by the sum of weights to ensure consistency
    normalized_prize = prize / np.sum(weight, axis=1)
    # Create a simple ratio heuristic
    value_to_weight_ratio = normalized_prize / np.max(weight, axis=1)
    # Apply a logarithmic transformation to enhance sparsity and diversity
    transformed_ratio = np.log1p(value_to_weight_ratio) * (value_to_weight_ratio > 0.1)
    # Scale the transformed ratio to maintain balance between linearity and complexity
    scaled_ratio = transformed_ratio / np.max(transformed_ratio)
    # Trim low values to enhance sparsity and ensure diversity in the selection
    heuristics = np.where(scaled_ratio < 0.01, 0, scaled_ratio)
    return heuristics
```
