```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the inverse of the average weight across dimensions
    avg_weight = np.mean(weight, axis=1)
    inverse_avg_weight = 1 / (avg_weight + 1e-8)  # Adding a small value to avoid division by zero
    
    # Combine normalized prize and inverse average weight
    combined = normalized_prize * inverse_avg_weight
    
    # Calculate the standard deviation of the combined values
    std_dev = np.std(combined)
    
    # Sparsify the heuristics by setting elements below a certain standard deviation threshold to zero
    threshold = std_dev * 0.5
    heuristics = np.where(combined > threshold, combined, 0)
    
    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
