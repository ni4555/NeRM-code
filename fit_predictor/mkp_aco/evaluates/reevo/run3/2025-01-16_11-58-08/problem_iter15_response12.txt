```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize array to balance the influence of high-value items
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    # Apply a log transformation to stabilize variance and reduce the influence of outliers
    log_transformed_prize = np.log(normalized_prize + 1)
    # Compute the normalized value to weight ratio for each item
    value_to_weight_ratio = log_transformed_prize / np.sum(weight, axis=1)
    # Introduce randomness for diversity while maintaining the high-value features
    randomness_factor = np.random.rand(len(value_to_weight_ratio))
    # Use a Gaussian kernel to balance diversity and control sparsity
    gaussian_balance = np.exp(-((value_to_weight_ratio - 0.5) ** 2) / 0.25)
    # Combine the factors to create the heuristics
    combined_heuristics = value_to_weight_ratio * randomness_factor * gaussian_balance
    # Apply sparsification by setting low values to zero
    sparsified_heuristics = np.where(combined_heuristics > 0.1, combined_heuristics, 0)
    # Normalize the heuristics to ensure they sum to 1
    heuristics = sparsified_heuristics / np.sum(sparsified_heuristics)
    return heuristics
```
