```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Emphasize high values by applying an exponential transformation
    exponential_ratio = np.exp(value_to_weight_ratio)
    # Incorporate diversity by ensuring some diversity in the heuristic values
    diversity_factor = np.random.rand(*exponential_ratio.shape)
    # Balance simplicity with non-linear transformations
    balanced_heuristics = exponential_ratio * diversity_factor
    # Apply a sparsity threshold
    sparsified_heuristics = np.where(balanced_heuristics > 1, balanced_heuristics, 0)
    return sparsified_heuristics
```
