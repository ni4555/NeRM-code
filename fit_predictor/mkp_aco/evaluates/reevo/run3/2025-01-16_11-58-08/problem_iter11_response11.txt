```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by raising the ratio to the power of 1.5 and squaring
    non_linear_scaled_ratio = (value_to_weight_ratio ** 1.5) ** 2
    # Normalize by the maximum ratio to emphasize high values
    normalized_ratio = non_linear_scaled_ratio / np.max(non_linear_scaled_ratio)
    # Incorporate diversity by adding a random perturbation
    random_perturbation = np.random.rand(len(prize))
    combined_ratio = normalized_ratio + random_perturbation
    # Selective sparsity based on a threshold
    sparsified_ratio = np.where(combined_ratio > 0.5, combined_ratio, 0)
    return sparsified_ratio
```
