```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value-to-weight ratio
    ratio = prize / np.sum(weight, axis=1)
    # Normalize ratio and adjust by adding a small value to avoid division by zero
    normalized_ratio = ratio / np.sum(ratio) + 1e-6
    # Incorporate additional heuristic factors
    additional_heuristic = (prize / np.linalg.norm(weight, axis=1)) * (np.random.rand(n) * 0.1)
    # Combine heuristics and normalize the sum to sum to 1
    combined_heuristics = normalized_ratio + additional_heuristic
    combined_heuristics = combined_heuristics / np.sum(combined_heuristics)
    # Sparsify the heuristics by setting a threshold
    threshold = np.max(combined_heuristics) * 0.5
    heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    return heuristics
```
