```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Non-linear scaling by squaring the ratio and applying a threshold
    non_linear_scaled_ratio = (value_to_weight_ratio ** 2) * (value_to_weight_ratio > 0.25)
    # Apply a soft thresholding to keep diversity and balance sparsity
    soft_thresholded_ratio = np.clip(non_linear_scaled_ratio, 0, 1)
    # Maintain sparsity based on the soft thresholded ratio
    sparsified_ratio = np.where(soft_thresholded_ratio > 0.1, soft_thresholded_ratio, 0)
    return sparsified_ratio
```
