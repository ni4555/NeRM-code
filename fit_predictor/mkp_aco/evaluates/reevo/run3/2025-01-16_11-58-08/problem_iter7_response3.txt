```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Apply a non-linear transformation to the ratio
    non_linear_scaled_ratio = np.tanh(value_to_weight_ratio * 5) + 1
    # Normalize the transformed ratio to maintain variance across items
    normalized_ratio = (non_linear_scaled_ratio - np.min(non_linear_scaled_ratio)) / (np.max(non_linear_scaled_ratio) - np.min(non_linear_scaled_ratio))
    # Sparsify the normalized ratio using a threshold that considers both value and sparsity
    sparsified_ratio = np.where(normalized_ratio > 0.5, normalized_ratio, 0)
    return sparsified_ratio
```
