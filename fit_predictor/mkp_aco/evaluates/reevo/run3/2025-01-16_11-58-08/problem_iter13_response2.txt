```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by the sum of weights to balance high-value items
    normalized_prize = prize / np.sum(weight, axis=1)
    # Integrate variance into the heuristic by using the standard deviation
    variance = np.std(weight, axis=1)
    # Combine normalized prize and variance into a single heuristic
    combined_heuristic = normalized_prize * variance
    # Apply a non-linear transformation (e.g., logarithm) to enhance valuable features
    transformed_heuristic = np.log1p(combined_heuristic)
    # Sparsify the heuristic by setting low values to zero based on a dynamic threshold
    threshold = np.percentile(transformed_heuristic, 25)
    sparsified_heuristic = np.where(transformed_heuristic > threshold, transformed_heuristic, 0)
    return sparsified_heuristic
```
