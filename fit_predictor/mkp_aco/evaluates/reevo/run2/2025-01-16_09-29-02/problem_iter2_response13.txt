```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the value per unit weight for each item
    value_per_weight = prize / np.sum(weight, axis=1)
    
    # Normalize the value per unit weight to account for feasibility
    normalized_value = value_per_weight / np.min(value_per_weight)
    
    # Calculate the feasibility factor, which is the remaining capacity after taking the item
    feasibility_factor = 1 - np.sum(weight, axis=1)
    
    # Combine the normalized value and feasibility factor with a penalty for items that exceed the weight limit
    heuristics = normalized_value * feasibility_factor * np.maximum(1 - np.sum(weight, axis=1), 0)
    
    # Normalize the heuristics to ensure they are all non-negative
    heuristics = np.clip(heuristics, 0, None)
    
    return heuristics
```
