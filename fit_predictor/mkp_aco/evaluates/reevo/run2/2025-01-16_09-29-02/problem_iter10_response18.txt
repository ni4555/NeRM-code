```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / np.linalg.norm(weight, axis=1)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / np.linalg.norm(weight, axis=1)
    risk_factor = np.mean(weight, axis=1) / np.sum(weight, axis=1)
    
    # Balance between potential (value_per_weight) and risk (risk_factor)
    balanced_potential_risk = value_per_weight / (1 + risk_factor)
    
    # Normalize to maintain feasibility and avoid zero division
    heuristics = balanced_potential_risk * diversity_factor * normalized_prize * sparsity
    heuristics = heuristics / np.max(heuristics)  # Normalize the heuristics to be in [0, 1]
    
    # Avoid division by zero and ensure that non-promising items are still included
    heuristics[combined_heuristic < 0.01] = 0.01  # Sparsify the heuristics
    
    return heuristics
```
