```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    balance_factor = np.mean(value_per_weight * diversity_factor * normalized_prize)
    capped_balance_factor = np.clip(balance_factor, a_min=0, a_max=1)
    adaptive_factor = 1 / (np.max(weight, axis=1) + 1e-8)
    heuristics = (capped_balance_factor * adaptive_factor)
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    return heuristics
```
