```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Use individual normalization to prevent one dominant factor
    individual_norms = (value_per_weight * diversity_factor * normalized_prize * sparsity)
    normalized_heuristics = (heuristics / np.max(individual_norms))
    
    # Prune early to avoid unnecessary computations later
    sparsity_threshold = 0.1
    heuristics = np.where(normalized_heuristics >= sparsity_threshold, normalized_heuristics, 0)
    
    return heuristics
```
