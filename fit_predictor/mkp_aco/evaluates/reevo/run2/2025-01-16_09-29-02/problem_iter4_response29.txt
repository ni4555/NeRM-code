```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure the highest prize contributes the most
    normalized_prize = prize / np.max(prize)
    
    # Calculate the density of each item considering all dimensions
    density = np.sum(weight, axis=1) / np.sum(weight)
    
    # Calculate the risk factor as the weighted minimum of each item
    risk_factor = np.sum(weight * np.min(weight, axis=1), axis=1) / np.sum(weight)
    
    # Combine the normalized prize, density, and risk factor to form the heuristic
    heuristics = normalized_prize * density * (1 - risk_factor)
    
    # Ensure the heuristic values are within a reasonable range
    heuristics = np.clip(heuristics, 0.01, 1)
    
    return heuristics
```
