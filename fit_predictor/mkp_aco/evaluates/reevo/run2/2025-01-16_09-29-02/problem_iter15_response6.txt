```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value per weight for each item
    value_per_weight = prize / np.sum(weight, axis=1)
    
    # Calculate diversity factor to balance the distribution of weights
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Normalize the prize to get a relative measure
    normalized_prize = prize / np.sum(prize)
    
    # Calculate sparsity factor to encourage selection of items with less redundant weight
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combine factors to determine the heuristics
    combined_heuristics = (value_per_weight * diversity_factor * normalized_prize * sparsity)
    
    # Apply a sparsity threshold to reduce the weight of unpromising items
    sparsity_threshold = 0.1
    combined_heuristics[combined_heuristics < sparsity_threshold] = 0
    
    # Normalize the heuristics to ensure they sum to 1
    combined_heuristics = combined_heuristics / np.sum(combined_heuristics)
    
    return combined_heuristics
```
