```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Balancing utility and diversity with a cap on value_per_weight
    utility_diversity = (value_per_weight * diversity_factor)
    utility_diversity = np.clip(utility_diversity, 0, 1)
    
    # Normalize heuristics for better interpretability and scaling
    heuristics = (utility_diversity * normalized_prize * sparsity)
    
    # Penalize sparsity
    sparsity_threshold = 0.1
    heuristics[sparsity < sparsity_threshold] *= 0.5
    
    # Use adaptive scaling
    heuristics = heuristics / np.max(heuristics)
    return heuristics
```
