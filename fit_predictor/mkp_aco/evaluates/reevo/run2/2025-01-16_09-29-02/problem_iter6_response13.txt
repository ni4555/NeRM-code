```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    heuristics = value_per_weight * diversity_factor * normalized_prize * sparsity
    
    # Add a penalty for items with high normalized weight (penalize items that are too heavy)
    weight_penalty = (weight / np.sum(weight, axis=1)).T * (1 - diversity_factor)
    heuristics -= weight_penalty
    
    # Sparsify the heuristics by setting a threshold
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    
    # Introduce randomness to encourage exploration
    randomness_factor = np.random.rand(len(prize))
    randomness_factor /= np.sum(randomness_factor)  # Normalize to sum to 1
    heuristics *= randomness_factor
    
    # Adjust heuristics based on the total prize value
    dampening_factor = prize / np.sum(prize)
    heuristics *= dampening_factor
    
    return heuristics
```
