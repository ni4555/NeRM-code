```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Cap the heuristics to prevent dominance by a single factor
    capped_heuristics = np.clip(value_per_weight * diversity_factor * normalized_prize * sparsity, 0, 1)
    
    # Penalize sparsity more heavily
    sparsity_weight = 0.5
    heuristics = capped_heuristics * (1 - sparsity_weight) + sparsity_weight * sparsity
    
    # Use adaptive scaling to adjust the influence of each factor
    scaling_factor = np.mean(heuristics)
    heuristics /= scaling_factor
    
    # Set unpromising elements to zero
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
