```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    balance_factor = np.sum(weight, axis=1) / np.sum(weight, axis=1) ** 2
    dominance = prize / np.max(prize)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / np.linalg.norm(weight, axis=1) + 1e-8
    heuristics = (balance_factor * dominance * normalized_prize * sparsity)
    heuristics = np.clip(heuristics, 0, 1)  # Clip to ensure non-negative values
    return heuristics
```
