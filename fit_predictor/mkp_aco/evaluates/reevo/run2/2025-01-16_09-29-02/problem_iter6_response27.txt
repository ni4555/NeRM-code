```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value per weight for each item
    value_per_weight = prize / np.sum(weight, axis=1)
    # Normalize the value per weight by its maximum value
    value_per_weight_normalized = value_per_weight / np.max(value_per_weight)
    # Calculate diversity factor based on the sum of weights
    diversity_factor = np.sum(weight, axis=1) / np.sum(np.sum(weight, axis=1))
    # Normalize the diversity factor by its maximum value
    diversity_factor_normalized = diversity_factor / np.max(diversity_factor)
    # Combine the normalized value per weight and diversity factor
    combined_heuristics = value_per_weight_normalized * diversity_factor_normalized
    # Ensure non-negative values by adding a small epsilon
    combined_heuristics = np.maximum(combined_heuristics, np.finfo(float).eps)
    # Return the combined heuristics
    return combined_heuristics
```
