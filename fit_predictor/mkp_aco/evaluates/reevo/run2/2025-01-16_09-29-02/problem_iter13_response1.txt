```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    balance_factor = np.sum(weight, axis=1) / np.mean(weight, axis=1)
    heuristics = (value_per_weight * diversity_factor * normalized_prize * sparsity * balance_factor)
    cap_dominance_factor = np.max(value_per_weight) / heuristics
    heuristics = heuristics * cap_dominance_factor
    scaling_factor = np.sum(heuristics) / n
    heuristics = heuristics / scaling_factor
    heuristics[heuristics < sparsity_threshold] = 0
    return heuristics
```
