```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    min_weight_factor = np.min(weight, axis=1) / np.sum(weight, axis=1)
    diversity_factor = min_weight_factor
    # Normalize value per weight and diversity factor
    value_per_weight_normalized = value_per_weight / np.max(value_per_weight)
    diversity_factor_normalized = diversity_factor / np.max(diversity_factor)
    # Apply a non-linear transformation to shape the heuristic
    heuristics = np.log1p(value_per_weight_normalized * diversity_factor_normalized)
    # Introduce sparsity by focusing on top candidates
    sparsified_heuristics = np.where(heuristics > np.mean(heuristics), heuristics, 0)
    # Adjust for risk-reward balance by scaling standard deviation
    adjusted_heuristics = sparsified_heuristics * (1 - np.std(heuristics) / np.mean(heuristics))
    return adjusted_heuristics
```
