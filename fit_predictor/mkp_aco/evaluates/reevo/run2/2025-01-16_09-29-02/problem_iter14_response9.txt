```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Calculate additional features
    average_weight = np.mean(np.sum(weight, axis=1))
    weight_deviation = np.abs(np.sum(weight, axis=1) - average_weight)
    std_normalized_prize = np.std(prize / np.sum(prize))
    
    # Combine the features with adaptive scaling and weighting
    heuristics = value_per_weight * diversity_factor * normalized_prize * sparsity
    heuristics *= (1 + weight_deviation / (average_weight + 1e-8))
    heuristics *= (1 + std_normalized_prize / (std_normalized_prize + 1e-8))
    
    # Adjust the influence of each factor based on the problem scale and sparsity
    heuristics /= np.mean(heuristics) * len(prize)
    
    # Cap the heuristics to avoid dominance of a single factor
    heuristics = np.clip(heuristics, 0, 1)
    
    # Apply a sparsity threshold to filter out items with low heuristics
    sparsity_threshold = np.quantile(heuristics, 0.1)
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
