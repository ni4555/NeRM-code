```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value per weight for each item
    value_per_weight = prize / np.sum(weight, axis=1)
    
    # Calculate diversity factor for each item
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Normalize prize to prevent dominance by a single item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate sparsity of each item
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combine features to create a heuristic score
    heuristic_score = value_per_weight * diversity_factor * normalized_prize * sparsity
    
    # Apply sparsity threshold to ensure meaningful heuristic values
    heuristic_score[heuristic_score < 0.1] = 0
    
    return heuristic_score
```
