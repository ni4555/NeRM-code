```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combine the factors with weights that reflect their importance
    weighted_factors = 0.6 * value_per_weight + 0.2 * diversity_factor + 0.1 * normalized_prize + 0.1 * sparsity
    
    # Filter out items that are too sparse by setting their heuristic value to 0
    sparsity_threshold = 0.1
    weighted_factors[weighted_factors < sparsity_threshold] = 0
    
    # Normalize the heuristics to ensure all values are between 0 and 1
    max_heuristic = np.max(weighted_factors)
    heuristics = weighted_factors / max_heuristic if max_heuristic > 0 else np.zeros_like(weighted_factors)
    
    return heuristics
```
