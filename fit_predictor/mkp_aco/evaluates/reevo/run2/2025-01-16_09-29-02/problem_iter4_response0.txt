```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Balancing the factors with a weighted sum, with a slight emphasis on the value per weight
    balanced_factor = (0.6 * value_per_weight) + (0.3 * diversity_factor) + (0.1 * normalized_prize) + (0.1 * sparsity)
    
    # Avoiding premature sparsity by setting a threshold instead of hard-coding a value
    threshold = 0.1
    heuristics = np.clip(balanced_factor, a_min=threshold, a_max=None)
    
    return heuristics
```
