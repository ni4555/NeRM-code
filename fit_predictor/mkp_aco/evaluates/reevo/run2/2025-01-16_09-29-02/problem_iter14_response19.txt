```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combine factors with proper balance
    combined_factors = value_per_weight * diversity_factor * normalized_prize * sparsity
    
    # Normalize the combined factors
    min_factor = np.min(combined_factors)
    max_factor = np.max(combined_factors)
    normalized_factors = (combined_factors - min_factor) / (max_factor - min_factor)
    
    # Penalize dominance by setting a threshold
    dominance_threshold = 0.8
    normalized_factors[normalized_factors > dominance_threshold] = dominance_threshold
    
    # Encourage diversity by penalizing sparsity
    sparsity_threshold = 0.1
    sparsity_penalty = (sparsity_threshold - sparsity) * 0.1
    normalized_factors *= (1 - sparsity_penalty)
    
    return normalized_factors
```
