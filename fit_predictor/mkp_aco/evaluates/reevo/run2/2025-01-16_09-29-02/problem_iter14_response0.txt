```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combine the factors into a single heuristic
    heuristics = value_per_weight * diversity_factor * normalized_prize * sparsity
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    # Cap the heuristics to prevent dominance by a single factor
    capping_factor = 0.5
    heuristics = np.clip(heuristics, 0, capping_factor)
    
    # Apply a sparsity threshold to penalize low sparsity
    sparsity_threshold = 0.1
    sparsity_mask = heuristics >= sparsity_threshold
    heuristics[~sparsity_mask] = 0
    
    return heuristics
```
