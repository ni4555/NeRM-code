```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to the range of 0 to 1
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    # Calculate the sum of weights for each item
    item_weight_sum = np.sum(weight, axis=1)
    # Normalize the sum of weights by the maximum sum of weights
    weight_sum_normalized = item_weight_sum / np.max(item_weight_sum)
    # Calculate the inverse of the normalized weight sum
    weight_sum_inverse = 1 / weight_sum_normalized
    # Combine normalized prize and inverse normalized weight sum
    heuristics = prize_normalized * weight_sum_inverse
    # Cap the heuristics to be non-negative
    heuristics = np.clip(heuristics, 0, None)
    return heuristics
```
