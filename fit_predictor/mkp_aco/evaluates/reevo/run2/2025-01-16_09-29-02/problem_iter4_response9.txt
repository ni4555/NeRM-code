```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / np.sqrt(np.sum(weight**2, axis=1) + 1e-8)
    normalized_prize = prize / np.sqrt(np.sum(prize**2) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.sqrt(np.sum(weight**2, axis=1) + 1e-8) + 1e-8)
    heuristics = value_per_weight * diversity_factor * normalized_prize * sparsity
    heuristics = np.clip(heuristics, 0.01, 1)  # Ensure non-negative and bounded heuristics
    heuristics[heuristics < 1e-6] = 0  # Sparsify by setting low values to zero
    return heuristics
```
