```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combine the factors with a synergy factor
    synergy_factor = (value_per_weight * diversity_factor * normalized_prize * sparsity) ** 0.5
    
    # Incorporate thresholds to avoid sparsity traps
    threshold = 0.1
    heuristics = synergy_factor
    heuristics[heuristics < threshold] = threshold
    
    # Normalize to maintain scale
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    
    return heuristics
```
