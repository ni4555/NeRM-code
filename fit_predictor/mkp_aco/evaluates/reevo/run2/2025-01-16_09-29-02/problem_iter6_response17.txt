```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value per weight for each item
    value_per_weight = prize / np.sum(weight, axis=1)
    # Calculate diversity factor by considering the inverse of the weight norm
    diversity_factor = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    # Normalize the prize by its sum
    normalized_prize = prize / np.sum(prize)
    # Calculate sparsity by considering the inverse of the weight norm
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    # Combine the factors to form the heuristic score
    heuristic_score = value_per_weight * diversity_factor * normalized_prize * sparsity
    # Apply a sparsity threshold to promote diversity and ignore unpromising items
    sparsity_threshold = 0.1
    heuristic_score[heuristic_score < sparsity_threshold] = 0
    # Normalize the heuristic scores to ensure they are within a manageable range
    heuristic_score = (heuristic_score - np.min(heuristic_score)) / (np.max(heuristic_score) - np.min(heuristic_score))
    return heuristic_score
```
