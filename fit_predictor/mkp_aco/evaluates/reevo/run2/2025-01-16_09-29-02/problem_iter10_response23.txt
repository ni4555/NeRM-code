```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Max scaling to normalize the factors
    max_value_per_weight = np.max(value_per_weight)
    max_diversity_factor = np.max(diversity_factor)
    max_normalized_prize = np.max(normalized_prize)
    max_sparsity = np.max(sparsity)
    
    # Create a single scalar heuristic by combining factors
    heuristic = (value_per_weight / max_value_per_weight) * \
                (diversity_factor / max_diversity_factor) * \
                (normalized_prize / max_normalized_prize) * \
                (sparsity / max_sparsity)
    
    # Filter out insignificant contributions
    heuristic[heuristic < 0.01] = 0
    return heuristic
```
