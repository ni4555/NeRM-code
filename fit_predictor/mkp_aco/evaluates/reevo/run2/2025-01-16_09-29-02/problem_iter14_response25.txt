```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    heuristics = (value_per_weight * diversity_factor * normalized_prize * sparsity)
    
    capped_heuristics = np.clip(heuristics, 0, 1)
    
    sparsity_weight = 0.5
    heuristics *= (1 - sparsity_weight) + sparsity_weight * sparsity
    
    scaling_factor = np.max(capped_heuristics)
    heuristics /= scaling_factor
    
    sparsity_threshold = 0.1
    heuristics[heuristics < sparsity_threshold] = 0
    
    return heuristics
```
