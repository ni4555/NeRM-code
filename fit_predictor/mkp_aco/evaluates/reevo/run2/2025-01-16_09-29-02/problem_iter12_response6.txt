```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    value_per_weight = prize / np.sum(weight, axis=1)
    diversity_factor = np.sum(weight, axis=1) / (np.linalg.norm(weight, axis=1) + 1e-8)
    normalized_prize = prize / np.sum(prize)
    sparsity = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combine factors with a weighted sum to give more emphasis to sparsity
    heuristics = (0.4 * value_per_weight +
                  0.3 * diversity_factor +
                  0.2 * normalized_prize +
                  0.1 * sparsity)
    
    # Apply a sparsity threshold to filter heuristics
    sparsity_threshold = 0.1
    sparsity_mask = heuristics >= sparsity_threshold
    heuristics[~sparsity_mask] = 0
    
    heuristics /= np.max(heuristics)
    return heuristics
```
