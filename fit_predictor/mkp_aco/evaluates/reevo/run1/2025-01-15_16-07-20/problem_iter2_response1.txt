```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight per dimension
    normalized_prize = prize / np.sum(prize)
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate density based on normalized prize and weight
    density = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Calculate dimension-specific score
    score_per_dimension = normalized_prize / np.prod(1 - normalized_weight, axis=1)
    
    # Combine scores using a weighted sum
    combined_score = density + score_per_dimension
    
    # Apply a threshold to filter out less promising items
    threshold = np.percentile(combined_score, 70)  # 70th percentile as a threshold
    sparsified_score = np.where(combined_score > threshold, combined_score, 0)
    
    return sparsified_score
```
