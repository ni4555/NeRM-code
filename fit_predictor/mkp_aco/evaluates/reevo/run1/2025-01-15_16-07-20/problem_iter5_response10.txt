```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate dimension-specific factors based on normalized weights
    normalized_weights = weight / np.sum(weight, axis=1, keepdims=True)
    dimension_factors = normalized_weights * np.sum(weight**2, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine various factors to determine utility
    utility = density * constraint_balance * dimension_factors
    
    # Normalize utility to avoid overfitting
    normalized_utility = utility / np.max(utility)
    
    # Use sparsity to further refine the heuristics
    sparsity = (normalized_utility > max_prize / np.sum(prize)) * 1.0
    
    # Return the heuristics scores
    return normalized_utility * sparsity
```
