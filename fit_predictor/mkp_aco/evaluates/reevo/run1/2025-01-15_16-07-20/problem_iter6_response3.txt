```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    score = prize / np.sum(weight, axis=1)
    sparsity = np.sum(1 - weight, axis=1)
    sparsity_factor = sparsity / np.sum(sparsity)
    
    # Non-linear transformation to enhance the impact of high-value items
    transformed_prize = np.log(1 + prize)
    
    # Dimension-specific factors based on the standard deviation of each dimension
    dimension_factors = np.exp(-np.std(weight, axis=1))
    
    # Incorporating constraint balance
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combining all factors to create the heuristic
    heuristics = transformed_prize * (score + sparsity_factor * dimension_factors) * (1 - constraint_balance)
    
    return heuristics
```
