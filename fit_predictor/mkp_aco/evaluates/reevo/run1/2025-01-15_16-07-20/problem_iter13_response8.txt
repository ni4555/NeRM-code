```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the density based on prize and average weight
    density = prize / np.mean(weight, axis=1)
    
    # Calculate a non-linear transformation of density for emphasis
    non_linear_density = np.tanh(density)
    
    # Calculate the constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate a non-linear transformation of constraint balance
    non_linear_balance = np.log(constraint_balance + 1)
    
    # Calculate a sparsity bonus by considering items with zero weight in all dimensions
    sparsity_bonus = np.where(np.all(weight == 0, axis=1), prize, 0)
    
    # Calculate a bonus for unique items in each dimension
    unique_bonus = np.sum(weight == 1, axis=1)
    
    # Combine all factors into a utility score
    utility = non_linear_density * non_linear_balance + sparsity_bonus + unique_bonus
    
    # Normalize the utility scores
    normalized_utility = utility / np.sum(utility)
    
    # Return the heuristics scores
    return normalized_utility
```
