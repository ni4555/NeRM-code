```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate dimension-specific factors based on the standard deviation of weights
    std_dev = np.std(weight, axis=1)
    dimension_factors = 1 / (1 + std_dev)
    
    # Combine the factors to calculate utility
    utility = density * constraint_balance * dimension_factors
    
    # Calculate sparsity based on the ratio of utility to maximum prize
    sparsity = (utility > max_prize / np.sum(prize)) * 1.0
    
    # Normalize the utility to ensure that the heuristics sum to 1
    normalized_utility = utility / np.sum(utility)
    
    # Integrate sparsity as a selective filter for diversity
    sparsity_filter = sparsity * (1 - np.mean(sparsity))
    
    # Combine the sparsity filter with the normalized utility
    final_heuristics = normalized_utility * sparsity_filter
    
    # Return the heuristics scores
    return final_heuristics
```
