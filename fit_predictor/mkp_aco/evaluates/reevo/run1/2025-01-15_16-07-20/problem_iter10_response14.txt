```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the score based on prize to average weight ratio
    score = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity based on the sum of ones minus the sum of weights
    sparsity = np.sum(1 - weight, axis=1)
    sparsity_factor = sparsity / np.sum(sparsity)
    
    # Transform the prize to emphasize higher values
    transformed_prize = np.log(1 + prize)
    
    # Calculate the standard deviation for each dimension and apply as a factor
    dimension_factors = np.exp(-np.std(weight, axis=1))
    
    # Combine the transformed prize, score, sparsity factor, and dimension factors
    combined_factors = transformed_prize * score * sparsity_factor * dimension_factors
    
    # Normalize the combined factors to get heuristics
    heuristics = combined_factors / np.sum(combined_factors, axis=1, keepdims=True)
    
    return heuristics
```
