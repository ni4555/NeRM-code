```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize the prize values to a 0-1 scale
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the sum of normalized prizes for items with zero weight in each dimension
    non_zero_weight_sum = np.sum(normalized_prize[weight.sum(axis=1) > 0])
    sparsity_bonus = (np.sum(normalized_prize) - non_zero_weight_sum) / np.max(normalized_prize)
    
    # Calculate density based on normalized prize and average normalized weight
    density = normalized_prize / np.mean(normalized_weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Adjust utility with sparsity bonus
    adjusted_utility = utility + sparsity_bonus
    
    # Calculate the number of items per dimension
    items_per_dimension = np.sum(weight, axis=0)
    
    # Calculate a penalty for items that are overrepresented in any dimension
    overrepresentation_penalty = np.sum(items_per_dimension > 1)
    
    # Adjust the adjusted utility with the overrepresentation penalty
    adjusted_utility -= overrepresentation_penalty
    
    # Normalize the adjusted utility scores to ensure they sum to 1
    normalized_utility = adjusted_utility / np.sum(adjusted_utility)
    
    # Return the heuristics scores
    return normalized_utility
```
