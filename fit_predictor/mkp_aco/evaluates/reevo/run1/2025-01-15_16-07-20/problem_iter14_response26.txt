```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Normalize the prize values based on the maximum prize
    normalized_prize = prize / max_prize
    
    # Calculate the sparsity score, penalizing items that are too sparse
    sparsity_score = np.where(weight.sum(axis=1) > 0, 1, -1)
    
    # Calculate the relative contribution to the total weight for each item
    weight_contribution = np.sum(weight, axis=1) / np.sum(weight)
    
    # Calculate a score that combines normalized prize value and weight contribution
    combined_score = normalized_prize * weight_contribution
    
    # Calculate the balance score, giving preference to items that distribute weight evenly
    balance_score = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Incorporate the sparsity score and balance score into the combined score
    heuristics_score = combined_score * (1 + sparsity_score) * balance_score
    
    # Normalize the heuristics scores
    heuristics = heuristics_score / np.sum(heuristics_score)
    
    # Apply a penalty for overrepresentation in any dimension
    overrepresentation_penalty = np.sum(weight > 1)
    heuristics -= overrepresentation_penalty
    
    # Apply a non-linear transformation to enhance the effect of high scores
    heuristics = np.log1p(heuristics)
    
    # Return the heuristics scores
    return heuristics
```
