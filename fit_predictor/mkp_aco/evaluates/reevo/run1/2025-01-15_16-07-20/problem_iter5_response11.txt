```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Use dimension-specific factors
    dimension_factors = np.array([0.8, 0.2])  # Example factors for m=2 dimensions
    dimension_factors = dimension_factors.reshape(1, -1)
    utility *= np.dot(weight, dimension_factors)
    
    # Normalize the utility scores
    normalized_utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    
    # Sparsify by applying a threshold to the normalized utility
    sparsity_threshold = 0.5  # Example threshold
    sparsity = (normalized_utility > sparsity_threshold) * 1.0
    
    # Return the heuristics scores
    return utility * sparsity
```
