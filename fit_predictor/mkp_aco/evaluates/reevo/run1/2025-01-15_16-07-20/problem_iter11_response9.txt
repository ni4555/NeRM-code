```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density based on the sum of prizes and average weight per dimension
    density = np.sum(prize) / np.mean(np.sum(weight, axis=1))
    
    # Calculate the sparsity by checking the number of non-zero weight items in each dimension
    sparsity = np.mean(weight.sum(axis=1) > 0)
    
    # Calculate the total prize sum for items with zero weight in each dimension
    non_zero_prize_sum = np.sum(prize[weight.sum(axis=1) > 0])
    
    # Calculate the sparsity bonus
    sparsity_bonus = non_zero_prize_sum / np.sum(prize)
    
    # Calculate the constraint balance using a normalized sum of squared weights over the sum of weights
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine the factors into a single heuristic score
    heuristic_score = (density + sparsity_bonus + constraint_balance) / 3
    
    # Normalize the heuristic score to ensure that all scores are within a reasonable range
    max_score = np.max(heuristic_score)
    heuristic_score = heuristic_score / max_score
    
    # Return the normalized heuristic scores
    return heuristic_score
```
