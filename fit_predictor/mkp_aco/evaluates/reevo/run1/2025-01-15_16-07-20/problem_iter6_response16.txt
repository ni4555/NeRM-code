```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    normalized_prize = prize / np.sum(prize)
    density = prize / np.sum(weight, axis=1)
    balance_score = (np.max(weight, axis=1) - np.min(weight, axis=1)) / np.max(weight, axis=1)
    sparsity = 1 - np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate the heuristic value by combining multiple metrics
    heuristics = (normalized_prize * 0.4 + density * 0.3 - balance_score * 0.2) * sparsity * 0.1
    
    # Incorporate diversity by considering the sum of weights
    diversity_factor = 1 / np.sum(weight, axis=1)
    heuristics *= diversity_factor
    
    # Use a dynamic threshold based on the standard deviation of the heuristics
    std_dev = np.std(heuristics)
    threshold = np.mean(heuristics) + std_dev
    
    # Set elements below the threshold to zero
    heuristics[heuristics < threshold] = 0
    
    return heuristics
```
