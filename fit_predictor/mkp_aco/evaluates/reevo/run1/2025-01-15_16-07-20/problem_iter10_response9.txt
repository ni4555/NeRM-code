```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Normalize the prize
    normalized_prize = prize / max_prize
    
    # Normalize the weights for each item to be between 0 and 1
    normalized_weight = np.sum(weight, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the utility score by multiplying normalized prize and normalized weight
    utility_score = normalized_prize * normalized_weight
    
    # Calculate the diversity by taking the inverse of the sum of squared weights
    diversity_score = 1 / (np.sum(weight**2, axis=1) + 1e-6)
    
    # Combine utility and diversity to get the final heuristic
    heuristics = utility_score * diversity_score
    
    # Apply a non-linear transformation to the heuristic values to emphasize differences
    heuristics = np.tanh(heuristics)
    
    return heuristics
```
