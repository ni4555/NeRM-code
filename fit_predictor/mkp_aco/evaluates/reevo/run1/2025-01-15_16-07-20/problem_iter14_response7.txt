```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate value density for each item
    value_density = prize / np.mean(weight, axis=1)
    
    # Calculate balance by considering the standard deviation of weights
    balance = 1 / np.std(weight, axis=1)
    
    # Calculate relevance by considering the maximum weight in each dimension
    relevance = np.max(weight, axis=1) / np.sum(weight, axis=1)
    
    # Combine the three factors to get the utility score
    utility = value_density * balance * relevance
    
    # Normalize the utility scores to ensure they are comparable
    normalized_utility = utility / np.max(utility)
    
    # Return the heuristics scores
    return normalized_utility
```
