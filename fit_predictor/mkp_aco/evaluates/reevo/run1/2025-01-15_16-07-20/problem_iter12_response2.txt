```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the sum of prizes for items with zero weight in each dimension
    non_zero_weight_sum = np.sum(prize[weight.sum(axis=1) > 0])
    sparsity_bonus = (np.sum(prize) - non_zero_weight_sum) / np.sum(prize)
    
    # Calculate the density of each item
    density = prize / np.mean(weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine various factors for utility
    utility = density * constraint_balance * (1 - sparsity_bonus)
    
    # Normalize the utility scores to ensure fairness
    utility_normalized = utility / np.max(utility)
    
    # Return the heuristics scores
    return utility_normalized
```
