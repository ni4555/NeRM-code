```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item based on its prize relative to the total prize
    density = prize / np.sum(prize)
    
    # Calculate the sparsity score by considering the number of dimensions with non-zero weight
    sparsity_score = np.sum(weight > 0, axis=1)
    
    # Calculate the dimension-specific score based on the squared weight
    dimension_specific_score = np.sum(weight**2, axis=1)
    
    # Combine the density, sparsity, and dimension-specific score
    combined_score = density * sparsity_score * dimension_specific_score
    
    # Normalize the scores to ensure they are between 0 and 1
    max_combined_score = np.max(combined_score)
    min_combined_score = np.min(combined_score)
    normalized_combined_score = (combined_score - min_combined_score) / (max_combined_score - min_combined_score)
    
    # Ensure the heuristics are non-negative
    heuristics = np.clip(normalized_combined_score, 0, None)
    
    return heuristics
```
