```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize values to account for the scale of the problem
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate density based on normalized prize and average weight
    density = normalized_prize / np.mean(weight, axis=1)
    
    # Calculate the sparsity score by considering the proportion of zero-weight items
    sparsity_score = np.sum(weight.sum(axis=1) == 0) / weight.shape[0]
    
    # Calculate the diversity score by considering the spread of weights across dimensions
    diversity_score = np.mean(np.std(weight, axis=1))
    
    # Calculate the balance score by considering the average of the squared weights
    balance_score = np.mean(weight**2) / np.mean(weight)
    
    # Combine the scores into a single heuristic score
    heuristic_score = density * (1 - sparsity_score) * diversity_score * balance_score
    
    # Normalize the heuristic scores to make them comparable
    max_score = np.max(heuristic_score)
    normalized_heuristic_score = heuristic_score / max_score
    
    # Return the heuristics scores
    return normalized_heuristic_score
```
