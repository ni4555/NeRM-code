```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity of each item
    sparsity = 1 - np.sum(weight, axis=1)
    
    # Calculate the normalized density to ensure it's on a comparable scale
    normalized_density = density / np.sum(density)
    
    # Calculate the diversity factor based on the sum of weights
    diversity_factor = 1 / np.sum(weight, axis=1)
    
    # Combine density and sparsity, scaled by diversity factor
    combined_feature = normalized_density * (sparsity / diversity_factor)
    
    # Calculate the score based on the prize per unit weight
    score = prize / np.sum(weight, axis=1)
    
    # Refine the scores by emphasizing higher scores and incorporating diversity
    refined_score = combined_feature * (score > np.mean(score))
    
    return refined_score
```
