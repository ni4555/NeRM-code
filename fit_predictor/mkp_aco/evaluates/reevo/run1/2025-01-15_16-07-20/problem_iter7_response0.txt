```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Normalize the utility to focus on balance and relevance
    normalized_utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    
    # Apply a non-linear transformation to highlight important features
    transformed_utility = np.log1p(normalized_utility)
    
    # Dynamically adjust heuristics based on item properties
    adjusted_heuristics = transformed_utility * (prize / max_prize)
    
    # Sparsify the heuristics by setting less promising elements to zero
    sparsity = adjusted_heuristics > np.mean(adjusted_heuristics)
    heuristics = np.where(sparsity, adjusted_heuristics, 0)
    
    # Return the heuristics scores
    return heuristics
```
