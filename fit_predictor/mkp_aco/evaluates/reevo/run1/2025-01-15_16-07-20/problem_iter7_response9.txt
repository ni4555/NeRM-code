```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Non-linear transformation to highlight important features
    transformed_density = np.log1p(density)
    
    # Calculate utility considering both transformed density and constraint balance
    utility = transformed_density * (1 - constraint_balance)
    
    # Normalize scores based on the transformed utility
    normalized_utility = utility / np.sum(utility)
    
    # Dynamically adjust heuristics based on item properties
    adjusted_heuristics = normalized_utility * (1 + np.random.normal(0, 0.1, size=normalized_utility.shape))
    
    # Sparsify the heuristics by setting a threshold
    threshold = np.percentile(adjusted_heuristics, 90)
    sparsity = (adjusted_heuristics > threshold) * 1.0
    
    # Return the heuristics scores
    return adjusted_heuristics * sparsity
```
