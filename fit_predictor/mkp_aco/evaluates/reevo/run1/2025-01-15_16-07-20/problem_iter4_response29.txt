```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    normalized_prize = prize / np.sum(prize)
    density = prize / np.sum(weight, axis=1)
    complexity = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    balance_score = np.mean(weight, axis=1) / np.max(weight, axis=1)
    sparsity = 1 - np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Adjusting balance_score to reflect the range of weights better
    balance_score = 1 - balance_score
    
    # Incorporating interaction between items by considering the variance of the sum of weights
    item_interaction = np.sum(weight, axis=1)
    item_interaction_score = np.var(item_interaction) / np.mean(item_interaction)**2
    
    # The final heuristic is a combination of the above metrics
    heuristics = (normalized_prize * 0.5 +
                  density * 0.3 +
                  complexity * 0.1 +
                  balance_score * 0.1 +
                  sparsity * 0.2 +
                  item_interaction_score * 0.2)
    
    return heuristics
```
