```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the average value for items with zero weight in each dimension
    non_zero_weight_avg = np.mean(prize[weight.sum(axis=1) > 0])
    sparsity_bonus = non_zero_weight_avg / max_prize
    
    # Normalize the prize values based on the maximum prize
    normalized_prize = prize / max_prize
    
    # Calculate the relative contribution to the total weight for each item
    weight_contribution = np.sum(weight, axis=1) / np.sum(weight)
    
    # Calculate a score that combines normalized prize value and weight contribution
    combined_score = normalized_prize * weight_contribution
    
    # Incorporate a sparsity bonus to encourage selection of sparser items
    combined_score += sparsity_bonus
    
    # Apply a non-linear transformation to enhance the effect of high scores
    transformed_score = np.log1p(combined_score)
    
    # Normalize the transformed scores
    normalized_transformed_score = transformed_score / np.sum(transformed_score)
    
    # Apply a penalty for overrepresentation in any dimension
    overrepresentation_penalty = np.sum(weight > 1)
    normalized_transformed_score -= overrepresentation_penalty
    
    # Return the heuristics scores
    return normalized_transformed_score
```
