```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the total prize per dimension
    total_prize_per_dimension = np.sum(prize, axis=0) / weight.shape[1]
    
    # Calculate the average prize per weight dimension
    average_prize_per_weight = np.sum(prize, axis=0) / np.sum(weight, axis=0)
    
    # Calculate the heuristic by combining total prize per dimension and average prize per weight
    combined_heuristic = total_prize_per_dimension * average_prize_per_weight
    
    # Set a threshold for sparsification and convert the heuristic into a binary array
    threshold = np.max(combined_heuristic) / 2
    heuristics = (combined_heuristic > threshold).astype(float)
    
    # Set elements that are not promising to zero
    sparsified_heuristics = np.where(combined_heuristic > threshold, heuristics, 0)
    
    return sparsified_heuristics
```
