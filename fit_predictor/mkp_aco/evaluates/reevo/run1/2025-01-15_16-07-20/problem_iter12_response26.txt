```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Normalize prize values
    normalized_prize = prize / max_prize
    
    # Normalize the sum of weights for each item to get an average weight
    normalized_average_weight = np.sum(weight, axis=1) / n
    
    # Normalize the constraint balance for each item
    normalized_constraint_balance = np.sum(weight**2, axis=1) / (np.sum(weight, axis=1)**2)
    
    # Combine normalized prize, average weight, and constraint balance to get the utility
    utility = normalized_prize * (1 - normalized_constraint_balance) / (1 + normalized_average_weight)
    
    # Introduce a dynamic penalty for items with high average weight
    dynamic_penalty = 1 / (1 + np.mean(normalized_average_weight))
    
    # Adjust utility with the dynamic penalty
    adjusted_utility = utility * dynamic_penalty
    
    # Calculate the sparsity threshold based on the normalized prize
    sparsity_threshold = 1 / np.sum(normalized_prize)
    
    # Sparsify the heuristics by setting a threshold
    sparsity = (adjusted_utility > sparsity_threshold) * 1.0
    
    # Return the heuristics scores
    return adjusted_utility * sparsity
```
