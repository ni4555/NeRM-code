```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Normalize utility scores
    utility_normalized = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    
    # Leverage non-linear transformations to highlight important features
    utility_non_linear = np.tanh(utility_normalized * 5)  # Applying a tanh function to scale and shift the scores
    
    # Dynamically adjust heuristics based on item properties and problem specifics
    # Sparsify by setting a threshold for utility_non_linear
    threshold = np.percentile(utility_non_linear, 90)  # 90th percentile as a sparsity threshold
    sparsity = (utility_non_linear > threshold) * 1.0
    
    # Return the heuristics scores
    return utility_non_linear * sparsity
```
