```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the average weight for each item
    average_weight = np.mean(weight, axis=1)
    
    # Calculate the density of each item
    density = prize / average_weight
    
    # Calculate the constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate the utility for each item based on density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Scale the utility to ensure that the sum is 1
    normalized_utility = utility / np.sum(utility)
    
    # Determine sparsity by comparing each utility to the maximum prize normalized
    sparsity = normalized_utility > max_prize / np.sum(prize)
    
    # Calculate the value influence based on the prize and normalized utility
    value_influence = prize / max_prize * sparsity
    
    # Dynamically adjust the influence of high-value items
    value_influence = np.log1p(value_influence)  # Use logarithm to reduce influence
    
    # Combine the normalized utility and value influence to calculate heuristics
    heuristics = normalized_utility * value_influence
    
    # Normalize heuristics to ensure they sum to 1
    normalized_heuristics = heuristics / np.sum(heuristics)
    
    return normalized_heuristics
```
