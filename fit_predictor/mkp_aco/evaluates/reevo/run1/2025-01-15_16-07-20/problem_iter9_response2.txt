```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate a dynamic feature that penalizes heavily loaded items
    overload_penalty = 1 / (1 + np.sum(weight, axis=1))
    
    # Calculate utility considering density, constraint balance, and overload penalty
    utility = density * (1 - np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2) * overload_penalty
    
    # Normalize utility scores to balance out the influence of individual dimensions
    normalized_utility = utility / np.sum(utility)
    
    # Introduce a dynamic sparsity factor that adapts to the current state of the knapsack
    current_total_weight = np.sum(weight, axis=1)
    sparsity = (current_total_weight < np.prod(weight.max(axis=0))) * 1.0
    
    # Combine normalized utility and sparsity into heuristics scores
    heuristics = normalized_utility * sparsity
    
    # Return the heuristics scores
    return heuristics
```
