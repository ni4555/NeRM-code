```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate density based on prize and average weight
    density = prize / np.mean(weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Introduce a sparsity factor to encourage selecting only the most promising items
    sparsity_factor = np.sum(weight.sum(axis=1) > 0) / weight.shape[0]
    
    # Calculate a penalty for items with high density to avoid overfitting to easy items
    density_penalty = (1 - sparsity_factor) * (1 - density)
    
    # Normalize the utility scores by incorporating the density and constraint balance
    utility = density * constraint_balance * (1 - density_penalty)
    
    # Adjust the utility to account for the average prize of items with zero weight in each dimension
    non_zero_weight_sum = np.sum(prize[weight.sum(axis=1) > 0])
    sparsity_bonus = (np.sum(prize) - non_zero_weight_sum) / max_prize
    utility *= (1 + sparsity_bonus)
    
    # Normalize the utility scores
    utility_normalized = utility / np.max(utility)
    
    # Return the heuristics scores
    return utility_normalized
```
