```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the score based on the prize per unit weight
    score = prize / np.sum(weight, axis=1)
    
    # Calculate the score per dimension, taking into account the sparsity of the item
    score_per_dimension = prize / np.sum(weight, axis=1) * np.prod(1 - weight, axis=1)
    
    # Combine the scores by considering the total prize and the sparsity of each item
    combined_score = score + score_per_dimension
    
    # Normalize the scores to ensure they are on a comparable scale
    normalized_score = combined_score / np.sum(combined_score)
    
    # Refine the scores by emphasizing higher scores, which could be considered as a "fitness" function
    refined_score = normalized_score * (normalized_score > np.mean(normalized_score))
    
    # Apply a multiplicative factor to encourage diversity in the solution, reducing the chance of local optima
    multiplicative_factor = 1.1 ** (np.random.rand(*prize.shape))
    
    # Return the final heuristics
    return refined_score * multiplicative_factor
```
