```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate a value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate a penalty for items that have a very low value-to-weight ratio
    low_value_to_weight_penalty = np.where(value_to_weight_ratio < 1 / np.sum(weight), 1, 0)
    
    # Calculate a sparsity bonus for items with at least one zero weight in each dimension
    sparsity_bonus = np.sum(weight == 0, axis=1) / (weight.shape[1] * np.sum(weight != 0))
    
    # Calculate the density based on the value-to-weight ratio
    density = value_to_weight_ratio
    
    # Calculate a balance factor considering both the density and the value-to-weight ratio
    balance_factor = density * (1 - low_value_to_weight_penalty)
    
    # Adjust the balance factor with the sparsity bonus
    adjusted_balance_factor = balance_factor + sparsity_bonus
    
    # Calculate a penalty for overrepresented items in any dimension
    overrepresentation_penalty = np.sum(np.sum(weight, axis=0) > 1)
    
    # Normalize the adjusted balance factor by subtracting the overrepresentation penalty
    normalized_utility = adjusted_balance_factor - overrepresentation_penalty
    
    # Normalize the scores to sum to 1
    normalized_utility /= np.sum(normalized_utility)
    
    # Return the heuristics scores
    return normalized_utility
```
