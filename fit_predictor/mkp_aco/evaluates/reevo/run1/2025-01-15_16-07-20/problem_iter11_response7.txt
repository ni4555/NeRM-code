```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the normalized prize
    normalized_prize = prize / max_prize
    
    # Calculate the average weight per dimension
    average_weight = np.mean(weight, axis=1)
    
    # Calculate the sparsity bonus for items with very low weight in all dimensions
    sparsity_bonus = (1 - average_weight) / np.max(1 - average_weight)
    
    # Calculate the density based on normalized prize and average weight
    density = normalized_prize / average_weight
    
    # Calculate the constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine density, constraint balance, and sparsity bonus to calculate utility
    utility = density * constraint_balance * sparsity_bonus
    
    # Normalize the utility scores
    utility_normalized = utility / np.max(utility)
    
    # Return the heuristics scores
    return utility_normalized
```
