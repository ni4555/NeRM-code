```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combine multiple features for utility
    utility = density * constraint_balance * (1 - constraint_balance)
    
    # Leverage sparsity by using the maximum utility value as a threshold
    sparsity = (utility / max_prize) > 0.5
    
    # Dynamically adjust heuristics by incorporating item's sparsity
    adjusted_heuristics = utility * sparsity
    
    # Normalize the scores to ensure they are within a certain range
    normalized_heuristics = adjusted_heuristics / np.max(adjusted_heuristics)
    
    return normalized_heuristics
```
