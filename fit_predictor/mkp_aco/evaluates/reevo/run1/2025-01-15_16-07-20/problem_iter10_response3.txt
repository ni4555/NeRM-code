```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Normalize the utility scores
    normalized_utility = utility / np.sum(utility)
    
    # Leverage sparsity by setting a threshold and only keeping high scores
    threshold = max_prize / np.sum(prize) * 0.9
    sparsity = (utility > threshold) * 1.0
    
    # Dynamically adapt the heuristics by considering the remaining space in each dimension
    remaining_space = 1 - np.sum(weight, axis=1)
    dynamic_score = remaining_space * normalized_utility
    
    # Combine the dynamic score with the normalized utility and sparsity
    combined_heuristics = dynamic_score * sparsity
    
    return combined_heuristics
```
