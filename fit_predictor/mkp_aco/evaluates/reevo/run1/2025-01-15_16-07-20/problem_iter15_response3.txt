```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize array to a [0, 1] scale
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the sum of weights excluding zero weight items in each dimension
    non_zero_weight_sum = np.sum(weight[weight.sum(axis=1) > 0], axis=0)
    
    # Introduce a sparsity bonus for items with zero weight in each dimension
    sparsity_bonus = 1 - (non_zero_weight_sum / np.sum(weight))
    
    # Normalize the density based on prize and average weight
    density = prize_normalized / np.mean(weight, axis=1)
    
    # Normalize the constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Introduce a penalty for high constraint balance
    constraint_penalty = 1 - constraint_balance
    
    # Combine the density and constraint balance into a single utility score
    utility = density * constraint_penalty
    
    # Add sparsity bonus to utility
    utility += sparsity_bonus
    
    # Normalize the utility scores to [0, 1]
    utility_normalized = utility / np.sum(utility)
    
    # Identify items that are overrepresented in any dimension
    overrepresentation = np.sum(weight > 1, axis=1) > 0
    
    # Introduce a penalty for overrepresentation
    overrepresentation_penalty = 1 - np.mean(overrepresentation)
    
    # Adjust the normalized utility with the overrepresentation penalty
    adjusted_utility = utility_normalized * overrepresentation_penalty
    
    # Return the heuristics scores
    return adjusted_utility
```
