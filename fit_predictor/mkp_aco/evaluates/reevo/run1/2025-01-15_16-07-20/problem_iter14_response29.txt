```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to the sum of weights in each dimension
    score = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity as the sum of (1 - weight) for each item
    sparsity = np.sum(1 - weight, axis=1)
    
    # Calculate sparsity factor as the ratio of sparsity to the total sparsity
    sparsity_factor = sparsity / np.sum(sparsity)
    
    # Calculate the negative standard deviation of weights in each dimension as a penalty
    penalty = -np.std(weight, axis=1)
    
    # Combine the metrics into a single utility score
    utility = score * (1 + sparsity_factor * penalty)
    
    # Normalize the utility scores to ensure comparability
    normalized_utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    
    # Apply a non-linear transformation to the normalized utility to emphasize significant differences
    transformed_utility = np.log1p(normalized_utility)
    
    return transformed_utility
```
