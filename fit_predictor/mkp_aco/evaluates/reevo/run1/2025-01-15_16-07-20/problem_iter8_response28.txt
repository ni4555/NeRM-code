```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    score = prize / np.sum(weight, axis=1)
    sparsity = np.sum(1 - weight, axis=1)
    sparsity_factor = sparsity / np.sum(sparsity)
    
    transformed_prize = np.log1p(prize)
    
    dimension_factors = np.exp(-np.std(weight, axis=1))
    
    utility = score * transformed_prize * (1 + sparsity_factor * dimension_factors)
    
    # Normalize the utility to ensure all values are positive
    positive_utility = np.maximum(utility, 0)
    
    # Apply a non-linear transformation to highlight important features
    transformed_utility = np.log1p(positive_utility)
    
    # Normalize the transformed utility to focus on balance and relevance
    normalized_utility = (transformed_utility - np.min(transformed_utility)) / (np.max(transformed_utility) - np.min(transformed_utility))
    
    return normalized_utility
```
