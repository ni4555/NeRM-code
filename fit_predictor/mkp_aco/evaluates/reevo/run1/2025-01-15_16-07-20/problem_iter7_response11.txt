```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to ensure a balanced focus on all items
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Apply a non-linear transformation to the normalized prize to emphasize high-value items
    transformed_prize = np.log(normalized_prize + 1)
    
    # Calculate the average of the transformed prize and weight to balance the heuristics
    average = np.mean(weight, axis=1)
    
    # Leverage item properties and problem specifics to adjust the heuristics
    utility = transformed_prize * (1 - average)
    
    # Dynamically adjust heuristics based on item properties, focusing on sparsity
    sparsity = (utility > 0) * 1.0
    
    # Return the heuristics scores
    return utility * sparsity
```
