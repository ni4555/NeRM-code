```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the density of each item
    density = prize / np.mean(weight, axis=1)
    
    # Calculate the sparsity score for each item
    sparsity_score = np.mean(weight, axis=1) / np.sum(weight, axis=1)
    
    # Calculate the balance score considering the second-highest prize
    balance_score = (np.argsort(prize)[::-1][1] / max_prize) if max_prize > 0 else 1
    
    # Incorporate a diversity score that considers the number of items with zero weight in the same dimension
    diversity_score = np.mean(np.sum(weight == 0, axis=1) / m)
    
    # Combine the scores
    combined_score = density * (1 - sparsity_score) * balance_score * diversity_score
    
    # Normalize the combined score
    combined_score_normalized = combined_score / np.sum(combined_score)
    
    return combined_score_normalized
```
