```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Calculate sparsity based on the ratio of utility to maximum prize
    sparsity = (utility > max_prize / np.sum(prize)) * 1.0
    
    # Adapt dynamically based on item values and weight sparsity
    dynamic_score = (prize / (np.sum(weight, axis=0) + 1)) * (1 - sparsity)
    
    # Combine scores to get the final heuristics
    final_heuristics = utility * dynamic_score
    
    # Sparsify by setting lower scores to zero
    final_heuristics[final_heuristics < 0.1] = 0.0
    
    return final_heuristics
```
