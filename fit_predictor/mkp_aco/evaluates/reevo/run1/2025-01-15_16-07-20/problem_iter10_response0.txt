```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item, considering all dimensions
    density = prize / np.prod(weight, axis=1)
    
    # Calculate sparsity by considering the proportion of each item that would remain if selected
    sparsity = 1 / np.prod(weight, axis=1)
    
    # Balance the heuristic by considering both the potential prize gain and the sparsity of the item
    heuristic_score = density / sparsity
    
    # Normalize the heuristic scores to sum to 1, which helps with selecting the subset of items
    normalized_scores = heuristic_score / np.sum(heuristic_score)
    
    return normalized_scores
```
