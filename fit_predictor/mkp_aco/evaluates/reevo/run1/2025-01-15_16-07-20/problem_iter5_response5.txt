```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to sum to 1 to avoid overfitting
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(normalized_prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on normalized prize and average weight
    density = normalized_prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Use dimension-specific factors to enhance the utility of items
    dimension_factors = np.sum(weight, axis=1) / np.sum(weight, axis=0)
    utility *= dimension_factors
    
    # Normalize the utility to avoid overfitting
    max_utility = np.max(utility)
    utility /= max_utility
    
    # Sparsify the heuristics by setting less promising elements to zero
    sparsity_threshold = 0.1  # This threshold can be adjusted based on the problem scale
    sparsity = (utility > sparsity_threshold) * 1.0
    
    # Return the heuristics scores
    return utility * sparsity
```
