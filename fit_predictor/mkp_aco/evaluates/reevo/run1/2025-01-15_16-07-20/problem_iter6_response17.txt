```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the score of each item based on the ratio of prize to total weight for each dimension
    score = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity of each item, which is the product of the weights for each dimension
    sparsity = np.prod(1 - weight, axis=1)
    
    # Combine the score and sparsity to create an initial utility score
    combined_score = score * sparsity
    
    # Normalize the combined score by the sum of all combined scores to ensure the sum of scores is 1
    collective_contribution = np.sum(combined_score)
    adjusted_score = combined_score / collective_contribution
    
    return adjusted_score
```
