```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate a dimension-specific factor for each item
    dimension_factor = np.prod(weight, axis=1)
    
    # Calculate utility considering density, constraint balance, and dimension-specific factor
    utility = density * constraint_balance * dimension_factor
    
    # Normalize the utility to avoid overfitting
    normalized_utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    
    # Calculate sparsity based on the ratio of normalized utility to maximum normalized prize
    normalized_prize = prize / max_prize
    sparsity = (normalized_utility > normalized_prize) * 1.0
    
    # Return the heuristics scores
    return normalized_utility * sparsity
```
