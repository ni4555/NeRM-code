```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the average prize per unit weight for each item
    avg_prize_per_unit_weight = prize / np.sum(weight, axis=1)
    # Calculate the standard deviation of the prize distribution for each item
    std_dev_prize = np.std(prize / weight, axis=1)
    # Combine the average prize per unit weight and standard deviation
    combined_heuristics = avg_prize_per_unit_weight * (1 - std_dev_prize)
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = np.mean(combined_heuristics)
    heuristics = np.where(combined_heuristics > threshold, combined_heuristics, 0)
    return heuristics
```
