```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Emphasize high-value items
    value_weighted_prize = prize / np.max(prize)
    
    # Balance constraints by considering the normalized weight of each item
    normalized_weight = np.mean(weight, axis=1) / np.max(np.mean(weight, axis=1))
    
    # Leverage sparsity by setting a threshold for low utility items
    sparsity_threshold = np.mean(prize) / np.max(prize)
    sparsity = (value_weighted_prize > sparsity_threshold) * 1.0
    
    # Adapt dynamically by considering the inverse of the mean weight to promote diversity
    adaptiveness = 1 / normalized_weight
    
    # Combine the factors to calculate the heuristic scores
    heuristics = value_weighted_prize * adaptiveness * sparsity
    
    # Normalize the scores to ensure they are all within the same scale
    max_heuristic = np.max(heuristics)
    min_heuristic = np.min(heuristics)
    normalized_heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    return normalized_heuristics
```
