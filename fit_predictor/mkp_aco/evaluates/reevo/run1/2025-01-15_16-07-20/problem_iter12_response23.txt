```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item, considering all dimensions
    density = prize / np.prod(weight, axis=1)
    
    # Calculate the sparsity of each item by considering the proportion of the item's weight
    sparsity = 1 / np.sum(weight, axis=1)
    
    # Calculate the balance between the density and sparsity
    balance = density / sparsity
    
    # Normalize the balance scores to sum to 1
    normalized_scores = balance / np.sum(balance)
    
    # Optionally, add a stochastic element to encourage diversity in the solution
    # This can be a random factor that can be positive or negative
    random_factor = np.random.rand(len(normalized_scores))
    normalized_scores += random_factor - random_factor.mean()
    
    # Cap the heuristics scores to ensure they are within [0, 1]
    heuristics = np.clip(normalized_scores, 0, 1)
    
    return heuristics
```
