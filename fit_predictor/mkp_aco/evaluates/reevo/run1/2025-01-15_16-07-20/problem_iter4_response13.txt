```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to the sum of weights
    prize_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sum of each item's weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the sum of the logarithms of weights, adjusted by the sum of weights
    log_weight_sum = np.log(np.sum(weight, axis=1)) - np.log(weight_sum)
    
    # Calculate the heuristic value for each item by combining the above measures
    heuristics = prize_to_weight_ratio * log_weight_sum
    
    # Apply a threshold to filter out items with low heuristics
    threshold = np.mean(heuristics)
    heuristics[heuristics < threshold] = 0
    
    # Apply a sparsification technique by scaling the heuristics
    sparsified_score = heuristics * (heuristics > threshold) / np.max(heuristics)
    
    return sparsified_score
```
