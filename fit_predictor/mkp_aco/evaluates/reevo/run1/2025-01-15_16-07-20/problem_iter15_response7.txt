```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Normalize the prize
    normalized_prize = prize / max_prize
    
    # Calculate the sum of normalized prizes for items with zero weight in each dimension
    non_zero_weight_sum = np.sum(normalized_prize[weight.sum(axis=1) > 0])
    sparsity_bonus = (np.sum(normalized_prize) - non_zero_weight_sum) * 0.5
    
    # Normalize the weight to a [0, 1] range
    normalized_weight = (weight - np.min(weight, axis=1, keepdims=True)) / (np.max(weight, axis=1, keepdims=True) - np.min(weight, axis=1, keepdims=True))
    
    # Calculate density based on normalized prize and average normalized weight
    density = normalized_prize / np.mean(normalized_weight, axis=1)
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Adjust utility with sparsity bonus
    adjusted_utility = utility + sparsity_bonus
    
    # Calculate a penalty for items with low normalized prize values
    low_value_penalty = np.sum(normalized_prize < 0.2)
    
    # Adjust the adjusted utility with the low value penalty
    adjusted_utility -= low_value_penalty
    
    # Normalize the adjusted utility scores
    normalized_utility = adjusted_utility / np.sum(adjusted_utility)
    
    # Return the heuristics scores
    return normalized_utility
```
