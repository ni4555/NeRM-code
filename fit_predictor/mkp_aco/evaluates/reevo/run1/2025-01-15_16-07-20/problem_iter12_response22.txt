```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize
    max_prize = np.max(prize)
    
    # Calculate the normalized density based on prize
    normalized_density = prize / max_prize
    
    # Calculate the normalized constraint balance for each item
    normalized_constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate the average weight of each item
    average_weight = np.mean(weight, axis=1)
    
    # Introduce a dynamic penalty based on the average weight
    dynamic_penalty = 1 / (1 + average_weight)
    
    # Calculate the utility by combining normalized density, constraint balance, and dynamic penalty
    utility = normalized_density * normalized_constraint_balance * dynamic_penalty
    
    # Sparsify the heuristics by setting a threshold that considers the max prize
    sparsity_threshold = max_prize / np.sum(prize)
    sparsity = (utility > sparsity_threshold) * 1.0
    
    # Return the heuristics scores
    return utility * sparsity
```
