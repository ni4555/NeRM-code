```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize vector
    normalized_prize = prize / np.sum(prize)
    
    # Normalize the weight matrix to sum to 1 in each dimension
    normalized_weight = np.sum(weight, axis=1, keepdims=True) / np.sum(weight, axis=1)
    
    # Calculate the Euclidean distance of each item from the origin
    distance_from_origin = np.sqrt(np.sum(normalized_weight**2, axis=1))
    
    # Calculate the heuristic value based on a combination of normalized prize and distance
    heuristic_value = normalized_prize * (1 - distance_from_origin)
    
    # Incorporate diversity by considering the variance of weights in each dimension
    variance = np.var(weight, axis=1)
    diversity = 1 / (variance + 1e-6)  # Adding a small constant to avoid division by zero
    
    # Incorporate complexity by considering the total weight squared divided by the sum of weights squared
    complexity = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Incorporate domain-specific knowledge by considering the maximum prize-to-weight ratio
    prize_to_weight_ratio = normalized_prize / normalized_weight
    
    # Combine the heuristics by weighting the normalized prize, diversity, complexity, and ratio
    heuristics = heuristic_value * diversity * complexity * prize_to_weight_ratio
    
    # Normalize the heuristics to be between 0 and 1
    heuristics_normalized = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    
    return heuristics_normalized
```
