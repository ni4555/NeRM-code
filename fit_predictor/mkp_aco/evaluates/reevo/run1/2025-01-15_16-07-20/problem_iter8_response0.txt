```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Enhanced score based on non-linear transformation (logarithm)
    enhanced_score = np.log(1 + prize)
    
    # Sparsity score considering the number of non-zero dimensions
    sparsity = np.sum(1 - weight, axis=1)
    sparsity_factor = sparsity / np.sum(sparsity)
    
    # Dimension-specific factors based on the standard deviation of each dimension
    dimension_factors = np.exp(-np.std(weight, axis=1))
    
    # Constraint balance to ensure even distribution of weights across dimensions
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Combining all factors to create the heuristic
    heuristics = enhanced_score * (sparsity_factor * dimension_factors) * (1 - constraint_balance)
    
    return heuristics
```
