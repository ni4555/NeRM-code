```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize values
    prize_normalized = prize / np.max(prize)
    
    # Calculate the density score, weighted by normalized prize
    density = (prize_normalized / np.mean(weight, axis=1)).clip(min=0)
    
    # Calculate a sparsity score, penalizing items that are too sparse in any dimension
    sparsity = 1 / np.sum(weight**2, axis=1)
    sparsity = (1 - sparsity) * (1 / np.sum(weight, axis=0))
    
    # Calculate the constraint balance, using a simple balance ratio
    balance_ratio = np.mean(weight, axis=1) / np.max(weight, axis=1)
    
    # Combine the scores using a weighted sum, adjusting the weights dynamically
    heuristic_score = 0.5 * density + 0.3 * sparsity + 0.2 * balance_ratio
    
    # Normalize the heuristic scores
    heuristic_score /= np.sum(heuristic_score)
    
    # Apply a small noise to avoid zero heuristic values
    heuristic_score += np.random.rand(len(heuristic_score)) * 1e-4
    
    return heuristic_score
```
