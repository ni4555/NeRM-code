```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the maximum prize and average weight for each item
    max_prize = np.max(prize)
    average_weight = np.mean(weight, axis=1)
    
    # Calculate density based on prize and average weight
    density = prize / average_weight
    
    # Calculate constraint balance for each item
    constraint_balance = np.sum(weight**2, axis=1) / np.sum(weight, axis=1)**2
    
    # Calculate utility considering both density and constraint balance
    utility = density * (1 - constraint_balance)
    
    # Normalize the utility scores
    utility = utility / np.sum(utility)
    
    # Introduce dynamic sparsity by adding a dynamic factor based on the current total weight of selected items
    dynamic_factor = np.mean(weight, axis=0)
    sparsity = (utility > max_prize / (np.sum(prize) - np.sum(weight * dynamic_factor))) * 1.0
    
    # Return the heuristics scores
    return utility * sparsity
```
