```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate the normalized density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the average density across all items
    average_density = np.mean(density)
    
    # Introduce a diversity factor based on the deviation from the average density
    diversity_factor = np.where(density < average_density, 1 - (density / average_density), 1)
    
    # Create a heuristic value by blending the density, sparsity, and weight sum
    heuristic_value = density * (1 - sparsity) - np.sum(weight, axis=1)
    
    # Create a balanced heuristic by incorporating the diversity factor
    balanced_heuristic = heuristic_value * diversity_factor
    
    # Normalize the heuristic values to maintain a consistent scale
    normalized_heuristic = balanced_heuristic / np.max(balanced_heuristic)
    
    # Introduce a balance heuristic that considers the ratio of high density to low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Normalize the combined heuristic to the range [0, 1]
    combined_heuristic = combined_heuristic / np.max(combined_heuristic)
    
    return combined_heuristic
```
