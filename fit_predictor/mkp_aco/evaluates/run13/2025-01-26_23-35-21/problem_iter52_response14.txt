```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate the sum of weights to use in balancing
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the ratio of prize to the sum of weights
    prize_weight_ratio = prize / weight_sum
    
    # Calculate the diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a heuristic value by blending density and sparsity
    heuristic_value = density * (1 - sparsity)
    
    # Create a heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.4 * heuristic_value + 0.4 * balance_heuristic + 0.2 * diversity_factor
    
    # Introduce a balance heuristic based on the prize-weight ratio
    combined_heuristic += 0.4 * prize_weight_ratio
    
    # Normalize the combined heuristics
    combined_heuristic /= np.sum(combined_heuristic)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_index = weight_sum < 1e-8
    combined_heuristic[zero_weight_index] = 1e-8
    
    return combined_heuristic
```
