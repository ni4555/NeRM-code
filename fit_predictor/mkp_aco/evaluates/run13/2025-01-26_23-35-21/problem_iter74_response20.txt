```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to ensure non-zero denominator
    normalized_prize = prize / np.sum(prize) + 1e-8

    # Normalize the weights for each dimension
    normalized_weight = weight / np.sum(weight, axis=1, keepdims=True) + 1e-8

    # Calculate the value-to-weight ratio for each item and each dimension
    value_to_weight_ratio = normalized_prize / np.sum(weight ** 2, axis=1, keepdims=True) + 1e-8

    # Prune dominated items by considering the value-to-weight ratio
    dominance_mask = value_to_weight_ratio < np.min(value_to_weight_ratio)
    non_dominated_items = ~dominance_mask

    # Introduce diversity by calculating the average density and adding random noise
    average_density = np.mean(normalized_prize)
    noise_factor = np.random.normal(0, 0.01 / average_density, size=n)
    diversity_heuristic = normalized_prize + noise_factor

    # Sparsify the heuristics by setting dominated elements to zero
    sparsity = value_to_weight_ratio < average_density
    heuristic = diversity_heuristic * (1 - sparsity)

    # Balance between exploration and exploitation using a weighted heuristic
    weighted_heuristic = heuristic - np.sum(weight, axis=1)

    # Normalize the heuristic values
    normalized_heuristic = weighted_heuristic / (np.max(weighted_heuristic) + 1e-8)

    # Set dominated items to a very small value to maintain diversity
    dominated_heuristic = np.zeros(n)
    dominated_heuristic[dominance_mask] = 1e-8

    # Return the combined heuristics
    return normalized_heuristic + dominated_heuristic
```
