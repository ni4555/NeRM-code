```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Initialize a base heuristic based on the ratio of prize to weight sum
    base_heuristic = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness to encourage exploration
    random_factor = np.random.rand(*base_heuristic.shape)
    
    # Identify dominated items (items with lower prize compared to others with similar weight)
    dominated_indices = np.apply_along_axis(lambda x: np.argsort(x)[::-1], axis=1, arr=base_heuristic)
    non_dominated_indices = []
    for i in range(len(dominated_indices)):
        dominated = False
        for j in dominated_indices[i]:
            if j != i and base_heuristic[i] <= base_heuristic[j]:
                dominated = True
                break
        if not dominated:
            non_dominated_indices.append(i)
    
    # Update the base heuristic for non-dominated items
    base_heuristic[non_dominated_indices] = 1
    
    # Introduce sparsity to encourage diversification
    sparsity_factor = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    sparsity_factor[sparsity_factor > 1] = 1  # Avoid negative values
    
    # Normalize the heuristic to maintain a balanced scale
    normalized_heuristic = (base_heuristic + random_factor) * sparsity_factor
    
    # Ensure diversity by setting dominated items to a lower value
    normalized_heuristic[dominated_indices] = 1e-8
    
    return normalized_heuristic
```
