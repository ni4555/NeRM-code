```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Use a weighted average of the utility and the variance of the weights
    variance_weights = 1 / np.std(weight, axis=1)
    variance_weights = variance_weights / np.sum(variance_weights)
    heuristics = utility * variance_weights
    # Integrate sparsity by reducing the heuristics of items that are too close to the average utility
    mean_utility = np.mean(utility)
    sparsity_factor = (utility - mean_utility) / np.ptp(utility)
    heuristics *= (1 - sparsity_factor)
    # Normalize heuristics for better comparison across different problems
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    # Apply a cap to the heuristics to ensure they are within a reasonable range
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
