```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Prune dominated items
    dominance_matrix = np.array([[prize[j] < prize[i] or (prize[j] == prize[i] and weight[j, :].sum() > weight[i, :].sum()) for j in range(n)] for i in range(n)])
    non_dominated = np.logical_not(np.any(dominance_matrix, axis=1))
    prize = prize[non_dominated]
    weight = weight[non_dominated]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate a diversity factor
    diversity_factor = density / np.max(density + 1e-8)

    # Calculate balance factor between density and sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)

    # Combine factors with some weights to balance exploration and exploitation
    heuristic = 0.5 * diversity_factor + 0.5 * balance_factor

    # Normalize the heuristic to ensure it can be used for stochastic selection
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Embrace randomness by adding a small random value to the heuristics
    random_factor = np.random.rand(n)
    final_heuristic = normalized_heuristic * random_factor + (1 - random_factor)

    return final_heuristic
```
