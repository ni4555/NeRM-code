```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize values to account for their scale
    normalized_prize = prize / np.max(prize)

    # Calculate the sum of weights for each item
    weight_sum = np.sum(weight, axis=1)

    # Calculate sparsity, rewarding items that are not too dense
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    sparsity = 1 / (1 + sparsity)

    # Incorporate a diversity factor based on the prize distribution
    diversity_factor = np.sort(normalized_prize)[-1] / normalized_prize

    # Include a randomness factor to avoid getting stuck in local optima
    random_factor = np.random.rand(n)

    # Combine all factors into a heuristic value
    heuristic_value = normalized_prize * sparsity * diversity_factor * random_factor

    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic

    # Sparsify the heuristic values to avoid too many items being equally promising
    sparsified_heuristic = np.where(heuristic_value > 0.1, heuristic_value, 0)

    return sparsified_heuristic
```
