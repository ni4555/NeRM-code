```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize prize by maximum prize
    normalized_prize = prize / np.max(prize + 1e-8)
    
    # Normalize weight sum by maximum weight sum
    normalized_weight_sum = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1) + 1e-8)
    
    # Normalize each item's weight by maximum weight in its dimension
    normalized_weight_per_dim = weight / np.max(weight, axis=0, keepdims=True)
    
    # Create heuristic values combining normalized metrics
    heuristic = (normalized_prize - normalized_weight_sum) * (1 - np.mean(normalized_weight_per_dim, axis=1))
    
    # Introduce randomness to avoid overfitting and promote diversity
    randomness_factor = np.random.rand(weight.shape[0]) * (heuristic / np.max(heuristic))
    
    # Combine the heuristic values with randomness
    heuristic_with_randomness = heuristic + randomness_factor
    
    # Normalize the heuristic to sum to 1
    heuristic_normalized = heuristic_with_randomness / np.sum(heuristic_with_randomness)
    
    # Set zero weights to zero to maintain sparsity
    heuristic_normalized[weight_sum < 1e-8] = 0
    
    return heuristic_normalized
```
