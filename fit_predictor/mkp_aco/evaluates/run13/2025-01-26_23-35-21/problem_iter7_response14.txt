```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the utility score based on a weighted sum of prize and inverse density
    utility_score = (prize * (1 - sparsity)) + (1 / density)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Combine utility and sparsity with a diversity factor to balance the two metrics
    diversity_factor = 0.5
    heuristic_value = utility_score * (1 - diversity_factor * sparsity)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
