```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Prune dominated items
    dominated_items = np.argsort(prize)[::-1]
    for i in range(len(dominated_items) - 1):
        if prize[dominated_items[i]] >= prize[dominated_items[i + 1]]:
            break
    else:
        dominated_items = []
    non_dominated_indices = np.setdiff1d(np.arange(prize.shape[0]), dominated_items)

    # Normalize the prize to maintain balance with high density
    normalized_prize = prize / np.max(prize)

    # Calculate normalized density
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)

    # Introduce randomness for exploration
    random_factor = np.random.rand(weight.shape[0])

    # Combine density with randomness, adjusting for dominance
    heuristic = density
    if len(non_dominated_indices) > 0:
        heuristic[non_dominated_indices] = density[non_dominated_indices] + random_factor[non_dominated_indices]

    # Introduce an exploitation factor based on the sparsity
    exploitation_factor = 1 - np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Adjust heuristics to favor exploitation over exploration
    heuristic *= exploitation_factor

    # Introduce a diversity factor based on the average density
    average_density = np.mean(density[non_dominated_indices]) if non_dominated_indices.size > 0 else 1
    diversity_factor = density / (average_density + 1e-8)

    # Adjust heuristics for diversity
    heuristic *= diversity_factor

    # Normalize heuristics
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    return normalized_heuristic
```
