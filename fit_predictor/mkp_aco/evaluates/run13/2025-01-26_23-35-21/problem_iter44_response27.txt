```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate the normalized prize density
    density = prize / np.sum(weight, axis=1)

    # Introduce a sparsity measure that penalizes items with high weight
    sparsity = 1 - np.mean(weight, axis=1)

    # Use the ratio of prize to weight as a measure of value per unit weight
    value_per_weight = prize / np.sum(weight, axis=1)

    # Calculate the diversity factor based on the standard deviation of density
    diversity_factor = np.std(density)

    # Combine metrics using a weighted sum, prioritizing density and sparsity
    heuristic_value = 0.6 * density + 0.2 * sparsity + 0.2 * value_per_weight

    # Normalize the heuristic values to be between 0 and 1
    max_heuristic = np.max(heuristic_value)
    heuristic_value /= max_heuristic if max_heuristic > 0 else 1

    # Introduce randomness to promote diversity
    random_factor = np.random.rand(n)

    # Combine the heuristic value with the random factor
    heuristic = heuristic_value + random_factor

    return heuristic
```
