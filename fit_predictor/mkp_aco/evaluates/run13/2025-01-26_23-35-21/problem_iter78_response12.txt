```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Initialize heuristics with a high value for non-promising items
    heuristics = np.zeros(n)

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)

    # Prune dominated items (items with lower density and equal or higher sparsity)
    dominated_items = np.where(density < sparsity)[0]
    heuristics[dominated_items] = 0

    # Combine density, sparsity, and diversity for the remaining items
    for i in range(len(density)):
        if i not in dominated_items:
            heuristics[i] = density[i] * (1 - sparsity[i]) * diversity_factor[i]

    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(len(prize))
    heuristics *= random_factor

    # Normalize heuristics
    heuristics /= np.sum(heuristics)

    return heuristics
```
