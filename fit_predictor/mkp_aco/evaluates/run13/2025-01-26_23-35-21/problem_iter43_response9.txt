```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the utility value as a combination of normalized prize and diversity factor
    utility = (prize / np.max(prize) + 1e-8) * (np.random.rand(len(prize)) + 1)
    
    # Normalize the weights to ensure that high weight items are given priority
    normalized_weight = weight / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate the dominance heuristic by considering items that are more dense than the average
    dominance = np.where(normalized_weight > 0.5, 1, 0)
    
    # Introduce a sparsity heuristic to avoid selecting too many items from the same dimension
    sparsity = np.sum(weight, axis=1) / np.sum(weight)
    
    # Create a heuristic by combining the utility, normalized weight, dominance, and sparsity
    heuristic = utility * normalized_weight * dominance * (1 - sparsity)
    
    # Normalize the heuristic to ensure all values are within the same scale
    normalized_heuristic = heuristic / np.max(heuristic)
    
    # Prune low-quality heuristics by setting them to zero
    low_quality_threshold = np.percentile(normalized_heuristic, 10)
    normalized_heuristic[normalized_heuristic < low_quality_threshold] = 0
    
    return normalized_heuristic
```
