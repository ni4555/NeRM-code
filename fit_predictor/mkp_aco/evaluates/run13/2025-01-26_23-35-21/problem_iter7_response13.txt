```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity metric by subtracting the average density
    diversity = density - np.mean(density)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Combine density, diversity, and sparsity to create a heuristic value
    heuristic_value = density * (1 - sparsity) + diversity
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Apply a threshold to sparsify the heuristic, setting below-threshold values to zero
    threshold = np.mean(normalized_heuristic)
    heuristics = np.where(normalized_heuristic > threshold, normalized_heuristic, 0)
    
    return heuristics
```
