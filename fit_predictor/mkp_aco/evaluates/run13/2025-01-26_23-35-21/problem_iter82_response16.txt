```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Balance between density and value-to-weight ratio, emphasizing higher density
    heuristic = 0.8 * density + 0.2 * value_to_weight_ratio

    # Introduce a sparsity penalty for high sparsity, with a slight weight
    sparsity_penalty = (1 - np.mean(density)) * 0.1

    # Introduce randomness, with a balance to avoid dominance by randomness
    heuristic = (heuristic * (1 - sparsity_penalty)) * (random_factor * 0.8 + 0.2)

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(density == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    # Apply a balance factor to encourage diversity and prevent premature convergence
    balance_factor = np.exp(-np.mean(np.abs(np.diff(np.argsort(-normalized_heuristic))))) / np.max(normalized_heuristic)
    normalized_heuristic *= balance_factor

    # Ensure that all heuristics are non-negative
    normalized_heuristic = np.clip(normalized_heuristic, 0, None)

    return normalized_heuristic
```
