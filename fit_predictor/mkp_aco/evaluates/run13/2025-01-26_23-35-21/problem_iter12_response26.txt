```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the profit to weight ratio for each item
    profit_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity based on a threshold
    sparsity_threshold = 0.5
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    
    # Normalize the profit to weight ratio to ensure it contributes to the heuristics
    normalized_profit = profit_to_weight_ratio / np.max(profit_to_weight_ratio)
    
    # Normalize the sparsity to ensure it contributes to the heuristics
    normalized_sparsity = sparsity / np.max(sparsity)
    
    # Balance the weights of the normalized metrics to form heuristics
    # Adding diversity by considering the average item value
    average_value = np.mean(prize)
    diversity = normalized_profit / average_value
    
    # Control the impact of sparsity and diversity to avoid overfitting
    sparsity_control = 1.0 / (1.0 + np.exp(-sparsity_threshold))
    diversity_control = 1.0 / (1.0 + np.exp(-np.mean(weight, axis=1)))
    
    # Combine the metrics with controlled sparsity and diversity
    heuristics = (normalized_profit * 0.6 +
                  normalized_sparsity * 0.3 +
                  diversity * 0.1) * sparsity_control * diversity_control
    
    # Ensure all values are non-negative and within the range [0, 1]
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
