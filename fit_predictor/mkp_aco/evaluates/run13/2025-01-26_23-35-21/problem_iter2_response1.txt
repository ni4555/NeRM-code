```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight sum for each item
    item_value_to_weight_ratio = prize / np.sum(weight, axis=1)
    # Calculate the variance of the weights in each dimension
    item_weight_variance = np.var(weight, axis=1)
    # Combine the ratios and variances with a weighted sum
    # The weights of the variance are chosen to encourage sparsity in the heuristics
    variance_weights = np.exp(-3 * item_weight_variance)
    # Ensure the sum of variance weights is not zero to avoid division by zero
    variance_weights = variance_weights / np.sum(variance_weights)
    # Calculate the heuristic value for each item
    heuristics = item_value_to_weight_ratio * variance_weights
    # To encourage diversity, we can add a penalty for high variance
    diversity_penalty = np.mean(item_weight_variance)
    heuristics -= diversity_penalty
    # Set unpromising elements to zero
    heuristics[heuristics < 0.1] = 0
    # Normalize heuristics to ensure all values are non-negative
    heuristics = np.maximum(0, heuristics)
    return heuristics
```
