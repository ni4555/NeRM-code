```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to maintain a balanced perspective on high-value items
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Normalize weight to ensure all dimensions are treated equally
    normalized_weight = (weight - np.min(weight, axis=1, keepdims=True)) / (np.max(weight, axis=1, keepdims=True) - np.min(weight, axis=1, keepdims=True))
    
    # Create a heuristic based on normalized prize-to-weight ratio, penalizing sparsity
    heuristic_value = normalized_prize / (1 + np.sum(normalized_weight, axis=1))
    
    # Introduce randomness to avoid local optima and encourage exploration
    random_factor = np.random.rand(len(prize))
    
    # Combine the heuristic value with randomness, ensuring diversity
    heuristic = heuristic_value * (1 - random_factor) + random_factor
    
    # Introduce a penalty for dominance to avoid selecting only a few high-value items
    dominance_penalty = np.sum((heuristic > 0.5) * (heuristic - 0.5))
    heuristic -= dominance_penalty
    
    # Normalize the heuristic to ensure the sum of heuristics is 1
    normalized_heuristic = heuristic / np.sum(heuristic)
    
    # Set zero weights to a small positive value to maintain diversity
    zero_weight_penalty = (normalized_weight == 0).astype(float)
    normalized_heuristic[zero_weight_penalty] = 1e-8
    
    return normalized_heuristic
```
