```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Calculate the maximum of density to prevent dominated items from having zero density
    max_density = np.max(density)
    density = (density - 1e-8) / (max_density + 1e-8)

    # Identify dominated items using the value-to-weight ratio
    dominated_mask = value_to_weight_ratio < 1
    density[dominated_mask] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics using a weighted sum, including randomness
    heuristic = (0.4 * density +
                 0.3 * (1 - sparsity) +
                 0.2 * value_to_weight_ratio +
                 0.1 * random_factor)

    # Normalize the heuristic values to ensure a range of [0, 1]
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(density == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
