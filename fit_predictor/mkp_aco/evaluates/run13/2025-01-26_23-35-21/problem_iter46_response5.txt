```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize density across all items
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize sparsity across all items
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate diversity factors for each dimension
    diversity_factors = (np.max(weight, axis=1) - np.min(weight, axis=1)) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate overall diversity factor
    average_diversity = np.mean(diversity_factors)
    overall_diversity_factor = diversity_factors / (average_diversity + 1e-8)
    
    # Combine density, sparsity, and diversity
    heuristic_value = density * (1 - sparsity) * overall_diversity_factor
    
    # Introduce balance heuristic
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Blend heuristic values with exploration-exploitation balance
    exploration_balance = np.random.rand(n) * 0.5 + 0.5  # Exploration from 0.5 to 1.0
    combined_heuristic = exploration_balance * heuristic_value + (1 - exploration_balance) * balance_heuristic
    
    # Normalize combined heuristic to the range [0, 1]
    combined_heuristic = combined_heuristic / (np.sum(combined_heuristic) + 1e-8)
    
    # Ensure non-negative values
    combined_heuristic = np.clip(combined_heuristic, 0, 1)
    
    return combined_heuristic
```
