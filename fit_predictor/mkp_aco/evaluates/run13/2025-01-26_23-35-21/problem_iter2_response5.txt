```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight for each dimension
    utility_per_dimension = prize / np.sum(weight, axis=1)
    # Calculate the average utility across dimensions
    average_utility = np.mean(utility_per_dimension)
    # Adjust the threshold dynamically based on the average utility
    dynamic_threshold = average_utility + (np.max(utility_per_dimension) - average_utility) * 0.2
    # Create heuristics based on the dynamic threshold
    heuristics = np.where(utility_per_dimension >= dynamic_threshold, utility_per_dimension, 0)
    return heuristics
```
