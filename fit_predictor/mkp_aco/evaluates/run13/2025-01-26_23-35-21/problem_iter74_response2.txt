```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Identify dominated items using a percentile-based threshold
    percentile_threshold_density = np.percentile(density, 95)
    dominated_mask_density = density < percentile_threshold_density
    density[dominated_mask_density] = 0

    percentile_threshold_sparsity = np.percentile(1 - sparsity, 95)
    dominated_mask_sparsity = (1 - sparsity) < percentile_threshold_sparsity
    sparsity[dominated_mask_sparsity] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics using a weighted sum
    heuristic = (0.5 * density +
                 0.3 * sparsity +
                 0.2 * value_to_weight_ratio +
                 0.05 * random_factor)

    # Normalize the heuristic values to ensure a range of [0, 1]
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Adjust weights to emphasize desirable item characteristics
    # Emphasize higher prize, higher value-to-weight ratio, and lower sparsity
    adjusted_density = density / np.percentile(density, 90)
    adjusted_sparsity = sparsity / np.percentile(sparsity, 90)
    adjusted_value_to_weight_ratio = value_to_weight_ratio / np.percentile(value_to_weight_ratio, 90)
    adjusted_prize_weight = prize / np.percentile(prize, 90)

    adjusted_heuristic = (adjusted_density * 1.1 +
                          adjusted_sparsity * 1.1 +
                          adjusted_value_to_weight_ratio * 1.2 +
                          adjusted_prize_weight * 1.3 +
                          normalized_heuristic)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.count_nonzero(density) == 0 and np.count_nonzero(sparsity) == 0:
        adjusted_heuristic = np.ones(n) * 1e-8

    return adjusted_heuristic
```
