```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized prize per unit weight for each item
    density = prize / np.sum(weight, axis=1)
    
    # Introduce a penalty for items with extremely low sparsity (i.e., heavy items)
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    penalty_factor = (1 - sparsity) / (1 - np.min(sparsity))
    
    # Combine density with the penalty factor to form a heuristic value
    heuristic_value = density * penalty_factor
    
    # Introduce randomness to encourage diversity in the solution
    random_factor = np.random.rand(n)
    
    # Combine the heuristic with the random factor
    combined_heuristic = heuristic_value * random_factor
    
    # Ensure that all heuristics are positive by adding a small constant
    combined_heuristic = np.maximum(combined_heuristic, 1e-8)
    
    # Normalize the combined heuristics to ensure they are between 0 and 1
    max_combined_heuristic = np.max(combined_heuristic)
    if max_combined_heuristic > 0:
        combined_heuristic /= max_combined_heuristic
    
    return combined_heuristic
```
