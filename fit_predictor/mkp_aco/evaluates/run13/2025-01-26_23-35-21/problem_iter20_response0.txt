```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized profit to weight ratio for each item
    normalized_profit = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity factor based on the ratio of the minimum weight to the average weight
    sparsity_factor = np.min(weight, axis=1) / np.mean(weight, axis=1)
    
    # Calculate the sum of weights to balance the load across items
    weight_sum = np.sum(weight, axis=1)
    
    # Incorporate a diversity factor based on the variance of normalized profit
    diversity_factor = np.exp(normalized_profit / (np.var(normalized_profit) + 1e-8))
    
    # Combine the metrics using different weights to form a balanced heuristic value
    heuristic_value = (normalized_profit * 0.4 +
                       (1 - sparsity_factor) * 0.3 +
                       weight_sum * 0.2 +
                       diversity_factor * 0.1)
    
    # Normalize the heuristic value to ensure it's between 0 and 1
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Set zero weight items to 0 to avoid sharp penalties
    normalized_heuristic[weight_sum < 1e-8] = 0
    
    return normalized_heuristic
```
