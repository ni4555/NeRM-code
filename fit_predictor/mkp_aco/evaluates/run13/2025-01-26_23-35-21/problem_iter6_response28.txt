```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to weight for each item in each dimension
    ratio = prize / np.sum(weight, axis=1)[:, np.newaxis]
    # Normalize the prize values to balance weight and value
    normalized_prize = prize / np.sum(prize)
    # Calculate sparsity based on a threshold, considering all dimensions
    sparsity_threshold = 0.5
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    # Combine utility and sparsity in a balanced manner
    heuristics = normalized_prize * 0.4 + ratio * 0.5 + sparsity * 0.1
    # Apply a cap to the heuristics to ensure non-negative values
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
