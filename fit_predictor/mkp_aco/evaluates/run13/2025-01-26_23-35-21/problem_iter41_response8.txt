```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness to the heuristic to explore the solution space
    randomness = np.random.rand(len(prize))
    
    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Create a heuristic value by balancing density and sparsity
    heuristic_value = density - sparsity
    
    # Introduce a diversity factor based on the variation of density
    diversity_factor = np.var(density)
    
    # Create a final heuristic by combining the heuristic value with the diversity factor and randomness
    heuristic = heuristic_value * diversity_factor + randomness
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a sparsity bonus
    sparsity_bonus = (1 - sparsity) * 0.1
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * normalized_heuristic + 0.3 * sparsity_bonus
    
    # Ensure the heuristics are positive
    combined_heuristic = np.maximum(combined_heuristic, 0)
    
    return combined_heuristic
```
