```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized utility
    normalized_utility = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate additional heuristic based on diversity
    diversity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce randomness by adding a small normal noise
    randomness = np.random.normal(0, 1e-3, size=weight.shape[0])
    
    # Create a heuristic considering both utility and diversity, and randomness
    heuristic = normalized_utility * (1 - diversity) + randomness
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Prune dominated solutions by setting low utility heuristic values to zero
    dominated = np.argsort(normalized_utility)[::-1]
    for i in range(1, len(dominated)):
        if np.any(normalized_utility[dominated[i]] < normalized_utility[dominated[i-1]]):
            normalized_heuristic[dominated[i]] = 0
    
    return normalized_heuristic
```
