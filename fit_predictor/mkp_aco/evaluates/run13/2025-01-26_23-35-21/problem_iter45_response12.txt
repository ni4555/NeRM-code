```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Use a modified heuristic that combines density, sparsity, and balance
    heuristic_value = 1 - density  # Invert density to prioritize items with high utility relative to weight
    
    # Add diversity by ensuring there's no perfect dominance
    diversity_factor = 1 - (density / np.mean(density))
    
    # Combine heuristics using a weighted sum, adjusting weights to emphasize balance and diversity
    combined_heuristic = 0.5 * (heuristic_value + balance_heuristic) + 0.5 * diversity_factor
    
    # Normalize by the maximum heuristic value to scale the heuristic between 0 and 1
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity and prevent perfect dominance
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
