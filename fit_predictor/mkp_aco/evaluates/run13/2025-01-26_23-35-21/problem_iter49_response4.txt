```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a random number generator seed for reproducibility
    np.random.seed(42)
    
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness with a random perturbation
    random_perturbation = np.random.rand(len(density)) * (np.max(density) / 10)
    
    # Prune dominated items by comparing to the maximum density
    domination_threshold = np.max(density)
    non_dominated = density >= domination_threshold
    
    # Normalize the density by pruning dominated items
    density_normalized = np.where(non_dominated, density, 0)
    
    # Calculate sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Normalize the sparsity
    sparsity_normalized = np.where(non_dominated, sparsity, 0)
    
    # Introduce variance as a diversity metric
    variance = np.std(density_normalized)
    
    # Calculate a heuristic value combining density, sparsity, and variance
    heuristic_value = density_normalized * (1 - sparsity_normalized) - variance
    
    # Introduce a diversity factor based on variance
    diversity_factor = variance / (np.mean(variance) + 1e-8)
    
    # Combine the heuristic value with the diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Normalize the heuristics by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Prune dominated items by setting their heuristics to zero
    combined_heuristics = np.where(non_dominated, normalized_heuristic, 0)
    
    return combined_heuristics
```
