```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate value density ratio
    value_density_ratio = prize / (np.sum(weight**2, axis=1) + 1e-8)

    # Calculate diversity metrics
    diversity_density = np.mean(density)
    diversity_sparsity = np.mean(sparsity)

    # Prune dominated items based on density using a percentile threshold
    dominated_prune_threshold = np.percentile(density, 90)
    heuristics_pruned = np.where(density >= dominated_prune_threshold, density, 0)

    # Calculate non-dominance score
    non_dominance_score = np.array([np.count_nonzero(density >= np.max(density) - density[i]) for i in range(n)])

    # Introduce randomness with a diversity measure
    random_factor = np.random.rand(n) + 1e-8

    # Combine metrics with weighted importance
    heuristic = (0.4 * heuristics_pruned +
                 0.3 * (1 - sparsity) +
                 0.2 * value_density_ratio +
                 0.1 * (non_dominance_score / diversity_density) +
                 0.1 * (random_factor / diversity_sparsity))

    # Normalize the heuristic values
    heuristic_sum = np.sum(heuristic)
    if heuristic_sum > 0:
        normalized_heuristic = heuristic / heuristic_sum
    else:
        normalized_heuristic = np.full(n, 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if non_dominance_score.max() == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
