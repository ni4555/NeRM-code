```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Introduce a balance factor between high density and low sparsity
    balance_factor = (density - sparsity) / (np.abs(density - sparsity) + 1e-8)

    # Introduce a diversity factor based on the inverse variance of density
    variance_density = np.var(density)
    diversity_factor = 1 / (variance_density + 1e-8)

    # Create a heuristic by combining density, sparsity, balance, and diversity
    heuristic = density * 0.5 + sparsity * 0.3 + balance_factor * 0.2 + diversity_factor * 0.2

    # Introduce randomness to avoid local optima
    randomness = np.random.rand(n)
    heuristic += 0.1 * randomness

    # Normalize the heuristic to ensure the sum is one
    heuristic /= np.sum(heuristic)

    # Adjust the heuristic for items with zero weight to maintain diversity
    zero_weight_mask = np.sum(weight, axis=1) < 1e-8
    heuristic[zero_weight_mask] = 1e-8

    return heuristic
```
