```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Initialize a matrix to hold various heuristic components
    heuristics_components = np.zeros_like(prize)
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    heuristics_components += density
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    heuristics_components -= sparsity
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    heuristics_components -= weight_sum
    
    # Normalize the components
    heuristics_components /= np.max(heuristics_components + 1e-8)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    heuristics_components += diversity_factor
    
    # Introduce a balance factor that encourages items with high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    heuristics_components += balance_factor
    
    # Ensure the heuristics are sparse to avoid overfitting
    heuristics_components[weight_sum < 1e-8] = 0
    
    return heuristics_components
```
