```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity and normalize it
    sparsity = np.sum(weight, axis=1) / np.sum(weight, axis=1)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the balance factor
    balance_factor = 1 / (1 + np.abs(density - sparsity))
    
    # Introduce a diversity factor based on the variance of density
    variance_density = np.var(density)
    diversity_factor = 1 / (1 + variance_density)
    
    # Create a final heuristic by combining the factors
    heuristic = density * balance_factor * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Prune dominated items: items with lower heuristic value than any non-dominated item are set to zero
    non_dominated_indices = np.where(normalized_heuristic >= np.min(normalized_heuristic[normalized_heuristic > 0]))[0]
    dominated_indices = np.setdiff1d(np.arange(len(normalized_heuristic)), non_dominated_indices)
    normalized_heuristic[dominated_indices] = 0
    
    # Introduce a small value for items with zero weight to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
