```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize based on the maximum weight of each item
    normalized_prize = prize / np.max(weight, axis=1) + 1e-8

    # Calculate normalized density
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Use a percentile threshold to prune dominated items
    dominated_mask = density < np.percentile(density, 95)
    density[dominated_mask] = 0

    # Prune dominated items and normalize the density
    density /= np.sum(density)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine quality and diversity metrics to create a heuristic
    heuristic = 0.6 * density + 0.2 * value_to_weight_ratio + 0.1 * sparsity + 0.1 * random_factor

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.sum(normalized_heuristic) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
