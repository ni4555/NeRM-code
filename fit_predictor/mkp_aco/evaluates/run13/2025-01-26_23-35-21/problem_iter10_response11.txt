```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight for each item
    utility = prize / np.sum(weight, axis=1)
    # Normalize utility to have a mean of 1
    utility_normalized = utility / np.mean(utility)
    # Calculate diversity by using the standard deviation of the utility
    diversity = np.std(utility)
    # Calculate sparsity by the fraction of zero weights
    sparsity = 1 - np.mean(weight, axis=1)
    # Calculate the sum of weights to normalize weight contribution
    weight_sum = np.sum(weight, axis=1)
    # Normalize weight contribution by the sum of weights
    weight_contribution = weight_sum / np.sum(weight_sum)
    # Combine utility, diversity, sparsity, and weight contribution into a heuristic score
    heuristics = utility_normalized * diversity * sparsity * weight_contribution
    # Normalize the heuristics to ensure all values are between 0 and 1
    max_heuristic = np.max(heuristics)
    min_heuristic = np.min(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    return heuristics
```
