```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized prize value per unit weight
    prize_per_weight = prize / np.sum(weight, axis=1)
    
    # Calculate diversity based on standard deviation of prize per weight
    diversity = np.std(prize_per_weight)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Use a non-linear transformation (sigmoid) to create a balance heuristic
    balance_heuristic = 1 / (1 + np.exp(-(prize_per_weight - sparsity)))
    
    # Calculate adaptability based on the total weight capacity
    adaptability_factor = 1 / (m * n)
    
    # Introduce randomness with a decreasing impact to enhance exploration
    random_factor = np.random.rand(n) / (n + 1)
    
    # Combine all heuristics
    heuristic = 0.5 * diversity + 0.3 * balance_heuristic + 0.2 * adaptability_factor + 0.0 * random_factor
    
    # Normalize the heuristic to maintain a balance between items
    normalized_heuristic = heuristic / np.sum(heuristic)
    
    return normalized_heuristic
```
