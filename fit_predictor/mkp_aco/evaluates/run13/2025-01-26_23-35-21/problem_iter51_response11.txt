```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a matrix to hold the heuristics for each item
    heuristics = np.zeros_like(prize)

    # Iterate over all items to calculate heuristic
    for i in range(prize.shape[0]):
        # Calculate density
        density = prize[i] / (np.sum(weight[i]) + 1e-8)

        # Calculate sparsity
        sparsity = np.sum(weight[i]) / (np.max(weight[i]) + 1e-8)

        # Check if the item is dominated
        dominated = any(density < sparsity for j in range(prize.shape[0]) if j != i)

        # Introduce randomness to avoid getting stuck in local optima
        random_factor = np.random.rand()

        # Calculate heuristic based on a weighted sum of metrics
        heuristic = density * (1 - sparsity) + random_factor

        # If the item is not dominated, assign the heuristic
        if not dominated:
            heuristics[i] = heuristic

    # Normalize heuristics
    normalized_heuristics = heuristics / np.max(heuristics)

    return normalized_heuristics
```
