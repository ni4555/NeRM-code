```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the ratio of prize to total weight for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity based on a threshold for each dimension
    sparsity_threshold = 0.5
    sparsity = np.sum(weight < sparsity_threshold, axis=1) / weight.shape[1]
    
    # Normalize the prize by the maximum prize to ensure fairness
    normalized_prize = prize / np.max(prize)
    
    # Normalize the sparsity to emphasize items that are more unique
    sparsity = sparsity / np.max(sparsity)
    
    # Normalize the ratio to consider the best possible ratio
    ratio = ratio / np.max(ratio)
    
    # Combine the normalized factors with appropriate weights to create heuristics
    heuristics = normalized_prize * 0.6 + ratio * 0.3 + sparsity * 0.1
    
    # Ensure the heuristics are in the range [0, 1]
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
