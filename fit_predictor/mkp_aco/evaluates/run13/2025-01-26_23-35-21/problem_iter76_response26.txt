```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize to the maximum prize
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1)

    # Calculate normalized weight density
    density = np.sum(weight, axis=1) / n

    # Introduce a penalty for density (items with too much weight)
    density_penalty = np.clip(density - 1, -1, 0)

    # Calculate balance between value and weight
    balance = value_to_weight_ratio / (1 + density_penalty)

    # Calculate the diversity factor based on standard deviation of normalized prize
    diversity = normalized_prize / (np.std(normalized_prize) + 1e-8)

    # Create heuristic value by blending balance and diversity
    heuristic = balance * diversity

    # Normalize heuristics by summing to 1 to ensure diversity
    normalized_heuristic = heuristic / np.sum(heuristic)

    return normalized_heuristic
```
