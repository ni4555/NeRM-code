```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize density
    density = prize / np.sum(prize)
    
    # Calculate normalized sparsity based on the average weight per item
    sparsity = np.sum(weight, axis=1) / np.prod(weight.shape)
    
    # Introduce a penalty for items that do not comply with the weight dimension constraint
    weight_compliance_penalty = np.where(weight > 1, 1 - (weight - 1) / (np.max(weight, axis=1) - 1), 0)
    
    # Calculate the weight sum for each item
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic value based on density, sparsity, and weight compliance
    heuristic_value = density * (1 - sparsity) - weight_sum * weight_compliance_penalty
    
    # Introduce a diversity factor based on the standard deviation of the normalized prize density
    diversity_factor = np.std(density)
    
    # Combine the heuristic value with the diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Normalize the heuristic values to maintain a scale between 0 and 1
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)
    
    # Apply a zero weight penalty to ensure diversity
    zero_weight_penalty = 1e-8
    normalized_heuristic[weight_sum < zero_weight_penalty] = zero_weight_penalty
    
    return normalized_heuristic
```
