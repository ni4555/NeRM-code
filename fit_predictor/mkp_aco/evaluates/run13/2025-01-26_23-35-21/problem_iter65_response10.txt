```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an array with the same size as prize, initialized to zero
    heuristics = np.zeros_like(prize)

    # Sample items stochastically for each knapsack (assuming prize and weight are reshaped accordingly)
    for i in range(weight.shape[1]):
        selected_items = np.random.choice(weight.shape[0], size=int(weight.shape[0] / 2), replace=False)
        item_values = prize[selected_items]
        item_weights = weight[selected_items, i]
        
        # Calculate density and balance heuristic for selected items
        density = item_values / (item_weights + 1e-8)
        balance = (density - np.mean(density)) / (np.std(density) + 1e-8)
        
        # Calculate heuristic by combining density and balance
        heuristics[selected_items] = balance + density
    
    # Normalize the heuristics by dividing by the maximum value to ensure scale
    max_heuristic = np.max(heuristics)
    heuristics /= max_heuristic

    return heuristics
```
