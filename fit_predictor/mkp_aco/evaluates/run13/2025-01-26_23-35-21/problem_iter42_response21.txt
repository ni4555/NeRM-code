```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prizes to handle dominance by large prizes
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Normalize weights to account for the multi-dimensional nature
    max_weight_sum = np.max(np.sum(weight, axis=1))
    normalized_weight_sum = np.sum(weight, axis=1) / max_weight_sum

    # Calculate the density of each item
    density = normalized_prize / normalized_weight_sum

    # Introduce diversity by considering the mean weight per dimension
    diversity = np.mean(weight, axis=1) / np.sum(weight, axis=1)

    # Introduce sparsity by considering the uniformity of weights
    sparsity = np.mean(weight, axis=1) / (n * m)

    # Balance the utility and diversity scores
    utility_diversity_score = 0.6 * density + 0.4 * (diversity - sparsity)

    # Normalize the combined heuristic values
    max_utility_diversity_score = np.max(utility_diversity_score)
    normalized_utility_diversity_score = utility_diversity_score / (max_utility_diversity_score + 1e-8)

    # Ensure non-negative heuristic values
    normalized_utility_diversity_score = np.maximum(normalized_utility_diversity_score, 0)

    return normalized_utility_diversity_score
```
