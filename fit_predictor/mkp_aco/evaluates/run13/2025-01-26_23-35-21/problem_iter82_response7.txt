```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Balance heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic combining heuristic value with diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Balance heuristic based on high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Additional heuristic based on the balance between the sum of weights and diversity
    balance_heuristic += weight_sum / (np.max(weight_sum) + 1e-8)
    
    # Normalize the combined heuristic
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Adjust heuristics for items with zero weight to ensure diversity
    zero_weight_mask = weight_sum < 1e-8
    normalized_heuristic[zero_weight_mask] = 1e-8
    
    # Final heuristic is the weighted sum of normalized heuristic and balance heuristic
    final_heuristic = 0.7 * normalized_heuristic + 0.3 * balance_heuristic
    
    return final_heuristic
```
