```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize to the same scale as the total weights
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Introduce randomness for diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine normalized prize with randomness
    combined_factor = normalized_prize + random_factor

    # Apply sparsity penalty to encourage diversity in the solution
    sparsity_penalty = (1 - np.mean(normalized_prize)) * 0.2

    # Refine heuristic with sparsity penalty
    refined_heuristic = combined_factor * (1 - sparsity_penalty)

    # Normalize the heuristic values to ensure a bounded range
    max_refined_heuristic = np.max(refined_heuristic)
    min_refined_heuristic = np.min(refined_heuristic)
    normalized_heuristic = (refined_heuristic - min_refined_heuristic) / (max_refined_heuristic - min_refined_heuristic)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(normalized_prize == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
