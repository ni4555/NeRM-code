```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Ensure that weight does not contain zeros
    weight[weight == 0] = 1e-8
    
    # Calculate the normalized prize density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Define a balance factor that penalizes high sparsity
    balance_factor = 1 / (1 + sparsity)
    
    # Introduce randomness to the heuristic to encourage sparsity
    randomness = np.random.rand(*density.shape)
    
    # Create a heuristic based on density and balance
    heuristic = density * balance_factor + randomness
    
    # Normalize the heuristic to avoid dominance
    max_heuristic = np.max(heuristic)
    heuristic = heuristic / max_heuristic
    
    # Introduce an outlier penalty to prevent dominance by a single item
    outlier_penalty = np.sum(heuristic * prize) / max(prize)
    heuristic = heuristic / (1 + outlier_penalty)
    
    # Normalize the heuristics by the maximum value to ensure consistency
    normalized_heuristic = heuristic / np.max(heuristic)
    
    return normalized_heuristic
```
