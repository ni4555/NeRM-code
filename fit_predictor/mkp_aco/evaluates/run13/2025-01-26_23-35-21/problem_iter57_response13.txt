```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristic array with zeros
    heuristic = np.zeros_like(prize)

    # Normalize the prize to avoid dominated items
    normalized_prize = prize / np.max(prize)

    # Calculate density and sparsity
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Randomly sample items with a higher density and sparsity
    random_sample = np.random.rand(n)
    heuristic[np.where(random_sample < (density + sparsity))[:, 0]] = 1

    # Prune dominated items by setting their heuristic to zero
    for i in range(n):
        dominated_indices = np.where((density > density[i]) & (sparsity > sparsity[i]))
        for j in dominated_indices[0]:
            heuristic[j] = 0

    # Introduce randomness to balance exploration-exploitation
    random_factor = np.random.rand(n)
    heuristic *= random_factor

    # Normalize by the maximum heuristic value
    max_heuristic = np.max(heuristic)
    heuristic /= max_heuristic

    return heuristic
```
