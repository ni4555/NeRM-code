```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Normalize utility to ensure it is bounded and comparable
    utility_normalized = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    
    # Calculate the standard deviation of weights
    std_dev = np.std(weight, axis=1)
    # Normalize the standard deviation to maintain a consistent scale
    std_dev_normalized = (std_dev - np.min(std_dev)) / (np.max(std_dev) - np.min(std_dev))
    
    # Calculate the heuristic score as a combination of normalized utility and normalized standard deviation
    heuristics = utility_normalized + std_dev_normalized
    
    # Apply a simple threshold to promote diversity and balance between utility and diversity
    threshold = np.mean(heuristics)
    heuristics[heuristics < threshold] = 0
    
    # Normalize the heuristics to ensure they are between 0 and 1
    heuristics = heuristics / np.sum(heuristics)
    
    return heuristics
```
