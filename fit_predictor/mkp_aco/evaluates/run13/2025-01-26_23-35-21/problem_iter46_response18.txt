```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the ratio of prize to weight sum
    prize_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(len(density))
    
    # Normalize the randomness to ensure it's on par with other metrics
    normalized_random_factor = random_factor / np.max(random_factor)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) + prize_to_weight_ratio
    
    # Combine the heuristic value with randomness
    heuristic = heuristic_value * normalized_random_factor
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * heuristic + 0.2 * balance_heuristic
    
    # Prune low-quality heuristics by setting zero weights to a small value
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Normalize the combined heuristic to ensure all values are between 0 and 1
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    return combined_heuristic
```
