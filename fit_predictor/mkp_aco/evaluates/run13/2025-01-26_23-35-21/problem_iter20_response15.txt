```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prizes and weights to handle dominance
    max_prize = np.max(prize)
    max_weight = np.max(np.sum(weight, axis=1))
    normalized_prize = prize / max_prize
    normalized_weight = weight / max_weight

    # Calculate the density, emphasizing the value aspect
    density = normalized_prize / np.sum(normalized_weight, axis=1)

    # Encourage diversity by considering the sum of weights
    diversity = 1 / (np.sum(normalized_weight, axis=1) + 1e-8)

    # Combine density and diversity, with a focus on density
    heuristic_value = density * (0.6 * diversity + 0.4)

    # Normalize the heuristic values to maintain a consistent scale
    max_heuristic = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic + 1e-8)

    # Ensure non-negativity of heuristic values
    normalized_heuristic = np.maximum(normalized_heuristic, 0)

    # Apply penalties to low density items and items with zero weight
    too_low_density_penalty = (heuristic_value < 0.2) * -10
    zero_weight_penalty = np.where(np.sum(weight, axis=1) == 0, -np.inf, 0)
    normalized_heuristic += too_low_density_penalty + zero_weight_penalty

    # Cap the normalized heuristic values to maintain a range
    capped_normalized_heuristic = np.clip(normalized_heuristic, 0, 1)

    return capped_normalized_heuristic
```
