```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the diversity by considering the range of density values
    diversity = density / np.mean(density)
    
    # Prune dominated items by considering only those with a higher density
    domination_mask = density > np.mean(density)
    non_dominated_prize = prize[domination_mask]
    non_dominated_density = density[domination_mask]
    
    # Normalize the non-dominated density
    max_density = np.max(non_dominated_density)
    normalized_density = non_dominated_density / (max_density + 1e-8)
    
    # Introduce randomness to ensure diversity
    random_factor = np.random.rand(len(non_dominated_prize))
    
    # Combine density, diversity, and randomness into a heuristic
    heuristic = normalized_density * (1 - diversity) + random_factor * diversity
    
    # Normalize the heuristic
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    non_dominated_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
