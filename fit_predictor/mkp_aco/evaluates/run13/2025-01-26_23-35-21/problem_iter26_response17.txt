```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Normalize the prize to avoid dominance by a single high-value item
    normalized_prize = prize / np.sum(prize)

    # Calculate the normalized density for each item
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the intensity of each item based on the prize to weight ratio
    intensity = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the sparsity of each item, considering the maximum weight
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Introduce a diversity factor based on the standard deviation of the density
    diversity_factor = np.std(density)

    # Define a balance heuristic that rewards items with a balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)

    # Calculate the performance measure for each item, weighted by the density
    performance_measure = (prize / np.sum(weight, axis=1)) * density

    # Combine heuristics using a weighted average that considers intensity and balance
    combined_heuristic = (intensity * performance_measure / (intensity + diversity_factor)) + balance_heuristic

    # Normalize the combined heuristic by the maximum value to bound heuristic values
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)

    # Set zero weights to a very small value to maintain diversity while being negligible
    normalized_heuristic[np.sum(weight, axis=1) < 1e-8] = 1e-10

    return normalized_heuristic
```
