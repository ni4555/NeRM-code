```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to sum to 1
    normalized_prize = prize / np.sum(prize)
    
    # Calculate normalized density
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate balance factor based on density and sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Calculate diversity factor based on density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Calculate weight sum and normalize
    weight_sum = np.sum(weight, axis=1)
    weight_sum_normalized = weight_sum / np.sum(weight_sum)
    
    # Calculate heuristic based on a weighted sum of factors
    heuristic = 0.5 * (density + balance_factor) * weight_sum_normalized + 0.5 * diversity_factor
    
    # Apply a penalty for high sparsity to encourage more items
    heuristic[sparsity > 0.5] *= 0.5
    
    # Normalize the heuristic values
    heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    # Ensure non-negative heuristics
    heuristic = np.maximum(heuristic, 0)
    
    return heuristic
```
