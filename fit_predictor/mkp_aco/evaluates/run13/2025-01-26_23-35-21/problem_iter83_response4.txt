```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a random seed for reproducibility
    np.random.seed(42)
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate sum of weights for an additional heuristic
    weight_sum = np.sum(weight, axis=1)
    
    # Create an heuristic by combining metrics and introduce randomness
    heuristic = (density * (1 - sparsity) - weight_sum) + np.random.normal(0, 0.01, size=prize.shape)
    
    # Introduce a diversity factor
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a balanced heuristic
    balanced_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Prune dominated items (those with lower density than others)
    sorted_indices = np.argsort(density)[::-1]
    non_dominated = density[sorted_indices] > np.mean(density[sorted_indices[:int(0.1 * len(density))]])
    dominated_indices = np.where(~non_dominated)[0]
    heuristic[dominated_indices] = 0
    
    # Normalize heuristics to maintain sparsity
    max_heuristic = np.max(heuristic)
    heuristic[max_heuristic < 1e-8] = 1e-8
    
    return heuristic
```
