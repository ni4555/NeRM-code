```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize per unit weight for each item
    density = prize / np.sum(weight, axis=1)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate a penalty for items that exceed the weight constraint of 1
    weight_penalty = np.sum(weight, axis=1) / np.maximum(np.sum(weight, axis=1), 1e-8)

    # Combine density and sparsity, and penalize weight violation
    heuristic_value = density * (1 - sparsity) - weight_penalty

    # Normalize the heuristic values based on the minimum heuristic to ensure they are non-negative
    min_heuristic = np.min(heuristic_value)
    normalized_heuristic = heuristic_value - min_heuristic

    # Introduce a diversity factor based on the variance of the normalized heuristic
    diversity_factor = np.exp(-np.abs(normalized_heuristic - np.mean(normalized_heuristic)))

    # Normalize the final heuristic values to sum to 1
    final_heuristic = normalized_heuristic * diversity_factor
    final_heuristic /= np.sum(final_heuristic)

    return final_heuristic
```
