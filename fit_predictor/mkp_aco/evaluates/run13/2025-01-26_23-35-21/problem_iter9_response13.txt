```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce diversity by considering the average item value
    average_value = np.mean(prize)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = (density * (1 - sparsity) + weight_sum - average_value) / (1 + np.abs(weight_sum - average_value))
    
    # Manage sparsity by adding a term to penalize zero weights
    heuristic_value[weight_sum == 0] = 0
    
    # Normalize by the maximum heuristic value
    max_heuristic = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic + 1e-8)
    
    # Introduce a diversity control term to avoid overfitting
    diversity_control = np.exp(-np.sum(weight**2, axis=1) / (np.sum(weight, axis=1) + 1e-8))
    normalized_heuristic *= diversity_control
    
    return normalized_heuristic
```
