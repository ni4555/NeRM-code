```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Introduce randomness with a bias towards higher density
    random_factor = np.random.rand(len(prize))
    random_factor = random_factor * (1 - density) + density
    
    # Create a heuristic value based on density and randomness
    heuristic_value = density + random_factor
    
    # Normalize the heuristic to avoid dominance
    normalized_heuristic = heuristic_value / np.max(heuristic_value)
    
    # Ensure the heuristic is sparse by setting small weight sum to zero
    heuristic = np.where(np.sum(weight, axis=1) < 1e-8, 0, normalized_heuristic)
    
    return heuristic
```
