```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate the normalized prize per unit weight for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the diversity factor based on the standard deviation of the density
    diversity_factor = np.exp(-np.std(density))

    # Calculate a sparsity factor for each item
    sparsity_factor = np.mean(weight, axis=1) / np.max(weight, axis=1)

    # Balance the density and diversity with a sparsity penalty
    balance_factor = (density - sparsity_factor) / (density + sparsity_factor + 1e-8)

    # Apply a diversity penalty to discourage selecting items with very similar densities
    diversity_penalty = np.exp(-np.mean(density))

    # Combine the balance factor with the diversity penalty
    heuristic = balance_factor * diversity_penalty

    # Normalize the heuristic values to be between 0 and 1
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic

    # Ensure the heuristics are non-negative
    heuristic = np.maximum(heuristic, 0)

    return heuristic
```
