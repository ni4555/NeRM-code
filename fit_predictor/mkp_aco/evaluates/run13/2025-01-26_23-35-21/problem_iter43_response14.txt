```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an empty array to store heuristics
    heuristics = np.zeros_like(prize)
    
    # Loop through each item to calculate its heuristic
    for i in range(prize.shape[0]):
        # Calculate utility based on prize and normalize by sum of weights in each dimension
        utility = prize[i] / np.sum(weight[i])
        
        # Calculate sparsity as the sum of weights
        sparsity = np.sum(weight[i])
        
        # Calculate dominance as the ratio of the maximum weight in each dimension to the sum of weights
        dominance = np.max(weight[i]) / sparsity
        
        # Introduce randomness to encourage diversity
        random_factor = np.random.rand()
        
        # Calculate heuristic value considering utility, sparsity, and dominance
        heuristic_value = utility * (1 - sparsity) * (1 - dominance) * random_factor
        
        # Normalize the heuristic value
        heuristic_value /= (np.max(heuristic_value) + 1e-8)
        
        # Assign the heuristic value to the corresponding item
        heuristics[i] = heuristic_value
    
    return heuristics
```
