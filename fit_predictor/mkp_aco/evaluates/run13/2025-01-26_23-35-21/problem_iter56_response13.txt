```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize by the total maximum weight to give more weight to items with higher value per unit weight
    normalized_prize = prize / np.sum(weight, axis=1)

    # Calculate the sparsity for each item as the ratio of the sum of weights to the maximum weight
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Create a heuristic that balances the normalized prize and sparsity
    heuristic = normalized_prize * (1 - sparsity)

    # Normalize the heuristic to ensure the sum is one, which is useful for selecting items proportionally
    heuristic = heuristic / np.sum(heuristic)

    # Set zero weights to a small value to maintain diversity and prevent dominated items from being excluded
    zero_weight_index = np.where(np.max(weight, axis=1) < 1e-8)
    heuristic[zero_weight_index] = 1e-8

    return heuristic
```
