```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized density
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Prune dominated items by setting their density to zero
    dominated_mask = density < np.percentile(density, 95)
    density[dominated_mask] = 0

    # Normalize the density by the sum of non-dominated density
    density /= np.sum(density)

    # Introduce a diversity factor based on the average density and sparsity
    diversity_factor = (density + sparsity) / (np.max(density + sparsity) + 1e-8)

    # Balance between density and sparsity
    balance_factor = 0.7 * density + 0.3 * sparsity

    # Incorporate the value-to-weight ratio for quality
    heuristic = balance_factor + 0.5 * value_to_weight_ratio

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the heuristics using a weighted sum
    combined_heuristic = (0.4 * heuristic +
                          0.3 * diversity_factor +
                          0.2 * random_factor)

    # Normalize the heuristic values
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.sum(normalized_heuristic) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
