```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a diversity factor based on the standard deviation of density
    std_density = np.std(density)
    diversity_factor = density / (std_density + 1e-8)
    
    # Create a heuristic that balances density and sparsity
    balanced_heuristic = density * (1 - sparsity)
    
    # Create a heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * balanced_heuristic + 0.5 * density
    
    # Prune dominated items by setting heuristic value to zero if an item is dominated
    dominated_items = np.any(weight[:, :-1] > weight[:, 1:], axis=1)
    combined_heuristic[dominated_items] = 0
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
