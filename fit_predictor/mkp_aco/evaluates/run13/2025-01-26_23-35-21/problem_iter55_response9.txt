```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items (items with higher density but same or higher weight)
    dominated_indices = np.where(np.greater_equal(density, np.max(density)) & (np.sum(weight, axis=1) > 1e-8))[0]
    density[dominated_indices] = 0
    
    # Normalize by the maximum density to ensure non-negative values
    normalized_density = density / (np.max(density) + 1e-8)
    
    # Introduce randomness for exploration
    random_component = np.random.rand(len(density)) * 0.1
    
    # Create a final heuristic
    heuristic = normalized_density + random_component
    
    # Set zero weights to a small value to maintain diversity
    heuristic[weight_sum < 1e-8] = 1e-8
    
    return heuristic
```
