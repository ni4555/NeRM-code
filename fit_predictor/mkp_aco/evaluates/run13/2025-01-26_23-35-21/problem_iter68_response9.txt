```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize array
    normalized_prize = prize / np.sum(prize) + 1e-8

    # Normalize the weight array along the second dimension to sum to 1
    normalized_weight = weight / np.sum(weight, axis=1, keepdims=True) + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = (prize ** 2) / (np.sum(weight ** 2, axis=1) + 1e-8)

    # Calculate the diversity based on the value-to-weight ratio
    diversity = np.sum(value_to_weight_ratio) / np.sum(value_to_weight_ratio / value_to_weight_ratio)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics into a heuristic value
    heuristic = (0.5 * normalized_prize +
                 0.3 * (1 - diversity) +
                 0.2 * value_to_weight_ratio +
                 0.0 * random_factor)  # Removed random_factor as it's not contributing additional information

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    return normalized_heuristic
```
