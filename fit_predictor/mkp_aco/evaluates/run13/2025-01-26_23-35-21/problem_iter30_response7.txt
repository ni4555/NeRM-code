```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density for each item
    density = prize / np.sum(weight, axis=1)[:, np.newaxis]

    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1)[:, np.newaxis] / np.max(weight, axis=1)[:, np.newaxis]

    # Calculate the sum of weights for each item
    weight_sum = np.sum(weight, axis=1)

    # Introduce diversity by considering the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)

    # Introduce a balance metric by considering the sparsity
    balance_metric = sparsity * (1 - sparsity)

    # Introduce a penalty for items that are too heavy or too light
    heavy_penalty = np.maximum(0, weight_sum - 1)
    light_penalty = np.maximum(0, 1 - weight_sum)
    
    # Introduce a bonus for items that are dense and balanced
    dense_bonus = np.maximum(0, density - average_density)
    
    # Combine all metrics to form a heuristic value
    heuristic_value = diversity_factor * balance_metric + dense_bonus - heavy_penalty - light_penalty

    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic
    
    # Set zero weights to a small value to maintain diversity
    heuristic_value[weight_sum < 1e-8] = 1e-8
    
    return heuristic_value
```
