```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density ratio of prize to weight for each item
    density_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity score as the average weight per item
    sparsity_score = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate the diversity score based on the standard deviation of weights
    diversity_score = np.std(weight, axis=1)
    
    # Balance the density and sparsity scores with a predefined balance parameter
    balance_density = 0.6
    balance_sparsity = 0.4
    
    # Create a heuristic score that balances the density and sparsity
    heuristic_density = density_ratio * balance_density
    heuristic_sparsity = sparsity_score * balance_sparsity
    
    # Combine the heuristic scores with the diversity score
    heuristic = heuristic_density - heuristic_sparsity + 1 / diversity_score
    
    # Normalize the heuristic scores to ensure they are within a useful range
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    
    # Introduce a normalization factor to maintain a balance between different metrics
    normalization_factor = np.exp(-heuristic)
    
    # Mutate the heuristic scores to encourage diversity
    mutation = np.random.rand(len(heuristic))
    mutated_heuristic = heuristic * mutation * normalization_factor
    
    # Normalize the mutated heuristic scores to sum to 1
    mutated_heuristic /= np.sum(mutated_heuristic)
    
    return mutated_heuristic
```
