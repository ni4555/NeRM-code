```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce randomness to encourage exploration
    randomness = np.random.rand(len(prize))
    
    # Combine heuristic value with randomness for better exploration
    combined_heuristic = heuristic_value + randomness
    
    # Normalize by the maximum combined heuristic value
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Blend the two heuristics using a weighted sum
    final_heuristic = 0.5 * normalized_combined_heuristic + 0.5 * balance_heuristic
    
    # Sparsify the heuristic by setting zero weights to a very low value
    final_heuristic[weight_sum < 1e-8] = 1e-8
    
    return final_heuristic
```
