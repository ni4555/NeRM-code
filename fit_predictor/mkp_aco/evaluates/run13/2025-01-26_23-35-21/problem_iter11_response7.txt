```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the average sparsity
    sparsity = np.mean(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Incorporate additional metrics: prize to weight ratio and sparsity
    heuristic_value = density * (1 - sparsity) + (prize / np.sum(weight, axis=1))
    
    # Introduce a diversity measure by penalizing high sparsity
    diversity = 1 / (1 + sparsity)
    
    # Create a balanced heuristic value by blending metrics and diversity
    heuristic_value *= diversity
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
