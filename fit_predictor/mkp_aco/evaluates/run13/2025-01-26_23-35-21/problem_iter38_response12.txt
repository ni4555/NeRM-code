```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Initialize the heuristics array
    heuristics = np.zeros_like(prize)
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate a balance factor that emphasizes high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce diversity by using the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Combine the metrics into a single heuristic value
    heuristics = balance_factor + diversity_factor
    
    # Apply a penalty for items that do not fit within the 1-dimensional weight constraint
    weight_penalty = np.sum(weight, axis=1) / (np.maximum(np.sum(weight, axis=1), 1e-8))
    heuristics *= (1 - weight_penalty)
    
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    # Ensure non-negative heuristics
    heuristics = np.maximum(heuristics, 0)
    
    return heuristics
```
