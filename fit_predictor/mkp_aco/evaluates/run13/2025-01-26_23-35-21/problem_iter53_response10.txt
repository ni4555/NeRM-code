```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items by removing those with a higher sparsity than the average
    average_sparsity = np.mean(sparsity)
    dominated_items = sparsity > average_sparsity
    sparsity[dominated_items] = 0
    
    # Normalize the density and sparsity
    normalized_density = density / np.max(density)
    normalized_sparsity = sparsity / np.max(sparsity)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = normalized_density * (1 - normalized_sparsity) - weight_sum
    
    # Introduce randomness for exploration
    random_factor = np.random.rand(len(prize))
    
    # Create a final heuristic by combining the heuristic value with randomness
    heuristic = heuristic_value * random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (normalized_density - normalized_sparsity) / (normalized_density + normalized_sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * normalized_heuristic + 0.5 * balance_heuristic
    
    # Prune dominated items by setting their heuristics to zero
    combined_heuristic[dominated_items] = 0
    
    return combined_heuristic
```
