```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity for each item
    sparsity = 1 - np.mean(weight, axis=1)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Combine density, sparsity, and weight_sum to create a heuristic value
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce randomness for diversity
    random_factor = np.random.rand(*weight.shape)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the heuristic value with the diversity and randomness
    heuristic = heuristic_value * diversity_factor + random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic = normalized_heuristic * (weight_sum > 1e-8)
    
    return combined_heuristic
```
