```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity based on a threshold for each item
    sparsity_threshold = 0.1  # Assuming a threshold of 10% for sparsity
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    
    # Calculate the diversity of each item (1 / sum of each dimension's weight)
    diversity = 1 / np.sum(weight, axis=1)
    
    # Calculate the balance of each item based on the standard deviation of its weights across dimensions
    balance = np.std(weight, axis=1)
    
    # Combine density, sparsity, diversity, and balance into heuristics, with balanced weights
    heuristics = (density * 0.4 + sparsity * 0.2 + diversity * 0.2 + balance * 0.2)
    
    # Normalize the heuristics to a range [0, 1]
    heuristics /= np.sum(heuristics)
    
    # Apply a minimum threshold to ensure non-negative heuristics
    heuristics = np.maximum(heuristics, 0.01)
    
    return heuristics
```
