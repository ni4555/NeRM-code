```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate normalized prize value per unit weight
    prize_per_weight = prize / np.sum(weight, axis=1)
    
    # Calculate diversity based on prize per weight
    diversity = np.log(1 + np.sum(prize_per_weight / np.max(prize_per_weight)))
    
    # Calculate sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate balance by considering the difference from the mean prize per weight
    balance = np.tanh(prize_per_weight - np.mean(prize_per_weight))
    
    # Calculate adaptability factor based on the ratio of the sum of weights of the item to the total weight capacity
    adaptability_factor = np.sum(weight, axis=1) / (m * n)
    
    # Calculate the entropy of the prize distribution to encourage diversity
    entropy = -np.sum((prize_per_weight / np.sum(prize_per_weight)) * np.log2(prize_per_weight / np.sum(prize_per_weight)))
    
    # Calculate a penalty for items that are less likely to be packed due to their high sparsity
    sparsity_penalty = 1 - sparsity
    
    # Combine the factors into a weighted heuristic, giving more importance to diversity
    heuristic_base = 0.6 * diversity + 0.2 * balance + 0.1 * adaptability_factor + 0.1 * entropy + 0.1 * sparsity_penalty
    
    # Introduce randomness for exploration
    random_factor = np.random.rand(n)
    
    # Balance exploration and exploitation using a hyperparameter alpha
    alpha = 0.5
    
    # Calculate the final heuristic
    heuristic = alpha * heuristic_base + (1 - alpha) * random_factor
    
    # Normalize the heuristic to ensure all values are between 0 and 1
    heuristic /= np.max(heuristic)
    
    return heuristic
```
