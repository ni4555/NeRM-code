```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize based on the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate the density of each item
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Introduce randomness to encourage exploration
    random_factor = np.random.rand(n) / np.sum(np.random.rand(n))

    # Balance the density and sparsity metrics
    balance_metric = (density + sparsity) / 2

    # Calculate the dominated metric by comparing density and balance
    dominated_metric = (density - balance_metric) / (np.abs(density - balance_metric) + 1e-8)

    # Prune dominated items by filtering out those with a dominated metric below the 95th percentile
    dominated_prune_threshold = np.percentile(dominated_metric, 95)
    pruned_dominated_metric = np.where(dominated_metric >= dominated_prune_threshold, dominated_metric, 0)

    # Combine the pruned dominated metric with density and randomness
    heuristic = (0.6 * pruned_dominated_metric +
                 0.3 * density +
                 0.1 * random_factor)

    # Normalize the heuristics to maintain a balance between items
    normalized_heuristic = heuristic / np.sum(heuristic)

    # Ensure diversity by setting low density and high density items to zero, while preventing excessive pruning
    min_density_threshold = np.percentile(density, 5)
    high_density_threshold = np.percentile(density, 95)
    low_density_items = np.where(density < min_density_threshold)
    high_density_items = np.where(density > high_density_threshold)
    normalized_heuristic[low_density_items] = 0
    normalized_heuristic[high_density_items] = 0

    return normalized_heuristic
```
