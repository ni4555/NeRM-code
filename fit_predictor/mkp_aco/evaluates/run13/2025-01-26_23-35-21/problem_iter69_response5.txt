```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items by selecting the top 50% by density
    sorted_indices = np.argsort(density)[::-1]
    threshold_index = int(len(sorted_indices) * 0.5)
    top_items = sorted_indices[:threshold_index]
    dominated_indices = np.setdiff1d(np.arange(len(sorted_indices)), top_items)
    density[dominated_indices] = 0
    
    # Introduce randomness by adding Gaussian noise
    np.random.seed(42)
    random_factor = np.random.normal(0, 0.1, size=density.shape)
    
    # Prune further by setting lower 50% of the remaining density to zero
    density[density < np.percentile(density[~dominated_indices], 50)] = 0
    
    # Introduce a diversity factor by ensuring a minimum density
    min_density = np.min(density[~dominated_indices])
    density[density < min_density] = min_density
    
    # Balance the heuristic by combining density with random factor
    heuristic = density + random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_indices = weight.sum(axis=1) < 1e-8
    normalized_heuristic[zero_weight_indices] = 1e-8
    
    return normalized_heuristic
```
