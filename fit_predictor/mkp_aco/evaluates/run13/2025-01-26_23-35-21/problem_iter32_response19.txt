```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Sparsity measure
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Weight sum
    weight_sum = np.sum(weight, axis=1)

    # High density is good, low sparsity is good, but high density and low sparsity should be balanced
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)

    # Randomness factor
    randomness_factor = np.random.rand(n)

    # Heuristic value combining balance, density, and randomness
    heuristic_value = 0.5 * balance_factor + 0.3 * density - 0.2 * weight_sum + randomness_factor

    # Normalize by the maximum value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)

    # Penalize items that are too heavy
    combined_heuristic = normalized_heuristic - 10 * (weight_sum > 1)

    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8

    # Ensure the combined heuristic values are non-negative
    combined_heuristic = np.maximum(combined_heuristic, 0)

    return combined_heuristic
```
