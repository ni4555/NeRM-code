```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Prune dominated items based on both density and sparsity
    dominated_items = (density < np.mean(density)) | (sparsity < 1)
    non_dominated_mask = ~dominated_items
    
    # Select items based on multi-dimensional criteria: weighted by sparsity
    prize_to_weight = prize / np.sum(weight, axis=1)
    heuristic = (prize_to_weight * sparsity) * non_dominated_mask
    
    # Introduce randomness to explore beyond dominated items
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    # Balance exploration and exploitation using a factor
    exploration_exploitation_balance = 0.5
    heuristic = (exploration_exploitation_balance * heuristic) + ((1 - exploration_exploitation_balance) * random_factor)
    
    # Normalize the heuristic
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    return normalized_heuristic
```
