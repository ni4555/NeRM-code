```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the ratio of prize to weight sum
    prize_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Prune dominated solutions by setting their heuristic to zero
    for i in range(len(prize_to_weight_ratio)):
        for j in range(i + 1, len(prize_to_weight_ratio)):
            if prize_to_weight_ratio[i] < prize_to_weight_ratio[j]:
                density[i] = 0
    
    # Combine the metrics using a weighted sum
    combined_heuristic = 0.5 * density + 0.3 * sparsity + 0.2 * prize_to_weight_ratio
    
    # Introduce randomness by adding a small random value to the heuristic
    random_factor = np.random.rand(len(combined_heuristic))
    combined_heuristic += random_factor
    
    # Normalize the heuristic to ensure all values are between 0 and 1
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    return combined_heuristic
```
