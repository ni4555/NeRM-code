```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the utility of each item as a combination of density and sparsity
    density = prize / np.sum(weight, axis=1)
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    utility = density * (1 - sparsity) + np.log(sparsity + 1e-8)  # Adding logarithmic transformation for diversity

    # Normalize by the maximum utility and manage sparsity
    max_utility = np.max(utility)
    sparsified_utility = np.where(utility > max_utility / 2, utility, 0)
    
    # Blend the utility with a fraction of the prize to balance utility and maximize total prize
    blended_heuristic = sparsified_utility * 0.5 + prize / (np.max(prize) + 1e-8) * 0.5
    
    return blended_heuristic
```
