```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize / sum of weights)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity score based on the inverse of the sum of weights
    diversity = 1 / np.sum(weight, axis=1)
    
    # Calculate the sparsity score based on the minimum weight in each dimension
    sparsity = np.min(weight, axis=1)
    
    # Combine the scores using a weighted sum where diversity has the highest weight
    # and density has a moderate weight
    heuristics = (density * 0.4) + (diversity * 0.5) + (sparsity * 0.1)
    
    # Normalize the heuristics to a range [0, 1]
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    
    # Set a threshold to sparsify the heuristics
    threshold = 0.5
    
    # Create heuristics array based on the threshold
    heuristics = np.where(heuristics >= threshold, heuristics, 0)
    
    return heuristics
```
