```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an array for the heuristic values
    heuristic = np.zeros_like(prize)

    # Iterate through each item
    for i in range(prize.shape[0]):
        # Calculate the density for the current item
        item_density = prize[i] / np.sum(weight[i])

        # Calculate the sparsity for the current item
        item_sparsity = np.sum(weight[i]) / np.max(weight[i])

        # Calculate a balance score based on density and sparsity
        balance_score = (item_density - item_sparsity) / (item_density + item_sparsity)

        # Check if the current item is dominated by another
        dominated = False
        for j in range(prize.shape[0]):
            if i != j and (prize[j] > prize[i] and np.all(weight[j] <= weight[i])):
                dominated = True
                break

        # If the item is not dominated and has a positive balance score, increase its heuristic
        if not dominated and balance_score > 0:
            heuristic[i] = balance_score

    # Introduce controlled randomness
    random_factor = np.random.rand(*heuristic.shape)
    heuristic *= random_factor

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic

    # Return the heuristic values
    return heuristic
```
