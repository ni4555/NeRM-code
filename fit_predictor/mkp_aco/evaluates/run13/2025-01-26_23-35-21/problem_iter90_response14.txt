```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize and weight to ensure non-zero denominators
    normalized_prize = prize / np.max(weight, axis=1) + 1e-8
    normalized_weight = weight / np.max(weight, axis=1) + 1e-8

    # Calculate normalized density
    density = normalized_prize / np.sum(normalized_weight, axis=1)

    # Calculate normalized sparsity
    sparsity = np.sum(normalized_weight, axis=1)

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Identify dominated items and prune them
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Normalize the density
    density /= np.sum(density)

    # Combine density and sparsity with a balancing factor
    balance_factor = 0.5 * (density + sparsity) / (np.max(density + sparsity) + 1e-8)

    # Add a diversity factor based on the value-to-weight ratio
    diversity_factor = value_to_weight_ratio / (np.max(value_to_weight_ratio) + 1e-8)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Calculate the heuristic as a weighted sum of factors
    heuristic = (0.6 * balance_factor +
                 0.2 * diversity_factor +
                 0.2 * random_factor)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.sum(normalized_heuristic) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
