```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Identify dominated items (those with lower prize but equal or greater total weight)
    non_dominated = density > np.mean(density)
    
    # Prune dominated items by setting their density to zero
    density[~non_dominated] = 0
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate a dominance-based heuristic
    dominance_heuristic = np.where(non_dominated, density, 0)
    
    # Normalize the dominance heuristic by the maximum density
    normalized_dominance = dominance_heuristic / (np.max(density) + 1e-8)
    
    # Introduce a diversity factor
    diversity_factor = density / np.mean(density + 1e-8)
    
    # Combine diversity factor with the normalized dominance heuristic
    combined_heuristic = normalized_dominance * diversity_factor
    
    # Normalize the combined heuristic
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Introduce randomness for exploration
    randomness_factor = np.random.rand(weight.shape[0])
    randomized_heuristic = normalized_combined_heuristic * randomness_factor
    
    # Blend randomness with exploration by setting the random heuristic to zero for dominated items
    randomized_heuristic[~non_dominated] = 0
    
    # Normalize by the maximum heuristic value
    normalized_randomized_heuristic = randomized_heuristic / (np.max(randomized_heuristic) + 1e-8)
    
    # Introduce a balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Final heuristic using a weighted sum of the different components
    final_heuristic = 0.5 * normalized_randomized_heuristic + 0.5 * balance_heuristic
    
    return final_heuristic
```
