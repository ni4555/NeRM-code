```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the diversity factor based on the standard deviation of density
    diversity_factor = 1 / (np.std(density) + 1e-8)
    
    # Calculate the balance factor between density and sparsity
    balance_factor = (density - np.mean(density)) / (np.std(density) + 1e-8)
    
    # Prune dominated items by setting their heuristic to a very low value
    dominated_indices = np.where(np.all(weight <= np.max(weight, axis=1), axis=1))[0]
    density[dominated_indices] = 0
    
    # Combine the metrics using a weighted sum
    heuristic_value = density * diversity_factor + balance_factor
    
    # Introduce randomness to ensure diversity
    random_factor = np.random.rand(len(heuristic_value))
    
    # Combine randomness with heuristic value
    heuristic = heuristic_value * random_factor
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
