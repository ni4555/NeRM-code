```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prizes to avoid dominance by large prizes
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Normalize weights to handle the multi-dimensional nature of weights
    max_weight_sum = np.max(np.sum(weight, axis=1))
    normalized_weight_sum = np.sum(weight, axis=1) / max_weight_sum

    # Calculate the density of each item, which combines value and weight
    density = normalized_prize / normalized_weight_sum

    # Introduce diversity by considering the variance of weights
    diversity = np.mean(weight, axis=1)**2 / np.sum(weight, axis=1)

    # Balance utility and diversity scores to create a more comprehensive heuristic
    utility_score = 0.7 * density + 0.3 * normalized_prize
    diversity_score = 0.5 * diversity + 0.5 * normalized_prize / (np.sum(weight, axis=1) + 1e-8)

    # Combine utility and diversity scores into a single heuristic
    combined_heuristic = utility_score + diversity_score

    # Normalize the combined heuristic values to maintain a consistent scale
    max_combined_heuristic = np.max(combined_heuristic)
    normalized_combined_heuristic = combined_heuristic / (max_combined_heuristic + 1e-8)

    # Incorporate a sparsity penalty to avoid selecting items with uniform weights
    sparsity_penalty = np.sum(weight, axis=1) / (n * m)
    sparsity_penalty = np.clip(sparsity_penalty, 0, 1)
    normalized_combined_heuristic *= (1 - sparsity_penalty)

    # Ensure the normalized heuristic values are non-negative
    normalized_combined_heuristic = np.maximum(normalized_combined_heuristic, 0)

    return normalized_combined_heuristic
```
