```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce randomness for diversity and to escape local optima
    random_factor = np.random.rand(len(prize))
    
    # Combine density, sparsity, and randomness into a single heuristic value
    heuristic_value = (density * (1 - sparsity) + random_factor)
    
    # Normalize by the maximum heuristic value to prevent dominance
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Return the normalized heuristic
    return normalized_heuristic
```
