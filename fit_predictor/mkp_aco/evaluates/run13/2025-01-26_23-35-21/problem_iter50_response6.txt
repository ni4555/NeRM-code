```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate the density of each item as the ratio of prize to total weight
    density = prize / np.sum(weight, axis=1)

    # Calculate the diversity factor as the standard deviation of the prize distribution
    diversity_factor = np.std(prize)

    # Calculate the minimum density for balance, ensuring that we do not ignore low density items
    min_density = np.min(density)

    # Introduce a balance factor that penalizes high density and rewards diversity
    balance_factor = (density - min_density) / (np.max(density) - min_density) * diversity_factor

    # Normalize the balance factor to be comparable with density and diversity
    balance_factor = balance_factor / np.max([np.max(density), diversity_factor])

    # Combine the metrics using a weighted sum that emphasizes density, diversity, and balance
    combined_heuristic = 0.6 * density + 0.3 * diversity_factor + 0.1 * balance_factor

    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)

    # Adjust the combined heuristic by randomness
    combined_heuristic *= (1 + 0.1 * random_factor)

    # Normalize the combined heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(combined_heuristic)
    combined_heuristic /= max_heuristic

    # Ensure that the heuristic values do not exceed 1
    combined_heuristic = np.clip(combined_heuristic, 0, 1)

    return combined_heuristic
```
