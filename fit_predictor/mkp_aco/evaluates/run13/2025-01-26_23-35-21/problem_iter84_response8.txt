```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Initialize a random seed for reproducibility
    np.random.seed(42)

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Create an heuristic by combining density and sparsity
    heuristic = density * (1 - sparsity)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8
    heuristic += random_factor

    # Prune dominated items based on a threshold
    dominated_mask = density < np.percentile(density, 90)
    heuristic[dominated_mask] = 0

    # Normalize the heuristic to maintain sparsity
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    if min_heuristic > 1e-8:
        heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        heuristic = np.ones(n)

    # Introduce a balance factor to ensure diversity and to prevent premature convergence
    balance_factor = np.exp(-np.mean(np.abs(np.diff(np.argsort(-heuristic))))) / max_heuristic
    heuristic *= balance_factor

    # Ensure that all heuristics are non-negative
    heuristic = np.clip(heuristic, 0, None)

    return heuristic
```
