```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate the sum of weights as an additional metric
    weight_sum = np.sum(weight, axis=1)

    # Introduce a balance between high density and low sparsity
    balance_heuristic = density / (sparsity + 1e-8)

    # Introduce a diversity factor based on the variance of the density
    diversity_factor = (density - np.mean(density))**2

    # Combine the metrics using a weighted sum
    heuristic_value = balance_heuristic * (1 - sparsity) - weight_sum + diversity_factor

    # Normalize the heuristic values to ensure a range of [0, 1]
    normalized_heuristic = heuristic_value / (np.sum(heuristic_value) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.count_nonzero(normalized_heuristic) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
