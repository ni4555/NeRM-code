```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity for each dimension
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate sum of weights for each dimension
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate average density
    average_density = np.mean(density)
    
    # Calculate diversity factor based on normalized density
    diversity_factor = density / (average_density + 1e-8)
    
    # Combine density and sparsity to create a heuristic value
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Balance the heuristic value with diversity factor
    balanced_heuristic = heuristic_value * diversity_factor
    
    # Introduce a balance heuristic
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine heuristics using a weighted sum
    exploration_balance = np.random.rand() * 0.5 + 0.5  # Exploration from 0.5 to 1.0
    combined_heuristic = exploration_balance * balanced_heuristic + (1 - exploration_balance) * balance_heuristic
    
    # Normalize combined heuristic to the range [0, 1]
    combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Prune low-quality heuristics by setting very low values to zero
    low_quality_threshold = np.percentile(combined_heuristic, 5)
    combined_heuristic[combined_heuristic < low_quality_threshold] = 0
    
    # Ensure the sum of heuristics is one
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
