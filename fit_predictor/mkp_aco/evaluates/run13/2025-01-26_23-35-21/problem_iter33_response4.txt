```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Randomly select a subset of items based on the proportion of their prizes
    item_probabilities = prize / np.sum(prize)
    selected_items = np.random.choice(range(len(prize)), size=int(0.2 * len(prize)), replace=False)
    
    # Initialize a heuristic array
    heuristics = np.zeros_like(prize)
    
    # Assign a high heuristic value to the selected items
    heuristics[selected_items] = 1.0
    
    # Introduce randomness by adding small random values to the heuristics
    random_addition = np.random.normal(0, 0.1, size=heuristics.shape)
    heuristics += random_addition
    
    # Normalize the heuristics to avoid dominance
    heuristics /= np.max(heuristics)
    
    # Introduce a diversity factor by penalizing items with the same weights
    weight_penalty = np.min(weight, axis=1)
    heuristics -= weight_penalty / np.max(weight_penalty)
    
    # Set zero weights to a small value to maintain diversity
    heuristics[weight.sum(axis=1) < 1e-8] = 1e-8
    
    return heuristics
```
