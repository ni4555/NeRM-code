```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density (value-to-weight ratio)
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity (weight-to-max-weight ratio)
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Randomness factor to promote diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine criteria using weights
    # Higher density and lower sparsity are preferred, value-to-weight ratio is important as well
    heuristic = (0.5 * density) + (0.2 * (1 - sparsity)) + (0.2 * value_to_weight_ratio) + (0.1 * random_factor)

    # Normalize the heuristic values to ensure scale consistency
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    # Introduce a sparsity penalty to encourage diversity in the selection
    sparsity_penalty = (1 - np.mean(sparsity)) * 0.1
    normalized_heuristic -= sparsity_penalty

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(density == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
