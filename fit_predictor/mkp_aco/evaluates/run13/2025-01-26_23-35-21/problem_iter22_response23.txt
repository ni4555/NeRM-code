```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prizes to avoid dominance by large prizes
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Normalize weights to handle the multi-dimensional nature of weights
    max_weight_sum = np.max(np.sum(weight, axis=1))
    normalized_weight = weight / max_weight_sum

    # Calculate the density of each item, which combines value and weight
    density = normalized_prize / np.sum(normalized_weight, axis=1)

    # Calculate the diversity factor, encouraging selection of different items
    diversity = 1 / (np.sum(weight, axis=1) + 1e-8)

    # Combine density and diversity to create a heuristic value
    heuristic_value = density * diversity

    # Normalize the heuristic values to maintain a consistent scale
    max_heuristic = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic + 1e-8)

    # Ensure the normalized heuristic values are non-negative
    normalized_heuristic = np.maximum(normalized_heuristic, 0)

    # Return the normalized heuristic values
    return normalized_heuristic
```
