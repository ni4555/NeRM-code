```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1)

    # Calculate value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1)

    # Normalize prizes
    normalized_prize = prize / np.max(prize)

    # Prune dominated items
    dominant_items = np.any(weight > 0, axis=1)
    non_dominated_items = np.where(~np.logical_or(~dominant_items, density < sparsity))[0]

    # Combine metrics using a weighted sum approach
    heuristic = (0.5 * density[non_dominated_items] +
                 0.3 * (1 - sparsity[non_dominated_items]) +
                 0.2 * value_to_weight_ratio[non_dominated_items] +
                 0.1 * normalized_prize[non_dominated_items])

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) / np.max(np.random.rand(n)) + 1e-8

    # Weigh and combine the heuristic with randomness
    final_heuristic = (heuristic * 0.7 +
                       random_factor * 0.3)

    # Ensure diversity by adding a diversity factor
    diversity_factor = 0.1 * np.min(density) / np.max(density) + 1e-8
    final_heuristic = np.minimum(final_heuristic, 1 - diversity_factor)

    # Normalize the final heuristic values to a range [0, 1]
    normalized_final_heuristic = final_heuristic / np.sum(final_heuristic) + 1e-8

    return normalized_final_heuristic
```
