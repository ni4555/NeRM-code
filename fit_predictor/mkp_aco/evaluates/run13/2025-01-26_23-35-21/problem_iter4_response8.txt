```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight for each item
    ratio = prize / np.sum(weight, axis=1)
    # Calculate the average weight for each item
    avg_weight = np.mean(weight, axis=1)
    # Incorporate sparsity information by considering items with average weight less than a threshold
    sparsity_threshold = 0.2
    sparsity = (avg_weight < sparsity_threshold) * 1.0
    # Calculate diversity based on the number of non-zero weights
    diversity = (weight != 0).sum(axis=1) / weight.shape[1]
    # Combine factors to create a weighted heuristic, with a focus on relative metrics and normalization
    heuristics = ratio * 0.7 + sparsity * 0.2 + diversity * 0.1
    # Normalize the heuristics to ensure all values are non-negative and not too large
    heuristics = np.clip(heuristics, 0, 1)
    return heuristics
```
