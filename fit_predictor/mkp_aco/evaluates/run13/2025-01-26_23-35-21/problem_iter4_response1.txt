```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity based on a threshold
    sparsity_threshold = 0.5
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    
    # Calculate the diversity based on the sum of reciprocal of weights
    diversity = np.sum(1 / weight, axis=1)
    
    # Calculate the efficiency of each item based on its weight
    efficiency = np.sum(weight, axis=1) / np.sum(weight)
    
    # Weigh the metrics, emphasizing diversity, efficiency, and sparsity
    # Weighing factors can be adjusted based on the problem characteristics
    weighted_heuristics = ratio * 0.3 + sparsity * 0.4 + diversity * 0.2 + efficiency * 0.1
    
    # Normalize the heuristics to ensure all values are between 0 and 1
    max_heuristic = np.max(weighted_heuristics)
    min_heuristic = np.min(weighted_heuristics)
    if max_heuristic > min_heuristic:
        heuristics = (weighted_heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        heuristics = np.zeros_like(weighted_heuristics)
    
    return heuristics
```
