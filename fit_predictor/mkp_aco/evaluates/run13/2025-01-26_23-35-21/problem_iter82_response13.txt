```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate value-to-weight ratio and sparsity
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8
    sparsity = np.sum(weight, axis=1) / (np.prod(np.sum(weight, axis=1))) + 1e-8

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Create a heuristic that balances density, value-to-weight ratio, and sparsity
    heuristic = 0.6 * density + 0.4 * value_to_weight_ratio + (1 - sparsity) * 0.2

    # Introduce a sparsity penalty for high sparsity
    sparsity_penalty = (1 - np.mean(density)) * 0.2
    heuristic -= sparsity_penalty

    # Refine heuristic by introducing randomness
    heuristic *= random_factor

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(density == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    # Set zero weights to a small value to maintain diversity
    zero_weight_index = weight.sum(axis=1) == 0
    normalized_heuristic[zero_weight_index] = 1e-8

    return normalized_heuristic
```
