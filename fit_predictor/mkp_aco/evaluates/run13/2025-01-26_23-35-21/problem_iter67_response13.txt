```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Define the maximum weight constraint
    MAX_WEIGHT = 1
    
    # Normalize the prize and weight
    normalized_prize = prize / np.sum(prize)
    normalized_weight = weight / MAX_WEIGHT
    
    # Calculate the density as the normalized prize divided by the normalized weight
    density = normalized_prize / (normalized_weight + 1e-8)
    
    # Calculate the sparsity as the sum of weights divided by the maximum weight
    sparsity = np.sum(normalized_weight, axis=1) / MAX_WEIGHT
    
    # Define a dominance condition where an item with a higher prize per weight is more promising
    non_dominated_mask = (density > 0) & (sparsity < 1)
    
    # Filter out dominated items based on the dominance condition
    non_dominated_items = density[non_dominated_mask]
    
    # If there are dominated items, compute the average density of non-dominated items
    if np.any(non_dominated_items):
        average_density = np.mean(non_dominated_items)
    else:
        average_density = 0
    
    # Calculate a diversity factor based on the normalized density
    diversity_factor = density / (average_density + 1e-8)
    
    # Calculate a balance factor by combining density and sparsity
    balance_factor = (density + sparsity) / (2 * (density + sparsity + 1e-8))
    
    # Combine the diversity and balance factors to get a weighted heuristic
    heuristic = diversity_factor * balance_factor
    
    # Normalize the heuristic by the maximum heuristic value
    normalized_heuristic = heuristic / np.max(heuristic + 1e-8)
    
    # Return the heuristic with zero weight items having a very low priority
    return normalized_heuristic * (1 - normalized_weight) + normalized_heuristic * normalized_weight
```
