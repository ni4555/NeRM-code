```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a matrix of heuristics with zeros
    heuristic_matrix = np.zeros_like(prize)
    
    # Iterate over each item
    for i in range(prize.shape[0]):
        # Calculate normalized prize value
        density = prize[i] / (np.sum(weight[i]) + 1e-8)
        
        # Calculate normalized sparsity
        sparsity = np.sum(weight[i]) / (np.max(weight[i]) + 1e-8)
        
        # Calculate the sum of weights and its standard deviation
        weight_sum = np.sum(weight[i])
        weight_std = np.std(weight[i])
        
        # Create a heuristic that balances high density, low sparsity, and low variability
        heuristic_value = density * (1 - sparsity) * (1 / (weight_std + 1e-8))
        
        # Normalize the heuristic value
        normalized_heuristic = heuristic_value / (np.max(prize) + 1e-8)
        
        # Update the heuristics matrix with the computed heuristic
        heuristic_matrix[i] = normalized_heuristic
    
    return heuristic_matrix
```
