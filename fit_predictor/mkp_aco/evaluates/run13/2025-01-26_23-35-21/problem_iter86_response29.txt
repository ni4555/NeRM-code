```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize by the sum of weights
    normalized_prize = prize / np.sum(weight, axis=1)

    # Calculate the normalized value-to-weight ratio
    value_to_weight_ratio = normalized_prize / np.sum(weight**2, axis=1)

    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Calculate the normalized density
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Prune dominated items based on density percentile threshold
    dominated_mask = density < np.percentile(density, 95)
    density[dominated_mask] = 0

    # Balance between density and sparsity
    balance_factor = (density + sparsity) / np.max(density + sparsity)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Define weights for each metric
    balance_weight = 0.4
    randomness_weight = 0.2
    ratio_weight = 0.4

    # Combine the metrics into a heuristic
    heuristic = (balance_weight * balance_factor +
                 randomness_weight * random_factor +
                 ratio_weight * value_to_weight_ratio)

    # Ensure diversity by normalizing heuristic values
    heuristic /= np.sum(heuristic)

    # Adjust heuristic values for non-promising items
    non_promising_threshold = np.percentile(heuristic, 5)
    heuristic[heuristic < non_promising_threshold] = non_promising_threshold

    return heuristic
```
