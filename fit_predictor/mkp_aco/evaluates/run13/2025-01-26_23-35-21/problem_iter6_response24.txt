```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight for each item
    ratio = prize / np.sum(weight, axis=1)
    # Calculate the sparsity based on a threshold
    sparsity_threshold = 0.5
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    # Calculate diversity based on the number of non-zero weights
    diversity = (weight != 0).sum(axis=1) / weight.shape[1]
    # Calculate the average of the weights to penalize items with higher overall weight
    average_weight = np.mean(weight, axis=1)
    # Calculate the entropy of the weights to encourage diversity
    entropy = -np.sum((weight / np.sum(weight, axis=1)) * np.log(weight / np.sum(weight, axis=1)))
    # Combine factors to create a weighted heuristic
    # Weigh ratio by 0.6, sparsity by 0.2, diversity by 0.1, entropy by 0.1, and penalize by 0.03
    heuristics = 0.6 * ratio + 0.2 * sparsity + 0.1 * diversity + 0.1 * entropy - 0.03 * average_weight
    # Replace all negative values with zero
    heuristics[heuristics < 0] = 0
    # Normalize the heuristics to ensure values are comparable and between 0 and 1
    heuristics = heuristics / np.max(heuristics)
    # Ensure no zero values as zero would mean an item is never selected
    heuristics[heuristics == 0] = np.finfo(float).eps
    return heuristics
```
