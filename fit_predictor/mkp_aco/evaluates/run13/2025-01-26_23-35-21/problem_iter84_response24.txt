```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Create a heuristic by combining density and sparsity with an inverse balance factor
    heuristic = (density * (1 - sparsity)) / (np.mean(density * (1 - sparsity)) + 1e-8)
    
    # Introduce randomness to the heuristic to avoid premature convergence
    random_factor = np.random.rand(n)
    
    # Normalize the heuristic to introduce a balance factor and prevent premature convergence
    normalized_heuristic = heuristic * (1 + random_factor) / (np.max(heuristic) + 1e-8)
    
    # Prune dominated items by setting their heuristic to zero
    non_dominated_mask = normalized_heuristic > 0
    for i in range(n):
        dominated = False
        for j in range(n):
            if i != j and normalized_heuristic[i] <= normalized_heuristic[j]:
                dominated = True
                break
        if dominated:
            non_dominated_mask[i] = False
    
    # Introduce a diversity factor by ensuring that the sum of heuristics is equal to a constant
    diversity_factor = (1 / (np.sum(non_dominated_mask) * (1 / non_dominated_mask)))
    normalized_heuristic[non_dominated_mask] *= diversity_factor
    
    # Ensure that all heuristics are non-negative
    normalized_heuristic = np.clip(normalized_heuristic, 0, None)
    
    return normalized_heuristic
```
