```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density with regularization
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity with regularization
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate additional metrics: sum of weights and max weight
    weight_sum = np.sum(weight, axis=1)
    max_weight = np.max(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum - max_weight
    
    # Introduce diversity based on the ratio of average density to item density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Introduce balance between density and sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Normalize by the maximum value of the heuristic components
    normalized_density = heuristic_value * diversity_factor
    normalized_balance = balance_heuristic
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_density + 0.4 * normalized_balance
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)
    
    # Adjust combined heuristic with randomness
    adjusted_heuristic = combined_heuristic * random_factor
    
    # Set zero weights to a small value to maintain diversity
    adjusted_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Normalize the final heuristic to maintain a scale of 0 to 1
    max_heuristic = np.max(adjusted_heuristic)
    normalized_heuristic = adjusted_heuristic / (max_heuristic + 1e-8)
    
    return normalized_heuristic
```
