```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the density to account for the dimensionality
    density = prize / (np.sum(weight, axis=1) + 1e-8) * np.sqrt(m)

    # Normalize the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Normalize the value-to-weight ratio to encourage items with high ratio
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8) * np.sqrt(m)

    # Identify dominated items and prune them using a percentile-based threshold
    dominated_mask = density < np.percentile(density, 10)
    density[dominated_mask] = 0

    # Calculate the diversity by ensuring not all items are the same
    diversity = (density - np.mean(density))**2

    # Introduce randomness to encourage exploration
    randomness = np.random.rand(n) + 1e-8

    # Combine the metrics using a weighted sum, including randomness
    heuristic = (0.4 * density +
                 0.3 * (1 - sparsity) +
                 0.2 * value_to_weight_ratio +
                 0.1 * diversity +
                 0.1 * randomness)

    # Normalize the heuristic values to ensure a range of [0, 1]
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.count_nonzero(density) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
