```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize based on the maximum prize value
    normalized_prize = prize / np.max(prize) + 1e-8

    # Calculate the inverse of the normalized weight for each item
    inverse_weight = 1 / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the normalized value-to-weight ratio
    value_to_weight_ratio = normalized_prize / inverse_weight

    # Identify dominated items by setting their normalized prize to zero
    dominated_mask = normalized_prize < np.percentile(normalized_prize, 10)
    normalized_prize[dominated_mask] = 0

    # Introduce randomness for heuristic diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics to create a heuristic, assigning more weight to value-to-weight ratio
    heuristic = (0.6 * value_to_weight_ratio +
                 0.2 * inverse_weight +
                 0.2 * random_factor)

    # Normalize the heuristic values to be between 0 and 1
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    normalized_heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)

    # Ensure diversity by providing a small positive heuristic for dominated items
    if np.all(normalized_prize == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
