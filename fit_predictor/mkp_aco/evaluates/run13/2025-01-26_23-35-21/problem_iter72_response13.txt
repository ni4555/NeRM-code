```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items by checking if the prize-to-weight ratio is below a threshold
    dominance_threshold = 1.0 / np.max(density)
    dominant_items = density >= dominance_threshold
    density[~dominant_items] = 0.0
    
    # Sparsify the heuristics by setting dominated elements to zero
    sparsity = density < 0.5
    
    # Balance between exploration and exploitation using a weighted heuristic
    heuristic = (1 - sparsity) * density - np.sum(weight, axis=1)
    
    # Introduce diversity by adding random noise based on the average density
    average_density = np.mean(density)
    noise_factor = np.random.normal(0, 0.01 / average_density, size=density.shape)
    diversity_heuristic = density + noise_factor
    
    # Normalize by the maximum heuristic value to avoid overflow
    normalized_heuristic = diversity_heuristic / (np.max(diversity_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[sparsity] = 1e-8
    
    return normalized_heuristic
```
