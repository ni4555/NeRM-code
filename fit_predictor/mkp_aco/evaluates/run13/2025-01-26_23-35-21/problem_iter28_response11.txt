```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Introduce a penalty for items that are too sparse
    sparse_penalty = np.maximum(0, 1 - sparsity)
    
    # Introduce a bonus for items that are more dense and balanced
    dense_bonus = np.maximum(0, density - average_density)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * heuristic + 0.4 * (sparse_penalty + dense_bonus)
    
    # Normalize to ensure the sum is 1 to maintain the total capacity constraint
    combined_heuristic /= np.sum(combined_heuristic)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
