```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density and sparsity
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items by ensuring that no item has a lower density
    # than any other item that is lighter or equally heavy but with a higher prize
    for i in range(n):
        for j in range(n):
            if (density[i] < density[j] or (density[i] == density[j] and weight[i, :] > weight[j, :])) and (weight[i, :] <= 1):
                density[i] = -1  # Mark as dominated

    # Introduce controlled randomness
    random_factor = np.random.rand(n)
    
    # Combine metrics with randomness, and balance the objectives
    heuristic_value = density * (1 - sparsity) + random_factor
    
    # Normalize the heuristics
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Balance the heuristic with a preference for high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * normalized_heuristic + 0.3 * balance_heuristic
    
    # Prune dominated items by setting their heuristics to zero
    combined_heuristic[density < 0] = 0
    
    return combined_heuristic
```
