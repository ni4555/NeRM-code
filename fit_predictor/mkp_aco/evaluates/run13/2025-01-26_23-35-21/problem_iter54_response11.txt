```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate value density ratio
    value_density_ratio = prize / (np.sum(weight**2, axis=1) + 1e-8)

    # Calculate diversity based on the inverse variance of density
    variance_density = np.var(density)
    diversity = 1 / (variance_density + 1e-8)

    # Identify dominated items (items with lower density than the 90th percentile)
    dominated_indices = np.where(density < np.percentile(density, 90))
    non_dominated_indices = np.setdiff1d(np.arange(n), dominated_indices)

    # Calculate fraction of non-dominated items
    non_dominated_fraction = len(non_dominated_indices) / n

    # Avoid giving zero weight items too much influence
    weight_sum = np.sum(weight, axis=1)
    zero_weight_adjustment = 1e-8 / n

    # Combine metrics using a weighted sum
    heuristic = (0.4 * density +
                 0.3 * (1 - sparsity) +
                 0.2 * value_density_ratio +
                 0.1 * diversity)

    # Adjust dominated items by setting their heuristic to zero
    heuristic[dominated_indices] = 0

    # Normalize the heuristic values to ensure they sum to one
    heuristic /= np.sum(heuristic)

    # Ensure that if all items are dominated, we still have a small positive heuristic value
    if non_dominated_fraction == 0:
        heuristic = np.ones(n) * zero_weight_adjustment

    # If there are zero weight items, adjust their heuristic to prevent them from dominating
    if (weight_sum < 1e-8).any():
        heuristic[weight_sum < 1e-8] = zero_weight_adjustment

    return heuristic
```
