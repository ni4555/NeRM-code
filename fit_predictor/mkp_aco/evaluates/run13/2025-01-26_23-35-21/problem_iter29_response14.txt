```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to balance the scale between high and low value items
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Normalize weight to avoid dominance by dimensionality
    weight_normalized = weight / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate a metric that balances the value to weight ratio with the sparsity
    value_to_weight_ratio = prize_normalized / weight_normalized
    
    # Calculate the sparsity metric
    sparsity = np.sum(weight_normalized, axis=1)
    
    # Introduce a randomness factor to promote diversity
    randomness_factor = np.random.rand(*weight.shape)
    
    # Create a heuristic based on the ratio and sparsity
    heuristic = value_to_weight_ratio * (1 - sparsity)
    
    # Adjust the heuristic to account for randomness
    heuristic *= randomness_factor
    
    # Normalize the heuristic to ensure it's on a comparable scale
    heuristic_normalized = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    # Set zero weights to a small value to maintain diversity and avoid dominance
    heuristic[np.sum(weight, axis=1) == 0] = 1e-8
    
    return heuristic
```
