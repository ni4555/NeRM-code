```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized value-to-weight ratio
    value_weight_ratio = prize / np.sum(weight, axis=1) + 1e-8

    # Prune dominated items based on value-to-weight ratio
    dominated_prune_threshold = np.percentile(value_weight_ratio, 90)
    heuristics_pruned = np.where(value_weight_ratio >= dominated_prune_threshold, value_weight_ratio, 0)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the value-to-weight ratio with randomness
    combined_score = heuristics_pruned + random_factor

    # Normalize heuristics
    normalized_heuristic = combined_score / (np.max(combined_score) + 1e-8)

    # Ensure diversity by giving a small positive heuristic value if all items are dominated
    if np.all(heuristics_pruned == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
