```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the profit to weight ratio for each item
    profit_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity based on a threshold
    sparsity_threshold = 0.5
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    
    # Normalize the profit and sparsity to ensure they contribute equally
    normalized_profit = profit_to_weight_ratio / np.sum(profit_to_weight_ratio)
    normalized_sparsity = sparsity / np.sum(sparsity)
    
    # Adjust the ratio of the metrics to balance their influence
    profit_weight = 0.6
    ratio_weight = 0.3
    sparsity_weight = 0.1
    
    # Combine the normalized metrics to form heuristics
    heuristics = (normalized_profit * profit_weight +
                  (profit_to_weight_ratio * ratio_weight) +
                  (normalized_sparsity * sparsity_weight))
    
    # Ensure all values are non-negative
    heuristics = np.clip(heuristics, 0, None)
    
    return heuristics
```
