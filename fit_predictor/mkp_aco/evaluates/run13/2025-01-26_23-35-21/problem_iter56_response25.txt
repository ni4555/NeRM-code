```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Normalize the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a balance factor to balance density and sparsity
    balance_factor = (density - sparsity) / (np.abs(density - sparsity) + 1e-8)
    
    # Calculate a diversity factor to encourage diversity in the solution
    diversity_factor = 1 / (weight_sum + 1e-8)
    
    # Calculate a randomness factor to introduce exploration
    randomness_factor = np.random.rand(n)
    
    # Combine metrics into a heuristic value
    heuristic_value = balance_factor * diversity_factor * randomness_factor
    
    # Normalize by the maximum heuristic value
    heuristic_value = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Scale heuristics to sum to 1
    heuristic_value /= np.sum(heuristic_value)
    
    return heuristic_value
```
