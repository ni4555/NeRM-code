```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items based on density and sparsity
    dominated_indices = np.where(density < sparsity)[0]
    density[dominated_indices] = 0
    
    # Introduce randomness to explore solutions
    random_factor = np.random.rand(len(density))
    
    # Combine density, sparsity, and randomness
    heuristic = (density + sparsity + random_factor) / 3
    
    # Normalize the heuristic to ensure consistency
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a diversity factor based on the average sparsity
    average_sparsity = np.mean(sparsity)
    diversity_factor = sparsity / (average_sparsity + 1e-8)
    
    # Update the heuristic with the diversity factor
    heuristic *= diversity_factor
    
    # Ensure the heuristic is non-negative
    heuristic = np.maximum(heuristic, 0)
    
    return heuristic
```
