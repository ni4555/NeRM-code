```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Introduce randomness for diversity
    random_factor = np.random.rand(n)

    # Combine metrics with equal weights
    combined_heuristic = 0.5 * density + 0.25 * sparsity + 0.25 * random_factor

    # Normalize the combined heuristic to ensure all items are considered equally
    max_heuristic = np.max(combined_heuristic)
    normalized_heuristic = combined_heuristic / (max_heuristic + 1e-8)

    # Adjust the heuristics of items with zero weight to avoid dominance
    zero_weight_adjustment = np.where(np.sum(weight, axis=1) < 1e-8, 1e-8, 1)
    normalized_heuristic *= zero_weight_adjustment

    # Incorporate a balance heuristic based on the ratio of high density to low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    normalized_heuristic += 0.1 * balance_heuristic

    return normalized_heuristic
```
