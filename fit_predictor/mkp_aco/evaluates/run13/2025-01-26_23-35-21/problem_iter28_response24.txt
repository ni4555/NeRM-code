```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Diversity factor based on average density
    average_density = np.mean(density)
    diversity_factor = (density / (average_density + 1e-8)) ** 0.5
    
    # Integrate a randomness factor to allow for exploration
    randomness_factor = np.random.rand(len(prize))
    
    # Blend metrics for heuristic value
    heuristic_value = density * (1 - sparsity) * diversity_factor * randomness_factor
    
    # Normalize by maximum heuristic value
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic
    
    # Balance heuristic between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine heuristics using a weighted sum with dynamic weights
    dynamic_weight = (1 + randomness_factor) * 0.5  # Randomly vary weights for balance
    combined_heuristic = dynamic_weight * heuristic_value + (1 - dynamic_weight) * balance_heuristic
    
    # Handle edge cases where the weight sum is zero
    combined_heuristic[np.sum(weight, axis=1) < 1e-8] = 1e-8
    
    return combined_heuristic
```
