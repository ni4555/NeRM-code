```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate sparsity factor: items with lower weight have higher sparsity
    sparsity = 1 - (np.sum(weight, axis=1) / weight.sum())
    # Calculate diversity factor: use standard deviation of weights as a proxy
    diversity = np.std(weight, axis=1)
    # Normalize the factors to make them comparable
    utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    sparsity = (sparsity - np.min(sparsity)) / (np.max(sparsity) - np.min(sparsity))
    diversity = (diversity - np.min(diversity)) / (np.max(diversity) - np.min(diversity))
    # Combine factors with equal weight to create heuristics
    heuristics = utility + sparsity + diversity
    # Cap the values between 0 and 1 to ensure non-negative weights
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
