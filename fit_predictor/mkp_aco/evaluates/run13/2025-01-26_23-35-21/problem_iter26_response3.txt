```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of the item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate the normalized diversity by using the standard deviation of the density
    diversity = np.std(density)
    
    # Create a heuristic based on density, sparsity, and diversity
    heuristic = (density * (1 - sparsity)) - diversity
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a penalty for items that are too sparse
    sparse_penalty = np.maximum(0, 1 - sparsity)
    
    # Introduce a bonus for items that are more dense
    dense_bonus = np.maximum(0, density - np.mean(density))
    
    # Combine the heuristic with the penalties and bonuses
    combined_heuristic = normalized_heuristic - sparse_penalty + dense_bonus
    
    # Ensure the heuristic is non-negative
    combined_heuristic = np.maximum(combined_heuristic, 0)
    
    return combined_heuristic
```
