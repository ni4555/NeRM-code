```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density and sparsity
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items by comparing with the best item in each dimension
    best_in_dimension = np.argmax(density, axis=0)
    dominated_indices = np.where(density < density[best_in_dimension], True, False)
    density[dominated_indices] = 0
    
    # Normalize heuristics
    normalized_heuristic = density / np.sum(density)
    
    # Introduce randomness to explore different solutions
    random_factor = np.random.rand(len(density))
    randomized_heuristic = normalized_heuristic * random_factor
    
    # Introduce a balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine heuristics using a weighted sum
    combined_heuristic = 0.5 * randomized_heuristic + 0.5 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
