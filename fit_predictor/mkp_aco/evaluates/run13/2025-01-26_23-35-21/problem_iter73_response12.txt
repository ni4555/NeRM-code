```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics array with the same shape as items
    n = prize.shape[0]
    heuristics = np.zeros(n)
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1)
    
    # Prune dominated items by keeping only items with non-zero sparsity
    dominated_items = sparsity == 0
    heuristics[dominated_items] = 0
    
    # Randomness factor to introduce diversity
    random_factor = np.random.rand(n)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Balance between density and sparsity
    balance = density / (sparsity + 1e-8)
    
    # Combine factors to create heuristics
    heuristics = balance * density * (1 - random_factor) - weight_sum
    
    # Normalize heuristics to maintain a bounded scale
    heuristics /= np.sum(heuristics)
    
    # Prune dominated items by setting their heuristics to zero
    dominated_items = sparsity == 0
    heuristics[dominated_items] = 0
    
    return heuristics
```
