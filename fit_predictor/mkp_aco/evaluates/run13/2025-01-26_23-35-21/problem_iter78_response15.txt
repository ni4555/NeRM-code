```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to the maximum prize to give more weight to higher-valued items
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sum(weight, axis=1)

    # Calculate the density of each item by dividing the prize by the sum of weights
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the sparsity of each item by dividing the sum of weights by the maximum weight
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Combine density and sparsity to get a heuristic value, giving more weight to high density
    heuristic_value = 0.7 * density + 0.3 * sparsity

    # Prune dominated items by setting their heuristics to zero
    dominated_items = np.any(weight < 1e-8, axis=1)
    heuristics = np.zeros(n)

    # For non-dominated items, use the combined heuristic value
    non_dominated_items = ~dominated_items
    heuristics[non_dominated_items] = heuristic_value[non_dominated_items]

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)
    heuristics = heuristics * 0.8 + random_factor * 0.2

    # Normalize heuristics to maintain a bounded scale
    heuristics /= np.sum(heuristics)

    return heuristics
```
