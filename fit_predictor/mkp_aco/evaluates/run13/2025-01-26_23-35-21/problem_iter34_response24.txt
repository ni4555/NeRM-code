```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce diversity factors
    diversity_density = density / (np.mean(density) + 1e-8)
    diversity_sparsity = sparsity / (np.mean(sparsity) + 1e-8)
    
    # Create a heuristic value by blending the metrics
    heuristic_value = density * (1 - sparsity)
    
    # Normalize the heuristic value
    normalized_heuristic_value = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Combine the diversity factors with the normalized heuristic value
    heuristic = normalized_heuristic_value * (diversity_density + diversity_sparsity)
    
    # Introduce a penalty for zero weight to maintain diversity
    zero_weight_penalty = np.where(np.sum(weight, axis=1) < 1e-8, 1e-8, 0)
    heuristic += zero_weight_penalty
    
    # Normalize to ensure the sum is 1 to maintain the total capacity constraint
    normalized_heuristic = heuristic / (np.sum(heuristic) + 1e-8)
    
    return normalized_heuristic
```
