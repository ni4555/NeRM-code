```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to maintain consistency across items
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the utility of each item
    utility = normalized_prize / np.sum(weight, axis=1)
    
    # Introduce randomness to promote diversity
    np.random.seed(42)  # Set a seed for reproducibility
    randomness = np.random.rand(len(prize))
    
    # Calculate a density metric, adjusted for dominance
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Create a heuristic based on utility, adjusted density, and randomness
    heuristic = utility * density * randomness
    
    # Normalize the heuristic to ensure it's on a scale from 0 to 1
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Adjust the heuristic for sparsity to avoid dominance
    sparsity_adjustment = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    adjusted_heuristic = normalized_heuristic * (1 - sparsity_adjustment)
    
    return adjusted_heuristic
```
