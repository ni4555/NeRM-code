```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize per unit weight for each item
    density = prize / np.sum(weight, axis=1)

    # Introduce a penalty for dominance, i.e., for items with low sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    dominance_penalty = (1 - sparsity) / (1 - np.min(sparsity))

    # Calculate the diversity factor based on the ratio of prizes to total prize sum
    diversity_factor = prize / np.sum(prize)

    # Incorporate a local exploration factor that rewards items with high sparsity
    local_exploration = np.min(sparsity) / np.sum(sparsity)

    # Balance exploration vs. exploitation by considering the density and diversity
    heuristic_value = density * dominance_penalty * diversity_factor * local_exploration

    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic

    # Ensure the heuristic is sparse by adding a small constant for items that are not dominated
    heuristic = np.where(heuristic_value < 1e-8, 0, heuristic_value)

    return heuristic
```
