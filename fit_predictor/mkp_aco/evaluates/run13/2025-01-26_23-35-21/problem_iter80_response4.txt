```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a heuristic array with zeros
    heuristic = np.zeros_like(prize)
    
    # Randomly select a subset of items to initialize the heuristic
    num_items_to_select = int(0.1 * len(prize))
    selected_indices = np.random.choice(len(prize), num_items_to_select, replace=False)
    heuristic[selected_indices] = 1
    
    # Iterate over all items to compute the heuristic
    for i in range(len(prize)):
        if heuristic[i] == 0:
            # Calculate the ratio of prize to weight
            ratio = prize[i] / np.sum(weight[i])
            
            # Check if the current item is dominated by any selected item
            dominated = np.all(ratio <= heuristic[heuristic == 1])
            
            # If not dominated, calculate additional heuristics
            if not dominated:
                # Calculate normalized density and sparsity
                density = prize[i] / (np.sum(weight[i]) + 1e-8)
                sparsity = np.sum(weight[i]) / (np.max(weight[i]) + 1e-8)
                
                # Combine the metrics to form a heuristic
                combined_heuristic = density - sparsity
                
                # Update the heuristic if it is better than the current best
                if combined_heuristic > heuristic[i]:
                    heuristic[i] = combined_heuristic
    
    # Normalize the heuristic to sum to 1
    heuristic /= np.sum(heuristic)
    
    # Introduce randomness to balance exploration and exploitation
    random_factor = np.random.rand(len(prize))
    heuristic *= (1 - random_factor)
    
    return heuristic
```
