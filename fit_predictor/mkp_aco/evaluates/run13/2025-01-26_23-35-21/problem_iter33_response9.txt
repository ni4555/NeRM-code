```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to avoid dominance
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the normalized weight sum
    normalized_weight_sum = (np.sum(weight, axis=1) - np.min(np.sum(weight, axis=1))) / (np.max(np.sum(weight, axis=1)) - np.min(np.sum(weight, axis=1)))
    
    # Encourage randomness and sparsity by penalizing items with high weight sum
    sparsity_factor = 1 - normalized_weight_sum
    
    # Introduce randomness by adding a small Gaussian noise
    random_factor = np.random.normal(0, 1e-2, prize.shape)
    
    # Combine the factors into a heuristic
    heuristic = normalized_prize * sparsity_factor + random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set the heuristic values for items with zero weight to a small value
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
