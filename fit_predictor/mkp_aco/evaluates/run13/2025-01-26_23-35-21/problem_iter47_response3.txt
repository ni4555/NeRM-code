```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = 1 - (np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8))
    
    # Introduce a randomness factor to encourage diversity
    randomness_factor = np.random.rand(len(density))
    
    # Create a balanced heuristic value by blending density, sparsity, and randomness
    heuristic_value = density * sparsity * randomness_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
