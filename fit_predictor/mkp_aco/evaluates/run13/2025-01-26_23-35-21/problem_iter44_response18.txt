```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)

    # Calculate the diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)

    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum

    # Combine the heuristic value with the diversity factor
    combined_heuristic = heuristic_value * diversity_factor

    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)

    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * combined_heuristic + 0.4 * balance_heuristic

    # Normalize by the maximum heuristic value
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)

    # Set zero weights to a small value to maintain diversity
    normalized_combined_heuristic[weight_sum < 1e-8] = 1e-8

    return normalized_combined_heuristic
```
