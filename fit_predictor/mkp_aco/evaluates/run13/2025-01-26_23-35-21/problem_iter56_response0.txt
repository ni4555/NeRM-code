```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Normalize the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate a balance factor that considers both the density and sparsity
    balance_factor = 0.6 * density + 0.4 * (1 - sparsity)

    # Calculate a diversity factor based on the variance of the density
    variance_density = np.var(density)
    diversity_factor = 1 / (variance_density + 1e-8)

    # Combine the balance and diversity factors into a single heuristic score
    heuristic_value = balance_factor * diversity_factor

    # Ensure that the heuristic values are not dominated by setting a minimum value
    min_value = np.min(heuristic_value)
    heuristic_value = np.where(heuristic_value == min_value, 0, heuristic_value)

    # Normalize the heuristic to ensure the sum is one
    heuristic = heuristic_value / np.sum(heuristic_value)

    return heuristic
```
