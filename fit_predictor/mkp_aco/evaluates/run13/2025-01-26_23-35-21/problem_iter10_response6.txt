```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Integrate diversity with utility by adding a diversity metric
    diversity = np.min(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) + diversity - weight_sum
    
    # Manage sparsity by adding a term to penalize zero weights
    heuristic_value[weight_sum == 0] = -np.inf
    
    # Control sparsity with a diversity threshold
    diversity_threshold = 0.5
    heuristic_value[diversity < diversity_threshold] = -np.inf
    
    # Normalize by the maximum heuristic value excluding negative values
    positive_values = heuristic_value[heuristic_value > 0]
    max_heuristic_value = np.max(positive_values) if positive_values.size > 0 else 1e-8
    normalized_heuristic = heuristic_value / (max_heuristic_value + 1e-8)
    
    # Set all negative heuristic values to zero
    normalized_heuristic[heuristic_value <= 0] = 0
    
    return normalized_heuristic
```
