```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized prize per unit weight for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the maximum sparsity in the current weight set to use as a penalty threshold
    max_sparsity = np.max(weight, axis=1) / np.sum(weight, axis=1)
    
    # Define a heuristic value based on density, reducing it for heavier items
    heuristic_value = density / (1 + max_sparsity)
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic
    
    return heuristic_value
```
