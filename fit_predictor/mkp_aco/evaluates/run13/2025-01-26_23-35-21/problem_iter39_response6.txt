```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate weight sum
    weight_sum = np.sum(weight, axis=1)
    
    # Add a randomness factor to escape local optima
    randomness_factor = np.random.rand(*density.shape)
    
    # Combine factors to create heuristic
    heuristic = density * (1 - sparsity) - weight_sum + randomness_factor
    
    # Normalize heuristic to prevent dominance
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine heuristics using a weighted sum
    combined_heuristic = 0.7 * normalized_heuristic + 0.3 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
