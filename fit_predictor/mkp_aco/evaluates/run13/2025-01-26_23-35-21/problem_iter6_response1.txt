```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate the sparsity as the inverse of the sum of weights
    sparsity = 1 / np.sum(weight, axis=1)
    # Calculate the diversity using the variance of the weights
    diversity = np.var(weight, axis=1)
    # Combine the metrics with weights to give a balanced heuristic
    combined_metrics = utility * 0.6 + sparsity * 0.3 + diversity * 0.1
    # Normalize the combined metrics to ensure they sum to 1 for a selection process
    normalized_combined_metrics = combined_metrics / np.sum(combined_metrics)
    # Apply a smoothing to the normalized combined metrics to avoid too sharp changes
    heuristics = np.clip(normalized_combined_metrics, a_min=0, a_max=1)
    return heuristics
```
