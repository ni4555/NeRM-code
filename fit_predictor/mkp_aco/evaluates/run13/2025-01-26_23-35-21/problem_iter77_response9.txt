```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the density ratio
    density_ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate a sparsity metric
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Define a dominance filter to remove dominated items
    dominated = np.zeros_like(weight)
    for i in range(weight.shape[0]):
        for j in range(weight.shape[0]):
            if (prize[i] < prize[j]) and (np.all(weight[i] <= weight[j])):
                dominated[i] = 1
    
    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(weight.shape[0])
    
    # Combine factors with different weights to balance exploration and exploitation
    heuristic_value = density_ratio * 0.7 + sparsity * 0.2 + random_factor * 0.1
    
    # Filter out dominated items
    heuristic_value[dominated] = 0
    
    # Normalize by the maximum heuristic value to maintain a scale
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
