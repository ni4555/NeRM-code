```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce exploration-exploitation balance by combining density and sparsity
    balance_factor = 1 / (1 + np.exp(-(density - sparsity)))
    
    # Introduce randomness for diversity
    random_factor = np.random.rand(len(density))
    
    # Add exploration and exploitation
    heuristic_value = (balance_factor * density) + (1 - balance_factor) * sparsity + random_factor
    
    # Normalize to prevent dominance
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic = normalized_heuristic * (weight_sum > 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * balance_factor + 0.4 * balance_heuristic
    
    return combined_heuristic
```
