```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8
    
    # Calculate additional metrics
    weight_sum = np.sum(weight, axis=1)
    value_density_ratio = prize / (np.sum(weight**2, axis=1) + 1e-8)
    max_density = np.max(density)
    
    # Prune dominated solutions (items with zero or very low density)
    dominated_prune_threshold = np.percentile(density, 90)
    heuristics_pruned = np.where(density >= dominated_prune_threshold, density, 0)
    
    # Introduce randomness carefully
    random_factor = np.random.rand(n) * (max_density / 2) + (max_density / 4)
    
    # Combine all metrics using a weighted sum, including randomness
    heuristic = (0.4 * heuristics_pruned +
                 0.3 * (1 - sparsity) +
                 0.2 * value_density_ratio +
                 0.1 * random_factor)
    
    # Normalize heuristics
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Maintain diversity by ensuring there is at least one non-zero weight
    min_weight = 1e-8
    diversity_threshold = np.percentile(weight_sum, 10)
    normalized_heuristic[np.where(weight_sum < diversity_threshold)] = 0
    
    return normalized_heuristic
```
