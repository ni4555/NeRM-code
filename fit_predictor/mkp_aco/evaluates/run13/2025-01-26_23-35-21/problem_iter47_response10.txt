```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value * diversity_factor
    
    # Add randomness for exploration
    random_factor = np.random.rand(len(density))
    
    # Combine all factors to create the final heuristic
    heuristic = normalized_heuristic + random_factor
    
    # Prune dominated solutions by setting dominated items to a very low value
    for i in range(len(heuristic)):
        for j in range(len(heuristic)):
            if i != j and heuristic[i] < heuristic[j]:
                heuristic[i] = -1e8
    
    # Normalize the heuristics to ensure non-negative values and to prevent overflow
    heuristic = heuristic - np.min(heuristic)
    heuristic = heuristic / np.max(heuristic)
    
    return heuristic
```
