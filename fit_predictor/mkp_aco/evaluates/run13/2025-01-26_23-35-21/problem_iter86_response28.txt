```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Introduce randomness for diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine density with randomness
    combined_factor = density + random_factor

    # Normalize the heuristic values
    max_combined_factor = np.max(combined_factor)
    normalized_heuristic = combined_factor / (max_combined_factor + 1e-8)

    # Sparsity penalty for high sparsity to encourage diversity
    sparsity_penalty = (1 - np.mean(density)) * 0.2
    refined_heuristic = normalized_heuristic * (1 - sparsity_penalty)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(density == 0):
        refined_heuristic = np.ones(n) * 1e-8

    return refined_heuristic
```
