```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized prize per unit weight for each item
    density = prize / np.sum(weight, axis=1)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.maximum(np.sum(weight, axis=1), 1e-8))

    # Calculate a penalty for items that exceed the weight constraint of 1
    weight_penalty = np.sum(weight, axis=1) / (np.maximum(np.sum(weight, axis=1), 1e-8))

    # Calculate the sum of weights for each item
    weight_sum = np.sum(weight, axis=1)

    # Combine the density, sparsity, and weight penalty into a single heuristic value
    heuristic_value = density * (1 - sparsity) - weight_sum + weight_penalty

    # Introduce a diversity factor based on the variance of the density
    diversity_factor = density / np.var(density)

    # Calculate the final heuristic by combining the heuristic value and diversity factor
    final_heuristic = heuristic_value * diversity_factor

    # Normalize the final heuristic values to sum to 1
    final_heuristic /= np.sum(final_heuristic)

    return final_heuristic
```
