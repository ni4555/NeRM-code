```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate the normalized density as the ratio of prize to the sum of weights
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity as the ratio of the sum of weights to the maximum weight
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce diversity by considering the variance of the density
    diversity = np.var(density)
    
    # Combine density and sparsity to form a heuristic
    heuristic = density - sparsity + diversity
    
    # Introduce stochasticity by adding a random factor
    random_factor = np.random.rand(n)
    
    # Adjust heuristic based on the random factor to encourage exploration
    heuristic *= (1 + random_factor - 1)
    
    # Normalize heuristic values to sum to 1
    normalized_heuristic = heuristic / np.sum(heuristic)
    
    return normalized_heuristic
```
