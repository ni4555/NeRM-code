```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    # Normalize the prize to account for the dimensionality of the weight
    normalized_prize = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the density
    density = normalized_prize
    
    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the standard deviation of the density
    diversity_factor = np.std(density)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)
    
    # Penalize items that exceed the weight dimensionality constraint
    penalty = np.where(weight_sum > 1, 1 - (weight_sum - 1) / (np.max(weight_sum) - 1), 0)
    normalized_heuristic *= (1 - penalty)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_penalty = 1e-8
    normalized_heuristic[weight_sum < zero_weight_penalty] = zero_weight_penalty
    
    # Ensure non-negative heuristics
    normalized_heuristic = np.clip(normalized_heuristic, 0, None)
    
    return normalized_heuristic
```
