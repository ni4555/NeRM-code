```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items by selecting the best non-dominated item in each dimension
    dominance_mask = np.apply_along_axis(lambda x: np.argmax(x), axis=1, arr=density)
    unique_dominance_mask = np.unique(dominance_mask)
    non_dominated_items = np.isin(dominance_mask, unique_dominance_mask)
    
    # Balance exploration-exploitation by incorporating a random factor
    exploration_factor = np.random.rand(len(prize))
    exploitation_factor = density[non_dominated_items]
    
    # Combine exploration and exploitation factors
    heuristic = exploration_factor + exploitation_factor
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce randomness for diversity
    np.random.shuffle(normalized_heuristic)
    
    # Prune further to maintain sparsity
    sparsity_mask = normalized_heuristic < 0.01
    normalized_heuristic[sparsity_mask] = 0
    
    return normalized_heuristic
```
