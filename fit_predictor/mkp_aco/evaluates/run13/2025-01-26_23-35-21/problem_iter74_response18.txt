```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.sqrt(np.sum(weight**2, axis=1)) + 1e-8)

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Identify dominated items and prune them
    dominated_mask = density < np.percentile(density, 95)
    density[dominated_mask] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Define the weight for each heuristic component
    density_weight = 0.4
    sparsity_weight = 0.3
    value_to_weight_ratio_weight = 0.2
    random_factor_weight = 0.1

    # Combine metrics with randomness to create a heuristic
    heuristic = (density * density_weight +
                 (1 - sparsity) * sparsity_weight +
                 value_to_weight_ratio * value_to_weight_ratio_weight +
                 random_factor * random_factor_weight)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Introduce a balance factor to ensure diversity and to not converge to premature solutions
    balance_factor = np.exp(-np.mean(np.abs(np.diff(np.argsort(-normalized_heuristic)))))

    # Adjust the heuristics based on balance factor
    normalized_heuristic *= balance_factor

    # Introduce a diversity penalty for items with low density, to encourage exploration
    diversity_penalty = 1 - np.mean(density)
    normalized_heuristic -= diversity_penalty * 0.1

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.sum(normalized_heuristic > 0) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
