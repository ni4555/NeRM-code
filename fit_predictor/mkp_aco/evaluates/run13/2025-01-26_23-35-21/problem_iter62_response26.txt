```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity as the sum of each item's weight over the maximum weight per dimension
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Prune dominated items based on both sparsity and density
    is_dominated = (np.sum(weight, axis=1) < np.max(weight, axis=1)) & (density < np.mean(density))
    non_dominated_mask = ~is_dominated
    
    # Normalize density and sparsity
    normalized_density = density / np.max(density + 1e-8)
    normalized_sparsity = sparsity / np.max(sparsity + 1e-8)
    
    # Create a heuristic value by balancing density and sparsity
    heuristic = normalized_density - normalized_sparsity
    
    # Introduce randomness to diversify solutions
    random_factor = np.random.rand(n)
    
    # Combine the heuristic with randomness to explore a wider solution space
    combined_heuristic = heuristic * 0.6 + random_factor * 0.4
    
    # Ensure the heuristic values are non-negative and normalize by the maximum heuristic value
    combined_heuristic = np.clip(combined_heuristic, 0, None)
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Apply the non-dominance mask to retain only non-dominated items
    normalized_heuristic = normalized_heuristic * non_dominated_mask
    
    return normalized_heuristic
```
