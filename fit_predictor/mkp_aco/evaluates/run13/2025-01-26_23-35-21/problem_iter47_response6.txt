```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a random vector to add randomness
    random_vector = np.random.rand(*weight.shape)
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate additional metrics
    weight_sum = np.sum(weight, axis=1)
    
    # Create initial heuristic
    heuristic = density * (1 - sparsity) - weight_sum
    
    # Introduce randomness
    heuristic += random_vector
    
    # Ensure that zero weight items have a minimal heuristic to maintain diversity
    heuristic[weight_sum < 1e-8] = 1e-8
    
    # Normalize the heuristic
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    else:
        heuristic = np.zeros_like(heuristic)
    
    return heuristic
```
