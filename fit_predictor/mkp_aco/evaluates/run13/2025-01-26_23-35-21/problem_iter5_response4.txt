```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Use a weighted average of the utility and the variance of the weights
    # Weights for the variance are inversely proportional to the standard deviation
    # to encourage diversity in the selected items
    variance_weights = 1 / np.std(weight, axis=1)
    # Avoid division by zero and ensure the sum of variance weights is not zero
    variance_weights = variance_weights / np.sum(variance_weights)
    # Combine the utility and the weighted variance
    heuristics = utility * variance_weights
    # Normalize the heuristics to ensure they can be compared across dimensions
    heuristics_normalized = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    # Sparsify the heuristics by setting a threshold below which an item is considered unpromising
    sparsity_threshold = np.percentile(heuristics_normalized, 25)
    heuristics_sparsified = np.where(heuristics_normalized >= sparsity_threshold, heuristics_normalized, 0)
    # Apply a smoothing to the heuristics to avoid too sharp changes
    heuristics_smoothed = np.clip(heuristics_sparsified, a_min=0, a_max=1)
    return heuristics_smoothed
```
