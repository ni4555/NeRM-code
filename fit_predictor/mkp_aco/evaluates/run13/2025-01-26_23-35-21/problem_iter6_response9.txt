```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape

    # Normalize prize by the maximum prize to ensure that the highest prize gets the highest score
    normalized_prize = prize / np.max(prize)

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1)
    # Normalize sparsity by the maximum sparsity
    normalized_sparsity = sparsity / np.max(sparsity)

    # Calculate the diversity of the weight distribution
    diversity = np.mean(normalized_sparsity)

    # Calculate the average prize-to-weight ratio across dimensions
    average_prize_to_weight_ratio = np.sum(prize) / np.sum(weight)

    # Calculate the weighted score for each item
    # We prioritize high normalized prize, diversity, and reasonable average prize-to-weight ratio
    heuristics = normalized_prize * diversity * average_prize_to_weight_ratio

    # Apply a penalty to items that have a very low prize-to-weight ratio
    penalty_factor = np.where(average_prize_to_weight_ratio < 0.5, 0.5, 1)
    heuristics *= penalty_factor

    # Apply a sigmoid function to smooth the heuristics
    heuristics = 1 / (1 + np.exp(-heuristics))

    # Ensure that the heuristics are bounded between 0 and 1
    heuristics = np.clip(heuristics, 0, 1)

    return heuristics
```
