```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the profit to weight ratio for each item
    profit_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity based on the mean weight
    sparsity = np.sum(weight, axis=1) / np.mean(weight, axis=1)
    
    # Calculate diversity by considering the inverse of the variance of weights
    # This helps to include items with unique weight characteristics
    diversity = 1 / (np.var(weight, axis=1) + 1e-8)
    
    # Normalize the metrics to be on the same scale
    normalized_profit = profit_to_weight_ratio / np.mean(profit_to_weight_ratio)
    normalized_sparsity = sparsity / np.mean(sparsity)
    normalized_diversity = diversity / np.mean(diversity)
    
    # Define weights for each metric to create a balanced heuristic value
    profit_weight = 0.4
    sparsity_weight = 0.3
    diversity_weight = 0.3
    
    # Combine the normalized metrics to form heuristics
    heuristics = (normalized_profit * profit_weight +
                  (normalized_sparsity * sparsity_weight) +
                  (normalized_diversity * diversity_weight))
    
    # Ensure all values are non-negative
    heuristics = np.clip(heuristics, 0, None)
    
    return heuristics
```
