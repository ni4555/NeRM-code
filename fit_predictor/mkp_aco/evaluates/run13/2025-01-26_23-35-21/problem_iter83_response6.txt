```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Introduce randomness for stochastic improvement
    random_factor = np.random.rand(len(heuristic))
    
    # Prune dominated items by setting their heuristic to zero
    dominated_indices = np.where(heuristic < 0)[0]
    heuristic[dominated_indices] = 0
    
    # Create a sparser heuristic by setting weights close to zero to a small value
    sparse_threshold = 1e-4
    sparser_heuristic = np.where(weight > sparse_threshold, heuristic, 0)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * sparser_heuristic + 0.4 * (random_factor - np.min(random_factor))
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    return normalized_heuristic
```
