```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a balance metric that combines density and sparsity
    balance_metric = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Calculate the potential improvement by adding an item
    potential_improvement = (prize - density * weight_sum) / (np.max(weight, axis=1) + 1e-8)
    
    # Create a combined heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum + potential_improvement
    
    # Create a final heuristic by combining the diversity factor with the heuristic value and balance metric
    heuristic = diversity_factor * heuristic_value * balance_metric
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
