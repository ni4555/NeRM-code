```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item, which is the prize per unit weight
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity of each item, which is the sum of weights normalized by the maximum weight
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Normalize the density and sparsity to be between 0 and 1
    density_normalized = (density - np.min(density)) / (np.max(density) - np.min(density))
    sparsity_normalized = (sparsity - np.min(sparsity)) / (np.max(sparsity) - np.min(sparsity))
    
    # Combine the normalized density and sparsity using a weighted sum, balancing their influence
    heuristic_value = density_normalized * 0.7 + sparsity_normalized * 0.3
    
    # Introduce randomness to encourage diversity in the solution
    random_factor = np.random.rand(*heuristic_value.shape)
    
    # Combine the heuristic with the random factor
    combined_heuristic = heuristic_value * random_factor
    
    # Ensure that all heuristics are positive by adding a small constant
    combined_heuristic = np.maximum(combined_heuristic, 1e-8)
    
    return combined_heuristic
```
