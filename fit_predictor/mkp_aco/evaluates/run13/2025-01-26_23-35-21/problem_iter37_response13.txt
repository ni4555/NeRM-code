```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics to a small value
    heuristics = np.zeros_like(prize) + 1e-8
    
    # Calculate normalized prize-to-weight ratio
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional informative features
    weight_sum = np.sum(weight, axis=1)
    
    # Blend density and sparsity to create a base heuristic
    base_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Normalize by the maximum density to ensure balance
    normalized_base_heuristic = base_heuristic / (np.max(base_heuristic) + 1e-8)
    
    # Introduce randomness for diversity
    randomness = np.random.rand(*base_heuristic.shape) / (np.max(np.random.rand(*base_heuristic.shape), axis=0) + 1e-8)
    
    # Combine base heuristic and randomness
    heuristics = normalized_base_heuristic * 0.7 + randomness * 0.3
    
    # Adjust heuristics for items that have a significant weight
    heuristics[weight_sum > 0.5 * np.max(weight_sum)] = heuristics[weight_sum > 0.5 * np.max(weight_sum)] * 0.5
    
    # Ensure that the heuristics are normalized
    heuristics = heuristics / (np.max(heuristics) + 1e-8)
    
    # Set zero weights to zero to avoid overfitting to the sparsity metric
    heuristics[weight_sum < 1e-8] = 0
    
    return heuristics
```
