```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = np.random.rand(len(density)) * (1 / average_density)
    
    # Create a final heuristic by combining the density, sparsity, and diversity
    heuristic = density * (1 - sparsity) + diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic
    
    # Prune dominated items by setting their heuristic to zero
    dominated_items = np.where(weight_sum < 1e-8)[0]
    combined_heuristic[dominated_items] = 0
    
    # Sparsify the heuristics by setting low-value elements to zero
    sparsity_threshold = np.percentile(combined_heuristic, 25)
    combined_heuristic[combined_heuristic < sparsity_threshold] = 0
    
    return combined_heuristic
```
