```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items by setting their heuristic to zero
    dominated_indices = np.where(weight_sum < 1e-8)[0]
    for i in dominated_indices:
        density[i] = 0
    
    # Normalize the remaining heuristics
    normalized_heuristic = density / (np.max(density) + 1e-8)
    
    # Introduce randomness by adding a random perturbation to the heuristics
    random_perturbation = np.random.rand(len(prize))
    randomized_heuristic = normalized_heuristic * random_perturbation
    
    # Normalize by the maximum heuristic value after perturbation
    normalized_randomized_heuristic = randomized_heuristic / (np.max(randomized_heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_randomized_heuristic + 0.4 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
