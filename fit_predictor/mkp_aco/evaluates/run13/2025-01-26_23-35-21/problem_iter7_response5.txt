```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Employ domain insights, normalize by maxima, and blend metrics for a balanced heuristic
    # Normalize density by the maximum density
    normalized_density = density / (np.max(density) + 1e-8)
    
    # Normalize sparsity by the maximum sparsity
    normalized_sparsity = 1 - sparsity / (np.max(sparsity) + 1e-8)
    
    # Blend density and sparsity with a trade-off parameter
    trade_off = 0.5
    combined_heuristic = trade_off * normalized_density + (1 - trade_off) * normalized_sparsity
    
    # Integrate multiple metrics, normalize, and manage sparsity, diversity, and thresholds
    # Use a threshold to manage sparsity
    threshold = 0.5
    heuristics = np.where(combined_heuristic >= threshold, combined_heuristic, 0)
    
    return heuristics
```
