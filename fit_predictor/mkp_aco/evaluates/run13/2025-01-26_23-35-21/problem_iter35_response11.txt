```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an empty array to store the combined heuristic values
    combined_heuristic = np.zeros_like(prize)
    
    # Normalize prize values
    normalized_prize = prize / np.max(prize)
    
    # Normalize weight values
    normalized_weight = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))
    
    # Add a diversity heuristic based on the ratio of prize to weight
    diversity_heuristic = normalized_prize / (normalized_weight + 1e-8)
    
    # Add a sparsity heuristic to avoid overloading any knapsack
    sparsity_heuristic = 1 / (np.sum(weight, axis=1) + 1e-8)
    
    # Add a randomness heuristic to encourage diversity in the solution
    randomness_heuristic = np.random.rand(len(prize))
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = diversity_heuristic * 0.4 + sparsity_heuristic * 0.3 + randomness_heuristic * 0.3
    
    # Normalize the combined heuristic values
    normalized_combined_heuristic = combined_heuristic / np.max(combined_heuristic)
    
    return normalized_combined_heuristic
```
