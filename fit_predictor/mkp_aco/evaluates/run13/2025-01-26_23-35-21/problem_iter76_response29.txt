```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Initial heuristic that balances density and sparsity
    heuristic = (0.5 * density) + (0.5 * (1 - sparsity))

    # Further enhance heuristic with value-to-weight ratio and randomness
    heuristic += 0.2 * value_to_weight_ratio
    heuristic += 0.3 * random_factor

    # Introduce diversity factor that encourages inclusion of diverse items
    diversity_factor = 0.1 * (1 - np.mean(density)) / (np.max(1 - np.mean(density)) + 1e-8)
    heuristic += diversity_factor

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    # Refine the heuristic to give more weight to items with higher value-to-weight ratio
    refined_heuristic = normalized_heuristic * value_to_weight_ratio / np.max(value_to_weight_ratio)

    # Introduce a sparsity penalty for items with high sparsity, to encourage diversity
    sparsity_penalty = (1 - sparsity) * 0.1
    refined_heuristic *= (1 - sparsity_penalty)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(density == 0):
        refined_heuristic = np.ones(n) * 1e-8

    return refined_heuristic
```
