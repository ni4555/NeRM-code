```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Promote diversity by considering the standard deviation of density
    std_density = np.std(density)
    diversity_factor = density / (std_density + 1e-8)

    # Introduce randomness to avoid local optima
    randomness_factor = np.random.rand(weight.shape[0])

    # Promote balance by considering the sum of weights
    weight_sum = np.sum(weight, axis=1)
    balance_factor = (1 - weight_sum / (np.sum(prize) + 1e-8))

    # Create a final heuristic by combining factors
    heuristic = density * (1 - sparsity) + diversity_factor * randomness_factor + balance_factor

    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Introduce a penalty for items that are outliers in terms of density or sparsity
    outlier_penalty = np.where((density < np.percentile(density, 5)) | 
                               (density > np.percentile(density, 95)), 
                               -1e-8, 0)

    # Adjust heuristics for zero weight items to encourage diversity
    combined_heuristic = normalized_heuristic + outlier_penalty

    # Set a floor value for the heuristics to maintain a baseline
    combined_heuristic = np.maximum(combined_heuristic, 1e-8)

    return combined_heuristic
```
