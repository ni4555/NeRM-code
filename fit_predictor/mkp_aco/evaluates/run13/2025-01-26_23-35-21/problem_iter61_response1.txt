```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics to zero
    heuristics = np.zeros_like(prize)
    
    # Define a function to sample a heuristic value for an item
    def sample_heuristic(item_index):
        # Sample a random heuristic based on the item's prize and weight
        random_heuristic = np.random.rand() * (prize[item_index] / np.sum(weight[item_index]))
        # Adjust the heuristic based on sparsity and density
        sparsity = np.sum(weight[item_index]) / (np.max(weight, axis=1) + 1e-8)
        density = prize[item_index] / (np.sum(weight[item_index]) + 1e-8)
        adjusted_heuristic = random_heuristic * (1 - sparsity) + density
        return adjusted_heuristic
    
    # Iterate over all items and sample a heuristic value
    for i in range(prize.shape[0]):
        heuristics[i] = sample_heuristic(i)
    
    # Normalize the heuristics
    heuristics /= np.sum(heuristics)
    
    # Introduce a diversity factor by ensuring a minimum distance between heuristics
    distances = np.sqrt(np.sum((heuristics[:, np.newaxis] - heuristics[np.newaxis, :]) ** 2, axis=2))
    min_distance = np.min(distances)
    diversity_factor = 1 / (min_distance + 1e-8)
    heuristics *= diversity_factor
    
    return heuristics
```
