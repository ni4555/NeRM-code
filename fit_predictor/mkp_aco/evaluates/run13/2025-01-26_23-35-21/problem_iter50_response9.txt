```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)[:, np.newaxis] + 1e-8
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1)[:, np.newaxis] + 1e-8)
    
    # Calculate diversity based on variance of density
    diversity = np.var(density, axis=0)
    
    # Calculate heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) * diversity
    
    # Normalize the heuristic values to sum to one
    heuristics = heuristic_value / np.sum(heuristic_value)
    
    # Introduce randomness for balance
    random_factor = np.random.rand(n)
    
    # Adjust heuristics by introducing randomness
    adjusted_heuristics = heuristics * (1 + random_factor)
    
    # Prune dominated items by setting their heuristic to zero
    non_dominated_indices = np.argsort(adjusted_heuristics)[::-1]
    dominated_indices = np.setdiff1d(np.arange(n), non_dominated_indices[:len(np.unique(adjusted_heuristics[non_dominated_indices]))])
    adjusted_heuristics[dominated_indices] = 0
    
    # Ensure no negative values and small weights are given proper consideration
    adjusted_heuristics[adjusted_heuristics < 0] = 0
    adjusted_heuristics[weight.sum(axis=1) < 1e-8] = 1e-8
    
    return adjusted_heuristics
```
