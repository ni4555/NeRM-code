```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the average density for diversity factor
    average_density = np.mean(density)
    
    # Calculate the diversity factor
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Combine heuristic value with diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)
    
    # Introduce penalties to avoid selecting too dense or too sparse items
    penalty_dense = np.where(density > 1, 1 - density, 0)
    penalty_sparse = np.where(sparsity > 1, 1 - sparsity, 0)
    normalized_heuristic *= (1 - penalty_dense - penalty_sparse)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Normalize and cap the values to maintain scale and diversity
    max_normalized_heuristic = np.max(normalized_heuristic)
    normalized_heuristic /= max_normalized_heuristic
    
    return normalized_heuristic
```
