```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness to encourage exploration and reduce the risk of getting stuck in local optima
    randomness = np.random.rand(*density.shape)
    
    # Prune dominated items by considering the ratio of prize to weight
    dominance_ratio = prize / np.sum(weight, axis=1)
    
    # Combine dominance ratio and normalized density to create a heuristic
    heuristic = dominance_ratio * density + randomness
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a penalty for items with high sparsity to avoid selecting too many items
    penalty = 1 - np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Adjust the heuristic by applying the penalty and normalization
    adjusted_heuristic = normalized_heuristic * (1 - penalty)
    
    return adjusted_heuristic
```
