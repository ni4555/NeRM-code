```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate prize per weight for each item
    prize_per_weight = prize / np.sum(weight, axis=1)

    # Calculate diversity based on prize per weight
    diversity = np.max(prize_per_weight) / prize_per_weight

    # Calculate sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Calculate balance by considering the standard deviation of prize per weight
    balance = np.exp(-(prize_per_weight - np.mean(prize_per_weight))**2 / (2 * np.std(prize_per_weight)**2))

    # Calculate adaptability factor based on the ratio of the sum of weights of the item to the total weight capacity
    adaptability_factor = np.sum(weight, axis=1) / np.sum(weight)

    # Introduce randomness to avoid getting stuck in local optima
    randomness = np.random.rand(n)

    # Combine the factors into a weighted heuristic
    heuristic = 0.6 * diversity + 0.2 * sparsity + 0.1 * balance + 0.1 * adaptability_factor + 0.1 * randomness

    # Normalize the heuristic to ensure all values are between 0 and 1
    heuristic /= np.sum(heuristic)

    return heuristic
```
