```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize values
    normalized_prize = prize / np.max(prize)
    
    # Calculate the density which balances the value and weight
    density = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate sparsity by normalizing the sum of weights by the maximum weight
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Include diversity by considering the sum of weights
    diversity = np.sum(weight, axis=1)
    
    # Integrate a penalty for low diversity (uniform distribution of weights)
    diversity_penalty = np.maximum(0, 1 - diversity / np.mean(weight, axis=1))
    
    # Create a heuristic that is a weighted sum of density, sparsity, and diversity
    heuristic = density * 0.5 + sparsity * 0.3 + diversity * 0.2 - diversity_penalty * 0.3
    
    # Normalize the heuristic values to ensure they are in the range [0, 1]
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Add a penalty for items with zero weight
    normalized_heuristic[np.where(np.sum(weight, axis=1) == 0)] = -np.inf
    
    # Ensure all values are non-negative
    normalized_heuristic = np.clip(normalized_heuristic, 0, 1)
    
    return normalized_heuristic
```
