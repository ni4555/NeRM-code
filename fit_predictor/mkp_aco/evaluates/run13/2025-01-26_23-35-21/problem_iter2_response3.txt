```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the profit to weight ratio for each item
    profit_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sum of weights for each item
    sum_weight = np.sum(weight, axis=1)
    
    # Calculate the sparsity factor based on a threshold
    sparsity_threshold = 0.5
    sparsity_factor = (sum_weight < sparsity_threshold) * 1.0
    
    # Calculate the density factor, which is the inverse of the sum of weights
    density_factor = 1.0 / (sum_weight + 1e-6)
    
    # Combine the profit to weight ratio, sparsity factor, and density factor
    # The sparsity factor and density factor are given higher weights to encourage
    # solutions with items that are less dense and more sparsely distributed
    heuristics = profit_to_weight_ratio * 0.5 + sparsity_factor * 0.3 + density_factor * 0.2
    
    # Normalize the heuristics to ensure they sum to 1, making it easier to sample
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
