```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to ensure that the sum of heuristics is proportional to the total prize
    normalized_prize = prize / np.sum(prize)
    
    # Calculate utility based on prize per unit weight
    utility = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate the variance of the weights, with a penalty for high variance
    # to encourage sparsity in the selected items
    variance_penalty = np.var(weight, axis=1)
    variance_penalty = np.exp(-variance_penalty)
    
    # Normalize the variance penalty to ensure it does not dominate the utility
    variance_penalty = variance_penalty / np.sum(variance_penalty)
    
    # Combine utility and variance penalty to create heuristics
    heuristics = utility * variance_penalty
    
    # Apply a sparsity heuristic by setting the heuristics of items with high variance
    # or low utility to zero
    sparsity_threshold = 0.1  # A threshold for sparsity
    heuristics[np.where(variance_penalty < sparsity_threshold) | 
                np.where(utility < sparsity_threshold)] = 0
    
    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
