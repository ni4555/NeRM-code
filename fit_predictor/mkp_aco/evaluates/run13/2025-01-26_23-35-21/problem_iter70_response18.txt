```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the normalized value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight, axis=1)

    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the balance between density and sparsity
    balance = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Calculate the penalty for items that are too heavy
    weight_penalty = np.sum(weight, axis=1) / (np.max(np.sum(weight, axis=1)) + 1e-8)
    
    # Calculate the complexity of the item (the higher the complexity, the lower the heuristic)
    complexity = np.sum(weight**2, axis=1) / (np.sum(weight**2) + 1e-8)
    
    # Combine the metrics using a weighted sum
    heuristic = (0.5 * value_to_weight_ratio +
                 0.3 * balance +
                 0.1 * (1 - weight_penalty) +
                 0.1 * (1 - complexity))
    
    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8
    
    # Combine the heuristic with randomness
    heuristic_with_randomness = heuristic * random_factor
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic_with_randomness / (np.max(heuristic_with_randomness) + 1e-8)
    
    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.allclose(density, 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
