```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Use additional metrics like the standard deviation to reduce sparsity
    std_dev = np.std(weight, axis=1)
    heuristic_value += std_dev * 0.1  # Adjust the scaling factor as needed
    
    # Penalize zero or near-zero weights to maintain diversity
    penalty = np.where(weight_sum < 1e-8, -np.inf, 0)
    heuristic_value += penalty
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Sparsify the heuristics by setting low values to zero
    sparsified_heuristic = np.where(normalized_heuristic < 0.1, 0, normalized_heuristic)
    
    return sparsified_heuristic
```
