```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize per unit weight
    normalized_prize = prize / np.max(prize)
    # Normalize the weight per dimension to encourage diversity
    normalized_weight = weight / np.max(weight, axis=0)
    # Calculate the variance within each dimension of the weights
    dimensional_variances = np.var(normalized_weight, axis=1)
    # Combine normalized prize with the inverse of the variance to balance quality and diversity
    heuristics = normalized_prize * (1 / dimensional_variances)
    # Normalize the heuristics to a range of [0, 1]
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    # Apply a smoothing technique, such as Gaussian blur, to reduce the impact of outliers
    kernel_size = 3
    kernel = np.ones((kernel_size, kernel_size), dtype=np.float32) / kernel_size**2
    heuristics_smoothed = np.convolve(heuristics, kernel, mode='same')
    return heuristics_smoothed
```
