```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized prize per unit weight for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the diversity score based on the sum of weights
    diversity = np.mean(weight, axis=1) / np.sum(weight, axis=1)
    
    # Combine density and diversity into a heuristic value
    heuristic_value = density / (1 + diversity)
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic
    
    # Introduce a penalty for items with low diversity (i.e., not diverse in weight distribution)
    penalty_factor = (1 - diversity) / (1 - np.min(diversity) + 1e-8)
    
    # Adjust the heuristic with the penalty factor
    adjusted_heuristic = heuristic_value * penalty_factor
    
    # Ensure that the heuristics are non-negative
    adjusted_heuristic[adjusted_heuristic < 0] = 0
    
    return adjusted_heuristic
```
