```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize array
    normalized_prize = prize / np.sum(prize) + 1e-8

    # Normalize the weights for each dimension
    normalized_weight = weight / np.sum(weight, axis=1, keepdims=True) + 1e-8

    # Calculate the value-to-weight ratio for each dimension
    value_to_weight_ratio = prize / np.sum(weight ** 2, axis=1) + 1e-8

    # Prune dominated items by calculating sparsity and density
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    density = normalized_prize

    # Prune dominated items
    dominance_mask = density > sparsity
    non_dominated_items = ~dominance_mask

    # Calculate the diversity based on the value-to-weight ratio
    diversity = np.sum(value_to_weight_ratio) / np.sum(value_to_weight_ratio / value_to_weight_ratio)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics into a heuristic value
    heuristic = (0.5 * normalized_prize +
                 0.3 * (1 - diversity) +
                 0.2 * value_to_weight_ratio +
                 0.1 * random_factor)

    # Normalize the heuristic values for non-dominated items
    non_dominated_heuristic = heuristic[non_dominated_items]

    # Ensure the heuristics have a minimum value to maintain diversity
    non_dominated_heuristic[non_dominated_heuristic < 1e-8] = 1e-8

    # Return the normalized heuristic values for the non-dominated items
    return non_dominated_heuristic
```
