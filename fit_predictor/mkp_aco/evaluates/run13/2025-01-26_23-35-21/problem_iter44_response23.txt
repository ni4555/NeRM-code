```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize to have a range of 0 to 1
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))

    # Calculate the density for each item
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the balance between density and sparsity
    balance = density / (density + sparsity)

    # Calculate the dominance score
    dominance_score = np.max(weight, axis=1) - np.min(weight, axis=1)

    # Introduce a randomness factor to encourage diversity
    random_factor = np.random.rand(len(prize))

    # Combine the balance and dominance with randomness
    combined_score = balance * 0.5 + dominance_score * 0.5 + random_factor * 0.2

    # Normalize the combined score to ensure all values are within a range [0, 1]
    normalized_combined_score = combined_score / (np.max(combined_score) + 1e-8)

    return normalized_combined_score
```
