```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8
    
    # Calculate density ratio as prize to weighted sum
    density_ratio = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate sparsity as the sum of weights divided by the maximum weight
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8
    
    # Calculate a balance metric, which is the difference between high density and low sparsity
    balance_metric = density_ratio - sparsity
    
    # Identify dominated solutions by setting low balance metric and low density ratio to zero
    dominated_prune_threshold = np.percentile(balance_metric, 95)
    low_density_threshold = np.percentile(density_ratio, 5)
    heuristic = np.where((balance_metric >= dominated_prune_threshold) & (density_ratio >= low_density_threshold),
                          balance_metric,
                          0)
    
    # Introduce randomness to avoid premature convergence
    random_factor = np.random.rand(n)
    
    # Normalize the heuristic by adding the randomness factor
    heuristic = (heuristic + random_factor) / (np.sum(heuristic) + np.sum(random_factor))
    
    # Ensure the sum of heuristics is close to 1 by scaling
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
