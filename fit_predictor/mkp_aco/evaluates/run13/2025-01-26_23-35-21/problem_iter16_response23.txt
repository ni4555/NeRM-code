```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics
    weight_sum = np.sum(weight, axis=1)
    weight_diversity = np.std(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) + weight_diversity - weight_sum
    
    # Apply penalties for low-value items and items with near-zero weight
    penalty = np.where(weight_sum < 1e-8, -prize.max(), 0)
    heuristic_value += penalty
    
    # Normalize by the maximum heuristic value
    max_heuristic = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic + 1e-8)
    
    # Apply a penalty to maintain diversity
    similarity_penalty = np.apply_along_axis(lambda x: -np.sum((x - np.mean(x))**2), 1, normalized_heuristic)
    normalized_heuristic += similarity_penalty
    
    # Use a threshold to avoid sparsity in the heuristic values
    sparsity_threshold = 0.2  # Define a sparsity threshold
    sparsity_penalty = np.where(normalized_heuristic < sparsity_threshold, -np.inf, 0)
    normalized_heuristic += sparsity_penalty
    
    # Final normalization to maintain a positive range
    min_heuristic = np.min(normalized_heuristic)
    normalized_heuristic -= min_heuristic
    max_heuristic = np.max(normalized_heuristic)
    normalized_heuristic /= max_heuristic
    
    return normalized_heuristic
```
