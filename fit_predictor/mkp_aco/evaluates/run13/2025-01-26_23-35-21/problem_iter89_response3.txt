```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items by comparing density to the average
    average_density = np.mean(density)
    dominated_items = density < average_density
    density[dominated_items] = 0
    
    # Normalize by the maximum heuristic value after pruning
    normalized_density = density / (np.max(density) + 1e-8)
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(len(density))
    
    # Create a final heuristic by blending the normalized heuristic with randomness
    heuristic = normalized_density * (1 - random_factor)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a balance heuristic based on the density and sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
