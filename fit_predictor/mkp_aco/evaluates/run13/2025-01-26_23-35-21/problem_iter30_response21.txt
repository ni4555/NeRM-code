```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Calculate normalized density for each item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate the sum of weights for each item
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Introduce a balance factor between high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce a density bonus for items with higher density than the average
    density_bonus = np.maximum(0, density - average_density)
    
    # Introduce a sparsity penalty for items that are too sparse
    sparsity_penalty = np.maximum(0, 1 - sparsity)
    
    # Combine all metrics into a single heuristic value
    heuristic_value = density * (1 - sparsity) - weight_sum + diversity_factor * 0.5 + balance_factor * 0.5 + density_bonus * 0.2 - sparsity_penalty * 0.2
    
    # Normalize the heuristic value to ensure it is non-negative and the sum is 1
    heuristic_value = (heuristic_value - np.min(heuristic_value)) / (np.max(heuristic_value) - np.min(heuristic_value) + 1e-8)
    
    return heuristic_value
```
