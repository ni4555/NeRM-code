```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize prizes
    prize_max = np.max(prize)
    prize_normalized = prize / prize_max
    
    # Calculate density (profit per unit of total weight)
    density = prize_normalized / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate diversity score
    diversity_score = (prize_normalized / (np.max(prize_normalized, axis=1) + 1e-8)).sum(axis=0) / (np.ones(n) + 1e-8).sum()
    
    # Calculate concentration penalty
    concentration_penalty = np.max(weight, axis=1) / (np.sum(weight, axis=1) + 1e-8)
    
    # Create a heuristic that combines density, diversity, and penalty
    heuristic = density * diversity_score - concentration_penalty
    
    # Normalize heuristics to sum to 1
    heuristic = heuristic / np.sum(heuristic)
    
    return heuristic
```
