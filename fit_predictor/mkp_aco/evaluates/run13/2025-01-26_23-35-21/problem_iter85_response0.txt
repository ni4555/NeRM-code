```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity ratio
    sparsity_ratio = np.sum(weight, axis=1) / np.prod(weight.shape[1:])
    
    # Calculate the total weight of the item
    total_weight = np.sum(weight, axis=1)
    
    # Calculate a dominance metric based on the total weight and prize ratio
    dominance_metric = prize / (total_weight + 1e-8)
    
    # Initialize the heuristic array
    heuristic = np.zeros_like(prize)
    
    # Select top non-dominated items
    sorted_indices = np.argsort(-dominance_metric)
    for i in sorted_indices:
        # Avoid adding items that are dominated
        dominated = np.any(density[sorted_indices] < density[i])
        if not dominated:
            # Combine different factors for heuristic value
            heuristic[i] = density[i] * (1 - sparsity_ratio[i]) * dominance_metric[i]
    
    # Normalize the heuristic by its maximum value
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    
    # Add randomness to the heuristic to promote diversity
    np.random.shuffle(heuristic)
    
    return heuristic
```
