```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize to have a range of 0 to 1
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))

    # Calculate the density for each item
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1e-8)

    # Calculate a balance score based on the product of density and sparsity
    balance_score = density * sparsity

    # Calculate the diversity score based on the standard deviation of the weights
    diversity_score = np.std(np.sum(weight, axis=1))

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)

    # Combine the balance score, diversity score, and randomness with appropriate weights
    combined_score = balance_score * 0.5 + diversity_score * 0.3 + random_factor * 0.2

    # Normalize the combined score to ensure all values are within a range [0, 1]
    normalized_combined_score = combined_score / (np.max(combined_score) + 1e-8)

    # Calculate the average density to use for diversity factor
    average_density = np.mean(density)

    # Introduce a diversity factor based on the deviation from the average density
    diversity_factor = (density - average_density) / (average_density + 1e-8)

    # Integrate the diversity factor into the heuristic value
    heuristic_value = normalized_combined_score * diversity_factor

    # Ensure the heuristic values are positive by adding a small epsilon
    heuristic_value = np.maximum(heuristic_value, 1e-8)

    return heuristic_value
```
