```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate normalized density and sparsity
    density = prize / np.sum(weight, axis=1, keepdims=True) + 1e-8
    sparsity = np.sum(weight, axis=1, keepdims=True) / np.max(weight, axis=1, keepdims=True) + 1e-8
    
    # Use sparsity and density as components for the heuristic value
    heuristic_value = density * (1 - sparsity)
    
    # Introduce a concentration penalty by subtracting the sum of weights
    concentration_penalty = -np.sum(weight, axis=1)
    
    # Add the concentration penalty to the heuristic value
    heuristic_value += concentration_penalty
    
    # Ensure heuristic value doesn't get too low for very light items
    heuristic_value[weight_sum < 1e-8] = 1e-8
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic_value / np.max(heuristic_value + 1e-8)
    
    # Encourage diversity by scaling by a diversity factor based on average density
    average_density = np.mean(density)
    diversity_factor = 1 / (1 + average_density)
    
    # Apply the diversity factor to the normalized heuristic values
    final_heuristic = normalized_heuristic * diversity_factor
    
    return final_heuristic
```
