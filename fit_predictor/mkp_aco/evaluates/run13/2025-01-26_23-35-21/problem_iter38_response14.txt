```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Normalize the density and sparsity
    normalized_density = density / (np.max(density) + 1e-8)
    normalized_sparsity = sparsity / (np.max(sparsity) + 1e-8)
    
    # Calculate a metric for total weight
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic value by blending the metrics
    heuristic_value = normalized_density * (1 - normalized_sparsity) - weight_sum
    
    # Introduce diversity factors
    diversity_density = density / (np.mean(density) + 1e-8)
    diversity_sparsity = sparsity / (np.mean(sparsity) + 1e-8)
    
    # Combine the diversity factors with the normalized heuristic value
    heuristic = heuristic_value * (diversity_density + diversity_sparsity)
    
    # Introduce a penalty for zero weight to maintain diversity
    zero_weight_penalty = np.where(weight_sum < 1e-8, 1e-8, 0)
    heuristic += zero_weight_penalty
    
    # Ensure non-negativity
    heuristic = np.maximum(heuristic, 0)
    
    return heuristic
```
