```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prizes and weights
    normalized_prize = prize / np.max(prize)
    normalized_weight = weight / np.max(weight, axis=1, keepdims=True)
    
    # Calculate the normalized density
    density = normalized_prize / (1 + np.sum(normalized_weight, axis=1))
    
    # Introduce a diversity factor based on the density and normalized weights
    diversity_factor = density / (np.mean(density) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(normalized_weight, axis=1)
    
    # Balance between density and sparsity
    balance_metric = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine diversity factor and balance metric
    heuristic_value = diversity_factor * balance_metric
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Ensure at least one item is not zero to maintain diversity
    combined_heuristic = np.where(np.sum(normalized_weight, axis=1) > 1e-8, normalized_heuristic, 1e-8)
    
    return combined_heuristic
```
