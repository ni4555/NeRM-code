```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by sum of all weights
    normalized_prize = prize / np.sum(prize)

    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)

    # Prune dominated items by keeping only the item with the highest prize per weight in each dimension
    non_dominated = np.apply_along_axis(lambda x: x[np.argmax(x)], axis=1, arr=weight)

    # Calculate a heuristic based on the ratio of prize to weight sum
    heuristic = normalized_prize / (weight_sum + 1e-8)

    # Introduce randomness to encourage exploration of diverse solutions
    random_factor = np.random.rand(len(heuristic))

    # Prune dominated items by setting their heuristic to a very low value
    heuristic[non_dominated != weight] = 1e-8

    # Combine the heuristic with the random factor to balance exploration and exploitation
    combined_heuristic = heuristic * random_factor

    # Normalize the combined heuristic
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)

    return normalized_combined_heuristic
```
