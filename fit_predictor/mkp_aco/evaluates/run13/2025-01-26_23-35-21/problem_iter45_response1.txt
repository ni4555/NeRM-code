```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a list of different heuristics
    heuristics = []
    
    # Heuristic based on density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    heuristics.append(density)
    
    # Heuristic based on sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    heuristics.append(1 - sparsity)
    
    # Heuristic based on sum of weights
    weight_sum = np.sum(weight, axis=1)
    heuristics.append(-weight_sum)
    
    # Heuristic based on balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    heuristics.append(balance_heuristic)
    
    # Combine the heuristics using a weighted sum
    combined_heuristics = np.sum(np.array(heuristics), axis=0)
    
    # Prune dominated solutions by setting weights with zero sum to a small value
    combined_heuristics[weight_sum < 1e-8] = 1e-8
    
    # Introduce randomness for exploration
    random_factor = np.random.rand(len(combined_heuristics))
    
    # Integrate randomness with the combined heuristics
    final_heuristic = combined_heuristics * random_factor
    
    # Normalize by the maximum heuristic value
    normalized_final_heuristic = final_heuristic / (np.max(final_heuristic) + 1e-8)
    
    return normalized_final_heuristic
```
