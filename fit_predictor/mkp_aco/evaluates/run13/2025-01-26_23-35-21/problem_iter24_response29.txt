```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Intensity measures how important it is for a high prize relative to its weight
    intensity = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Diversity factor based on the standard deviation of density
    diversity_factor = np.std(density)
    
    # Balance heuristic that rewards balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Performance measure for each item, weighted by density
    performance_measure = (prize / np.sum(weight, axis=1)) * density
    
    # Adaptive blending based on current performance and diversity
    blending_factor = performance_measure / (performance_measure + diversity_factor)
    
    # Combine heuristics using blending factor
    combined_heuristic = (intensity / sparsity) * blending_factor + balance_heuristic
    
    # Normalize by the maximum heuristic value to bound values
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Set zero weights to a very small value to maintain diversity while being negligible
    normalized_heuristic[np.sum(weight, axis=1) < 1e-8] = 1e-10
    
    return normalized_heuristic
```
