```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate a balance between high density and low sparsity
    balance = density / (density + sparsity + 1e-8)
    
    # Introduce randomness to ensure diversity in the heuristic values
    random_factor = np.random.rand(len(prize))
    
    # Create a heuristic by combining balance, density, and randomness
    heuristic = balance * density + random_factor
    
    # Normalize the heuristic to ensure all values are within the range [0, 1]
    normalized_heuristic = heuristic / np.max(heuristic)
    
    # Prune dominated solutions by setting their heuristics to zero
    dominance_mask = np.any(weight < 1e-8, axis=1)
    normalized_heuristic[dominance_mask] = 0
    
    return normalized_heuristic
```
