```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Normalize prize to prevent overflow
    normalized_prize = prize / np.sum(prize)
    
    # Calculate normalized density
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Balance density and sparsity to form a heuristic
    heuristic = density * (1 - sparsity)
    
    # Prune dominated solutions (items with zero or very low density)
    dominated_prune_threshold = np.percentile(density, 90)
    heuristic[density < dominated_prune_threshold] = 0
    
    # Ensure diversity by ensuring there is at least one non-zero weight
    zero_weight_index = np.sum(weight, axis=1) < 1e-8
    if np.any(zero_weight_index):
        total_non_zero_weight = np.sum(~zero_weight_index)
        min_non_zero_weight = np.min(weight[~zero_weight_index])
        heuristic[zero_weight_index] = min_non_zero_weight / total_non_zero_weight
    
    # Normalize heuristics to ensure they sum to one
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
