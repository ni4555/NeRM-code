```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items by keeping only the maximum density
    max_density = np.max(density)
    dominant_mask = density == max_density
    density[~dominant_mask] = 0
    
    # Normalize sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce randomness by adding noise to the heuristic
    random_noise = np.random.rand(len(density))
    
    # Create a heuristic that balances high density, low sparsity, and randomness
    heuristic = (density + (1 - sparsity) - random_noise) / 3
    
    # Introduce diversity by keeping some non-zero weight items even if they are less dense
    heuristic[weight_sum < 1e-8] = 0
    
    # Normalize the heuristic
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    else:
        heuristic = np.ones_like(heuristic)
    
    return heuristic
```
