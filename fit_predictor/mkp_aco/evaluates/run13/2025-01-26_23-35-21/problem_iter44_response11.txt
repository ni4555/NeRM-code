```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate diversity factor
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create heuristic value
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Combine heuristic value with diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Introduce balance heuristic
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Use a weighted sum of heuristics to balance exploration and exploitation
    exploration_balance = np.random.beta(1, 1)  # Beta distribution for balance between exploration and exploitation
    combined_heuristic = exploration_balance * heuristic + (1 - exploration_balance) * balance_heuristic
    
    # Normalize combined heuristic to the range [0, 1]
    combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Prune low-quality heuristics by setting values below a percentile threshold to zero
    low_quality_threshold = np.percentile(combined_heuristic, 5)
    combined_heuristic[combined_heuristic < low_quality_threshold] = 0
    
    # Ensure the sum of heuristics is one
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    # Introduce a penalty for items with negligible weight
    negligible_weight_penalty = np.where(weight_sum < 1e-6, -1, 0)
    combined_heuristic += negligible_weight_penalty
    
    return combined_heuristic
```
