```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize for better comparison
    prize_normalized = prize / np.max(prize)
    
    # Normalize the weights for better comparison
    weight_normalized = weight / np.max(weight, axis=1, keepdims=True)
    
    # Calculate the normalized density
    density = prize_normalized / (np.sum(weight_normalized, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight_normalized, axis=1) / (np.max(weight_normalized, axis=1) + 1e-8)
    
    # Calculate the sum of normalized weights
    weight_sum = np.sum(weight_normalized, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = (density + 1e-8) / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Return the normalized heuristic values
    return normalized_heuristic
```
