```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize values to ensure comparability
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize) + 1e-8)
    
    # Normalize weights to avoid dominance
    normalized_weight = weight / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate a heuristic based on the ratio of prize to weight
    heuristic_ratio = normalized_prize / normalized_weight
    
    # Introduce randomness to explore different solutions
    random_factor = np.random.rand(len(prize))
    
    # Adjust randomness based on the sparsity of the item
    sparsity_factor = 1 / (1 + np.sum(weight, axis=1))
    
    # Combine the heuristic ratio with randomness and sparsity
    combined_heuristic = heuristic_ratio * random_factor * sparsity_factor
    
    # Normalize the combined heuristic to maintain a bounded scale
    normalized_combined_heuristic = combined_heuristic / np.max(combined_heuristic + 1e-8)
    
    # Apply a threshold to reduce the impact of less promising items
    thresholded_heuristic = np.where(combined_heuristic > 0.5, combined_heuristic, 0)
    
    return thresholded_heuristic
```
