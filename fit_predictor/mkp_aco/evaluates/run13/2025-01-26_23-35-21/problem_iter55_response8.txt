```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity based on the average weight
    sparsity = np.sum(weight, axis=1) / (np.mean(weight, axis=1) + 1e-8)
    
    # Calculate the diversity factor based on the variance of the density
    diversity_factor = density / (np.var(density) + 1e-8)
    
    # Combine the diversity factor with the density
    combined_density = density * diversity_factor
    
    # Normalize the combined density
    normalized_combined_density = combined_density / (np.max(combined_density) + 1e-8)
    
    # Introduce a dominance filter to remove dominated items
    dominance_filter = np.max(weight, axis=1) - np.sum(weight, axis=1)
    dominated_indices = np.where(dominance_filter <= 0)[0]
    normalized_combined_density[dominated_indices] = 0
    
    # Introduce a small perturbation to encourage exploration
    perturbation = np.random.normal(0, 1e-4, size=prize.shape)
    
    # Create a final heuristic by adding perturbation to the normalized combined density
    heuristic = normalized_combined_density + perturbation
    
    # Ensure the heuristics are non-negative
    heuristic = np.maximum(heuristic, 0)
    
    return heuristic
```
