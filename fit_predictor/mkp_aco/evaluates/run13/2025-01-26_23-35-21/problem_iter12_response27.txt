```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the sum of weights for each item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity by normalizing the sum of weights by the maximum weight
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Integrate a diversity metric that is the sum of weights, penalizing items with a low diversity
    diversity = np.sum(weight, axis=1)
    diversity_penalty = np.maximum(0, 1 - diversity / np.mean(weight, axis=1))
    
    # Calculate a combined heuristic value using weighted sum of the metrics
    heuristic_value = (0.6 * density) + (0.3 * sparsity) + (0.1 * diversity) + (0.0 * diversity_penalty)
    
    # Normalize the heuristic values to ensure they are in the range [0, 1]
    max_value = np.max(heuristic_value)
    if max_value > 0:
        normalized_heuristic = heuristic_value / max_value
    else:
        normalized_heuristic = np.zeros_like(heuristic_value)
    
    # Add a penalty for items with zero weight
    zero_weight_penalty = np.where(np.sum(weight, axis=1) == 0, -np.inf, 0)
    normalized_heuristic += zero_weight_penalty
    
    # Apply a logarithmic transformation to avoid dominance of high values
    transformed_heuristics = np.log(1 + normalized_heuristic)
    
    # Return the transformed heuristics
    return transformed_heuristics
```
