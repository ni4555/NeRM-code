```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an empty array to store heuristics
    heuristics = np.zeros_like(prize)

    # Normalize prize and weight for each item
    normalized_prize = prize / np.sum(prize)
    normalized_weight = weight / np.sum(weight, axis=1)[:, None]

    # Calculate density as the ratio of prize to the sum of weights
    density = normalized_prize / np.sum(normalized_weight, axis=1)

    # Identify dominated items (those with lower density and higher weight sum)
    dominated_indices = np.argsort(density)[:-np.sum(np.cumsum(~np.isnan(density)) >= 1)]
    heuristics[dominated_indices] = 0

    # Introduce randomness for diversity
    random_factor = np.random.rand(*prize.shape) / (np.max(prize) + 1e-8)

    # Calculate heuristic by balancing density, randomness, and the ratio of prize to weight sum
    heuristics = density + random_factor - (np.sum(normalized_weight, axis=1) / prize) * (np.sum(normalized_weight, axis=1) + 1e-8)

    # Normalize heuristics to maintain scale consistency
    heuristics /= np.max(heuristics + 1e-8)

    return heuristics
```
