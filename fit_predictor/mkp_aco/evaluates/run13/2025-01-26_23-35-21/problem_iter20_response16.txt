```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    weight_sum = np.sum(weight, axis=1)
    weight_diversity = np.std(weight, axis=1)
    
    # Blending metrics with appropriate weights
    heuristic_value = 0.7 * density / (1 - sparsity) - 0.2 * weight_sum + 0.1 * weight_diversity
    
    # Applying penalties for items with negligible weight and low-value items
    penalty = np.where(weight_sum < 1e-8, -prize.max(), 0)
    heuristic_value += penalty
    
    # Normalizing the heuristic values
    max_heuristic = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic + 1e-8)
    
    # Applying a sparsity penalty to avoid sparsity in the heuristic values
    sparsity_threshold = 0.2
    sparsity_penalty = np.where(normalized_heuristic < sparsity_threshold, -np.inf, 0)
    normalized_heuristic += sparsity_penalty
    
    # Smoothing the heuristic values to reduce the impact of outliers
    smoothed_heuristic = np.clip(normalized_heuristic, 0, 1)
    
    # Applying a diversity factor based on the standard deviation of the smoothed heuristics
    diversity_factor = np.std(smoothed_heuristic)
    adjusted_heuristic = smoothed_heuristic * diversity_factor
    
    # Ensuring non-negative values for the adjusted heuristics
    final_heuristic = np.clip(adjusted_heuristic, 0, 1)
    
    return final_heuristic
```
