```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Normalize the utility to ensure values are comparable
    utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    # Calculate the sparsity of the weights (the more sparse, the more promising)
    sparsity = np.sum(weight == 0, axis=1)
    # Normalize the sparsity to ensure values are comparable
    sparsity = (np.max(sparsity) - sparsity) / np.max(sparsity)
    # Combine utility and sparsity, weighted by their respective importance
    combined_heuristics = utility * 0.6 + sparsity * 0.4
    # Apply a non-linear transformation to penalize lower heuristics
    heuristics = 1 / (1 + np.exp(-combined_heuristics))
    # Set the minimum value of heuristics to 0 to ensure sparsity
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
