```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce randomness for diversity and escape local optima
    randomness = np.random.rand(weight.shape[0])
    
    # Combine the metrics with randomness to create heuristic values
    heuristic = density * (1 - sparsity) - weight_sum + randomness
    
    # Normalize by the maximum heuristic value to prevent dominance
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce diversity factors for each item
    diversity_factors = 1 / (density + sparsity + 1e-8)
    
    # Balance the combined heuristic with the diversity factors
    final_heuristic = normalized_heuristic * diversity_factors
    
    # Set zero weights to a small value to maintain diversity
    final_heuristic[weight_sum < 1e-8] = 1e-8
    
    return final_heuristic
```
