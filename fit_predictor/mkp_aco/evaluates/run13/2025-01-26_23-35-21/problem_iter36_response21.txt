```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize the sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the average density
    average_density = np.mean(density)
    
    # Calculate the diversity factor based on the deviation from the average density
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a heuristic value based on the product of density and diversity factor
    heuristic_value_density = density * diversity_factor
    
    # Calculate a sparsity-based heuristic value
    heuristic_value_sparsity = 1 - sparsity
    
    # Calculate a balance heuristic value that considers the ratio of high density to low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * heuristic_value_density + 0.3 * heuristic_value_sparsity + 0.2 * balance_heuristic
    
    # Normalize the heuristic values to maintain a consistent scale
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_mask = np.sum(weight, axis=1) < 1e-8
    normalized_heuristic[zero_weight_mask] = 1e-8
    
    return normalized_heuristic
```
