```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized diversity in weights
    diversity = np.exp(-np.sum(weight**2, axis=1) / (np.max(weight, axis=1) + 1e-8))
    
    # Integrate sparsity into the heuristic
    sparsity = 1 - (np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1e-8))
    
    # Use a combination of density, diversity, and sparsity to create a heuristic
    heuristic_value = density * diversity * (1 - sparsity)
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Apply a sparsity threshold to prevent overfitting
    sparsity_threshold = np.min(normalized_heuristic)
    normalized_heuristic[normalized_heuristic < sparsity_threshold] = 0
    
    return normalized_heuristic
```
