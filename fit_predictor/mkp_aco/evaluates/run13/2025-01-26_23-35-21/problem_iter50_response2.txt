```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight
    normalized_prize = prize / np.sum(prize)
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate density
    density = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Calculate sparsity for each dimension
    sparsity = np.sum(normalized_weight, axis=1) / np.max(normalized_weight, axis=1)
    
    # Introduce diversity by considering the average density
    average_density = np.mean(density)
    diversity = density / (average_density + 1e-8)
    
    # Introduce balance by considering the ratio of prize to the sum of weights
    balance = normalized_prize / np.sum(weight, axis=1)
    
    # Combine metrics with a weighted sum
    combined_heuristic = 0.5 * density * (1 - sparsity) + 0.25 * diversity + 0.25 * balance
    
    # Normalize heuristics to ensure their sum equals 1
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    # Prune dominated solutions by setting their heuristic to zero
    for i in range(weight.shape[0]):
        for j in range(i + 1, weight.shape[0]):
            if np.all(weight[i] <= weight[j]) and np.all(prize[i] <= prize[j]):
                combined_heuristic[i] = 0
    
    # Introduce randomness to encourage exploration of different solutions
    randomness = np.random.rand(n)
    combined_heuristic *= randomness / np.max(randomness)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_index = np.sum(weight, axis=1) < 1e-8
    combined_heuristic[zero_weight_index] = 1e-8
    
    return combined_heuristic
```
