```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize value per unit weight
    prize_per_weight = prize / np.sum(weight, axis=1)
    
    # Calculate diversity based on the ratio of each item's prize per weight to the average prize per weight
    diversity = prize_per_weight / np.mean(prize_per_weight)
    
    # Calculate sparsity as the sum of weights per item divided by the maximum weight per dimension
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate adaptability factor considering the problem scale
    adaptability_factor = np.sum(weight, axis=1) / (m * n)
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)
    
    # Combine all factors using a weighted sum, ensuring each factor contributes with a specific emphasis
    heuristic = 0.6 * diversity + 0.3 * sparsity + 0.1 * adaptability_factor + 0.1 * random_factor
    
    # Normalize the heuristic to ensure all values are between 0 and 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
