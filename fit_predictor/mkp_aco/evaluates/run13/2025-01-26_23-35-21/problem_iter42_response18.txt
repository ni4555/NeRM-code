```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate the normalized density for each item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Create a heuristic value by blending density and sparsity
    heuristic_value = (1 - sparsity) * density
    
    # Introduce diversity by considering the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Combine the heuristic value with the diversity factor
    combined_heuristic = heuristic_value * diversity_factor
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)
    combined_heuristic *= random_factor
    
    # Set zero weight items to a minimum value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
