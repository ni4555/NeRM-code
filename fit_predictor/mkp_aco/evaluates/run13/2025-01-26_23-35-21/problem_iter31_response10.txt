```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic value by combining the density and sparsity
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a randomness factor
    random_factor = np.random.rand(len(prize))
    
    # Normalize by the maximum heuristic value to ensure non-negative values
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce a diversity factor based on the average sparsity
    average_sparsity = np.mean(sparsity)
    diversity_factor = (sparsity - average_sparsity) / (average_sparsity + 1e-8)
    
    # Combine the heuristic with the diversity and randomness factors
    combined_heuristic = normalized_heuristic * diversity_factor + random_factor
    
    # Penalize outliers by clamping the values
    combined_heuristic = np.clip(combined_heuristic, 0, 1)
    
    return combined_heuristic
```
