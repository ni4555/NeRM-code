```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a random seed for reproducibility
    np.random.seed(42)

    # Prune dominated items by removing items with lower prize compared to others with lower weight
    for i in range(n):
        dominated_indices = np.where((prize < prize[i]) & (weight[:, 0] <= weight[i, 0]))[0]
        for dominated_index in dominated_indices:
            prize[dominated_index] = 0

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate a diversity score by introducing randomness
    diversity_score = np.random.rand(n)
    
    # Introduce a sparsity heuristic
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Combine density and sparsity, balancing the exploration-exploitation
    combined_density_sparsity = 0.5 * density + 0.5 * (1 - sparsity)
    
    # Create a final heuristic by blending metrics
    heuristic = combined_density_sparsity * diversity_score
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a penalty for items that are close to the sparsity threshold
    penalty_for_sparsity = np.where(sparsity < 0.5, (0.5 - sparsity) * 2, 0)
    
    # Final heuristic is the sum of the normalized heuristic and penalty for sparsity
    final_heuristic = normalized_heuristic + penalty_for_sparsity
    
    # Set zero weights to a small value to maintain diversity
    final_heuristic[weight_sum < 1e-8] = 1e-8
    
    return final_heuristic
```
