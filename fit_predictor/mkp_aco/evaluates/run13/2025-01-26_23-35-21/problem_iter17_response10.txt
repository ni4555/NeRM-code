```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize prize values to consider their magnitude
    normalized_prize = prize / np.sum(prize) * 100

    # Normalize weight by dividing with the max weight per dimension to prevent bias towards heavy items
    normalized_weight = weight / np.max(weight, axis=1, keepdims=True)
    
    # Calculate the potential reward to weight ratio
    potential = normalized_prize / (np.sum(normalized_weight, axis=1) + 1e-8)
    
    # Introduce a diversity factor based on the standard deviation of the potential rewards
    diversity_factor = np.std(potential)
    
    # Create a heuristic that penalizes high sparsity
    sparsity_penalty = np.sum(normalized_weight, axis=1)
    
    # Combine the potential reward and sparsity penalty
    heuristic = potential - sparsity_penalty + diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Maintain diversity by ensuring there's a minimum heuristic value for items with zero weight
    min_value = 1e-8
    normalized_heuristic[sparsity_penalty < min_value] = min_value
    
    return normalized_heuristic
```
