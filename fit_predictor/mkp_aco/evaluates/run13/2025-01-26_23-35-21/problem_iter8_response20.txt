```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the utility ratio (prize/total weight)
    utility_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity score as the inverse of the average weight
    average_weight = np.mean(weight, axis=1)
    sparsity_score = 1 / average_weight
    
    # Calculate diversity score using the standard deviation of weights
    diversity_score = 1 / (1 + np.std(weight, axis=1))
    
    # Combine utility, sparsity, and diversity into a single heuristic value
    combined_heuristic = utility_ratio * 0.4 + sparsity_score * 0.3 + diversity_score * 0.3
    
    # Normalize the combined heuristic so that it sums to 1
    combined_heuristic /= np.sum(combined_heuristic)
    
    # Apply a threshold to remove less promising items based on sparsity
    threshold = np.mean(combined_heuristic) * 0.1
    heuristics = np.where(combined_heuristic < threshold, 0, combined_heuristic)
    
    # Ensure that the heuristic values sum to 1 after applying the threshold
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
