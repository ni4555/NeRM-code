```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1)
    # Normalize sparsity by the maximum sparsity
    normalized_sparsity = sparsity / np.max(sparsity)

    # Calculate the diversity of the weight distribution
    diversity = np.mean(normalized_sparsity)

    # Calculate the average prize-to-weight ratio across dimensions
    average_prize_to_weight_ratio = np.sum(prize) / np.sum(weight)

    # Calculate the weighted score for each item
    # Here we prioritize high normalized prize, diversity, and reasonable average prize-to-weight ratio
    heuristics = normalized_prize * diversity * average_prize_to_weight_ratio

    # Apply a penalty to items that have a very low prize-to-weight ratio
    penalty_factor = np.where(average_prize_to_weight_ratio > 1.5, 1, 0.5)
    heuristics *= penalty_factor

    return heuristics
```
