```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Initialize the heuristic array with zeros
    heuristic = np.zeros_like(prize)

    # Loop through each item to calculate its heuristic value
    for i in range(prize.shape[0]):
        # Calculate the item's relative density
        density = prize[i] / (np.sum(weight[i]) + 1e-8)
        
        # Calculate the sum of the item's weights in all dimensions
        weight_sum = np.sum(weight[i])
        
        # Calculate the heuristic value considering density and sparsity
        heuristic_value = density / weight_sum
        
        # Introduce a penalty for high sparsity
        sparsity_penalty = 1 / (np.sum(weight[i]) + 1e-8)
        
        # Calculate the heuristic by combining density, sparsity, and sparsity penalty
        heuristic[i] = heuristic_value * (1 - sparsity_penalty)
        
        # Normalize the heuristic by the maximum heuristic value found so far
        max_heuristic = np.max(heuristic)
        if max_heuristic > 0:
            heuristic[i] /= max_heuristic
    
    # Introduce a diversity factor to avoid selecting the same items
    diversity_factor = np.random.random(size=prize.shape[0])
    
    # Adjust the heuristic to incorporate diversity
    heuristic *= diversity_factor / np.sum(diversity_factor)
    
    # Set items with zero weight to a minimum heuristic value
    zero_weight_heuristic = 1e-8
    heuristic[weight_sum == 0] = zero_weight_heuristic
    
    return heuristic
```
