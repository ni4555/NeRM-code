```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize to emphasize items with higher values
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Normalize the weight to emphasize items with lower weights
    max_weight = np.max(np.sum(weight, axis=1))
    normalized_weight = np.sum(weight, axis=1) / max_weight

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / (np.sum(weight**2, axis=1) + 1e-8)

    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1)

    # Combine metrics using a weighted sum that balances value, density, and diversity
    heuristic = (0.6 * normalized_prize +
                 0.2 * value_to_weight_ratio +
                 0.1 * (1 - normalized_weight) +
                 0.1 * sparsity)

    # Apply a diversity factor that considers items with varying sparsity
    diversity_factor = (sparsity / np.mean(sparsity) + 1e-8)

    # Adjust the heuristic to include diversity
    heuristic *= diversity_factor

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    # Introduce randomness to maintain diversity and avoid local optima
    random_factor = np.random.rand(n)
    normalized_heuristic += 0.1 * random_factor

    # Normalize the heuristic values after adding randomness
    max_heuristic = np.max(normalized_heuristic)
    normalized_heuristic = normalized_heuristic / (max_heuristic + 1e-8)

    return normalized_heuristic
```
