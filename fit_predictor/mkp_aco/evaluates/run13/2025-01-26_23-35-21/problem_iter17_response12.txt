```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize prize values to consider their magnitude
    normalized_prize = prize / np.sum(prize) * 100

    # Normalize weight by their max in each dimension
    normalized_weight = weight / np.max(weight, axis=1)[:, np.newaxis]
    
    # Create a heuristic that penalizes items with high weight
    weight_penalty = 1 / (normalized_weight + 1e-8)
    
    # Calculate diversity by using the standard deviation of normalized prize
    diversity = np.std(normalized_prize)
    
    # Combine prize value, penalty, and diversity to create heuristic
    heuristic_value = normalized_prize * weight_penalty * diversity
    
    # Normalize heuristic values
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[np.sum(weight, axis=1) < 1e-8] = 1e-8
    
    return normalized_heuristic
```
