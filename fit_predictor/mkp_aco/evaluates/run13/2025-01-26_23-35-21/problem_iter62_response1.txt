```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness for exploration
    randomness = np.random.rand(n)
    
    # Create a balance metric between density and sparsity
    balance_metric = (density - 1) / (np.abs(density - 1) + 1e-8)
    
    # Integrate balance metric into heuristic
    heuristic = density + balance_metric + randomness
    
    # Normalize the heuristic values to ensure they sum to 1
    heuristic /= np.sum(heuristic)
    
    # Prune dominated items by setting their heuristic value to zero
    for i in range(n):
        for j in range(n):
            if i != j and np.all(heuristic[i] <= heuristic[j]):
                heuristic[i] = 0
    
    return heuristic
```
