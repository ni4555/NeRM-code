```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)

    # Normalize the diversity based on the inverse variance of density
    variance_density = np.var(density)
    diversity_factor = 1 / (variance_density + 1e-8)

    # Calculate the sparsity as the sum of each item's weight divided by the maximum weight in any dimension
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Introduce a balance factor between diversity and sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)

    # Incorporate a random factor to avoid local optima
    random_factor = np.random.rand(n)

    # Calculate a heuristic score for each item based on density, diversity, and randomness
    heuristic = density * diversity_factor * balance_factor + random_factor

    # Normalize the heuristic scores to sum to 1
    heuristic /= np.sum(heuristic)

    # Adjust heuristic for items with zero weight
    zero_weight_mask = np.sum(weight, axis=1) < 1e-8
    heuristic[zero_weight_mask] = 1e-8 / (n - np.sum(~zero_weight_mask))

    return heuristic
```
