```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics array with a default value
    heuristics = np.ones_like(prize) * 0.5
    
    # Normalize the prize and weight for each dimension
    normalized_prize = prize / np.max(prize)
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate a heuristic based on the ratio of prize to weight
    ratio_heuristic = normalized_prize / normalized_weight
    
    # Calculate a heuristic based on the sparsity of the item
    sparsity_heuristic = 1 - np.sum(weight, axis=1) / np.sum(weight)
    
    # Introduce randomness to avoid getting stuck in local optima
    random_factor = np.random.rand(*weight.shape)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * ratio_heuristic + 0.2 * sparsity_heuristic + 0.1 * random_factor
    
    # Normalize the combined heuristics
    max_heuristic = np.max(combined_heuristic)
    if max_heuristic > 0:
        combined_heuristic /= max_heuristic
    
    # Prune dominated items by setting their heuristic to zero
    dominated_indices = np.argsort(combined_heuristic)[::-1]
    for i in range(len(dominated_indices) - 1):
        if combined_heuristic[dominated_indices[i]] > combined_heuristic[dominated_indices[i + 1]]:
            combined_heuristic[dominated_indices[i + 1]] = 0
    
    return combined_heuristic
```
