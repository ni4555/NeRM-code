```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n, m = prize.shape[0], weight.shape[1]
    
    # Initialize heuristics array with zeros
    heuristic = np.zeros(prize.shape)
    
    # Calculate normalized density for each item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce randomness with a bias towards higher density and higher sparsity
    random_factor = np.random.rand(n)
    random_factor = random_factor * (1 - (density + sparsity)) + (density + sparsity)
    
    # Calculate diversity factor based on the standard deviation of density
    diversity_factor = 1 / (1 + np.log(1 + np.std(density)))
    
    # Calculate heuristic value
    heuristic_value = density * (1 - sparsity) * random_factor * diversity_factor
    
    # Normalize the heuristic to maintain a bounded range and ensure sum is 1
    heuristic_value /= np.sum(heuristic_value)
    
    # Assign heuristics to zero weight items
    zero_weight_items = np.where(np.sum(weight, axis=1) < 1e-8)
    heuristic[zero_weight_items] = 1e-8
    
    return heuristic
```
