```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate weight sum
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce randomness for diversity
    randomness = np.random.rand(weight.shape[0])
    
    # Calculate the combined heuristic with randomness
    heuristic = density * (1 - sparsity) - weight_sum + randomness
    
    # Normalize the heuristic
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Adjust the heuristic for diversity by reducing the weight of items with low prize
    diversity_adjustment = prize / np.sum(prize)
    adjusted_heuristic = normalized_heuristic * diversity_adjustment
    
    # Set zero weights to a small value to maintain diversity
    adjusted_heuristic[weight_sum < 1e-8] = 1e-8
    
    return adjusted_heuristic
```
