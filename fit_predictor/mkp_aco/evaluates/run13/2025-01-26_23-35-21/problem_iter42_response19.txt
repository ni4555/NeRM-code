```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized prize per unit weight for each item
    density = prize / np.sum(weight, axis=1)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.maximum(np.sum(weight, axis=1), 1e-8))

    # Introduce a penalty for items that do not contribute to the sparsity (i.e., all dimensions are at capacity)
    sparsity_penalty = (1 - sparsity) * 0.5

    # Introduce a penalty for items that exceed the weight constraint of 1
    weight_penalty = np.where(np.sum(weight, axis=1) > 1, np.sum(weight, axis=1) - 1, 0)

    # Combine the positive attributes (density) and negative attributes (sparsity penalty and weight penalty)
    heuristic_value = density - sparsity_penalty + weight_penalty

    # Normalize the heuristic values to ensure they are non-negative
    heuristic_value = np.maximum(heuristic_value, 0)

    # Introduce a diversity factor based on the variance of the density
    diversity_factor = density / np.var(density)

    # Normalize the heuristic by the sum of the diversity factor to ensure they sum to 1
    final_heuristic = heuristic_value * diversity_factor / np.sum(heuristic_value * diversity_factor)

    return final_heuristic
```
