```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate diversity measures
    diversity_std = np.std(density)
    diversity_var = np.var(density)
    
    # Calculate diversity factor based on variance
    diversity_factor = diversity_var / (diversity_std + 1e-8)
    
    # Calculate a balance measure
    balance_measure = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine metrics using a weighted sum
    combined_metrics = 0.5 * density + 0.3 * diversity_factor + 0.2 * balance_measure
    
    # Normalize the combined metrics to create a range for comparison
    normalized_combined_metrics = combined_metrics / (np.sum(combined_metrics) + 1e-8)
    
    # Ensure that items with very low weight are not ignored by setting their normalized value
    # to a small but non-zero value to maintain diversity
    normalized_combined_metrics[np.sum(weight, axis=1) < 1e-8] = 1e-8
    
    # Adjust the heuristic values to ensure a balance between exploration and exploitation
    # by using a small penalty for items that are too similar
    similarity_penalty = np.sum(normalized_combined_metrics * np.roll(normalized_combined_metrics, 1), axis=1)
    normalized_combined_metrics -= 0.01 * similarity_penalty
    
    # Normalize again to ensure values are in a useful range
    normalized_combined_metrics /= np.sum(normalized_combined_metrics)
    
    return normalized_combined_metrics
```
