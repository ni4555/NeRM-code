```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items (those with lower density and sparsity)
    dominance_mask = (density < sparsity) & (sparsity < 1)
    density[dominance_mask] = 0
    
    # Introduce randomness for exploration
    randomness = np.random.rand(len(prize))
    
    # Normalize by the maximum heuristic value to ensure consistency
    normalized_density = density / (np.max(density) + 1e-8)
    
    # Combine density, sparsity, and randomness to create a heuristic
    heuristic = normalized_density * (1 - sparsity) + randomness
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * heuristic + 0.5 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
