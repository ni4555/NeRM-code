```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by the maximum prize to introduce a balance factor
    normalized_prize = prize / np.max(prize)
    
    # Calculate a diversity score based on the range of normalized prize values
    diversity_score = np.abs(np.diff(normalized_prize))
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Define a balance factor as the average of sparsity and the reciprocal of the prize
    balance_factor = (sparsity + 1 / normalized_prize) / 2
    
    # Define a heuristic that combines diversity and balance, with a slight preference for balance
    heuristic = diversity_score * 0.5 + balance_factor * 0.5
    
    # Normalize the heuristic to ensure all values are between 0 and 1
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    normalized_heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Penalize items with extremely high sparsity or balance to avoid dominance
    penalty = (sparsity > 0.8) | (balance_factor > 1.2)
    normalized_heuristic[penalty] = 0.1
    
    return normalized_heuristic
```
