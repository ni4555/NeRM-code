```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize the density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the average density
    average_density = np.mean(density)
    
    # Promote diversity by considering the variance of density
    variance_density = np.var(density)
    
    # Introduce a balance factor to avoid items that are too dense or too sparse
    balance_factor = (density - average_density) / (np.abs(density - average_density) + 1e-8)
    
    # Integrate multiple metrics
    heuristic_value = (density * (1 - sparsity) - np.sum(weight, axis=1)) / (np.max(density * (1 - sparsity) - np.sum(weight, axis=1)) + 1e-8)
    
    # Combine heuristic value with diversity and balance factors
    heuristic = heuristic_value * (1 - variance_density) + variance_density * balance_factor
    
    # Normalize the heuristics to maintain a scale
    normalized_heuristic = heuristic / (np.sum(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
