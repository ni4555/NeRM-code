```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize based on the maximum prize value
    normalized_prize = prize / np.max(prize) + 1e-8

    # Calculate normalized density considering the maximum weight
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Identify dominated items using a percentile threshold for density
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Combine metrics with a weighted sum
    heuristic = 0.5 * density + 0.3 * sparsity + 0.2 * value_to_weight_ratio

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Final heuristic value
    combined_heuristic = heuristic + random_factor

    # Normalize the heuristic values
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.sum(normalized_heuristic) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
