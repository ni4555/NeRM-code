```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a list to store individual heuristics components
    heuristics_components = []

    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    heuristics_components.append(density)

    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    heuristics_components.append(1 - sparsity)

    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    heuristics_components.append(-weight_sum)

    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(len(prize))
    heuristics_components.append(random_factor)

    # Blend individual heuristics components
    blended_heuristic = np.mean(heuristics_components, axis=0)

    # Prune dominated solutions by setting lower heuristics to zero
    dominated_mask = np.any(blended_heuristic < np.min(blended_heuristic), axis=1)
    blended_heuristic[dominated_mask] = 0

    # Normalize the heuristics to maintain a consistent scale
    normalized_heuristic = blended_heuristic / np.max(blended_heuristic)

    # Limit randomness to avoid overly random solutions
    normalized_heuristic = np.clip(normalized_heuristic, 0.1, 1)

    return normalized_heuristic
```
