```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize values
    normalized_prize = prize / np.sum(prize)
    
    # Normalize the weight to sum up to 1 per item
    normalized_weight = weight / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate density by the ratio of normalized prize to normalized weight
    density = normalized_prize / (np.sum(normalized_weight, axis=1) + 1e-8)
    
    # Calculate sparsity as the inverse of the mean weight per item
    sparsity = 1 / (np.mean(normalized_weight, axis=1) + 1e-8)
    
    # Integrate weight sum and average weight
    weight_sum = np.sum(normalized_weight, axis=1)
    weight_average = np.mean(normalized_weight, axis=1)
    
    # Calculate heuristic value
    heuristic_value = density * sparsity - weight_sum - weight_average
    
    # Calculate diversity factor using the variance of weights
    diversity_factor = 1 / (1 + np.var(normalized_weight, axis=1))
    
    # Create final heuristic value by combining heuristic value with diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Normalize the heuristic by the standard deviation of the heuristic values
    standard_deviation = np.std(heuristic)
    normalized_heuristic = heuristic / (standard_deviation + 1e-8)
    
    # Ensure items with zero weight have a low heuristic to avoid them
    normalized_heuristic[np.sum(weight, axis=1) == 0] = 0
    
    # Cap the heuristics at a reasonable upper bound to maintain consistency
    normalized_heuristic = np.clip(normalized_heuristic, 0, 1)
    
    return normalized_heuristic
```
