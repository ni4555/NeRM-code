```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics with a large negative value to encourage selection of better items
    heuristic = -np.inf * np.ones(weight.shape[0])
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity and dominated items
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    dominated_items = np.where(sparsity < 0.1)[0]
    
    # Prune dominated items
    heuristic[dominated_items] = 0
    
    # Introduce randomness to explore diverse solutions
    random_factor = np.random.rand(weight.shape[0])
    
    # Calculate a balance metric between density and sparsity
    balance_metric = (density + sparsity) / 2
    
    # Integrate multiple metrics
    for i in range(weight.shape[0]):
        if weight[i, 0] > 0:  # Ensure we're not considering dominated items
            # Calculate heuristic value based on normalized density and balance metric
            heuristic_value = density[i] * balance_metric[i]
            # Apply randomness
            heuristic[i] = heuristic_value * random_factor[i]
    
    # Normalize heuristics
    max_heuristic = np.max(heuristic)
    heuristic[heuristic < 0] = 0
    heuristic = heuristic / max_heuristic
    
    return heuristic
```
