```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    heuristic_matrix = np.zeros_like(prize)
    
    for i in range(prize.shape[0]):
        density = prize[i] / (np.sum(weight[i]) + 1e-8)
        sparsity = np.sum(weight[i]) / (np.max(weight[i]) + 1e-8)
        weight_sum = np.sum(weight[i])
        
        # Calculate balance factor to ensure both density and sparsity are considered
        balance_factor = 0.5 * (density + sparsity)
        
        # Adjust the density based on sparsity and weight sum
        adjusted_density = density * (1 - sparsity) / (weight_sum + 1e-8)
        
        # Use a weighted sum to combine the balance factor and adjusted density
        heuristic_value = balance_factor * adjusted_density
        
        # Introduce a diversity factor based on density to encourage different item types
        diversity_factor = density / (np.max(density) + 1e-8)
        
        # Combine the heuristic value with the diversity factor
        heuristic_value *= diversity_factor
        
        # Update the heuristics matrix with the computed heuristic
        heuristic_matrix[i] = heuristic_value
    
    # Normalize the heuristics to maintain a bounded range and ensure sum is 1
    heuristic_matrix /= np.sum(heuristic_matrix)
    
    return heuristic_matrix
```
