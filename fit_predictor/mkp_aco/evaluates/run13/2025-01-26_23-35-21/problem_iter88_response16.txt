```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Initialize heuristics with a base value
    heuristic = np.zeros(n)

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Combine density and sparsity with a weight to balance selection criteria
    # Adjusting the weights for density and sparsity based on the problem structure
    combined_score = (density * 0.6) + (sparsity * 0.4)

    # Add a small random factor to encourage diversity
    random_factor = np.random.rand(n)
    heuristic = combined_score + random_factor

    # Normalize heuristics to ensure a consistent scale
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    if max_heuristic > min_heuristic:
        heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        heuristic = heuristic - min_heuristic  # In case max equals min, just shift

    return heuristic
```
