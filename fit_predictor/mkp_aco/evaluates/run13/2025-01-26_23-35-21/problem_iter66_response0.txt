```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate the density of each item
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Calculate the dominance of each item by comparing density with the 95th percentile
    dominance = np.where(density >= np.percentile(density, 95), density, 0)

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)

    # Calculate the overall quality of each item by considering multiple factors
    quality = (0.6 * dominance +
               0.2 * density +
               0.1 * sparsity +
               0.1 * random_factor)

    # Normalize the quality scores to ensure all values are between 0 and 1
    quality /= np.sum(quality)

    return quality
```
