```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Identify dominated items (those with lower prize per unit weight)
    dominated_indices = np.where(np.any(density < sparsity[:, np.newaxis], axis=1))[0]
    non_dominated_items = np.setdiff1d(np.arange(weight.shape[0]), dominated_indices)
    
    # Calculate the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce randomness to explore less probable items
    random_factor = np.random.rand(weight.shape[0])
    
    # Combine factors to create the heuristic
    heuristic = density * (1 - sparsity) + balance_heuristic + random_factor
    
    # Normalize the heuristic
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    normalized_heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Ensure that dominated items have a heuristic of zero
    normalized_heuristic[dominated_indices] = 0
    
    return normalized_heuristic
```
