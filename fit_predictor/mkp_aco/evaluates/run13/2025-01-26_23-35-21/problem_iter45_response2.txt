```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristic array
    heuristics = np.zeros_like(prize)
    
    # Iterate over each item
    for i in range(len(prize)):
        # Calculate the item's density and sparsity
        item_density = prize[i] / np.sum(weight[i])
        item_sparsity = np.sum(weight[i]) / np.max(weight[i])
        
        # Calculate the diversity factor
        average_density = np.mean(prize / np.sum(weight, axis=1))
        diversity_factor = item_density / (average_density + 1e-8)
        
        # Calculate the balance heuristic
        balance_heuristic = (item_density - item_sparsity) / (item_density + item_sparsity + 1e-8)
        
        # Calculate the heuristic for the current item
        heuristic_value = diversity_factor * balance_heuristic
        
        # Introduce randomness to avoid convergence to a local optimum
        heuristic_value *= np.random.rand()
        
        # Update the heuristic for the current item
        heuristics[i] = heuristic_value
    
    # Normalize the heuristic values
    max_heuristic = np.max(heuristics)
    if max_heuristic > 0:
        heuristics /= max_heuristic
    
    # Ensure the heuristics are non-negative
    heuristics[heuristics < 0] = 0
    
    return heuristics
```
