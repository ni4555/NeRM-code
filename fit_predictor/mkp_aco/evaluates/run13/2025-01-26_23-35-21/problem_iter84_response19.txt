```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight across all dimensions
    max_prize = np.max(prize)
    max_weight = np.max(np.sum(weight, axis=1))
    normalized_prize = prize / max_prize
    normalized_weight = np.sum(weight, axis=1) / max_weight

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / (np.sum(weight**2, axis=1) + 1e-8)

    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1)

    # Calculate the diversity metric
    diversity_metric = np.sum(weight, axis=1) / (np.sum(weight, axis=1) ** 2 + 1e-8)

    # Identify dominated items and penalize them
    dominated_mask = normalized_prize < np.percentile(normalized_prize, 90)
    dominated_penalty = 1 - np.percentile(normalized_prize, 90)

    # Combine metrics to form the heuristic
    heuristic = (0.5 * normalized_prize +
                 0.3 * value_to_weight_ratio +
                 0.1 * (1 - normalized_weight) +
                 0.1 * diversity_metric +
                 0.1 * dominated_penalty)

    # Introduce randomness to balance exploration and exploitation
    random_factor = np.random.rand(n)
    heuristic *= (1 - random_factor)

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    # Ensure non-negative heuristic values
    normalized_heuristic = np.maximum(normalized_heuristic, 0)

    return normalized_heuristic
```
