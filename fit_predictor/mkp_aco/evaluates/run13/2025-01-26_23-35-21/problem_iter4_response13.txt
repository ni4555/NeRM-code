```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize array to ensure all values are on the same scale
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the density of each item (prize/weight)
    density = prize_normalized / np.sum(weight, axis=1)
    
    # Calculate the sparsity based on a threshold for each item
    sparsity_threshold = 0.1  # Assuming a threshold of 10% for sparsity
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    
    # Calculate the diversity of each item (1 / sum of each dimension's weight)
    diversity = 1 / np.sum(weight, axis=1)
    
    # Use a weighted sum to combine the criteria, favoring higher density and diversity
    # The weights are chosen based on domain knowledge and empirical testing
    heuristics = (density * 0.6 + diversity * 0.3 + sparsity * 0.1)
    
    # Apply a logarithmic transformation to avoid simplistic thresholds and encourage diversity
    heuristics = np.log(1 + heuristics)
    
    # Cap the heuristics to prevent them from being too large or too small
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    
    return heuristics
```
