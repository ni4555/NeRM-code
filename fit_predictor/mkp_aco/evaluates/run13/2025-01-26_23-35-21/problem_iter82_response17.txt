```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate the density of each item
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Identify dominated items and set their density to zero
    dominance_threshold = np.percentile(density, 95)
    dominated_mask = density < dominance_threshold
    density[dominated_mask] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)

    # Combine heuristics using weighted factors, prioritizing dominance and density
    # Adjusting weights to give higher priority to dominance and moderate weight to sparsity
    heuristics = (0.6 * density +
                  0.3 * sparsity +
                  0.1 * random_factor)

    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)

    # Ensure non-negative heuristic values
    heuristics = np.maximum(heuristics, 0)

    return heuristics
```
