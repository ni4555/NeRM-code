```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize
    average_weight = np.mean(weight, axis=1)
    sparsity_threshold = average_weight * 0.1  # 10% of the average weight for sparsity
    # Apply a threshold-based heuristic that considers both prize and sparsity
    heuristics = normalized_prize * np.where(average_weight > sparsity_threshold, 1, 0)
    # Introduce diversity by adding a factor that considers the standard deviation
    std_dev = np.std(weight, axis=1)
    diversity_factor = 1 / (1 + std_dev)
    heuristics *= diversity_factor
    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    return heuristics
```
