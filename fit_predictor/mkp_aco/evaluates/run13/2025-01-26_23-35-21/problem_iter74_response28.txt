```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize based on the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1, keepdims=True) + 1e-8

    # Calculate normalized density
    density = normalized_prize / (np.max(weight, axis=1, keepdims=True) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1, keepdims=True) / np.max(weight, axis=1, keepdims=True) + 1e-8

    # Calculate value-to-weight ratio
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1, keepdims=True) + 1e-8)

    # Prune dominated items
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Combine heuristics with a focus on density, balance, and value-to-weight ratio
    heuristics = (0.6 * density +
                  0.2 * sparsity +
                  0.2 * value_to_weight_ratio)

    # Ensure diversity by adding randomness
    random_factor = np.random.rand(n) + 1e-8

    # Final heuristic with randomness added
    final_heuristic = heuristics + random_factor

    # Normalize the heuristic values
    final_heuristic /= np.sum(final_heuristic)

    # Ensure non-negative heuristic values
    final_heuristic = np.maximum(final_heuristic, 0)

    return final_heuristic
```
