```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Initialize the heuristic array with zeros
    heuristic = np.zeros(n)

    # For each item, calculate a heuristic score based on a combination of metrics
    for i in range(n):
        # Calculate the density for the current item
        item_density = prize[i] / np.sum(weight[i])

        # Calculate the sparsity for the current item
        item_sparsity = np.sum(weight[i]) / np.max(weight[i])

        # Introduce randomness to avoid local optima
        randomness = np.random.rand()

        # Combine the metrics and randomness into a heuristic score
        heuristic[i] = item_density * (1 - item_sparsity) + randomness

    # Normalize the heuristic scores to maintain scale consistency
    heuristic /= np.sum(heuristic)

    # Prune dominated solutions by setting their heuristic scores to zero
    dominated_indices = np.where(prize < np.sum(prize) / n)[0]
    heuristic[dominated_indices] = 0

    return heuristic
```
