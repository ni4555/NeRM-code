```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Calculate normalized density
    density = prize / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1, keepdims=True) / np.max(weight, axis=1, keepdims=True)
    
    # Create heuristic value
    heuristic_value = density * (1 - sparsity) - np.sum(weight, axis=1)
    
    # Introduce a balance between high density and low sparsity
    balance = density - sparsity
    
    # Incorporate a diversity factor based on the variance of density
    average_density = np.mean(density)
    diversity_factor = np.maximum(density, average_density)
    
    # Combine heuristics using a weighted sum, balancing exploitation and exploration
    exploration = np.random.rand(n)  # Randomness for exploration
    exploitation = (1 - exploration) * balance
    combined_heuristic = diversity_factor * exploration + exploitation
    
    # Normalize combined heuristic to the range [0, 1]
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    # Set very low values to zero to prune low-quality heuristics
    low_quality_threshold = np.percentile(combined_heuristic, 5)
    combined_heuristic[combined_heuristic < low_quality_threshold] = 0
    
    return combined_heuristic
```
