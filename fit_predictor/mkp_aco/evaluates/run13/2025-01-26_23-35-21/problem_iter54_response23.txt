```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate diversity factor based on the standard deviation of density
    diversity_factor = np.std(density)
    
    # Create a heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Adjust heuristic value to account for diversity
    adjusted_heuristic_value = heuristic_value / (diversity_factor + 1e-8)
    
    # Normalize by the maximum adjusted heuristic value
    normalized_adjusted_heuristic = adjusted_heuristic_value / (np.max(adjusted_heuristic_value) + 1e-8)
    
    # Introduce a balance heuristic based on the trade-off between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the normalized adjusted heuristic and balance heuristic using a weighted sum
    combined_heuristic = 0.5 * normalized_adjusted_heuristic + 0.5 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
