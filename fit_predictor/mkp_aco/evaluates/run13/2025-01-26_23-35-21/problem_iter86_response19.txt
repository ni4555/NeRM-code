```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)

    # Prune dominated items by removing those with density <= 0
    dominated_mask = density <= 0
    density[dominated_mask] = 0

    # Introduce randomness for heuristic diversity
    random_factor = np.random.rand(n)

    # Combine density with randomness, balancing exploitation and exploration
    heuristic = (density + random_factor) * (1 - np.sum(weight, axis=1))

    # Normalize the heuristics to ensure they are between 0 and 1
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    return normalized_heuristic
```
