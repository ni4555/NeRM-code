```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Normalize the utility
    utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    # Calculate the sparsity metric as the inverse of the sum of weights
    sparsity = 1 / np.sum(weight, axis=1)
    # Normalize the sparsity
    sparsity = (sparsity - np.min(sparsity)) / (np.max(sparsity) - np.min(sparsity))
    # Combine the normalized utility and sparsity using a weighted sum
    # The weights are chosen to balance between maximizing utility and avoiding overly dense knapsacks
    weight_utility = 0.6
    weight_sparsity = 0.4
    heuristics = weight_utility * utility + weight_sparsity * sparsity
    # Cap the heuristics at 1 to ensure they represent a probability
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
