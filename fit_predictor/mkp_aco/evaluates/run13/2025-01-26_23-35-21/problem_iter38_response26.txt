```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density with regularization
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity with regularization
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = (density - average_density) / (np.max(density) - average_density + 1e-8)
    
    # Introduce a balance factor between density and sparsity
    balance_factor = (density + sparsity) / 2
    
    # Introduce a sparsity penalty for items that are already fully utilized
    sparsity_penalty = np.where(weight_sum == 1, 1 - sparsity, 0)
    
    # Combine all factors to create a final heuristic
    heuristic = diversity_factor * balance_factor * sparsity_penalty
    
    # Normalize by the maximum heuristic value
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
