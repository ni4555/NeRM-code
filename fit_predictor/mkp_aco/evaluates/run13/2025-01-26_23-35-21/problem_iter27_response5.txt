```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a randomness factor to avoid local optima
    randomness_factor = np.random.rand(len(prize))
    
    # Combine the factors to get a heuristic value
    heuristic_value = density * (1 - sparsity) + randomness_factor
    
    # Normalize the heuristic values to avoid dominance of a single metric
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Combine the diversity factor with the heuristic value
    heuristic = normalized_heuristic * diversity_factor
    
    # Manage edge cases by ensuring no zero weight items are ignored
    heuristic[weight_sum < 1e-8] = 1e-8
    
    return heuristic
```
