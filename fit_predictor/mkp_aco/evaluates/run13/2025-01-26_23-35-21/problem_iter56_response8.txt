```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate normalized prize value per unit weight
    prize_per_weight = prize / np.sum(weight, axis=1)
    
    # Calculate diversity based on prize per weight
    diversity = prize_per_weight / (np.mean(prize_per_weight) + 1e-8)
    
    # Calculate sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate balance by considering the difference from the mean prize per weight
    balance = (prize_per_weight - np.mean(prize_per_weight)) / (np.std(prize_per_weight) + 1e-8)
    
    # Calculate adaptability factor based on the ratio of the sum of weights of the item to the total weight capacity
    adaptability_factor = np.sum(weight, axis=1) / (m * n)
    
    # Combine the factors into a weighted heuristic, giving more importance to diversity and adaptability
    heuristic = 0.5 * diversity + 0.3 * balance + 0.2 * adaptability_factor
    
    # Introduce randomness to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    
    # Add randomness to the heuristic, weighted by its own variance
    heuristic += (random_factor - np.mean(random_factor)) * np.std(random_factor) / (np.max(random_factor) - np.min(random_factor))
    
    # Normalize the heuristic to ensure all values are between 0 and 1
    heuristic /= np.max(heuristic)
    
    return heuristic
```
