```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Use a blend of metrics with domain insights, such as considering the uniqueness of the weight vector
    # Calculate the average density of unique weight vectors
    unique_weights = np.unique(weight, axis=0)
    unique_density = np.mean(prize / (np.sum(unique_weights, axis=1) + 1e-8), axis=0)
    density_unique = density / unique_density
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) + density_unique - weight_sum
    
    # Manage sparsity by adding a term to penalize zero weights
    heuristic_value[weight_sum == 0] = -np.inf
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
