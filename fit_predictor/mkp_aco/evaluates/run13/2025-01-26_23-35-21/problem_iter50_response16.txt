```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity for each dimension
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate average density
    average_density = np.mean(density)
    
    # Calculate diversity factor based on normalized density
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a heuristic value by combining density and sparsity
    heuristic_value = density * (1 - sparsity)
    
    # Introduce balance by subtracting the relative sparsity
    balance_heuristic = density - sparsity
    
    # Introduce randomness for diversity
    random_factor = np.random.rand(n)
    
    # Combine heuristics using a weighted sum with exploration and balance
    exploration_balance = np.random.rand()  # Exploration from 0 to 1
    combined_heuristic = exploration_balance * heuristic_value + (1 - exploration_balance) * balance_heuristic
    
    # Prune low-quality heuristics by setting them to zero
    low_quality_threshold = np.percentile(combined_heuristic, 5)
    combined_heuristic[combined_heuristic < low_quality_threshold] = 0
    
    # Normalize combined heuristic to ensure sum equals one
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
