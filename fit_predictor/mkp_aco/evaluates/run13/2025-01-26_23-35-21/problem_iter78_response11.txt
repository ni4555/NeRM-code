```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Identify dominated items and prune them using percentile pruning
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Balance metric weights based on domain knowledge
    balance_weights = np.array([0.5, 0.3, 0.1, 0.1])
    # Use a weighted sum approach with balanced weights
    heuristic = (balance_weights[0] * density +
                 balance_weights[1] * (1 - sparsity) +
                 balance_weights[2] * value_to_weight_ratio +
                 balance_weights[3] * random_factor)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / np.sum(heuristic) + 1e-8

    # Introduce a diversity factor that encourages inclusion of diverse items
    diversity_factor = 0.1 * (1 - np.mean(density)) / (np.max(1 - np.mean(density)) + 1e-8)

    # Introduce a randomness factor for additional exploration
    randomness_factor = 0.1 * np.random.rand(n) + 0.1

    # Combine balance, diversity, randomness, and the previous heuristics
    final_heuristic = normalized_heuristic * (balance_weights[0] + diversity_factor + randomness_factor)

    # Refine heuristics with domain-specific penalties
    # Here, we introduce a penalty for sparsity, encouraging more items to be included
    sparsity_penalty = (1 - sparsity) * 0.1
    final_heuristic *= (1 - sparsity_penalty)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(density == 0):
        final_heuristic = np.ones(n) * 1e-8

    return final_heuristic
```
