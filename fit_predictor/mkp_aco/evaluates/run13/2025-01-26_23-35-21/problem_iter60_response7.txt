```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a balance factor between high density and low sparsity
    balance_factor = (density - sparsity) / (np.abs(density - sparsity) + 1e-8)
    
    # Calculate the sum of weights for each item
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic value based on a weighted combination of density, sparsity, and balance
    heuristic_value = density * 0.6 + sparsity * 0.2 - weight_sum * 0.2
    
    # Calculate the variance of density
    variance_density = np.var(density)
    
    # Introduce a diversity factor based on the inverse variance of density
    diversity_factor = 1 / (variance_density + 1e-8)
    
    # Calculate adaptability factor based on the ratio of the sum of weights of the item to the total weight capacity
    adaptability_factor = np.sum(weight, axis=1) / (m * np.sum(weight))
    
    # Introduce a randomness factor based on the standard deviation of the prize per weight
    randomness_factor = np.random.normal(0, np.std(density), n)
    
    # Combine the factors into a weighted heuristic, giving more importance to diversity and adaptability
    heuristic = diversity_factor * 0.6 + adaptability_factor * 0.2 + randomness_factor * 0.2 + balance_factor * 0.1
    
    # Normalize the heuristic to ensure the sum is one
    heuristic /= np.sum(heuristic)
    
    # Adjust the heuristic for items with zero weight to maintain diversity
    zero_weight_mask = weight_sum < 1e-8
    heuristic[zero_weight_mask] = 1e-8 / np.sum(~zero_weight_mask)
    
    return heuristic
```
