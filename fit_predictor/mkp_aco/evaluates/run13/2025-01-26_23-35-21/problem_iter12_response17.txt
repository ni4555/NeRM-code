```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate diversity with utility by adding a diversity metric
    diversity = np.mean(np.min(weight, axis=1), axis=0) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate a metric that emphasizes the uniform distribution of weights
    uniformity = np.mean(np.abs(np.mean(weight, axis=1)), axis=0)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the balance of each item based on the standard deviation of its weights across dimensions
    balance = np.std(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * 0.4 + (1 - sparsity) * 0.3 + diversity * 0.2 + uniformity * 0.1 - weight_sum * 0.1 - balance * 0.1
    
    # Manage sparsity by adding a term to penalize zero weights
    heuristic_value[weight_sum == 0] = -np.inf
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
