```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Ensure at least one dimension in each item has non-zero weight to maintain diversity
    weight[weight < 1e-8] = 1e-8
    
    # Calculate normalized density considering dimensionality
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce randomness to avoid premature convergence
    randomness = np.random.rand(len(density))
    
    # Create a heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) + randomness
    
    # Introduce a diversity factor
    diversity_factor = np.exp(-np.sum(weight**2, axis=1) / (np.sum(weight, axis=1) + 1e-8))
    
    # Normalize by the maximum diversity factor
    normalized_diversity = diversity_factor / np.max(diversity_factor)
    
    # Combine the heuristic value with the diversity factor
    heuristic = heuristic_value * normalized_diversity
    
    # Set zero weights to zero to prune dominated items
    heuristic[sparsity == 0] = 0
    
    return heuristic
```
