```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Normalize the utility scores
    utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    # Calculate the sparsity of the weights, higher sparsity implies less weight
    sparsity = np.sum(weight == 0, axis=1) / weight.shape[1]
    # Normalize the sparsity scores
    sparsity = (sparsity - np.min(sparsity)) / (np.max(sparsity) - np.min(sparsity))
    # Combine utility and sparsity, with sparsity having a slightly higher weight
    combined_heuristics = utility * 0.7 + sparsity * 0.3
    # Apply a cap to heuristics to maintain a bounded range of 0 to 1
    combined_heuristics = np.clip(combined_heuristics, a_min=0, a_max=1)
    return combined_heuristics
```
