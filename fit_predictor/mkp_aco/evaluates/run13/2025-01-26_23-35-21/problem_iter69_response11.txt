```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a random seed for reproducibility
    np.random.seed(42)
    
    # Normalize the prize to a 0-1 scale
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize_normalized / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a randomness factor to balance exploration and exploitation
    randomness_factor = np.random.rand(len(density))
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a balance between high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the factors to create a heuristic
    heuristic = density * balance_factor + randomness_factor
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Prune dominated items (items with lower heuristic values are set to zero)
    dominated_mask = np.any(weight < 1e-8, axis=1)
    normalized_heuristic[dominated_mask] = 0
    
    return normalized_heuristic
```
