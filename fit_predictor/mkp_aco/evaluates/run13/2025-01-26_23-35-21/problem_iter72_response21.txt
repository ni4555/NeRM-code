```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value to weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Calculate a balance metric between density and sparsity
    balance_metric = (density - sparsity) / (np.abs(density - sparsity) + 1e-8)

    # Introduce randomness for diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics using a weighted sum, with more emphasis on balance
    heuristic = (0.6 * density +
                 0.2 * balance_metric +
                 0.1 * value_to_weight_ratio +
                 0.1 * random_factor)

    # Apply a non-linear transformation to reduce the effect of outliers
    heuristic = np.sqrt(heuristic)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / np.sum(heuristic)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(density == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
