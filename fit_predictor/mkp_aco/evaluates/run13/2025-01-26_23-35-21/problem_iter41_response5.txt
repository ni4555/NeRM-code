```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize values to ensure they are on a similar scale as the weights
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the normalized weights to account for their multi-dimensional nature
    normalized_weight = np.sum(weight, axis=1)
    
    # Introduce a randomness factor to the heuristic to avoid premature convergence
    random_factor = np.random.rand(len(prize))
    
    # Combine the normalized prize and weight to create a heuristic value
    heuristic_value = normalized_prize / (normalized_weight + 1e-8)
    
    # Adjust the heuristic value based on the randomness factor
    adjusted_heuristic = heuristic_value * random_factor
    
    # Normalize the heuristic values to ensure they are in a comparable range
    normalized_heuristic = adjusted_heuristic / (np.max(adjusted_heuristic) + 1e-8)
    
    # Introduce a sparsity factor to encourage selection of items with less weight
    sparsity_factor = 1 / (np.max(weight, axis=1) + 1e-8)
    
    # Combine the heuristic with the sparsity factor to promote diversity
    combined_heuristic = normalized_heuristic * sparsity_factor
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
