```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)[:, np.newaxis]

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)[:, np.newaxis]

    # Calculate sum of weights for each item
    weight_sum = np.sum(weight, axis=1)

    # Calculate diversity based on inverse variance of density
    variance_density = np.var(density, axis=0)
    diversity_factor = 1 / (variance_density + 1e-8)[:, np.newaxis]

    # Combine density, sparsity, and diversity in the heuristic value
    heuristic_value = density * (1 - sparsity) * diversity_factor

    # Introduce balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)[:, np.newaxis]

    # Combine heuristics using a weighted sum
    combined_heuristic = 0.6 * heuristic_value + 0.4 * balance_heuristic

    # Normalize the combined heuristic by the maximum value to ensure the sum is 1
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic, axis=0)

    # Ensure items with zero weight have a small contribution to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8

    return combined_heuristic
```
