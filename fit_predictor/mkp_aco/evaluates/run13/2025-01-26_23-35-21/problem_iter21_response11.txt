```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics array
    heuristic = np.zeros_like(prize)
    
    # Randomly select a subset of items to start with
    indices = np.random.choice(weight.shape[0], size=int(weight.shape[0] * 0.2), replace=False)
    
    # Calculate normalized density and sparsity
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate a heuristic based on the ratio of prize to sum of weights and the sparsity
    heuristic[indices] = (prize[indices] / np.sum(weight[indices], axis=1)) * (1 - sparsity[indices])
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Integrate the diversity factor into the heuristic
    heuristic *= diversity_factor[indices]
    
    # Normalize the heuristic to ensure non-negative values
    heuristic = np.maximum(heuristic, 0)
    
    # Adjust the heuristics to ensure a diverse set of items is selected
    heuristic[weight < 1e-8] = 1e-8
    
    return heuristic
```
