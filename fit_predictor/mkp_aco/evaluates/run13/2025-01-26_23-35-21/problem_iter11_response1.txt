```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) + weight_sum
    
    # Introduce a diversity factor to promote selection of different items
    diversity_factor = np.where(weight_sum < 1e-8, 0, 1 / weight_sum)
    
    # Combine the diversity factor with the heuristic value
    combined_heuristic = heuristic_value * diversity_factor
    
    # Penalize zero or near-zero weights to maintain diversity
    penalty = np.where(weight_sum < 1e-8, -np.inf, 0)
    combined_heuristic += penalty
    
    # Normalize by the maximum combined heuristic value
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    return normalized_combined_heuristic
```
