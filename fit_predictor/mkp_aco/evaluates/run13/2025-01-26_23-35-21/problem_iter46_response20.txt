```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Normalize prize to prevent overflow
    normalized_prize = prize / np.sum(prize)
    
    # Calculate normalized density
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Combine density and sparsity to form a heuristic
    heuristic = density * (1 - sparsity)
    
    # Prune low-quality heuristics by setting them to zero
    quality_threshold = np.percentile(heuristic, 5)
    heuristic[heuristic < quality_threshold] = 0
    
    # Normalize heuristics to ensure they sum to one
    heuristic /= np.sum(heuristic)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_index = np.sum(weight, axis=1) < 1e-8
    heuristic[zero_weight_index] = 1e-8 / np.sum(~zero_weight_index)
    
    return heuristic
```
