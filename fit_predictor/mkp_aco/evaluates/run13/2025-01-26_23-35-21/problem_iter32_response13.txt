```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized prize per unit weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness for diversity
    randomness_factor = np.random.rand(n)
    
    # Normalize the randomness factor
    normalized_randomness = randomness_factor / np.max(randomness_factor)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce penalties for undesirable traits
    sparsity_penalty = 1 - sparsity
    density_penalty = 1 - density / np.max(density)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    weight_penalty = 1 - weight_sum / np.max(weight_sum)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * sparsity_penalty * weight_penalty
    
    # Combine the randomness factor with the heuristic value
    combined_heuristic = heuristic_value * normalized_randomness
    
    # Normalize by the maximum combined heuristic value
    normalized_combined_heuristic = combined_heuristic / np.max(combined_heuristic)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_combined_heuristic
```
