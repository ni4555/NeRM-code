```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an empty list to store additional metrics
    metrics = []
    
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    metrics.append(density)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    metrics.append(sparsity)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    metrics.append(weight_sum)
    
    # Normalize each metric
    metrics = np.array(metrics)
    normalized_metrics = metrics / np.sum(metrics, axis=0)
    
    # Introduce randomness to avoid getting stuck in local optima
    randomness = np.random.rand(*normalized_metrics.shape)
    
    # Introduce diversity by ensuring no metric has an absolute dominant value
    diversity = 1 / (np.abs(normalized_metrics) + 1e-8)
    
    # Combine all metrics using a weighted sum with consideration for randomness and diversity
    heuristic_value = np.dot(normalized_metrics, diversity) * randomness
    
    # Prune dominated items by setting their heuristics to a very low value
    non_dominated_mask = (sparsity > density)
    dominated_items = np.where(np.logical_not(non_dominated_mask))[0]
    heuristic_value[dominated_items] = 1e-8
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    heuristic_value += balance_heuristic
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Ensure exploration and exploitation balance by incorporating both randomness and metric values
    final_heuristic = normalized_heuristic * randomness
    
    return final_heuristic
```
