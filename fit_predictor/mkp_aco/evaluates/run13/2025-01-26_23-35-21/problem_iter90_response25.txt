```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items (those with lower density and higher sparsity)
    dominated_indices = np.where(density < np.min(density[density > 0]))[0]
    weight[dominated_indices] = np.zeros_like(weight[dominated_indices])
    
    # Normalize the density and sparsity
    density = (density - np.min(density[density > 0])) / (np.max(density) - np.min(density[density > 0]))
    sparsity = (sparsity - np.min(sparsity[sparsity > 0])) / (np.max(sparsity) - np.min(sparsity[sparsity > 0]))
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(weight.shape[0])
    
    # Combine the metrics into a heuristic
    heuristic = density * (1 - sparsity) + random_factor
    
    # Ensure the combined heuristic is non-negative
    heuristic = np.clip(heuristic, 0, None)
    
    return heuristic
```
