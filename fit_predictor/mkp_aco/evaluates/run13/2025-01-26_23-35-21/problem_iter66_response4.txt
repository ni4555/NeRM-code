```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize density, sparsity, and value-to-weight ratio
    density = prize / (np.sum(weight, axis=1) + 1e-8) * np.sqrt(m)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8) * np.sqrt(m)

    # Identify dominated items using a percentile-based threshold
    density_threshold = np.percentile(density, 10)
    dominated_mask = density < density_threshold
    density[dominated_mask] = 0

    # Calculate diversity
    diversity = (density - np.mean(density))**2

    # Introduce randomness for exploration
    randomness = np.random.rand(n) + 1e-8

    # Weigh and combine metrics
    heuristic = (0.5 * density +
                 0.3 * (1 - sparsity) +
                 0.1 * value_to_weight_ratio +
                 0.05 * diversity +
                 0.05 * randomness)

    # Normalize heuristic values to a range [0, 1]
    normalized_heuristic = heuristic / np.sum(heuristic)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.count_nonzero(density) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
