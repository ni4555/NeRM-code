```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Calculate the normalized prize density
    density = prize / np.sum(weight, axis=1)
    
    # Introduce a sparsity measure that penalizes items with high weight
    sparsity = 1 - np.mean(weight, axis=1)
    
    # Calculate the diversity factor based on the ratio of prizes to total prize sum
    diversity_factor = prize / np.sum(prize)
    
    # Use the sum of weights as a difficulty measure and inverse it to encourage lighter items
    difficulty = 1 / (np.sum(weight, axis=1) + 1e-8)
    
    # Combine the metrics to create a heuristic value
    heuristic_value = density * sparsity * diversity_factor * difficulty
    
    # Normalize the heuristic values to be between 0 and 1
    max_heuristic = np.max(heuristic_value)
    heuristic_value /= max_heuristic if max_heuristic > 0 else 1
    
    return heuristic_value
```
