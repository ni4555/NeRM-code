```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1, keepdims=True) / np.max(weight, axis=1, keepdims=True)
    
    # Create a heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity)
    
    # Introduce randomness to prevent premature convergence
    random_factor = np.random.rand(*density.shape)
    
    # Prune dominated items by setting their heuristic value to zero
    dominated_items = np.where(density < sparsity)
    heuristic_value[dominated_items] = 0
    
    # Introduce an exploration factor to balance exploitation and exploration
    exploration_factor = np.exp(-np.abs(heuristic_value))
    
    # Create a final heuristic by combining the heuristic value with the exploration factor and random factor
    heuristic = heuristic_value * exploration_factor * random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / np.max(heuristic + 1e-8)
    
    # Introduce a balance factor to ensure diversity in the selection
    balance_factor = (heuristic_value + sparsity) / (2 * (heuristic_value + sparsity + 1e-8))
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * normalized_heuristic + 0.5 * balance_factor
    
    return combined_heuristic
```
