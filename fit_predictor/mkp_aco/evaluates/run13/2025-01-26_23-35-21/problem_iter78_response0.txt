```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize prize values
    normalized_prize = prize / np.max(prize)

    # Normalize weights to have a maximum sum of 1
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]

    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = normalized_prize / np.sum(normalized_weight**2, axis=1)

    # Identify dominated items using a percentile-based threshold
    percentile_threshold = np.percentile(value_to_weight_ratio, 95)
    dominated_mask = value_to_weight_ratio < percentile_threshold
    value_to_weight_ratio[dominated_mask] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)

    # Combine the metrics using a weighted sum, emphasizing value-to-weight ratio and randomness
    heuristic = (0.6 * value_to_weight_ratio +
                 0.3 * normalized_prize +
                 0.1 * random_factor)

    # Normalize the heuristic values to ensure a range of [0, 1]
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Adjust the heuristic to emphasize high value-to-weight ratio and normalize the prize
    adjusted_prize_weight = normalized_prize / np.percentile(normalized_prize, 90)
    adjusted_value_to_weight_ratio = value_to_weight_ratio / np.percentile(value_to_weight_ratio, 90)
    adjusted_heuristic = (adjusted_prize_weight * 1.5 +
                          adjusted_value_to_weight_ratio * 1.5 +
                          normalized_heuristic)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.count_nonzero(value_to_weight_ratio) == 0:
        adjusted_heuristic = np.ones(n) * 1e-8

    return adjusted_heuristic
```
