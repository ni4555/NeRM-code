```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize the prize by the total prize to maintain the importance of individual items
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a diversity factor based on the variance of the normalized density
    diversity_factor = np.var(density)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - np.sum(weight, axis=1)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * heuristic + 0.5 * balance_heuristic
    
    # Normalize by the maximum heuristic value
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
