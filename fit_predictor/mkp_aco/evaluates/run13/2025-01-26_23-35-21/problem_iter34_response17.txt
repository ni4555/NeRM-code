```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)

    # Introduce a diversity factor based on the standard deviation of density
    diversity_factor = 1 / (np.std(density) + 1e-8)

    # Consider the overall weight for the sparsity metric
    overall_sparsity = np.sum(sparsity)

    # Create a final heuristic by combining density, sparsity, diversity, and weight sum
    heuristic = density * (1 - sparsity) * diversity_factor * weight_sum

    # Introduce randomness to avoid getting stuck in local optima
    randomness_factor = np.random.rand(*heuristic.shape)

    # Create a final heuristic by blending randomness with the heuristic value
    final_heuristic = randomness_factor * heuristic

    # Normalize by the maximum heuristic value
    max_final_heuristic = np.max(final_heuristic)
    if max_final_heuristic > 0:
        final_heuristic /= max_final_heuristic

    # Ensure that items that do not contribute to the total weight are not favored
    final_heuristic[weight_sum < 1e-8] = 0

    # Adjust for overall sparsity to promote diversity
    adjusted_heuristic = final_heuristic * (1 + overall_sparsity)

    # Ensure the heuristics are non-negative
    adjusted_heuristic = np.maximum(adjusted_heuristic, 0)

    return adjusted_heuristic
```
