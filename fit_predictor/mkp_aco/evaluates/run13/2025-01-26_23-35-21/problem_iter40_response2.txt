```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize sparsity for each item
    sparsity = 1 - (np.min(weight, axis=1) / np.sum(weight, axis=1))
    
    # Create a heuristic value based on the product of density and sparsity
    heuristic_value = density * sparsity
    
    # Normalize the heuristic values to maintain a consistent scale
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_mask = np.sum(weight, axis=1) < 1e-8
    normalized_heuristic[zero_weight_mask] = 1e-8
    
    return normalized_heuristic
```
