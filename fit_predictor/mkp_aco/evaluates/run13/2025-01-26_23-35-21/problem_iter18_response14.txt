```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prizes to avoid dominance by large prizes
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Normalize weights to handle the multi-dimensional nature of weights
    max_weight_sum = np.max(np.sum(weight, axis=1))
    normalized_weight_sum = np.sum(weight, axis=1) / max_weight_sum

    # Calculate the density of each item, which combines value and weight
    density = normalized_prize / normalized_weight_sum

    # Introduce diversity by considering the sum of weights, encouraging selection of different items
    diversity = np.mean(weight, axis=1) / np.sum(weight, axis=1)

    # Create a heuristic value by combining density and diversity, aiming for a balance between value and variety
    heuristic_value = density * diversity

    # Normalize the heuristic values to maintain a consistent scale and to avoid dominance by outliers
    max_heuristic = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic + 1e-8)

    # Ensure the normalized heuristic values are non-negative
    normalized_heuristic = np.maximum(normalized_heuristic, 0)

    # Incorporate a sparsity penalty to avoid selecting items with uniform weights
    sparsity_penalty = np.sum(weight, axis=1) / (n * m)
    sparsity_penalty = np.clip(sparsity_penalty, 0, 1)  # Ensure penalty is within [0, 1]
    normalized_heuristic *= (1 - sparsity_penalty)

    return normalized_heuristic
```
