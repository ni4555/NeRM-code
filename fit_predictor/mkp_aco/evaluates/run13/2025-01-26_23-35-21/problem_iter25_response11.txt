```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an empty heuristic array
    heuristic = np.zeros_like(prize)
    
    # Normalize the prize and weight for each dimension
    normalized_prize = prize / np.linalg.norm(prize)
    normalized_weight = weight / np.linalg.norm(weight, axis=1, keepdims=True)
    
    # Calculate a density metric for each item
    density = np.sum(normalized_prize * normalized_weight, axis=1)
    
    # Calculate a sparsity metric for each item
    sparsity = np.mean(normalized_weight, axis=1)
    
    # Introduce diversity by penalizing items that are too similar to others
    diversity_penalty = np.sum(normalized_weight, axis=1)
    
    # Calculate the balance metric between high density and low sparsity
    balance_metric = density / (1 + sparsity)
    
    # Combine all metrics to get the heuristic value
    heuristic_value = density - sparsity - diversity_penalty + balance_metric
    
    # Normalize the heuristic values to ensure they sum to 1
    heuristic = heuristic_value / np.sum(heuristic_value)
    
    return heuristic
```
