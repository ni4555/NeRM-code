```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity of each item (1 / sum of each dimension's weight)
    diversity = 1 / np.sum(weight, axis=1)
    
    # Calculate the sparsity factor as the sum of weights
    sparsity_factor = np.sum(weight, axis=1)
    
    # Combine density, diversity, and sparsity factor
    combined = density + diversity - sparsity_factor
    
    # Normalize by the maximum value
    normalized_combined = combined / (np.max(combined) + 1e-8)
    
    # Set a threshold to determine the promissory items
    threshold = 0.6
    
    # Create heuristics array
    heuristics = np.where(normalized_combined >= threshold, normalized_combined, 0)
    
    return heuristics
```
