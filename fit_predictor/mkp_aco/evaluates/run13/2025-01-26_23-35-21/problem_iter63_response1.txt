```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristic array with zeros
    heuristic = np.zeros_like(prize)
    
    # Define dominated item pruning function
    def is_dominated(prize: np.ndarray, weight: np.ndarray, index: int) -> bool:
        for other_index in range(n):
            if other_index != index and np.all(weight[other_index] <= weight[index]) and np.any(prize[other_index] > prize[index]):
                return True
        return False
    
    # Loop over items and update heuristic based on density and sparsity
    for i in range(n):
        if not is_dominated(prize, weight, i):
            density = prize[i] / np.sum(weight[i])  # Calculate normalized density
            sparsity = np.sum(weight[i]) / np.max(weight[i])  # Calculate normalized sparsity
            heuristic[i] = density * (1 - sparsity)  # Update heuristic
    
    # Normalize heuristics to maintain a scale for stochastic selection
    heuristic /= np.max(heuristic)
    
    # Introduce controlled randomness
    random_factor = np.random.rand(n)
    heuristic *= random_factor
    
    # Ensure that zero-weight items are still included with a very low heuristic
    zero_weight_mask = np.sum(weight, axis=1) < 1e-8
    heuristic[zero_weight_mask] = 1e-8
    
    return heuristic
```
