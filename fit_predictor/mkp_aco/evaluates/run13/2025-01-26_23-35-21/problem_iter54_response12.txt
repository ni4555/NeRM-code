```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the density as the ratio of prize to total weight of the item, adding a small epsilon to avoid division by zero
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Normalize the diversity based on the inverse variance of density
    variance_density = np.var(density)
    diversity_factor = 1 / (variance_density + 1e-8)

    # Calculate the sparsity as the sum of each item's weight divided by the maximum weight in any dimension
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Introduce a balance between diversity and sparsity
    balance = (density - sparsity) / (density + sparsity + 1e-8)

    # Calculate a random factor to avoid local optima
    random_factor = np.random.rand(n)

    # Combine all factors into a single heuristic score, giving more weight to density and diversity
    heuristic = balance * diversity_factor * density + random_factor

    # Normalize the heuristic values to ensure they sum to one
    heuristic /= np.sum(heuristic)

    # Ensure items with zero weight do not dominate the heuristic
    weight_sum = np.sum(weight, axis=1)
    heuristic[weight_sum < 1e-8] = 1e-8 / n

    return heuristic
```
