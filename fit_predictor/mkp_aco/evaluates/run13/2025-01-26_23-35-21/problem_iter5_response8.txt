```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate the sparsity of the item weights
    sparsity = np.sum(weight == 0, axis=1) / weight.shape[1]
    # Calculate the diversity of the item weights
    diversity = 1 / np.std(weight, axis=1)
    # Normalize the metrics
    utility = utility / np.max(utility)
    sparsity = sparsity / np.max(sparsity)
    diversity = diversity / np.max(diversity)
    # Combine the normalized metrics using a weighted average
    heuristics = 0.5 * utility + 0.3 * sparsity + 0.2 * diversity
    # Apply a smoothing to the heuristics to avoid too sharp changes
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    # Ensure the heuristics are sparse to avoid overfitting
    heuristics[heuristics < 0.1] = 0
    return heuristics
```
