```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the relative prize-to-weight ratio
    relative_value = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate the diversity by penalizing high sparsity
    diversity = 1 / (sparsity + 1e-8)
    
    # Create a heuristic by combining relative value and diversity
    heuristic = relative_value * diversity
    
    # Normalize the heuristic
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    return normalized_heuristic
```
