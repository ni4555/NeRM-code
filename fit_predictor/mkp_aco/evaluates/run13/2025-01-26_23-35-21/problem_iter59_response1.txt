```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Prune dominated items based on sparsity
    is_dominated = (np.sum(weight, axis=1) < np.max(weight, axis=1)) & (density < np.mean(density))
    non_dominated_mask = ~is_dominated
    
    # Selecting items based on the ratio of prize to weight for better diversity
    prize_to_weight = prize / np.sum(weight, axis=1)
    diversity_heuristic = np.where(non_dominated_mask, prize_to_weight, 0)
    
    # Introducing randomness to explore solutions
    random_factor = np.random.rand(weight.shape[0])
    
    # Balancing the diversity and randomness
    balanced_heuristic = diversity_heuristic * 0.7 + random_factor * 0.3
    
    # Normalize by the maximum heuristic value to maintain consistency
    normalized_heuristic = balanced_heuristic / (np.max(balanced_heuristic) + 1e-8)
    
    return normalized_heuristic
```
