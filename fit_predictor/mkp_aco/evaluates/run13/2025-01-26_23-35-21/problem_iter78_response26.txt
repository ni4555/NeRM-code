```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density for each item
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Normalize the heuristics using a combination of density, value-to-weight ratio, and randomness
    heuristics = 0.6 * density + 0.2 * value_to_weight_ratio + 0.2 * random_factor

    # Ensure scale invariance by normalizing heuristics
    heuristics /= np.sum(heuristics)

    # Introduce a diversity factor by considering the sparsity of the solution
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8
    diversity_factor = 0.1 * (1 - np.mean(sparsity)) / (np.max(1 - np.mean(sparsity)) + 1e-8)
    heuristics *= diversity_factor

    # Introduce a balance factor that combines exploration and exploitation
    balance_factor = 0.3 * np.exp(-np.sum(weight, axis=1) / np.max(weight, axis=1))
    heuristics *= balance_factor

    # Introduce a randomness factor for additional exploration
    randomness_factor = 0.1 * np.random.rand(n) + 0.1
    heuristics += randomness_factor * (1 - heuristics)

    # Normalize again to ensure the heuristics sum to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```
