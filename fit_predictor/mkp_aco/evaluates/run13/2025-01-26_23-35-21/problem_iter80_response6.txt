```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize prize by sum of each item's weights
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate the dominance of each item
    dominance = np.where(normalized_prize >= np.percentile(normalized_prize, 95), 1, 0)

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)

    # Combine heuristics based on dominance, normalized prize, sparsity, and randomness
    heuristics = (0.5 * dominance +
                  0.3 * normalized_prize +
                  0.1 * sparsity +
                  0.1 * random_factor)

    # Normalize the heuristics to ensure they sum to 1
    heuristics /= np.sum(heuristics)

    # Ensure non-negative heuristic values
    heuristics = np.maximum(heuristics, 0)

    return heuristics
```
