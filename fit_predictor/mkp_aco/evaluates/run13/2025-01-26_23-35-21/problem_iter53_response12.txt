```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate the sparsity
    sparsity = 1 - np.sum(weight, axis=1, keepdims=True) / np.sum(weight, axis=1, keepdims=True)
    
    # Integrate additional metrics such as the inverse of the sum of weights
    weight_inverse_sum = 1 / (np.sum(weight, axis=1, keepdims=True) + 1e-8)
    
    # Combine density, sparsity, and inverse weight sum
    base_heuristic = density * sparsity * weight_inverse_sum
    
    # Prune dominated items by ensuring items with higher prize-to-weight ratio have higher heuristic
    base_heuristic /= (1e-8 + prize / np.sum(weight, axis=1, keepdims=True))
    
    # Introduce randomness to explore the solution space
    random_factor = np.random.rand(len(prize)) * 0.1  # Randomness factor is between 0 and 0.1
    
    # Combine the base heuristic with randomness
    heuristic = base_heuristic + random_factor
    
    # Normalize the heuristic to ensure all values are non-negative
    heuristic = np.clip(heuristic, 0, None)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    return normalized_heuristic
```
