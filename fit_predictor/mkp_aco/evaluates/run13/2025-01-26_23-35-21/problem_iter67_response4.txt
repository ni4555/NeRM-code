```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items based on their density
    dominance_mask = density > sparsity
    non_dominated_items = np.where(dominance_mask)[0]
    
    # Recalculate the metrics for non-dominated items
    density = density[non_dominated_items]
    sparsity = sparsity[non_dominated_items]
    weight_sum = weight_sum[non_dominated_items]
    
    # Calculate diversity based on the average density of non-dominated items
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Combine the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Introduce randomness to explore less probable solutions
    random_factor = np.random.rand(len(heuristic))
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Combine the heuristics with randomness
    combined_heuristic = (normalized_heuristic + random_factor) / 2
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
