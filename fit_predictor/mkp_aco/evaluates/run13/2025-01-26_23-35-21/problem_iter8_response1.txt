```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity based on a threshold for each item
    sparsity_threshold = 0.1  # Assuming a threshold of 10% for sparsity
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    
    # Calculate the diversity of each item (1 / sum of each dimension's weight)
    diversity = 1 / np.sum(weight, axis=1)
    
    # Incorporate diversity with a different weight, to give importance to items with uniform weight distribution
    diversity = diversity * 0.5
    
    # Balance the heuristics by combining density, sparsity, and diversity
    # Density is favored as it represents value
    # Sparsity and diversity are favored to a lesser degree to allow flexibility in the selection process
    heuristics = (density * 0.6 + sparsity * 0.2 + diversity * 0.2)
    
    # Ensure there are no negative heuristics
    heuristics = np.clip(heuristics, 0, None)
    
    # Normalize the heuristics to a range [0, 1]
    heuristics = heuristics / np.max(heuristics)
    
    return heuristics
```
