```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize prize values to maintain a consistent scale
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate normalized weight sum
    normalized_weight_sum = np.sum(weight, axis=1) / np.sum(weight, axis=1).max()
    
    # Normalize the weight sum to avoid dominance by larger items
    weight_sum_normalized = 1 - normalized_weight_sum
    
    # Calculate a diversity metric based on a weighted sum of prize and weight
    diversity_metric = normalized_prize * weight_sum_normalized
    
    # Introduce a penalty for sparsity by adding the inverse of the max weight in each dimension
    sparsity_penalty = 1 / np.max(weight, axis=1)
    
    # Combine diversity and penalty to create a heuristic
    heuristic = diversity_metric + sparsity_penalty
    
    # Normalize heuristic to avoid dominance and maintain a bounded range
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a randomness factor to increase diversity
    random_factor = np.random.rand(len(heuristic))
    
    # Blend the normalized heuristic with the randomness factor
    combined_heuristic = normalized_heuristic * (1 - random_factor) + random_factor
    
    # Ensure that no heuristics value is zero to maintain diversity
    combined_heuristic[combined_heuristic == 0] = 1e-8
    
    return combined_heuristic
```
