```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Prune dominated items
    non_dominated_indices = np.where(np.max(weight, axis=1) / np.max(weight) < 1)[0]
    prize = prize[non_dominated_indices]
    weight = weight[non_dominated_indices]

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness for heuristic diversity
    np.random.seed(42)  # Set a random seed for reproducibility
    random_factor = np.random.rand(len(density))
    
    # Combine density and randomness to create a heuristic
    heuristic = density * random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a diversity factor based on the variance of the heuristic
    diversity_factor = np.var(heuristic) / (np.var(heuristic) + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the normalized heuristic
    final_heuristic = normalized_heuristic * diversity_factor
    
    # Set zero weights to a small value to maintain diversity
    final_heuristic[weight_sum < 1e-8] = 1e-8
    
    return final_heuristic
```
