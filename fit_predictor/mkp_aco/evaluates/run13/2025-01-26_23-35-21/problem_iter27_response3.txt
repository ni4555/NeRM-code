```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity based on the weighted average of items' weights
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1)
    
    # Introduce a randomness factor
    random_factor = np.random.rand(len(prize))
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) + random_factor
    
    # Introduce a diversity factor based on the weighted average of item weights
    diversity_factor = np.sum(weight, axis=1) / (np.sum(weight, axis=0) + 1e-8)
    
    # Create a final heuristic by combining the heuristic value with the diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value to avoid dominant items
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a penalty for high sparsity to encourage diversity
    penalty_for_sparsity = sparsity * 0.5
    
    # Create a final combined heuristic with the penalty included
    combined_heuristic = normalized_heuristic - penalty_for_sparsity
    
    # Set zero weights to a small value to maintain diversity and avoid zero division
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
