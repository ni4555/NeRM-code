```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the diversity based on the standard deviation of the density
    density_std = np.std(density)
    diversity = density / (density_std + 1e-8)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Combine the diversity with the heuristic value
    combined_heuristic = heuristic_value * diversity
    
    # Normalize by the maximum combined heuristic value
    max_combined_heuristic = np.max(combined_heuristic)
    normalized_heuristic = combined_heuristic / (max_combined_heuristic + 1e-8)
    
    # Set zero weights to a small positive value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
