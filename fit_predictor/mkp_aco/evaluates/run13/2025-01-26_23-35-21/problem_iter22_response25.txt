```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize density by the sum of weights and a small epsilon to avoid division by zero
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize sparsity by the maximum weight and a small epsilon
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the standard deviation of the weights to capture diversity
    weight_diversity = np.std(weight, axis=1)
    
    # Define a penalty for low-value items and items with near-zero weight
    penalty = np.where(weight_sum < 1e-8, -prize.max(), 0)
    
    # Create a heuristic value by combining density, sparsity, and penalties
    heuristic_value = density * (1 - sparsity) - weight_sum + weight_diversity + penalty
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic + 1e-8)
    
    # Apply a sparsity penalty to avoid sparse solutions
    sparsity_threshold = 0.2  # Define a sparsity threshold
    sparsity_penalty = np.where(normalized_heuristic < sparsity_threshold, -np.inf, 0)
    normalized_heuristic += sparsity_penalty
    
    # Apply a smoothing to the heuristic values to reduce the impact of outliers
    smoothed_heuristic = np.clip(normalized_heuristic, 0, 1)
    
    # Incorporate diversity by considering the standard deviation of the smoothed heuristic values
    diversity_factor = np.std(smoothed_heuristic)
    
    # Adjust the heuristic by the diversity factor
    adjusted_heuristic = smoothed_heuristic * diversity_factor
    
    # Normalize the adjusted heuristic to maintain a positive range
    adjusted_heuristic = (adjusted_heuristic - np.min(adjusted_heuristic)) / (np.max(adjusted_heuristic) - np.min(adjusted_heuristic))
    
    # Ensure the final heuristic values are non-negative and between 0 and 1
    final_heuristic = np.clip(adjusted_heuristic, 0, 1)
    
    return final_heuristic
```
