```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Combine density and sparsity with a weighted sum to balance the selection criteria
    combined_score = 0.6 * density + 0.4 * sparsity

    # Introduce a random factor to encourage diversity and avoid local optima
    random_factor = np.random.rand(n)
    heuristic = combined_score + random_factor

    # Normalize heuristics to ensure a consistent scale and to allow for comparisons
    max_heuristic = np.max(heuristic)
    heuristic = heuristic / (max_heuristic + 1e-8)

    # Ensure that the heuristic does not sum to zero to avoid all items being ignored
    heuristic += 1e-8 * np.random.rand(n)

    return heuristic
```
