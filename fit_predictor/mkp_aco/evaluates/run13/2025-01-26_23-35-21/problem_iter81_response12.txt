```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an empty heuristic array
    heuristic = np.zeros(weight.shape[0])

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Normalize the density by the average density to balance exploration-exploitation
    average_density = np.mean(density)
    normalized_density = density / (average_density + 1e-8)

    # Normalize the weight sum to encourage diversity
    normalized_weight_sum = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))

    # Calculate a heuristic that balances density and diversity
    heuristic = normalized_density * normalized_weight_sum

    # Introduce randomness to encourage diversity
    np.random.shuffle(heuristic)

    # Normalize the heuristic to ensure a scale between 0 and 1
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)

    # Prune dominated items by setting their heuristic to zero
    non_dominated_indices = np.where(np.sum(weight, axis=1) >= 1)[0]
    dominated_indices = np.where(np.sum(weight, axis=1) < 1)[0]
    heuristic[dominated_indices] = 0

    return heuristic
```
