```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate diversity factors based on each dimension
    diversity_factors = (np.max(weight, axis=1) - np.min(weight, axis=1)) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate an overall diversity factor
    average_diversity = np.mean(diversity_factors)
    overall_diversity_factor = diversity_factors / (average_diversity + 1e-8)
    
    # Create heuristic value considering density, sparsity, and diversity
    heuristic_value = density * (1 - sparsity) - np.sum(weight, axis=1)
    
    # Combine heuristic value with diversity factor
    combined_heuristic = heuristic_value * overall_diversity_factor
    
    # Introduce balance heuristic
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine heuristics using a weighted sum with exploration-exploitation balance
    exploration_balance = np.random.rand() * 0.5 + 0.5  # Exploration from 0.5 to 1.0
    combined_heuristic = exploration_balance * combined_heuristic + (1 - exploration_balance) * balance_heuristic
    
    # Normalize combined heuristic to the range [0, 1]
    combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[np.sum(weight, axis=1) < 1e-8] = 1e-8
    
    # Prune and normalize to improve balance and stability
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    # Ensure non-negative values
    combined_heuristic = np.clip(combined_heuristic, 0, 1)
    
    return combined_heuristic
```
