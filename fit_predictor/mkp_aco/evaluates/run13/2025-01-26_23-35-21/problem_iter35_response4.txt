```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Incorporate a randomness factor
    randomness_factor = np.random.rand(*weight.shape)
    
    # Normalize the randomness factor to maintain balance
    normalized_randomness = randomness_factor / (np.max(randomness_factor) + 1e-8)
    
    # Integrate the randomness factor into the heuristic
    heuristic = density * (1 - sparsity) - normalized_randomness
    
    # Normalize the heuristic to avoid dominance
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the normalized heuristic
    final_heuristic = normalized_heuristic * diversity_factor
    
    # Sparsify the heuristic by setting low-value items to zero
    sparsified_heuristic = np.where(final_heuristic > 1e-8, final_heuristic, 0)
    
    return sparsified_heuristic
```
