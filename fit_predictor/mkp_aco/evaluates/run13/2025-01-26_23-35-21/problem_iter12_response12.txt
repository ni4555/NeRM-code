```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize / weight)
    density = prize / np.sum(weight, axis=1)
    # Calculate the sparsity of each item (1 / sum of each dimension's weight)
    sparsity = 1 / np.sum(weight, axis=1)
    # Introduce diversity by considering the standard deviation
    std_dev = np.std(weight, axis=1)
    diversity_factor = 1 / (1 + std_dev)
    # Incorporate the ratio of prize to density for a balance between value and compactness
    value_density_ratio = prize / density
    # Combine the metrics with appropriate weights to form a utility score
    utility = 0.5 * density + 0.3 * sparsity + 0.2 * diversity_factor + 0.5 * value_density_ratio
    # Normalize the utility scores to ensure non-negative values and to avoid dominance of very high values
    utility = np.log1p(utility)
    return utility
```
