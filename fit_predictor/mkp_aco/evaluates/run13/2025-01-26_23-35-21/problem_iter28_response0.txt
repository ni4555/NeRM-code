```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Calculate the density for each item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity for each item
    sparsity = np.sum(weight, axis=1) / n
    
    # Introduce a diversity factor based on the sum of weights
    diversity_factor = np.sum(weight, axis=1) / np.sum(weight)
    
    # Calculate the sum of weights as a measure of total contribution
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic by combining density, sparsity, and weight sum
    heuristic = density - sparsity - weight_sum * diversity_factor
    
    # Introduce a balance between high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Normalize the heuristic to ensure it's within a certain range
    normalized_heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    # Introduce a diversity penalty to avoid selecting too many similar items
    diversity_penalty = 1 / np.linalg.norm(normalized_heuristic)
    
    # Combine the balanced heuristic with the diversity penalty
    final_heuristic = normalized_heuristic * (1 - diversity_penalty) + diversity_penalty
    
    # Normalize by the maximum heuristic value to ensure the sum is 1
    final_heuristic /= np.sum(final_heuristic)
    
    # Set zero weights to a small value to maintain diversity
    final_heuristic[weight_sum < 1e-8] = 1e-8
    
    return final_heuristic
```
