```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    normalized_density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    normalized_sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Avoid dominance by selecting the top k items with the highest normalized density
    top_k_indices = np.argpartition(normalized_density, -k)[-k:]
    dominated_indices = np.setdiff1d(np.arange(n), top_k_indices)
    normalized_density[dominated_indices] = 0

    # Introduce diversity by balancing density and sparsity
    balance_metric = normalized_density + (1 - normalized_sparsity)

    # Normalize the balance metric to avoid dominance
    balance_metric = (balance_metric - np.min(balance_metric)) / (np.max(balance_metric) - np.min(balance_metric))

    # Calculate diversity factor to promote diversity
    diversity_factor = balance_metric / (np.mean(balance_metric) + 1e-8)

    # Normalize the diversity factor to sum to 1
    diversity_factor /= np.sum(diversity_factor)

    return diversity_factor
```
