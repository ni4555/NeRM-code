```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Ensure the weight is at least 1e-8 to avoid division by zero
    weight = np.maximum(weight, 1e-8)
    
    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the diversity based on the sum of weights
    diversity = np.sum(weight, axis=1) / np.mean(weight, axis=1)
    
    # Calculate the diversity penalty, penalizing low diversity
    diversity_penalty = np.maximum(0, 1 - diversity)
    
    # Calculate the sum of weights to penalize items that take up too much capacity
    weight_sum = np.sum(weight, axis=1)
    
    # Combine density and sparsity
    heuristic_base = density * (1 - sparsity)
    
    # Integrate diversity and weight sum
    heuristic_final = heuristic_base + diversity * diversity_penalty - weight_sum
    
    # Normalize by the maximum value
    max_heuristic = np.max(heuristic_final)
    normalized_heuristic = heuristic_final / (max_heuristic + 1e-8)
    
    # Introduce a penalty for items with zero weight to avoid overfitting
    zero_weight_penalty = np.where(weight_sum < 1e-8, -np.inf, 0)
    normalized_heuristic += zero_weight_penalty
    
    # Normalize to ensure the sum is 1 to maintain the total capacity constraint
    normalized_heuristic /= np.sum(normalized_heuristic)
    
    return normalized_heuristic
```
