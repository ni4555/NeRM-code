```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a list to store different metrics
    metrics = []
    
    # Normalize the prize based on the total prize
    normalized_prize = prize / np.sum(prize)
    
    # Normalize the density considering the dimensionality of the weight
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate additional metrics
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the diversity factor
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Add metrics to the list
    metrics.append(density)
    metrics.append(1 - sparsity)
    metrics.append(weight_sum)
    metrics.append(diversity_factor)
    
    # Prune dominated items by selecting the top items based on the normalized prize
    dominance_threshold = np.mean(normalized_prize)
    dominated_indices = np.where(normalized_prize < dominance_threshold)[0]
    metrics = [m[dominated_indices] for m in metrics]
    
    # Calculate the average of the metrics
    heuristic_value = np.mean(metrics, axis=0)
    
    # Introduce randomness to explore different solutions
    random_factor = np.random.rand(len(heuristic_value))
    
    # Combine the heuristic value with randomness
    combined_heuristic = heuristic_value * random_factor
    
    # Normalize the combined heuristic by the maximum value
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Prune the combined heuristic to remove unpromising elements
    combined_heuristic[combined_heuristic < 1e-8] = 0
    
    return combined_heuristic
```
