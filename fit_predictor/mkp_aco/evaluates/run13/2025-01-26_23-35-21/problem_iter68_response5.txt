```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Integrate sum of weights to consider the total weight taken
    weight_sum = np.sum(weight, axis=1)
    
    # Balance heuristic value: favor higher density and lower sparsity
    heuristic_value = density - sparsity - weight_sum
    
    # Normalize heuristic value to avoid dominance
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce diversity by ensuring items with zero weight do not have zero heuristic
    zero_weight_mask = weight_sum < 1e-8
    combined_heuristic = np.where(zero_weight_mask, 1e-8, normalized_heuristic)
    
    return combined_heuristic
```
