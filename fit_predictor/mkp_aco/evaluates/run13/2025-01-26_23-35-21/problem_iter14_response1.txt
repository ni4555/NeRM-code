```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize values
    normalized_prize = prize / np.max(prize)
    
    # Calculate the density, which balances the value and weight
    density = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity to balance the packedness of the knapsack
    sparsity = np.sum(weight, axis=1) / np.sum(weight)
    
    # Combine density and sparsity with appropriate weights
    heuristic = 0.6 * density + 0.4 * sparsity
    
    # Introduce a diversity factor based on the standard deviation of density
    diversity_factor = np.std(density)
    
    # Adjust the heuristic by the diversity factor
    heuristic = heuristic * diversity_factor
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic / np.max(heuristic)
    
    return normalized_heuristic
```
