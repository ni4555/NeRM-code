```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Identify dominated items (those with lower density but equal or higher weight sum)
    dominated_mask = np.any((density[:, np.newaxis] < density) & (weight_sum[:, np.newaxis] >= weight_sum), axis=0)
    non_dominated_items = np.where(~dominated_mask)[0]
    
    # Exclude dominated items
    density = density[non_dominated_items]
    weight_sum = weight_sum[non_dominated_items]
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Introduce exploration and exploitation by considering the balance between the density and weight sum
    heuristic_value = density * (1 - weight_sum / np.sum(weight_sum))
    
    # Combine the heuristic value with the diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Introduce randomness for diverse solution sampling
    random_factor = np.random.rand(len(heuristic))
    
    # Create a final heuristic by combining the above factors
    combined_heuristic = heuristic * random_factor
    
    # Normalize by the maximum heuristic value
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    return normalized_combined_heuristic
```
