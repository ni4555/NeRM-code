```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize per unit weight for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the diversity factor based on average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.4 * heuristic_value + 0.3 * diversity_factor + 0.3 * balance_heuristic
    
    # Normalize the combined heuristic by the maximum heuristic value
    max_combined_heuristic = np.max(combined_heuristic)
    if max_combined_heuristic > 0:
        combined_heuristic /= max_combined_heuristic
    
    # Introduce an additional heuristic based on the sum of weights
    sum_weight_heuristic = 1 / (weight_sum + 1e-8)
    
    # Final heuristic is the weighted sum of all heuristics
    final_heuristic = 0.6 * combined_heuristic + 0.4 * sum_weight_heuristic
    
    # Set zero weights to a small value to maintain diversity
    final_heuristic[weight_sum < 1e-8] = 1e-8
    
    return final_heuristic
```
