```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize values
    normalized_prize = prize / np.max(prize)
    
    # Calculate the density which balances the value and weight
    density = normalized_prize / np.sum(weight, axis=1)
    
    # Normalize the weight sum to a range between 0 and 1
    weight_sum_normalized = weight.sum(axis=1) / np.sum(weight)
    
    # Calculate the sparsity to balance the packedness of the knapsack
    sparsity = 1 - weight_sum_normalized
    
    # Create a heuristic that is a weighted sum of density and sparsity
    heuristic = density * (1 - sparsity)
    
    # Introduce a diversity factor based on the standard deviation of density
    diversity_factor = np.std(density)
    
    # Adjust heuristic by diversity factor
    heuristic = heuristic * diversity_factor
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic / np.max(heuristic)
    
    return normalized_heuristic
```
