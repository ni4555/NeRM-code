```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight
    normalized_prize = prize / np.max(prize)
    normalized_weight = weight / np.max(weight)
    
    # Calculate density
    density = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Calculate sparsity
    sparsity = np.sum(normalized_weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate the balance between high density and low sparsity
    balance = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Calculate the balance between density and weight sum
    balance_density_weight = density / np.sum(normalized_weight, axis=1)
    
    # Introduce randomness with a penalty for high sparsity
    randomness = np.random.rand(len(prize))
    randomness[sparsity > 0.5] *= -1
    
    # Combine the metrics
    combined_heuristic = balance * balance_density_weight + randomness
    
    # Normalize the heuristics
    normalized_heuristic = combined_heuristic / np.max(combined_heuristic)
    
    # Set a minimum value to ensure diversity
    min_value = 1e-8
    normalized_heuristic[normalized_weight.sum(axis=1) < min_value] = min_value
    
    return normalized_heuristic
```
