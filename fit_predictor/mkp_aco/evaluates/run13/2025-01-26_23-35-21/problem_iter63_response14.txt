```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1) / np.sum(weight, axis=1)
    
    # Create a heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity)
    
    # Introduce randomness based on the prize value
    randomness = prize / np.max(prize)
    
    # Integrate randomness into the heuristic to promote diversity
    heuristic = heuristic_value * randomness
    
    # Prune dominated items by removing items with zero prize
    dominated_items = (prize < 1e-8)
    heuristic[dominated_items] = 0
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    final_heuristic = heuristic * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = final_heuristic / (np.max(final_heuristic) + 1e-8)
    
    return normalized_heuristic
```
