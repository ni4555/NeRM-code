```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized value per unit weight
    value_per_weight = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate a dominance metric
    dominance_metric = np.max(value_per_weight) / value_per_weight
    
    # Introduce a diversity factor based on the average sparsity
    average_sparsity = np.mean(sparsity)
    diversity_factor = (1 - sparsity) / (average_sparsity + 1e-8)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = value_per_weight * diversity_factor
    
    # Introduce a penalty for items that are too sparse or have high dominance
    penalty_factor = np.maximum(0, 1 - sparsity)
    penalty_factor = np.where(dominance_metric > 1.5, 1 - dominance_metric, penalty_factor)
    
    # Combine the heuristic value with the penalty factor
    adjusted_heuristic = heuristic_value * penalty_factor
    
    # Normalize the adjusted heuristic values to maintain a range between 0 and 1
    normalized_heuristic = adjusted_heuristic / (np.max(adjusted_heuristic) + 1e-8)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(value_per_weight)
    density_factor = value_per_weight / (average_density + 1e-8)
    
    # Combine the normalized heuristic with the density factor
    final_heuristic = normalized_heuristic * density_factor
    
    # Normalize to ensure the sum is 1 to maintain the total capacity constraint
    final_heuristic /= np.sum(final_heuristic)
    
    # Set zero weights to a small value to maintain diversity
    final_heuristic[weight_sum < 1e-8] = 1e-8
    
    return final_heuristic
```
