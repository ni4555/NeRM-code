```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize and weight to encourage items with higher values and lower weights
    max_prize = np.max(prize)
    max_weight = np.max(np.sum(weight, axis=1))
    normalized_prize = prize / max_prize + 1e-8
    normalized_weight = np.sum(weight, axis=1) / max_weight + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = (prize**2) / (max_prize**2 * np.sum(weight**2, axis=1) + 1e-8)

    # Identify dominated items by comparing prizes and introduce randomness
    dominated_mask = normalized_prize < np.percentile(normalized_prize, 90)
    normalized_prize[dominated_mask] = 0
    random_factor = np.random.rand(n) + 1e-8

    # Calculate a heuristic based on normalized prize, value-to-weight ratio, and randomness
    heuristic = (0.5 * normalized_prize +
                 0.3 * value_to_weight_ratio +
                 0.2 * (1 - normalized_weight) +
                 0.0 * random_factor)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(normalized_prize == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
