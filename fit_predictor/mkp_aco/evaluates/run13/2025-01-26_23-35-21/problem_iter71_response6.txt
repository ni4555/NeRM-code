```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Prune dominated items
    dominated_mask = np.any(prize < weight, axis=1)
    non_dominated_items = ~dominated_mask
    
    # Normalize diverse metrics
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Balance exploration and exploitation
    exploration_factor = np.random.rand(len(prize))
    exploitation_factor = density
    
    # Fostering diversity with randomization
    diversity_factor = (np.random.rand(len(prize)) - 0.5) * 2
    
    # Combine factors to determine the heuristic
    heuristic = exploration_factor * exploitation_factor + diversity_factor
    
    # Apply the pruning mask
    heuristic[~non_dominated_items] = 0
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Ensure no zero heuristic values to maintain diversity
    normalized_heuristic[normalized_heuristic == 0] = 1e-8
    
    return normalized_heuristic
```
