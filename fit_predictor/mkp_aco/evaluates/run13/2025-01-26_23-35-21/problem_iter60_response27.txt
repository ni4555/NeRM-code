```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the average density
    average_density = np.mean(density)
    
    # Identify dominated items (items with a lower density than the average)
    dominated_items = density < average_density
    
    # Prune dominated items
    density[dominated_items] = 0
    
    # Introduce randomness for exploration
    random_factor = np.random.rand(len(density))
    
    # Balance exploration and exploitation
    exploration_exploitation_balance = 0.5
    
    # Calculate the heuristic
    heuristic = (density + random_factor) * exploration_exploitation_balance
    
    # Normalize the heuristic
    normalized_heuristic = heuristic / (np.sum(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_items = np.sum(weight, axis=1) < 1e-8
    normalized_heuristic[zero_weight_items] = 1e-8
    
    # Maintain diversity by setting low and high density items to zero, but not too many
    min_density_threshold = np.percentile(density, 5)
    high_density_threshold = np.percentile(density, 95)
    low_density_items = np.where(density < min_density_threshold)
    high_density_items = np.where(density > high_density_threshold)
    num_low = len(low_density_items)
    num_high = len(high_density_items)
    diversity_threshold = min(num_low, num_high)
    normalized_heuristic[low_density_items] = 0
    normalized_heuristic[high_density_items] = 0
    
    # Ensure that the sum of heuristics is close to 1
    normalized_heuristic = normalized_heuristic / np.sum(normalized_heuristic)
    
    return normalized_heuristic
```
