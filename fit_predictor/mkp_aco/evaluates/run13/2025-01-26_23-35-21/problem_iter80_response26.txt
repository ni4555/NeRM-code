```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize density
    normalized_density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Normalize sparsity
    normalized_sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Combine normalized density and sparsity using a balance metric
    balance_metric = normalized_density + (1 - normalized_sparsity)

    # Avoid selecting items with zero weight
    non_zero_weight_mask = np.sum(weight, axis=1) > 0
    balance_metric[~non_zero_weight_mask] = 0

    # Normalize the balance metric
    normalized_balance_metric = balance_metric / (np.max(balance_metric) + 1e-8)

    # Calculate the average balance metric for diversity factor
    average_balance_metric = np.mean(normalized_balance_metric)

    # Create diversity factor
    diversity_factor = normalized_balance_metric / (average_balance_metric + 1e-8)

    return diversity_factor
```
