```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1) + 1e-8

    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Prune dominated items early by considering low density and sparsity
    dominated_mask = (density < np.percentile(density, 95)) | (sparsity < np.percentile(sparsity, 95))
    density[dominated_mask] = 0
    sparsity[dominated_mask] = 0

    # Balance the metrics with a weighted sum, giving higher weight to higher value-to-weight ratio
    heuristic = (0.5 * density +
                 0.3 * (1 - sparsity) +
                 0.2 * value_to_weight_ratio)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) / (np.max(np.random.rand(n)) + 1e-8)

    # Combine the normalized heuristic with randomness
    final_heuristic = normalized_heuristic * random_factor

    # Introduce a penalty for high sparsity and a refinement based on value-to-weight ratio
    high_sparsity_penalty = sparsity * 0.1
    final_heuristic *= (1 - high_sparsity_penalty)

    # Normalize the final heuristic to ensure it's between 0 and 1
    final_heuristic /= (np.max(final_heuristic) + 1e-8)

    return final_heuristic
```
