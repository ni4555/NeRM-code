```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate a diversity metric by considering the minimum density
    diversity = np.min(density) / np.max(density)
    
    # Combine density, sparsity, and diversity to create a heuristic value
    heuristic_value = density * (1 - sparsity) * diversity
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Apply a threshold to manage sparsity and ensure positive values
    thresholded_heuristic = np.clip(normalized_heuristic, 0.1, 1)
    
    return thresholded_heuristic
```
