```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize value per unit weight
    prize_per_weight = prize / np.sum(weight, axis=1)
    
    # Diversity based on prize per weight variance
    diversity = np.var(prize_per_weight)
    
    # Sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Adaptability factor considering the ratio of the sum of weights to the total weight capacity
    adaptability_factor = np.sum(weight, axis=1) / (m * n)
    
    # Randomness factor to introduce randomness and avoid local optima
    randomness_factor = np.random.rand(n)
    
    # Calculate the heuristic value by combining the factors
    heuristic = 0.6 * diversity + 0.2 * sparsity + 0.1 * adaptability_factor + 0.1 * randomness_factor
    
    # Normalize the heuristic to ensure all values are between 0 and 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
