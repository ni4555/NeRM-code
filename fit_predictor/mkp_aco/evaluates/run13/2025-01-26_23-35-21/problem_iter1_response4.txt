```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to average weight across dimensions
    prize_to_avg_weight = prize / np.mean(weight, axis=1)
    # Calculate the ratio of prize to sum of weights across dimensions
    prize_to_sum_weight = prize / np.sum(weight, axis=1)
    # Combine the factors with a weighted sum, where we give more weight to the sum of weights
    combined_factor = 0.6 * prize_to_avg_weight + 0.4 * prize_to_sum_weight
    # Sparsify the heuristics by setting a threshold and setting unpromising elements to zero
    threshold = np.max(combined_factor)
    heuristics = np.where(combined_factor >= threshold, combined_factor, 0)
    return heuristics
```
