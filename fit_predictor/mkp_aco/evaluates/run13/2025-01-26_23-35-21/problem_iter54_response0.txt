```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8
    
    # Calculate the density of each item
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8
    
    # Calculate a balance metric between density and sparsity
    balance_metric = density - sparsity
    
    # Introduce randomness to encourage diversity and avoid local optima
    random_factor = np.random.rand(n) * 0.1 + 0.05
    
    # Create a metric that considers balance and randomness
    heuristic_metric = balance_metric + random_factor
    
    # Prune dominated solutions by removing those with a heuristic metric below the 95th percentile
    dominated_prune_threshold = np.percentile(heuristic_metric, 95)
    heuristics_pruned = np.where(heuristic_metric >= dominated_prune_threshold, heuristic_metric, 0)
    
    # Normalize heuristics to ensure the sum is close to 1
    normalized_heuristic = heuristics_pruned / np.sum(heuristics_pruned)
    
    # Maintain diversity by setting low density and sparsity items to zero
    min_density_threshold = np.percentile(density, 5)
    min_sparsity_threshold = np.percentile(sparsity, 5)
    normalized_heuristic[np.where(density < min_density_threshold)] = 0
    normalized_heuristic[np.where(sparsity < min_sparsity_threshold)] = 0
    
    return normalized_heuristic
```
