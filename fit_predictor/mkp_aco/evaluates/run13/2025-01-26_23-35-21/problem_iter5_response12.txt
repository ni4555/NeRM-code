```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate sparsity by considering the number of dimensions an item is non-zero
    sparsity = 1 - np.sum(weight == 0, axis=1) / weight.shape[1]
    # Normalize the sparsity to encourage diversity
    sparsity = (sparsity - np.min(sparsity)) / (np.max(sparsity) - np.min(sparsity))
    # Calculate the normalized variance to encourage diversity in weight distribution
    variance = np.var(weight, axis=1)
    variance_normalized = (variance - np.min(variance)) / (np.max(variance) - np.min(variance))
    # Combine the utility, sparsity, and normalized variance
    heuristics = utility * sparsity * variance_normalized
    # Apply a smoothing to the heuristics to avoid too sharp changes
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
