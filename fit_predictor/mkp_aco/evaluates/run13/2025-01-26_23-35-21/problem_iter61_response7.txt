```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize per unit weight
    normalized_prize = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity of the item (percentage of zero weights)
    sparsity = np.mean(weight, axis=1)
    
    # Calculate the diversity factor (items with higher density should be more promising)
    diversity_factor = normalized_prize / np.mean(normalized_prize)
    
    # Calculate the balance factor (items with higher balance between prize and weight should be more promising)
    balance_factor = normalized_prize - sparsity
    
    # Combine factors using a weighted sum
    combined_heuristic = 0.5 * diversity_factor + 0.5 * balance_factor
    
    # Normalize the heuristic values
    max_heuristic = np.max(combined_heuristic)
    normalized_heuristic = combined_heuristic / (max_heuristic + 1e-8)
    
    # Prune dominated items (those with lower combined heuristic value)
    # We could use a threshold or simply remove them, here we'll set them to zero
    normalized_heuristic[combined_heuristic < np.min(combined_heuristic)] = 0
    
    return normalized_heuristic
```
