```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items by removing those with low density
    max_density = np.max(density)
    dominated_mask = density < max_density / 1.5
    density[dominated_mask] = 0
    
    # Sparsify the density by setting values to zero that are below a certain threshold
    sparsity_threshold = np.percentile(density, 25)
    density[density < sparsity_threshold] = 0
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce randomness to the heuristic to increase diversity
    random_factor = np.random.rand(len(weight))
    
    # Create a final heuristic by combining the metrics
    heuristic = density * random_factor - weight_sum
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a balance factor between density and sparsity
    balance_factor = (density + sparsity_threshold) / (density + sparsity_threshold + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_factor
    
    return combined_heuristic
```
