```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize to encourage items with higher values
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Normalize the weight to encourage items with lower weights
    max_weight = np.max(np.sum(weight, axis=1))
    normalized_weight = np.sum(weight, axis=1) / max_weight

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / (np.sum(weight**2, axis=1) + 1e-8)

    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1)

    # Identify dominated items by comparing prizes and introduce randomness
    dominated_mask = normalized_prize < np.percentile(normalized_prize, 90)
    normalized_prize[dominated_mask] = 0
    random_factor = np.random.rand(n)

    # Combine metrics to form the heuristic
    heuristic = (0.4 * normalized_prize +
                 0.3 * value_to_weight_ratio +
                 0.2 * (1 - normalized_weight) +
                 0.1 * random_factor)

    # Apply a diversity penalty to encourage inclusion of items that do not follow the trend
    diversity_penalty = 0.1 * (1 - np.mean(sparsity))

    # Adjust the heuristic based on diversity penalty
    heuristic = np.maximum(heuristic - diversity_penalty, 0)

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    return normalized_heuristic
```
