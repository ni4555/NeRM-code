```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to avoid dominance by a single high-value item
    normalized_prize = prize / np.sum(prize)
    
    # Calculate normalized density considering the dimensionality of the weight
    density = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate sparsity
    sparsity = 1 - (np.sum(weight, axis=1) / np.sum(weight, axis=1))
    
    # Introduce diversity factor based on the variance of the density
    diversity_factor = (np.var(density) + 1e-8) ** 0.5
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity)
    
    # Incorporate diversity factor to avoid overfitting
    heuristic = heuristic_value * diversity_factor
    
    # Introduce penalties for outliers: items with very low density or high sparsity
    penalty = np.where(density < 0.01, 1.5 * (1 - density), 1)
    penalty = np.where(sparsity > 0.9, 1.5 * sparsity, penalty)
    
    # Apply the penalty to the heuristic
    penalized_heuristic = heuristic * penalty
    
    # Normalize by the maximum penalized heuristic value
    normalized_heuristic = penalized_heuristic / (np.max(penalized_heuristic) + 1e-8)
    
    # Ensure no negative heuristic values by clamping
    normalized_heuristic = np.clip(normalized_heuristic, 0, 1)
    
    return normalized_heuristic
```
