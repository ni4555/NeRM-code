```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Initialize the heuristic array with a small value
    heuristic = np.zeros_like(prize)
    
    # Calculate the density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a penalty for items with extreme sparsity
    penalty = 1 / (sparsity + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Encourage diversity by using a combination of density and penalty
    heuristic += density * (1 - penalty)
    
    # Encourage items with a good balance between density and sparsity
    heuristic += (density - sparsity) / (density + sparsity + 1e-8)
    
    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    
    # Ensure no item has a zero heuristic value
    heuristic[weight_sum < 1e-8] = 1e-8
    
    return heuristic
```
