```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate the diversity factor based on the variance of density
    diversity_factor = density / np.var(density)

    # Create a balanced heuristic value by blending metrics
    balance_heuristic = density * (1 - sparsity)

    # Introduce randomness for exploration
    random_factor = np.random.rand(n)

    # Combine the heuristic with diversity and randomness
    combined_heuristic = balance_heuristic * diversity_factor + random_factor

    # Normalize by the maximum heuristic value
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)

    # Set zero weights to a small value to maintain diversity
    normalized_combined_heuristic[np.sum(weight, axis=1) < 1e-8] = 1e-8

    return normalized_combined_heuristic
```
