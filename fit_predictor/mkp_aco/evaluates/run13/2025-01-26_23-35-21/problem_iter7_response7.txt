```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate diversity based on sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate risk based on the average weight per dimension
    risk = np.mean(weight, axis=1)
    
    # Combine utility, diversity, and risk into a single heuristic value
    heuristic_value = (density + (1 - sparsity) - risk) / 3.0
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Set a threshold for sparsity to avoid items with very low sparsity being overvalued
    threshold = 0.5
    normalized_heuristic[sparsity < threshold] = 0.0
    
    return normalized_heuristic
```
