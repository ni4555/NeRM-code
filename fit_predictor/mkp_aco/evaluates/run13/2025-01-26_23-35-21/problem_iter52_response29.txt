```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce diversity based on the average density and sparsity
    average_density = np.mean(density)
    average_sparsity = np.mean(sparsity)
    diversity_density = density / (average_density + 1e-8)
    diversity_sparsity = sparsity / (average_sparsity + 1e-8)
    
    # Calculate the sum of weights for balance
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic that considers density, sparsity, and weight sum
    heuristic = density * diversity_sparsity + sparsity * diversity_density - weight_sum
    
    # Normalize by the maximum heuristic value to scale the heuristics
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a balance factor based on the difference between high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum to reflect complementary strengths
    combined_heuristic = 0.5 * normalized_heuristic + 0.5 * balance_factor
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
