```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(len(density))
    
    # Prune dominated items
    dominated_items = np.argsort(density)[::-1]
    non_dominated_indices = np.ones(len(density), dtype=bool)
    for i, idx in enumerate(dominated_items):
        if i > 0:
            non_dominated_indices[dominated_items[:i]] = False
    
    # Adjust the heuristics for dominated items
    combined_heuristic[~non_dominated_indices] = 0
    
    # Maintain diversity by ensuring at least one item with zero heuristic
    num_items_to_set_zero = np.sum(combined_heuristic > 0)
    if num_items_to_set_zero > 0:
        indices_to_set_zero = np.where(combined_heuristic > 0)[0]
        zero_indices = indices_to_set_zero[np.random.choice(num_items_to_set_zero, size=1, replace=False)]
        combined_heuristic[zero_indices] = 0
    
    return combined_heuristic
```
