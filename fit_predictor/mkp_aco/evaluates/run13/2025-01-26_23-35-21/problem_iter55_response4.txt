```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Initialize a high penalty for dominated items
    dominated_penalty = 1e8

    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Prune dominated items (those with lower density than any other item with less or equal weight)
    max_density_per_weight = np.max(density, axis=0)
    is_dominated = np.any(density < max_density_per_weight, axis=1)
    density[is_dominated] = dominated_penalty

    # Normalize the remaining densities
    normalized_density = density / (np.max(density) + 1e-8)

    # Calculate sparsity and balance metrics
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    balance = (density - sparsity) / (density + sparsity + 1e-8)

    # Introduce randomness to promote diversity
    random_factor = np.random.rand(*density.shape)
    
    # Create a combined heuristic using a weighted sum of metrics
    combined_heuristic = 0.5 * normalized_density + 0.3 * balance + 0.2 * random_factor

    # Ensure all weights are considered by adding a small value to zero weights
    combined_heuristic[weight_sum < 1e-8] = 1e-8

    return combined_heuristic
```
