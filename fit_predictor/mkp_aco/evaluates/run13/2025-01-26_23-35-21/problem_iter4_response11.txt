```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the profit to weight ratio for each item
    profit_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity for each item
    sparsity = (np.sum(weight, axis=1) == 1) * 1.0
    
    # Calculate the maximum profit per weight dimension
    max_profit_per_weight = np.max(prize / weight, axis=0)
    
    # Determine the threshold based on the maximum profit per weight dimension
    threshold = max_profit_per_weight * 0.1
    
    # Combine the profit to weight ratio, sparsity, and dynamic threshold
    heuristics = np.where(profit_to_weight_ratio > threshold, profit_to_weight_ratio, 0)
    heuristics = heuristics * sparsity
    
    return heuristics
```
