```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize and weight by the maximum value in each dimension
    normalized_prize = prize / np.max(weight, axis=1)[:, np.newaxis] + 1e-8
    normalized_weight = weight / np.max(weight, axis=1)[:, np.newaxis] + 1e-8

    # Calculate the density as the prize divided by the weight
    density = normalized_prize / (normalized_weight + 1e-8)

    # Calculate the sparsity as the average weight over the maximum weight
    sparsity = np.sum(normalized_weight, axis=1) / (np.max(normalized_weight, axis=1) + 1e-8)

    # Calculate the balance between density and sparsity
    balance = density / (1 + sparsity)

    # Introduce a diversity factor by considering the average density
    average_density = np.mean(density)
    diversity = density / (average_density + 1e-8)

    # Create a final heuristic value by combining balance and diversity
    heuristic = balance * diversity

    # Normalize the heuristic to ensure it sums to 1
    heuristic /= np.sum(heuristic)

    # Introduce a small positive value to avoid division by zero
    heuristic = np.maximum(heuristic, 1e-8)

    return heuristic
```
