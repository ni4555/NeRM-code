```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a base heuristic value based on the ratio of prize to total weight per item
    base_heuristic = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness for diversity
    random_component = np.random.rand(*base_heuristic.shape)
    
    # Prune dominated items by checking dominance condition based on prize to weight ratio
    dominated_mask = np.zeros_like(base_heuristic)
    for i in range(len(dominated_mask)):
        for j in range(len(dominated_mask)):
            if i != j and prize[j] / np.sum(weight[j]) > prize[i] / np.sum(weight[i]):
                dominated_mask[i] = 1
                break
    
    # Apply the dominance pruning to the heuristics
    base_heuristic[dominated_mask] = 0
    
    # Introduce a sparsity factor to encourage diversity
    sparsity_factor = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate a diversity heuristic value
    diversity_heuristic = random_component * sparsity_factor
    
    # Create a final heuristic by blending the base and diversity heuristics
    final_heuristic = base_heuristic + diversity_heuristic
    
    # Normalize by the maximum heuristic value
    normalized_final_heuristic = final_heuristic / (np.max(final_heuristic) + 1e-8)
    
    # Return the normalized heuristics
    return normalized_final_heuristic
```
