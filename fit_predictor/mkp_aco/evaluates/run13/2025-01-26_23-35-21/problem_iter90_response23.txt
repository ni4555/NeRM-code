```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Identify dominated items (where there is another item with equal or higher density but lower weight sum)
    dominated_items = np.where(np.any((density[:, np.newaxis] >= density) & 
                                      (np.sum(weight, axis=1) > weight.sum(axis=1)), axis=0))[0]
    non_dominated_items = np.setdiff1d(range(len(density)), dominated_items)

    # Calculate the diversity of the non-dominated items
    diversity = np.sort(density[non_dominated_items])[::-1]

    # Calculate sparsity for each item, normalized by the max sparsity of non-dominated items
    sparsity = np.sum(weight, axis=1) / np.max(np.sum(weight[non_dominated_items], axis=1))
    
    # Calculate a balance heuristic that considers both high density and low sparsity
    balance_heuristic = (density / diversity) * (1 - sparsity)

    # Introduce randomness for diversity, ensuring non-zero values
    randomness = np.random.rand(n) / (np.max(np.random.rand(n)) + 1e-8)

    # Combine the balance heuristic and randomness to create the final heuristic
    heuristic = balance_heuristic + randomness

    # Ensure non-negative heuristics after adding randomness
    heuristic = np.clip(heuristic, 0, 1)

    return heuristic
```
