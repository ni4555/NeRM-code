```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics array with zeros
    heuristics = np.zeros_like(prize)
    
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items (those with lower density and sparsity)
    non_dominated = density > sparsity
    
    # Blend density and sparsity into a heuristic value
    heuristic_value = density * (1 - sparsity)
    
    # Introduce randomness to explore the solution space
    random_factor = np.random.rand(len(prize))
    
    # Combine the heuristic value with randomness
    heuristics[non_dominated] = heuristic_value[non_dominated] * random_factor[non_dominated]
    
    # Normalize the heuristics to maintain a balance between exploration and exploitation
    max_heuristic = np.max(heuristics)
    heuristics = heuristics / (max_heuristic + 1e-8)
    
    return heuristics
```
