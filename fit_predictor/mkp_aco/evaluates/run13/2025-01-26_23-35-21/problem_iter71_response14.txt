```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Prune dominated items based on prize-to-weight ratio
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    dominated_indices = np.argsort(density)[::-1]
    non_dominated_indices = dominated_indices[:int(len(dominated_indices) * 0.8)]
    
    # Normalize density to promote diversity
    density_normalized = density[non_dominated_indices] / np.max(density[non_dominated_indices])
    
    # Sparsify by ensuring at least one weight is greater than a threshold
    sparsity_threshold = 0.1
    sparsity_filtered = np.where(sparsity[non_dominated_indices] < sparsity_threshold, density_normalized, 0)
    
    # Introduce a diversity factor to maintain a variety of selections
    diversity_factor = sparsity_filtered / np.mean(sparsity_filtered)
    
    # Normalize by the maximum heuristic value
    max_heuristic = np.max(diversity_factor)
    heuristic = diversity_factor / (max_heuristic + 1e-8)
    
    # Introduce an additional heuristic based on balance
    balance_heuristic = (density_normalized - sparsity_filtered) / (density_normalized + sparsity_filtered + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * heuristic + 0.4 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight[:, 0] < 1e-8] = 1e-8
    
    return combined_heuristic
```
