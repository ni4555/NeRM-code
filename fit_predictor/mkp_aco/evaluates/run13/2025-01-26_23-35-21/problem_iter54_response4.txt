```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate the density of each item
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate a balance metric between density and sparsity
    balance_metric = density - sparsity

    # Calculate a diversity score based on the variance of the weights
    diversity_score = np.var(np.sum(weight, axis=1))

    # Introduce randomness to encourage diversity and avoid local optima
    random_factor = np.random.rand(n)

    # Combine the balance metric, diversity score, and randomness into a heuristic score
    heuristic_score = balance_metric * 0.6 + diversity_score * 0.3 + random_factor * 0.1

    # Prune dominated solutions by setting those with a low balance metric to zero
    balance_prune_threshold = np.percentile(balance_metric, 5)
    heuristic_score[np.where(balance_metric < balance_prune_threshold)] = 0

    # Normalize the heuristic scores to ensure the sum is close to 1
    normalized_heuristic = heuristic_score / np.sum(heuristic_score)

    # Maintain diversity by setting low density items to zero
    min_density_threshold = np.percentile(density, 5)
    normalized_heuristic[np.where(density < min_density_threshold)] = 0

    return normalized_heuristic
```
