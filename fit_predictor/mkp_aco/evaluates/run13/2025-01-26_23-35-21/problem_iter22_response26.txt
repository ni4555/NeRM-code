```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value
    heuristic_value = density / (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Promote diversity by penalizing highly similar items
    for i in range(weight.shape[0]):
        for j in range(i + 1, weight.shape[0]):
            similarity = np.sum((weight[i] == weight[j]))
            if similarity == weight.shape[1]:  # Items are identical
                normalized_heuristic[j] *= 0.5
    
    # Further refine the heuristic by penalizing if an item is not unique in its dimension
    unique_items = np.apply_along_axis(lambda x: np.sum(x) == 1, axis=1, arr=weight)
    non_unique_penalty = np.abs(np.sum(unique_items, axis=0) - weight.shape[0])
    normalized_heuristic -= non_unique_penalty
    
    # Normalize by the maximum heuristic value after penalty adjustments
    normalized_heuristic /= np.max(normalized_heuristic + 1e-8)
    
    return normalized_heuristic
```
