```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate value-to-weight ratio
    value_density_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Prune dominated items based on density
    dominated_prune_threshold = np.percentile(density, 90)
    heuristics_pruned = np.where(density >= dominated_prune_threshold, density, 0)

    # Calculate the fraction of non-dominated items
    non_dominated_fraction = np.count_nonzero(heuristics_pruned) / n

    # Balance between density and sparsity
    balance_score = 0.5 * heuristics_pruned + 0.5 * (1 - sparsity)

    # Consider value-to-weight ratio
    heuristic = balance_score + value_density_ratio

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the scores with randomness
    combined_score = heuristic + random_factor

    # Normalize heuristics
    normalized_heuristic = combined_score / (np.max(combined_score) + 1e-8)

    # Ensure diversity by giving a small positive heuristic value if all items are dominated
    if non_dominated_fraction == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
