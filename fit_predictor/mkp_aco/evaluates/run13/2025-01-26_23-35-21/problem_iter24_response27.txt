```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prizes and weights
    normalized_prize = prize / np.max(prize)
    normalized_weight = weight / np.max(weight, axis=1, keepdims=True)
    
    # Calculate the normalized density
    density = normalized_prize / (1 + np.sum(normalized_weight, axis=1))
    
    # Introduce a diversity factor based on the normalized weights
    diversity_factor = np.sum(normalized_weight, axis=1) / (np.mean(normalized_weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(normalized_weight, axis=1)
    
    # Create a balance metric that favors high density and encourages diversity
    balance_metric = density - sparsity * diversity_factor
    
    # Normalize the heuristic values
    normalized_heuristic = balance_metric / (np.max(balance_metric) + 1e-8)
    
    # Ensure at least one item is not zero to maintain diversity
    non_zero_indices = np.where(np.sum(normalized_weight, axis=1) > 1e-8)[0]
    if non_zero_indices.size > 0:
        min_heuristic = np.min(normalized_heuristic[non_zero_indices])
        normalized_heuristic = np.where(normalized_heuristic == 0, min_heuristic, normalized_heuristic)
    
    return normalized_heuristic
```
