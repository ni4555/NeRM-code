```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    # Calculate the sparsity of each item (1 / sum of each dimension's weight)
    sparsity = 1 / np.sum(weight, axis=1)
    # Introduce diversity by considering the standard deviation
    std_dev = np.std(weight, axis=1)
    diversity_factor = 1 / (1 + std_dev)
    # Incorporate the ratio of prize to density for a balance between value and compactness
    value_density_ratio = prize / density
    # Calculate the sum of the product of normalized values to balance the heuristics
    sum_normalized_values = np.sum((density * sparsity * diversity_factor * value_density_ratio) / np.max((density * sparsity * diversity_factor * value_density_ratio)))
    # Normalize the utility scores to sum to 1
    utility = (density * sparsity * diversity_factor * value_density_ratio) / sum_normalized_values
    # Apply a logarithmic transformation to ensure non-negative values and to avoid dominance of very high values
    utility = np.log1p(utility)
    # Normalize the utility scores to ensure values are comparable and between 0 and 1
    utility /= np.max(utility)
    # Ensure no zero values as zero would mean an item is never selected
    utility[utility == 0] = np.finfo(float).eps
    return utility
```
