```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize per unit weight
    prize_per_weight = prize / np.sum(weight, axis=1)

    # Calculate the density of each item
    density = prize_per_weight / (np.max(prize_per_weight) + 1e-8)

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Introduce randomness for diversity
    randomness = np.random.rand(n)

    # Calculate the diversity metric using the density and sparsity
    diversity_metric = (density - np.mean(density)) + (sparsity - np.mean(sparsity))

    # Calculate dominance by comparing each item's density with the 95th percentile of the density
    dominance = np.where(density >= np.percentile(density, 95), 1, 0)

    # Calculate the adaptability factor by considering the ratio of the sum of weights to the total weight capacity
    adaptability_factor = np.sum(weight, axis=1) / (m * n)

    # Combine the heuristics using a weighted sum
    heuristics = (0.5 * diversity_metric +
                  0.3 * dominance +
                  0.1 * adaptability_factor +
                  0.1 * randomness)

    # Normalize heuristics to ensure the sum is close to 1
    normalized_heuristics = heuristics / np.sum(heuristics)

    return normalized_heuristics
```
