```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity factor as the ratio of each item's prize to the sum of all prizes
    diversity_factor = prize / np.sum(prize)
    
    # Create a heuristic value by combining density and diversity factor
    heuristic_value = density * diversity_factor
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic
    
    # Introduce a balance factor that encourages diversity by considering the minimum prize per dimension
    balance_factor = np.min(prize / np.sum(weight, axis=1))
    
    # Combine heuristics using a weighted sum with a focus on diversity
    combined_heuristic = 0.6 * heuristic_value + 0.4 * balance_factor
    
    # Return the combined heuristic values
    return combined_heuristic
```
