```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Introduce diversity based on the average density and sparsity
    average_density = np.mean(density)
    average_sparsity = np.mean(sparsity)
    diversity_density = density / (average_density + 1e-8)
    diversity_sparsity = sparsity / (average_sparsity + 1e-8)

    # Calculate the balance factor based on the standard deviation of density and sparsity
    balance_factor_density = np.std(density)
    balance_factor_sparsity = np.std(sparsity)
    balance_factor = (balance_factor_density + balance_factor_sparsity) / 2

    # Introduce randomness to encourage exploration of diverse solutions
    random_factor = np.random.rand(n)

    # Create a heuristic considering density, sparsity, diversity, and balance
    heuristic = density * diversity_sparsity + sparsity * diversity_density + balance_factor - random_factor

    # Normalize the heuristic values to ensure they are between 0 and 1
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Set zero weights to a small value to maintain diversity
    zero_weight_index = np.where(np.sum(weight, axis=1) < 1e-8)
    normalized_heuristic[zero_weight_index] = 1e-8

    return normalized_heuristic
```
