```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize density by considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Normalize sparsity for each dimension
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)

    # Create a heuristic value that balances density and sparsity
    heuristic_value = density * (1 - sparsity) - weight_sum

    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)

    # Combine heuristic value with diversity factor
    heuristic = heuristic_value * diversity_factor

    # Normalize the heuristic to ensure it is between 0 and 1
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Calculate balance heuristic based on high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)

    # Combine both heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic

    # Introduce mutations to prevent overfitting and add randomness
    mutation_rate = 0.1
    mutation_strength = 0.05
    for i in range(len(combined_heuristic)):
        if np.random.rand() < mutation_rate:
            combined_heuristic[i] += np.random.normal(0, mutation_strength)
            combined_heuristic[i] = np.clip(combined_heuristic[i], 0, 1)

    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8

    return combined_heuristic
```
