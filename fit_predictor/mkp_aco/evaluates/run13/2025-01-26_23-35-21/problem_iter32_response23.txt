```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized prize per unit weight for each item
    density = prize / np.sum(weight, axis=1)
    
    # Introduce a penalty for items with extremely low sparsity (i.e., heavy items)
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    penalty_factor = (1 - sparsity) / (1 - np.min(sparsity))
    
    # Combine density with the penalty factor to form a heuristic value
    heuristic_value = density * penalty_factor
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic
    
    return heuristic_value
```
