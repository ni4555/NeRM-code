```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness to explore solutions
    randomness = np.random.rand(weight.shape[0])
    
    # Prune dominated items by comparing with non-dominated items
    dominance_matrix = np.apply_along_axis(lambda x: np.any(x <= x), axis=1, arr=np.vstack((density, 1 - density)))
    non_dominated_indices = np.where(np.logical_not(dominance_matrix))[0]
    
    # Select the best non-dominated items to maintain diversity
    selected_non_dominated_indices = non_dominated_indices[np.argsort(density[non_dominated_indices])][:min(len(non_dominated_indices), 10)]
    
    # Assign higher heuristic value to non-dominated items
    for index in selected_non_dominated_indices:
        randomness[index] *= 1.5
    
    # Normalize the randomness to maintain balance
    randomness /= np.max(randomness)
    
    # Create a final heuristic by combining density with randomness
    heuristic = density * (1 - randomness)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    return normalized_heuristic
```
