```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Identify dominated items (those with lower density than another item)
    dominated_indices = np.where(np.any(density < np.sort(density)[::-1], axis=1))[0]
    density[dominated_indices] = 0
    
    # Calculate the balance factor between high density and low sparsity
    balance_factor = (density - np.sum(weight, axis=1) / np.sum(weight, axis=1) ** 2) / (
        np.maximum(density, np.sum(weight, axis=1) / np.sum(weight, axis=1) ** 2) + 1e-8)
    
    # Include randomness to balance exploration and exploitation
    randomness = np.random.rand(*density.shape)
    heuristic = balance_factor * randomness
    
    # Normalize by the maximum heuristic value
    max_heuristic = np.max(heuristic[heuristic > 0])
    heuristic[heuristic > 0] /= max_heuristic
    
    # Prune dominated items
    heuristic[density < 1e-8] = 0
    
    return heuristic
```
