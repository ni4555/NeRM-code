```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness
    random_factor = np.random.rand(len(prize))
    
    # Identify dominated items
    dominated_items = np.argsort(density)[:-int(len(prize) * 0.2)]
    for i in dominated_items:
        density[i] = 0  # Prune dominated items
    
    # Create a heuristic based on density, weight, and randomness
    heuristic_value = density * (1 - (np.sum(weight, axis=1) / np.sum(weight, axis=1)[:-int(len(prize) * 0.2)]))
    
    # Normalize heuristic to balance between high density and non-domination
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce additional randomness to ensure diversity
    normalized_heuristic = normalized_heuristic * random_factor
    
    # Return the final heuristics
    return normalized_heuristic
```
