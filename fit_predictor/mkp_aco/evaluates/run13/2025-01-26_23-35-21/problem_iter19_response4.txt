```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize values to maintain consistency across dimensions
    prize_normalized = prize / np.sum(prize)
    
    # Normalize weight values for consistency across dimensions
    weight_normalized = weight / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate density, but emphasize diversity by reducing density impact on low-weight items
    density = prize_normalized / (weight_normalized + 1e-8)
    
    # Promote diversity by increasing the influence of high density values
    diversity = density * (1 / np.argsort(density)[-int(n * 0.1):])
    
    # Use sparsity as a secondary factor, but with reduced influence
    sparsity = 1 - np.mean(weight_normalized, axis=1)
    sparsity_weighted = sparsity * 0.5
    
    # Calculate heuristic based on diversity and sparsity
    heuristic = diversity + sparsity_weighted
    
    # Avoid overfitting by ensuring a balance between diversity and sparsity
    heuristic[heuristic < 0] = 0
    
    # Normalize heuristic to maintain balance
    max_heuristic = np.max(heuristic)
    heuristic_normalized = heuristic / (max_heuristic + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    heuristic_normalized[weight_normalized.sum(axis=1) < 1e-8] = 1e-8
    
    return heuristic_normalized
```
