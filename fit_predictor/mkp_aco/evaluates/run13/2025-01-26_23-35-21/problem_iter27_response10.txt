```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density and sparsity
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce randomness with a Gaussian noise to enhance diversity
    random_noise = np.random.normal(0, 1e-4, prize.shape)
    
    # Use a weighted sum of normalized density and sparsity with randomness
    heuristic = 0.6 * density + 0.4 * sparsity + random_noise
    
    # Normalize the heuristic to prevent any item from dominating
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    
    # Apply a penalty for items that are close to the maximum weight constraint
    penalty = np.sum(weight, axis=1) > (np.max(weight, axis=1) - 1e-8)
    heuristic[penalty] *= 0.5
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    return normalized_heuristic
```
