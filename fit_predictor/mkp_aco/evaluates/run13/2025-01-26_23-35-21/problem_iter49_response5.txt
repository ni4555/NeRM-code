```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate the balance between high density and low sparsity
    balance = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce randomness
    randomness = np.random.rand(weight.shape[0])
    
    # Integrate diversity by considering the difference in density
    diversity = np.abs(np.diff(density)) / (np.max(np.abs(np.diff(density))) + 1e-8)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = 0.5 * balance + 0.5 * randomness
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Maintain diversity by ensuring that similar heuristics are not chosen together
    combined_heuristic = normalized_heuristic * diversity
    
    # Prune dominated solutions by setting high sparsity items to zero
    combined_heuristic[sparsity > 0.5] = 0
    
    return combined_heuristic
```
