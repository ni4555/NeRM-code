```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity of each item (1 / sum of each dimension's weight)
    diversity = 1 / np.sum(weight, axis=1)
    
    # Normalize the density and diversity to be between 0 and 1
    density = (density - np.min(density)) / (np.max(density) - np.min(density))
    diversity = (diversity - np.min(diversity)) / (np.max(diversity) - np.min(diversity))
    
    # Combine density and diversity, and normalize by max value
    combined = (density + diversity) / (1 + np.max(density) + np.max(diversity))
    
    # Create heuristics array with a sparsity threshold
    threshold = 0.5
    heuristics = np.where(combined >= threshold, combined, 0)
    
    return heuristics
```
