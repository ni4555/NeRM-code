```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized prize per unit weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate sparsity for each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Balance metric between high density and low sparsity
    balance_metric = (density - sparsity) / (density + sparsity + 1e-8)

    # Diversity factor based on the standard deviation of the density
    diversity_factor = np.exp(-np.std(density) + 1)

    # Combine balance metric and diversity factor
    heuristic = balance_metric * diversity_factor

    # Apply a penalty to items that are too dense
    penalty_factor_dense = (density - np.mean(density)) / (np.std(density) + 1e-8)
    penalty_factor_dense[penalty_factor_dense < 0] = 0
    heuristic *= (1 - penalty_factor_dense)

    # Apply a penalty to items that are too sparse
    penalty_factor_sparse = (sparsity - np.mean(sparsity)) / (np.std(sparsity) + 1e-8)
    penalty_factor_sparse[penalty_factor_sparse < 0] = 0
    heuristic *= (1 - penalty_factor_sparse)

    # Normalize the heuristic values to be between 0 and 1
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic

    return heuristic
```
