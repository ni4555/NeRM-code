```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the utility as prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity based on the average of the standard deviation of the weight
    sparsity = np.mean(np.std(weight, axis=1))
    
    # Calculate the diversity as the inverse of the variance of the weight across dimensions
    diversity = 1 / np.var(weight, axis=1)
    
    # Combine utility, sparsity, and diversity into a single heuristic value
    heuristic_value = utility * (1 - sparsity) * diversity
    
    # Normalize the heuristic values to ensure they are comparable across different problems
    min_heuristic = np.min(heuristic_value)
    max_heuristic = np.max(heuristic_value)
    
    # Use linear scaling to map the heuristic values to the range [0, 1]
    normalized_heuristic = (heuristic_value - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Cap the normalized heuristic values to avoid extreme values
    capped_heuristics = np.clip(normalized_heuristic, 0, 1)
    
    return capped_heuristics
```
