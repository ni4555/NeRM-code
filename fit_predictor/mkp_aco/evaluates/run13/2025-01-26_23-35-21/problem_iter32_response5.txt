```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prizes to prevent dominance by large prizes
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Normalize weights to handle the multi-dimensional nature of weights
    max_weight_sum = np.max(np.sum(weight, axis=1))
    normalized_weight_sum = np.sum(weight, axis=1) / max_weight_sum

    # Calculate the density of each item, which combines value and weight
    density = normalized_prize / normalized_weight_sum

    # Introduce diversity by considering the sum of weights, encouraging selection of different items
    diversity = np.mean(weight, axis=1) / np.sum(weight, axis=1)

    # Balance the utility and diversity scores, giving more weight to utility
    utility_diversity_balance = 0.7 * density + 0.3 * diversity

    # Normalize the combined heuristic values to maintain a consistent scale
    max_utility_diversity_balance = np.max(utility_diversity_balance)
    normalized_utility_diversity_balance = utility_diversity_balance / (max_utility_diversity_balance + 1e-8)

    # Introduce a sparsity penalty to avoid uniform choices
    sparsity_penalty = np.sum(weight, axis=1) / (n * m)
    sparsity_penalty = np.clip(sparsity_penalty, 0, 1)
    normalized_sparsity_penalty = 1 - sparsity_penalty

    # Combine the normalized utility and diversity balance with the sparsity penalty
    combined_heuristic = normalized_utility_diversity_balance * normalized_sparsity_penalty

    # Introduce randomness to encourage diverse solutions
    randomness = np.random.rand(n)
    normalized_heuristic = combined_heuristic * randomness

    # Normalize heuristic to the range [0, 1]
    normalized_heuristic = normalized_heuristic / (np.max(normalized_heuristic) + 1e-8)

    return normalized_heuristic
```
