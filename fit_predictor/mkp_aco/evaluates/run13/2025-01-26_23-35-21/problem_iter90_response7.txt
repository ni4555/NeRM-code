```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized density and sparsity
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Normalize metrics
    density /= np.sum(density)
    sparsity /= np.sum(sparsity)
    value_to_weight_ratio /= np.sum(value_to_weight_ratio)

    # Identify dominated items using a percentile threshold
    dominated_mask = density < np.percentile(density, 95)
    density[dominated_mask] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Calculate the heuristic using weighted sum of metrics
    heuristic = (0.5 * density +
                 0.3 * value_to_weight_ratio +
                 0.2 * sparsity +
                 0.0 * random_factor)

    # Normalize the heuristic values to sum to 1
    heuristic /= np.sum(heuristic)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.sum(heuristic) == 0:
        heuristic = np.ones(n) * 1e-8

    return heuristic
```
