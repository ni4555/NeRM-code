```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a list to store the heuristics for each item
    heuristics = []

    # Iterate over each item to calculate the heuristic
    for i in range(weight.shape[0]):
        # Calculate the normalized density
        density = prize[i] / np.sum(weight[i])

        # Calculate the sparsity
        sparsity = np.sum(weight[i]) / np.max(weight[i])

        # Calculate the dominance metric
        dominance = 0
        for j in range(weight.shape[0]):
            if j != i and (weight[i] <= weight[j] and prize[i] <= prize[j]):
                dominance += 1

        # Calculate the exploration-exploitation balance using a simple random factor
        random_factor = np.random.rand()

        # Combine all factors to create a heuristic
        heuristic = density * (1 - sparsity) - dominance + random_factor

        # Store the heuristic
        heuristics.append(heuristic)

    # Convert the list of heuristics to a numpy array
    combined_heuristics = np.array(heuristics)

    # Normalize the heuristics
    combined_heuristics = combined_heuristics / np.max(combined_heuristics)

    return combined_heuristics
```
