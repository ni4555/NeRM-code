```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    weight_sum = np.sum(weight, axis=1)
    
    # Balanced heuristic value
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Diversity factor based on average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Final heuristic combining heuristic value and diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Additional heuristic based on balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Random perturbation to encourage randomness
    random_perturbation = np.random.rand(n)
    
    # Perturbed heuristic
    perturbed_heuristic = heuristic * random_perturbation
    
    # Sharpness factor to penalize similarity
    sharpness_factor = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combine all heuristics
    combined_heuristic = 0.6 * perturbed_heuristic + 0.4 * balance_heuristic + sharpness_factor
    
    # Normalize to ensure all values are between 0 and 1
    combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Sparsification step by setting the lowest values to zero
    sparsified_heuristic = combined_heuristic.copy()
    sparsified_heuristic[sparsified_heuristic < np.percentile(combined_heuristic, 5)] = 0
    
    return sparsified_heuristic
```
