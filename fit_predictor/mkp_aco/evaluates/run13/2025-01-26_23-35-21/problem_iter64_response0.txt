```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate the density of each item
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Introduce randomness for diversity
    randomness = np.random.rand(n)

    # Calculate dominance by comparing each item's density with the 95th percentile of the density
    dominance = np.where(density >= np.percentile(density, 95), 1, 0)

    # Calculate the diversity metric by comparing each item's density and sparsity with the average
    average_density = np.mean(density)
    average_sparsity = np.mean(sparsity)
    diversity_metric = (density - average_density) + (sparsity - average_sparsity)

    # Introduce exploration vs. exploitation using a balance factor
    balance_factor = 0.5

    # Calculate the heuristic combining the metrics
    heuristics = (0.6 * dominance +
                  0.3 * density +
                  0.1 * randomness +
                  0.1 * diversity_metric)

    # Apply the balance factor to adjust exploration and exploitation
    heuristics *= balance_factor

    # Normalize the heuristics to sum to 1
    normalized_heuristics = heuristics / np.sum(heuristics)

    return normalized_heuristics
```
