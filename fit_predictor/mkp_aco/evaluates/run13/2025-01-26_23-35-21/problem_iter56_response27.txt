```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Normalize the prize to consider their scale
    normalized_prize = prize / np.max(prize)
    
    # Calculate the normalized density for each item
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Initialize heuristic array with zeros
    heuristics = np.zeros_like(prize)
    
    # Prune dominated items by selecting only those with higher density
    for i in range(n):
        if all(density[i] >= density[j] for j in range(n) if i != j):
            heuristics[i] = 1.0
    
    # Introduce randomness to explore less likely candidates
    random_factor = np.random.rand(n)
    random_factor = random_factor / np.sum(random_factor)
    
    # Combine the density and randomness into heuristic values
    heuristics = heuristics * density + (1 - heuristics) * random_factor
    
    # Normalize the heuristics to maintain balance
    heuristics = heuristics / np.sum(heuristics)
    
    # Maintain diversity by setting low density items to zero
    min_density_threshold = np.percentile(density, 5)
    heuristics[np.where(density < min_density_threshold)] = 0
    
    return heuristics
```
