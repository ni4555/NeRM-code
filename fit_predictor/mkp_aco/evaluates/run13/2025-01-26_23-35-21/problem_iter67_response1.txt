```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Normalize prizes and weights
    prize_normalized = prize / np.max(prize)
    weight_normalized = weight / np.max(weight, axis=1)[:, None]
    
    # Calculate a dominance metric (dominated items get lower values)
    dominance_metric = np.max(weight_normalized, axis=1) / np.sum(weight_normalized, axis=1)
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(len(prize))
    
    # Normalize dominance metric and randomness
    dominance_normalized = dominance_metric / np.max(dominance_metric)
    
    # Introduce a correlation metric (highly correlated items should not be selected together)
    correlation_metric = np.zeros_like(prize)
    for i in range(len(prize)):
        for j in range(i + 1, len(prize)):
            correlation_metric[i] += np.corrcoef(weight[i], weight[j])[0, 1]
            correlation_metric[j] += np.corrcoef(weight[i], weight[j])[1, 0]
    correlation_normalized = correlation_metric / np.max(correlation_metric)
    
    # Calculate the heuristic combining all factors
    heuristic = prize_normalized * (1 - dominance_normalized) - correlation_normalized + random_factor
    
    # Normalize the heuristic to ensure non-negative values
    min_heuristic = np.min(heuristic)
    heuristic = heuristic - min_heuristic
    
    return heuristic
```
