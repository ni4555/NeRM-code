```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize and weight along each dimension
    normalized_prize = prize / np.max(prize)
    normalized_weight = weight / np.max(weight, axis=1, keepdims=True)
    
    # Calculate the ratio of prize to total weight
    prize_weight_ratio = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Calculate the average of the weighted standard deviations for each dimension
    average_std_dev = np.mean(np.sum(normalized_weight * np.std(normalized_weight, axis=1), axis=1))
    
    # Calculate the heuristic based on the ratio and the deviation from the average
    heuristics = prize_weight_ratio * (1 - np.abs(np.mean(normalized_weight, axis=1) - average_std_dev))
    
    # Apply a non-linear transformation using a logarithmic function to reduce the impact of very high heuristics
    heuristics = np.log(1 + heuristics)
    
    # Normalize heuristics to be between 0 and 1 using a sigmoid function
    heuristics = 1 / (1 + np.exp(-heuristics))
    
    # Set very low heuristics to zero to sparsify the solution
    heuristics[heuristics < 0.01] = 0
    
    # Ensure all heuristics are non-negative
    heuristics = np.maximum(heuristics, 0)
    
    return heuristics
```
