```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Randomness factor
    randomness = np.random.rand(len(prize))
    
    # Normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Dominance pruning
    dominated_items = np.any(weight[:, 1:] > weight[:, :-1], axis=1)
    density[dominated_items] = 0
    
    # Normalize the density to sum to 1
    density = density / np.sum(density)
    
    # Introduce a diversity factor based on the variance of density
    diversity_factor = np.var(density)
    
    # Combine all factors
    heuristic_value = (randomness * 0.1 + 
                       density * 0.5 + 
                       (1 - sparsity) * 0.2 + 
                       diversity_factor * 0.2)
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
