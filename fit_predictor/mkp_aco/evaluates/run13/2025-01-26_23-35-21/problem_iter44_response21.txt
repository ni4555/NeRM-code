```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prizes to handle dominance by large prizes
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Normalize weights to account for the multi-dimensional nature
    max_weight_sum = np.max(np.sum(weight, axis=1))
    normalized_weight_sum = np.sum(weight, axis=1) / max_weight_sum

    # Calculate the density of each item
    density = normalized_prize / normalized_weight_sum

    # Introduce diversity by considering the standard deviation of weights
    diversity = np.std(weight, axis=1) / np.sum(weight, axis=1)

    # Introduce sparsity by considering the uniformity of weights
    sparsity = np.mean(weight, axis=1) / (n * m)

    # Create a heuristic value by balancing utility, diversity, and sparsity
    heuristic_value = 0.5 * density + 0.3 * diversity - 0.2 * sparsity

    # Normalize the heuristic values
    max_heuristic_value = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic_value + 1e-8)

    # Ensure non-negative heuristic values
    normalized_heuristic = np.maximum(normalized_heuristic, 1e-8)

    return normalized_heuristic
```
