```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Balance heuristic based on density and sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce randomness to avoid getting stuck in local optima
    randomness = np.random.rand(len(prize))
    
    # Blended heuristic incorporating balance and randomness
    blended_heuristic = balance_heuristic * (1 - randomness) + randomness
    
    # Prune dominated items by removing those with zero density
    blended_heuristic[density < 1e-8] = 0
    
    # Normalize the heuristic values to ensure they sum to 1
    blended_heuristic /= np.sum(blended_heuristic)
    
    # Adjust heuristics for items with zero weight to encourage diversity
    zero_weight_mask = weight_sum < 1e-8
    blended_heuristic[zero_weight_mask] = 1 / len(prize)
    
    return blended_heuristic
```
