```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to prevent any single item from dominating
    normalized_prize = prize / np.max(prize)
    
    # Calculate utility based on normalized prize per unit weight
    utility = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate the normalized variance to encourage diversity
    normalized_variance = np.var(weight, axis=1) / np.sum(weight, axis=1)
    
    # Encourage sparsity by penalizing high average weight per dimension
    average_weight_penalty = np.mean(weight, axis=1) * 0.1
    
    # Combine utility, diversity, and sparsity scores into a single heuristic
    combined_heuristic = utility * 0.5 + normalized_variance * 0.3 - average_weight_penalty * 0.2
    
    # Normalize the combined heuristic to ensure it is between 0 and 1
    max_heuristic = np.max(combined_heuristic)
    min_heuristic = np.min(combined_heuristic)
    heuristics = (combined_heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Apply a threshold to ensure some level of sparsity in the heuristics
    threshold = 0.1
    heuristics[heuristics < threshold] = 0
    
    # Normalize the heuristics so that they sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
