```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate the variance of weights, excluding the maximum and minimum
    # to avoid outliers affecting the variance metric
    variance = np.var(weight, axis=1)
    variance = variance[(weight == 1).all(axis=1)]  # Exclude items with all weights being 1
    variance_weights = 1 / variance
    # Avoid division by zero and ensure the sum of variance weights is not zero
    variance_weights = variance_weights / np.sum(variance_weights)
    # Combine the utility and the weighted variance
    heuristics = utility * variance_weights
    # Apply a smoothing function to avoid too sharp changes in heuristics
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
