```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate the normalized variance to encourage diversity in the selected items
    normalized_variance = np.sum((weight - np.mean(weight, axis=1))**2, axis=1) / np.std(weight, axis=1)
    # Normalize the variance to ensure it is on the same scale as utility
    normalized_variance = (normalized_variance - np.min(normalized_variance)) / (np.max(normalized_variance) - np.min(normalized_variance))
    # Combine utility and normalized variance using a weighted approach
    heuristics = utility * 0.7 + normalized_variance * 0.3
    # Apply a sigmoid function to the heuristics to compress the range and avoid simplistic thresholds
    heuristics = 1 / (1 + np.exp(-heuristics))
    # Ensure all heuristics are non-negative and no element is set to zero to avoid simplistic sparsity
    heuristics = np.maximum(heuristics, 0.01)
    return heuristics
```
