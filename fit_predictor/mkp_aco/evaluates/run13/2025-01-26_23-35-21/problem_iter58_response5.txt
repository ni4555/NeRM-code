```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)

    # Calculate the diversity factor as the ratio of each item's prize to the sum of all prizes
    diversity_factor = prize / np.sum(prize)

    # Calculate the sparsity as the sum of each item's weight over the maximum weight per dimension
    sparsity = np.sum(weight, axis=1) / np.sum(weight, axis=1).max()

    # Introduce randomness to avoid getting stuck in local optima
    randomness = np.random.rand(n)

    # Incorporate a balance between exploitation and exploration
    exploration_factor = 0.2 * np.random.rand(n)

    # Create a combined heuristic that emphasizes density, diversity, and sparsity
    combined_heuristic = density * 0.6 + diversity_factor * 0.3 + sparsity * 0.1 + randomness * 0.1

    # Adjust the heuristic based on exploration factor
    combined_heuristic += exploration_factor

    # Normalize the combined heuristic values to ensure they are between 0 and 1
    combined_heuristic /= np.max(combined_heuristic)

    # Ensure that the heuristic values do not exceed 1
    combined_heuristic = np.clip(combined_heuristic, 0, 1)

    return combined_heuristic
```
