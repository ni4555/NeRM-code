```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize and weight for each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8
    normalized_weight = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = (prize / np.sum(weight, axis=1))**2

    # Identify dominated items and prune them
    dominated_mask = normalized_prize < np.percentile(normalized_prize, 80)
    normalized_prize[dominated_mask] = 0

    # Calculate the sparsity of the weight matrix
    sparsity = np.mean(normalized_weight, axis=1)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics using a weighted sum, including randomness
    heuristic = (0.5 * normalized_prize +
                 0.2 * (1 - sparsity) +
                 0.2 * value_to_weight_ratio +
                 0.1 * random_factor)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.sum(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(normalized_prize == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
