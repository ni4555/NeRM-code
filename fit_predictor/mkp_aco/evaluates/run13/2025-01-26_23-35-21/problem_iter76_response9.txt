```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate the density of each item
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)

    # Combine heuristics using weighted factors, emphasizing density and sparsity
    heuristics = (0.6 * density +
                  0.2 * sparsity +
                  0.2 * random_factor)  # Adjusted weights to emphasize density and sparsity

    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)

    # Ensure non-negative heuristic values
    heuristics = np.maximum(heuristics, 0)

    # Encourage diversity by adding a penalty for low diversity
    diversity_penalty = 1 - np.mean(heuristics)
    heuristics -= diversity_penalty * (1 - heuristics)

    return heuristics
```
