```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness to allow for a chance to include any item, regardless of density
    random_factor = np.random.rand(*density.shape)
    
    # Define a domination metric to remove dominated items
    non_dominated_items = (np.any(density < weight, axis=1)).reshape(density.shape[0], 1)
    
    # Combine the density, random factor, and non-domination into the heuristic
    heuristic = density * non_dominated_items + random_factor * (1 - non_dominated_items)
    
    # Normalize by the maximum heuristic value to control the scale of the heuristic
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Ensure the heuristics are balanced and diverse by introducing a sparsity and density balance
    balance_factor = (density + 1e-8) / (density + np.sum(weight, axis=1) + 1e-8)
    
    # Combine heuristics with balance factor
    combined_heuristic = normalized_heuristic * balance_factor
    
    # Limit the randomness and set very low weight items to a minimum threshold
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
