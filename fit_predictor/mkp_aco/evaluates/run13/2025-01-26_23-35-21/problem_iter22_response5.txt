```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate the normalized density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate diversity based on the variance of normalized density
    diversity = np.var(density)

    # Calculate the sparsity based on the sum of weights
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate the penalty for items with uniform weights
    sparsity_penalty = np.log(1 / (1 - sparsity))

    # Calculate the heuristic value combining density, diversity, and penalty
    heuristic_value = density * diversity - sparsity_penalty

    # Normalize the heuristic values to maintain a consistent scale
    max_heuristic = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic + 1e-8)

    # Set zero weights to a small positive value to maintain diversity
    normalized_heuristic[sparsity == 1] = 1e-8

    return normalized_heuristic
```
