```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Calculate the diversity factor by considering the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Combine the heuristic value with the diversity factor
    combined_heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum combined heuristic value
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Apply exploration-exploitation using a balance parameter
    exploration_balance = np.random.rand() * 0.2 + 0.8
    combined_heuristic = exploration_balance * normalized_combined_heuristic + (1 - exploration_balance) * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
