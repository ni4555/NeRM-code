```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics to a small value
    heuristic = np.zeros_like(prize) + 1e-8

    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items
    for i in range(n):
        for j in range(i + 1, n):
            if (density[j] > density[i]) and (prize[j] >= prize[i]):
                heuristic[i] = 0

    # Use randomness for diverse solution exploration
    random_factor = np.random.rand(n)
    
    # Combine density with randomness to balance exploration with exploitation
    heuristic = (density + random_factor) / (np.max(density + random_factor) + 1e-8)
    
    # Introduce sparsity factor
    sparsity_factor = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    heuristic *= (1 - sparsity_factor)
    
    return heuristic
```
