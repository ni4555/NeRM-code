```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a list to hold individual heuristics components
    heuristics_components = []

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    heuristics_components.append(density)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    heuristics_components.append(1 - sparsity)

    # Calculate sum of weights
    weight_sum = np.sum(weight, axis=1)
    heuristics_components.append(-weight_sum)

    # Introduce randomness to explore different parts of the solution space
    randomness = np.random.rand(weight.shape[0])
    heuristics_components.append(randomness)

    # Combine individual components into a final heuristic
    heuristic = np.sum(heuristics_components, axis=0)

    # Prune dominated items by setting their heuristics to zero
    dominance_threshold = np.percentile(heuristic, 50)
    for i in range(weight.shape[0]):
        if prize[i] / weight_sum[i] < dominance_threshold:
            heuristic[i] = 0

    # Normalize by the maximum heuristic value
    max_heuristic_value = np.max(heuristic)
    if max_heuristic_value > 0:
        heuristic /= max_heuristic_value

    # Set zero weights to a small value to maintain diversity
    zero_weight_index = weight_sum < 1e-8
    heuristic[zero_weight_index] = 1e-8

    return heuristic
```
