```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the utility of each item considering the sparsity
    utility = density * (np.max(weight, axis=1) - np.sum(weight, axis=1))
    
    # Calculate a diversity metric, encouraging variety in the solution
    diversity = np.abs(np.random.randn(*weight.shape))
    
    # Combine density, utility, and diversity to create a heuristic value
    heuristic_value = density * utility * diversity
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Sparsify the heuristics by setting values below a threshold to zero
    threshold = np.percentile(normalized_heuristic, 95)
    sparsified_heuristic = np.where(normalized_heuristic > threshold, normalized_heuristic, 0)
    
    return sparsified_heuristic
```
