```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the variance of the density
    diversity_factor = density / (np.mean(density) + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum, with an emphasis on diversity
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic
    
    # Introduce a stochastic element to encourage exploration
    stochastic_factor = np.random.rand(*combined_heuristic.shape)
    combined_heuristic += stochastic_factor * (1 - combined_heuristic)
    
    # Sparsify the heuristics by setting a fraction of the lower values to zero
    num_items_to_zero = int(n * 0.2)
    combined_heuristic[np.argsort(combined_heuristic)[:num_items_to_zero]] = 0
    
    # Ensure the sum of heuristics is 1
    combined_heuristic /= np.sum(combined_heuristic)
    
    return combined_heuristic
```
