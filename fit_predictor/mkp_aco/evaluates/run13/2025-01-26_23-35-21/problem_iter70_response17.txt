```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Prune dominated items by selecting the top 50% by density
    sorted_indices = np.argsort(density)[::-1]
    threshold_index = int(len(sorted_indices) * 0.5)
    top_items = sorted_indices[:threshold_index]
    dominated_indices = np.setdiff1d(np.arange(len(sorted_indices)), top_items)
    density[dominated_indices] = 0

    # Introduce randomness for diversity
    np.random.seed(42)
    random_factor = np.random.normal(0, 0.1, size=density.shape)
    density += random_factor

    # Normalize to ensure the sum is close to 1
    normalized_density = density / np.sum(density)

    # Set zero weights to a small value to maintain diversity
    zero_weight_indices = weight.sum(axis=1) < 1e-8
    normalized_density[zero_weight_indices] = 1e-8

    return normalized_density
```
