```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Identify dominated items based on density
    dominated_items = density < np.mean(density)

    # Identify items that are not dominated by others
    non_dominated_mask = ~np.any(dominated_items[:, np.newaxis], axis=1)

    # Prune dominated items
    non_dominated_items = non_dominated_mask.nonzero()[0]

    # Select items based on multi-dimensional criteria: weighted by sparsity
    if non_dominated_items.size > 0:
        # Only consider non-dominated items
        prize_to_weight = prize[non_dominated_items] / np.sum(weight[non_dominated_items], axis=1)
        heuristic = (prize_to_weight * sparsity[non_dominated_items]) * non_dominated_mask
    else:
        # If all items are dominated, return zeros
        heuristic = np.zeros(n)

    # Introduce randomness to explore beyond dominated items
    random_factor = np.random.rand(n)
    heuristic *= random_factor

    # Balance exploration and exploitation using a factor
    exploration_exploitation_balance = 0.5
    heuristic = (exploration_exploitation_balance * heuristic) + ((1 - exploration_exploitation_balance) * random_factor)

    # Normalize the heuristic
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    return normalized_heuristic
```
