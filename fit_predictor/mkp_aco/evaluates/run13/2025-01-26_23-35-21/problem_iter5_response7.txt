```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Use a weighted average of the utility and the variance of the weights
    variance_weights = 1 / np.std(weight, axis=1)
    variance_weights = variance_weights / np.sum(variance_weights)
    heuristics = utility * variance_weights
    # Normalize heuristics to have a 0-1 range for better comparison
    max_utility = np.max(utility)
    min_utility = np.min(utility)
    heuristics = (heuristics - min_utility) / (max_utility - min_utility)
    # Apply a smoothing to the heuristics to avoid too sharp changes
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    # Sparsify the heuristics by setting elements below a threshold to zero
    threshold = 0.1
    heuristics[heuristics < threshold] = 0
    return heuristics
```
