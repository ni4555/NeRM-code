```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce a diversity factor based on the variance of density
    diversity_factor = (density - np.mean(density))**2
    
    # Calculate the sparsity of the weight in terms of its max value
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce a penalty for items that are close to the maximum weight dimension
    penalty = np.where(weight == 1, 0, -0.5 * np.sum(weight == 1, axis=1))
    
    # Create a heuristic value by blending metrics
    heuristic_value = density - sparsity - penalty + diversity_factor
    
    # Normalize the heuristic value by its maximum
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
