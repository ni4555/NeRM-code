```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Normalize by the maximum density
    normalized_density = density / (np.max(density) + 1e-8)
    
    # Normalize by the maximum sparsity
    normalized_sparsity = sparsity / (np.max(sparsity) + 1e-8)
    
    # Introduce a diversity factor
    diversity_factor = np.random.rand(len(prize))
    
    # Prune low-quality items
    low_quality_mask = normalized_density < 0.1 and normalized_sparsity < 0.1
    diversity_factor[low_quality_mask] = 0.1
    
    # Balance exploration vs. exploitation
    exploration_factor = np.random.rand(len(prize))
    exploitation_factor = 1 - exploration_factor
    
    # Final heuristic value
    heuristic = normalized_density * exploitation_factor + diversity_factor
    
    # Introduce a balance between high density and low sparsity
    balance_heuristic = (normalized_density - normalized_sparsity) / (normalized_density + normalized_sparsity + 1e-8)
    
    # Set the heuristic to zero for items with very low density and sparsity
    heuristic[heuristic < 0.1] = 0
    
    return heuristic
```
