```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate the density of each item
    density = prize / np.sum(weight, axis=1)

    # Calculate the diversity factor using the standard deviation of the prize distribution
    diversity_factor = np.std(prize)

    # Introduce a balance factor that encourages diversity
    balance_factor = (np.max(density) - density) / (np.max(density) - np.min(density)) * diversity_factor

    # Combine density, diversity, and balance factors with appropriate weights
    heuristic = 0.6 * density + 0.3 * diversity_factor + 0.1 * balance_factor

    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)
    heuristic *= (1 + 0.1 * random_factor)

    # Normalize the heuristic scores to ensure the sum is one
    heuristic /= np.sum(heuristic)

    # Ensure the heuristic scores are not negative
    heuristic = np.clip(heuristic, 0, 1)

    return heuristic
```
