```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize array to ensure the largest prize is 1
    normalized_prize = prize / np.max(prize)
    
    # Calculate the density (normalized prize divided by total weight)
    density = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate sparsity (whether the total weight is below a threshold)
    sparsity_threshold = 0.1
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    
    # Calculate diversity (inverse of total weight)
    diversity = 1 / np.sum(weight, axis=1)
    
    # Define weights for each metric to combine them
    density_weight = 0.6
    sparsity_weight = 0.3
    diversity_weight = 0.1
    
    # Combine density, sparsity, and diversity to form heuristics
    heuristics = (density * density_weight +
                  sparsity * sparsity_weight +
                  diversity * diversity_weight)
    
    # Normalize heuristics to be between 0 and 1
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    
    return heuristics
```
