```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum + diversity_factor + balance_heuristic
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce randomness to escape local optima
    random_factor = np.random.rand(weight.shape[0])
    
    # Introduce an exploration-exploitation balance by allowing a portion of items to be less explored
    exploration_factor = 0.5 * np.random.rand(weight.shape[0])
    normalized_heuristic[exploration_factor < 0.1] = normalized_heuristic[exploration_factor < 0.1] * 0.9
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
