```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the normalized weight sum
    normalized_weight_sum = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))
    
    # Introduce a diversity factor by considering the standard deviation of the value-to-weight ratio
    diversity_factor = np.std(value_to_weight_ratio)
    
    # Create a heuristic by combining the normalized value-to-weight ratio and the diversity factor
    heuristic = value_to_weight_ratio + 0.1 * diversity_factor
    
    # Introduce an additional heuristic based on the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    sparsity_heuristic = 1 / (sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * heuristic + 0.3 * sparsity_heuristic
    
    # Normalize the combined heuristic
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Introduce an additional penalty for large weight sums
    penalty_for_weight = 0.5 * (normalized_weight_sum - 1)
    
    # Combine all heuristics with the penalty
    final_heuristic = normalized_combined_heuristic - penalty_for_weight
    
    # Set zero weights to a small value to maintain diversity
    final_heuristic[weight_sum < 1e-8] = 1e-8
    
    return final_heuristic
```
