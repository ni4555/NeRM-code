```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to scale values between 0 and 1
    normalized_prize = prize / np.max(prize)
    # Normalize the weights to get the density of items
    normalized_weight = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))
    # Calculate the utility as a product of normalized prize and normalized weight
    utility = normalized_prize * normalized_weight
    # Calculate diversity by penalizing high concentration of weight in the same dimension
    diversity = 1 / (np.std(weight, axis=1) + np.finfo(float).eps)
    # Calculate sparsity by penalizing items that are too sparse in all dimensions
    sparsity = np.mean(weight, axis=1) / (np.max(weight, axis=1) + np.finfo(float).eps)
    # Combine utility, diversity, and sparsity to create heuristics
    heuristics = utility * diversity * (1 - sparsity)
    # Normalize the heuristics to ensure values are comparable and between 0 and 1
    heuristics = heuristics / np.max(heuristics)
    # Ensure no zero values to maintain selectivity
    heuristics = np.clip(heuristics, np.finfo(float).eps, None)
    return heuristics
```
