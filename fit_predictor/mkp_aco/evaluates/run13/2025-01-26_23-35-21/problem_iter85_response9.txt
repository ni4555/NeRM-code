```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Prune dominated items (any item with equal or greater density but lower weight sum is pruned)
    domination_indices = np.where((density > 0) & (np.sum(weight, axis=1) < 1e-8))
    dominated_items = np.where(density <= 0)[0]
    non_dominated_items = np.setdiff1d(range(weight.shape[0]), list(domination_indices[0]) + list(dominated_items))
    
    # Filter the heuristic based on non-dominated items
    density = density[non_dominated_items]
    
    # Introduce randomness for heuristic diversity
    random_factor = np.random.rand(len(density))
    
    # Combine the factors using a weighted sum, balancing exploitation and exploration
    heuristic_value = (density + random_factor) * (1 - np.sum(weight[non_dominated_items], axis=1))
    
    # Normalize the heuristics
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
