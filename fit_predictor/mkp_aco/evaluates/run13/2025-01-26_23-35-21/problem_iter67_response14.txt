```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity and sum of weights
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items by keeping only those with non-zero density
    non_dominated_indices = np.where(density > 1e-8)[0]
    density = density[non_dominated_indices]
    sparsity = sparsity[non_dominated_indices]
    weight_sum = weight_sum[non_dominated_indices]
    
    # Introduce randomness and exploration
    random_factor = np.random.rand(len(density))
    
    # Combine multiple factors to create a heuristic
    heuristic = density * (1 - sparsity) + random_factor
    
    # Normalize the heuristic by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Ensure non-zero weights are given a small positive heuristic to maintain diversity
    combined_heuristic = np.zeros_like(normalized_heuristic)
    combined_heuristic[weight_sum > 1e-8] = normalized_heuristic[weight_sum > 1e-8]
    
    return combined_heuristic
```
