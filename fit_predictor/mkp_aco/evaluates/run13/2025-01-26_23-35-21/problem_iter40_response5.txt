```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized prize per unit weight for each item
    density = prize / np.sum(weight, axis=1)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate the sum of weights for each item
    weight_sum = np.sum(weight, axis=1)

    # Calculate a penalty for items that exceed the weight constraint of 1
    weight_penalty = np.where(weight_sum > 1, (weight_sum - 1) / (weight_sum + 1e-8), 0)

    # Combine density, sparsity, and weight_sum into a single heuristic value
    heuristic_value = density * (1 - sparsity) - weight_sum + weight_penalty

    # Normalize the heuristic values to have a mean of 1
    heuristic_mean = np.mean(heuristic_value)
    normalized_heuristic = heuristic_value / (heuristic_mean + 1e-8)

    # Introduce a diversity factor based on the variance of the density
    diversity_factor = np.exp(-np.var(density) * 2)

    # Calculate the final heuristic by combining the normalized heuristic and diversity factor
    final_heuristic = normalized_heuristic * diversity_factor

    # Ensure the heuristics sum to 1
    final_heuristic /= np.sum(final_heuristic)

    return final_heuristic
```
