```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Combine metrics into a balanced heuristic score
    heuristic = (0.6 * density +
                 0.2 * (1 - sparsity) +
                 0.2 * value_to_weight_ratio)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Incorporate domain-specific information: e.g., heavier items are more valuable
    weight_factor = np.sum(weight, axis=1) * 0.1

    # Adjust heuristic to favor items with a higher value-to-weight ratio
    heuristic *= value_to_weight_ratio / np.max(value_to_weight_ratio)

    # Prune dominated items using a percentile approach
    percentile_threshold = np.percentile(heuristic, 90)
    dominated_mask = heuristic < percentile_threshold
    heuristic[dominated_mask] = 0

    # Ensure diversity by introducing a diversity factor
    diversity_factor = np.sum(heuristic > 0) / n

    # Final heuristic score
    final_heuristic = (heuristic * diversity_factor +
                       random_factor +
                       weight_factor)

    # Normalize the heuristic values
    max_heuristic = np.max(final_heuristic)
    normalized_heuristic = final_heuristic / (max_heuristic + 1e-8)

    # Adjust the heuristic to maintain diversity: if all items are dominated, give a small positive heuristic value
    if np.all(heuristic == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
