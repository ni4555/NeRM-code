```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    heuristic = np.zeros(n)
    
    # Normalize prize and weight for each dimension
    normalized_prize = prize / np.sum(prize)
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Randomness factor to encourage exploration
    randomness_factor = np.random.rand(n)
    
    # Density of items (normalized)
    density = normalized_prize / (np.sum(normalized_weight, axis=1) + 1e-8)
    
    # Sparsity of items (normalized)
    sparsity = np.sum(normalized_weight, axis=1) / (np.max(normalized_weight, axis=1) + 1e-8)
    
    # Diversity factor based on standard deviation of density
    diversity_factor = density / (np.std(density) + 1e-8)
    
    # Feature balance by comparing density and sparsity
    balance = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Calculate combined heuristics using a weighted sum
    heuristic = randomness_factor * diversity_factor + balance
    
    # Normalize heuristics to maintain balance
    heuristic /= np.sum(heuristic)
    
    # Set heuristics of zero weight items to a small value to maintain diversity
    zero_weight_items = np.where(np.sum(normalized_weight, axis=1) < 1e-8)
    heuristic[zero_weight_items] = 1e-8
    
    return heuristic
```
