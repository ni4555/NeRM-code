```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a balance factor by combining high density and low sparsity
    balance_factor = (density + sparsity) / (2 * (density + sparsity + 1e-8))
    
    # Create a heuristic based on the balance factor and the average prize
    heuristic = balance_factor * np.mean(prize)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the heuristic and the diversity factor
    final_heuristic = heuristic * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = final_heuristic / (np.max(final_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
