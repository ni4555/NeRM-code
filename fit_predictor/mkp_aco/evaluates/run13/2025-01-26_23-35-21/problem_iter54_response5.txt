```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity factor as the ratio of each item's prize to the sum of all prizes
    diversity_factor = prize / np.sum(prize)
    
    # Calculate sparsity as the sum of weights divided by the maximum possible weight for each item
    sparsity = np.sum(weight, axis=1) / (m * np.ones(n))
    
    # Calculate the balance factor as the minimum prize divided by the sum of prizes
    balance_factor = np.min(prize) / np.sum(prize)
    
    # Combine heuristics using a weighted sum that emphasizes density, diversity, sparsity, and balance
    combined_heuristic = 0.4 * density + 0.3 * diversity_factor + 0.2 * sparsity + 0.1 * balance_factor
    
    # Introduce randomness to avoid getting stuck in local optima
    randomness = np.random.rand(n)
    
    # Combine with random factor for diversity
    combined_heuristic += 0.1 * randomness
    
    # Normalize the combined heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(combined_heuristic)
    combined_heuristic /= max_heuristic
    
    # Ensure that the heuristic values do not exceed 1
    combined_heuristic = np.clip(combined_heuristic, 0, 1)
    
    # Normalize the heuristic to ensure the sum is one
    normalized_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    return normalized_heuristic
```
