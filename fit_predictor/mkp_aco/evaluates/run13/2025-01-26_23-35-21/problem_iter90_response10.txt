```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items (those with lower density and higher sparsity)
    non_dominated_density = np.maximum(density, np.min(density[density > 0]))
    non_dominated_sparsity = np.minimum(sparsity, np.max(sparsity[sparsity > 0]))
    
    # Normalize the metrics
    normalized_density = non_dominated_density / np.max(non_dominated_density)
    normalized_sparsity = non_dominated_sparsity / np.max(non_dominated_sparsity)
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)
    
    # Combine the metrics into a heuristic
    heuristic = normalized_density * (1 - normalized_sparsity) + random_factor
    
    # Ensure all items have a positive heuristic value
    heuristic = np.maximum(heuristic, 1e-8)
    
    return heuristic
```
