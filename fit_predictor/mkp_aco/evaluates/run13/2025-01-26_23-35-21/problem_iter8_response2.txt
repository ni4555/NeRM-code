```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Incorporate diversity through variance
    diversity = np.var(weight, axis=1)
    # Balance utility with diversity by taking a weighted average
    combined_diversity = utility * (1 - diversity)
    # Integrate sparsity by considering the average utility difference
    mean_utility = np.mean(utility)
    sparsity_factor = (utility - mean_utility) / np.ptp(utility)
    # Adjust the combined heuristic with sparsity factor
    combined_heuristic = combined_diversity * (1 - sparsity_factor)
    # Normalize the heuristics for better comparison across different problems
    heuristics = (combined_heuristic - np.min(combined_heuristic)) / (np.max(combined_heuristic) - np.min(combined_heuristic))
    # Apply a cap to the heuristics to ensure they are within a reasonable range
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
