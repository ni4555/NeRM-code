```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to avoid overflow
    normalized_prize = prize / np.max(prize)
    
    # Calculate the density of each item
    density = normalized_prize / np.sum(weight, axis=1)
    
    # Identify dominated items
    dominated_items = np.where(np.any(weight[:, :-1] > weight[:, 1:], axis=1))[0]
    density[dominated_items] = 0
    
    # Introduce randomness to encourage exploration
    random_factor = np.random.rand(len(density))
    
    # Integrate a diversity factor
    diversity_factor = 1 / (np.sum(weight, axis=1) + 1e-8)
    
    # Combine the factors to create the heuristic
    heuristic = density * diversity_factor + random_factor
    
    # Normalize the heuristic to have a maximum value of 1
    normalized_heuristic = heuristic / np.max(heuristic)
    
    # Prune low-value items by setting their heuristic to zero
    heuristic[heuristic < 0.1] = 0
    
    return heuristic
```
