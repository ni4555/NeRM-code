```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristics array with random values
    random_heuristic = np.random.rand(len(prize))
    
    # Normalize density considering dimensionality
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the inverse of the sum of weights to balance high weight items
    weight_balance = 1 / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights for each item
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a balance heuristic that favors high density and low sparsity
    balance_heuristic = density * (1 - sparsity) * weight_balance
    
    # Combine the balance heuristic with random heuristic
    heuristic = random_heuristic * balance_heuristic
    
    # Normalize the heuristics to ensure diversity
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    else:
        heuristic = np.zeros_like(heuristic)
    
    return heuristic
```
