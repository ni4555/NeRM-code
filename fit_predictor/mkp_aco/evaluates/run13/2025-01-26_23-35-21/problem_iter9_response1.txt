```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Emphasize item uniqueness by considering the difference from the average weight
    avg_weight = np.mean(weight, axis=1)
    uniqueness = np.abs(weight - avg_weight)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) + weight_sum - uniqueness
    
    # Control sparsity with thresholds by penalizing items with very low density or high sparsity
    heuristic_value[density < 0.5] -= 1
    heuristic_value[sparsity > 0.5] -= 1
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
