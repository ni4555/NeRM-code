```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Ensure no item has zero weight to avoid division by zero
    weight[weight == 0] = 1e-8
    
    # Calculate normalized prize density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce a diversity metric based on the minimum density
    diversity = np.min(density)
    
    # Calculate a heuristic value based on density and sparsity
    heuristic_value = density - sparsity
    
    # Introduce a randomness factor to avoid convergence to local optima
    randomness_factor = np.random.rand(n)
    
    # Balance the heuristic by considering diversity, randomness, and normalized prize density
    balanced_heuristic = (heuristic_value + diversity) * randomness_factor
    
    # Prune dominated solutions by setting their heuristic to zero
    dominated_indices = np.argsort(balanced_heuristic)[::-1]
    for i in range(len(dominated_indices) - 1):
        if balanced_heuristic[dominated_indices[i]] < balanced_heuristic[dominated_indices[i + 1]]:
            balanced_heuristic[dominated_indices[i]] = 0
    
    # Normalize the heuristics to ensure they sum to 1
    balanced_heuristic /= np.sum(balanced_heuristic)
    
    return balanced_heuristic
```
