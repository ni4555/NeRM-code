```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized metrics
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items by setting their heuristic to a very low value
    dominated_indices = np.where(weight_sum < np.max(weight_sum))[0]
    for i in dominated_indices:
        density[i] = 0
        sparsity[i] = 0
    
    # Introduce randomness to explore less promising areas
    random_factor = np.random.rand(*density.shape)
    random_factor = random_factor / np.max(random_factor)
    
    # Balance between exploration and exploitation using a sigmoid function
    exploration_exploitation_balance = 1 / (1 + np.exp((np.max(density) - density) / 10))
    
    # Combine metrics with randomness and balance factor
    heuristic = density * (1 - sparsity) + random_factor * exploration_exploitation_balance
    
    # Introduce dynamic adaptation based on the current maximum heuristic
    dynamic_factor = np.max(heuristic) / (heuristic + 1e-8)
    heuristic *= dynamic_factor
    
    # Normalize the heuristics
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Ensure all heuristics are non-negative
    normalized_heuristic = np.maximum(normalized_heuristic, 0)
    
    return normalized_heuristic
```
