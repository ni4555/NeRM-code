```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Normalize the utility to ensure all values are comparable
    utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    # Calculate the sparsity factor to balance diversity and sparsity
    sparsity_factor = np.sum(weight, axis=1) / np.sum(weight)
    # Normalize the sparsity factor
    sparsity_factor = (sparsity_factor - np.min(sparsity_factor)) / (np.max(sparsity_factor) - np.min(sparsity_factor))
    # Use a combination of utility and sparsity factor as heuristic
    heuristics = utility * sparsity_factor
    # Apply a logarithmic transformation to further normalize and ensure sparsity
    heuristics = np.log1p(heuristics)
    # Apply a cap to the heuristics to ensure non-negative values
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
