```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate additional metrics
    value_density_ratio = prize / (np.sum(weight**2, axis=1) + 1e-8)
    
    # Balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Consider the relevance of value to weight ratio
    relevance_heuristic = value_density_ratio
    
    # Diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the heuristics
    heuristic = balance_heuristic * 0.4 + relevance_heuristic * 0.4 + diversity_factor * 0.2
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(density < 1e-8):
        normalized_heuristic = np.ones(n) * 1e-8
    
    return normalized_heuristic
```
