```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)

    # Calculate the sum of prizes
    prize_sum = np.sum(prize)

    # Create a heuristic value based on the balance of density and sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)

    # Introduce a diversity factor based on the variance of the density
    density_variance = np.var(density)
    diversity_factor = density / (density_variance + 1e-8)

    # Incorporate the value-to-weight ratio as a measure of item value
    value_factor = value_to_weight_ratio

    # Incorporate the sum of weights to penalize items that are too heavy
    weight_factor = -weight_sum / (prize_sum + 1e-8)

    # Combine all factors into a single heuristic
    heuristic = balance_heuristic * diversity_factor * value_factor * weight_factor

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Regularize to ensure diversity by setting very low heuristics to a small value
    normalized_heuristic[normalized_heuristic < 1e-8] = 1e-8

    return normalized_heuristic
```
