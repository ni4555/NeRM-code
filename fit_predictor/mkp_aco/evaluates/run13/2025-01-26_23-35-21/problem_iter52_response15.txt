```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics array with zeros
    heuristic = np.zeros(weight.shape[0])
    
    # Calculate normalized utility for each item
    normalized_utility = prize / np.sum(prize)
    
    # Calculate the sum of weights for each item
    item_weight_sum = np.sum(weight, axis=1)
    
    # Calculate the balance between utility and weight sum
    balance = normalized_utility / (item_weight_sum + 1e-8)
    
    # Sample a percentage of items randomly to maintain diversity
    sampled_indices = np.random.choice(weight.shape[0], size=int(weight.shape[0] * 0.2), replace=False)
    heuristic[sampled_indices] = 1.0
    
    # Prune dominated items based on the balance metric
    sorted_indices = np.argsort(balance)[::-1]
    dominated_indices = np.setdiff1d(range(weight.shape[0]), sorted_indices[:len(sorted_indices) // 2])
    heuristic[dominated_indices] = 0
    
    # Normalize the heuristics to sum to 1
    heuristic /= np.sum(heuristic)
    
    # Introduce randomness to avoid getting stuck in local optima
    randomness_factor = np.random.rand(heuristic.shape[0])
    heuristic += randomness_factor * (heuristic.max() / 100)
    
    # Ensure that the heuristics are within the valid range
    heuristic = np.clip(heuristic, 0, 1)
    
    return heuristic
```
