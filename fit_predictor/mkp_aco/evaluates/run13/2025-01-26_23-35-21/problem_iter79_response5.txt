```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items
    non_dominated_indices = np.argsort(-density)
    non_dominated_items = density[non_dominated_indices]
    dominated_mask = np.ones_like(non_dominated_items, dtype=bool)
    dominated_mask[1:] = dominated_mask[1:] & (non_dominated_items[:-1] > non_dominated_items[1:])
    density[dominated_mask] = 0
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a randomness factor
    randomness_factor = np.random.rand(len(density))
    
    # Create a final heuristic by combining the diversity factor, randomness, and heuristic value
    heuristic = (heuristic_value * diversity_factor + randomness_factor) / (1 + diversity_factor)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Combine the heuristics using a weighted sum with a focus on diversity and randomness
    combined_heuristic = 0.5 * normalized_heuristic + 0.5 * randomness_factor
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
