```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a base heuristic value
    base_heuristic = prize / np.sum(weight, axis=1)
    
    # Introduce randomness to escape local optima
    random_factor = np.random.rand(weight.shape[0])
    
    # Normalize the weights to prevent dominance
    normalized_weights = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Incorporate additional metrics such as sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Use a weighted sum to combine the metrics
    heuristic_value = base_heuristic * 0.6 + random_factor * 0.2 + sparsity * 0.2
    
    # Normalize by the maximum heuristic value to maintain diversity
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
