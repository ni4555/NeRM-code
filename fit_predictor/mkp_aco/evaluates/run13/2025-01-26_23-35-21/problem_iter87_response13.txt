```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the ratio of prize to weight sum
    prize_to_weight_ratio = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness for exploration
    randomness = np.random.rand(*density.shape)
    
    # Create a heuristic based on a weighted sum of metrics
    heuristic = density * (1 - sparsity) + prize_to_weight_ratio + randomness
    
    # Prune dominated items
    dominance_threshold = np.max(heuristic) / 2
    dominated_items = np.where(heuristic < dominance_threshold)[0]
    heuristic[dominated_items] = 0
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Return the sparsified heuristic
    sparsified_heuristic = np.where(normalized_heuristic > 0.5, 1, 0)
    
    return sparsified_heuristic
```
