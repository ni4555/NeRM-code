```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)

    # Introduce diversity factor
    average_density = np.mean(density)
    diversity_factor = np.clip(density / average_density, 1, 5)

    # Calculate heuristic value considering the balance between high density and diversity
    heuristic_value = diversity_factor * density

    # Incorporate penalties for items with very high density or low density
    penalty_high_density = np.where(density > 1.5, 0.5, 0)
    penalty_low_density = np.where(density < 0.5, 0.5, 0)

    # Adjust heuristic value based on penalties
    heuristic = heuristic_value - penalty_high_density - penalty_low_density

    # Normalize by the maximum heuristic value to ensure the sum is 1
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    # Set zero weights to a small value to maintain diversity
    zero_weight_penalty = np.where(np.sum(weight, axis=1) < 1e-8, 1e-8, 0)
    normalized_heuristic += zero_weight_penalty

    return normalized_heuristic
```
