```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized profit to weight ratio for each item
    normalized_profit = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    normalized_sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights to balance the load across items
    weight_sum = np.sum(weight, axis=1)
    
    # Incorporate a diversity factor based on the variance of normalized profit
    diversity_factor = np.exp(normalized_profit / (np.var(normalized_profit) + 1e-8))
    
    # Define weights for each metric to create a balanced heuristic value
    profit_weight = 0.4
    sparsity_weight = 0.3
    weight_sum_weight = 0.2
    diversity_weight = 0.1
    
    # Combine the metrics to form an initial heuristic value
    heuristic_value = (normalized_profit * profit_weight +
                       (1 - normalized_sparsity) * sparsity_weight +
                       weight_sum * weight_sum_weight)
    
    # Integrate the diversity factor into the heuristic
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value to ensure a scale between 0 and 1
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weight items to 0 to avoid sharp penalties
    normalized_heuristic[weight_sum < 1e-8] = 0
    
    return normalized_heuristic
```
