```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity by considering the max weight per dimension
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a balance metric combining density and sparsity
    balance_metric = density * sparsity
    
    # Integrate a weight-based penalty
    weight_penalty = np.sum(weight, axis=1)
    
    # Calculate the average density for diversity factor
    average_density = np.mean(density)
    
    # Diversity factor based on relative density to the average
    diversity_factor = density / (average_density + 1e-8)
    
    # Combine balance and diversity into a final heuristic value
    heuristic = balance_metric - weight_penalty + diversity_factor
    
    # Normalize by the mean heuristic value to scale the heuristic
    mean_heuristic = np.mean(heuristic)
    normalized_heuristic = heuristic / (mean_heuristic + 1e-8)
    
    # Ensure all heuristics are non-negative
    normalized_heuristic = np.maximum(normalized_heuristic, 0)
    
    return normalized_heuristic
```
