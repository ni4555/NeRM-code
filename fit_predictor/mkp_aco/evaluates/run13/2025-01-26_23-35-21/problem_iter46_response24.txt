```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize the prize and weight to balance scales
    normalized_prize = prize / np.max(prize)
    normalized_weight = weight / np.max(weight, axis=1)[:, np.newaxis]
    
    # Calculate the density as the ratio of normalized prize to the sum of normalized weights
    density = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Calculate the sparsity as the ratio of the sum of normalized weights to the maximum normalized weight
    sparsity = np.sum(normalized_weight, axis=1) / np.max(normalized_weight, axis=1)
    
    # Introduce an exploration-exploitation balance using a random factor
    exploration_balance = np.random.rand(n)
    
    # Create a single heuristic value by combining density and sparsity
    heuristic_value = density * (1 - sparsity)
    
    # Add the random exploration factor to the heuristic
    combined_heuristic = heuristic_value * exploration_balance
    
    # Normalize the combined heuristic to maintain diversity and balance
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    # Prune very low-quality heuristics by setting them to zero
    low_quality_threshold = np.percentile(combined_heuristic, 5)
    combined_heuristic[combined_heuristic < low_quality_threshold] = 0
    
    return combined_heuristic
```
