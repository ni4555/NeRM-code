```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize based on the maximum prize value
    normalized_prize = prize / np.max(prize)
    
    # Calculate the weighted normalized prize to consider the importance of items
    weighted_prize = normalized_prize * np.sum(weight, axis=1)
    
    # Normalize the weight for the given dimension
    normalized_weight = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a dominance pruning factor; an item is pruned if it's dominated
    dominance_factor = 1.0 / (1.0 + np.min(weight, axis=1))
    
    # Combine all factors to create the heuristic
    heuristic = weighted_prize / (normalized_weight + 1e-8) * dominance_factor
    
    # Limit the randomness by setting a threshold
    threshold = np.mean(heuristic)
    heuristic[heuristic < threshold] = 0.0
    
    # Normalize the heuristic values to maintain diversity
    heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    return heuristic
```
