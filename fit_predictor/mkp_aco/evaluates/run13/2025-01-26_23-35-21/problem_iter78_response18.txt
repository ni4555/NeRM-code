```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a heuristic by combining the diversity factor with the density
    heuristic = density * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a balance factor to weigh high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * normalized_heuristic + 0.5 * balance_factor
    
    # Prune dominated items by setting their heuristics to zero
    dominated_items = np.any(weight > weight_sum[:, None], axis=1)
    combined_heuristic[dominated_items] = 0
    
    # Introduce randomness to diversify the selection
    random_factor = np.random.rand(*combined_heuristic.shape)
    combined_heuristic *= random_factor
    
    # Normalize again after randomness to maintain a range of heuristics
    combined_heuristic /= np.max(combined_heuristic) + 1e-8
    
    return combined_heuristic
```
