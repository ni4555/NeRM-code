```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density, which is the prize per unit weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity, which is the sum of weights normalized by the maximum weight
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Combine density and sparsity into a heuristic value, balancing their influence
    heuristic_value = (density - sparsity) / (np.abs(density - sparsity) + 1e-8)
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic
    
    # Ensure that the heuristics are non-negative
    heuristic_value[heuristic_value < 0] = 0
    
    return heuristic_value
```
