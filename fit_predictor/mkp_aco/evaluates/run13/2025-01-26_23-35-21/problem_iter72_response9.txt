```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Combine the normalized density and sparsity
    combined = density + sparsity
    
    # Prune dominated items by setting their combined value to zero
    dominance_mask = density > sparsity
    combined[~dominance_mask] = 0
    
    # Introduce randomness to encourage exploration
    random_factor = np.random.rand(len(combined))
    
    # Encourage diversity by penalizing items with high sparsity
    diversity_factor = combined / (np.max(combined) + 1e-8)
    
    # Normalize the heuristic values
    normalized_heuristic = diversity_factor + random_factor
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic
    
    # Ensure the heuristics have a minimum value to maintain diversity
    combined_heuristic[combined_heuristic < 1e-8] = 1e-8
    
    return combined_heuristic
```
