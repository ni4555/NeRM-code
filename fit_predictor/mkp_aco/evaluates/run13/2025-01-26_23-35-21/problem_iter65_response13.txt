```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristic values
    heuristic = np.zeros_like(prize)

    # Calculate density based on normalized prize value
    density = prize / np.sum(prize)

    # Normalize the weight by its maximum value in each dimension
    normalized_weight = weight / np.max(weight, axis=0)[:, np.newaxis]

    # Calculate the dominance heuristic: a negative value indicates non-domination
    dominance = -np.sum(normalized_weight, axis=1)

    # Add density and dominance heuristics
    heuristic += density
    heuristic += dominance

    # Introduce randomness to encourage exploration
    random_factor = np.random.rand(*heuristic.shape)
    heuristic += random_factor

    # Prune dominated items by setting their heuristic to zero
    dominated_mask = np.any(normalized_weight > 1, axis=1)
    heuristic[dominated_mask] = 0

    # Normalize the heuristic by the maximum value to ensure scale
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic

    # Limit the randomness factor to maintain a certain level of balance
    heuristic *= 0.5 + 0.5 * random_factor

    return heuristic
```
