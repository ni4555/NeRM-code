```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristic array
    n, m = prize.shape
    heuristics = np.zeros(n)

    # Normalize the prize and weight to ensure fairness
    prize_normalized = prize / np.max(prize)
    weight_normalized = weight / np.sum(weight, axis=1)[:, None]

    # Calculate density as a measure of the prize-to-weight ratio
    density = prize_normalized / (weight_normalized + 1e-8)

    # Calculate a sparsity score, where items with less weight are favored
    sparsity = np.sum(weight_normalized, axis=1)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)

    # Calculate the heuristic by combining density, sparsity, and randomness
    heuristics = density * (1 - sparsity) + random_factor

    # Normalize the heuristic to ensure all values are between 0 and 1
    heuristics /= np.max(heuristics)

    # Prune dominated items (items with lower heuristic value than others with similar or lower weight)
    dominated_indices = np.where((density < np.max(density)) & (sparsity > np.mean(sparsity)))[0]
    heuristics[dominated_indices] = 0

    return heuristics
```
