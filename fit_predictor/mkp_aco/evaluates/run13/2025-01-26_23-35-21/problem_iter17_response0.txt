```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight to have zero mean and unit variance
    normalized_prize = (prize - np.mean(prize)) / np.std(prize)
    normalized_weight = (weight - np.mean(weight, axis=1, keepdims=True)) / np.std(weight, axis=1, keepdims=True)
    
    # Calculate the density of items
    density = normalized_prize / (np.sum(normalized_weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(normalized_weight, axis=1) / (np.max(normalized_weight, axis=1) + 1e-8)
    
    # Incorporate diversity by considering the average density
    average_density = np.mean(density)
    diversity_factor = (density + 1e-8) / (average_density + 1e-8)
    
    # Introduce a penalty for high sparsity to foster diversity
    sparsity_penalty = (1 - sparsity) / (1 - np.mean(sparsity))
    
    # Create a balanced heuristic value
    heuristic_value = density * sparsity_penalty
    
    # Introduce a bonus for items with a lower sum of weights
    weight_bonus = (np.sum(normalized_weight, axis=1) + 1e-8) ** -1
    
    # Final heuristic value
    heuristic = heuristic_value * diversity_factor * weight_bonus
    
    # Normalize the heuristic to maintain a bounded scale
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Ensure no zero weight items are ignored by setting them a small but non-zero value
    normalized_heuristic[np.sum(normalized_weight, axis=1) < 1e-8] = 1e-8
    
    return normalized_heuristic
```
