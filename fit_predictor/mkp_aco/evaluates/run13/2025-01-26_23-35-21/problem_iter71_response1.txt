```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Prune dominated items by selecting the top items based on normalized prize density
    normalized_density = prize / (np.sum(weight, axis=1) + 1e-8)
    dominated_indices = np.argsort(normalized_density)[::-1]
    non_dominated_items = np.where(np.isin(dominated_indices, np.arange(len(dominated_indices)))[0])[0]
    non_dominated_prize = prize[non_dominated_items]
    non_dominated_weight = weight[non_dominated_items]

    # Calculate the normalized sparsity for non-dominated items
    non_dominated_sparsity = np.sum(non_dominated_weight, axis=1) / (np.max(non_dominated_weight, axis=1) + 1e-8)

    # Calculate the sum of weights for non-dominated items
    non_dominated_weight_sum = np.sum(non_dominated_weight, axis=1)

    # Create a heuristic value by blending metrics
    heuristic_value = non_dominated_prize / (non_dominated_weight_sum + 1e-8)

    # Introduce randomness to foster diversity
    random_factor = np.random.rand(len(non_dominated_items))
    
    # Create a final heuristic by combining heuristic value with randomness
    heuristic = heuristic_value * random_factor

    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[non_dominated_weight_sum < 1e-8] = 1e-8

    return normalized_heuristic
```
