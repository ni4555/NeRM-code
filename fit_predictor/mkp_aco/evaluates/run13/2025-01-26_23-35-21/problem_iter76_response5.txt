```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to the maximum prize to give more weight to higher-valued items
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sum(weight, axis=1)

    # Normalize the total weight of each item to the maximum total weight
    max_total_weight = np.max(np.sum(weight, axis=1))
    normalized_weight = np.sum(weight, axis=1) / max_total_weight

    # Prune dominated items by setting their heuristics to zero
    dominated_items = normalized_weight == 0
    heuristics = np.zeros(n)

    # For non-dominated items, use a weighted sum of value-to-weight ratio and inverse weight sum
    non_dominated_items = ~dominated_items
    heuristics[non_dominated_items] = normalized_prize[non_dominated_items] + (1 / normalized_weight[non_dominated_items])

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)
    heuristics = heuristics * 0.8 + random_factor * 0.2

    # Normalize heuristics to maintain a bounded scale
    heuristics /= np.sum(heuristics)

    return heuristics
```
