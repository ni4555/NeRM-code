```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items (items with lower prize for the same weight)
    domination_index = np.where(weight == 1)[0]
    for idx in range(len(domination_index)):
        dominated_by = np.where(np.all(weight[domination_index[idx]] >= weight, axis=1) & prize[domination_index[idx]] < prize)
        for d_idx in dominated_by[0]:
            density[d_idx] = 0

    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Introduce randomness to enhance diversity
    random_factor = np.random.rand(len(density))
    heuristic += random_factor * 0.1  # Adjust 0.1 as needed for randomness
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * (density - sparsity)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
