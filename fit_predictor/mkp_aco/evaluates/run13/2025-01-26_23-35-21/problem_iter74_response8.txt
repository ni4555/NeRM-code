```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize to account for the dimensionality
    normalized_prize = prize / np.sqrt(n)

    # Calculate the value-to-weight ratio for each item and dimension
    value_to_weight_ratio = np.sum(prize * weight, axis=1) / np.sum(weight**2, axis=1) + 1e-8

    # Introduce a diversity factor based on the standard deviation of value-to-weight ratio
    diversity_factor = value_to_weight_ratio / np.std(value_to_weight_ratio)

    # Calculate the standard deviation of diversity factor to encourage further diversity
    std_diversity_factor = np.std(diversity_factor)

    # Calculate a heuristic based on the normalized prize, value-to-weight ratio,
    # diversity factor, and standard deviation of diversity factor to promote exploration
    heuristic = (0.5 * normalized_prize +
                 0.3 * value_to_weight_ratio +
                 0.2 * diversity_factor +
                 0.1 * std_diversity_factor)

    # Introduce randomness to encourage diversity and break ties
    random_factor = np.random.rand(n)
    heuristic_with_randomness = heuristic + random_factor

    # Normalize the heuristics to prevent overflow and ensure proper combination
    max_heuristic_with_randomness = np.max(heuristic_with_randomness + 1e-8)
    normalized_heuristic = heuristic_with_randomness / max_heuristic_with_randomness

    return normalized_heuristic
```
