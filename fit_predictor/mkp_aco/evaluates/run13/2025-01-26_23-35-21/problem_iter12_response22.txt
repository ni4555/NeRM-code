```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    # Calculate the compactness as the inverse of density
    compactness = 1 / (density + 1e-8)
    # Calculate the diversity as the standard deviation of the weights
    diversity = np.std(weight, axis=1)
    # Integrate diversity with utility by considering its inverse
    diversity_factor = 1 / (1 + diversity)
    # Combine density, compactness, and diversity to form a balanced utility score
    utility = density * compactness * diversity_factor
    # Normalize the utility scores to sum to 1
    utility /= np.sum(utility)
    return utility
```
