```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity factor as the ratio of each item's prize to the sum of all prizes
    diversity_factor = prize / np.sum(prize)
    
    # Create a heuristic value by combining density and diversity factor
    heuristic_value = density * diversity_factor
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic
    
    # Return the normalized heuristic values
    return heuristic_value
```
