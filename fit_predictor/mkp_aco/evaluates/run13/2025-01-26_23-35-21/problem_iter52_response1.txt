```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate the utility of each item
    utility = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity by considering the ratio of each item's utility to the sum of all utilities
    diversity = utility / np.sum(utility)
    
    # Calculate the balance by considering the average utility per dimension
    balance = np.sum(prize / weight, axis=1) / m
    
    # Normalize the balance factor to be comparable with utility and diversity
    balance /= np.max([np.max(utility), np.max(diversity)])
    
    # Combine the utility, diversity, and balance to form the heuristic values
    heuristic = 0.6 * utility + 0.3 * diversity + 0.1 * balance
    
    # Introduce randomness to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    
    # Adjust the heuristic by randomness
    heuristic *= (1 + 0.1 * random_factor)
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
