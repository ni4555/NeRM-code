```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize and density based on total weights for each item
    normalized_density = prize / np.sum(weight, axis=1)
    
    # Normalize the sparsity as a measure of the average weight divided by the max weight
    normalized_sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate the sum of weights to include a measure of total weight
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a diversity measure based on the standard deviation of weights
    diversity = np.std(weight, axis=1)
    
    # Balance the density and sparsity using a heuristic balance parameter
    balance_param = 0.5
    balanced_density = normalized_density * balance_param
    balanced_sparsity = (1 - balance_param) * normalized_sparsity
    
    # Create a combined heuristic score that emphasizes the balanced metrics and the total weight
    heuristic_value = balanced_density - balanced_sparsity - weight_sum + 1 / diversity
    
    # Normalize the heuristic scores to ensure they are within a useful range
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic
    
    # Apply a small mutation to the heuristic scores to encourage diversity
    mutation = np.random.rand(len(heuristic_value))
    mutated_heuristic = heuristic_value * mutation
    
    # Normalize the mutated heuristic scores to sum to 1
    mutated_heuristic /= np.sum(mutated_heuristic)
    
    return mutated_heuristic
```
