```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics with a high value for zero weight items
    heuristics = np.full(weight.shape[0], 1e-8)
    
    # Normalize prize values to consider their importance
    normalized_prize = prize / np.max(prize)
    
    # Normalize weight to reduce the impact of lighter items
    normalized_weight = weight / np.sum(weight)
    
    # Add diversity by considering the relative prize of each item
    heuristics = heuristics + normalized_prize
    
    # Introduce randomness to diversify the selection
    np.random.shuffle(heuristics)
    
    # Introduce sparsity to reduce the chance of selecting very heavy items
    heuristics = heuristics * (1 - normalized_weight)
    
    # Adjust heuristics to balance density and sparsity
    density_adjustment = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1e-8)
    heuristics = heuristics * density_adjustment
    
    # Normalize heuristics to ensure all values are within a reasonable range
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    
    return heuristics
```
