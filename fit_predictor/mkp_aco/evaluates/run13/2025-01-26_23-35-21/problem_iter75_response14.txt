```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce an exploration-exploitation factor based on random perturbation
    random_explore = np.random.rand(*density.shape)
    
    # Combine exploration and exploitation using a weighted average
    heuristic_value = (density * (1 - sparsity) - weight_sum) * (0.7 + random_explore * 0.3)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Prune dominated items based on a threshold
    threshold = 0.5
    dominance_mask = np.sum(weight, axis=1) > 1e-8
    normalized_heuristic[dominance_mask] /= (1 + normalized_heuristic[dominance_mask] / threshold)
    normalized_heuristic[~dominance_mask] = 0
    
    return normalized_heuristic
```
