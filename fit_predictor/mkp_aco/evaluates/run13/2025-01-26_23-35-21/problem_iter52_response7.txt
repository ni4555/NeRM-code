```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Normalize the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the inverse of the weight sum for diversity
    diversity = 1 / (weight_sum + 1e-8)
    
    # Calculate a balance factor
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine metrics into a heuristic value with normalization
    heuristic_value = (density * balance_factor * diversity) / (np.max(density * balance_factor * diversity) + 1e-8)
    
    # Ensure the sum of heuristics is close to 1 by scaling
    heuristic_value /= np.sum(heuristic_value)
    
    return heuristic_value
```
