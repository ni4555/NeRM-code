```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight for each item
    ratio = prize / np.sum(weight, axis=1)
    
    # Normalize the ratio to the maximum ratio value
    normalized_ratio = ratio / np.max(ratio)
    
    # Calculate the sparsity based on a threshold for each dimension
    sparsity_threshold = 0.5
    sparsity = np.mean(weight, axis=1) < sparsity_threshold
    
    # Normalize the sparsity to emphasize items that are more unique
    normalized_sparsity = sparsity / np.sum(sparsity)
    
    # Calculate the diversity based on the sum of the square of weights
    diversity = np.sum(weight**2, axis=1) / np.sum(weight**2)
    
    # Normalize the diversity to give emphasis to items with high diversity
    normalized_diversity = diversity / np.max(diversity)
    
    # Combine the normalized metrics with appropriate weights
    heuristics = normalized_ratio * 0.5 + normalized_sparsity * 0.3 + normalized_diversity * 0.2
    
    # Normalize the heuristics to a range [0, 1]
    heuristics = heuristics / np.max(heuristics)
    
    return heuristics
```
