```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight for all dimensions
    normalized_prize = prize / np.max(prize)
    normalized_weight = weight / np.max(weight, axis=1)[:, np.newaxis]

    # Calculate density of each item (normalized prize / normalized weight sum)
    density = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Calculate diversity (inverse of normalized weight sum)
    diversity = 1 / np.sum(normalized_weight, axis=1)
    
    # Calculate sparsity based on a threshold
    sparsity_threshold = 0.1
    sparsity = 1 - (np.sum(normalized_weight, axis=1) < sparsity_threshold)
    
    # Calculate balance as the standard deviation of normalized weights
    balance = np.std(normalized_weight, axis=1)
    
    # Combine density, diversity, sparsity, and balance into a single heuristic
    heuristic_value = (density * 0.4 + diversity * 0.3 + sparsity * 0.2 + balance * 0.1)
    
    # Normalize the heuristic values to sum to 1
    normalized_heuristic = heuristic_value / np.sum(heuristic_value)
    
    # Apply a sparsity threshold to ensure the heuristics are non-negative
    sparsity_threshold = np.max(normalized_heuristic[normalized_heuristic < sparsity_threshold])
    normalized_heuristic[normalized_heuristic < sparsity_threshold] = 0
    
    return normalized_heuristic
```
