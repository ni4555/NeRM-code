```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Normalize sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Normalize value-to-weight ratio
    value_to_weight_ratio = (prize / np.sum(weight, axis=1)) * np.sqrt(m)

    # Normalize diversity by the average density
    average_density = np.mean(density)
    diversity = (density - average_density) / (average_density + 1e-8)

    # Normalize randomness
    randomness = np.random.rand(n) + 1e-8

    # Combine metrics using a weighted sum
    heuristic = 0.5 * density + 0.3 * (1 - sparsity) + 0.2 * value_to_weight_ratio + 0.1 * diversity + 0.05 * randomness

    # Normalize the heuristic values to a range [0, 1]
    normalized_heuristic = heuristic / np.sum(heuristic)

    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)

    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic

    # Set zero weights to a small value to maintain diversity
    weight_sum = np.sum(weight, axis=1)
    combined_heuristic[weight_sum < 1e-8] = 1e-8

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.allclose(density, 0):
        combined_heuristic = np.ones(n) * 1e-8

    return combined_heuristic
```
