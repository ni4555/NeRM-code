```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as sum of weights and weight diversity
    weight_sum = np.sum(weight, axis=1)
    weight_diversity = np.std(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum + weight_diversity
    
    # Apply penalties for low-value items and items with near-zero weight
    penalty = np.where(weight_sum < 1e-8, -prize.max(), 0)
    heuristic_value += penalty
    
    # Normalize by the maximum heuristic value
    max_heuristic = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic + 1e-8)
    
    # Use a threshold to avoid sparsity in the heuristic values
    sparsity_threshold = 0.2  # Define a sparsity threshold
    sparsity_penalty = np.where(normalized_heuristic < sparsity_threshold, -np.inf, 0)
    normalized_heuristic += sparsity_penalty
    
    # Final normalization to maintain a positive range
    normalized_heuristic = (normalized_heuristic - np.min(normalized_heuristic)) / (np.max(normalized_heuristic) - np.min(normalized_heuristic))
    
    # Apply a smoothing to the heuristic values to reduce the impact of outliers
    smoothed_heuristic = np.clip(normalized_heuristic, 0, 1)
    
    # Incorporate diversity by considering the standard deviation of the heuristic values
    diversity_factor = np.std(smoothed_heuristic)
    
    # Adjust the heuristic by the diversity factor
    adjusted_heuristic = smoothed_heuristic * diversity_factor
    
    # Incorporate additional diversity by considering the average heuristic value
    average_heuristic = np.mean(adjusted_heuristic)
    diversity_factor += (adjusted_heuristic - average_heuristic) / (average_heuristic + 1e-8)
    
    # Final adjustment to the heuristic to ensure non-negative values
    final_heuristic = np.clip(adjusted_heuristic * diversity_factor, 0, 1)
    
    return final_heuristic
```
