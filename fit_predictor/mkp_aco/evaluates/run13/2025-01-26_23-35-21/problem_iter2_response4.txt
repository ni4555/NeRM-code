```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize
    # Calculate the sparsity factor for each item based on its average weight
    sparsity_factor = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))
    # Calculate diversity as the average sparsity factor of the item
    diversity = np.mean(sparsity_factor)
    # Normalize the diversity by the maximum possible diversity
    normalized_diversity = diversity / np.max(diversity)
    # Combine normalized prize and normalized diversity
    combined_score = normalized_prize * normalized_diversity
    # Apply a penalty to items with too low a normalized prize-to-diversity ratio
    penalty_factor = np.where(normalized_prize > 0.5, 1, 0.5)
    heuristics = combined_score * penalty_factor
    return heuristics
```
