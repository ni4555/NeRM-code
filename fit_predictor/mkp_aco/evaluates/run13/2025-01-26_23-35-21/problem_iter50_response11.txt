```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Create a balanced heuristic by blending metrics
    heuristic_value = density * (1 - sparsity)
    
    # Introduce a diversity factor based on the sum of squares of the weights
    diversity_factor = np.sum(weight**2, axis=1) / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize by the maximum diversity factor
    normalized_diversity = diversity_factor / np.max(diversity_factor)
    
    # Combine the heuristic value with the diversity factor
    combined_heuristic = heuristic_value * normalized_diversity
    
    # Introduce randomness to encourage diversity
    randomness = np.random.rand(len(prize))
    
    # Prune dominated items by setting the heuristic value to zero if the item has zero density
    combined_heuristic[density < 1e-8] = 0
    
    # Encourage diversity by scaling the heuristic with randomness
    combined_heuristic *= randomness / np.max(randomness)
    
    # Set a lower bound on the heuristics to ensure non-zero values
    combined_heuristic = np.maximum(combined_heuristic, 1e-8)
    
    return combined_heuristic
```
