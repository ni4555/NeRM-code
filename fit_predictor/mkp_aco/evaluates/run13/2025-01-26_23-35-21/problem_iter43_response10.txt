```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized utility
    utility = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(len(prize))
    
    # Normalize the random factor by the maximum value
    normalized_random = random_factor / (np.max(random_factor) + 1e-8)
    
    # Define a dominance metric by comparing the utility with the maximum utility
    dominance_metric = utility / (np.max(utility) + 1e-8)
    
    # Combine the utility, sparsity, randomness, and dominance to form the heuristic
    heuristic = utility * (1 - sparsity) + normalized_random * dominance_metric
    
    # Prune low-quality items by setting their heuristic value to zero
    high_quality_items = heuristic > 0.5  # Threshold for high-quality items
    heuristic[~high_quality_items] = 0
    
    return heuristic
```
