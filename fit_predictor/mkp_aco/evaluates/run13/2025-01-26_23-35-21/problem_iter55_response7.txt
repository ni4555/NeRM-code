```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Initialize an empty heuristic array
    heuristic = np.zeros_like(prize)
    
    # Iterate over each item to evaluate its heuristic value
    for i in range(len(prize)):
        # Normalize prize value
        normalized_prize = prize[i] / np.sum(prize)
        
        # Normalize weight sum
        normalized_weight_sum = np.sum(weight[i]) / np.sum(weight[:, 0])
        
        # Check for dominated items by comparing to the current best item
        for j in range(len(prize)):
            if j != i and normalized_prize < prize[j] / np.sum(prize[j]):
                break
        else:
            # If not dominated, set heuristic to high value
            heuristic[i] = max(heuristic)
        
        # Introduce randomness to explore other possibilities
        if np.random.rand() < 0.1:
            # If randomly chosen, set heuristic to low value
            heuristic[i] = 1e-8
    
    # Normalize heuristic values to be between 0 and 1
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic + 1e-8)
    
    return heuristic
```
