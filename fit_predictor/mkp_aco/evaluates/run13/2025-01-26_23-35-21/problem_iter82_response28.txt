```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics with zeros
    heuristic = np.zeros(weight.shape[0])
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items based on sparsity threshold
    dominated_items = np.where(sparsity < 0.1)[0]
    heuristic[dominated_items] = 0
    
    # Introduce exploration-exploitation with randomness
    exploration_factor = np.random.rand(weight.shape[0])
    exploitation_factor = density * (1 - sparsity)
    
    # Combine exploration and exploitation with randomness
    heuristic = exploration_factor * exploitation_factor
    
    # Normalize heuristics to ensure they sum to one
    heuristic /= np.sum(heuristic)
    
    # Introduce additional randomness for diversity
    random_factor = np.random.rand(weight.shape[0])
    heuristic += random_factor / np.sum(random_factor)
    
    return heuristic
```
