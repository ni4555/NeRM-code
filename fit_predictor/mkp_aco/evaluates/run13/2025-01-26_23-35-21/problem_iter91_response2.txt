```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Define a dominance pruning threshold
    dominance_threshold = 1.1

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Initialize an array for the heuristics
    heuristics = np.zeros_like(prize)
    
    # Iteratively calculate heuristics
    while np.any(heuristics < 1e-8):
        # Select the most promising item (largest heuristic)
        selected_index = np.argmax(heuristics)
        
        # Remove dominated items
        non_dominated_indices = np.where(density > dominance_threshold * density[selected_index])[0]
        heuristics[non_dominated_indices] = 0
        
        # Normalize by the maximum heuristic value found
        max_heuristic = np.max(heuristics)
        heuristics = heuristics / (max_heuristic + 1e-8)
        
        # Introduce randomness to maintain diversity
        np.random.shuffle(heuristics)
        
        # Update the heuristic of the selected item
        heuristics[selected_index] += np.random.uniform(0.5, 1.0)
    
    # Ensure the sum of heuristics does not exceed 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
