```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an empty array for the heuristic values
    heuristic = np.zeros_like(prize)
    
    # Calculate the normalized density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate the balance between high density and low sparsity
    balance = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Add the diversity factor to the heuristic
    heuristic = heuristic + diversity_factor
    
    # Apply a penalty for high sparsity and low density
    penalty = sparsity * 0.5
    heuristic = heuristic - penalty
    
    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic = heuristic / max_heuristic
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_penalty = np.where(weight.sum(axis=1) == 0, 1e-8, 0)
    heuristic += zero_weight_penalty
    
    return heuristic
```
