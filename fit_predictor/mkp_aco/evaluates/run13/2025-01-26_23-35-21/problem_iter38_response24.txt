```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized prize per unit weight for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize sparsity by considering the maximum sparsity and adding a small constant
    sparsity = np.sum(weight, axis=1)
    normalized_sparsity = sparsity / (np.max(sparsity) + 1e-8)
    
    # Introduce a balance between density and sparsity
    balance_factor = density * normalized_sparsity
    
    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)
    
    # Calculate a heuristic value combining the balance factor and randomness
    heuristic_value = balance_factor + random_factor
    
    # Normalize the heuristic value to ensure all items are considered equally
    max_heuristic_value = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic_value + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[np.sum(weight, axis=1) < 1e-8] = 1e-8
    
    return normalized_heuristic
```
