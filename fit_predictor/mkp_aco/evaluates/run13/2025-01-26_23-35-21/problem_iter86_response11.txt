```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Calculate the normalized prize
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the normalized weight
    normalized_weight = np.sum(weight, axis=1) / np.sum(weight)
    
    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1)
    
    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1)
    
    # Calculate the density metric by combining normalized prize and value-to-weight ratio
    density = normalized_prize + value_to_weight_ratio
    
    # Calculate the diversity factor based on sparsity
    diversity_factor = 1 / (1 + sparsity)
    
    # Calculate a balance factor between density and weight normalization
    balance_factor = density / (density + normalized_weight)
    
    # Combine the metrics using a weighted sum
    heuristic = (0.6 * balance_factor +
                 0.4 * diversity_factor)
    
    # Introduce randomness to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    heuristic *= (1 + random_factor - np.max(random_factor))
    
    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)
    
    return normalized_heuristic
```
