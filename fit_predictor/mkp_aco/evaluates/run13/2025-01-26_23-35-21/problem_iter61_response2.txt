```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics array with zeros
    heuristics = np.zeros(weight.shape[0])

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate sum of weights
    weight_sum = np.sum(weight, axis=1)

    # Select top items based on density
    top_items_density = np.argsort(density)[-5:]

    # Select top items based on sparsity
    top_items_sparsity = np.argsort(sparsity)[:5]

    # Calculate a combined heuristic based on the selection
    for i in top_items_density:
        heuristics[i] += density[i]
    for i in top_items_sparsity:
        heuristics[i] += sparsity[i]

    # Introduce randomness to diversify the selection
    np.random.shuffle(heuristics)

    # Normalize heuristics to ensure a sum close to 1
    heuristics /= np.sum(heuristics)

    # Ensure non-zero values by adding a small epsilon
    heuristics += 1e-8

    return heuristics
```
