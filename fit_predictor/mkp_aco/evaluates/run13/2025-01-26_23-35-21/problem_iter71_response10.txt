```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity as the ratio of the sum of weights to the maximum weight
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce additional heuristics based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Calculate the sum of weights for each item
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items by comparing each item's balance heuristic with its own prize to weight ratio
    dominated_items = np.where(balance_heuristic < prize / weight_sum)[0]
    for item in dominated_items:
        weight[item] = np.array([0] * len(weight[item]))
    
    # Introduce a diversity factor by considering the minimum sparsity
    diversity_factor = 1 / (np.min(sparsity) + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * balance_heuristic + 0.5 * diversity_factor
    
    # Normalize the combined heuristics
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Return the normalized combined heuristics
    return normalized_combined_heuristic
```
