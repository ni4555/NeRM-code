```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Intensity measures how valuable each item is relative to its weight
    intensity = prize / np.sum(weight, axis=1)
    
    # Diversity factor based on relative density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Balance factor to reward a balance between high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Create a heuristic value considering the intensity, diversity, and balance
    heuristic = intensity * diversity_factor * balance_factor
    
    # Normalize the heuristic values to ensure a range between 0 and 1
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    else:
        heuristic = np.zeros_like(heuristic)
    
    # Introduce a small constant to avoid division by zero or to maintain diversity
    epsilon = 1e-8
    heuristic = heuristic + epsilon
    
    # Return the normalized heuristic vector
    return heuristic
```
