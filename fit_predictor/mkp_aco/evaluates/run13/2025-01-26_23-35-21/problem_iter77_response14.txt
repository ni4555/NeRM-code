```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Introduce a randomness factor to explore the solution space
    randomness_factor = np.random.rand(len(heuristic))
    
    # Create a combined heuristic that balances the above factors and randomness
    combined_heuristic = heuristic * 0.7 + randomness_factor * 0.3
    
    # Normalize by the maximum heuristic value
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Prune dominated items by setting their heuristic to zero
    dominated_indices = np.argsort(combined_heuristic)[::-1]
    for i in range(len(dominated_indices) - 1):
        if np.any(weight[dominated_indices[i + 1], :] <= weight[dominated_indices[i], :]):
            normalized_combined_heuristic[dominated_indices[i + 1]] = 0
    
    # Set zero weights to a small value to maintain diversity
    normalized_combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_combined_heuristic
```
