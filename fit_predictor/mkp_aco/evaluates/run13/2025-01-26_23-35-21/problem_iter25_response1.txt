```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an empty array to store the final heuristics
    heuristics = np.zeros_like(prize)
    
    # Calculate normalized density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a diversity factor based on the density
    diversity_factor = density / (np.mean(density) + 1e-8)
    
    # Create a heuristic based on a balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics to form the final heuristic values
    combined_heuristic = diversity_factor * balance_heuristic
    
    # Set items with no weight to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
