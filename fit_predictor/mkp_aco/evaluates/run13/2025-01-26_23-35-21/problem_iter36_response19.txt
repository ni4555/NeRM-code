```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure non-zero denominator
    normalized_prize = prize / np.max(prize)
    
    # Calculate the normalized density for each item
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce randomness to the heuristic to avoid local optima
    randomness = np.random.rand(len(prize))
    
    # Integrate a balance factor between high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Create a heuristic value by combining density, balance factor, and randomness
    heuristic_value = density * (1 - sparsity) + balance_factor + randomness
    
    # Normalize the heuristic values to ensure they are non-negative
    normalized_heuristic = np.clip(heuristic_value, 0, 1)
    
    # Introduce a penalty for items with a high weight sum to prevent overloading the knapsack
    penalty = weight_sum / (np.max(weight_sum) + 1e-8)
    
    # Adjust the heuristic values based on the penalty
    adjusted_heuristic = normalized_heuristic * (1 - penalty)
    
    # Introduce sparsity by setting some values to zero based on a threshold
    sparsity_threshold = np.mean(density) * 0.5
    adjusted_heuristic[density < sparsity_threshold] = 0
    
    return adjusted_heuristic
```
