```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items based on density
    max_density_index = np.argmax(density)
    dominated_indices = np.where(density < density[max_density_index])[0]
    density[dominated_indices] = 0
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a final heuristic by combining the diversity factor with the density
    heuristic = diversity_factor * density
    
    # Introduce randomness for diverse solution sampling
    random_factor = np.random.rand(len(density))
    random_factor = random_factor / np.sum(random_factor)
    
    # Combine heuristics with randomness
    final_heuristic = heuristic * random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = final_heuristic / (np.max(final_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
