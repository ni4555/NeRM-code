```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize prize values to create a density measure
    density = prize / np.max(prize)

    # Calculate the total weight of each item as a measure of its size
    item_size = np.sum(weight, axis=1)

    # Introduce a diversity score based on the minimum item size to encourage selecting different items
    diversity_score = 1 / (np.min(item_size) + 1e-8)

    # Calculate the sparsity measure as the inverse of the average item size
    sparsity = 1 / (np.mean(item_size) + 1e-8)

    # Inverse of the sum of weights as a measure of difficulty to fit the item
    difficulty = 1 / (np.sum(weight, axis=1) + 1e-8)

    # Combine the metrics into a heuristic value
    heuristic_value = density * diversity_score * sparsity * difficulty

    # Normalize the heuristic values to be between 0 and 1
    max_heuristic = np.max(heuristic_value)
    heuristic_value /= max_heuristic if max_heuristic > 0 else 1

    return heuristic_value
```
