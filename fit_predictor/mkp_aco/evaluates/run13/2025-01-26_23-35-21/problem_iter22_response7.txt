```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Intensity measures how important it is for a high prize relative to its weight
    intensity = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Create a heuristic value considering the intensity and sparsity
    heuristic_value = intensity / sparsity
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Introduce a balance heuristic that rewards balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Adaptively blend heuristics considering current performance and potential for new solutions
    balance_factor = np.sum(weight, axis=1) / np.sum(np.sum(weight, axis=1))
    
    # Create a final heuristic by combining heuristic values
    heuristic = heuristic_value * diversity_factor * balance_factor + balance_heuristic
    
    # Normalize by the maximum heuristic value to bound values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a very small value to maintain diversity while being negligible
    normalized_heuristic[np.sum(weight, axis=1) < 1e-8] = 1e-10
    
    return normalized_heuristic
```
