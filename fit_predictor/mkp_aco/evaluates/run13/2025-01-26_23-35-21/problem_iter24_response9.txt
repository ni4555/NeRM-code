```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the average density
    average_density = np.mean(density)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    diversity_factor = (density - average_density) / (np.max(density) - average_density)
    
    # Create a final heuristic by combining the heuristic value with the diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Introduce penalties for items that are too dense or too sparse
    penalty_dense = np.where(density > 1, 1 - density, 0)
    penalty_sparse = np.where(sparsity > 1, 1 - sparsity, 0)
    heuristic -= (penalty_dense + penalty_sparse)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_penalty = np.where(weight_sum < 1e-8, 1e-8, 0)
    heuristic += zero_weight_penalty
    
    # Normalize to ensure the sum is 1 to maintain the total capacity constraint
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
