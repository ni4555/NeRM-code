```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize prize by sum of weights to balance different scales
    normalized_prize = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize weight to maintain uniform bounds
    normalized_weight = weight / np.max(weight, axis=1)[:, np.newaxis] + 1e-8
    
    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Apply a penalty to the ratio of the most sparsely packed items
    penalty = 1 - np.sort(value_to_weight_ratio)[::-1] / np.max(value_to_weight_ratio)
    
    # Introduce a randomness factor for diversity
    randomness = np.random.rand(normalized_weight.shape[0])
    
    # Calculate heuristic using a combination of metrics and randomness
    heuristic = value_to_weight_ratio * penalty * randomness
    
    # Normalize heuristic to the range [0, 1]
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Avoid zero heuristic values to ensure diversity in the solution set
    normalized_heuristic[normalized_heuristic < 1e-8] = 1e-8
    
    return normalized_heuristic
```
