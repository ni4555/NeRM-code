```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Diversity measure - standard deviation of density
    diversity_std = np.std(density)
    
    # Diversity measure - variance of density
    diversity_var = np.var(density)
    
    # Promote diversity based on the variance
    diversity_factor = diversity_var / (np.max(diversity_var) + 1e-8)
    
    # Balance between density and sparsity
    balance_measure = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Normalize the metrics
    density = density / (np.max(density) + 1e-8)
    sparsity = sparsity / (np.max(sparsity) + 1e-8)
    diversity_factor = diversity_factor / (np.max(diversity_factor) + 1e-8)
    balance_measure = balance_measure / (np.max(balance_measure) + 1e-8)
    
    # Combine metrics using a weighted sum
    combined_metrics = 0.5 * density + 0.3 * diversity_factor + 0.2 * balance_measure
    
    # Ensure diversity by setting items with low weight contribution to a small value
    low_weight_mask = np.sum(weight, axis=1) < 1e-8
    combined_metrics[low_weight_mask] = 1e-8
    
    # Normalize the combined metrics
    normalized_combined_metrics = combined_metrics / (np.sum(combined_metrics) + 1e-8)
    
    return normalized_combined_metrics
```
