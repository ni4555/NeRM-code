```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate normalized variance to encourage diversity
    normalized_variance = np.var(weight, axis=1) / np.mean(weight, axis=1)
    # Normalize the utility to a range between 0 and 1
    normalized_utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    # Combine the normalized utility and the normalized variance
    combined_score = normalized_utility + normalized_variance
    # Apply a sigmoid function to smooth the scores and ensure a non-negative range
    heuristics = 1 / (1 + np.exp(-combined_score))
    # Sparsify the heuristics by setting a threshold
    threshold = np.sum(combined_score) / len(combined_score)
    heuristics[combined_score < threshold] = 0
    return heuristics
```
