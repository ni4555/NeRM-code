```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the normalized density for each item considering dimensionality
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the balanced density by incorporating both density and sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    balanced_density = density - (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce diversity by considering the variance of density
    variance_density = np.var(density)
    diversity_factor = 1 / (1 + variance_density)
    
    # Consider the sum of weights as an additional metric
    weight_sum = np.sum(weight, axis=1)
    
    # Combine all factors into a single heuristic
    heuristic = (balanced_density * diversity_factor + weight_sum)  # Adjust weights as needed
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Prune dominated items
    non_dominated_indices = np.where(density >= np.min(density[density > 0]))[0]
    dominated_mask = np.ones(n, dtype=bool)
    dominated_mask[non_dominated_indices] = False
    normalized_heuristic[dominated_mask] = 0
    
    # Introduce a small value for items with zero weight to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
