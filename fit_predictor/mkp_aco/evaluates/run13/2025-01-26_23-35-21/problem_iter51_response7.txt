```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce a randomness factor
    randomness_factor = np.random.rand(*weight.shape)
    
    # Calculate the heuristic based on multiple factors
    heuristic = (density * (1 - sparsity) + randomness_factor) / (np.max(density * (1 - sparsity) + randomness_factor) + 1e-8)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a balance factor between density and sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Prune dominated items
    dominated_items = np.any(np.all(weight[:, :1] > weight[:, 1:], axis=1), axis=1)
    heuristic[dominated_items] = 0
    
    # Integrate the balance factor into the heuristic
    combined_heuristic = normalized_heuristic * balance_factor
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
