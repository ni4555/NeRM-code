```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristic array with zeros
    heuristic = np.zeros_like(prize)
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce randomness
    random_factor = np.random.rand(len(prize))
    
    # Combine density, sparsity, and randomness
    heuristic = density * (1 - sparsity) + random_factor
    
    # Normalize to prevent dominance
    heuristic /= np.max(heuristic + 1e-8)
    
    # Introduce diversity by penalizing items with high sparsity
    heuristic[sparsity > 0.5] *= 0.5
    
    # Introduce an additional diversity factor based on the sum of weights
    diversity_factor = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))
    heuristic *= diversity_factor
    
    return heuristic
```
