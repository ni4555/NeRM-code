```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity and penalize high sparsity items
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    sparsity_penalty = np.exp(-sparsity)
    
    # Incorporate randomness to encourage exploration
    random_factor = np.random.rand(len(prize))
    
    # Calculate additional heuristic based on a trade-off between high density and low sparsity
    trade_off_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine factors using a weighted sum to get heuristic value
    heuristic_value = density * 0.7 + sparsity_penalty * 0.2 + random_factor * 0.1 + trade_off_factor * 0.2
    
    # Normalize the heuristic value to ensure a proper scale
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Set zero weights to a very low value to avoid dominance of these items
    combined_heuristic = np.where(weight_sum < 1e-8, 1e-10, normalized_heuristic)
    
    return combined_heuristic
```
