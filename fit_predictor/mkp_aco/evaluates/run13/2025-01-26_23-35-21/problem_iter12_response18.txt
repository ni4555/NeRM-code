```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize profit to weight ratio considering the dimensionality of the weight
    normalized_profit = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize sparsity considering the maximum weight in the dimension
    normalized_sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Normalize the sum of weights to emphasize lighter items
    normalized_weight_sum = np.sum(weight, axis=1) / (np.mean(weight, axis=1) + 1e-8)
    
    # Calculate a heuristic value that balances profit, sparsity, and weight
    heuristic_value = normalized_profit * (1 - normalized_sparsity) - normalized_weight_sum
    
    # Introduce a penalty for items with very low profit and near-zero weight
    penalty = np.where((prize < prize.mean() * 0.5) & (np.sum(weight, axis=1) < 1e-8), -prize.max(), 0)
    heuristic_value += penalty
    
    # Normalize the heuristic values to maintain a positive range
    normalized_heuristic = (heuristic_value - np.min(heuristic_value)) / (np.max(heuristic_value) - np.min(heuristic_value))
    
    # Apply a sparsity threshold to ensure the heuristic values are not too sparse
    sparsity_threshold = 0.2  # Define a sparsity threshold
    sparsity_penalty = np.where(normalized_heuristic < sparsity_threshold, -np.inf, 0)
    normalized_heuristic += sparsity_penalty
    
    # Final normalization to ensure all heuristic values are non-negative
    normalized_heuristic = np.clip(normalized_heuristic, 0, None)
    
    return normalized_heuristic
```
