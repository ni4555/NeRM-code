```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to average weight across dimensions
    prize_to_avg_weight = prize / np.mean(weight, axis=1)
    # Calculate the ratio of prize to sum of weights across dimensions
    prize_to_sum_weight = prize / np.sum(weight, axis=1)
    # Calculate the diversity of weights by considering the standard deviation
    diversity = np.std(weight, axis=1)
    # Calculate the sparsity of weights by considering the number of non-zero weights
    sparsity = np.sum(weight != 0, axis=1)
    # Combine the factors with a weighted sum, giving more weight to the diversity and sparsity
    combined_factor = 0.3 * prize_to_avg_weight + 0.4 * prize_to_sum_weight + 0.3 * (1 / diversity) + 0.3 * (1 / sparsity)
    # Normalize the combined factor by subtracting the min and dividing by the range
    normalized_factor = (combined_factor - np.min(combined_factor)) / (np.max(combined_factor) - np.min(combined_factor))
    # Sparsify the heuristics by setting a threshold and setting unpromising elements to zero
    threshold = np.percentile(normalized_factor, 90)  # Using the 90th percentile as a threshold
    heuristics = np.where(normalized_factor >= threshold, normalized_factor, 0)
    return heuristics
```
