```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate additional metrics
    value_density_ratio = prize / (np.sum(weight**2, axis=1) + 1e-8)
    sparsity_inverse = 1 / (sparsity + 1e-8)

    # Prune dominated solutions (items with zero or very low density)
    dominated_prune_threshold = np.percentile(density, 90)
    heuristics_pruned = np.where(density >= dominated_prune_threshold, density, 0)

    # Calculate the fraction of items that are not dominated
    non_dominated_fraction = np.count_nonzero(heuristics_pruned) / n

    # Introduce randomness
    random_factor = np.random.rand(n) + 1e-8

    # Combine all metrics using a weighted sum, including randomness
    heuristic = (0.4 * heuristics_pruned +
                 0.3 * sparsity_inverse +
                 0.2 * value_density_ratio +
                 0.1 * random_factor)

    # Normalize heuristics
    normalized_heuristic = heuristic / (np.sum(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if non_dominated_fraction == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
