```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights and the standard deviation of weights
    weight_sum = np.sum(weight, axis=1)
    weight_std = np.std(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum - weight_std
    
    # Introduce a diversity factor based on the average density and standard deviation
    average_density = np.mean(density)
    average_std = np.mean(weight_std)
    diversity_factor = (density / (average_density + 1e-8)) * (1 / (weight_std / (average_std + 1e-8)))
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a penalty for items that are too dense or have a low standard deviation
    penalty = np.where((density > 1) | (weight_std < average_std / 2), 1 - np.clip((density + weight_std - average_density - average_std / 2) / 2, 0, 1), 0)
    normalized_heuristic *= (1 - penalty)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
