```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize the prize to account for item differences
    normalized_prize = prize / np.max(prize)
    
    # Calculate the density of each item as the ratio of prize to weight sum
    density = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity of each item as the ratio of the sum of weights to the max weight
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Combine density and sparsity into a single heuristic value
    heuristic_value = density * (1 - sparsity)
    
    # Prune very low-quality heuristics by setting them to zero
    low_quality_threshold = np.percentile(heuristic_value, 5)
    heuristic_value[heuristic_value < low_quality_threshold] = 0
    
    # Add a random factor for exploration-exploitation balance
    exploration_balance = np.random.rand(n)
    
    # Combine the heuristic value with the random balance
    combined_heuristic = heuristic_value * exploration_balance
    
    # Normalize the combined heuristic to the range [0, 1]
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    return combined_heuristic
```
