```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate diversity factor
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Calculate a balance factor based on density and sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the diversity and balance factors
    combined_factor = diversity_factor * balance_factor
    
    # Prune low-quality items
    weight_sum = np.sum(weight, axis=1)
    low_quality_threshold = np.percentile(combined_factor, 5)
    combined_factor[combined_factor < low_quality_threshold] = 0
    
    # Introduce randomness for exploration
    random_factor = np.random.rand(n)
    
    # Combine all factors
    heuristic_value = combined_factor + random_factor
    
    # Normalize the heuristic to ensure they sum to 1
    heuristic_value = heuristic_value / np.sum(heuristic_value)
    
    # Set zero weights to a small value to maintain diversity
    heuristic_value[weight_sum < 1e-8] = 1e-8
    
    return heuristic_value
```
