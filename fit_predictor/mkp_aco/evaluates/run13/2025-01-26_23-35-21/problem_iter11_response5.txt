```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Include a diversity factor that penalizes items with similar density
    diversity = np.sum(np.abs(density - np.mean(density)), axis=1)
    heuristic_value -= diversity
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Sparsify the heuristics by setting lower values to zero to encourage diversity
    sparsified_heuristic = np.where(normalized_heuristic > 0, normalized_heuristic, 0)
    
    return sparsified_heuristic
```
