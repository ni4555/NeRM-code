```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate the normalized utility based on the maximum utility
    normalized_utility = utility / np.max(utility)
    # Calculate the sparsity score for each item as the number of non-zero weights
    sparsity_score = np.sum(weight != 0, axis=1)
    # Normalize the sparsity score to encourage selecting items with higher diversity
    normalized_sparsity_score = sparsity_score / np.max(sparsity_score)
    # Combine the normalized utility and the normalized sparsity score with domain-specific weights
    heuristics = 0.7 * normalized_utility + 0.3 * normalized_sparsity_score
    # Apply a smoothing to the heuristics to avoid too sharp changes
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
