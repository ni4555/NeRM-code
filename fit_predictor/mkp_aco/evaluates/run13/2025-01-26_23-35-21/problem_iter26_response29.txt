```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density, which is the prize per unit weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity, which is the sum of weights normalized by the maximum weight
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Balance density and sparsity with a focus on the difference
    balance = (density - sparsity) / (np.abs(density - sparsity) + 1e-8)
    
    # Diversity factor based on the standard deviation of the density
    diversity_factor = np.exp(-np.std(density) + 1e-8)
    
    # Combine the metrics into a single heuristic value
    heuristic_value = diversity_factor * balance
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Ensure non-dominant items are included by setting minimum heuristic value
    minimum_heuristic_value = 1e-8
    combined_heuristic = np.maximum(normalized_heuristic, minimum_heuristic_value)
    
    return combined_heuristic
```
