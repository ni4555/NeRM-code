```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize values to ensure all metrics are on the same scale
    normalized_prize = prize / np.max(prize)

    # Calculate density considering the dimensionality of the weight
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate sparsity based on the weight dimension
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Introduce a diversity factor based on the density
    diversity_factor = density / (np.mean(density) + 1e-8)

    # Incorporate randomness to avoid local optima
    random_factor = np.random.rand(len(density))

    # Create a heuristic value by combining the metrics and randomness
    heuristic_value = density * (1 - sparsity) + random_factor

    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)

    # Prune dominated solutions by setting low-value items to zero
    dominance_mask = normalized_heuristic < 0.1
    normalized_heuristic[dominance_mask] = 0

    return normalized_heuristic
```
