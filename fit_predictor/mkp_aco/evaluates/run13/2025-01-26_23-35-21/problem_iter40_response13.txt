```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate the density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a diversity factor based on the ratio of the maximum prize to the average prize
    diversity_factor = np.max(prize) / np.mean(prize)
    
    # Create a heuristic value by blending metrics
    heuristic_value = density / (1 + sparsity)
    
    # Introduce randomness for diversity and to escape local optima
    random_factor = np.random.rand(len(prize)) * diversity_factor
    
    # Combine the heuristic value with the randomness
    heuristic = heuristic_value + random_factor
    
    # Normalize by the maximum heuristic value to prevent dominance
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a balance heuristic that favors both high density and low sparsity
    balance_heuristic = (density + sparsity) / (2 + 1e-8)
    
    # Combine the normalized heuristic with the balance heuristic
    combined_heuristic = normalized_heuristic * 0.6 + balance_heuristic * 0.4
    
    # Incorporate the item size into the heuristic by adjusting the sum of weights
    combined_heuristic -= weight_sum * 0.1
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
