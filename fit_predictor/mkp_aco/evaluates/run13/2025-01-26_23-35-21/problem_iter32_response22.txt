```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized prize per unit weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Diversity factor based on the standard deviation of the density
    diversity_factor = np.exp(-np.std(density) + 1)

    # Combine balance metric between high density and low sparsity
    balance_metric = (density - sparsity) / (density + sparsity + 1e-8)

    # Integrate additional metrics
    weight_sum = np.sum(weight, axis=1)

    # Calculate a sparsity penalty that reduces the value of very sparse items
    sparsity_penalty = sparsity / (np.max(sparsity) + 1e-8)

    # Combine all factors to create a heuristic
    heuristic = balance_metric * diversity_factor + sparsity_penalty - weight_sum

    # Introduce randomness to promote diversity in the selection process
    random_factor = (1 + np.random.rand(len(prize))) * 0.4  # Randomly vary weights for diversity

    # Final heuristic value
    final_heuristic = random_factor * heuristic + (1 - random_factor) * density

    # Normalize the heuristic values to be between 0 and 1
    max_heuristic = np.max(final_heuristic)
    if max_heuristic > 0:
        final_heuristic /= max_heuristic

    return final_heuristic
```
