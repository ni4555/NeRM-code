```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized prize per unit weight for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity for each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Combine density and sparsity to form a heuristic value
    heuristic_value = density / (sparsity + 1e-8)
    
    # Introduce a penalty for items with extremely low sparsity (i.e., heavy items)
    penalty_factor = (1 - sparsity) / (1 - np.min(sparsity) + 1e-8)
    
    # Adjust the heuristic with the penalty factor and ensure non-negativity
    adjusted_heuristic = heuristic_value * penalty_factor
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(adjusted_heuristic)
    if max_heuristic > 0:
        adjusted_heuristic /= max_heuristic
    
    return adjusted_heuristic
```
