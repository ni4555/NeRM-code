```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Ensure no item has zero weight to avoid division by zero
    weight[weight == 0] = 1e-8
    
    # Calculate normalized prize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity considering the minimum weight
    min_weight = np.min(weight, axis=1)
    sparsity = np.sum(weight, axis=1) / (min_weight + 1e-8)
    
    # Introduce a diversity metric based on the variance of the density
    variance_density = np.var(density)
    diversity = 1 / (variance_density + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Create a final heuristic by combining the heuristic value with diversity
    heuristic = heuristic_value * diversity
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * normalized_heuristic + 0.5 * balance_heuristic
    
    # Prune dominated solutions by setting their heuristic to zero
    sorted_indices = np.argsort(combined_heuristic)[::-1]
    dominated_indices = []
    for i in range(1, len(sorted_indices)):
        if combined_heuristic[sorted_indices[i]] > combined_heuristic[sorted_indices[i - 1]]:
            dominated_indices.append(sorted_indices[i - 1])
    combined_heuristic[dominated_indices] = 0
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Normalize the heuristics to ensure they sum to 1
    combined_heuristic /= np.sum(combined_heuristic)
    
    return combined_heuristic
```
