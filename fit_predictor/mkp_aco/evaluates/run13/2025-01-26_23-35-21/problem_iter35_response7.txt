```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize to weight ratio
    prize_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity metric
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Add a diversity factor based on the standard deviation of the prize to weight ratio
    diversity_factor = np.std(prize_weight_ratio)
    
    # Introduce a sparsity adjustment that rewards sparsity more in items with lower prize to weight ratio
    sparsity_adjustment = (1 - prize_weight_ratio) * sparsity
    
    # Combine the metrics into a heuristic
    heuristic = prize_weight_ratio + sparsity_adjustment + diversity_factor
    
    # Normalize the heuristic values
    normalized_heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic) + 1e-8)
    
    # Set zero weights to a small positive value to ensure they contribute to the diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
