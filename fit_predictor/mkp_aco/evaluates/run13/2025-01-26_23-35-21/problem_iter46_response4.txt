```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density, considering dimensionality
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate diversity based on the standard deviation of weights
    diversity = np.std(weight, axis=1) / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the sum of weights for each item
    weight_sum = np.sum(weight, axis=1)

    # Create a heuristic value by balancing utility, diversity, and sparsity
    heuristic_value = 0.5 * density + 0.2 * diversity - 0.3 * sparsity

    # Normalize the heuristic values
    max_heuristic_value = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic_value + 1e-8)

    # Introduce a balance heuristic to favor high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)

    # Combine the normalized heuristic with the balance heuristic
    combined_heuristic = 0.7 * normalized_heuristic + 0.3 * balance_heuristic

    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8

    return combined_heuristic
```
