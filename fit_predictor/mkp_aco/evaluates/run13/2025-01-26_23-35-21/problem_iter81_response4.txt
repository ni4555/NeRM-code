```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items based on normalized density
    dominance_filter = np.all(weight <= np.max(weight, axis=1)[:, np.newaxis], axis=1)
    non_dominated_items = np.where(dominance_filter)[0]
    density[non_dominated_items] = np.max(density)
    
    # Introduce randomness to diversify the heuristics
    random_factor = np.random.rand(len(density))
    
    # Combine density and randomness to create initial heuristics
    initial_heuristic = density * random_factor
    
    # Normalize the heuristics to maintain a scale
    max_heuristic = np.max(initial_heuristic)
    initial_heuristic /= max_heuristic
    
    # Balance the heuristics with a diversity factor
    diversity_factor = np.random.rand(len(density))
    balanced_heuristic = initial_heuristic * diversity_factor
    
    # Normalize the final heuristics to maintain a scale
    max_balanced_heuristic = np.max(balanced_heuristic)
    balanced_heuristic /= max_balanced_heuristic
    
    # Prune zero weight items to avoid dominance
    balanced_heuristic[weight_sum < 1e-8] = 0
    
    return balanced_heuristic
```
