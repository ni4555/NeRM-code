```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    # Calculate density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate dominance
    dominance_matrix = np.all(density[:, np.newaxis] <= density, axis=0) & \
                       (np.sum(weight, axis=1) > weight.sum(axis=1))
    
    # Identify dominated items
    dominated_items = np.where(dominance_matrix)[0]
    
    # Filter out dominated items
    if len(dominated_items) > 0:
        prize = np.delete(prize, dominated_items)
        weight = np.delete(weight, dominated_items, axis=0)
    
    # Calculate sparsity measure for remaining items
    sparsity = np.sum(weight, axis=1) / n
    
    # Normalize the prize density and sparsity measure
    max_density = np.max(density)
    max_sparsity = np.max(sparsity)
    normalized_density = density / (max_density + 1e-8)
    normalized_sparsity = sparsity / (max_sparsity + 1e-8)
    
    # Combine density and sparsity in a balanced manner
    balance_heuristic = (normalized_density - normalized_sparsity) / \
                         (normalized_density + normalized_sparsity + 1e-8)
    
    # Introduce randomness for diversity and prevent zero values
    random_vector = np.random.rand(n)
    random_vector = random_vector / np.max(random_vector) + 1e-8
    
    # Create a final heuristic by blending the balance heuristic with randomness
    heuristic = balance_heuristic + random_vector
    
    return heuristic
```
