```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Add a transformation to enhance diversity, e.g., using the square root
    density_transformed = np.sqrt(density)
    
    # Combine multiple metrics with domain-specific weighting
    heuristic_value = 0.6 * density_transformed + 0.4 * (1 - sparsity)
    
    # Normalize by the maximum heuristic value to prevent dominance of any particular metric
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce a diversity element by setting low scoring items to a lower threshold
    diversity_threshold = np.percentile(normalized_heuristic, 10)
    normalized_heuristic[normalized_heuristic < diversity_threshold] = 0
    
    return normalized_heuristic
```
