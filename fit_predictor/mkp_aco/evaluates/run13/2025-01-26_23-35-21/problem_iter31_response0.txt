```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity and normalize
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    sparsity_normalized = sparsity / np.max(sparsity)
    
    # Calculate sum of weights and normalize
    weight_sum = np.sum(weight, axis=1)
    weight_sum_normalized = weight_sum / np.max(weight_sum)
    
    # Introduce randomness by adding Gaussian noise
    randomness = np.random.normal(0, 0.1, prize.shape)
    
    # Create heuristic by combining factors
    heuristic = density * (1 - sparsity_normalized) - weight_sum_normalized + randomness
    
    # Penalize outliers by reducing their heuristic values
    outliers_penalty = np.where(weight_sum_normalized > 1, heuristic - 0.5, heuristic)
    
    # Normalize the heuristic
    normalized_heuristic = outliers_penalty / (np.max(outliers_penalty) + 1e-8)
    
    # Introduce a diversity factor
    diversity_factor = np.random.uniform(0.5, 1.5, prize.shape)
    
    # Adjust the heuristic to include the diversity factor
    adjusted_heuristic = normalized_heuristic * diversity_factor
    
    return adjusted_heuristic
```
