```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate diversity by considering the inverse of sparsity
    diversity = 1 / (sparsity + 1e-8)
    
    # Calculate the weighted sum of items based on a heuristic
    weighted_sum = (density + diversity) * prize
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics with dynamic weights
    heuristic_value = density * 0.5 + diversity * 0.5 - weight_sum
    
    # Introduce a diversity penalty to prevent overfitting by sparsity
    heuristic_value *= diversity
    
    # Manage sparsity by adding a term to penalize zero weights
    heuristic_value[weight_sum == 0] = -np.inf
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
