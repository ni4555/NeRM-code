```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to account for different scales
    normalized_prize = prize / np.max(prize)
    
    # Calculate the normalized weight sum for each item
    normalized_weight_sum = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce randomness to promote diversity
    random_factor = np.random.rand(len(prize))
    
    # Create a heuristic that balances the normalized prize and normalized weight sum
    heuristic = normalized_prize - normalized_weight_sum + random_factor
    
    # Introduce a diversity penalty to avoid selecting too many similar items
    diversity_penalty = 1 / np.linalg.norm(heuristic)
    
    # Normalize the heuristic to ensure it's within a certain range
    normalized_heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic))
    
    # Set items with zero weight sum to a lower value to maintain diversity
    zero_weight_index = np.where(np.sum(weight, axis=1) == 0)[0]
    normalized_heuristic[zero_weight_index] = 0.1
    
    return normalized_heuristic
```
