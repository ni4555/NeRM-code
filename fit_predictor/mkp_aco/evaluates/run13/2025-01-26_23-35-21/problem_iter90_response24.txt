```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sqrt(np.sum(weight**2, axis=1))

    # Normalize the weight for each item based on the maximum weight in the dimension
    normalized_weight = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)

    # Weigh the value-to-weight ratio more heavily, as it is the primary criterion for selection
    # Normalize the weight to reduce its impact, as it is a secondary concern
    # Include a minor random factor to avoid local optima
    heuristic = (0.8 * value_to_weight_ratio +
                 0.1 * (1 - normalized_weight) +
                 0.1 * random_factor)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(value_to_weight_ratio == 0):
        heuristic = np.ones(n) * 1e-8

    return heuristic
```
