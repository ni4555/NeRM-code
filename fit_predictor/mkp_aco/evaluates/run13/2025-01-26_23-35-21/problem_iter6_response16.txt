```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight for each item
    ratio = prize / np.sum(weight, axis=1)
    # Normalize the prize values to balance weight and value
    normalized_prize = prize / np.sum(prize)
    # Calculate sparsity based on a threshold
    sparsity_threshold = 0.5
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    # Weigh normalized prize, ratio, and sparsity using a linear combination
    utility_weight = 0.6
    ratio_weight = 0.3
    sparsity_weight = 0.1
    heuristics = utility_weight * normalized_prize + ratio_weight * ratio + sparsity_weight * sparsity
    # Apply a logarithmic transformation to ensure sparsity and normalize further
    heuristics = np.log1p(heuristics)
    # Apply a cap to the heuristics to ensure non-negative values and boundedness
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
