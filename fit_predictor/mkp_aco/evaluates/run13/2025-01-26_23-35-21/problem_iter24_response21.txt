```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity normalized by the maximum sparsity
    max_sparsity = np.max(np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8))
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8) / max_sparsity
    
    # Calculate the ratio of density to sparsity
    density_sparsity_ratio = density / (1 - sparsity + 1e-8)
    
    # Calculate the sum of weights as a penalty
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce diversity factors based on min and max values
    min_density = np.min(density)
    diversity_factor_density = density / (min_density + 1e-8)
    max_sparsity = np.max(sparsity)
    diversity_factor_sparsity = sparsity / (max_sparsity + 1e-8)
    
    # Combine density, sparsity, and their ratios using a weighted sum
    heuristic_value = 0.5 * density_sparsity_ratio - 0.5 * weight_sum
    
    # Create a final heuristic by combining the heuristic value with diversity factors
    heuristic = heuristic_value * diversity_factor_density * diversity_factor_sparsity
    
    # Introduce a balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * heuristic + 0.4 * balance_heuristic
    
    # Apply penalties to avoid extreme selections
    penalty_dense = np.where(density > 1, 1 - density, 0)
    penalty_sparse = np.where(sparsity > 1, 1 - sparsity, 0)
    combined_heuristic *= (1 - penalty_dense - penalty_sparse)
    
    # Set zero weights to a very small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
