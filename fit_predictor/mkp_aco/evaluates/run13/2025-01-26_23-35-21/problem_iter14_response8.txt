```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize weights to consider the dimensionality
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate normalized prize per unit weight
    density = prize / np.sum(normalized_weight, axis=1)
    
    # Calculate normalized sparsity
    sparsity = np.sum(normalized_weight, axis=1) / np.max(normalized_weight, axis=1)
    
    # Calculate normalized weight sum
    weight_sum = np.sum(normalized_weight, axis=1)
    
    # Calculate standard deviation to account for variability
    std_dev = np.std(normalized_weight, axis=1)
    
    # Integrate metrics to create a heuristic value
    heuristic_value = density * (1 - sparsity) - weight_sum + std_dev * 0.1
    
    # Encourage diversity by considering the maximum weight and penalizing low diversity
    max_weight = np.max(normalized_weight, axis=1)
    diversity = 1 - (sparsity + max_weight)
    penalty = np.where(diversity < 0.1, -np.inf, 0)
    heuristic_value += penalty
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic_value = np.max(heuristic_value)
    if max_heuristic_value > 0:
        normalized_heuristic = heuristic_value / max_heuristic_value
    else:
        normalized_heuristic = np.zeros_like(heuristic_value)
    
    # Prune low heuristic values to eliminate weak candidates
    pruned_heuristic = np.where(normalized_heuristic < 0.1, 0, normalized_heuristic)
    
    return pruned_heuristic
```
