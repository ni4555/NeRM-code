```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prize to avoid dominance issues
    normalized_prize = prize / np.max(prize)

    # Normalize weight to encourage sparsity
    normalized_weight = weight / np.max(weight)

    # Calculate diversity by the sum of normalized weights
    diversity = np.sum(normalized_weight, axis=1)

    # Calculate sparsity as the average of normalized weights
    sparsity = np.mean(normalized_weight, axis=1)

    # Introduce randomness to avoid convergence
    randomness = np.random.rand(n)

    # Create a balance heuristic by considering both diversity and sparsity
    balance_heuristic = diversity * sparsity

    # Introduce a fairness factor based on the normalized prize
    fairness_factor = normalized_prize

    # Combine the balance heuristic and fairness factor to create a heuristic
    heuristic = balance_heuristic + fairness_factor + randomness

    # Normalize the heuristic to maintain consistency
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure the heuristics are non-negative
    normalized_heuristic = np.clip(normalized_heuristic, 1e-8, None)

    return normalized_heuristic
```
