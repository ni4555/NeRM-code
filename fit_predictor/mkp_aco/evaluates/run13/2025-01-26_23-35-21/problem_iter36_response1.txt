```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize per unit weight for each item
    density = prize / np.sum(weight, axis=1)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate the sum of weights to use as a heuristic
    weight_sum = np.sum(weight, axis=1)

    # Integrate a diversity factor based on the ratio of density to average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)

    # Combine density, sparsity, and weight sum to create a heuristic value
    heuristic_value = density * (1 - sparsity) - weight_sum * (1 - diversity_factor)

    # Normalize the heuristic values
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)

    # Create a balance heuristic to encourage items that are both dense and sparse
    balance_heuristic = (density + sparsity) / (density + sparsity + 1e-8)

    # Combine the heuristics using a weighted sum, focusing on the balance heuristic
    combined_heuristic = 0.5 * normalized_heuristic + 0.5 * balance_heuristic

    # Ensure diversity by setting items with negligible weight sum to a minimum value
    combined_heuristic[weight_sum < 1e-8] = 1e-8

    return combined_heuristic
```
