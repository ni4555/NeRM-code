```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce randomness for exploration
    randomness = np.random.rand(n)
    
    # Combine density, sparsity, and randomness into a heuristic
    heuristics = density + sparsity + randomness
    
    # Prune dominated items by setting their heuristic to zero
    dominated_mask = np.argsort(-density)[::-1] < np.argsort(-density)
    heuristics[dominated_mask] = 0
    
    # Normalize the heuristic values to ensure they sum to 1
    heuristics /= np.sum(heuristics)
    
    # Maintain diversity by ensuring low density and sparsity items are less prominent
    min_density_threshold = np.percentile(density, 5)
    min_sparsity_threshold = np.percentile(sparsity, 5)
    heuristics[density < min_density_threshold] *= 0.5
    heuristics[sparsity < min_sparsity_threshold] *= 0.5
    
    return heuristics
```
