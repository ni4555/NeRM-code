```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prizes to avoid dominance by large prizes
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Normalize weights to handle the multi-dimensional nature of weights
    max_weight_sum = np.max(np.sum(weight, axis=1))
    normalized_weight_sum = np.sum(weight, axis=1) / max_weight_sum

    # Calculate the density of each item, which combines value and weight
    density = normalized_prize / normalized_weight_sum

    # Introduce diversity by considering the sum of weights, encouraging selection of different items
    diversity = np.mean(weight, axis=1) / np.sum(weight, axis=1)

    # Balance the utility and diversity scores, giving more weight to utility
    balanced_score = 0.7 * density + 0.3 * diversity

    # Introduce a sparsity penalty to avoid selecting items with uniform weights
    sparsity_penalty = np.sum(weight, axis=1) / (n * m)
    sparsity_penalty = np.clip(sparsity_penalty, 0, 1)
    penalty_factor = 1 - sparsity_penalty

    # Normalize the combined heuristic values to maintain a consistent scale
    max_balanced_score = np.max(balanced_score)
    normalized_balanced_score = balanced_score / (max_balanced_score + 1e-8)

    # Incorporate the penalty factor into the heuristic to balance the selection
    heuristic = normalized_balanced_score * penalty_factor

    # Ensure the normalized heuristic values are non-negative
    heuristic = np.maximum(heuristic, 0)

    return heuristic
```
