```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate the density of each item
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate the adaptability factor by considering the ratio of the sum of weights to the total weight capacity
    adaptability_factor = np.sum(weight, axis=1) / (m * n)

    # Normalize density, sparsity, and adaptability factor to a similar scale
    density_normalized = density / np.max(density + 1e-8)
    sparsity_normalized = sparsity / np.max(sparsity + 1e-8)
    adaptability_factor_normalized = adaptability_factor / np.max(adaptability_factor + 1e-8)

    # Calculate diversity as the difference from the mean of normalized density and sparsity
    diversity = (density_normalized - np.mean(density_normalized)) * \
                (sparsity_normalized - np.mean(sparsity_normalized))

    # Combine heuristics with a focus on diversity, followed by density, sparsity, and adaptability
    heuristics = (0.6 * diversity +
                  0.2 * density_normalized +
                  0.1 * sparsity_normalized +
                  0.1 * adaptability_factor_normalized)

    # Normalize heuristics to ensure the sum is close to 1
    normalized_heuristics = heuristics / np.sum(heuristics)

    return normalized_heuristics
```
