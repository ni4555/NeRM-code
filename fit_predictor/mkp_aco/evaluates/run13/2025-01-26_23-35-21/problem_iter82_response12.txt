```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize to emphasize higher values
    normalized_prize = prize / np.max(prize) + 1e-8

    # Calculate density based on normalized prize
    density = normalized_prize / np.sum(weight, axis=1)

    # Calculate diversity factor by looking at standard deviation of density
    diversity_factor = density / (np.std(density) + 1e-8)

    # Calculate sparsity by sum of weights over the maximum weight
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Calculate balance factor as a trade-off between density and sparsity
    balance_factor = (1 - sparsity) / (density + sparsity + 1e-8)

    # Create an initial heuristic combining density, diversity, and balance
    initial_heuristic = density * diversity_factor * balance_factor

    # Adjust heuristic based on value-to-weight ratio to give preference to high-value items
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1)
    refined_heuristic = initial_heuristic * value_to_weight_ratio

    # Normalize the heuristic to ensure it is between 0 and 1
    normalized_heuristic = refined_heuristic / (np.max(refined_heuristic) + 1e-8)

    # Introduce a small random factor to encourage diversity
    random_factor = np.random.rand(n) / (np.max(np.random.rand(n)) + 1e-8)

    # Combine the normalized heuristic with a random factor
    final_heuristic = normalized_heuristic * random_factor

    # Ensure the heuristic does not include dominated items (zero weight)
    dominated_mask = np.sum(weight, axis=1) < 1e-8
    final_heuristic[dominated_mask] = 0

    return final_heuristic
```
