```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate the density of each item
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Prune dominated items by keeping only the ones with the highest normalized density
    max_density = np.max(density)
    dominated_indices = np.where(density < max_density)[0]
    density[dominated_indices] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)

    # Combine heuristics using weighted factors, emphasizing density
    heuristics = (0.7 * density +
                  0.3 * random_factor)

    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)

    # Introduce diversity by adding a penalty for low diversity
    diversity_penalty = np.mean(density) - np.mean(heuristics)
    heuristics -= diversity_penalty * (1 - heuristics)

    # Ensure the heuristics sum to 1 after penalties
    heuristics /= np.sum(heuristics)

    return heuristics
```
