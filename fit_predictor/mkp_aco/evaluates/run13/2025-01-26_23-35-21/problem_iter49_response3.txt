```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Randomness factor
    random_factor = np.random.rand(*weight.shape)
    
    # Density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Sparsity metric
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the metrics with randomness to create a heuristic
    heuristic = random_factor * (0.5 * density + 0.3 * sparsity + 0.2 * balance_heuristic)
    
    # Prune dominated items (those with lower density than the average)
    dominated_mask = density >= np.mean(density)
    heuristic[~dominated_mask] = 0
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce variance in the heuristics by perturbing the normalized values
    variance_factor = np.random.normal(0, 0.1, size=normalized_heuristic.shape)
    final_heuristic = normalized_heuristic + variance_factor
    
    # Ensure that the heuristics are non-negative
    final_heuristic = np.clip(final_heuristic, 0, 1)
    
    return final_heuristic
```
