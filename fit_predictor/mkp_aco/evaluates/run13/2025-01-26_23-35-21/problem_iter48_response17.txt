```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize values to consider a uniform scale
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the density, taking into account the weight and the prize
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity
    sparsity = 1 - density
    
    # Combine density and sparsity using a weighted sum to balance the two metrics
    combined_metric = 0.6 * density + 0.4 * sparsity
    
    # Introduce randomness to promote diversity and exploration
    random_factor = np.random.rand(len(prize))
    
    # Normalize the heuristic to sum to 1, allowing for a proper selection of items
    heuristic = (combined_metric + random_factor) / np.sum(combined_metric + random_factor + 1e-8)
    
    # Prune dominated solutions by setting low density to zero
    heuristic[density < np.min(density) / 2] = 0
    
    return heuristic
```
