```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity
    sparsity = np.sum(weight, axis=1) / (np.prod(weight) + 1e-8)
    
    # Create initial heuristics based on normalized density and sparsity
    heuristic = density / (sparsity + 1e-8)
    
    # Incorporate a weight-based factor
    weight_sum = np.sum(weight, axis=1)
    weight_factor = 1 / (weight_sum + 1e-8)
    
    # Incorporate a diversity factor
    diversity_factor = heuristic / (np.mean(heuristic) + 1e-8)
    
    # Prune dominated items: remove if item has zero weight
    dominated = weight_sum < 1e-8
    heuristic[dominated] = 0
    
    # Introduce randomness to encourage diversity and introduce variability
    np.random.shuffle(heuristic)
    
    # Normalize to maintain a range [0, 1]
    max_heuristic = np.max(heuristic)
    heuristic /= max_heuristic
    
    # Combine heuristics using a weighted sum, introducing a balance between high density, low sparsity, and low weight
    combined_heuristic = 0.6 * (heuristic - sparsity) + 0.4 * diversity_factor + weight_factor
    
    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(heuristic <= 1e-8):
        combined_heuristic = np.ones(n) * 1e-8
    
    return combined_heuristic
```
