```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density for each item
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value to weight ratio for each item
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Filter dominated items based on a combination of density, sparsity, and value-to-weight ratio
    dominated_mask = (density < np.percentile(density, 90)) | (sparsity < np.percentile(sparsity, 90)) | (value_to_weight_ratio < np.percentile(value_to_weight_ratio, 90))
    for metric in [density, sparsity, value_to_weight_ratio]:
        metric[dominated_mask] = 0

    # Normalize the metrics
    normalized_density = density / np.max(density + 1e-8)
    normalized_sparsity = (1 - sparsity) / np.max(1 - sparsity + 1e-8)
    normalized_value_to_weight_ratio = value_to_weight_ratio / np.max(value_to_weight_ratio + 1e-8)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics into a heuristic using a weighted sum
    heuristic = (0.5 * normalized_density +
                 0.3 * normalized_sparsity +
                 0.2 * normalized_value_to_weight_ratio +
                 0.0 * random_factor)  # Adjust random_factor weight as needed

    # Normalize the heuristic values
    normalized_heuristic = heuristic / np.max(heuristic + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(heuristic == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
