```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the ratio of prize to weight sum
    prize_to_weight_ratio = prize / np.sum(weight, axis=1)
    
    # Identify and eliminate dominated solutions
    non_dominated_indices = np.where(prize_to_weight_ratio >= np.mean(prize_to_weight_ratio))[0]
    
    # Use a weighted sum of the three metrics
    combined_heuristic = 0.5 * density[non_dominated_indices] + 0.3 * sparsity[non_dominated_indices] + 0.2 * prize_to_weight_ratio[non_dominated_indices]
    
    # Introduce randomness
    random_factor = np.random.rand(len(combined_heuristic))
    combined_heuristic += random_factor
    
    # Normalize the heuristic
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    return combined_heuristic
```
