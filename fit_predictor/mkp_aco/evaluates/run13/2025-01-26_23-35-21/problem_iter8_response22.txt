```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity based on a threshold for each item
    sparsity_threshold = 0.1  # Assuming a threshold of 10% for sparsity
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    
    # Calculate the diversity of each item (1 / sum of each dimension's weight)
    diversity = 1 / np.sum(weight, axis=1)
    
    # Balance between density and diversity, considering sparsity
    balanced_score = (density + diversity) / 2 * (1 - sparsity)
    
    # Normalize the balanced score to ensure the range is between 0 and 1
    max_balanced_score = np.max(balanced_score)
    balanced_score = balanced_score / max_balanced_score if max_balanced_score > 0 else np.zeros_like(balanced_score)
    
    # Normalize by the sum of the balanced scores to obtain a probability distribution
    heuristics = balanced_score / np.sum(balanced_score)
    
    return heuristics
```
