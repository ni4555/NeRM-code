```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density and sparsity
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic by balancing high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce randomness to avoid local optima
    randomness = np.random.rand(len(prize))
    
    # Integrate the balance heuristic with randomness
    heuristic = balance_heuristic * (1 - randomness) + randomness
    
    # Prune dominated items based on heuristic value
    max_heuristic = np.max(heuristic)
    heuristic[heuristic < max_heuristic / len(prize)] = 0
    
    # Normalize by the sum of heuristics to ensure non-negative values
    heuristic /= np.sum(heuristic)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_mask = weight_sum < 1e-8
    heuristic[zero_weight_mask] = 1e-8
    
    return heuristic
```
