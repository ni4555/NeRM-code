```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8
    
    # Calculate the density of each item
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8
    
    # Calculate a balance metric between density and sparsity
    balance_metric = (density + sparsity) / 2
    
    # Introduce randomness to encourage diversity and avoid local optima
    random_factor = np.random.rand(n) * 0.2 + 0.5
    
    # Prune dominated solutions by setting their balance metric to zero
    non_dominated = (balance_metric >= np.percentile(balance_metric, 95))
    balance_metric[~non_dominated] = 0
    
    # Combine the heuristics using a weighted sum
    heuristics = (0.5 * balance_metric +
                  0.5 * random_factor)
    
    # Normalize heuristics to ensure the sum is close to 1
    normalized_heuristics = heuristics / np.sum(heuristics)
    
    # Maintain diversity by setting low balance items to zero
    min_balance_threshold = np.percentile(balance_metric, 5)
    normalized_heuristics[np.where(balance_metric < min_balance_threshold)] = 0
    
    return normalized_heuristics
```
