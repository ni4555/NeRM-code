```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Initialize heuristic array with zeros
    heuristics = np.zeros(n)
    
    # Iterate through each item
    for i in range(n):
        # Calculate dominance score (negative as higher score means less dominating)
        dominance_score = -np.sum(prize[i] * weight[i] / np.max(weight[i]))
        
        # Initialize dominated status as False
        dominated = False
        
        # Calculate dominance scores for all other items
        for j in range(n):
            if i != j:
                # If the current item is dominated by another, set dominated to True
                if dominance_score < -np.sum(prize[j] * weight[j] / np.max(weight[j])):
                    dominated = True
                    break
        
        # If the item is not dominated, calculate heuristic value
        if not dominated:
            # Randomness factor to introduce exploration
            randomness_factor = np.random.rand()
            heuristic = np.sum(prize[i]) - dominance_score - randomness_factor
            heuristics[i] = heuristic
    
    # Normalize heuristics to sum to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
