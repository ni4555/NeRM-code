```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)

    # Introduce a diversity factor based on the normalized density
    diversity_factor = density

    # Integrate the diversity factor by subtracting the sum of weights, but weighted by diversity
    heuristic = diversity_factor - weight_sum * diversity_factor

    # Normalize heuristics to ensure they sum to one
    heuristic /= np.sum(heuristic)

    # Ensure that items with zero weight contribute positively to the heuristic
    heuristic[weight_sum < 1e-8] = 1e-8

    return heuristic
```
