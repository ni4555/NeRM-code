```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize to have a range of 0 to 1
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))

    # Calculate the density for each item
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the balance between density and sparsity
    balance = density / (density + sparsity)

    # Calculate the dominance score, rewarding items with higher max weight and lower min weight
    dominance_score = np.log2(np.max(weight, axis=1)) - np.log2(np.min(weight, axis=1))

    # Calculate the uniqueness score, penalizing items that have similar weights
    uniqueness_score = -np.sum(np.diff(weight, axis=1)**2, axis=1)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(len(prize))

    # Combine all the scores with weights
    total_score = balance * 0.3 + dominance_score * 0.3 + uniqueness_score * 0.2 + random_factor * 0.2

    # Normalize the total score to ensure all values are within a range [0, 1]
    normalized_total_score = total_score / (np.max(total_score) + 1e-8)

    return normalized_total_score
```
