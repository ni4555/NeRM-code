```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristic array with zeros
    heuristic = np.zeros_like(prize)
    
    # Calculate the density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the weight balance for each item
    weight_balance = np.abs(np.sum(weight, axis=1) - 1) / (1 + 1e-8)
    
    # Encourage diversity by avoiding items with extreme density and sparsity
    diversity = 1 / (np.sqrt(density * sparsity) + 1e-8)
    
    # Calculate the heuristic considering balance, diversity, and balance between density and sparsity
    heuristic = (density * (1 - sparsity) + weight_balance * diversity) / 3
    
    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    
    # Ensure no item has a zero heuristic value
    heuristic[weight_sum < 1e-8] = 1e-8
    
    return heuristic
```
