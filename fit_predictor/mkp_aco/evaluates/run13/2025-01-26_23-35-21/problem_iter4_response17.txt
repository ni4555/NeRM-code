```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Normalize the utility to ensure it's between 0 and 1
    utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    
    # Calculate the sparsity of the weight matrix
    sparsity = 1 - np.mean(weight, axis=1)
    # Normalize the sparsity to ensure it's between 0 and 1
    sparsity = (sparsity - np.min(sparsity)) / (np.max(sparsity) - np.min(sparsity))
    
    # Calculate the average distance from the item to the mean of the weights
    mean_weight = np.mean(weight, axis=0)
    distance_to_mean = np.linalg.norm(weight - mean_weight, axis=1)
    # Normalize the distance to mean to ensure it's between 0 and 1
    distance_to_mean = (distance_to_mean - np.min(distance_to_mean)) / (np.max(distance_to_mean) - np.min(distance_to_mean))
    
    # Combine utility, sparsity, and distance to mean using a weighted sum
    combined_heuristics = utility * 0.5 + sparsity * 0.3 + distance_to_mean * 0.2
    
    # Apply a smoothing technique to the heuristics
    heuristics = np.clip(combined_heuristics, a_min=0, a_max=1)
    
    # Normalize the heuristics to ensure they are between 0 and 1
    heuristics = heuristics / np.sum(heuristics)
    
    return heuristics
```
