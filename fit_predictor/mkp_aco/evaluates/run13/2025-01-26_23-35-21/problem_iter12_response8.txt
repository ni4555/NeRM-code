```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Incorporate dimensionality awareness by normalizing weights
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate the normalized density
    density = prize / np.sum(normalized_weight, axis=1)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(normalized_weight, axis=1) / np.max(normalized_weight, axis=1)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(normalized_weight, axis=1)
    
    # Calculate the standard deviation to account for variability
    std_dev = np.std(normalized_weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum + std_dev * 0.1
    
    # Use additional metrics like the maximum weight to maintain diversity
    max_weight = np.max(normalized_weight, axis=1)
    heuristic_value += max_weight * 0.1  # Adjust the scaling factor as needed
    
    # Penalize items with very low diversity
    diversity = 1 - (sparsity + max_weight)
    penalty = np.where(diversity < 0.1, -np.inf, 0)
    heuristic_value += penalty
    
    # Normalize by the maximum heuristic value
    max_heuristic_value = np.max(heuristic_value)
    if max_heuristic_value > 0:
        normalized_heuristic = heuristic_value / max_heuristic_value
    else:
        normalized_heuristic = np.zeros_like(heuristic_value)
    
    # Prune spurious solutions by setting low values to zero
    pruned_heuristic = np.where(normalized_heuristic < 0.1, 0, normalized_heuristic)
    
    return pruned_heuristic
```
