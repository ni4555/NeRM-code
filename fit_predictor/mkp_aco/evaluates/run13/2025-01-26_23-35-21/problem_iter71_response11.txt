```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Prune dominated items by removing items that are dominated by others
    dominance_matrix = np.array(np.all(weight < weight[:, None], axis=1))
    dominated_indices = np.where(np.logical_not(dominance_matrix))[0]
    non_dominated_items = np.delete(np.arange(len(prize)), dominated_indices)
    prize = prize[non_dominated_items]
    weight = weight[non_dominated_items]

    # Normalize the prize to ensure non-zero values
    normalized_prize = prize / np.max(prize)

    # Calculate the density of items
    density = normalized_prize / np.sum(weight, axis=1)

    # Calculate sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(len(prize))

    # Create a heuristic based on density and randomness
    heuristic = density * random_factor

    # Normalize by the maximum heuristic value to ensure feasibility
    normalized_heuristic = heuristic / np.max(heuristic)

    # Introduce a balance heuristic between density and sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)

    # Combine heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic

    # Set the combined heuristic to zero for dominated items
    combined_heuristic[dominated_indices] = 0

    return combined_heuristic
```
