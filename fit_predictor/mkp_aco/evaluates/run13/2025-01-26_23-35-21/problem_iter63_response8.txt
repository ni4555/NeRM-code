```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items based on density and sparsity
    dominance_mask = (density > sparsity) & (density > np.mean(density))
    non_dominated_items = density[dominance_mask]
    
    # Balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce controlled randomness for exploration
    random_factor = np.random.rand(len(density))
    random_factor = random_factor / np.sum(random_factor)
    
    # Create a combined heuristic
    heuristic = non_dominated_items * balance_heuristic * random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_mask = weight_sum < 1e-8
    normalized_heuristic[zero_weight_mask] = 1e-8
    
    return normalized_heuristic
```
