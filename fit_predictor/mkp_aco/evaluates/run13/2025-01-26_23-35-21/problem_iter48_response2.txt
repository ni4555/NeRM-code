```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8
    
    # Normalize the weight sum to a common scale
    weight_sum = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1)) + 1e-8
    
    # Calculate the density ratio of prize to weighted sum
    density_ratio = normalized_prize / weight_sum
    
    # Introduce sparsity as the sum of weights divided by the maximum weight
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8
    
    # Calculate the balance metric, which is the difference between high density and low sparsity
    balance_metric = density_ratio - sparsity
    
    # Prune dominated solutions based on the balance metric and density ratio
    dominated_prune_threshold = np.percentile(balance_metric, 95)
    heuristics_pruned = np.where(balance_metric >= dominated_prune_threshold, balance_metric, 0)
    
    # Integrate randomness to avoid premature convergence
    random_factor = np.random.rand(n) * 0.1 + 0.05
    
    # Combine the heuristics using a weighted sum
    heuristic = (0.6 * heuristics_pruned +
                 0.2 * density_ratio +
                 0.2 * random_factor)
    
    # Normalize heuristics to ensure the sum is close to 1
    normalized_heuristic = heuristic / np.sum(heuristic)
    
    # Maintain diversity by setting low density items to zero
    min_density_threshold = np.percentile(density_ratio, 5)
    normalized_heuristic[np.where(density_ratio < min_density_threshold)] = 0
    
    return normalized_heuristic
```
