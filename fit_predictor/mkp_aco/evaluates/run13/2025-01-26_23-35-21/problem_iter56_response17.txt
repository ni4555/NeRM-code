```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized profit per unit weight for each item
    profit_per_unit_weight = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item as the proportion of its weight that is not used
    sparsity = 1 - np.sum(weight, axis=1) / np.sum(weight, axis=0)
    
    # Calculate the diversity of the items based on the standard deviation of the profit per unit weight
    diversity = np.std(profit_per_unit_weight)
    
    # Introduce a diversity factor to ensure that the heuristic does not prefer items that are too similar
    diversity_factor = 1 / (1 + diversity)
    
    # Introduce randomness to prevent the heuristic from becoming too deterministic
    random_factor = np.random.rand(n)
    
    # Calculate a heuristic score that considers the profit per unit weight, sparsity, and diversity
    heuristic_score = profit_per_unit_weight * (1 - sparsity) * diversity_factor * random_factor
    
    # Normalize the heuristic scores to ensure they are between 0 and 1
    max_score = np.max(heuristic_score)
    min_score = np.min(heuristic_score)
    heuristic_score = (heuristic_score - min_score) / (max_score - min_score + 1e-8)
    
    return heuristic_score
```
