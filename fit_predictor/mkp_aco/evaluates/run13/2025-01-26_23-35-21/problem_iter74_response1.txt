```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristics = np.zeros(n)
    
    # Normalize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize weight sum
    weight_sum = np.sum(weight, axis=1)
    
    # Combine density and weight sum for heuristic
    heuristics = density - weight_sum
    
    # Introduce randomness for diversity
    random_factor = np.random.rand(n)
    
    # Prune dominated items by setting their heuristics to zero
    dominated_items = weight_sum == 0
    heuristics[dominated_items] = 0
    
    # Introduce a balance factor to prevent too much randomness
    balance_factor = 0.5
    
    # Combine heuristics and randomness
    heuristics = balance_factor * heuristics + (1 - balance_factor) * random_factor
    
    # Normalize heuristics to maintain a bounded scale
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
