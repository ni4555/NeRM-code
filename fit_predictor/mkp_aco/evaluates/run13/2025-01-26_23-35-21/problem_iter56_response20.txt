```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item as the ratio of prize to total weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item as the ratio of weight to the maximum weight
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items by focusing on high sparsity and low density
    dominated_items = np.where(sparsity > 0.5 * density)[0]
    prize[dominated_items] = 0
    weight[dominated_items] = np.zeros_like(weight[dominated_items])
    
    # Normalize the prize values to create a uniform scale
    normalized_prize = prize / np.sum(prize) + 1e-8
    
    # Combine density and normalized prize to create a utility value
    utility = density * normalized_prize
    
    # Introduce randomness for exploration, but avoid dominance
    randomness_factor = np.random.rand(weight.shape[0])
    
    # Create a heuristic by blending utility with randomness
    heuristic = utility * randomness_factor
    
    # Normalize the heuristics to ensure a range for comparison
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    return normalized_heuristic
```
