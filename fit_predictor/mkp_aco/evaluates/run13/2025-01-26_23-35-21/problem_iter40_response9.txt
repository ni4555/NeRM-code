```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prize values for density calculation
    normalized_prize = prize / np.max(prize)
    
    # Normalize weight values for sparsity calculation
    normalized_weight = weight / np.max(weight, axis=1, keepdims=True)
    
    # Calculate normalized density
    density = normalized_prize / (np.sum(normalized_weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(normalized_weight, axis=1) / (np.max(normalized_weight, axis=1) + 1e-8)
    
    # Calculate additional metrics: sum of weights and max weight
    weight_sum = np.sum(weight, axis=1)
    max_weight = np.max(weight, axis=1)
    
    # Introduce diversity based on the ratio of average density to item density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Introduce balance between density and sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * diversity_factor + 0.4 * balance_heuristic
    
    # Normalize combined heuristic by the maximum value
    max_combined_heuristic = np.max(combined_heuristic)
    normalized_heuristic = combined_heuristic / (max_combined_heuristic + 1e-8)
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)
    normalized_heuristic = normalized_heuristic * random_factor
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_penalty = (normalized_prize * (np.sum(normalized_weight, axis=1) == 0))
    normalized_heuristic = np.where(zero_weight_penalty < 1e-8, 1e-8, normalized_heuristic)
    
    return normalized_heuristic
```
