```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Apply a random perturbation to encourage randomness and improve the balance between exploration and exploitation
    random_perturbation = np.random.rand(*normalized_heuristic.shape)
    perturbed_heuristic = normalized_heuristic * random_perturbation
    
    # Introduce a sharpness factor that penalizes items that are too similar
    sharpness_factor = 1 / (np.linalg.norm(weight, axis=1) + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * perturbed_heuristic + 0.4 * sharpness_factor
    
    # Set zero weights to a small value to maintain diversity and prevent dominance
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Introduce a sparsification step by setting the lowest values to zero
    sparsified_heuristic = combined_heuristic.copy()
    sparsified_heuristic[sparsified_heuristic < np.percentile(combined_heuristic, 5)] = 0
    
    return sparsified_heuristic
```
