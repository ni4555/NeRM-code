```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized utility and sparsity
    utility = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1)
    
    # Incorporate randomness by adding a random noise to the utility
    random_noise = np.random.rand(len(utility))
    heuristic = utility + random_noise
    
    # Introduce a balance factor that encourages items with both high utility and low sparsity
    balance_factor = utility * (1 - sparsity)
    
    # Apply a dominance filter by setting zero-weight items to a lower value
    heuristic[weight_sum < 1e-8] = 0.1
    
    # Normalize the heuristics to ensure comparability
    max_heuristic = np.max(heuristic)
    heuristic /= max_heuristic
    
    return heuristic
```
