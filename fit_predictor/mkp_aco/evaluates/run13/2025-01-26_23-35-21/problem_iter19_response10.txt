```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight for dimensionality consideration
    normalized_prize = prize / np.linalg.norm(prize)
    normalized_weight = weight / np.linalg.norm(weight, axis=1, keepdims=True)
    
    # Calculate the relative sparsity
    sparsity = np.sum(normalized_weight, axis=1)
    
    # Introduce a balance metric that combines prize density and sparsity
    balance_metric = normalized_prize * (1 - sparsity)
    
    # Use a penalty for high weight sum
    weight_penalty = np.sum(normalized_weight, axis=1)
    
    # Promote diversity by considering the density relative to the average density
    average_density = np.mean(normalized_prize)
    density_diversity = normalized_prize / (average_density + 1e-8)
    
    # Combine all metrics into a heuristic
    heuristic = balance_metric - weight_penalty + density_diversity
    
    # Normalize heuristic values
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    if max_heuristic == min_heuristic:
        max_heuristic += 1e-8
    normalized_heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[np.sum(normalized_weight, axis=1) < 1e-8] = 1e-8
    
    return normalized_heuristic
```
