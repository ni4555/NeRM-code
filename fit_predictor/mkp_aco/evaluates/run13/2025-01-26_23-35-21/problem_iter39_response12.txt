```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1, keepdims=True)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1, keepdims=True) / np.max(weight, axis=1, keepdims=True)
    
    # Add diversity factor using standard deviation
    diversity_factor = 1 - np.exp(-np.std(weight, axis=1))
    
    # Incorporate a sparsity penalty to avoid dominance
    sparsity_penalty = sparsity ** 2
    
    # Integrate additional metrics such as sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity_penalty) / (density + 1e-8)
    
    # Combine the metrics into a heuristic value
    heuristic_value = density * balance_heuristic - weight_sum + diversity_factor
    
    # Introduce an exploitation-exploitation (epsilon-greedy) strategy
    epsilon = 0.1
    heuristic = (1 - epsilon) * heuristic_value + epsilon * np.random.rand(*heuristic_value.shape)
    
    # Normalize to prevent dominance and maintain the exploration-exploitation tradeoff
    normalized_heuristic = (heuristic - np.min(heuristic)) / (np.max(heuristic) - np.min(heuristic) + 1e-8)
    
    return normalized_heuristic
```
