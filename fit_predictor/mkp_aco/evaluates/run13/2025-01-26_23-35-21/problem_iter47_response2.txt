```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the utility of each item as the ratio of prize to weight
    utility = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Add randomness to encourage exploration
    randomness = np.random.rand(*utility.shape)
    
    # Calculate the diversity factor based on the standard deviation of utility
    diversity_factor = np.std(utility)
    
    # Integrate the randomness and diversity into the heuristic
    heuristic = utility * randomness + diversity_factor
    
    # Normalize the heuristic to maintain a consistent scale
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Prune dominated solutions by only considering items with a higher utility
    # compared to the current max utility in the list
    dominance_pruning = np.where(utility > np.max(utility), normalized_heuristic, 0)
    
    # Return the pruned and normalized heuristic values
    return dominance_pruning
```
