```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Combine the metrics into a heuristic value
    heuristic_value = (density + sparsity) / (1 + weight_sum)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce randomness for diversity
    randomness = np.random.rand(len(weight))
    
    # Introduce a balance factor between the inverse of the sum of weights and the heuristic value
    balance_factor = (1 / (weight_sum + 1e-8)) * (normalized_heuristic + 1e-8)
    
    # Create a final heuristic by blending the normalized heuristic with the balance factor
    final_heuristic = normalized_heuristic * 0.6 + balance_factor * 0.4
    
    # Set zero weights to a small value to maintain diversity
    final_heuristic[weight_sum < 1e-8] = 1e-8
    
    return final_heuristic
```
