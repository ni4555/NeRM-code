```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Initialize heuristics with a default low value
    heuristic = np.zeros_like(prize)
    
    # Sample items randomly and update their heuristic based on criteria
    for _ in range(int(np.prod(weight.shape) / 10)):  # Sample 10% of the items
        item = np.random.randint(0, prize.shape[0])
        # Calculate normalized density
        density = prize[item] / (np.sum(weight[item, :]) + 1e-8)
        # Calculate normalized sparsity
        sparsity = np.sum(weight[item, :]) / (np.max(weight[item, :]) + 1e-8)
        # Integrate additional metrics
        weight_sum = np.sum(weight[item, :])
        # Create a balanced heuristic value
        heuristic_value = density * (1 - sparsity) - weight_sum
        # Introduce diversity by selecting a random factor
        diversity_factor = np.random.rand()
        # Update the heuristic for the selected item
        heuristic[item] = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    max_heuristic = np.max(heuristic)
    heuristic[heuristic < max_heuristic / 10] = max_heuristic / 10  # Avoid extremely low values
    
    return heuristic
```
