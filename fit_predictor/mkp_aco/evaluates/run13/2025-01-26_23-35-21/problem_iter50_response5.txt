```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Normalize the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Integrate multiple metrics with normalization
    metric1 = density * (1 - sparsity)
    metric2 = -weight_sum
    heuristic_value = (metric1 + metric2) / (np.max(metric1 + metric2) + 1e-8)
    
    # Introduce diversity using variance of density
    variance_density = np.var(density)
    diversity_factor = 1 / (variance_density + 1e-8)
    
    # Introduce balance factor
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine heuristic value with diversity and balance factors
    heuristic = heuristic_value * diversity_factor * balance_factor
    
    # Set zero weights to a small value to maintain diversity
    heuristic[weight_sum < 1e-8] = 1e-8
    
    return heuristic
```
