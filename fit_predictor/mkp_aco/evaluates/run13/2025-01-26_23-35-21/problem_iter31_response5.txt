```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Include randomness to encourage exploration
    randomness = np.random.rand(len(prize))
    
    # Normalize the randomness to have the same scale as the other metrics
    normalized_randomness = randomness / np.max(randomness)
    
    # Create a heuristic that balances the density and sparsity
    heuristic_value = density * (1 - sparsity)
    
    # Combine the heuristic value with randomness
    heuristic = heuristic_value * normalized_randomness
    
    # Introduce a penalty for outliers by subtracting the sparsity
    penalty = -sparsity
    
    # Combine the heuristics with the penalty
    combined_heuristic = heuristic + penalty
    
    # Normalize the combined heuristic
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Sparsify the heuristics to promote diversity
    sparsified_heuristic = np.where(combined_heuristic > 0.5, combined_heuristic, 0)
    
    return sparsified_heuristic
```
