```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate sparsity
    sparsity = np.sum(weight, axis=1) / (n + 1e-8)

    # Calculate value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Identify dominated items using a percentile-based approach
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine density, sparsity, and value-to-weight ratio to form a heuristic
    heuristic = 0.6 * density + 0.2 * (1 - sparsity) + 0.2 * value_to_weight_ratio + 0.05 * random_factor

    # Normalize the heuristic values to prevent overflow
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure at least one item is included to maintain diversity
    if np.sum(normalized_heuristic) == 0:
        non_dominated_indices = np.where(~dominated_mask)[0]
        if non_dominated_indices.size > 0:
            normalized_heuristic[non_dominated_indices] = 1 / non_dominated_indices.size
        else:
            normalized_heuristic = np.ones(n) * 1e-8

    # Introduce a diversity factor based on the sparsity
    diversity_factor = 0.1 * (1 - np.mean(sparsity)) / (np.max(1 - np.mean(sparsity)) + 1e-8)

    # Introduce balance by considering both density and sparsity
    balance_factor = 0.5 * (density + sparsity) / (np.max(density + sparsity) + 1e-8)

    # Introduce randomness factor for additional exploration
    randomness_factor = 0.1 * np.random.rand(n) + 0.1

    # Combine all factors to form the final heuristic
    final_heuristic = (normalized_heuristic * balance_factor +
                       diversity_factor * (1 - normalized_heuristic) +
                       randomness_factor * (1 - normalized_heuristic))

    # Adjust the final heuristic based on the value-to-weight ratio
    final_heuristic *= value_to_weight_ratio / np.max(value_to_weight_ratio)

    return final_heuristic
```
