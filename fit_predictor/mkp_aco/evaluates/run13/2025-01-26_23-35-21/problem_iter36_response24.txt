```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    heuristic_matrix = np.zeros_like(prize)
    
    for i in range(n):
        # Calculate density based on prize to weight ratio
        density = prize[i] / np.sum(weight[i])
        
        # Calculate sparsity based on the ratio of the sum of weights to the maximum weight
        sparsity = np.sum(weight[i]) / (np.max(weight[i]) + 1e-8)
        
        # Calculate balance factor between density and sparsity
        balance_factor = (density + sparsity) / 2
        
        # Introduce diversity factor based on sparsity to encourage diverse item selection
        diversity_factor = np.exp(sparsity / 2)
        
        # Calculate heuristic by combining the balance factor and diversity factor
        heuristic_value = balance_factor * diversity_factor
        
        # Update the heuristics matrix for the current item
        heuristic_matrix[i] = heuristic_value
    
    # Normalize the heuristics matrix to maintain a bounded range and ensure sum is 1
    heuristic_matrix /= np.sum(heuristic_matrix)
    
    # Apply a penalty to items that exceed the weight constraint of 1 in any dimension
    weight_penalty = np.sum(weight, axis=1) / (np.maximum(np.sum(weight, axis=1), 1e-8))
    heuristic_matrix *= (1 - weight_penalty)
    
    # Ensure non-negative heuristics
    heuristic_matrix = np.maximum(heuristic_matrix, 0)
    
    return heuristic_matrix
```
