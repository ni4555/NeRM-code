```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Define penalties for high sparsity and low diversity
    penalty_for_high_sparsity = 0.5
    penalty_for_low_diversity = 0.5
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate diversity based on average density
    average_density = np.mean(density)
    diversity = np.mean((density / (average_density + 1e-8)) ** 2)
    
    # Initialize heuristic values
    heuristic_values = np.zeros_like(prize)
    
    # Loop through each item to compute its heuristic
    for i in range(len(prize)):
        # Calculate heuristic based on density, sparsity, and diversity
        heuristic_values[i] = (density[i] - penalty_for_high_sparsity * sparsity[i]) * diversity
    
    # Introduce randomness to prevent local optima
    random_factor = np.random.rand(len(prize))
    
    # Combine the heuristic with a random factor to maintain diversity
    heuristic = heuristic_values * random_factor
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic / np.sum(heuristic)
    
    # Adjust the heuristic to prevent overfitting to high density and low sparsity
    adjusted_heuristic = normalized_heuristic * (1 - diversity)
    
    # Return the adjusted heuristic
    return adjusted_heuristic
```
