```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized prize per weight
    prize_per_weight = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity per item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Prune dominated items
    sorted_prize_per_weight = np.argsort(prize_per_weight)[::-1]
    dominating_items = set(sorted_prize_per_weight[:np.sum(1 - np.any(weight[:, sorted_prize_per_weight] == 1, axis=1))])
    
    # Filter out dominated items
    filtered_weight = weight[~np.isin(np.where(weight.sum(axis=1) > 0)[0], dominating_items)]
    filtered_prize = prize[~np.isin(np.where(weight.sum(axis=1) > 0)[0], dominating_items)]
    
    # Balance the density with the sparsity
    balanced_density = prize_per_weight - sparsity
    
    # Introduce controlled randomness
    random_factor = np.random.rand(filtered_weight.shape[0])
    
    # Normalize the combined factor
    normalized_factor = (balanced_density + random_factor) / np.sum(balanced_density + random_factor)
    
    return normalized_factor
```
