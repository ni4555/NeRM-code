```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce randomness with a bias towards higher density
    random_factor = np.random.rand(len(prize))
    random_factor = random_factor * (1 - sparsity) + sparsity
    
    # Create a balanced heuristic value
    heuristic_value = density * random_factor - weight_sum
    
    # Normalize the heuristic to avoid dominance
    normalized_heuristic = heuristic_value / np.max(heuristic_value)
    
    # Ensure the heuristic is sparse
    heuristic = np.where(weight_sum < 1e-8, 0, normalized_heuristic)
    
    return heuristic
```
