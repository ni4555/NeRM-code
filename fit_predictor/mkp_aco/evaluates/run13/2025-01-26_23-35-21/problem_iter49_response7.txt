```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Ensure that all weights are greater than 0 to avoid division by zero
    weight[weight <= 0] = 1e-8
    
    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Introduce randomness by adding a small noise to the density
    noise = np.random.normal(0, 1e-3, density.shape)
    density_noisy = density + noise
    
    # Prune dominated items based on density
    sorted_density = np.sort(density_noisy)[::-1]
    dominated_mask = sorted_density < sorted_density[1]
    density_noisy[dominated_mask] = 0
    
    # Normalize density
    max_density = np.max(density_noisy)
    normalized_density = density_noisy / max_density
    
    # Introduce sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce an exploration factor based on sparsity
    exploration_factor = np.random.binomial(1, 0.5, size=normalized_density.shape)
    exploration_factor[sparsity < 0.1] = 0
    
    # Combine the normalized density with the sparsity and exploration factor
    heuristic = normalized_density * (1 - sparsity) * exploration_factor
    
    # Normalize by the maximum heuristic value
    max_heuristic = np.max(heuristic)
    heuristic[heuristic == max_heuristic] = 0
    max_heuristic[heuristic == max_heuristic] = 1
    normalized_heuristic = heuristic / max_heuristic
    
    return normalized_heuristic
```
