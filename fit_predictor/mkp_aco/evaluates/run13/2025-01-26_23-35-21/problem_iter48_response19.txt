```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized utility
    normalized_utility = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate diversity based on the average sparsity
    diversity = np.mean(sparsity)
    
    # Calculate the balance between utility and sparsity
    balance = normalized_utility / (1 + sparsity)
    
    # Introduce randomness based on the balance metric
    randomness = np.random.normal(0, 0.1, size=balance.shape)
    
    # Combine the balance with randomness and diversity
    heuristic = balance + randomness - diversity
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a mutation step to maintain diversity
    mutation_factor = np.random.normal(0, 0.05, size=normalized_heuristic.shape)
    mutated_heuristic = normalized_heuristic + mutation_factor
    
    # Ensure that the heuristics are within the valid range
    mutated_heuristic = np.clip(mutated_heuristic, 0, 1)
    
    return mutated_heuristic
```
