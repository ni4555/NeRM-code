```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to have a range of 0 to 1
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Calculate the density for each item
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the dominance score, where items that are better in all dimensions than others get a higher score
    dominance_score = np.max(weight, axis=1) - np.min(weight, axis=1)
    
    # Introduce a randomness factor to encourage diversity
    random_factor = np.random.rand(len(prize))
    
    # Normalize the dominance score by the sum of dominance and randomness factors
    normalized_dominance = dominance_score / (np.sum(dominance_score) + np.sum(random_factor))
    
    # Combine the density, dominance, and randomness to form a heuristic
    heuristic = density * 0.7 + normalized_dominance * 0.3
    
    # Normalize the heuristic to ensure all values are within a range [0, 1]
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Return the normalized heuristic array
    return normalized_heuristic
```
