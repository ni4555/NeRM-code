```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    heuristic = np.zeros_like(prize)

    # Personalized item evaluation based on density and sparsity
    for i in range(n):
        item_density = prize[i] / np.sum(weight[i])
        item_sparsity = np.sum(weight[i]) / np.max(weight[i])
        heuristic[i] = item_density + item_sparsity

    # Balance diversity and quality by considering dominance
    for i in range(n):
        for j in range(n):
            if i != j and (prize[j] > prize[i] and np.all(weight[j] <= weight[i])):
                # Reduce heuristic of dominated items
                heuristic[i] -= (heuristic[i] / heuristic.shape[0])

    # Manage randomness carefully to avoid excessive noise
    random_factor = np.random.rand(*heuristic.shape)
    heuristic *= (random_factor + 0.1)  # Add a small constant to avoid zero heuristic values

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic

    # Ensure non-negative heuristic values
    heuristic = np.maximum(heuristic, 0)

    return heuristic
```
