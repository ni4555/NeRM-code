```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to ensure that the relative value of each item is consistent
    normalized_prize = prize / np.max(prize)
    
    # Calculate utility as the normalized prize divided by the sum of weights
    utility = normalized_prize / np.sum(weight, axis=1)
    
    # Compute the diversity by using the variance in weight, normalized by its mean
    diversity = np.var(weight, axis=1) / np.mean(weight, axis=1)
    
    # Define a sparsity factor as the average weight normalized by the mean weight
    sparsity_factor = np.sum(weight, axis=1) / np.mean(weight, axis=1)
    
    # Combine utility, diversity, and sparsity into a heuristic score
    heuristic = utility * (1 + 0.5 * diversity) * (1 - 0.2 * sparsity_factor)
    
    # Normalize the heuristic score to ensure all values are between 0 and 1
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    heuristics = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Apply a non-zero threshold to avoid including too many items, maintaining sparsity
    threshold = 0.1
    heuristics[heuristic < threshold] = 0
    
    return heuristics
```
