```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize array to ensure non-zero and consistent scaling
    normalized_prize = prize / np.max(prize + 1e-8)
    
    # Calculate density as the normalized prize divided by the sum of weights
    density = normalized_prize / np.sum(weight, axis=1)
    
    # Calculate sparsity, which is the inverse of the maximum weight per dimension
    sparsity = 1 / np.max(weight, axis=1)
    
    # Integrate the sum of weights as a metric for penalty against heavy items
    weight_sum = np.sum(weight, axis=1)
    
    # Integrate diversity by calculating the standard deviation of weights
    diversity = np.std(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Adjust heuristic based on diversity
    heuristic = heuristic_value * (1 / (1 + diversity))
    
    # Normalize by the maximum heuristic value to scale the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)
    
    # Introduce a sparsity diversity factor to encourage diverse solutions
    sparsity_diversity = 1 / (sparsity + 1e-8)
    
    # Combine diversity factors with the heuristic value
    normalized_heuristic *= sparsity_diversity
    
    # Ensure the heuristics are between 0 and 1
    normalized_heuristic = np.clip(normalized_heuristic, 0, 1)
    
    return normalized_heuristic
```
