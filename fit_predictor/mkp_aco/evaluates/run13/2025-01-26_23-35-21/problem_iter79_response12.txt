```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1, keepdims=True) + 1e-8

    # Calculate a dominance metric
    dominance_metric = density - np.mean(density)

    # Identify dominated items and exclude them
    dominated_indices = np.argsort(density)[:-np.sum(density < np.mean(density))][::-1]
    not_dominated_indices = np.setdiff1d(range(prize.size), dominated_indices)
    not_dominated_density = density[not_dominated_indices]

    # Introduce randomness to balance exploration and exploitation
    random_component = np.random.rand(not_dominated_indices.size)
    random_component /= np.sum(random_component)

    # Combine the density and dominance metrics with randomness
    heuristic = not_dominated_density * dominance_metric * random_component

    # Normalize the heuristic
    normalized_heuristic = heuristic / np.max(heuristic)

    # Apply a sparsity penalty to encourage selecting less weighty items
    sparsity_penalty = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    combined_heuristic = normalized_heuristic - sparsity_penalty

    # Prune the heuristic by setting dominated and zero-weight items to zero
    combined_heuristic[dominated_indices] = 0
    combined_heuristic[weight_sum < 1e-8] = 0

    return combined_heuristic
```
