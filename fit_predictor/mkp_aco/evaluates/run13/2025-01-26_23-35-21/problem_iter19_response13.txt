```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate normalized prize
    normalized_prize = prize / np.max(prize)
    
    # Calculate normalized density
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Introduce a balance factor to avoid overfitting
    balance_factor = 1 / (1 + np.exp(-heuristic))
    
    # Create a final heuristic by combining the balance factor with the adjusted heuristic
    final_heuristic = balance_factor * heuristic
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = final_heuristic / (np.max(final_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
