```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a randomness factor to avoid local optima
    randomness_factor = np.random.rand(*weight.shape)
    
    # Prune dominated items based on prize-to-weight ratio
    dominated_items = np.where(density < np.min(density[np.argsort(density)][::-1]) / 2)[0]
    for item in dominated_items:
        density[item] = 0
    
    # Create a final heuristic by blending metrics with randomness
    heuristic = density * (1 - sparsity) + randomness_factor
    
    # Normalize by the maximum heuristic value to scale the heuristics
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Ensure the combined heuristics are not all zeros by setting at least one item to 1
    if np.all(normalized_heuristic < 1e-8):
        normalized_heuristic[np.argmax(density)] = 1
    
    return normalized_heuristic
```
