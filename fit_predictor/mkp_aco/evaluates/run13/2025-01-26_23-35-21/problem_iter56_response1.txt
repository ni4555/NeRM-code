```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity factor as the ratio of each item's prize to the sum of all prizes
    diversity_factor = prize / np.sum(prize)
    
    # Calculate the sparsity as the sum of each item's weight over the maximum weight per dimension
    sparsity = np.sum(weight, axis=1) / np.sum(weight, axis=1).max()
    
    # Calculate the balance factor as the average of the diversity factor
    balance_factor = np.mean(diversity_factor)
    
    # Introduce a weighted sum that emphasizes diversity, balance, and sparsity
    combined_heuristic = 0.6 * density + 0.3 * balance_factor + 0.1 * sparsity
    
    # Introduce randomness to avoid getting stuck in local optima
    randomness = np.random.rand(n)
    
    # Combine with random factor for diversity
    combined_heuristic += 0.1 * randomness
    
    # Normalize the combined heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(combined_heuristic)
    combined_heuristic /= max_heuristic
    
    # Ensure that the heuristic values do not exceed 1
    combined_heuristic = np.clip(combined_heuristic, 0, 1)
    
    # Create a dominance matrix to identify dominated items
    dominance_matrix = np.zeros((n, n))
    np.fill_diagonal(dominance_matrix, 1)
    for i in range(n):
        for j in range(i+1, n):
            if np.all(combined_heuristic[i] >= combined_heuristic[j]) or np.all(combined_heuristic[j] == 0):
                dominance_matrix[i, j] = 1
    
    # Prune dominated items by setting their heuristic to zero
    dominated_indices = np.where(np.sum(dominance_matrix, axis=0) == 0)[0]
    combined_heuristic[dominated_indices] = 0
    
    return combined_heuristic
```
