```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1) + 1e-8

    # Prune dominated items early by setting density of dominated items to zero
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Normalize metrics
    density /= np.max(density)
    sparsity /= np.max(sparsity)

    # Balance diversity and density
    balance_factor = (density + sparsity) / (np.max(density + sparsity) + 1e-8)

    # Encourage randomness within bounds
    random_factor = np.random.rand(n) + 1e-8

    # Introduce a diversity factor
    diversity_factor = (1 - np.mean(density)) / (np.max(1 - np.mean(density)) + 1e-8)

    # Combine factors to create the final heuristic
    final_heuristic = balance_factor * (0.6 * density + 0.4 * (1 - sparsity)) + diversity_factor + random_factor

    return final_heuristic
```
