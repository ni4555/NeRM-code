```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate sum of weights for each item
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate balance based on standard deviation of weights
    balance = np.std(weight, axis=1)
    
    # Create heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum + balance
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Penalize underrepresented items with low sum of weights
    penalty = np.where(weight_sum < 1e-8, -np.inf, 0)
    normalized_heuristic += penalty
    
    return normalized_heuristic
```
