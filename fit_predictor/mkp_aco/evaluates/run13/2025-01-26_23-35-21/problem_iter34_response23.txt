```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate the normalized prize density
    density = prize / np.sum(weight, axis=1)

    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Introduce randomness to the heuristic to encourage sparsity
    randomness = np.random.rand(n)

    # Create a heuristic based on density, sparsity, and randomness
    heuristic = density * (1 - sparsity) + randomness

    # Normalize the heuristic to the range [0, 1]
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / max_heuristic

    return normalized_heuristic
```
