```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items (those with lower density and higher sparsity)
    non_dominated = (density > sparsity)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce randomness to explore different areas of the solution space
    random_factor = np.random.rand(len(density))
    
    # Prune dominated items in the heuristic value
    heuristic_value[~non_dominated] = 0
    
    # Create a final heuristic by combining the heuristic value with randomness
    heuristic = heuristic_value + random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic
    
    # Ensure non-zero weight items have non-zero heuristic values
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
