```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Normalize the utility to have a mean of 1
    utility_normalized = utility / np.mean(utility)
    # Calculate diversity by using the standard deviation of the utility
    diversity = np.std(utility)
    # Calculate sparsity by the fraction of zero weights
    sparsity = 1 - np.mean(weight, axis=1)
    # Weigh each metric to create a heuristic score
    # High utility and diversity are favored, while low sparsity is favored
    weighted_heuristic = utility_normalized * 0.5 + diversity * 0.3 + sparsity * 0.2
    # Normalize the heuristics to ensure all values are between 0 and 1
    max_heuristic = np.max(weighted_heuristic)
    min_heuristic = np.min(weighted_heuristic)
    heuristics = (weighted_heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    return heuristics
```
