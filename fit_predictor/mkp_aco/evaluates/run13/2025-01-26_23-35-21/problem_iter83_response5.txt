```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize density considering dimensionality
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate heuristic by blending metrics
    heuristic = density * (1 - sparsity) - weight_sum
    
    # Diversity factor based on average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Randomness factor to avoid local optima
    randomness_factor = np.random.rand(len(density))
    
    # Create a final heuristic by combining factors
    final_heuristic = heuristic * diversity_factor * randomness_factor
    
    # Prune dominated items
    non_dominated = (final_heuristic > 0).astype(float)
    
    # Introduce a balance heuristic
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * non_dominated + 0.3 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
