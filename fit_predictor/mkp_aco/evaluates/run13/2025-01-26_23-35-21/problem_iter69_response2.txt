```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items based on the average density
    average_density = np.mean(density)
    dominated_items = density < average_density
    density[dominated_items] = 0
    
    # Introduce randomness to prevent convergence to local optima
    np.random.shuffle(density)
    
    # Ensure exploration and exploitation balance by adjusting weights
    heuristic_value = density * (1 - sparsity) - weight_sum
    heuristic = heuristic_value * np.exp(-sparsity)  # Exploit high sparsity
    
    # Introduce a dynamic adjustment based on the current distribution
    current_std = np.std(density)
    heuristic = heuristic * (1 + np.random.normal(0, current_std))
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set very low density to zero to maintain diversity
    combined_heuristic = normalized_heuristic.copy()
    combined_heuristic[density < 1e-8] = 0
    
    return combined_heuristic
```
