```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristic array with zeros
    heuristic = np.zeros_like(prize)
    
    # Calculate basic metrics for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce randomness to the initial selection
    random_factor = np.random.rand(len(prize))
    
    # Calculate diversity using the variance of density
    diversity = np.var(density)
    
    # Calculate risk using the average density and the sum of weights
    risk = (np.mean(density) + np.mean(weight_sum)) / (len(prize) + 1e-8)
    
    # Combine the metrics to create the heuristic
    heuristic = (0.6 * density - 0.2 * sparsity + 0.2 * random_factor - 0.1 * diversity + 0.1 * risk)
    
    # Normalize the heuristic to maintain a bounded range
    heuristic /= np.max(heuristic + 1e-8)
    
    # Apply a penalty to items with zero weight to encourage diversity
    zero_weight_penalty = np.where(weight_sum < 1e-8, 1e-8, 0)
    heuristic -= zero_weight_penalty
    
    return heuristic
```
