```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of the items
    sparsity = np.sum(weight, axis=1) / np.sum(weight)
    
    # Incorporate additional metrics such as the sum of weights and the inverse sparsity
    weight_sum = np.sum(weight, axis=1)
    inverse_sparsity = 1 - sparsity
    
    # Combine the metrics into a heuristic value
    heuristic_value = density * (1 - sparsity) - weight_sum + inverse_sparsity
    
    # Introduce a diversity factor by considering the variation in the density
    density_var = np.var(density)
    diversity_factor = 1 - density_var
    
    # Create a final heuristic by combining the heuristic value with the diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Ensure that the heuristics do not sum to more than 1 for any item
    total_normalized_heuristic = np.sum(normalized_heuristic)
    if total_normalized_heuristic > 1:
        normalized_heuristic /= total_normalized_heuristic
    
    return normalized_heuristic
```
