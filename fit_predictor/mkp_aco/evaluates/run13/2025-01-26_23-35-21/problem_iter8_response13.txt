```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity metric by subtracting the average density
    diversity = density - np.mean(density)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Create a weighted heuristic value that combines density, diversity, and sparsity
    heuristic_value = (0.6 * density) + (0.3 * diversity) + (0.1 * sparsity)
    
    # Normalize by the maximum heuristic value to ensure a scale between 0 and 1
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Apply a logarithmic transformation to avoid dominance of high values
    transformed_heuristics = np.log(1 + normalized_heuristic)
    
    # Normalize by the maximum transformed heuristic value to ensure a scale between 0 and 1
    max_transformed_heuristics = np.max(transformed_heuristics)
    min_transformed_heuristics = np.min(transformed_heuristics)
    heuristics = (transformed_heuristics - min_transformed_heuristics) / (max_transformed_heuristics - min_transformed_heuristics)
    
    return heuristics
```
