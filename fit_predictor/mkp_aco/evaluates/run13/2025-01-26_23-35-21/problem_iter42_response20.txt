```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize prize to prevent overflow
    normalized_prize = prize / np.sum(prize)

    # Calculate normalized density
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate sum of weights
    weight_sum = np.sum(weight, axis=1)

    # Calculate diversity factor
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)

    # Create heuristic value
    heuristic_value = density * (1 - sparsity) - weight_sum

    # Introduce balance heuristic
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)

    # Combine heuristic value with diversity and balance
    heuristic = heuristic_value * diversity_factor + balance_heuristic

    # Prune low-quality heuristics by setting them to zero
    quality_threshold = np.percentile(heuristic, 5)
    heuristic[heuristic < quality_threshold] = 0

    # Ensure the sum of heuristics is one
    heuristic /= np.sum(heuristic)

    # Set zero weights to a small value to maintain diversity
    zero_weight_index = weight_sum < 1e-8
    heuristic[zero_weight_index] = 1e-8 / np.sum(~zero_weight_index)

    return heuristic
```
