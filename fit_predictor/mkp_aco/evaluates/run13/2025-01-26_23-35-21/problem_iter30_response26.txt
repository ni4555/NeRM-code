```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics
    weight_sum = np.sum(weight, axis=1)
    
    # Blending metrics for heuristic value
    heuristic_value = (density * (1 - sparsity) - weight_sum) / (np.max(weight, axis=1) + 1e-8)
    
    # Diversity factor based on average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Balance heuristic between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristic value, diversity factor, and balance heuristic
    combined_heuristic = heuristic_value * diversity_factor + balance_heuristic
    
    # Use randomness to introduce diversity
    random_factor = (1 + np.random.rand(len(prize))) * 0.4  # Randomly vary weights for diversity
    final_heuristic = random_factor * combined_heuristic + (1 - random_factor) * (density - sparsity)
    
    # Normalize by maximum heuristic value
    normalized_heuristic = final_heuristic / (np.max(final_heuristic) + 1e-8)
    
    # Handle edge cases where the weight sum is zero
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
