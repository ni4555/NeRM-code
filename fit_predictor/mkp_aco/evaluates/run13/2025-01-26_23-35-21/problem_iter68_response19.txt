```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Identify dominated items and prune them
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Normalize the density, sparsity, and value-to-weight ratio
    density_normalized = density / np.max(density + sparsity + value_to_weight_ratio) + 1e-8
    sparsity_normalized = sparsity / np.max(density + sparsity + value_to_weight_ratio) + 1e-8
    value_to_weight_ratio_normalized = value_to_weight_ratio / np.max(density + sparsity + value_to_weight_ratio) + 1e-8

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Calculate the weighted sum of normalized metrics
    heuristic = (0.5 * density_normalized +
                 0.3 * sparsity_normalized +
                 0.2 * value_to_weight_ratio_normalized +
                 0.1 * random_factor)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / np.sum(heuristic)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.sum(normalized_heuristic) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    # Introduce a diversity factor that encourages inclusion of diverse items
    diversity_factor = 0.1 * (1 - np.mean(density_normalized)) / (np.max(1 - np.mean(density_normalized)) + 1e-8)

    # Introduce a randomness factor for additional exploration
    randomness_factor = 0.1 * np.random.rand(n) + 0.1

    # Combine balance, diversity, randomness, and the previous heuristics
    final_heuristic = normalized_heuristic * (diversity_factor + randomness_factor)

    return final_heuristic
```
