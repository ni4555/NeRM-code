```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize and weight for the first dimension
    prize_normalized = prize / np.sum(prize) + 1e-8
    weight_normalized = weight[:, 0] / np.sum(weight[:, 0]) + 1e-8
    
    # Calculate the first heuristic based on density
    density_heuristic = prize_normalized / weight_normalized
    
    # Calculate the second heuristic based on sparsity
    sparsity_heuristic = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a randomness factor for exploration
    randomness_factor = np.random.rand(len(prize))
    
    # Integrate all factors to create a final heuristic
    heuristic = density_heuristic * (1 - sparsity_heuristic) + randomness_factor
    
    # Normalize the heuristic to ensure consistency
    normalized_heuristic = heuristic / np.max(heuristic)
    
    # Prune dominated items by setting their heuristic to zero
    for i in range(len(prize)):
        if prize_normalized[i] < 1e-8:
            normalized_heuristic[i] = 0
    
    return normalized_heuristic
```
