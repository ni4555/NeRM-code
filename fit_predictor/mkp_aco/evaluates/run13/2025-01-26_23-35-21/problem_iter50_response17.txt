```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)

    # Calculate the diversity factor as the ratio of each item's prize to the sum of all prizes
    diversity_factor = prize / np.sum(prize)

    # Calculate the sparsity as the sum of each item's weight over the maximum weight per dimension
    sparsity = np.sum(weight, axis=1) / np.sum(weight, axis=1).max()

    # Calculate the minimum density to encourage balance
    min_density = np.min(density)

    # Calculate the balance factor by considering the minimum prize per dimension
    balance_factor = min_density / density

    # Normalize the metrics to ensure they are comparable
    density = (density - np.min(density)) / (np.max(density) - np.min(density))
    diversity_factor = (diversity_factor - np.min(diversity_factor)) / (np.max(diversity_factor) - np.min(diversity_factor))
    balance_factor = (balance_factor - np.min(balance_factor)) / (np.max(balance_factor) - np.min(balance_factor))
    sparsity = (sparsity - np.min(sparsity)) / (np.max(sparsity) - np.min(sparsity))

    # Combine the normalized metrics using a weighted sum to emphasize diversity, balance, and sparsity
    combined_heuristic = 0.5 * density + 0.3 * diversity_factor + 0.2 * balance_factor + 0.1 * sparsity

    # Introduce randomness to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    combined_heuristic += 0.1 * random_factor

    # Ensure that the heuristic values do not exceed 1
    combined_heuristic = np.clip(combined_heuristic, 0, 1)

    return combined_heuristic
```
