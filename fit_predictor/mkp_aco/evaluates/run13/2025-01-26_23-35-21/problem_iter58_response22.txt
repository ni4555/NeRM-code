```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize by the total maximum weight for each dimension
    normalized_prize = prize / np.sum(weight, axis=1, keepdims=True)

    # Calculate sparsity for each item as the ratio of the sum of weights to the maximum weight
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Combine normalized prize and sparsity to create a heuristic value
    heuristic = normalized_prize * (1 - sparsity)

    # Introduce randomness to explore less likely candidates
    random_factor = np.random.rand(n)
    random_factor = random_factor / np.sum(random_factor)
    heuristic = heuristic * random_factor

    # Normalize the heuristic to ensure the sum is one for proportional selection
    heuristic = heuristic / np.sum(heuristic)

    # Set items with very low sparsity to a lower weight to avoid being excluded
    min_sparsity_threshold = np.percentile(sparsity, 5)
    heuristic[np.where(sparsity < min_sparsity_threshold)] *= 0.5

    return heuristic
```
