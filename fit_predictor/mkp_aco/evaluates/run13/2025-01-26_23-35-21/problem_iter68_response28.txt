```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = (prize / np.sum(weight, axis=1))**2 + 1e-8

    # Calculate the diversity score using a lower percentile to reduce the influence of outliers
    diversity = np.percentile(density, 50)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics using a weighted sum
    heuristic = (0.5 * density +
                 0.2 * (1 - sparsity) +
                 0.1 * value_to_weight_ratio +
                 0.1 * diversity +
                 0.1 * random_factor)

    # Normalize the heuristic values to ensure a range of [0, 1]
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Prune dominated items by setting their heuristic to zero
    dominated_mask = np.any(density < sparsity[:, np.newaxis], axis=1)
    normalized_heuristic[dominated_mask] = 0

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.count_nonzero(normalized_heuristic) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
