```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1) + 1e-8

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Prune dominated items early by setting density of dominated items to zero
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Combine metrics using a weighted sum, giving more weight to value-to-weight ratio
    heuristic = (0.6 * density +
                 0.2 * (1 - sparsity) +
                 0.2 * value_to_weight_ratio)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Encourage diversity with randomness
    random_factor = np.random.rand(n) + 1e-8

    # Introduce a balance factor considering both density and sparsity
    balance_factor = 0.5 * (density + sparsity) / (np.max(density + sparsity) + 1e-8)

    # Introduce a diversity factor
    diversity_factor = 0.5 * (1 - np.mean(density)) / (np.max(1 - np.mean(density)) + 1e-8)

    # Introduce a randomness factor
    randomness_factor = 0.5 * np.random.rand(n) + 0.5

    # Combine factors to create the final heuristic
    final_heuristic = normalized_heuristic * (balance_factor + diversity_factor + randomness_factor)

    # Further refine the heuristic to give more weight to items with higher value-to-weight ratio
    final_heuristic *= value_to_weight_ratio / np.max(value_to_weight_ratio)

    # Introduce a sparsity penalty for items with high sparsity, to encourage diversity
    sparsity_penalty = (1 - sparsity) * 0.1
    final_heuristic *= (1 - sparsity_penalty)

    return final_heuristic
```
