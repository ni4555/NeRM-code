```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Randomness factor
    randomness_factor = np.random.rand(weight.shape[0])
    
    # Normalize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Sparsity measure
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Weight sum
    weight_sum = np.sum(weight, axis=1)
    
    # High density is good, low sparsity is good, but high density and low sparsity should be balanced
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Heuristic value combining balance, density, and sparsity
    heuristic_value = 0.5 * balance_factor + 0.3 * density - 0.2 * weight_sum
    
    # Apply randomness to introduce diversity
    heuristic = randomness_factor + heuristic_value
    
    # Normalize by the maximum value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # penalize items that are too heavy
    combined_heuristic = normalized_heuristic - 10 * (weight_sum > 1)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
