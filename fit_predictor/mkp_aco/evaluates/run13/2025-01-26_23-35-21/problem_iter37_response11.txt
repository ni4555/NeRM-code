```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity by the ratio of the sum of weights to the maximum weight
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce a randomness factor to avoid convergence to a local optimum
    randomness_factor = np.random.rand(weight.shape[0])
    
    # Combine density, sparsity, and randomness to create a heuristic
    heuristic = density * (1 - sparsity) + randomness_factor
    
    # Normalize the heuristic to ensure that no single factor dominates
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an exploration-exploitation factor
    exploration_exploitation_factor = np.random.rand(weight.shape[0])
    heuristic *= exploration_exploitation_factor
    
    # Sparsify the heuristic by setting the heuristic value to zero if it's not informative
    heuristic[sparsity < 0.5] = 0
    
    return heuristic
```
