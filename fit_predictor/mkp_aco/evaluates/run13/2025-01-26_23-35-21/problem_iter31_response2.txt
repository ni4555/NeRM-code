```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate a sparsity metric with an outlier penalty
    sparsity = 1 - np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce randomness based on the standard deviation of the sparsity
    randomness = np.random.normal(loc=0, scale=0.5, size=density.shape)
    
    # Create a heuristic with the density and sparsity as primary factors
    heuristic = density + sparsity + randomness
    
    # Introduce a diversity factor based on the standard deviation of density
    diversity_factor = np.std(density)
    heuristic *= diversity_factor
    
    # Normalize the heuristic
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a balancing factor to ensure a mix of high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_factor
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight.sum(axis=1) < 1e-8] = 1e-8
    
    return combined_heuristic
```
