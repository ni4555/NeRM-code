```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to consider the relative value
    normalized_prize = prize / np.max(prize)
    
    # Normalize the weights for each dimension to ensure the same scale
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate the density of each item
    density = normalized_prize / (np.sum(normalized_weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(normalized_weight, axis=1) / (np.max(normalized_weight, axis=1) + 1e-8)
    
    # Create a heuristic value by balancing density and sparsity
    heuristic_value = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Calculate the sum of weights for each item to consider the load
    weight_sum = np.sum(normalized_weight, axis=1)
    
    # Introduce a diversity factor to avoid local optima
    diversity_factor = 1 / (1 + np.exp(-density))
    
    # Combine the heuristic value with the diversity factor
    combined_heuristic = heuristic_value * diversity_factor
    
    # Introduce a randomness factor to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    
    # Blend the random factor with the combined heuristic to maintain some randomness
    final_heuristic = combined_heuristic * random_factor
    
    # Normalize the final heuristic values to sum to 1
    normalized_heuristic = final_heuristic / np.sum(final_heuristic)
    
    return normalized_heuristic
```
