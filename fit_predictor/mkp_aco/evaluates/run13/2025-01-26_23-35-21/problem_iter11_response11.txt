```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = (density * (1 - sparsity)) + (weight_sum / (np.max(weight_sum) + 1e-8))
    
    # Include a diversity factor based on the variance of the weight in each dimension
    diversity_factor = np.mean(np.var(weight, axis=1))
    
    # Penalize items that are too sparse or too dense
    sparsity_penalty = np.where(sparsity > 0.5, -sparsity, 0)
    density_penalty = np.where(density > 0.5, -density, 0)
    
    # Combine all factors into the heuristic value
    heuristic_value += diversity_factor + sparsity_penalty + density_penalty
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
