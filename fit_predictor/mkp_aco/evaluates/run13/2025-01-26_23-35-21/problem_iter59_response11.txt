```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity ratio
    sparsity = np.sum(weight, axis=1) / np.mean(weight, axis=1)
    
    # Introduce a randomness factor to explore different regions of the solution space
    randomness_factor = np.random.rand(len(prize))
    
    # Introduce a dominance pruning step by excluding dominated items
    dominance_pruning_mask = np.all(weight < np.array([np.inf] * len(weight)), axis=1)
    dominance_pruning_mask = np.logical_or(dominance_pruning_mask, np.any(weight == np.array([np.inf] * len(weight)), axis=1))
    density[dominance_pruning_mask] = 0
    
    # Create a final heuristic by blending metrics
    heuristic = density * (1 - sparsity) + randomness_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    return normalized_heuristic
```
