```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    heuristic_matrix = np.zeros_like(prize)
    
    for i in range(prize.shape[0]):
        density = prize[i] / np.sum(weight[i])
        sparsity = np.sum(weight[i]) / (np.max(weight[i]) + 1e-8)
        
        # Calculate a balance factor between density and sparsity
        balance_factor = (density + sparsity) / 2
        
        # Calculate the diversity factor
        diversity_factor = np.random.rand()  # Random factor to encourage diversity
        
        # Combine the factors to form the heuristic
        heuristic_value = balance_factor * (1 - sparsity) / (np.sum(weight[i]) + 1e-8) * diversity_factor
        
        # Update the heuristics matrix
        heuristic_matrix[i] = heuristic_value
    
    # Normalize the heuristics to maintain a bounded range
    heuristic_matrix /= np.max(heuristic_matrix)
    
    return heuristic_matrix
```
