```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize an array for the heuristic values
    heuristic = np.zeros_like(prize)

    # For each item, calculate the heuristic based on the prize to weight ratio and the diversity
    for i in range(prize.shape[0]):
        # Calculate the diversity by normalizing the prize
        diversity = prize[i] / np.linalg.norm(prize)
        
        # Add the diversity to the heuristic if it is positive
        if diversity > 0:
            heuristic[i] = diversity

    # Normalize the heuristic values to ensure they sum to 1
    heuristic /= np.sum(heuristic)

    # Create a sparser heuristic by setting low-weight items to zero
    low_weight_threshold = np.min(weight, axis=1) * 0.5
    heuristic[weight < low_weight_threshold] = 0

    return heuristic
```
