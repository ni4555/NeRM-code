```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Normalize the sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Introduce randomness for diversity
    random_factor = np.random.rand(n) + 1e-8

    # Create a balance factor for density and sparsity
    balance_factor_density_sparsity = 0.5 * density + 0.5 * (1 - sparsity)

    # Create a balance factor for value-to-weight ratio
    balance_factor_value_to_weight = 0.3 * value_to_weight_ratio

    # Create a diversity factor to encourage different solutions
    diversity_factor = 0.2 * (1 - np.mean(density)) / (np.max(1 - np.mean(density)) + 1e-8)

    # Combine the factors
    heuristic = balance_factor_density_sparsity + balance_factor_value_to_weight + diversity_factor + random_factor

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    # Apply a sparsity penalty to encourage diversity
    sparsity_penalty = (1 - sparsity) * 0.1
    refined_heuristic = normalized_heuristic * (1 - sparsity_penalty)

    # Ensure that the heuristic values are non-negative
    refined_heuristic = np.maximum(refined_heuristic, 0)

    # If all items have zero density, set a minimum heuristic value to avoid dominance
    if np.all(density == 0):
        refined_heuristic = np.ones(n) * 1e-8

    return refined_heuristic
```
