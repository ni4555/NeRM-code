```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to the range [0, 1]
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))

    # Normalize the weight for each dimension to the range [0, 1]
    normalized_weight = (weight - np.min(weight, axis=0)) / (np.max(weight, axis=0) - np.min(weight, axis=0))

    # Calculate the normalized density
    density = normalized_prize / (np.sum(normalized_weight, axis=1) + 1e-8)

    # Calculate the sparsity for each item
    sparsity = np.sum(normalized_weight, axis=1) / np.sum(weight, axis=1)

    # Prune dominated items by selecting the one with the highest prize relative to weight
    dominance_filter = np.argmax(density, axis=1)
    non_dominated_items = dominance_filter.reshape(-1, 1)
    dominated_items = np.setdiff1d(np.arange(weight.shape[0]), non_dominated_items)

    # Set dominated items to a very low value to encourage selection of non-dominated items
    density[dominated_items] = 1e-8

    # Balance exploration and exploitation by combining density with sparsity
    heuristic = density * (1 - sparsity)

    # Incorporate randomness for diversity
    random_factor = np.random.rand(*heuristic.shape)
    random_factor /= np.sum(random_factor, axis=1, keepdims=True)

    # Combine heuristics with randomness
    combined_heuristic = heuristic * random_factor

    # Normalize by the maximum heuristic value
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)

    return normalized_combined_heuristic
```
