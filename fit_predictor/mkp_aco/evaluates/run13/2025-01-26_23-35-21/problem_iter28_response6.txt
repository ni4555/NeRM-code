```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce randomness with Gaussian noise to enhance diversity
    random_noise = np.random.normal(0, 1e-4, prize.shape)
    
    # Create a balanced heuristic considering density and sparsity
    heuristic = 0.6 * density + 0.4 * sparsity + random_noise
    
    # Normalize the heuristic to ensure a good distribution of weights
    normalized_heuristic = heuristic / (np.sum(heuristic) + 1e-8)
    
    # Introduce penalties for dominance and similarity
    dominance_penalty = (np.max(weight, axis=1) - np.sum(weight, axis=1)) / (np.max(weight, axis=1) + 1e-8)
    normalized_heuristic += dominance_penalty
    
    # Apply a diversity penalty to avoid selecting too many similar items
    diversity_penalty = 1 / np.linalg.norm(normalized_heuristic)
    
    # Normalize the heuristic to maintain a good scale
    normalized_heuristic = (normalized_heuristic - np.min(normalized_heuristic)) / (np.max(normalized_heuristic) - np.min(normalized_heuristic))
    
    # Set items with zero weight sum to a lower value to maintain diversity
    zero_weight_index = np.where(np.sum(weight, axis=1) == 0)[0]
    normalized_heuristic[zero_weight_index] = 0.1
    
    return normalized_heuristic
```
