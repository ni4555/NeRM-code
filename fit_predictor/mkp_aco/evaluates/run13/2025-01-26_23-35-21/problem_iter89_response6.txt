```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by the sum of prizes to avoid dominance
    normalized_prize = prize / np.sum(prize)
    
    # Calculate the density considering the dimensionality of the weight
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity considering the maximum weight
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items based on prize to weight ratio
    dominated_items = np.where(density < sparsity)[0]
    density[dominated_items] = 0
    
    # Introduce randomness to balance the selection of items
    random_factor = np.random.rand(len(density))
    
    # Combine the metrics to create a heuristic
    heuristic = density * (1 - sparsity) + random_factor
    
    # Normalize the heuristic to ensure a proper scale
    normalized_heuristic = heuristic / np.sum(heuristic)
    
    return normalized_heuristic
```
