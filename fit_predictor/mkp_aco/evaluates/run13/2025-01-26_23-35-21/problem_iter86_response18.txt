```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density considering dimensionality
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate metrics like sum of weights and average density
    weight_sum = np.sum(weight, axis=1)
    average_density = np.mean(density)
    
    # Create heuristic value with balanced trade-offs
    heuristic_value = density * (1 - sparsity) - weight_sum + 0.5 * (1 / (average_density + 1e-8))
    
    # Introduce randomness for diversity
    random_factor = np.random.rand(n)
    
    # Create a balance factor to weigh density against sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine all factors to get a heuristic score
    heuristic = (heuristic_value * 0.7 +
                 random_factor * 0.2 +
                 balance_factor * 0.1)
    
    # Prune dominated items by setting their heuristic to zero
    dominated_indices = np.where(density < np.max(density) / 1.5)[0]
    heuristic[dominated_indices] = 0
    
    # Normalize the heuristics
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
