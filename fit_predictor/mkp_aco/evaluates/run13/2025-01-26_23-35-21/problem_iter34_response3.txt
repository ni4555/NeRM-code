```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prize to avoid dominance issues
    normalized_prize = prize / np.max(prize)

    # Normalize weight to encourage sparsity
    normalized_weight = weight / np.max(weight)

    # Calculate the sum of normalized weights for each item to use as a denominator for diversity
    sum_normalized_weight = np.sum(normalized_weight, axis=1)

    # Calculate diversity factor by averaging the normalized weights
    diversity_factor = sum_normalized_weight / (sum_normalized_weight + 1e-8)

    # Calculate sparsity factor for each item
    sparsity_factor = np.mean(normalized_weight, axis=1)

    # Introduce randomness to the diversity factor to avoid convergence
    randomness_factor = np.random.rand(n)

    # Combine factors to create a heuristic
    heuristic = normalized_prize * (1 + sparsity_factor + diversity_factor + randomness_factor)

    # Normalize the heuristic to maintain consistency
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure the heuristics are non-negative and maintain diversity
    normalized_heuristic = np.clip(normalized_heuristic, 1e-8, None)

    return normalized_heuristic
```
