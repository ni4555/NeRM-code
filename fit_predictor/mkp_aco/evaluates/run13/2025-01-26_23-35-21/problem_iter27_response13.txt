```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized prize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a randomness factor to avoid local optima
    randomness_factor = np.random.rand(len(density))
    
    # Create a balanced heuristic value by blending metrics and randomness
    heuristic_value = density * (1 - sparsity) + randomness_factor
    
    # Normalize by the sum of all heuristic values
    normalized_heuristic = heuristic_value / np.sum(heuristic_value)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
