```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate the value to weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Calculate balance metric between density and sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8
    balance_metric = (density - sparsity) / (np.abs(density - sparsity) + 1e-8)

    # Filter by percentile for density and sparsity
    dominated_mask_density = density < np.percentile(density, 95)
    dominated_mask_sparsity = sparsity > np.percentile(sparsity, 5)
    density[dominated_mask_density] = 0
    sparsity[dominated_mask_sparsity] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics using a weighted sum, including randomness
    heuristic = (0.5 * density +
                 0.3 * balance_metric +
                 0.1 * value_to_weight_ratio +
                 0.1 * random_factor)

    # Normalize the heuristic values
    heuristic_max = np.max(heuristic)
    if heuristic_max > 0:
        normalized_heuristic = heuristic / heuristic_max
    else:
        normalized_heuristic = np.zeros(n)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(density == 0 and sparsity == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
