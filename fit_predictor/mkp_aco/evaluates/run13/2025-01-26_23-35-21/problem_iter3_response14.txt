```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate the relative standard deviation to encourage diversity
    relative_std_dev = np.std(weight, axis=1) / np.mean(weight, axis=1)
    # Normalize the utility to ensure it contributes equally
    normalized_utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    # Combine the normalized utility with the relative standard deviation
    heuristics = normalized_utility * relative_std_dev
    # Apply a logarithmic transformation to the heuristics to reduce the impact of large values
    heuristics = np.log(heuristics + 1)  # Adding 1 to avoid log of zero
    # Threshold the heuristics to ensure only the most promising items are selected
    threshold = np.percentile(heuristics, 90)  # Use 90th percentile as a threshold
    heuristics = np.where(heuristics > threshold, heuristics, 0)
    return heuristics
```
