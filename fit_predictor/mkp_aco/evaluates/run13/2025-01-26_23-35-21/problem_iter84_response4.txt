```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Initialize heuristics with a large negative value to encourage selection of better items
    heuristic = -np.inf * np.ones(n)
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)
    
    # Define a weighted heuristic score based on normalized density, sparsity, and randomness
    heuristic = (0.5 * density) + (0.3 * (1 - sparsity)) + (0.2 * random_factor)
    
    # Prune dominated items
    dominated_items = np.where(sparsity < 0.1)[0]
    heuristic[dominated_items] = 0
    
    # Normalize heuristics to ensure a consistent scale
    max_heuristic = np.max(heuristic)
    heuristic = heuristic / (max_heuristic + 1e-8)
    
    return heuristic
```
