```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/sum of weights)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity of each item (sum of reciprocal of weights)
    diversity = np.sum(1 / weight, axis=1)
    
    # Combine density and diversity, and normalize by max value to avoid simplistic averaging
    combined = (density + diversity) / (np.max(density + diversity) + 1e-8)
    
    # Set a more sophisticated threshold based on a percentile or heuristic
    percentile = 90
    threshold = np.percentile(combined, percentile)
    
    # Create heuristics array using the threshold
    heuristics = np.where(combined >= threshold, combined, 0)
    
    return heuristics
```
