```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity as the number of zero weights
    sparsity = np.sum(weight == 0, axis=1)
    
    # Encourage diversity by considering how unique the item is
    uniqueness = np.sum(weight != 0, axis=1) / np.sum(weight != 0)
    
    # Calculate additional metrics
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic that emphasizes high density and low sparsity
    heuristic_value = density / (sparsity + 1e-8)
    
    # Introduce randomness for exploration
    random_factor = np.random.rand(len(prize))
    
    # Create a final heuristic by blending the heuristic value and the randomness
    heuristic = heuristic_value * uniqueness + random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a balance heuristic based on the sum of weights
    balance_heuristic = weight_sum / (np.max(weight_sum) + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * normalized_heuristic + 0.3 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
