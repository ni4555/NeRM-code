```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity based on a threshold for each item
    sparsity_threshold = 0.1  # Assuming a threshold of 10% for sparsity
    sparsity = np.sum(weight, axis=1) < sparsity_threshold
    
    # Calculate diversity of each item (1 / sum of each dimension's weight)
    diversity = 1 / np.sum(weight, axis=1)
    
    # Calculate the uniformity of the weight distribution for each item
    uniformity = np.mean(weight, axis=1)
    
    # Combine the metrics using a weighted sum approach
    # Weigh density more heavily as it represents value
    # Weigh sparsity and diversity to encourage flexibility and diversity in the solution
    heuristics = (density * 0.6 + (1 - sparsity) * 0.2 + diversity * 0.2 + uniformity * 0.1)
    
    # Ensure all heuristics are non-negative
    heuristics = np.maximum(heuristics, 0)
    
    # Normalize the heuristics to a range [0, 1]
    heuristics = heuristics / np.max(heuristics)
    
    return heuristics
```
