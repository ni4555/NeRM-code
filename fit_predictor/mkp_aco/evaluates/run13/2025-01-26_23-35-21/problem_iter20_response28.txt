```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate diversity as the variance of the weight across dimensions
    diversity = np.var(weight, axis=1)

    # Create a balanced heuristic value by combining density, sparsity, and diversity
    heuristic_value = density / (1 - sparsity) * diversity

    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)

    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[np.sum(weight, axis=1) < 1e-8] = 1e-8

    # Promote diversity by penalizing identical items
    for i in range(weight.shape[0]):
        for j in range(i + 1, weight.shape[0]):
            similarity = np.sum((weight[i] == weight[j]))
            if similarity == weight.shape[1]:  # Items are identical
                normalized_heuristic[j] *= 0.5

    return normalized_heuristic
```
