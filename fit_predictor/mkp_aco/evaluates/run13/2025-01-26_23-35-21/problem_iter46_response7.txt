```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize per unit weight for each item
    density = prize / np.sum(weight, axis=1)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Calculate a penalty for items that exceed the weight constraint of 1
    weight_penalty = np.where(np.sum(weight, axis=1) > 1, np.sum(weight, axis=1) - 1, 0)

    # Combine density, sparsity, and weight_penalty into a single heuristic value
    heuristic_value = density * (1 - sparsity) - weight_penalty

    # Prune dominated solutions by keeping only the items with the highest heuristic value
    max_heap = [(- heuristic_value[i], i) for i in range(n)]
    heapq.heapify(max_heap)
    heuristic_value_pruned = np.zeros(n)
    for _ in range(n):
        _, idx = heapq.heappop(max_heap)
        heuristic_value_pruned[idx] = -max_heap[0][0]

    # Introduce a diversity factor based on the variance of the normalized heuristic
    normalized_heuristic = heuristic_value_pruned / np.mean(heuristic_value_pruned)
    diversity_factor = np.exp(-0.5 * (normalized_heuristic - np.mean(normalized_heuristic))**2)

    # Calculate the final heuristic by combining the normalized heuristic and diversity factor
    final_heuristic = normalized_heuristic * diversity_factor

    # Normalize the final heuristic values to sum to 1
    final_heuristic /= np.sum(final_heuristic)

    return final_heuristic
```
