```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristic array
    heuristic = np.zeros_like(prize)
    
    # Calculate normalized density, considering the sum of all weights in the knapsack
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity, ensuring it's not zero for the items that won't be selected
    sparsity = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate balance between high density and low sparsity
    balance = density * sparsity
    
    # Introduce a diversity factor by considering the variance in the balance
    diversity_factor = balance / np.mean(balance)
    
    # Promote items with lower total weight
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic combining balance, weight sum, and diversity
    heuristic = balance - weight_sum + diversity_factor
    
    # Normalize the heuristic to promote diversity and ensure that all values are positive
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    
    # Avoid zero heuristic values by adding a small epsilon
    heuristic += 1e-8
    
    return heuristic
```
