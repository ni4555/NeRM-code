```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized prize per unit weight
    value_per_weight = prize / np.sum(weight, axis=1)

    # Calculate the sparsity as the inverse of the average weight
    sparsity = 1 / np.mean(weight, axis=1)

    # Introduce a diversity factor based on the standard deviation of the value per weight
    diversity_factor = np.std(value_per_weight)

    # Combine value per weight, sparsity, and diversity factor
    heuristic_value = value_per_weight * sparsity * diversity_factor

    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    heuristic_value /= max_heuristic if max_heuristic > 0 else 1

    # Introduce randomness to encourage exploration and avoid local optima
    randomness = np.random.rand(n)

    # Add randomness to the heuristic values
    heuristic = heuristic_value + randomness

    return heuristic
```
