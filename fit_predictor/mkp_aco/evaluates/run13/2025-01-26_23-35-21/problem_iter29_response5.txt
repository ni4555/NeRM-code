```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce randomness for diversity
    random_factor = np.random.rand(weight.shape[0])
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic
    
    # Introduce a penalty for sparsity and outliers
    penalty_sparsity = np.exp(-sparsity)
    penalty_outliers = np.exp(-np.abs(density - np.mean(density)))
    
    # Adjust combined heuristic with penalties
    adjusted_heuristic = combined_heuristic * penalty_sparsity * penalty_outliers
    
    # Normalize the adjusted heuristic to maintain a bounded range
    normalized_adjusted_heuristic = adjusted_heuristic / (np.max(adjusted_heuristic) + 1e-8)
    
    # Introduce randomness to avoid dominance
    final_heuristic = normalized_adjusted_heuristic * random_factor
    
    # Set zero weights to a small value to maintain diversity
    final_heuristic[weight_sum < 1e-8] = 1e-8
    
    return final_heuristic
```
