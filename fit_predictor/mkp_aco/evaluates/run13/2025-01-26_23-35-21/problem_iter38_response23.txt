```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Combine density and sparsity to create heuristic
    heuristic = (density - sparsity) / (np.abs(density) + np.abs(sparsity) + 1e-8)
    
    # Normalize heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce diversity by penalizing low density
    diversity_factor = np.where(density < np.percentile(density, 50), 0, 1)
    
    # Combine normalized heuristic with diversity factor
    combined_heuristic = normalized_heuristic * diversity_factor
    
    # Sparsify by setting low heuristic values to zero
    sparsified_heuristic = np.where(combined_heuristic < np.percentile(combined_heuristic, 5), 0, combined_heuristic)
    
    return sparsified_heuristic
```
