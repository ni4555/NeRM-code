```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize per unit weight for each item
    density = prize / np.sum(weight, axis=1)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate diversity factor based on the variance of density
    diversity_factor = density / np.var(density)

    # Calculate a balance factor that penalizes sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)

    # Combine the factors to get a preliminary heuristic
    preliminary_heuristic = diversity_factor * balance_factor

    # Introduce randomness for exploration
    random_factor = np.random.rand(n)

    # Combine all factors including randomness
    heuristic_value = preliminary_heuristic + random_factor

    # Normalize the heuristic to ensure they sum to 1
    heuristic_value /= np.sum(heuristic_value)

    # Adjust the heuristic for items that do not contribute to the weight constraint
    non_contributing_items = np.sum(weight, axis=1) < 1e-8
    heuristic_value[non_contributing_items] = 1e-8

    return heuristic_value
```
