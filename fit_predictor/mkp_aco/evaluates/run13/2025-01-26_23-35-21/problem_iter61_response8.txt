```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items (items with lower density but same or higher weight)
    dominated_indices = np.where(np.all(weight > 1e-8, axis=1) & (density < np.max(density))[np.all(weight > 1e-8, axis=1)])[0]
    non_dominated_density = np.delete(density, dominated_indices)
    
    # Introduce randomness to diversify the sampling of items
    np.random.shuffle(non_dominated_density)
    
    # Calculate the sparsity normalized by the max weight
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Add a sparsity penalty for items that are less sparse
    sparsity_penalty = 1 - sparsity
    
    # Calculate the weight sum of the items
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic based on a weighted combination of density, sparsity penalty, and weight sum
    heuristic = density * sparsity_penalty * (1 - weight_sum)
    
    # Normalize the heuristic to a range between 0 and 1
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a diversity factor by considering the first few items after shuffling
    diversity_factor = non_dominated_density[:int(len(non_dominated_density) / 2)]
    diversity_factor = diversity_factor / (np.max(diversity_factor) + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * normalized_heuristic + 0.3 * diversity_factor
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
