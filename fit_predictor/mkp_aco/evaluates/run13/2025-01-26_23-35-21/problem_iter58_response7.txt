```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)

    # Calculate the diversity factor as the ratio of each item's prize to the sum of all prizes
    diversity_factor = prize / np.sum(prize)

    # Calculate the sparsity as the sum of each item's weight over the maximum weight per dimension
    sparsity = np.sum(weight, axis=1) / np.sum(weight, axis=1).max()

    # Introduce randomness to avoid getting stuck in local optima
    randomness = np.random.rand(n)

    # Create a combined heuristic that emphasizes density, diversity, sparsity, and randomness
    combined_heuristic = 0.6 * density + 0.2 * diversity_factor + 0.1 * sparsity + 0.1 * randomness

    # Normalize the combined heuristic values to ensure they are between 0 and 1
    combined_heuristic /= np.max(combined_heuristic)

    # Ensure that the heuristic values do not exceed 1
    combined_heuristic = np.clip(combined_heuristic, 0, 1)

    # Prune dominated items by setting their heuristics to zero
    # An item i is dominated if there exists an item j such that j != i and prize[j] >= prize[i] and weight[j] <= weight[i]
    non_dominated_items = np.where(np.all(prize <= prize, axis=1) & np.all(weight >= weight, axis=1), True, False)
    dominated_items = np.where(~non_dominated_items, True, False)
    combined_heuristic[dominated_items] = 0

    return combined_heuristic
```
