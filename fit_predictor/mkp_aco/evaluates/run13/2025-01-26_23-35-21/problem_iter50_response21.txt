```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity factor as the ratio of each item's prize to the sum of all prizes
    diversity_factor = prize / np.sum(prize)
    
    # Calculate the sparsity as the sum of each item's weight over the maximum weight per dimension
    sparsity = np.sum(weight, axis=1) / np.sum(weight, axis=1).max()
    
    # Normalize density and diversity factor
    max_density = np.max(density)
    max_diversity = np.max(diversity_factor)
    
    density = density / max_density
    diversity_factor = diversity_factor / max_diversity
    
    # Combine heuristics using a weighted sum that emphasizes diversity, density, and sparsity
    combined_heuristic = 0.6 * diversity_factor + 0.3 * density + 0.1 * sparsity
    
    # Introduce randomness to avoid getting stuck in local optima
    randomness = np.random.rand(n)
    
    # Combine with random factor for diversity
    combined_heuristic += 0.1 * randomness
    
    # Normalize the combined heuristic values to ensure they are between 0 and 1
    combined_heuristic /= np.max(combined_heuristic)
    
    return combined_heuristic
```
