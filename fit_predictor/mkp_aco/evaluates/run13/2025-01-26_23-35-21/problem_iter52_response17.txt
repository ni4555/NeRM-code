```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Normalize the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Combine density and sparsity to create a balance factor
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)

    # Calculate diversity using the variance of density across dimensions
    diversity_factor = 1 / (np.var(density, axis=1) + 1e-8)

    # Combine the balance factor and diversity factor to get the heuristic
    heuristic_value = balance_factor * diversity_factor

    # Normalize the heuristic to ensure the sum is one
    heuristic = heuristic_value / np.sum(heuristic_value, axis=1)[:, np.newaxis]

    # Set zero weights to a small value to maintain diversity
    zero_weight_mask = np.sum(weight, axis=1) < 1e-8
    heuristic[zero_weight_mask] = 1e-8

    return heuristic
```
