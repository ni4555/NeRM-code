```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate normalized prize value per unit weight
    prize_per_weight = prize / np.sum(weight, axis=1)
    
    # Calculate diversity based on the standard deviation of prize per unit weight
    diversity = np.std(prize_per_weight)
    
    # Calculate sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate adaptability factor based on the average weight per item
    adaptability_factor = np.sum(weight, axis=1) / n
    
    # Calculate balance factor based on the ratio of the maximum to the minimum prize per unit weight
    balance_factor = np.max(prize_per_weight) / np.min(prize_per_weight)
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)
    
    # Combine all factors with different weights to form the heuristic
    heuristic = 0.4 * diversity + 0.3 * balance_factor + 0.2 * adaptability_factor + 0.1 * random_factor
    
    # Normalize the heuristic to ensure it sums to 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
