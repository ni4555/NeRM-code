```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the balance between high density and low sparsity
    balance = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(len(prize))
    
    # Combine multiple factors to create a heuristic
    heuristic = density * balance * random_factor
    
    # Prune dominated items
    non_dominated_indices = np.where(heuristic > 0)[0]
    heuristic = np.zeros_like(heuristic)
    heuristic[non_dominated_indices] = heuristic[non_dominated_indices] * (1 / np.max(heuristic[non_dominated_indices]))
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    return normalized_heuristic
```
