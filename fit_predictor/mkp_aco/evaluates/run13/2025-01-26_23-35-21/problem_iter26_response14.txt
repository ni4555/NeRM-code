```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristic array with zeros
    heuristic = np.zeros_like(prize)
    
    # Randomly select a subset of items to initialize the heuristic values
    num_initial_items = int(0.1 * len(prize))
    initial_indices = np.random.choice(range(len(prize)), size=num_initial_items, replace=False)
    heuristic[initial_indices] = 1
    
    # Calculate additional metrics for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    weight_sum = np.sum(weight, axis=1)
    num_dimensions = weight.shape[1]
    
    # Introduce a diversity factor based on the average density and sparsity
    diversity_factor = (np.mean(density) + np.mean(sparsity)) / (num_dimensions + 1)
    
    # Calculate the normalized diversity for each item
    normalized_diversity = (density - sparsity) / (diversity_factor + 1e-8)
    
    # Introduce a risk factor based on the average density and the sum of weights
    risk_factor = (np.mean(density) + np.mean(weight_sum)) / (num_dimensions + 1)
    
    # Calculate the normalized risk for each item
    normalized_risk = density / (risk_factor + 1e-8)
    
    # Update the heuristic values based on the metrics
    for i in range(len(prize)):
        # Skip items with zero weight
        if weight_sum[i] < 1e-8:
            continue
        # Combine the metrics using a weighted sum
        metric = 0.6 * normalized_diversity[i] - 0.4 * normalized_risk[i]
        # Update the heuristic value
        heuristic[i] = metric
    
    # Normalize the heuristic values to maintain a bounded range
    heuristic /= np.max(heuristic + 1e-8)
    
    return heuristic
```
