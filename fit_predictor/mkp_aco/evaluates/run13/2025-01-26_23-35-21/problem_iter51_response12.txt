```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristic array with the same size as the number of items
    heuristic = np.zeros_like(prize)
    
    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)[:, np.newaxis] + 1e-8
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1)[:, np.newaxis] / np.max(weight, axis=1)[:, np.newaxis] + 1e-8
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)[:, np.newaxis]
    
    # Add density as a factor, but penalize if the item is dominated (weight is too high)
    dominated_mask = weight_sum > 1 - 1e-8
    heuristic += (1 - dominated_mask) * density
    
    # Add sparsity as a factor, but normalize by the sum of weights
    heuristic += sparsity / (weight_sum + 1e-8)
    
    # Introduce randomness to ensure diversity
    random_factor = np.random.rand(*heuristic.shape) / np.max(np.random.rand(*heuristic.shape))
    
    # Combine all factors using a weighted sum
    combined_heuristic = 0.5 * heuristic + 0.5 * random_factor
    
    # Normalize the heuristics to ensure that they sum up to 1
    combined_heuristic /= np.sum(combined_heuristic)
    
    # Ensure that dominated items have a small heuristic value
    combined_heuristic[dominated_mask] = 1e-8
    
    return combined_heuristic
```
