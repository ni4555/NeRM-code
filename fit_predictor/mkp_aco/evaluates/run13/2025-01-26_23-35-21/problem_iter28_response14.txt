```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Calculate normalized prize per unit weight
    density = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity for each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce a balance metric between high density and low sparsity
    balance_metric = (density - sparsity) / (density + sparsity)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / average_density
    
    # Combine balance metric and diversity factor to create heuristic
    heuristic = balance_metric * diversity_factor
    
    # Introduce a penalty for items with extremely low sparsity
    penalty_factor = 1 / (1 - np.min(sparsity) + 1e-8)
    
    # Adjust the heuristic with the penalty factor
    adjusted_heuristic = heuristic * penalty_factor
    
    # Ensure that the heuristics are non-negative
    adjusted_heuristic[adjusted_heuristic < 0] = 0
    
    return adjusted_heuristic
```
