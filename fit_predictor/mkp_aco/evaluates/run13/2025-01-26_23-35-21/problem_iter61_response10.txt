```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity ratio
    sparsity_ratio = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items (those with lower density)
    density[density < np.percentile(density, 25)] = 0
    
    # Introduce randomness to promote diversity
    random_factor = np.random.rand(len(density))
    
    # Create a balanced heuristic value by blending density and sparsity ratio
    heuristic_value = density * (1 - sparsity_ratio) + random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Adjust for problem scale by dividing by the square root of n
    adjusted_heuristic = normalized_heuristic / np.sqrt(len(density))
    
    # Ensure the heuristic values are not too high by clipping at 0.99
    adjusted_heuristic = np.clip(adjusted_heuristic, 0, 0.99)
    
    return adjusted_heuristic
```
