```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Normalize value-to-weight ratio
    value_to_weight_ratio = (prize / np.sum(weight**2, axis=1) + 1e-8) * np.sqrt(m)

    # Normalize sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Normalize diversity
    diversity = np.std(density)

    # Normalize randomness
    randomness = np.random.rand(n) + 1e-8

    # Weigh and combine metrics using a weighted sum approach
    heuristic = (0.3 * density +
                 0.2 * (1 - sparsity) +
                 0.25 * value_to_weight_ratio +
                 0.15 * diversity +
                 0.1 * randomness)

    # Normalize heuristic values to a range [0, 1]
    normalized_heuristic = heuristic / np.sum(heuristic)

    # Encourage diversity if needed
    if diversity < 0.1:
        normalized_heuristic *= 1 - 0.1 * (0.1 - diversity)

    return normalized_heuristic
```
