```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize by its maximum value
    normalized_prize = prize / np.max(prize)

    # Calculate the weight per unit of prize value
    weight_per_unit = np.sum(weight, axis=1) / normalized_prize

    # Calculate the standard deviation of the weights for each item
    std_dev = np.std(weight, axis=1)

    # Introduce a balance factor based on the standard deviation
    balance_factor = 1 / (std_dev + 1e-8)

    # Calculate the heuristic score for each item
    heuristic = normalized_prize * weight_per_unit * balance_factor

    # Normalize the heuristic scores to sum to 1
    heuristic /= np.sum(heuristic)

    # Ensure that items with zero weight contribute positively to the heuristic
    heuristic[np.sum(weight, axis=1) < 1e-8] = 1e-8

    return heuristic
```
