```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Normalize the utility
    utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    # Calculate the sparsity of the weight matrix
    sparsity = np.sum(weight == 0, axis=1) / (weight.shape[1] * weight.shape[0])
    # Normalize the sparsity
    sparsity = (sparsity - np.min(sparsity)) / (np.max(sparsity) - np.min(sparsity))
    # Integrate domain insights: consider items with higher utility and lower sparsity
    # Weights for the sparsity are inversely proportional to the standard deviation
    # to encourage diversity in the selected items
    sparsity_weights = 1 / np.std(sparsity)
    # Avoid division by zero and ensure the sum of sparsity weights is not zero
    sparsity_weights = sparsity_weights / np.sum(sparsity_weights)
    # Combine the utility and the weighted sparsity
    heuristics = utility * sparsity_weights
    # Apply a smoothing to the heuristics to avoid too sharp changes
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
