```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Intensity measures how important it is for a high prize relative to its weight
    intensity = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic value considering the intensity and sparsity
    heuristic_value = intensity / sparsity
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Balance factor to reward solutions that balance the total prize with the total weight
    balance_factor = weight_sum / (np.sum(weight_sum) + 1e-8)
    
    # Combine the heuristic value, diversity factor, and balance factor
    heuristic = heuristic_value * diversity_factor * balance_factor
    
    # Normalize by the maximum heuristic value to bound values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a balance heuristic that rewards solutions that balance high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the normalized heuristic with the balance heuristic
    combined_heuristic = normalized_heuristic + balance_heuristic
    
    # Set zero weights to a very small value to maintain diversity while being negligible
    combined_heuristic[weight_sum < 1e-8] = 1e-10
    
    # Adjust the combined heuristic to ensure no item is considered with a zero weight
    min_combined_heuristic = np.min(combined_heuristic[combined_heuristic > 0])
    combined_heuristic[combined_heuristic < min_combined_heuristic] = min_combined_heuristic
    
    return combined_heuristic
```
