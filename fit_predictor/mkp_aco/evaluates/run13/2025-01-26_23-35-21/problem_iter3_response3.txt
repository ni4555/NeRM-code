```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate the normalized standard deviation of weights
    std_dev = np.std(weight, axis=1)
    # Normalize the standard deviation to be between 0 and 1
    std_dev_normalized = (std_dev - np.min(std_dev)) / (np.max(std_dev) - np.min(std_dev))
    # Use the utility and normalized standard deviation to compute heuristics
    heuristics = utility * std_dev_normalized
    # Apply a logarithmic transformation to avoid simplistic thresholds and encourage diversity
    heuristics = np.log(1 + heuristics)
    # Cap the heuristics to prevent them from being too large or too small
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
