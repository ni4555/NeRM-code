```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristic array with zeros
    heuristics = np.zeros(weight.shape[0])
    
    # Define a probability threshold to select items based on their heuristic
    threshold = np.random.rand()
    
    # Normalize the prize by summing the weights of each item to account for dimensionality
    normalized_prize = prize / np.sum(weight, axis=1)
    
    # Calculate the probability for each item
    probabilities = normalized_prize / (np.sum(normalized_prize) + 1e-8)
    
    # Use a greedy approach with a randomness factor to balance quality and diversity
    cumulative_probability = 0.0
    for i, probability in enumerate(probabilities):
        cumulative_probability += probability
        # If the cumulative probability exceeds the threshold, select the item
        if cumulative_probability > threshold:
            heuristics[i] = 1.0
            break
    
    # Normalize the heuristics by dividing by the sum of heuristics
    heuristics /= np.sum(heuristics) + 1e-8
    
    # Prune dominated items by setting their heuristics to zero
    dominated_indices = np.argmax(heuristics)
    for i in range(len(heuristics)):
        if heuristics[i] < heuristics[dominated_indices]:
            heuristics[i] = 0.0
    
    return heuristics
```
