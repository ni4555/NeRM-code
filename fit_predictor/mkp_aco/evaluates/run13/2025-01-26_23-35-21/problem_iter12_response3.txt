```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    
    # Calculate sparsity as the proportion of non-zero weights per item
    sparsity = np.mean(weight, axis=1)
    
    # Calculate variance of weights per item
    variance = np.var(weight, axis=1)
    
    # Normalize the utility to have a maximum value of 1
    utility_normalized = utility / np.max(utility)
    
    # Normalize sparsity and variance to have a maximum value of 1
    sparsity_normalized = sparsity / np.max(sparsity)
    variance_normalized = variance / np.max(variance)
    
    # Apply a logarithmic transformation to penalize outliers and encourage diversity
    heuristics = np.log1p(utility_normalized) + np.log1p(sparsity_normalized) + np.log1p(variance_normalized)
    
    # Normalize the heuristics to ensure all values are between 0 and 1
    max_heuristic = np.max(heuristics)
    min_heuristic = np.min(heuristics)
    if max_heuristic > min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        heuristics = np.zeros_like(utility_normalized)
    
    # Ensure all values are non-negative
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
