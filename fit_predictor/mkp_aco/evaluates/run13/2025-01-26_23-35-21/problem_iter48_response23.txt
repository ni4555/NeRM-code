```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize prize and weight to prevent dominated items
    normalized_prize = prize / np.max(prize)
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate density
    density = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Calculate sparsity for each dimension
    sparsity = np.sum(normalized_weight, axis=1) / np.max(normalized_weight, axis=1)
    
    # Calculate diversity factor
    diversity_factor = density / np.mean(density)
    
    # Combine density and sparsity for heuristic values
    heuristic_values = density * (1 - sparsity)
    
    # Introduce a balance heuristic considering the ratio of prize to maximum weight
    balance_heuristic = normalized_prize / np.max(normalized_weight, axis=1)
    
    # Combine the heuristics with a weighted sum, favoring density and diversity
    combined_heuristic = 0.6 * heuristic_values + 0.2 * diversity_factor + 0.2 * balance_heuristic
    
    # Normalize the combined heuristic to the range [0, 1]
    combined_heuristic = combined_heuristic / np.max(combined_heuristic)
    
    # Prune low-quality heuristics to avoid underperforming items
    low_quality_threshold = np.percentile(combined_heuristic, 5)
    combined_heuristic[combined_heuristic < low_quality_threshold] = 0
    
    # Ensure the sum of heuristics is one
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    # Adjust heuristics for items with negligible weights to maintain diversity
    negligible_weight_threshold = np.sum(normalized_weight, axis=1) < 1e-8
    combined_heuristic[negligible_weight_threshold] = 1e-8
    
    return combined_heuristic
```
