```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Identify dominated items (those with lower prize and higher weight)
    dominated_indices = np.where((density < np.min(density)) & (np.sum(weight, axis=1) > np.mean(np.sum(weight, axis=1))))[0]
    density[dominated_indices] = 0
    
    # Introduce randomness to promote diversity
    np.random.shuffle(density)
    
    # Calculate a simple heuristic based on the sum of weights
    weight_heuristic = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by combining density and weight heuristic
    heuristic_value = density + weight_heuristic
    
    # Normalize the heuristic by the maximum value to ensure non-negative values
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Prune dominated items by setting their heuristics to zero
    normalized_heuristic[density < 1e-8] = 0
    
    return normalized_heuristic
```
