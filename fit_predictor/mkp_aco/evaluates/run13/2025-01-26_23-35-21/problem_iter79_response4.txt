```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density and sparsity
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a diversity factor based on the variance in density
    variance_density = np.var(density)
    diversity_factor = variance_density
    
    # Introduce a risk factor based on the standard deviation in density
    std_density = np.std(density)
    risk_factor = std_density
    
    # Create a heuristic that balances density, sparsity, diversity, and risk
    heuristic = density * (1 - sparsity) + diversity_factor - risk_factor
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum, with a preference for diversity and risk reduction
    combined_heuristic = 0.7 * normalized_heuristic + 0.3 * balance_heuristic
    
    # Prune dominated items by setting their heuristic values to zero
    dominated_indices = np.argsort(combined_heuristic)[::-1]
    for i in range(len(dominated_indices) - 1):
        if combined_heuristic[dominated_indices[i]] > combined_heuristic[dominated_indices[i + 1]]:
            combined_heuristic[dominated_indices[i + 1]] = 0
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
