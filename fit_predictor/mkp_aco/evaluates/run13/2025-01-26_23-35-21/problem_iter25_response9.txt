```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Introduce a penalty for items that are too dense or too sparse
    penalty = np.where(density > 1.5, 1.2, 1.0) * np.where(sparsity > 0.5, 1.2, 1.0)
    
    # Adjust the heuristic by applying the penalty
    adjusted_heuristic = heuristic * penalty
    
    # Set zero weights to a small value to maintain diversity
    adjusted_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = adjusted_heuristic / (np.max(adjusted_heuristic) + 1e-8)
    
    return normalized_heuristic
```
