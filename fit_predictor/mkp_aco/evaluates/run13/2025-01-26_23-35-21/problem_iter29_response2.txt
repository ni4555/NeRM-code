```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized value per unit weight
    value_per_weight = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate a dominance metric
    dominance_metric = np.max(value_per_weight) / value_per_weight
    
    # Introduce randomness to avoid dominance
    random_factor = np.random.rand(len(value_per_weight)) * 0.1
    
    # Calculate the heuristic value considering the balance of value and sparsity
    heuristic_value = value_per_weight * (1 - sparsity) - dominance_metric + random_factor
    
    # Normalize the heuristic values to maintain a range between 0 and 1
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Apply a penalty to items that are too sparse or have high dominance
    penalty_factor = np.where(sparsity > 0.5, 1 - sparsity, 1)
    penalty_factor = np.where(dominance_metric > 1.5, 1 - dominance_metric, penalty_factor)
    
    # Adjust the heuristics based on the penalty factor
    adjusted_heuristic = normalized_heuristic * penalty_factor
    
    # Set very low values to zero to ensure diversity
    adjusted_heuristic[adjusted_heuristic < 1e-8] = 0
    
    return adjusted_heuristic
```
