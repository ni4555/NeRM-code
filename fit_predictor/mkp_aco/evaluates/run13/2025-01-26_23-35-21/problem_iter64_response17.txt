```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the variance of density
    density_variance = np.var(density)
    diversity_factor = density / (np.mean(density) + density_variance)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.6 * normalized_heuristic + 0.2 * balance_heuristic + 0.2 * density_variance
    
    # Regularize by ensuring that no item has a heuristic of zero to maintain diversity
    combined_heuristic[combined_heuristic < 1e-8] = 1e-8
    
    # Incorporate robustness by considering the standard deviation of the heuristic
    heuristic_std = np.std(combined_heuristic)
    robustness_factor = 1 / (heuristic_std + 1e-8)
    
    # Adjust the heuristic values to account for robustness
    combined_heuristic *= robustness_factor
    
    return combined_heuristic
```
