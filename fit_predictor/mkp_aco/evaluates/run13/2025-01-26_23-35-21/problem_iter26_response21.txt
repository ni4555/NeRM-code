```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the standard deviation of the density
    diversity_factor = np.std(density)
    
    # Adjust the heuristic by the diversity factor
    adjusted_heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum adjusted heuristic value
    max_adjusted_heuristic = np.max(adjusted_heuristic)
    normalized_heuristic = adjusted_heuristic / (max_adjusted_heuristic + 1e-8)
    
    # Encourage diversity by reducing the heuristic for items with similar density
    diversity_penalty = np.exp(-np.sum(weight, axis=1) / (prize + 1e-8))
    final_heuristic = normalized_heuristic * diversity_penalty
    
    # Set zero weights to a small value to maintain diversity
    final_heuristic[weight_sum < 1e-8] = 1e-8
    
    return final_heuristic
```
