```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize and weight to avoid dominated solutions
    normalized_prize = prize / np.sum(prize)
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate the normalized density
    density = normalized_prize / (np.sum(normalized_weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(normalized_weight, axis=1) / (np.max(normalized_weight, axis=1) + 1e-8)
    
    # Introduce randomness to encourage exploration
    randomness = np.random.rand(len(prize))
    
    # Calculate the heuristic considering density, sparsity, and randomness
    heuristic = density * (1 - sparsity) + randomness
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Combine the diversity factor with the heuristic
    combined_heuristic = heuristic * diversity_factor
    
    # Prune dominated solutions by setting lower heuristics to zero
    for i in range(len(combined_heuristic)):
        for j in range(i + 1, len(combined_heuristic)):
            if combined_heuristic[i] < combined_heuristic[j]:
                combined_heuristic[i] = 0
    
    return combined_heuristic
```
