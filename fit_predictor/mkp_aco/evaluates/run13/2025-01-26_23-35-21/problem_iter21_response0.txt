```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Initialize a random seed for diversity
    np.random.seed(42)
    
    # Generate a random diversity factor for each item
    diversity_factor = np.random.rand(len(prize))
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate additional metrics
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic combining density and sparsity
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a balance metric
    balance_metric = (np.mean(density) - sparsity) / (np.mean(density) + 1e-8)
    
    # Calculate a heuristic that emphasizes high density and low sparsity
    high_density_low_sparsity_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Create a final heuristic by combining the metrics with weighted factors
    combined_heuristic = 0.5 * heuristic_value + 0.3 * balance_metric + 0.2 * high_density_low_sparsity_heuristic
    
    # Introduce randomness to enhance diversity
    combined_heuristic += diversity_factor * (np.random.rand(len(prize)) - 0.5)
    
    # Ensure non-negative heuristics by adding 1e-8
    combined_heuristic += 1e-8
    
    return combined_heuristic
```
