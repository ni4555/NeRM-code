```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Normalize the utility to have a mean of 1
    utility_normalized = utility / np.mean(utility)
    # Calculate diversity by using the standard deviation of the utility
    diversity = np.std(utility)
    # Calculate sparsity by the fraction of zero weights
    sparsity = 1 - np.mean(weight, axis=1)
    # Create a heuristic score by combining the normalized utility, diversity, and sparsity
    # Weigh each metric according to the reflection
    heuristic_score = utility_normalized * 0.6 + diversity * 0.3 - sparsity * 0.1
    # Normalize the heuristic score to ensure all values are between 0 and 1
    max_heuristic = np.max(heuristic_score)
    min_heuristic = np.min(heuristic_score)
    heuristics = (heuristic_score - min_heuristic) / (max_heuristic - min_heuristic)
    # Introduce a penalty for items that are too dense (high sparsity)
    penalty = 1 - sparsity
    heuristics[sparsity > 0.5] *= penalty
    # Set zero weights to a small value to maintain diversity
    heuristics[weight.sum(axis=1) < 1e-8] = 1e-8
    return heuristics
```
