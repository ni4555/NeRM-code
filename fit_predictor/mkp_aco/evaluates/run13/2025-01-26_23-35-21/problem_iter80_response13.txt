```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Prune dominated items using percentile pruning
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Normalize the heuristic values to sum to 1
    density /= np.sum(density)
    sparsity /= np.sum(sparsity)
    value_to_weight_ratio /= np.sum(value_to_weight_ratio)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Balance the metrics using a weighted sum approach
    balance_weights = np.array([0.4, 0.3, 0.2, 0.1])
    heuristic = (balance_weights[0] * density +
                 balance_weights[1] * (1 - sparsity) +
                 balance_weights[2] * value_to_weight_ratio +
                 balance_weights[3] * random_factor)

    # Refine heuristics with a diversity factor
    diversity_factor = 0.05 * (1 - np.mean(density)) / (np.max(1 - np.mean(density)) + 1e-8)
    heuristic *= (1 + diversity_factor)

    # Ensure diversity by adding a small heuristic value if all items are dominated
    if np.all(density == 0):
        heuristic = np.ones(n) * 1e-8

    return heuristic
```
