```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate normalized utility based on prize to weight ratio
    utility = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Add randomness to encourage exploration of diverse solutions
    random_factor = np.random.rand(len(utility))
    
    # Introduce a diversity heuristic that promotes variety in the solution
    diversity_heuristic = np.max(weight, axis=1) / np.sum(weight, axis=1)
    
    # Combine utility with randomness and diversity for heuristic
    heuristic = utility + random_factor + diversity_heuristic
    
    # Normalize the heuristic to ensure that the sum of heuristics is comparable
    normalized_heuristic = heuristic / (np.sum(heuristic) + 1e-8)
    
    # Introduce a dominance pruning step to remove dominated items
    dominance_filter = np.ones(len(utility), dtype=bool)
    for i in range(len(utility)):
        for j in range(i + 1, len(utility)):
            if np.all(weight[i] < weight[j]) and np.all(prize[i] <= prize[j]):
                dominance_filter[i] = False
    
    # Apply dominance pruning to the heuristic values
    pruned_heuristic = np.where(dominance_filter, normalized_heuristic, 0)
    
    return pruned_heuristic
```
