```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize to range between 0 and 1
    normalized_prize = prize / np.max(prize)
    
    # Calculate the normalized sum of weights for each item
    normalized_weight_sum = np.sum(weight, axis=1) / np.sum(weight, axis=0)
    
    # Calculate the normalized minimum weight for each item
    min_weight = np.min(weight, axis=1)
    normalized_min_weight = min_weight / np.max(min_weight)
    
    # Calculate the normalized variance of weights for each item
    weight_variance = np.var(weight, axis=1)
    normalized_weight_variance = weight_variance / np.sum(weight_variance)
    
    # Integrate diversity by considering the minimum weight
    diversity_factor = 1 - normalized_min_weight
    
    # Integrate item importance by considering normalized prize
    importance_factor = normalized_prize
    
    # Integrate balance by considering normalized variance of weights
    balance_factor = 1 / normalized_weight_variance
    
    # Combine all factors into a heuristic value
    heuristic_value = importance_factor * 0.5 + diversity_factor * 0.3 + balance_factor * 0.2
    
    # Normalize the heuristic values to ensure they sum to 1
    normalized_heuristic = heuristic_value / np.sum(heuristic_value)
    
    return normalized_heuristic
```
