```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity for each dimension
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce dimension-specific metrics for diversity
    std_density = np.std(density, axis=1)
    diversity_density = density / (std_density + 1e-8)
    
    # Introduce randomness to avoid local optima
    randomness_factor = np.random.rand(weight.shape[0])
    
    # Create a final heuristic by combining factors
    heuristic = density * (1 - sparsity) - weight_sum + diversity_density * randomness_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce outlier penalties for density and sparsity
    density_penalty = np.where((density < np.percentile(density, 5)) | 
                               (density > np.percentile(density, 95)), 
                               -1e-8, 0)
    sparsity_penalty = np.where((sparsity < np.percentile(sparsity, 5)) | 
                                (sparsity > np.percentile(sparsity, 95)), 
                                -1e-8, 0)
    
    # Adjust heuristics for zero weight items to encourage diversity
    zero_weight_penalty = np.where(np.sum(weight, axis=1) == 0, -1e-8, 0)
    
    # Combine penalties and set a floor value for the heuristics
    combined_heuristic = normalized_heuristic + density_penalty + sparsity_penalty + zero_weight_penalty
    
    # Set a floor value for the heuristics to maintain a baseline
    combined_heuristic = np.maximum(combined_heuristic, 1e-8)
    
    return combined_heuristic
```
