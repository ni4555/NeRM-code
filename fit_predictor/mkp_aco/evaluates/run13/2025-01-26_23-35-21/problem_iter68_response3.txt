```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Identify dominated items (those with lower prize but equal or greater total weight)
    non_dominated = density > np.mean(density)
    
    # Prune dominated items by setting their density to zero
    density[~non_dominated] = 0
    
    # Normalize the remaining density by the maximum density
    normalized_density = density / (np.max(density) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a diversity factor based on normalized density
    diversity_factor = normalized_density / np.mean(normalized_density + 1e-8)
    
    # Balance density and sparsity
    balance_heuristic = (normalized_density - sparsity) / (normalized_density + sparsity + 1e-8)
    
    # Introduce randomness for exploration
    randomness_factor = np.random.rand(weight.shape[0])
    # Apply randomness only to non-dominated items
    randomness_factor[~non_dominated] = 0
    randomized_heuristic = diversity_factor * randomness_factor
    
    # Combine the different components
    final_heuristic = 0.6 * balance_heuristic + 0.4 * randomized_heuristic
    
    return final_heuristic
```
