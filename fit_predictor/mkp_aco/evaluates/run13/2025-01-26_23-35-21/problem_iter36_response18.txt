```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape
    heuristic_matrix = np.zeros((n,))

    # Calculate normalized density for each item
    normalized_density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate sum of weights for each item
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate diversity factor based on average sparsity
    average_sparsity = np.mean(sparsity)
    diversity_factor = 1 / (sparsity / (average_sparsity + 1e-8))
    
    # Calculate balance between high density and low sparsity
    balance_factor = (normalized_density - sparsity) / (normalized_density + sparsity + 1e-8)
    
    # Create a heuristic value by combining metrics
    heuristic_value = (normalized_density * (1 - sparsity) - weight_sum) * diversity_factor * balance_factor
    
    # Normalize the heuristic to maintain a bounded range
    heuristic_matrix = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Adjust items with zero or negligible weight to have a small heuristic to maintain diversity
    heuristic_matrix[weight_sum < 1e-8] = 1e-8
    
    return heuristic_matrix
```
