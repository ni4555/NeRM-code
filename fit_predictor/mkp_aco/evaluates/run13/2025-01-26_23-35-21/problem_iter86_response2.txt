```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the density across all dimensions
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Normalize the sparsity across all dimensions
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value-to-weight ratio across all dimensions
    value_to_weight_ratio = prize / np.sqrt(np.sum(weight**2, axis=1)) + 1e-8

    # Introduce randomness for diversity
    random_factor = np.random.rand(n) + 1e-8

    # Define balance factors for different aspects of the heuristic
    balance_factor_density = 0.5 * density
    balance_factor_value_to_weight_ratio = 0.3 * value_to_weight_ratio
    balance_factor_sparsity = 0.2 * (1 - sparsity)
    balance_factor_random = 0.1 * random_factor

    # Combine balance factors
    heuristic = balance_factor_density + balance_factor_value_to_weight_ratio + balance_factor_sparsity + balance_factor_random

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    # Apply a sparsity penalty to encourage diversity
    sparsity_penalty = 0.1 * (1 - np.mean(density))
    refined_heuristic = normalized_heuristic * (1 - sparsity_penalty)

    # Ensure that the heuristic values are non-negative
    refined_heuristic = np.maximum(refined_heuristic, 0)

    # If all items have zero density, set a minimum heuristic value to avoid dominance
    if np.all(density == 0):
        refined_heuristic = np.ones(n) * 1e-8

    # Set zero weights to a small value to maintain diversity
    zero_weight_index = weight.sum(axis=1) == 0
    refined_heuristic[zero_weight_index] = 1e-8

    return refined_heuristic
```
