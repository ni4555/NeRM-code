```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items
    dominance_mask = np.any(weight < weight[:, [0]], axis=1)
    density[dominance_mask] = 0
    
    # Introduce randomness for exploration
    random_factor = np.random.rand(len(density))
    
    # Incorporate a balance between exploration and exploitation
    heuristic = density * (1 - random_factor)
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Normalize weights for sparsity measure
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Blend sparsity into the heuristic
    combined_heuristic = normalized_heuristic * (1 - sparsity)
    
    # Prune dominated items by setting their heuristics to zero
    combined_heuristic[density == 0] = 0
    
    return combined_heuristic
```
