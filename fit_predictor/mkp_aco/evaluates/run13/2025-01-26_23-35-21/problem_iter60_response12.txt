```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Prune dominated items by ensuring no item's heuristic value is below a certain threshold
    dominated_mask = density < np.percentile(density, 10)
    density[dominated_mask] = 0

    # Calculate the fraction of non-dominated items
    non_dominated_fraction = np.count_nonzero(density) / n

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics using a weighted sum
    heuristic = (0.4 * density +
                 0.3 * (1 - sparsity) +
                 0.2 * value_to_weight_ratio +
                 0.1 * random_factor)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if non_dominated_fraction == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    # Adjust for balance by considering both density and sparsity
    balance_factor = 0.5 * (density + sparsity) / (np.max(density + sparsity) + 1e-8)

    # Combine balance with the previous heuristics
    final_heuristic = normalized_heuristic * balance_factor

    return final_heuristic
```
