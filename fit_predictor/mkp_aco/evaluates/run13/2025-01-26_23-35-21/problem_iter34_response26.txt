```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = len(prize)
    
    # Initialize the heuristic array with zeros
    heuristic = np.zeros(n)
    
    # Randomly select a diverse set of items to initialize the heuristic values
    num_initial_items = int(0.1 * n)
    initial_indices = np.random.choice(range(n), size=num_initial_items, replace=False)
    heuristic[initial_indices] = 1
    
    # Calculate additional metrics for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a diversity factor based on the initial item selection
    diversity_factor = 1 / (num_initial_items + 1)
    
    # Define weights for each metric
    density_weight = 0.5
    sparsity_weight = 0.3
    weight_sum_weight = 0.2
    
    # Calculate the weighted heuristic for each item
    for i in range(n):
        if weight_sum[i] < 1e-8:
            continue
        weighted_density = density[i] * density_weight
        weighted_sparsity = sparsity[i] * sparsity_weight
        weighted_weight_sum = weight_sum[i] * weight_sum_weight
        heuristic[i] = weighted_density + weighted_sparsity + weighted_weight_sum
    
    # Refine heuristics to balance the diversity and quality
    heuristic *= diversity_factor
    
    # Normalize the heuristic values to ensure the sum is 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
