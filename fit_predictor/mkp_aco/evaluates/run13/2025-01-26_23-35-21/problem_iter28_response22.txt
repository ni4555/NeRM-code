```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the average density to use as a diversity factor
    average_density = np.mean(density)
    
    # Calculate the weighted sum of weights to consider the total weight contribution
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a diversity factor based on the deviation from average density
    diversity_factor = (density - average_density) / (np.std(density) + 1e-8)
    
    # Create a heuristic value that balances density and sparsity
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Adjust the heuristic value by the diversity factor
    adjusted_heuristic = heuristic_value * diversity_factor
    
    # Normalize the adjusted heuristic by the maximum value
    normalized_adjusted_heuristic = adjusted_heuristic / (np.max(adjusted_heuristic) + 1e-8)
    
    # Introduce a balance heuristic that encourages diversity in density and sparsity
    balance_heuristic = (density - sparsity) / (np.abs(density - sparsity) + 1e-8)
    
    # Combine the normalized adjusted heuristic and balance heuristic using a weighted sum
    combined_heuristic = 0.5 * normalized_adjusted_heuristic + 0.5 * balance_heuristic
    
    # Set items with negligible weight to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Normalize the combined heuristic to ensure the sum is 1
    combined_heuristic /= np.sum(combined_heuristic)
    
    return combined_heuristic
```
