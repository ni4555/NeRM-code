```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized density
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the variance of weights for each item
    variance = np.var(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Balance between density, sparsity, and variance with different weight factors
    balance_factor = 0.5 * density + 0.3 * sparsity + 0.2 * variance

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine balance, randomness, and prize-to-weight ratio to create heuristic
    heuristic = balance_factor + 0.1 * random_factor + 0.1 * (normalized_prize / np.sum(weight**2, axis=1) + 1e-8)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.sum(normalized_heuristic) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
