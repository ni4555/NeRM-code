```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items by removing items with lower density than the average
    dominance_threshold = np.mean(density)
    non_dominated_items = density > dominance_threshold
    
    # Adjust the density of dominated items to be smaller than the threshold
    density[non_dominated_items] = dominance_threshold
    
    # Introduce randomness to explore less promising items
    random_factor = np.random.rand(len(density))
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the density
    heuristic = diversity_factor * density
    
    # Introduce a balance factor to combine high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * heuristic + 0.3 * balance_factor
    
    # Prune dominated items by setting their heuristic to zero
    combined_heuristic[~non_dominated_items] = 0
    
    # Introduce an exploration factor based on random noise
    combined_heuristic *= random_factor
    
    # Normalize by the maximum heuristic value to maintain a bounded range
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    return normalized_heuristic
```
