```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Calculate the density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the average density across all items
    average_density = np.mean(density)
    
    # Introduce a diversity factor based on the deviation from the average density
    diversity_factor = (density - average_density) / (average_density + 1e-8)
    
    # Calculate the balance factor between density and sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the factors into a heuristic score
    heuristic_score = 0.5 * density + 0.3 * diversity_factor + 0.2 * balance_factor
    
    # Normalize the heuristic score to ensure it is within a consistent range
    max_heuristic = np.max(heuristic_score)
    normalized_heuristic = heuristic_score / (max_heuristic + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
