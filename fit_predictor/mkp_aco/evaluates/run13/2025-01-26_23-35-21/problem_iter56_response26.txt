```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce randomness for exploration
    randomness = np.random.rand(len(prize))
    
    # Create a dominance matrix to identify dominated items
    dominance_matrix = np.zeros((n, n))
    np.fill_diagonal(dominance_matrix, 1)
    for i in range(n):
        for j in range(i+1, n):
            if np.all(density[i] >= density[j]) and np.all(sparsity[i] >= sparsity[j]):
                dominance_matrix[i, j] = 1
    
    # Prune dominated items by setting their heuristic to zero
    dominated_indices = np.where(np.sum(dominance_matrix, axis=0) == 0)[0]
    density[dominated_indices] = 0
    sparsity[dominated_indices] = 0
    
    # Blend the density and sparsity to create a heuristic value
    heuristic = density - sparsity + randomness
    
    # Prune items with weight sum less than a threshold
    threshold = 1e-8
    weight_sum = np.sum(weight, axis=1)
    heuristic[weight_sum < threshold] = 0
    
    # Normalize the heuristic values to ensure they sum to 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
