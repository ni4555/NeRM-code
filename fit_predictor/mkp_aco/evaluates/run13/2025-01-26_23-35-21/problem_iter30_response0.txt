```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prize to avoid dominance by a single high-value item
    normalized_prize = prize / np.sum(prize)

    # Calculate normalized density considering the dimensionality of the weight
    density = normalized_prize / np.sum(weight, axis=1)

    # Introduce diversity factor based on the variance of the density
    diversity_factor = (np.var(density) + 1e-8) ** 0.5

    # Introduce sparsity metric
    sparsity = 1 - (np.sum(weight, axis=1) / n)

    # Create a balanced heuristic value by blending density, diversity, and sparsity
    heuristic_value = (density * 0.5) + (diversity_factor * 0.3) + (sparsity * 0.2)

    # Introduce penalties for outliers: items with very low density, high sparsity, or high variance in density
    penalty_density = np.where(density < 0.01, 1.5 * (1 - density), 1)
    penalty_sparsity = np.where(sparsity > 0.9, 1.5 * sparsity, 1)
    penalty_diversity = np.where(diversity_factor < 0.5, 1.5 * (1 - diversity_factor), 1)
    penalty = penalty_density * penalty_sparsity * penalty_diversity

    # Apply the penalty to the heuristic
    penalized_heuristic = heuristic_value * penalty

    # Normalize by the maximum penalized heuristic value
    normalized_heuristic = penalized_heuristic / (np.max(penalized_heuristic) + 1e-8)

    # Ensure no negative heuristic values by clamping
    normalized_heuristic = np.clip(normalized_heuristic, 0, 1)

    return normalized_heuristic
```
