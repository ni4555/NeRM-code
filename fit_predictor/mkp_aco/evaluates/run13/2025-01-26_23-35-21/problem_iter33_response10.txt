```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a base heuristic using density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate a diversity metric that penalizes high similarity
    diversity_metric = np.sum(weight, axis=1) ** 2 / (np.sum(weight, axis=1) + 1e-8) ** 2
    
    # Introduce randomness by adding a Gaussian noise scaled by the diversity metric
    noise = np.random.normal(0, 1e-3, size=density.shape)
    random_factor = diversity_metric * noise
    
    # Introduce a penalty for outliers based on the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    outlier_penalty = (1 - sparsity) ** 2
    
    # Create a base heuristic value
    base_heuristic = density + random_factor - outlier_penalty
    
    # Normalize by the maximum heuristic value to avoid dominance
    normalized_heuristic = base_heuristic / (np.max(base_heuristic) + 1e-8)
    
    # Create a sparsity-based heuristic that encourages sparser solutions
    sparsity_heuristic = (1 - sparsity) / (np.max(1 - sparsity) + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * normalized_heuristic + 0.3 * sparsity_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
