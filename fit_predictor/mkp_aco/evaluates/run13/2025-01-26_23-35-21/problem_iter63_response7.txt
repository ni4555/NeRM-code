```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items based on density
    dominance_mask = density > sparsity
    density[density <= sparsity] = 0
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a diversity factor based on the variance of density
    variance_density = np.var(density)
    diversity_factor = variance_density / (np.max(variance_density) + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the adjusted density
    heuristic = density * diversity_factor
    
    # Introduce randomness for exploration
    random_factor = np.random.rand(*heuristic.shape)
    heuristic = heuristic * random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic = normalized_heuristic * (weight_sum > 1e-8)
    
    return combined_heuristic
```
