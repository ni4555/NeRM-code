```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8
    
    # Calculate the total weight of each item
    total_weight = np.sum(weight, axis=1)
    
    # Integrate additional metrics such as the sum of weights and average density
    weight_sum = np.sum(weight, axis=1)
    average_density = np.mean(density)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the heuristic value with the diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Adjust heuristic to favor items with a higher value-to-weight ratio
    heuristic *= value_to_weight_ratio / np.max(value_to_weight_ratio)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * normalized_heuristic + 0.3 * balance_heuristic + 0.2 * value_to_weight_ratio
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[total_weight < 1e-8] = 1e-8
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)
    combined_heuristic *= random_factor
    
    # Normalize heuristics
    combined_heuristic /= np.sum(combined_heuristic)
    
    return combined_heuristic
```
