```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a heuristic value based on density and sparsity
    heuristic_value = density / (1 + sparsity)
    
    # Adjust the heuristic for items with zero weight to encourage diversity
    zero_weight_mask = weight_sum < 1e-8
    heuristic_value[zero_weight_mask] = 1e-8
    
    # Normalize the heuristic values to ensure they are comparable
    max_heuristic = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic + 1e-8)
    
    # Introduce a random factor to encourage diversity
    random_factor = np.random.rand(n) / (np.max(np.random.rand(n)) + 1e-8)
    
    # Final heuristic combines the normalized heuristic with the random factor
    final_heuristic = normalized_heuristic + 0.2 * random_factor
    
    return final_heuristic
```
