```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Randomness factor
    random_factor = np.random.rand(weight.shape[0])
    
    # Density normalization
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Sparsity normalization
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Dominance pruning: remove dominated items
    dominated_items = np.any(prize < prize[density.argsort()], axis=1)
    density[dominated_items] = 0
    
    # Normalize density to ensure it is non-negative
    density = np.maximum(density, 0)
    
    # Introduce additional randomness
    heuristic = density * (1 - sparsity) + random_factor
    
    # Integrate balance between high density and low sparsity
    balance = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Prune items with very low balance
    low_balance_items = balance < 0.1
    balance[low_balance_items] = 0
    
    # Combine heuristics
    combined_heuristic = heuristic * balance
    
    # Normalize to get a proper heuristic scale
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic)
    
    return combined_heuristic
```
