```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize to account for the dimensionality
    normalized_prize = prize / np.sqrt(n)

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Introduce a diversity factor based on the standard deviation of value-to-weight ratio
    diversity_factor = value_to_weight_ratio / np.std(value_to_weight_ratio)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)

    # Weigh the normalized prize, value-to-weight ratio, diversity factor, and randomness
    heuristic = (0.4 * normalized_prize +
                 0.3 * value_to_weight_ratio +
                 0.2 * diversity_factor +
                 0.1 * random_factor)

    # Normalize the heuristic values to a range [0, 1]
    normalized_heuristic = heuristic / np.max(heuristic + 1e-8)

    return normalized_heuristic
```
