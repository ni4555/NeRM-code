```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)

    # Prune dominated items by removing those with density <= 0
    dominated_mask = density <= 0
    density[dominated_mask] = 0

    # Introduce randomness for heuristic diversity
    random_factor = np.random.rand(n)

    # Use a combination of density, randomness, and a diversity metric to form the heuristic
    diversity_metric = np.sum(weight, axis=1) / (np.sum(weight, axis=1) ** 2 + 1e-8)
    heuristic = (density + random_factor) * (1 - np.sum(weight, axis=1)) * diversity_metric

    # Normalize the heuristics to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    return normalized_heuristic
```
