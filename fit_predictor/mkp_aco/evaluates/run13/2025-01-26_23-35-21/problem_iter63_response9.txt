```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density and sparsity
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sum of weights for the balancing metric
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Prune dominated items based on their density and sparsity
    for i in range(len(density)):
        for j in range(i + 1, len(density)):
            if density[i] <= density[j] and sparsity[i] <= sparsity[j]:
                density[i] = 0
                break
    
    # Introduce controlled randomness to increase diversity
    np.random.seed(42)  # Setting a random seed for reproducibility
    random_factor = np.random.rand(len(density))
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Combine heuristics with randomness
    combined_heuristic = normalized_heuristic * (1 - random_factor) + random_factor
    
    # Maintain diversity by setting certain values to zero
    combined_heuristic[weight_sum < 1e-8] = 0
    
    return combined_heuristic
```
