```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a diversity factor based on the standard deviation of density
    diversity_factor = np.std(density)
    
    # Create a final heuristic by combining the density, sparsity, and diversity
    heuristic = density * (1 - sparsity) - weight_sum + diversity_factor
    
    # Introduce a dominance pruning step: items that are dominated by others are set to zero
    dominated_mask = np.zeros_like(heuristic, dtype=bool)
    for i in range(n):
        for j in range(n):
            if i != j and density[i] < density[j] and (1 - sparsity[i]) < (1 - sparsity[j]):
                dominated_mask[i] = True
                break
    heuristic[dominated_mask] = 0
    
    # Normalize by the maximum heuristic value, avoiding division by zero
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    else:
        heuristic.fill(1 / n)
    
    return heuristic
```
