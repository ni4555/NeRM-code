```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize values by their mean and standard deviation
    prize_mean = np.mean(prize)
    prize_std = np.std(prize)
    normalized_prize = (prize - prize_mean) / prize_std
    
    # Calculate the variance of each item's weights, normalized by the sum of all weights
    normalized_variance = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1e-10) * np.var(weight, axis=1)
    
    # Calculate the sparsity factor for each item, which is the number of dimensions with zero weight
    sparsity = np.sum(weight == 0, axis=1)
    
    # Combine the normalized prize, normalized variance, and sparsity to form the heuristic
    heuristics = normalized_prize * (1 - normalized_variance) * (1 + 1e-4 / (sparsity + 1e-10))
    
    # Normalize heuristics to a range between 0 and 1
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    
    return heuristics
```
