```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize by the maximum prize value to maintain balance
    normalized_prize = prize / np.max(prize)
    
    # Normalize the weights by the maximum weight value in each dimension
    normalized_weight = np.apply_along_axis(lambda x: x / np.max(x), axis=0, arr=weight)
    
    # Calculate the utility of each item as a combination of normalized prize and weight
    utility = normalized_prize * normalized_weight
    
    # Introduce diversity by penalizing items that have high sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    penalty = 1 / (1 + sparsity)
    
    # Combine utility with penalty to get a more balanced heuristic
    heuristic_value = utility * penalty
    
    # Apply a threshold to encourage diversity and manage sparsity
    threshold = 0.5
    heuristic_value[heuristic_value < threshold] = 0
    
    # Normalize the heuristic values to ensure they are comparable
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    return normalized_heuristic
```
