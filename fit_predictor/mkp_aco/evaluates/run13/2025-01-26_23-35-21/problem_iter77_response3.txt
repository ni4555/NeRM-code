```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize the heuristics array with zeros
    heuristics = np.zeros_like(prize)
    
    # Define a threshold for density to prune dominated items
    density_threshold = np.max(prize) / np.sum(weight, axis=1)
    
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items by setting their heuristic to zero
    dominated_items = density < density_threshold
    heuristics[dominated_items] = 0
    
    # Introduce randomness to encourage exploration
    random_factor = np.random.rand(len(prize))
    
    # Balance the randomness with the heuristic values
    balanced_heuristic = (density + random_factor) / (1 + density + random_factor)
    
    # Normalize the heuristics to ensure all values are positive
    heuristics = balanced_heuristic / (np.max(balanced_heuristic) + 1e-8)
    
    return heuristics
```
