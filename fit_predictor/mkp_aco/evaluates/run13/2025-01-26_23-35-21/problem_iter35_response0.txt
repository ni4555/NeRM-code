```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Randomly shuffle items to encourage randomness
    indices = np.arange(prize.shape[0])
    np.random.shuffle(indices)
    shuffled_prize = prize[indices]
    shuffled_weight = weight[indices]
    
    # Calculate the density of each item
    density = shuffled_prize / (np.sum(shuffled_weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(shuffled_weight, axis=1) / (np.max(shuffled_weight, axis=1) + 1e-8)
    
    # Normalize the density and sparsity
    max_density = np.max(density)
    min_sparsity = np.min(sparsity)
    normalized_density = density / max_density
    normalized_sparsity = sparsity / (min_sparsity + 1e-8)
    
    # Combine normalized density and sparsity with a balance factor
    balance_factor = 0.5
    combined_metric = normalized_density * (1 - balance_factor * normalized_sparsity)
    
    # Introduce an entropy-based heuristic
    entropy = -np.sum((combined_metric / np.sum(combined_metric)) * np.log(combined_metric / np.sum(combined_metric)))
    
    # Introduce a diversity factor
    diversity_factor = np.random.rand(combined_metric.shape[0])
    
    # Combine all factors to create the final heuristic
    final_heuristic = combined_metric * entropy * diversity_factor
    
    # Normalize the heuristic to avoid dominance
    max_heuristic = np.max(final_heuristic)
    final_heuristic /= (max_heuristic + 1e-8)
    
    # Ensure that items with zero weight are considered less promising
    final_heuristic[shuffled_weight.sum(axis=1) < 1e-8] = 1e-8
    
    return final_heuristic[indices]  # Return the heuristics in the original order
```
