```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the standard deviation of the density
    diversity_factor = np.std(density)
    
    # Introduce a sparsity diversity factor to encourage diverse solutions
    sparsity_diversity = 1 / (sparsity + 1e-8)
    
    # Combine diversity factors with the heuristic value
    heuristic = heuristic_value * diversity_factor * sparsity_diversity
    
    # Normalize by the maximum heuristic value to scale the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_penalty = 1e-8
    normalized_heuristic[weight_sum < zero_weight_penalty] = zero_weight_penalty
    
    return normalized_heuristic
```
