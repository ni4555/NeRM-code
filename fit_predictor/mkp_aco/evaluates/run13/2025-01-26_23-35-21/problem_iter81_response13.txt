```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a list to store heuristics values
    heuristics = np.zeros_like(prize)
    
    # Calculate normalized prize density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized weight sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items
    total_prize = np.sum(prize)
    for i in range(len(prize)):
        if prize[i] == 0 or (sparsity[i] == 0 and density[i] == 0):
            heuristics[i] = 0
            continue
        dominated = np.any(prize < prize[i]) and np.all(sparsity <= sparsity[i])
        if dominated:
            heuristics[i] = 0
            continue
    
    # Introduce randomness to balance exploration-exploitation
    np.random.shuffle(heuristics)
    
    # Normalize heuristics values
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
