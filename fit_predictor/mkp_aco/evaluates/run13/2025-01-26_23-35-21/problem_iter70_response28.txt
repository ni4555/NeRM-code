```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize for each item
    normalized_prize = prize / np.sum(prize) + 1e-8
    # Normalize the weight for each item
    normalized_weight = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Combine normalized prize and weight using a weighted sum
    density = 0.6 * normalized_prize + 0.4 * (1 - normalized_weight)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Prune dominated items by setting their heuristic to zero
    for i in range(n):
        dominated_mask = (normalized_prize > normalized_prize[i])
        dominated_count = np.sum(dominated_mask)
        if dominated_count > n * 0.9:
            density[i] = 0

    # Combine the density and randomness using a weighted sum
    heuristic = 0.8 * density + 0.2 * random_factor

    # Normalize the heuristic values
    heuristic /= np.max(heuristic)

    return heuristic
```
