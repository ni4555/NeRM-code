```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the sparsity of the item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate a metric that balances the importance of high density and low sparsity
    balance_metric = (density + sparsity) / 2
    
    # Create a diversity factor based on the variance in the density
    diversity_factor = density / np.var(density)
    
    # Normalize the heuristics to maintain diversity
    normalized_heuristics = density * (1 - sparsity) + diversity_factor * balance_metric
    
    # Introduce randomness for diversity
    random_factor = np.random.rand(len(density))
    normalized_heuristics = normalized_heuristics * random_factor
    
    # Normalize by the maximum heuristic value to ensure all values are within a feasible range
    normalized_heuristics = normalized_heuristics / np.max(normalized_heuristics)
    
    return normalized_heuristics
```
