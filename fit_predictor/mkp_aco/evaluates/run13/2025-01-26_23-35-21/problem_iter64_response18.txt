```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize value per unit weight
    prize_per_weight = prize / np.sum(weight, axis=1)

    # Calculate diversity based on average prize per unit weight
    average_prize_per_weight = np.mean(prize_per_weight)
    diversity = prize_per_weight / (average_prize_per_weight + 1e-8)

    # Calculate sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Calculate balance heuristic using prize per weight and sparsity
    balance_heuristic = (prize_per_weight - sparsity) / (prize_per_weight + sparsity + 1e-8)

    # Calculate adaptability factors based on the sum of weights of the item to the total weight capacity
    adaptability_factor = np.sum(weight, axis=1) / np.sum(weight)

    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)

    # Combine all factors to create the heuristic
    # Assigning weights to each factor based on their problem-solving contribution
    heuristic = 0.5 * diversity + 0.3 * balance_heuristic + 0.2 * adaptability_factor + 0.0 * random_factor

    # Normalize the heuristic to ensure all values are between 0 and 1
    heuristic /= np.sum(heuristic)

    return heuristic
```
