```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce a balance between density and sparsity
    balance = density - sparsity
    
    # Include a diversity factor
    average_density = np.mean(density)
    diversity_factor = (density / average_density)
    
    # Introduce a sparsity adjustment to encourage diversity
    sparsity_adjustment = (1 - sparsity)
    
    # Create a heuristic based on the balance, diversity, and sparsity adjustment
    heuristic = balance * diversity_factor * sparsity_adjustment - weight_sum
    
    # Normalize by the maximum heuristic value to ensure all values are non-negative
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
