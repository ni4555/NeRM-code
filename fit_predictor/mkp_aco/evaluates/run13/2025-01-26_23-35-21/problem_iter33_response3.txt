```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity and normalize
    sparsity = np.sum(weight, axis=1)
    normalized_sparsity = sparsity / (np.max(sparsity) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Blend metrics to create a base heuristic
    heuristic_value = density * (1 - normalized_sparsity) - weight_sum
    
    # Encourage sparsity and randomness
    heuristic_value[sparsity < 1e-8] *= 0.5
    
    # Introduce diversity based on the density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value to avoid dominance
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a balance heuristic that penalizes high density and low sparsity
    balance_heuristic = (density - normalized_sparsity) / (density + normalized_sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * normalized_heuristic + 0.3 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
