```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Normalize prize and weight for consistency
    normalized_prize = prize / np.sum(prize)
    normalized_weight = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate heuristic based on the ratio of prize to average weight
    heuristic = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Penalize items with high average weight to avoid overfitting to certain items
    weight_penalty = np.sum(normalized_weight, axis=1)
    penalized_heuristic = heuristic - 0.1 * weight_penalty
    
    # Encourage diversity by adding a penalty for high similarity
    similarity_penalty = np.dot(penalized_heuristic[:, np.newaxis], penalized_heuristic)
    diversity_factor = 1 - 0.1 * similarity_penalty / (np.max(similarity_penalty) + 1e-8)
    
    # Combine the heuristics with diversity factor
    final_heuristic = penalized_heuristic * diversity_factor
    
    # Normalize the heuristics
    normalized_final_heuristic = final_heuristic / (np.max(final_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_final_heuristic[np.sum(normalized_weight, axis=1) < 1e-8] = 1e-8
    
    return normalized_final_heuristic
```
