```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristic array with a high value for zero weights to encourage diversity
    zero_weight_heuristic = np.where(weight.sum(axis=1) == 0, 1e-8, 0)
    
    # Normalize prize and weight for each item
    normalized_prize = prize / np.sum(prize)
    normalized_weight = weight / np.sum(weight, axis=1)[:, None]
    
    # Calculate heuristic values based on prize and normalized weight
    heuristic = normalized_prize * (1 - normalized_weight)
    
    # Introduce randomness to encourage exploration
    np.random.seed(42)  # Set random seed for reproducibility
    random_factor = np.random.rand(*weight.shape) / np.max(np.random.rand(*weight.shape))
    
    # Adjust heuristics for dominated items
    sorted_indices = np.argsort(-prize)
    non_dominated_heuristics = np.zeros_like(prize)
    dominated = np.zeros_like(prize, dtype=bool)
    for i in range(n):
        if dominated[i]:
            continue
        max_val = np.max(heuristic[sorted_indices[:i]])
        for j in range(i+1, n):
            if heuristic[sorted_indices[j]] < max_val:
                dominated[sorted_indices[j]] = True
            else:
                max_val = heuristic[sorted_indices[j]]
        non_dominated_heuristics[sorted_indices[i]] = heuristic[sorted_indices[i]]
    
    # Blend the adjusted heuristics with the random factor
    combined_heuristic = (1 - np.sum(non_dominated_heuristics)) * non_dominated_heuristics + \
                         np.sum(non_dominated_heuristics) * (random_factor / np.sum(random_factor))
    
    # Ensure the sum of heuristics is at least 1 by adding a small constant
    combined_heuristic = combined_heuristic / np.sum(combined_heuristic) + 1e-8
    
    # Combine with the initial heuristic for diversity
    final_heuristic = heuristic + 0.2 * (combined_heuristic - heuristic)
    
    # Apply zero_weight_heuristic to zero weight items
    final_heuristic += zero_weight_heuristic
    
    return final_heuristic
```
