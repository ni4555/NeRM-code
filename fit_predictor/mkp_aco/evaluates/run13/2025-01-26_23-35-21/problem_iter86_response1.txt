```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize prize based on the maximum prize
    normalized_prize = prize / np.max(prize)

    # Calculate the normalized weight sum for each item
    normalized_weight_sum = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1)

    # Calculate the diversity metric based on the standard deviation of weights in each dimension
    diversity_metrics = np.std(weight, axis=1)

    # Identify dominated items using a percentile threshold for normalized prize
    dominated_mask = normalized_prize < np.percentile(normalized_prize, 95)
    normalized_prize[dominated_mask] = 0

    # Combine metrics to form the heuristic
    heuristic = (0.4 * normalized_prize +
                 0.3 * normalized_weight_sum +
                 0.2 * value_to_weight_ratio +
                 0.1 * diversity_metrics)

    # Introduce randomness to encourage exploration
    random_factor = np.random.rand(n)
    heuristic *= (1 - random_factor)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.sum(normalized_heuristic) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
