```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prize values
    normalized_prize = prize / np.sum(prize) + 1e-8

    # Calculate density (value per unit weight)
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate sparsity (total weight per item)
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Introduce a balance between density and sparsity
    balance = (density + sparsity) / 2

    # Identify dominated items based on normalized prize and prune them
    dominated_mask = normalized_prize < np.percentile(normalized_prize, 90)
    balance[dominated_mask] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine balance, density, sparsity, and randomness to form the heuristic
    heuristic = balance * 0.6 + density * 0.3 + sparsity * 0.1 + random_factor * 0.1

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Introduce diversity to the heuristic to avoid local optima
    diversity_factor = np.exp(-np.mean(np.abs(np.diff(np.argsort(-normalized_heuristic))))) / np.max(normalized_heuristic)

    # Ensure that all heuristics are non-negative
    normalized_heuristic = np.clip(normalized_heuristic, 0, None)

    # Adjust heuristics to prevent premature convergence and ensure diversity
    normalized_heuristic *= diversity_factor

    return normalized_heuristic
```
