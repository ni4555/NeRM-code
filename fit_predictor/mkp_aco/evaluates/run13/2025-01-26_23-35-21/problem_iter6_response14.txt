```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate the sparsity as the inverse of the sum of weights
    sparsity = 1 / np.sum(weight, axis=1)
    # Calculate the diversity using the variance of the weights
    diversity = np.var(weight, axis=1)
    # Combine the metrics with carefully chosen weights to balance diversity and sparsity
    combined_heuristic = 0.4 * utility + 0.3 * sparsity + 0.3 * diversity
    # Normalize the combined heuristic to sum to 1
    normalized_combined = combined_heuristic / np.sum(combined_heuristic)
    # Apply a smoothing step to the heuristics to avoid too sharp changes
    smoothed_heuristics = np.clip(normalized_combined, a_min=0, a_max=1)
    return smoothed_heuristics
```
