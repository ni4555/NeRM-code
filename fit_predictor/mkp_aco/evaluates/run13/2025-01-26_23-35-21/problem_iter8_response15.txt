```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize based on the maximum prize value to ensure fairness
    normalized_prize = prize / np.max(prize)
    # Calculate utility based on normalized prize per unit weight
    utility = normalized_prize / np.sum(weight, axis=1)
    # Calculate the normalized variance to encourage diversity and prevent concentration
    normalized_variance = np.var(weight, axis=1) / np.sum(weight, axis=1)
    # Combine utility and variance to form a heuristic, weighted by utility
    heuristic = utility * (1 + 0.1 * normalized_variance)
    # Apply a sigmoid function to smooth the scores and ensure a non-negative range
    heuristic = 1 / (1 + np.exp(-heuristic))
    # Normalize the heuristic to a range between 0 and 1
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    heuristics = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    # Apply a sparsity threshold to ensure some level of sparsity in the heuristics
    sparsity_threshold = 0.2
    heuristics[heuristic < sparsity_threshold] = 0
    return heuristics
```
