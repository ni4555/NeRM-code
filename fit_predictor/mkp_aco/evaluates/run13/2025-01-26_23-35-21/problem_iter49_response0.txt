```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Randomness factor
    randomness = np.random.rand(*weight.shape[0])
    
    # Diversity factor
    diversity_factor = prize / np.sum(weight, axis=1)
    
    # Sparsity factor
    sparsity_factor = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Quality factor (density)
    quality_factor = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Pruning dominated items
    dominance = np.sum((prize / (weight + 1e-8)) > quality_factor, axis=1)
    non_dominated = (dominance == 0)
    
    # Apply randomness with some bias towards non-dominated items
    combined_randomness = randomness * non_dominated
    
    # Combine factors
    combined_heuristic = randomness + diversity_factor + sparsity_factor + quality_factor
    
    # Prune dominated items by setting their heuristic to zero
    combined_heuristic[~non_dominated] = 0
    
    # Normalize heuristics
    max_heuristic = np.max(combined_heuristic)
    combined_heuristic = combined_heuristic / (max_heuristic + 1e-8)
    
    # Maintain diversity by setting zero weights to a small value
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
