```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize prize and weight for each item
    normalized_prize = prize / np.max(prize)
    normalized_weight = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))

    # Calculate normalized density
    density = normalized_prize / (normalized_weight + 1e-8)

    # Calculate normalized sparsity
    max_weight_per_dimension = np.max(weight, axis=1) + 1e-8
    sparsity = np.sum(weight, axis=1) / max_weight_per_dimension

    # Introduce randomness to avoid local optima
    randomness = np.random.rand(n)

    # Combine density, sparsity, and randomness
    heuristic = density * 0.7 + sparsity * 0.2 + randomness * 0.1

    # Introduce a diversity factor to avoid dominated solutions
    diversity_factor = np.exp(-np.sum(weight**2, axis=1) / (np.sum(weight, axis=1) + 1e-8))

    # Normalize the diversity factor
    normalized_diversity = diversity_factor / np.max(diversity_factor)

    # Adjust the heuristic with the diversity factor
    heuristic *= normalized_diversity

    # Ensure the sum of heuristics is one
    heuristic /= np.sum(heuristic)

    return heuristic
```
