```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity by considering the average weight per dimension
    sparsity = np.mean(weight, axis=1) / (np.sum(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the variance of the weights
    variance_weight = np.var(weight, axis=1)
    diversity_factor = 1 / (1 + variance_weight)
    
    # Create a final heuristic by combining the heuristic value with the diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the standard deviation of the heuristic values
    standard_deviation = np.std(heuristic)
    normalized_heuristic = heuristic / (standard_deviation + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[np.sum(weight, axis=1) < 1e-8] = 1e-8
    
    return normalized_heuristic
```
