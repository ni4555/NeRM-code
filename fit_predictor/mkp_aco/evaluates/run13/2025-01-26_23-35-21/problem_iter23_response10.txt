```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate normalized density and sparsity
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce penalties for high sparsity and high density
    penalty_sparsity = 1 - sparsity
    penalty_density = 1 - density
    
    # Encourage diversity by avoiding items with extreme density and sparsity
    diversity_factor = (penalty_sparsity + penalty_density) / 2
    
    # Create a heuristic value considering the normalized balance of density and sparsity
    heuristic_value = density * (1 - sparsity) - diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce a small random factor to ensure diversity
    random_factor = np.random.rand(weight.shape[0]) * 0.1
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = normalized_heuristic + random_factor
    
    # Ensure non-negative heuristics
    combined_heuristic = np.clip(combined_heuristic, 0, None)
    
    return combined_heuristic
```
