```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Initialize the heuristic array with zeros
    heuristic = np.zeros_like(prize)
    
    # Randomly select a diverse set of items to initialize the heuristic values
    num_initial_items = int(0.1 * n)
    initial_indices = np.random.choice(range(n), size=num_initial_items, replace=False)
    heuristic[initial_indices] = 1
    
    # Calculate additional metrics for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    weight_sum = np.sum(weight, axis=1)
    
    # Define weights for each metric
    density_weight = 0.5
    sparsity_weight = 0.3
    weight_sum_weight = 0.2
    
    # Update the heuristic values based on the additional metrics
    for i in range(n):
        # Calculate the weighted sum of the metrics
        metric = density_weight * density[i] + sparsity_weight * sparsity[i] + weight_sum_weight * weight_sum[i]
        # Update the heuristic value
        heuristic[i] = metric
    
    # Normalize the heuristic values to ensure the sum is 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
