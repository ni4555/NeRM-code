```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a random seed for reproducibility
    np.random.seed(0)

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items based on a balance between density and sparsity
    dominated_mask = (density < sparsity)
    density[dominated_mask] = 0
    
    # Introduce randomness to encourage exploration
    random_factor = np.random.rand(len(prize))
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Balance between exploitation and exploration
    exploitation_factor = density
    exploration_factor = random_factor
    
    # Create a final heuristic by combining exploitation and exploration
    heuristic = exploitation_factor * 0.7 + exploration_factor * 0.3
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce a dynamic adjustment based on the current density
    if np.mean(density) > 0.5:
        dynamic_factor = 1 / density
    else:
        dynamic_factor = 1
    
    # Apply the dynamic adjustment to the heuristic
    dynamic_heuristic = normalized_heuristic * dynamic_factor
    
    # Sparsify the heuristics by setting zero or low values to zero
    sparsified_heuristic = np.where(heuristic > 1e-8, dynamic_heuristic, 0)
    
    return sparsified_heuristic
```
