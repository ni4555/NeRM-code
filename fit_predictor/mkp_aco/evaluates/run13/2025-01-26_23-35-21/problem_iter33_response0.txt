```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize values to avoid dominance
    normalized_prize = prize / np.max(prize)
    
    # Calculate normalized weight to encourage sparsity
    normalized_weight = weight / np.max(weight)
    
    # Penalize items with high sparsity by dividing by a large number
    sparsity_penalty = np.max(normalized_weight) / (np.sum(normalized_weight, axis=1) + 1e-8)
    
    # Introduce randomness to avoid convergence to a single solution
    randomness_factor = np.random.rand(len(prize))
    
    # Combine all factors to create a heuristic
    heuristic = normalized_prize * (1 + sparsity_penalty + randomness_factor)
    
    # Normalize by the maximum heuristic value to maintain consistency
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Ensure the heuristics are non-negative and at least 1e-8 to maintain diversity
    normalized_heuristic = np.clip(normalized_heuristic, 1e-8, None)
    
    return normalized_heuristic
```
