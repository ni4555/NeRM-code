```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.sqrt(np.sum(weight**2, axis=1)) + 1e-8)

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Prune dominated items by selecting top 95th percentile density
    dominance_filter = np.argsort(density)[::-1][:95]
    density = density[dominance_filter]
    prize = prize[dominance_filter]
    weight = weight[dominance_filter]

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(len(weight)) + 1e-8

    # Weights for different components
    density_weight = 0.5
    sparsity_weight = 0.2
    value_to_weight_ratio_weight = 0.2
    random_factor_weight = 0.1

    # Combine different heuristics components
    heuristic = (density * density_weight +
                 (1 - sparsity) * sparsity_weight +
                 value_to_weight_ratio * value_to_weight_ratio_weight +
                 random_factor * random_factor_weight)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Introduce diversity by maintaining variance in heuristic values
    diversity_factor = np.std(normalized_heuristic)

    # Adjust the heuristics to maintain diversity
    normalized_heuristic = normalized_heuristic * diversity_factor

    # Normalize the heuristics to have a minimum value of 1e-8 to ensure diversity
    normalized_heuristic = np.clip(normalized_heuristic, 1e-8, None)

    return normalized_heuristic
```
