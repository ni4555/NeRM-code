```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1)) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.mean(weight, axis=1) / np.max(np.mean(weight, axis=1)) + 1e-8

    # Calculate value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Normalize prizes
    normalized_prize = prize / np.max(prize) + 1e-8

    # Combine metrics using a weighted sum approach
    heuristic = (0.4 * density +
                 0.3 * (1 - sparsity) +
                 0.2 * value_to_weight_ratio +
                 0.1 * normalized_prize)

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Weigh and combine the heuristic with randomness
    final_heuristic = (heuristic * 0.8 +
                       random_factor * 0.2)

    # Introduce a diversity factor to encourage the inclusion of diverse items
    diversity_factor = 0.1 * (1 - np.mean(density)) / (np.max(1 - np.mean(density)) + 1e-8)

    # Combine the diversity factor with the final heuristic
    final_heuristic = (final_heuristic * 0.9 +
                       diversity_factor * 0.1)

    # Normalize the final heuristic values to a range [0, 1]
    normalized_final_heuristic = final_heuristic / np.sum(final_heuristic) + 1e-8

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(normalized_final_heuristic == 0):
        normalized_final_heuristic = np.ones(n) * 1e-8

    return normalized_final_heuristic
```
