```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize prize to have a consistent scale
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))

    # Calculate normalized density (value-to-weight ratio)
    density = prize_normalized / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity (weight-to-max-weight ratio)
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize_normalized / np.sum(weight**2, axis=1) + 1e-8

    # Randomness factor to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Define a weighted heuristic score based on normalized density, sparsity, and value-to-weight ratio
    heuristic = (0.6 * density) + (0.3 * (1 - sparsity)) + (0.1 * value_to_weight_ratio) + (0.0 * random_factor)

    # Normalize the heuristic to ensure a consistent scale
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    # Apply a penalty for dominated items to ensure diversity in the selection
    dominated_indices = np.argsort(normalized_heuristic)[::-1]
    for i in range(1, len(dominated_indices)):
        if normalized_heuristic[dominated_indices[i]] <= normalized_heuristic[dominated_indices[i - 1]]:
            normalized_heuristic[dominated_indices[i]] = 0

    # Normalize the heuristic to the range [0, 1]
    normalized_heuristic = (normalized_heuristic - np.min(normalized_heuristic)) / (np.max(normalized_heuristic) - np.min(normalized_heuristic))

    # Ensure diversity by checking if all items are dominated and adjust the heuristic if necessary
    if np.all(normalized_heuristic == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
