```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Use a diversity measure based on the min and max weights
    diversity = np.min(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Control sparsity with a diversity threshold
    diversity_threshold = 0.5
    heuristic_value[diversity < diversity_threshold] = 0
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Manage sparsity by setting very low heuristic values to zero
    heuristic_value[heuristic_value < 1e-8] = 0
    
    return normalized_heuristic
```
