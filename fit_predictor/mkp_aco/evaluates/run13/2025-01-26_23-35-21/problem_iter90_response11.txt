```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    n = prize.shape[0]

    # Calculate the average density of the prizes
    average_density = np.mean(prize / np.sum(weight, axis=1))

    # Calculate the density of each item relative to the average
    density = prize / average_density

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Calculate the value-to-weight ratio for each item
    value_to_weight_ratio = prize / np.sqrt(np.sum(weight**2, axis=1))

    # Introduce randomness for diversity
    random_factor = np.random.rand(n)

    # Define balance factors
    balance_factor_density = 0.6 * density
    balance_factor_sparsity = 0.2 * (1 - sparsity)
    balance_factor_value_to_weight = 0.2 * value_to_weight_ratio
    balance_factor_random = 0.05 * random_factor

    # Combine balance factors
    heuristic = balance_factor_density + balance_factor_sparsity + balance_factor_value_to_weight + balance_factor_random

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / max_heuristic

    # Apply a sparsity penalty to encourage diversity
    sparsity_penalty = 0.1 * (1 - np.mean(density))
    refined_heuristic = normalized_heuristic * (1 - sparsity_penalty)

    # Apply a value-to-weight ratio penalty to balance high-value-to-light-weight items
    value_to_weight_penalty = 0.1 * (1 - np.mean(value_to_weight_ratio))
    refined_heuristic -= value_to_weight_penalty * value_to_weight_ratio

    # Ensure that the heuristic values are non-negative
    refined_heuristic = np.maximum(refined_heuristic, 0)

    # If all items have zero density or are very sparse, set a minimum heuristic value to avoid dominance
    if np.all(density == 0) or np.all(sparsity == 1):
        refined_heuristic = np.ones(n) * 1e-8

    return refined_heuristic
```
