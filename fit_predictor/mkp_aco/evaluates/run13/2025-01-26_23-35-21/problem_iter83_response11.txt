```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items by setting their heuristic value to zero
    for i in range(weight.shape[0]):
        for j in range(i+1, weight.shape[0]):
            if all(weight[i] <= weight[j]) and prize[i] < prize[j]:
                density[i] = 0
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(weight.shape[0])
    
    # Combine all factors with a weighted sum
    heuristic_value = 0.5 * density * (1 - sparsity) - 0.3 * weight_sum + 0.2 * random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
