```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items: those with a lower density or higher sparsity than an existing item in the same dimension
    dominated_indices = np.where((density < np.max(density, axis=0)) & (sparsity > np.min(sparsity, axis=0)))[0]
    density[dominated_indices] = 0
    
    # Introduce randomness to diversify the solution space
    np.random.shuffle(density)
    
    # Integrate randomness in the heuristic calculation
    random_factor = np.random.rand(len(density))
    
    # Create a heuristic that considers both density and sparsity
    heuristic = density + random_factor
    
    # Normalize the heuristic to ensure consistency
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Maintain diversity by ensuring no item has a zero heuristic
    normalized_heuristic[weight.sum(axis=1) < 1e-8] = 1e-8
    
    return normalized_heuristic
```
