```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Promote diversity by setting very low density to a small value
    normalized_heuristic[density < average_density / 2] = average_density / 2
    
    # Penalize concentration by reducing the value of high sparsity
    normalized_heuristic[sparsity > 0.5] = normalized_heuristic[sparsity > 0.5] * 0.5
    
    # Ensure the heuristic is positive by clamping negative values to zero
    normalized_heuristic = np.clip(normalized_heuristic, 0, None)
    
    return normalized_heuristic
```
