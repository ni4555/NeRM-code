```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Identify dominated items by comparing each item with the best item in each dimension
    best_in_dimension = np.argmax(prize, axis=0)
    dominated = np.zeros(weight.shape[0], dtype=bool)
    for i in range(weight.shape[0]):
        if (density[i] <= density[best_in_dimension[i]]) or (np.any(weight[i, :] > weight[best_in_dimension[i], :])):
            dominated[i] = True
            
    # Remove dominated items from the density calculation
    non_dominated_density = density[~dominated]
    
    # Normalize the non-dominated density
    normalized_density = non_dominated_density / (np.max(non_dominated_density) + 1e-8)
    
    # Introduce randomness by adding a small random value to the heuristics
    random_factor = np.random.rand(weight.shape[0]) * 0.01
    heuristic = normalized_density + random_factor
    
    # Normalize the heuristics
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    
    # Set dominated items to a very small value
    dominated_indices = np.where(dominated)[0]
    heuristic[dominated_indices] = 1e-8
    
    return heuristic
```
