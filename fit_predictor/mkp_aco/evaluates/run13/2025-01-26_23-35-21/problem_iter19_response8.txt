```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prizes to prevent dominance of high prize values
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    
    # Normalize weights to ensure a fair comparison
    normalized_weight = (weight - np.min(weight, axis=1, keepdims=True)) / (np.max(weight, axis=1, keepdims=True) - np.min(weight, axis=1, keepdims=True))
    
    # Calculate heuristic value based on prize-to-weight ratio
    heuristic_value = normalized_prize / (np.sum(normalized_weight, axis=1) + 1e-8)
    
    # Promote diversity by penalizing items with similar prize-to-weight ratios
    diversity_factor = 1 / (np.linalg.norm(normalized_weight, axis=1, keepdims=True) + 1e-8)
    
    # Combine heuristic value with diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Normalize the heuristic values to ensure no single item dominates
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to encourage diversity
    normalized_heuristic[np.sum(normalized_weight, axis=1) < 1e-8] = 1e-8
    
    return normalized_heuristic
```
