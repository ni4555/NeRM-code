```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to account for the scale of the problem
    normalized_prize = prize / np.max(prize) + 1e-8

    # Normalize the weight to account for the scale of the problem
    normalized_weight = np.sum(weight, axis=1) / np.sum(weight) + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = (prize / np.sum(weight**2, axis=1)) + 1e-8

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine the metrics using a weighted sum, including randomness
    heuristic = (0.5 * normalized_prize +
                 0.3 * (1 - normalized_weight) +
                 0.2 * value_to_weight_ratio +
                 0.0 * random_factor)  # Adjust random_factor weight as needed

    # Normalize the heuristic values
    normalized_heuristic = heuristic / np.max(heuristic) + 1e-8

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(normalized_heuristic == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
