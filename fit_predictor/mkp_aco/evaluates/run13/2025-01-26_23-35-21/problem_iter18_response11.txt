```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize values by their min and max to simplify normalization
    min_prize = np.min(prize)
    max_prize = np.max(prize)
    normalized_prize = (prize - min_prize) / (max_prize - min_prize)
    
    # Calculate density based on the normalized prize and weight sum
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity by the inverse of the sum of weights normalized to the max weight per item
    max_weight_per_item = np.max(weight, axis=1)
    sparsity = np.sum(weight, axis=1) / (max_weight_per_item + 1e-8)
    
    # Create a balanced heuristic value by blending density and sparsity
    heuristic_value = density * (1 - sparsity)
    
    # Introduce diversity by factoring in the mean of the densities
    average_density = np.mean(density)
    diversity_factor = (density - average_density) / average_density
    
    # Combine the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Normalize the heuristic to ensure it is within a consistent range
    normalized_heuristic = heuristic / np.max(heuristic)
    
    # Cap the normalized heuristics to maintain a bounded range
    normalized_heuristic = np.clip(normalized_heuristic, 0, 1)
    
    # Set items with zero weight to a low value to avoid them
    normalized_heuristic[weight_sum < 1e-8] = 0
    
    return normalized_heuristic
```
