```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = len(prize)
    
    # Initialize the heuristic array with zeros
    heuristic = np.zeros(n)
    
    # Randomly select a diverse set of items to initialize the heuristic values
    num_initial_items = int(0.1 * n)
    initial_indices = np.random.choice(range(n), size=num_initial_items, replace=False)
    heuristic[initial_indices] = 1
    
    # Calculate additional metrics for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate a composite heuristic score
    composite_score = density * 0.5 - weight_sum * 0.3 + sparsity * 0.2
    
    # Introduce randomness to avoid getting trapped in local optima
    randomness_factor = np.random.rand(n)
    
    # Adjust the heuristic based on the composite score and randomness
    heuristic = composite_score * (1 - randomness_factor)
    
    # Refine heuristics to balance diversity and quality
    heuristic /= np.sum(heuristic)
    
    # Normalize the heuristic values to ensure the sum is 1
    heuristic /= np.sum(heuristic)
    
    # Apply a floor value to avoid negative heuristic values
    heuristic = np.maximum(heuristic, 1e-8)
    
    return heuristic
```
