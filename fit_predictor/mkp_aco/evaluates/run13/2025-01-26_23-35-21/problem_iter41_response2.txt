```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics with a default value
    heuristics = np.zeros_like(prize)
    
    # Calculate normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce randomness to diversify the heuristic
    randomness = np.random.rand(*prize.shape)
    
    # Prioritize core factors by assigning higher values to items with higher prize/density ratio
    core_factor = prize / (density + 1e-8)
    
    # Introduce a diversity factor to ensure different items are selected
    diversity_factor = randomness * (1 / density)
    
    # Create a final heuristic by combining the core factor, randomness, and diversity factor
    heuristics = core_factor + diversity_factor
    
    # Normalize by the maximum heuristic value to ensure no single item is overly favored
    max_heuristic = np.max(heuristics)
    heuristics /= (max_heuristic + 1e-8)
    
    return heuristics
```
