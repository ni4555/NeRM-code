```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize to have a range of 0 to 1
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))

    # Calculate the density for each item
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.sum(weight, axis=1) + 1e-8)

    # Calculate a balance score based on the density and sparsity
    balance_score = density * (1 - sparsity)

    # Calculate the diversity score based on the standard deviation of the weights
    diversity_score = np.std(np.sum(weight, axis=1))

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n)

    # Weigh the balance score, diversity score, and randomness appropriately
    total_score = balance_score * 0.6 + diversity_score * 0.3 + random_factor * 0.1

    # Normalize the total score to ensure all values are within a range [0, 1]
    normalized_total_score = total_score / (np.max(total_score) + 1e-8)

    return normalized_total_score
```
