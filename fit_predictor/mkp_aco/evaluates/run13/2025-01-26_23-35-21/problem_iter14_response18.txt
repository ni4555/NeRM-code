```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the compactness (average weight per dimension)
    compactness = np.sum(weight, axis=1) / np.size(weight, 1)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Calculate the utility score by combining the metrics
    utility = 0.4 * density + 0.3 * sparsity + 0.2 * compactness + 0.1 * diversity_factor
    
    # Normalize the utility scores
    utility = (utility - np.min(utility)) / (np.max(utility) - np.min(utility))
    
    # Ensure the utility is not negative
    utility = np.maximum(utility, 0)
    
    # Introduce perturbation to maintain diversity
    perturbation = np.random.rand(*utility.shape) - 0.5
    perturbed_utility = utility + perturbation
    
    # Clamp the perturbed utility to the range [0, 1]
    perturbed_utility = np.clip(perturbed_utility, 0, 1)
    
    return perturbed_utility
```
