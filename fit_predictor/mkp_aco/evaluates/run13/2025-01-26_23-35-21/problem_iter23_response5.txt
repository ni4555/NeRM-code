```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the variance of weights to promote diversity
    variance = np.var(weight, axis=1)
    
    # Introduce a penalty for high sparsity
    penalty = -sparsity
    
    # Combine the metrics into a heuristic value
    heuristic_value = density + variance + penalty
    
    # Introduce a diversity factor based on the variance
    diversity_factor = variance / (np.mean(variance) + 1e-8)
    
    # Create a final heuristic by combining the diversity factor with the heuristic value
    heuristic = heuristic_value * diversity_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density + sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * normalized_heuristic + 0.3 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
