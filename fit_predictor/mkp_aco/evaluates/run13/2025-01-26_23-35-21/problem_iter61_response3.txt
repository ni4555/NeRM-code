```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness to ensure diversity
    random_factor = np.random.rand(*weight.shape)
    
    # Prune dominated items (those with a lower prize/density than others)
    dominated_mask = density < np.max(density)
    density[dominated_mask] = 0
    
    # Create a heuristic value based on the remaining items
    heuristic_value = density * random_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce a balance heuristic to promote diversity in selection
    balance_heuristic = (density - (np.mean(density) + 1e-8)) / (density + (np.mean(density) + 1e-8))
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * normalized_heuristic + 0.5 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return combined_heuristic
```
