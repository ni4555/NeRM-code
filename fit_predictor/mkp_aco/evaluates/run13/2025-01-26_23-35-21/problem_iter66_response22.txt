```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate the balance metric between density and sparsity
    balance_metric = (density - sparsity) / (np.abs(density - sparsity) + 1e-8)

    # Identify dominated items based on density and sparsity
    non_dominated = np.where(np.logical_and(density > np.percentile(density, 95), sparsity > np.percentile(sparsity, 95)))[0]
    non_dominated = np.append(non_dominated, np.setdiff1d(range(n), non_dominated))

    # Prune dominated items
    dominated_mask = np.logical_not(np.isin(range(n), non_dominated))
    density[dominated_mask] = 0
    sparsity[dominated_mask] = 0
    balance_metric[dominated_mask] = 0

    # Introduce randomness for exploration
    randomness = np.random.rand(n)

    # Combine the factors into a weighted heuristic
    heuristic = density + sparsity + balance_metric + randomness

    # Normalize the heuristic values to ensure they sum to 1
    heuristic /= np.sum(heuristic)

    # Adjust prominence to promote diversity and avoid concentration
    high_density_mask = density > np.percentile(density, 95)
    high_sparsity_mask = sparsity > np.percentile(sparsity, 95)
    adjusted_heuristic = heuristic.copy()
    adjusted_heuristic[high_density_mask] *= 0.5
    adjusted_heuristic[high_sparsity_mask] *= 0.5

    return adjusted_heuristic
```
