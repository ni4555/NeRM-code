```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1) + 1e-8

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Prune dominated items early by removing those with a density below the 95th percentile
    dominated_mask = density < np.percentile(density, 95)
    density[dominated_mask] = 0

    # Combine the metrics using a weighted sum, emphasizing items with high value-to-weight ratio
    heuristic = (0.5 * density +
                 0.3 * (1 - sparsity) +
                 0.2 * value_to_weight_ratio)

    # Introduce randomness to encourage exploration, ensuring diversity
    random_factor = np.random.rand(n) / (np.max(np.random.rand(n)) + 1e-8)

    # Combine the heuristic with randomness
    combined_heuristic = heuristic * random_factor

    # Dynamically adjust the weight given to randomness based on the density
    adjusted_randomness = combined_heuristic * (1 - density)

    # Combine the heuristic with the adjusted randomness
    final_heuristic = combined_heuristic + adjusted_randomness

    # Introduce a penalty for high sparsity to favor more uniformly distributed items
    sparsity_penalty = (1 - sparsity) * 0.1
    final_heuristic *= (1 - sparsity_penalty)

    # Normalize the final heuristic to ensure it's between 0 and 1
    final_heuristic /= (np.max(final_heuristic) + 1e-8)

    return final_heuristic
```
