```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize to reduce scale issues
    normalized_prize = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))

    # Calculate the total normalized weight for each item
    total_weight = np.sum(weight, axis=1)
    
    # Calculate the density as the ratio of normalized prize to total normalized weight
    density = normalized_prize / (total_weight + 1e-8)

    # Prune dominated items by keeping only the maximum density per dimension
    heuristics = np.zeros_like(density)
    for i in range(n):
        for j in range(n):
            if i != j and density[i] < density[j]:
                heuristics[i] = 0
            else:
                # Select the maximum density for items with the same total weight
                same_weight_indices = np.where(total_weight[i] == total_weight[j])[0]
                if same_weight_indices.size > 1:
                    heuristics[i] = np.max(density[same_weight_indices])

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine density, randomness, and normalize to create a heuristic
    heuristics = heuristics * random_factor

    # Normalize by the maximum heuristic value to prevent overflow
    max_heuristic = np.max(heuristics)
    heuristics /= max_heuristic

    return heuristics
```
