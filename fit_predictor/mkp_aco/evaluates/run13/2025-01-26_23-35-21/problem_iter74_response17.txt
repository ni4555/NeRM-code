```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the prize based on the average prize value
    normalized_prize = prize / np.mean(prize)

    # Calculate the value-to-weight ratio for each item and dimension
    value_to_weight_ratio = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the diversity factor based on the variance of the value-to-weight ratio
    diversity_factor = value_to_weight_ratio / np.var(value_to_weight_ratio)

    # Normalize the weight by the maximum weight to avoid dominance due to larger item dimensions
    normalized_weight = weight / np.max(weight, axis=1)[:, np.newaxis]

    # Introduce an entropy-like measure to promote diversity
    entropy = -np.sum(normalized_weight * np.log(normalized_weight + 1e-8), axis=1)

    # Combine metrics into a heuristic
    heuristic = (0.6 * normalized_prize +
                 0.2 * np.sum(value_to_weight_ratio, axis=1) +
                 0.1 * np.mean(diversity_factor) +
                 0.1 * entropy)

    # Introduce randomness to ensure diversity in sampling
    random_factor = np.random.rand(n)

    # Scale the heuristic to maintain consistency in the range
    scaled_heuristic = heuristic / np.max(heuristic + random_factor)

    # Introduce a penalty for items with excessive sparsity
    sparsity_penalty = 1 - np.mean(normalized_weight, axis=1)

    # Combine the heuristic with a penalty to maintain balance
    final_heuristic = scaled_heuristic - sparsity_penalty

    return final_heuristic
```
