```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate a balance factor between density and sparsity
    balance_factor = (density + sparsity) / 2

    # Calculate diversity based on average sparsity
    average_sparsity = np.mean(sparsity)
    diversity_factor = (sparsity - average_sparsity) / (np.max(sparsity - average_sparsity) + 1e-8)

    # Calculate additional heuristic metrics
    total_weight = np.sum(weight, axis=1)
    weight_variance = np.var(weight, axis=1)

    # Integrate metrics into heuristic values
    density_heuristic = density * (1 - sparsity)
    sparsity_heuristic = balance_factor * diversity_factor
    variance_heuristic = 1 - weight_variance

    # Combine heuristics with a weighted sum
    combined_heuristic = 0.4 * density_heuristic + 0.3 * sparsity_heuristic + 0.2 * variance_heuristic

    # Normalize by the maximum heuristic value to reduce bias
    max_heuristic = np.max(combined_heuristic)
    normalized_heuristic = combined_heuristic / (max_heuristic + 1e-8)

    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(*normalized_heuristic.shape)
    heuristic = normalized_heuristic * random_factor

    # Apply penalty to items that are not within weight constraints
    weight_penalty = np.sum(weight, axis=1) / (np.maximum(np.sum(weight, axis=1), 1e-8))
    heuristic *= (1 - weight_penalty)

    # Ensure non-negative heuristics
    heuristic = np.maximum(heuristic, 0)

    return heuristic
```
