```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to total weight for each item
    ratio = prize / np.sum(weight, axis=1)
    # Calculate the sparsity based on a threshold
    sparsity_threshold = 0.5
    sparsity = (np.sum(weight, axis=1) < sparsity_threshold) * 1.0
    # Calculate diversity based on the number of non-zero weights
    diversity = (weight != 0).sum(axis=1) / weight.shape[1]
    # Calculate the average of the weights to penalize items with higher overall weight
    average_weight = np.mean(weight, axis=1)
    # Combine factors to create a weighted heuristic
    # Weigh ratio by 0.5, sparsity by 0.3, diversity by 0.1, and penalize by 0.1
    heuristics = 0.5 * ratio + 0.3 * sparsity + 0.1 * diversity - 0.1 * average_weight
    # Replace all negative values with zero
    heuristics[heuristics < 0] = 0
    return heuristics
```
