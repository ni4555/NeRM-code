```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items: items with lower density than others in their dimension
    dominance_mask = np.argmax(density, axis=0)
    non_dominated = np.where(density == density[dominance_mask], True, False)
    density[~non_dominated] = 0
    
    # Normalize the pruned density values
    normalized_density = density / np.max(density[non_dominated] + 1e-8)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = normalized_density / (np.max(normalized_density) + 1e-8)
    
    # Introduce randomness to explore other non-dominated items
    random_factor = np.random.rand(len(prize))
    normalized_heuristic = normalized_heuristic * random_factor
    
    # Sparsify the heuristics by setting low-value elements to zero
    sparsified_heuristic = np.where(normalized_heuristic > 0.5, normalized_heuristic, 0)
    
    # Set zero weights to a small value to maintain diversity
    sparsified_heuristic[weight_sum < 1e-8] = 1e-8
    
    return sparsified_heuristic
```
