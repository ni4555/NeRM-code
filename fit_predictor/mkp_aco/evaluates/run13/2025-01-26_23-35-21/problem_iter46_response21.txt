```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Avoid division by zero
    total_weight = np.sum(weight, axis=1) + 1e-8
    density = prize / total_weight

    # Ensure the denominator for sparsity is not zero
    max_weight_per_dimension = np.max(weight, axis=1) + 1e-8
    sparsity = np.sum(weight, axis=1) / max_weight_per_dimension

    # Normalize individual metrics
    normalized_density = density / np.max(density)
    normalized_sparsity = sparsity / np.max(sparsity)

    # Introduce randomness for exploration
    random_factor = np.random.rand(n)

    # Balance different metrics
    heuristic = 0.6 * normalized_density + 0.4 * normalized_sparsity

    # Introduce a randomness factor to the heuristic to explore a wider range of solutions
    heuristic *= random_factor / np.max(random_factor)

    # Normalize by the maximum heuristic value
    max_heuristic = np.max(heuristic)
    heuristic /= max_heuristic

    # Ensure that items with zero total weight still have a non-zero heuristic value
    heuristic[total_weight < 1e-8] = 1

    return heuristic
```
