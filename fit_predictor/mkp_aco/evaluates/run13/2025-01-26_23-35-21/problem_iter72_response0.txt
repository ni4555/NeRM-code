```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize density and value-to-weight ratio
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    value_to_weight_ratio = (prize / np.sum(weight**2, axis=1) + 1e-8) * np.sqrt(m)

    # Calculate sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Calculate diversity in terms of the standard deviation of density
    diversity = np.std(density)

    # Introduce randomness for exploration
    randomness = np.random.rand(n) + 1e-8

    # Define weighted heuristic combining different metrics
    heuristic = (0.5 * density + 
                 0.3 * value_to_weight_ratio +
                 0.1 * (1 - sparsity) +
                 0.1 * diversity +
                 0.1 * randomness)  # Increased randomness weight to balance exploration and exploitation

    # Normalize heuristic values to a range [0, 1]
    heuristic_sum = np.sum(heuristic)
    if heuristic_sum > 0:
        normalized_heuristic = heuristic / heuristic_sum
    else:
        normalized_heuristic = np.ones(n) * 1e-8

    # If diversity is very low, increase the value-to-weight_ratio weight to encourage diversity
    if diversity < 0.1:
        normalized_heuristic *= 1 - 0.1 * (0.1 - diversity)

    # Ensure a minimum heuristic value to maintain diversity
    normalized_heuristic[normalized_heuristic < 1e-8] = 1e-8

    return normalized_heuristic
```
