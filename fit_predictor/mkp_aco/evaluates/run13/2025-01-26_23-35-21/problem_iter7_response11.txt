```python
def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the variance of the weights to account for diversity
    variance = np.var(weight, axis=1)
    
    # Combine density and variance to create a heuristic value
    heuristic_value = density * variance
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Apply a threshold to promote diversity and reduce sparsity
    threshold = 0.5
    normalized_heuristic[normalized_heuristic < threshold] = 0
    
    return normalized_heuristic
```
