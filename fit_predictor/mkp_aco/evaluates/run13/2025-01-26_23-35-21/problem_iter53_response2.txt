```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Define a dominated item as one that has lower density than another but higher or equal weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    dominated_indices = np.argsort(density)[:-np.argmax(np.diff(np.argsort(-density)))]
    density[dominated_indices] = -np.inf
    
    # Prune dominated items
    non_dominated_density = density[np.isfinite(density)]
    
    # Normalize the remaining densities
    max_density = np.max(non_dominated_density)
    normalized_density = non_dominated_density / (max_density + 1e-8)
    
    # Introduce randomness for exploration
    random_factor = np.random.rand(len(prize))
    
    # Calculate additional metric: average weight per item
    average_weight = np.mean(np.sum(weight, axis=1))
    
    # Combine the normalized density with randomness and a balance factor
    heuristic = (normalized_density + random_factor - average_weight)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    return normalized_heuristic
```
