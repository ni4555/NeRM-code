```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density, which is the prize per unit weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity, which is the sum of weights normalized by the maximum weight
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the balance between density and sparsity
    balance = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Calculate the diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = (density / average_density + 1e-8) ** 0.5
    
    # Combine the metrics into a single heuristic value
    heuristic_value = balance * diversity_factor
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Set items with zero or negligible weight to a small positive value to maintain diversity
    combined_heuristic = np.where(np.sum(weight, axis=1) > 1e-8, normalized_heuristic, 1e-8)
    
    return combined_heuristic
```
