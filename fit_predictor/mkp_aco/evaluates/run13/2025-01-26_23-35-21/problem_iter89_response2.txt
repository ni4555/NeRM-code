```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items: those with higher prize but the same or higher total weight
    non_dominated_indices = np.argsort(density)[::-1]
    non_dominated_prize = prize[non_dominated_indices]
    dominated_prize = prize[non_dominated_indices[1:]]
    dominance_condition = np.all(non_dominated_prize >= dominated_prize, axis=1)
    density[~dominance_condition] = 0
    
    # Introduce randomness to maintain diversity
    np.random.shuffle(density)
    
    # Normalize by the maximum density
    normalized_density = density / (np.max(density) + 1e-8)
    
    # Create a final heuristic based on the normalized density
    heuristic = normalized_density
    
    return heuristic
```
