```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize based on the maximum prize value
    normalized_prize = prize / np.max(prize)
    
    # Calculate the density of the item considering the total normalized weight
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the diversity as the inverse of the variance of the normalized weight across dimensions
    diversity = 1 / np.var(weight, axis=1)
    
    # Calculate the sparsity based on the average normalized weight
    sparsity = np.mean(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Add a penalty for items with a low density (less promising items)
    density_penalty = np.where(density < 1e-8, -np.max(normalized_prize), 0)
    
    # Add a penalty for low diversity (items that are too similar to others)
    diversity_penalty = np.where(diversity < 1e-8, -np.max(normalized_prize), 0)
    
    # Add a penalty for high sparsity (items that contribute very little to the overall solution)
    sparsity_penalty = np.where(sparsity > 1, -np.max(normalized_prize), 0)
    
    # Calculate the heuristic value considering the balance of all metrics
    heuristic_value = density * diversity * (1 - sparsity) - density_penalty - diversity_penalty - sparsity_penalty
    
    # Normalize the heuristic values to ensure they are comparable across different problems
    min_heuristic_value = np.min(heuristic_value)
    max_heuristic_value = np.max(heuristic_value)
    normalized_heuristics = (heuristic_value - min_heuristic_value) / (max_heuristic_value - min_heuristic_value)
    
    # Ensure that the resulting heuristic values are not too sparse
    sparsity_threshold = 0.2  # Define a sparsity threshold
    sparsity_adjustment = np.where(normalized_heuristics < sparsity_threshold, 0, normalized_heuristics)
    
    # Final normalization to maintain a positive range
    normalized_heuristics = (sparsity_adjustment - np.min(sparsity_adjustment)) / (np.max(sparsity_adjustment) - np.min(sparsity_adjustment))
    
    return normalized_heuristics
```
