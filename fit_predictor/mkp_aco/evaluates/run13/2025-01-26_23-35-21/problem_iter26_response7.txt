```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the prize to account for different scales
    normalized_prize = prize / np.max(prize)
    
    # Normalize the weights to account for different scales
    normalized_weight = weight / np.max(weight, axis=1, keepdims=True)
    
    # Calculate the normalized density
    density = normalized_prize / np.sum(normalized_weight, axis=1)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(normalized_weight, axis=1) / (np.max(normalized_weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(normalized_weight, axis=1)
    
    # Calculate the diversity factor based on the variance in density
    density_variance = np.var(density)
    diversity_factor = (density - np.mean(density)) / (np.sqrt(density_variance) + 1e-8)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Create a final heuristic by combining the heuristic value with the diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Introduce a penalty for items that have extremely low diversity
    low_diversity_penalty = np.where(density_variance < 1e-4, 1e-8, 0)
    heuristic -= low_diversity_penalty
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_penalty = np.where(weight_sum < 1e-8, 1e-8, 0)
    normalized_heuristic += zero_weight_penalty
    
    return normalized_heuristic
```
