```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize density and sparsity
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Compute diversity factors
    diversity_density = np.mean(density)
    diversity_sparsity = np.mean(sparsity)

    # Introduce a balance between high density and low sparsity
    balance = (density - sparsity) / (density + sparsity + 1e-8)

    # Compute the additional diversity factors
    diversity_balance = balance / (np.mean(balance) + 1e-8)

    # Normalize based on the average of all metrics
    normalized_density = density / (diversity_density + 1e-8)
    normalized_sparsity = sparsity / (diversity_sparsity + 1e-8)
    normalized_balance = diversity_balance / (np.mean(diversity_balance) + 1e-8)

    # Combine the metrics using a weighted sum
    combined_heuristic = 0.4 * normalized_density + 0.3 * normalized_sparsity + 0.2 * normalized_balance

    # Introduce randomness with a small factor to explore different solutions
    random_factor = np.random.rand(n) + 1e-8

    # Combine the combined heuristic with the random factor
    heuristic = combined_heuristic * (0.9 * random_factor + 0.1)

    # Normalize the heuristic to ensure a proper range
    heuristic_sum = np.sum(heuristic)
    if heuristic_sum > 0:
        normalized_heuristic = heuristic / heuristic_sum
    else:
        normalized_heuristic = np.full(n, 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    non_dominated_fraction = np.count_nonzero(normalized_heuristic > 1e-8) / n
    if non_dominated_fraction == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
