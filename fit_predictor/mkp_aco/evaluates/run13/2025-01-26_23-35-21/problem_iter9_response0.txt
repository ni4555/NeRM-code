```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics: average density and maximum sparsity
    avg_density = np.mean(density)
    max_sparsity = np.max(sparsity)
    
    # Calculate diversity metric
    diversity = np.var(density)
    
    # Blend metrics with domain insights
    heuristic_value = density * (1 - sparsity) + (avg_density - density) * 0.5 + diversity * 0.5
    
    # Dynamically adjust weights based on the blended metrics
    heuristic_value = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Manage sparsity by penalizing zero weights
    heuristic_value[weight_sum == 0] = -np.inf
    
    return heuristic_value
```
