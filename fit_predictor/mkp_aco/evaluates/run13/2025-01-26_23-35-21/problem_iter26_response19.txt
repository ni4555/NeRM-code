```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize the density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize the sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Introduce diversity based on the standard deviation of the density
    diversity = np.std(density)
    
    # Create a heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum + diversity
    
    # Normalize the heuristic value by the maximum heuristic value
    max_heuristic = np.max(heuristic_value)
    normalized_heuristic = heuristic_value / (max_heuristic + 1e-8)
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * normalized_heuristic + 0.5 * balance_heuristic
    
    # Mutate the heuristics by introducing randomness to the combined heuristic
    mutation_factor = np.random.rand(*combined_heuristic.shape)
    combined_heuristic = combined_heuristic * mutation_factor + (1 - mutation_factor) * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    # Normalize to ensure the sum is 1 to maintain the total capacity constraint
    combined_heuristic /= np.sum(combined_heuristic)
    
    return combined_heuristic
```
