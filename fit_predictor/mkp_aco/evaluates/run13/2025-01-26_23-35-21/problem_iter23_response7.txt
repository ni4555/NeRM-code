```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate weight sum and its standard deviation
    weight_sum = np.sum(weight, axis=1)
    weight_std = np.std(weight, axis=1)
    
    # Create a heuristic that balances high density, low sparsity, and low variability
    heuristic_value = (density - sparsity) / (weight_std + 1e-8)
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Apply a penalty for high sparsity to encourage diversity
    penalty = 1 - sparsity
    penalized_heuristic = normalized_heuristic * penalty
    
    # Set zero weights to a low value to maintain diversity
    penalized_heuristic[weight_sum < 1e-8] = 0
    
    return penalized_heuristic
```
