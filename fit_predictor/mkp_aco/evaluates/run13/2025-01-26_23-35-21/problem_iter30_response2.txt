```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = weight.shape

    # Calculate the density of each item (prize per unit weight in each dimension)
    density = prize / np.sum(weight, axis=1)

    # Calculate the sparsity of each item (weight normalized by the maximum weight in each dimension)
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)

    # Calculate the diversity factor based on the standard deviation of density
    diversity_factor = np.std(density)

    # Define a balance heuristic that rewards items with high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)

    # Define a performance heuristic that rewards items with high prize and high density
    performance_heuristic = prize / (np.sum(weight, axis=1) + 1e-8) * density

    # Define a diversity heuristic that encourages variation in the selection of items
    diversity_heuristic = diversity_factor

    # Combine the heuristics using a weighted sum to find the best compromise
    combined_heuristic = balance_heuristic * 0.6 + performance_heuristic * 0.3 + diversity_heuristic * 0.1

    # Normalize the heuristics to ensure they are positive and comparable
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)

    # Ensure that the heuristics are bounded to avoid extremely high values
    normalized_heuristic = np.clip(normalized_heuristic, 1e-8, 1)

    return normalized_heuristic
```
