```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Apply percentile pruning to remove dominated items
    percentile_threshold = np.percentile(density, 90)
    dominated_mask = density < percentile_threshold
    density[dominated_mask] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Calculate additional metrics
    weight_sum = np.sum(weight, axis=1)
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Combine density, randomness, weight sum, and sparsity to create a heuristic
    heuristic = 0.5 * density + 0.3 * (1 - sparsity) + 0.2 * weight_sum + 0.05 * random_factor

    # Normalize the heuristic values to prevent overflow
    max_heuristic = np.max(heuristic)
    heuristic /= max_heuristic

    # Introduce a balance factor to ensure diversity and to prevent premature convergence
    balance_factor = np.exp(-np.mean(np.abs(np.diff(np.argsort(-heuristic))))) / max_heuristic
    heuristic *= balance_factor

    # Ensure that all heuristics are non-negative
    heuristic = np.clip(heuristic, 0, None)

    return heuristic
```
