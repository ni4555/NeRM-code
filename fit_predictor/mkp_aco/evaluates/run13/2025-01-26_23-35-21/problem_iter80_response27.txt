```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate the normalized density for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate the average density across all items
    average_density = np.mean(density)

    # Calculate the sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate the total weight for each item
    weight_sum = np.sum(weight, axis=1)

    # Create a heuristic value based on the density and sparsity
    heuristic_value = density * (1 - sparsity) - weight_sum

    # Adjust the heuristic value to account for the average density
    adjusted_heuristic = heuristic_value / (average_density + 1e-8)

    # Introduce a diversity factor to encourage selection of items with different densities
    diversity_factor = density / (np.std(density) + 1e-8)

    # Combine the heuristic value with the diversity factor
    heuristic = adjusted_heuristic * diversity_factor

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Introduce a balance heuristic based on the trade-off between density and sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)

    # Combine the normalized heuristic with the balance heuristic
    combined_heuristic = 0.6 * normalized_heuristic + 0.4 * balance_heuristic

    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8

    return combined_heuristic
```
