```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize and weight values to a common scale
    normalized_prize = prize / np.max(prize)
    normalized_weight = weight / np.max(weight)

    # Calculate the density of each item
    density = normalized_prize / np.sum(normalized_weight, axis=1)

    # Calculate the average sparsity
    sparsity = np.sum(normalized_weight, axis=1) / (n * np.max(normalized_weight))

    # Calculate the sum of weights to incorporate the item size
    weight_sum = np.sum(normalized_weight, axis=1)

    # Create a balanced heuristic by considering both the density and the sparsity
    balanced_heuristic = density - (sparsity / 2)

    # Introduce a diversity factor based on the ratio of the maximum prize to the average prize
    diversity_factor = np.max(prize) / np.mean(prize)

    # Integrate the diversity factor into the heuristic
    heuristic = balanced_heuristic * diversity_factor

    # Incorporate the item size into the heuristic by subtracting the sum of weights
    heuristic -= weight_sum

    # Normalize the heuristic values to be between 0 and 1
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic

    # Introduce a balance heuristic to encourage items with high density and low sparsity
    balance_heuristic = (density + sparsity) / (np.sqrt(density) + sparsity + 1e-8)

    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * heuristic + 0.3 * balance_heuristic

    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8

    return combined_heuristic
```
