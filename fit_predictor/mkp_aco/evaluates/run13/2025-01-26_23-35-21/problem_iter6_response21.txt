```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate diversity by using the standard deviation of the utility
    diversity = np.std(utility)
    # Calculate sparsity by the average weight
    sparsity = np.mean(weight, axis=1)
    # Calculate the weighted score for each item
    heuristics = utility * diversity * (1 / sparsity)
    # Normalize heuristics for better comparison across different problems
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    # Apply a cap to the heuristics to ensure they are within a reasonable range
    heuristics = np.clip(heuristics, a_min=0, a_max=1)
    return heuristics
```
