```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize and weight to avoid bias due to scale
    prize_normalized = (prize - np.min(prize)) / (np.max(prize) - np.min(prize))
    weight_normalized = (weight - np.min(weight, axis=1, keepdims=True)) / (np.max(weight, axis=1, keepdims=True) - np.min(weight, axis=1, keepdims=True))
    
    # Calculate density considering the dimensionality of the weight
    density = prize_normalized / (np.sum(weight_normalized, axis=1) + 1e-8)
    
    # Calculate sparsity
    sparsity = np.sum(weight_normalized, axis=1) / (np.max(weight_normalized, axis=1) + 1e-8)
    
    # Calculate heuristic value based on density and sparsity
    heuristic_value = density / (1 + sparsity)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)
    
    # Combine heuristic value with diversity factor
    heuristic = heuristic_value * diversity_factor
    
    # Introduce an additional heuristic based on the balance between high density and low sparsity
    balance_heuristic = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine all heuristics using a weighted sum
    combined_heuristic = 0.5 * heuristic + 0.5 * balance_heuristic
    
    # Set zero weights to a small value to maintain diversity
    combined_heuristic[weight_normalized.sum(axis=1) < 1e-8] = 1e-8
    
    return combined_heuristic
```
