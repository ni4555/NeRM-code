```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Prune dominated items by removing those with lower density than any in the top half
    non_dominated_indices = np.argsort(density)[-len(density)//2:]
    density = density[non_dominated_indices]
    
    # Introduce randomness to diversify the heuristic values
    np.random.shuffle(density)
    
    # Integrate a balance factor between high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * density + 0.3 * balance_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Ensure the heuristics are non-negative
    normalized_heuristic = np.maximum(normalized_heuristic, 0)
    
    return normalized_heuristic
```
