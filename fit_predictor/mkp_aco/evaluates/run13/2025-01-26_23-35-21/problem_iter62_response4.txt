```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized prize per unit weight
    normalized_prize = prize / np.sum(weight, axis=1)

    # Calculate the sparsity of the item (percentage of zero weights)
    sparsity = np.mean(weight, axis=1)

    # Calculate the diversity factor (items with higher normalized prize should be more promising)
    diversity_factor = normalized_prize / np.mean(normalized_prize)

    # Calculate the balance factor (items with higher balance between normalized prize and sparsity should be more promising)
    balance_factor = normalized_prize - sparsity

    # Combine factors using a weighted sum
    combined_heuristic = 0.4 * diversity_factor + 0.4 * balance_factor + 0.2 * sparsity

    # Normalize the heuristic values to ensure the sum is one
    max_heuristic = np.max(combined_heuristic)
    normalized_heuristic = combined_heuristic / (max_heuristic + 1e-8)

    # Introduce randomness to avoid local optima
    randomness = np.random.rand(n)
    normalized_heuristic += 0.1 * randomness

    # Prune dominated items (those with lower combined heuristic value)
    # We could use a threshold or simply remove them, here we'll set them to zero
    dominated_mask = combined_heuristic < np.min(combined_heuristic)
    normalized_heuristic[dominated_mask] = 0

    return normalized_heuristic
```
