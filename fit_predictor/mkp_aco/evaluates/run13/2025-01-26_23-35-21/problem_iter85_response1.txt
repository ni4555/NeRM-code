```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Prune dominated items by removing those with lower prize to weight ratio
    ratio = prize / np.sum(weight, axis=1)
    dominant_indices = np.where(np.all(ratio <= ratio[0], axis=1))[0]
    remaining_items = np.delete(range(weight.shape[0]), dominant_indices)
    
    # Sample items to balance exploitation and exploration
    random_sample_size = min(weight.shape[0], 10)
    sampled_indices = np.random.choice(remaining_items, random_sample_size, replace=False)
    
    # Calculate heuristics for sampled items only to maintain diversity
    prize_sampled = prize[sampled_indices]
    weight_sampled = weight[sampled_indices]
    
    # Compute metrics
    density = prize_sampled / (np.sum(weight_sampled, axis=1) + 1e-8)
    sparsity = np.sum(weight_sampled, axis=1) / (np.max(weight_sampled, axis=1) + 1e-8)
    
    # Use weighted combination of density and sparsity as heuristics
    heuristic_value = density * (1 - sparsity)
    
    # Introduce a diversity factor based on the average heuristic value
    average_heuristic_value = np.mean(heuristic_value)
    diversity_factor = heuristic_value / (average_heuristic_value + 1e-8)
    
    # Create final heuristics for all items, setting pruned items to zero
    heuristics_all = np.zeros_like(prize)
    heuristics_all[sampled_indices] = diversity_factor
    
    # Apply some randomness to prevent deterministic convergence
    randomness = np.random.rand(weight.shape[0])
    randomness[sampled_indices] /= np.sum(randomness[sampled_indices])
    heuristics_all *= randomness
    
    return heuristics_all
```
