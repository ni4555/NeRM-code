```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristic array with zeros
    heuristics = np.zeros_like(prize)
    
    # Normalize the prize to consider their scale
    normalized_prize = prize / np.max(prize)
    
    # Calculate the normalized density for each item
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items by selecting only those with higher density
    for i in range(len(density)):
        for j in range(len(density)):
            if i != j and density[i] < density[j]:
                heuristics[i] = 0
    
    # Introduce randomness to explore less likely candidates
    random_factor = np.random.rand(len(density))
    random_factor = random_factor / np.sum(random_factor)
    
    # Combine the density and randomness into heuristic values
    heuristics = density * random_factor
    
    # Normalize the heuristics to maintain balance
    heuristics = heuristics / np.sum(heuristics)
    
    return heuristics
```
