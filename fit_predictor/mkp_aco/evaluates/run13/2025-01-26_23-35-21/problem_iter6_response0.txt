```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the ratio of prize to the sum of weights for each item
    utility_ratio = prize / np.sum(weight, axis=1)
    # Normalize the utility ratio by subtracting the mean
    normalized_utility = utility_ratio - np.mean(utility_ratio)
    
    # Calculate the average weight per dimension for each item
    average_weight = np.mean(weight, axis=1)
    # Calculate the sparsity score by taking the inverse of the average weight
    sparsity_score = 1 / average_weight
    
    # Calculate the diversity score using the standard deviation of weights
    diversity_score = 1 / (1 + np.std(weight, axis=1))
    
    # Combine the normalized utility, sparsity, and diversity into a heuristic
    heuristics = normalized_utility * 0.4 + sparsity_score * 0.3 + diversity_score * 0.3
    
    # Normalize the heuristics to sum to 1
    heuristics /= np.sum(heuristics)
    
    # Apply a threshold to the heuristics to filter out less promising items
    sparsity_threshold = np.mean(average_weight) * 0.1
    heuristics[average_weight < sparsity_threshold] = 0
    
    return heuristics
```
