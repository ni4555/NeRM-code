```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Identify dominated items (items with lower density than any other item with the same or lower weight)
    dominated_items = np.any(weight < weight, axis=1)
    density[dominated_items] = 0
    
    # Introduce exploration and exploitation by adding a random factor
    random_factor = np.random.rand(len(prize))
    exploration_exploitation = density + random_factor
    
    # Integrate sparsity into the heuristic by considering the weight distribution
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Create a combined heuristic by blending density, sparsity, and the exploration-exploitation factor
    heuristic = (exploration_exploitation * (1 - sparsity)) / (exploration_exploitation + sparsity + 1e-8)
    
    # Introduce an additional balance factor between high density and low sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * heuristic + 0.5 * balance_factor
    
    # Normalize the heuristics to maintain a reasonable scale
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    return normalized_heuristic
```
