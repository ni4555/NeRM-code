```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    
    # Normalize the prize to consider their scale
    normalized_prize = prize / np.max(prize)
    
    # Calculate the normalized density for each item
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Introduce randomness to explore less likely candidates
    random_factor = np.random.rand(n) / np.sum(np.random.rand(n))
    
    # Calculate a balance metric that encourages diversity
    balance_metric = (density + random_factor) / 2
    
    # Select the top items based on the balance metric
    sorted_indices = np.argsort(-balance_metric)
    top_items = sorted_indices[:min(5, n)]  # Select a subset of top items
    
    # Prune dominated items by setting their balance metric to zero
    for i in top_items:
        for j in top_items:
            if i != j and density[i] < density[j]:
                density[i] = 0
    
    # Normalize the heuristics to maintain balance
    heuristics = density / np.sum(density)
    
    return heuristics
```
