```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    heuristic_matrix = np.zeros_like(prize)
    
    for i in range(prize.shape[0]):
        density = prize[i] / (np.sum(weight[i]) + 1e-8)
        sparsity = np.sum(weight[i]) / (np.max(weight[i]) + 1e-8)
        weight_sum = np.sum(weight[i])
        
        # Balance the density and sparsity factors
        balance_factor = (density + sparsity) / 2
        
        # Use density as the primary factor, adjusted by sparsity and weight sum
        heuristic_value = balance_factor * (1 - sparsity) / (weight_sum + 1e-8)
        
        # Introduce a diversity factor to encourage different types of items
        diversity_factor = density / (np.max([density, sparsity]) + 1e-8)
        
        # Adjust the heuristic value with the diversity factor
        heuristic_value *= diversity_factor
        
        # Update the heuristics matrix with the computed heuristic
        heuristic_matrix[i] = heuristic_value
    
    # Normalize the heuristics to maintain a bounded range
    heuristic_matrix /= np.max(heuristic_matrix)
    
    return heuristic_matrix
```
