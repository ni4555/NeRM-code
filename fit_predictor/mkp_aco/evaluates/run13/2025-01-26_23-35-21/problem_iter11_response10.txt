```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = density * (1 - sparsity) - weight_sum
    
    # Apply a penalty for items that are too dense (i.e., high density and low sparsity)
    dense_penalty = np.where(density > 1.5, -np.inf, 0)
    heuristic_value += dense_penalty
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Set very low heuristics to zero to manage sparsity
    normalized_heuristic = np.where(normalized_heuristic < 0.1, 0, normalized_heuristic)
    
    return normalized_heuristic
```
