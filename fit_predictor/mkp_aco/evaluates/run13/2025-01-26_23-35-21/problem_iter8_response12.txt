```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate the diversity based on the inverse standard deviation
    diversity = 1 / np.std(weight, axis=1)
    # Combine utility and diversity using a weighted sum to balance the metrics
    heuristics = utility * 0.6 + diversity * 0.4
    # Normalize the heuristics to ensure they can be compared across dimensions
    heuristics_normalized = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    # Smooth the heuristics using a sigmoid function to ensure non-negative values
    heuristics_smoothed = 1 / (1 + np.exp(-heuristics_normalized))
    # Set a threshold based on the 25th percentile and reduce below threshold to 0
    threshold = np.percentile(heuristics_smoothed, 25)
    heuristics_thresholded = np.where(heuristics_smoothed >= threshold, heuristics_smoothed, 0)
    return heuristics_thresholded
```
