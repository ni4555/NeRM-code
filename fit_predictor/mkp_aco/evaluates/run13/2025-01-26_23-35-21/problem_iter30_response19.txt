```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize per unit weight for each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the average sparsity for each item
    average_sparsity = np.sum(weight, axis=1) / (n * m)
    
    # Combine density and average sparsity to form a heuristic value
    heuristic_value = density / (average_sparsity + 1e-8)
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic
    
    # Introduce a non-monotonic penalty for sparsity, favoring moderate sparsity
    penalty_factor = np.exp(-sparsity / (0.5 * np.sqrt(np.log(1 / (1 - sparsity)))))
    
    # Adjust the heuristic with the penalty factor
    adjusted_heuristic = heuristic_value * penalty_factor
    
    # Ensure that the heuristics are non-negative
    adjusted_heuristic[adjusted_heuristic < 0] = 0
    
    return adjusted_heuristic
```
