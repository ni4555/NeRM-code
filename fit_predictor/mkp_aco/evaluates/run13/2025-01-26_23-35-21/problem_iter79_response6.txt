```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize a heuristic array with zeros
    heuristic = np.zeros_like(prize)
    
    # Normalize the prize to ensure it's a meaningful comparison
    normalized_prize = prize / np.sum(prize)
    
    # Calculate a heuristic based on the ratio of prize to average weight
    heuristic = normalized_prize / np.sum(weight, axis=1)
    
    # Prune dominated items by comparing each item with the best item in each weight dimension
    for i in range(weight.shape[0]):
        for j in range(weight.shape[1]):
            for k in range(weight.shape[0]):
                if weight[i, j] > weight[k, j] and heuristic[i] < heuristic[k]:
                    heuristic[i] = 0
    
    # Introduce randomness to balance exploration and exploitation
    random_factor = np.random.rand(weight.shape[0])
    
    # Adjust heuristic to balance exploration and exploitation
    heuristic *= (1 - random_factor)
    
    # Normalize heuristic to ensure it's a relative measure
    normalized_heuristic = heuristic / np.max(heuristic)
    
    return normalized_heuristic
```
