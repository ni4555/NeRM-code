```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prize by the maximum prize value to ensure dimensionless comparison
    prize_normalized = prize / np.max(prize)
    
    # Calculate utility as the normalized prize per unit weight
    utility = prize_normalized / np.sum(weight, axis=1)
    
    # Calculate diversity by using the standard deviation of the utility
    diversity = np.std(utility)
    
    # Calculate sparsity by the fraction of zero weights
    sparsity = 1 - np.mean(weight, axis=1)
    
    # Calculate balance as the standard deviation of the weights across dimensions
    balance = np.std(weight, axis=1)
    
    # Combine utility, diversity, sparsity, and balance into a heuristic score
    heuristics = utility * diversity * sparsity * (1 / (1 + balance))
    
    # Normalize the heuristics to ensure all values are between 0 and 1
    max_heuristic = np.max(heuristics)
    min_heuristic = np.min(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Apply a minimum threshold to ensure non-negative heuristics
    heuristics = np.maximum(heuristics, 0.01)
    
    return heuristics
```
