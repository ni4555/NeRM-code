```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity factor as the ratio of each item's prize to the sum of all prizes
    diversity_factor = prize / np.sum(prize)
    
    # Introduce a balance factor that encourages diversity by considering the minimum prize per dimension
    balance_factor = np.min(prize / np.sum(weight, axis=1))
    
    # Normalize the balance factor to be comparable with density and diversity
    balance_factor = balance_factor / np.max([np.max(density), np.max(diversity_factor)])
    
    # Introduce a sparsity factor that encourages selection of items with lighter total weight
    sparsity_factor = (np.sum(weight, axis=1) - 1) / np.max(np.sum(weight, axis=1))
    
    # Normalize the sparsity factor to be comparable with density and diversity
    sparsity_factor = sparsity_factor / np.max([np.max(density), np.max(diversity_factor)])
    
    # Combine heuristics using a weighted sum that emphasizes diversity, balance, and sparsity
    combined_heuristic = 0.4 * density + 0.3 * diversity_factor + 0.2 * balance_factor + 0.1 * sparsity_factor
    
    # Normalize the combined heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(combined_heuristic)
    if max_heuristic > 0:
        combined_heuristic /= max_heuristic
    
    # Set zero weights to a small value to maintain diversity
    zero_weight_index = np.sum(weight, axis=1) < 1e-8
    combined_heuristic[zero_weight_index] = 1e-8 / np.sum(~zero_weight_index)
    
    return combined_heuristic
```
