```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Normalize prizes and weights for comparison
    normalized_prize = prize / np.max(prize)
    normalized_weight = weight / np.max(weight)
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = normalized_prize / (np.sum(normalized_weight, axis=1) + 1e-8)
    
    # Calculate a trade-off metric combining the sum of weights and prize
    trade_off_metric = np.sum(normalized_weight, axis=1) * normalized_prize
    
    # Create a heuristic value by balancing density and trade-off metric
    heuristic_value = density * trade_off_metric
    
    # Normalize the heuristic values
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Set zero weights to a very low value to maintain diversity
    normalized_heuristic[np.sum(normalized_weight, axis=1) < 1e-8] = 1e-8
    
    return normalized_heuristic
```
