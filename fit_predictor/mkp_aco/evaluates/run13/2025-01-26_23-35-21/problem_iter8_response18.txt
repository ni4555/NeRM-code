```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the density of each item (prize/weight)
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the average sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.mean(weight, axis=1)
    
    # Consider diversity by blending density and sparsity with a weighted sum
    # Introduce a diversity measure by looking at the average weight in each dimension
    diversity = 1 / np.mean(weight, axis=1)
    
    # Combine the three metrics using a weighted approach
    heuristic_value = 0.5 * density + 0.3 * sparsity + 0.2 * diversity
    
    # Set a threshold to handle sparsity more effectively
    threshold = np.percentile(heuristic_value, 25)
    heuristic_value[heuristic_value < threshold] = 0
    
    # Normalize the heuristics to ensure they sum to 1
    normalized_heuristic = heuristic_value / np.sum(heuristic_value)
    
    return normalized_heuristic
```
