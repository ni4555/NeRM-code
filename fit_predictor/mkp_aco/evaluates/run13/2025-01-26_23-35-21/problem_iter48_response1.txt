```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Normalize the prize and weights to avoid large values dominating the computation
    prize_normalized = prize / np.sum(prize)
    weight_normalized = weight / np.sum(weight, axis=1)[:, np.newaxis]
    
    # Calculate the diversity factor based on the variance of the normalized prizes
    diversity_factor = np.var(prize_normalized)
    
    # Calculate the sparsity for each item
    sparsity = np.sum(weight_normalized, axis=1)
    
    # Combine density and sparsity into a heuristic
    density = prize_normalized / (sparsity + 1e-8)
    heuristic_value = diversity_factor * density
    
    # Introduce randomness to balance exploration and exploitation
    exploration_balance = np.random.rand(n)
    
    # Adjust the heuristic value based on the balance of exploration and exploitation
    heuristic_value *= exploration_balance
    
    # Normalize the heuristic values to sum to one
    heuristics = heuristic_value / np.sum(heuristic_value)
    
    # Ensure the heuristics are non-negative
    heuristics[heuristics < 0] = 0
    
    return heuristics
```
