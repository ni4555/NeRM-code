```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the utility as the prize divided by the sum of weights
    utility = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity by dividing the sum of weights by the maximum weight
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a dominance metric to encourage selecting items that are not dominated
    non_dominated = np.ones(len(utility))
    for i in range(len(utility)):
        if np.any(utility > utility[i]):
            non_dominated[i] = 0
    
    # Create a heuristic based on utility, sparsity, and dominance
    heuristic = utility * non_dominated * (1 - sparsity)
    
    # Introduce randomness to encourage diversity
    np.random.seed(42)
    random_factor = np.random.rand(len(utility))
    
    # Combine the heuristic with the randomness
    combined_heuristic = heuristic + random_factor
    
    # Normalize the heuristic by the maximum value
    normalized_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Ensure no zero weights result in a zero heuristic to maintain diversity
    combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_heuristic
```
