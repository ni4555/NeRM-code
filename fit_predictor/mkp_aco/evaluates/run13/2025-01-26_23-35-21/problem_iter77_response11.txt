```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristic array with the same size as prize
    heuristic = np.zeros_like(prize)
    
    # Calculate normalized prize
    normalized_prize = prize / np.max(prize)
    
    # Calculate normalized weight
    normalized_weight = np.sum(weight, axis=1) / np.max(np.sum(weight, axis=1))
    
    # Calculate a dominance heuristic where higher values indicate more dominance
    dominance_heuristic = np.max(normalized_prize * weight, axis=1)
    
    # Calculate a diversity heuristic based on the density of items
    density_heuristic = normalized_prize / np.sum(weight, axis=1)
    
    # Prune dominated items by setting their heuristic to zero
    dominated_mask = np.any(weight == np.max(weight, axis=1), axis=1)
    heuristic[dominated_mask] = 0
    
    # Combine the dominance and diversity heuristics
    heuristic += 0.5 * dominance_heuristic
    heuristic += 0.5 * density_heuristic
    
    # Add a small weight for diversity to encourage a spread of selected items
    heuristic = heuristic / (np.sum(heuristic) + 1e-8)
    
    # Normalize the heuristic by the maximum value to ensure it's in a scale
    heuristic /= np.max(heuristic)
    
    return heuristic
```
