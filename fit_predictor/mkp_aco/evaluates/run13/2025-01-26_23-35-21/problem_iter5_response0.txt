```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Normalize the utility by its maximum value to ensure comparison across items
    utility_normalized = utility / np.max(utility)
    # Calculate variance to encourage diversity
    variance = np.var(weight, axis=1)
    # Normalize variance by its maximum value to ensure comparison across items
    variance_normalized = variance / np.max(variance)
    # Use a weighted sum of normalized utility and normalized variance
    # The weights are chosen to balance the importance of utility and diversity
    utility_weight = 0.6
    diversity_weight = 0.4
    heuristics = utility_normalized * utility_weight + variance_normalized * diversity_weight
    # Sparsify the heuristics by setting a threshold
    threshold = np.percentile(heuristics, 95)
    heuristics[heuristics < threshold] = 0
    return heuristics
```
