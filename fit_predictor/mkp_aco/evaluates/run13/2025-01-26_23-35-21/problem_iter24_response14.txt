```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized prize per unit weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Introduce a balance metric between high density and low sparsity
    balance_metric = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = (density / average_density + 1e-8) ** 0.5
    
    # Create a heuristic by combining the balance metric and diversity factor
    heuristic = balance_metric * diversity_factor
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic
    
    # Introduce a penalty for items with extremely low sparsity (i.e., heavy items)
    # and items with density too far below the average (i.e., not valuable)
    penalty_factor = (1 - sparsity) / (1 - np.min(sparsity) + 1e-8)
    penalty_density = (density / average_density - 1) / (np.abs(density / average_density - 1) + 1e-8)
    penalty = penalty_factor * penalty_density
    
    # Adjust the heuristic with the penalty factor
    adjusted_heuristic = heuristic * (1 - penalty)
    
    # Ensure that the heuristics are non-negative
    adjusted_heuristic[adjusted_heuristic < 0] = 0
    
    return adjusted_heuristic
```
