```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Normalize sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate value-to-weight ratio
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Identify dominated items using the 90th percentile of density
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Introduce randomness and diversity
    random_factor = np.random.rand(n) + 1e-8
    diversity_factor = (1 - sparsity) + value_to_weight_ratio

    # Weight metrics
    weights = [0.5, 0.3, 0.2]  # Density, Diversity, Randomness
    heuristic = sum(density[i] * weights[0] +
                    diversity_factor[i] * weights[1] +
                    random_factor[i] * weights[2] for i in range(n))

    # Normalize heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if np.all(density == 0):
        normalized_heuristic = np.ones(n) * 1e-8

    return normalized_heuristic
```
