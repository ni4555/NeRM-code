```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize value per unit weight
    prize_per_weight = prize / np.sum(weight, axis=1)
    
    # Calculate diversity based on the standard deviation of prize per unit weight
    diversity = np.std(prize_per_weight)
    
    # Calculate sparsity as the sum of weights per item divided by the maximum weight per dimension
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Calculate adaptability factor considering the problem scale
    adaptability_factor = np.sum(weight, axis=1) / (m * n)
    
    # Introduce randomness to avoid local optima, but limit it to avoid overfitting
    random_factor = np.random.rand(n)
    random_factor *= 0.5 * np.std(prize_per_weight) / np.max(random_factor)
    
    # Combine all factors using a weighted sum, emphasizing diversity as the most important factor
    # Adjust weights to reflect the importance of each factor
    heuristic = 0.6 * diversity + 0.2 * sparsity + 0.1 * adaptability_factor + 0.1 * random_factor
    
    # Normalize the heuristic to ensure all values are between 0 and 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
