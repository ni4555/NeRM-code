```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density for each item
    total_weight = np.sum(weight, axis=1) + 1e-8
    density = prize / total_weight

    # Calculate normalized sparsity for each item
    max_weight_per_dimension = np.max(weight, axis=1) + 1e-8
    sparsity = np.sum(weight, axis=1) / max_weight_per_dimension

    # Introduce randomness to the heuristic values to explore different solutions
    random_factor = np.random.rand(n)

    # Combine density and sparsity into a heuristic score
    heuristic = density + sparsity

    # Adjust the heuristic with a randomness factor to promote exploration
    heuristic *= random_factor / np.max(random_factor)

    # Normalize the heuristic to ensure all values are positive
    heuristic = np.maximum(heuristic, 1e-8)

    # Ensure the sum of heuristics is one
    heuristic /= np.sum(heuristic)

    return heuristic
```
