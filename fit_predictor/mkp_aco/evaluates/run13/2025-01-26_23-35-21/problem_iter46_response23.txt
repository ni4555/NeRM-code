```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate the density as the ratio of prize to total weight of the item
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the diversity factor as the ratio of each item's prize to the sum of all prizes
    diversity_factor = prize / np.sum(prize)
    
    # Calculate the minimum density to encourage balance
    min_density = np.min(density)
    
    # Calculate the sparsity as the sum of each item's weight over the maximum weight per dimension
    sparsity = np.sum(weight, axis=1) / np.sum(weight, axis=1).max()
    
    # Introduce a balance factor that encourages diversity by considering the minimum prize per dimension
    balance_factor = min_density / density
    
    # Normalize the balance factor to be comparable with density and diversity
    balance_factor = balance_factor / np.max([np.max(density), np.max(diversity_factor)])
    
    # Combine heuristics using a weighted sum that emphasizes diversity, balance, and sparsity
    combined_heuristic = 0.5 * density + 0.3 * diversity_factor + 0.2 * balance_factor + 0.1 * sparsity
    
    # Normalize the combined heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(combined_heuristic)
    combined_heuristic /= max_heuristic
    
    # Introduce randomness to avoid getting stuck in local optima
    random_factor = np.random.rand(n)
    
    # Combine with random factor for diversity
    combined_heuristic += 0.1 * random_factor
    
    # Ensure that the heuristic values do not exceed 1
    combined_heuristic = np.clip(combined_heuristic, 0, 1)
    
    return combined_heuristic
```
