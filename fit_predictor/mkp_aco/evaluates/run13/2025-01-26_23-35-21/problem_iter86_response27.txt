```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize per unit weight
    normalized_prize = prize / np.sum(weight, axis=1)

    # Introduce a sparsity penalty using logarithmic transformation to avoid zero values
    sparsity_penalty = np.log1p(np.sum(weight, axis=1)) / (np.max(np.sum(weight, axis=1)) + 1e-8)

    # Combine normalized prize and sparsity penalty
    heuristic = normalized_prize - sparsity_penalty

    # Normalize the heuristic values to ensure consistency
    max_heuristic = np.max(heuristic)
    min_heuristic = np.min(heuristic)
    normalized_heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic + 1e-8)

    # Ensure non-zero values by adding a small epsilon to avoid division by zero
    min_value = np.min(normalized_heuristic)
    min_value_mask = normalized_heuristic == min_value
    normalized_heuristic[min_value_mask] = 1e-8

    # Introduce minimal randomness to encourage exploration without overwhelming the heuristic
    random_factor = np.random.rand(n) / (np.max(np.random.rand(n)) + 1e-8)

    # Combine the heuristic with the random factor
    combined_heuristic = normalized_heuristic + random_factor

    # Normalize the combined heuristic to maintain values between 0 and 1
    final_heuristic = combined_heuristic / (np.sum(combined_heuristic) + 1e-8)

    return final_heuristic
```
