```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Normalize the prize to emphasize items with higher values
    max_prize = np.max(prize)
    normalized_prize = prize / max_prize

    # Normalize the weight to emphasize items with lower weights
    max_weight = np.max(np.sum(weight, axis=1))
    normalized_weight = np.sum(weight, axis=1) / max_weight

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / (np.sum(weight**2, axis=1) + 1e-8)

    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1) / np.sum(weight**2, axis=1)

    # Calculate a density metric by combining prize normalization and value-to-weight ratio
    density = normalized_prize + value_to_weight_ratio

    # Calculate a diversity factor based on the sparsity
    diversity_factor = 1 / (1 + sparsity)

    # Combine the metrics using a weighted sum
    heuristic = (0.5 * density +
                 0.3 * (1 - normalized_weight) +
                 0.2 * sparsity)

    # Adjust the heuristic for diversity
    heuristic *= diversity_factor

    # Introduce randomness to maintain diversity and avoid local optima
    random_factor = np.random.rand(n)
    heuristic += 0.1 * random_factor

    # Normalize the heuristic values
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)

    return normalized_heuristic
```
