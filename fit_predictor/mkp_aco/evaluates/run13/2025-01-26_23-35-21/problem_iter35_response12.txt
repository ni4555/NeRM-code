```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized profit
    normalized_profit = prize / np.max(prize)
    
    # Calculate a diversity heuristic based on the spread of weights
    diversity_heuristic = np.var(weight, axis=1) / np.max(np.var(weight, axis=1))
    
    # Calculate sparsity and normalize it
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate a heuristic based on the balance between profit and sparsity
    balance_heuristic = normalized_profit - sparsity
    
    # Introduce a randomness heuristic to avoid local optima
    randomness_heuristic = np.random.rand(weight.shape[0])
    
    # Combine heuristics using a weighted sum
    combined_heuristic = 0.5 * balance_heuristic + 0.3 * diversity_heuristic + 0.2 * randomness_heuristic
    
    # Normalize by the maximum heuristic value to ensure comparability
    normalized_combined_heuristic = combined_heuristic / (np.max(combined_heuristic) + 1e-8)
    
    # Set zero weights to a small value to maintain diversity
    normalized_combined_heuristic[weight_sum < 1e-8] = 1e-8
    
    return normalized_combined_heuristic
```
