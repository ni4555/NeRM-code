```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Randomly sample a fraction of the items to maintain diversity
    sample_fraction = 0.2
    n = prize.shape[0]
    sample_indices = np.random.choice(n, int(n * sample_fraction), replace=False)
    
    # Calculate the normalized density considering the dimensionality of the weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Prune dominated items by considering items with higher density and lower sparsity
    dominated_items = np.where(density < np.min(density[density > 0]) | sparsity > np.min(sparsity[sparsity > 0]))[0]
    density[dominated_items] = 0
    
    # Calculate heuristic values for the sampled items
    sampled_density = density[sample_indices]
    sampled_sparsity = sparsity[sample_indices]
    sampled_weight_sum = weight_sum[sample_indices]
    
    # Create a balanced heuristic value by blending metrics
    heuristic_value = sampled_density * (1 - sampled_sparsity) - sampled_weight_sum
    
    # Normalize by the maximum heuristic value within the sampled set
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce randomness by shuffling the normalized heuristic values
    np.random.shuffle(normalized_heuristic)
    
    # Create a final heuristic by selecting the top N heuristic values
    final_heuristic = np.zeros(n)
    final_heuristic[sample_indices] = normalized_heuristic[:int(n * sample_fraction)]
    
    # Normalize by the maximum heuristic value
    normalized_final_heuristic = final_heuristic / (np.max(final_heuristic) + 1e-8)
    
    return normalized_final_heuristic
```
