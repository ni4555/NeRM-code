```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Prune dominated items by comparing with non-dominated items
    dominance_mask = np.all(weight <= weight[:, 0][:, np.newaxis], axis=1)
    non_dominated_indices = np.where(~dominance_mask)[0]
    density[dominance_mask] = 0
    
    # Normalize the density
    density = density / (np.max(density) + 1e-8)
    
    # Introduce a randomness factor for exploration
    randomness_factor = np.random.rand(len(density))
    
    # Blend metrics
    heuristic_value = density + randomness_factor
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce a pruning step by setting all non-selected items to zero
    normalized_heuristic[non_dominated_indices] = 0
    
    return normalized_heuristic
```
