```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Normalize the density of each item
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Normalize the sparsity of each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Normalize the total weight of each item
    total_weight = np.sum(weight, axis=1)
    
    # Calculate a balance factor to balance the density and sparsity
    balance_factor = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Calculate a diversity factor based on the total weight
    diversity_factor = 1 / (total_weight + 1e-8)
    
    # Introduce a randomness factor to encourage exploration
    random_factor = np.random.rand(n)
    
    # Combine all factors to form the heuristic value
    heuristic_value = balance_factor * diversity_factor * random_factor
    
    # Normalize the heuristic values to ensure they sum to 1
    heuristic_value /= np.sum(heuristic_value)
    
    return heuristic_value
```
