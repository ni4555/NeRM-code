```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Introduce a diversity factor based on sparsity
    diversity_factor = np.exp(sparsity / 2)

    # Balance density and sparsity
    balance_factor = (density + sparsity) / 2

    # Combine the factors to form the heuristic
    heuristic = balance_factor * diversity_factor

    # Normalize the heuristics to avoid dominance of single metric
    heuristic /= np.sum(heuristic)

    # Return the heuristics matrix
    return heuristic
```
