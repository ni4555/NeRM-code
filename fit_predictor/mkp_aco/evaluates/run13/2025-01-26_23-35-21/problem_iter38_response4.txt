```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Normalize the prize to give equal importance to all items
    normalized_prize = prize / np.sum(prize)

    # Calculate the density based on normalized prize and sum of weights
    density = normalized_prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate sparsity for each item based on the sum of weights
    sparsity = np.sum(weight, axis=1)
    
    # Normalize sparsity
    max_sparsity = np.max(sparsity)
    normalized_sparsity = sparsity / (max_sparsity + 1e-8)
    
    # Calculate a diversity factor based on the range of normalized prize values
    diversity_factor = 1 / (1 + np.abs(np.min(normalized_prize) - normalized_prize))
    
    # Create a heuristic that encourages diversity and balances the density and sparsity
    heuristic = density * (1 - normalized_sparsity) * diversity_factor
    
    # Normalize the heuristic to ensure all values are on a similar scale
    max_heuristic = np.max(heuristic)
    normalized_heuristic = heuristic / (max_heuristic + 1e-8)
    
    # Encourage small weights by setting heuristics of items with weights close to zero to a smaller value
    small_weight_penalty = np.where(weight < 1e-8, 0.1, 1)
    normalized_heuristic *= small_weight_penalty
    
    # Ensure that the smallest heuristic is not zero to prevent zero-weight items from being favored
    normalized_heuristic = np.maximum(normalized_heuristic, 1e-8)
    
    return normalized_heuristic
```
