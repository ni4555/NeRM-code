```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the value-to-weight ratio
    value_to_weight_ratio = prize / np.sum(weight**2, axis=1) + 1e-8

    # Prune dominated items by selecting the top 90th percentile
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Combine density, sparsity, and value-to-weight ratio to form a heuristic
    heuristic = 0.6 * density + 0.2 * (1 - sparsity) + 0.2 * value_to_weight_ratio + 0.05 * random_factor

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure that if all items are dominated, we still explore by giving a small positive heuristic value
    if np.sum(normalized_heuristic) == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    # Introduce a diversity factor that encourages the inclusion of diverse items
    diversity_factor = 0.1 * (1 - np.mean(density)) / (np.max(1 - np.mean(density)) + 1e-8)

    # Introduce a randomness factor for additional exploration
    randomness_factor = 0.1 * np.random.rand(n) + 0.1

    # Introduce balance by considering both density and sparsity
    balance_factor = 0.3 * (density + sparsity) / (np.max(density + sparsity) + 1e-8)

    # Refine the heuristic by considering the sparsity penalty
    sparsity_penalty = (1 - sparsity) * 0.1
    refined_heuristic = normalized_heuristic * (1 - sparsity_penalty)

    # Combine the refined heuristic with balance, diversity, and randomness
    final_heuristic = refined_heuristic * (balance_factor + diversity_factor + randomness_factor)

    # Adjust the final heuristic based on the value-to-weight ratio
    final_heuristic *= value_to_weight_ratio / np.max(value_to_weight_ratio)

    return final_heuristic
```
