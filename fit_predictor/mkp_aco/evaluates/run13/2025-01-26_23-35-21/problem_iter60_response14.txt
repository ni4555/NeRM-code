```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]
    
    # Calculate normalized prize value per unit weight
    prize_per_weight = prize / np.sum(weight, axis=1)
    
    # Diversity based on the spread of prize per weight
    diversity = np.std(prize_per_weight)
    
    # Sparsity of each item considering the maximum weight it can be part of
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Balance by considering the distance from the mean prize per weight
    balance = np.abs(prize_per_weight - np.mean(prize_per_weight))
    
    # Adaptability factor based on the ratio of the sum of weights to the total weight capacity
    adaptability_factor = np.sum(weight, axis=1) / (m * n)
    
    # Variance factor to account for the spread of prize per weight values
    variance_factor = np.var(prize_per_weight)
    
    # Weighing factors: diversity is the most important, followed by adaptability, variance, and sparsity
    weight_diversity = 0.4
    weight_adaptability = 0.3
    weight_variance = 0.2
    weight_sparsity = 0.1
    
    # Create a heuristic value combining all factors
    heuristic = (weight_diversity * diversity +
                 weight_adaptability * adaptability_factor +
                 weight_variance * variance_factor +
                 weight_sparsity * sparsity)
    
    # Introduce randomness to avoid local optima
    random_factor = np.random.rand(n)
    
    # Adjust the randomness based on the variability in the heuristic values
    random_factor *= np.std(heuristic) / np.max(random_factor - np.min(random_factor))
    
    # Add randomness to the heuristic
    heuristic += random_factor
    
    # Normalize the heuristic to ensure they sum to 1
    heuristic /= np.sum(heuristic)
    
    return heuristic
```
