```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]

    # Calculate normalized density
    density = prize / np.sum(weight, axis=1) + 1e-8

    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8

    # Calculate the ratio of the square of prize to the sum of the squares of weight
    value_to_weight_ratio = (prize**2) / (np.sum(weight**2, axis=1) + 1e-8)

    # Identify dominated items and prune them
    dominated_mask = density < np.percentile(density, 90)
    density[dominated_mask] = 0

    # Calculate the fraction of items that are not dominated
    non_dominated_fraction = np.count_nonzero(density) / n

    # Introduce randomness to encourage diversity
    random_factor = np.random.rand(n) + 1e-8

    # Calculate the weighted sum of metrics
    heuristic = (0.5 * density +
                 0.3 * (1 - sparsity) +
                 0.2 * value_to_weight_ratio +
                 0.05 * random_factor)

    # Normalize the heuristic values
    normalized_heuristic = heuristic / (np.max(heuristic) + 1e-8)

    # Ensure diversity: if all items are dominated, give a small positive heuristic value
    if non_dominated_fraction == 0:
        normalized_heuristic = np.ones(n) * 1e-8

    # Balance the density with sparsity to prevent overfitting to high density items
    balance_factor = 0.5 * (density + sparsity) / (np.max(density + sparsity) + 1e-8)

    # Introduce a diversity factor that encourages inclusion of diverse items
    diversity_factor = 0.1 * (1 - np.mean(density)) / (np.max(1 - np.mean(density)) + 1e-8)

    # Introduce a randomness factor for additional exploration
    randomness_factor = 0.1 * np.random.rand(n) + 0.1

    # Combine balance, diversity, randomness, and the previous heuristics
    final_heuristic = normalized_heuristic * (balance_factor + diversity_factor + randomness_factor)

    return final_heuristic
```
