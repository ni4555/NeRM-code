```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Randomness factor to add diversity
    randomness = np.random.rand(*weight.shape)
    
    # Pruning dominated items by ensuring no item has a heuristic value of 0
    heuristic = density * (1 - np.sum(weight, axis=1) / np.max(weight, axis=1))
    
    # Normalize the heuristic to ensure it is non-negative
    heuristic = np.clip(heuristic, 0, 1)
    
    # Introduce a balance factor to maintain diversity
    balance_factor = (1 - np.sum(weight, axis=1) / np.sum(weight, axis=1) * np.max(weight, axis=1))
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.7 * heuristic + 0.3 * balance_factor + randomness
    
    # Normalize by the maximum heuristic value
    combined_heuristic /= np.max(combined_heuristic + 1e-8)
    
    return combined_heuristic
```
