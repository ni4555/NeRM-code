```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics array with zeros
    heuristic = np.zeros(weight.shape[0])
    
    # Sample a percentage of items randomly to maintain diversity
    sampled_indices = np.random.choice(weight.shape[0], size=int(weight.shape[0] * 0.2), replace=False)
    heuristic[sampled_indices] = 1.0
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Combine density and sparsity to get a balanced heuristic
    balanced_heuristic = density / (1 + sparsity)
    
    # Adjust heuristics based on balance
    heuristic += balanced_heuristic
    
    # Prune dominated items based on density
    sorted_indices = np.argsort(density)[::-1]
    dominated_indices = np.setdiff1d(range(weight.shape[0]), sorted_indices[:len(sorted_indices) // 2])
    heuristic[dominated_indices] = 0
    
    # Normalize the heuristics to sum to 1
    heuristic /= np.sum(heuristic)
    
    # Introduce randomness to avoid getting stuck in local optima
    heuristic += np.random.rand(heuristic.shape[0]) * (heuristic.max() / 100)
    
    return heuristic
```
