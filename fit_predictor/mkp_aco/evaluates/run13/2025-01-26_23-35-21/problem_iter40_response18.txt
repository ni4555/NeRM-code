```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Calculate normalized prize per unit weight for each item
    density = prize / np.sum(weight, axis=1)

    # Introduce penalties for items with extremely low and high sparsity
    sparsity_low = np.sum(weight, axis=1) / np.min(weight, axis=1)
    sparsity_high = np.sum(weight, axis=1) / np.max(weight, axis=1)
    penalty_low = (1 - sparsity_low) / (1 - np.min(sparsity_low))
    penalty_high = (1 - sparsity_high) / (1 - np.min(sparsity_high))

    # Calculate the diversity factor based on the ratio of prizes to total prize sum
    diversity_factor = prize / np.sum(prize)

    # Incorporate a local exploration factor that rewards items with high sparsity
    local_exploration = np.min(sparsity_low) / np.sum(sparsity_low)

    # Use the sum of weights as a measure of difficulty
    difficulty = np.sum(weight, axis=1)

    # Combine all factors to form a balanced heuristic value
    heuristic_value = density * penalty_low * penalty_high * diversity_factor * local_exploration * (1 / difficulty)

    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_value)
    if max_heuristic > 0:
        heuristic_value /= max_heuristic

    return heuristic_value
```
