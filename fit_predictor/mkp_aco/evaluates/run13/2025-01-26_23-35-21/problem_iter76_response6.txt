```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n = prize.shape[0]
    m = weight.shape[1]

    # Initialize heuristics array with the same shape as items
    heuristics = np.zeros(n)
    
    # Calculate normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity
    sparsity = np.sum(weight, axis=1)
    
    # Introduce randomness to maintain diversity
    random_factor = np.random.rand(n)
    
    # Create a balance factor by combining density and sparsity
    balance_factor = density * (1 - random_factor)
    
    # Adjust balance factor by considering the sum of prizes
    balance_factor /= np.sum(prize)
    
    # Normalize the balance factor to maintain bounded scale
    balance_factor /= np.sum(balance_factor)
    
    # Prune dominated items by setting their heuristics to zero
    dominated_items = sparsity == 0
    heuristics[dominated_items] = 0
    
    # Combine the balance factor with the randomness to adjust heuristics
    heuristics = balance_factor * (1 - weight.sum(axis=1))
    
    # Normalize heuristics to maintain a bounded scale
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
