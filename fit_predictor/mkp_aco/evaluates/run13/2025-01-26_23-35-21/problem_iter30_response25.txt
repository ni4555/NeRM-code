```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]

    # Calculate normalized prize per unit weight
    density = prize / (np.sum(weight, axis=1) + 1e-8)

    # Calculate sparsity for each item
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)

    # Calculate a balance metric that rewards items that are not too sparse and not too dense
    balance_metric = (density / np.mean(density) - sparsity) / (np.abs(density / np.mean(density) - sparsity) + 1e-8)

    # Introduce a diversity factor based on the average density
    average_density = np.mean(density)
    diversity_factor = density / (average_density + 1e-8)

    # Create a heuristic by combining the balance metric and diversity factor
    heuristic = balance_metric * diversity_factor

    # Introduce a penalty for items with extremely low sparsity (i.e., heavy items)
    sparsity_penalty = np.exp(-sparsity)

    # Incorporate a penalty for high density to avoid overly dense knapsacks
    density_penalty = np.exp(-density)

    # Combine all the metrics into the heuristic
    heuristic = heuristic * sparsity_penalty * density_penalty

    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic)
    if max_heuristic > 0:
        heuristic /= max_heuristic

    # Ensure that the heuristics are non-negative
    heuristic[heuristic < 0] = 0

    return heuristic
```
