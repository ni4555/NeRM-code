```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate the normalized density
    density = prize / (np.sum(weight, axis=1) + 1e-8)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / (np.max(weight, axis=1) + 1e-8)
    
    # Integrate additional metrics such as the sum of weights
    weight_sum = np.sum(weight, axis=1)
    
    # Calculate the dominance score, prioritizing high density and low sparsity
    dominance_score = density - sparsity
    
    # Calculate the sparsity score, encouraging diversity
    sparsity_score = 1 / (sparsity + 1e-8)
    
    # Create a heuristic value by blending dominance and sparsity scores
    heuristic_value = dominance_score + sparsity_score
    
    # Normalize by the maximum heuristic value
    normalized_heuristic = heuristic_value / (np.max(heuristic_value) + 1e-8)
    
    # Introduce a randomness factor to ensure diversity in solutions
    random_factor = np.random.rand(len(prize))
    
    # Create a final heuristic by combining the normalized heuristic with the randomness factor
    heuristic = normalized_heuristic * random_factor
    
    # Prune low-quality heuristics and set them to zero
    heuristic[weight_sum < 1e-8] = 0
    
    return heuristic
```
