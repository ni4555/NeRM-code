```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Calculate utility based on prize per unit weight
    utility = prize / np.sum(weight, axis=1)
    # Calculate the relative utility by normalizing against the maximum utility
    relative_utility = utility / np.max(utility)
    # Calculate the standard deviation of the weights, normalized by the sum of weights
    normalized_stddev = np.std(weight, axis=1) / np.sum(weight, axis=1)
    # Combine the normalized relative utility and the normalized standard deviation
    heuristics = relative_utility * normalized_stddev
    # Adjust heuristics to penalize items that are too similar or too dissimilar
    # to the average item by adding a penalty for high deviation
    average_stddev = np.mean(normalized_stddev)
    heuristics += (average_stddev - normalized_stddev) ** 2
    # Normalize the heuristics to ensure they are between 0 and 1
    heuristics = heuristics / np.sum(heuristics)
    return heuristics
```
