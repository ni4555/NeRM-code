```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    n, m = prize.shape[0], weight.shape[1]
    
    # Normalize the prize to the sum of weights of each item
    normalized_prize = prize / np.sum(weight, axis=1) + 1e-8
    
    # Calculate the density of each item
    density = normalized_prize / (np.max(weight, axis=1) + 1e-8)
    
    # Calculate the sparsity of each item
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1) + 1e-8
    
    # Calculate a balance metric between density and sparsity
    balance_metric = (density - sparsity) / (density + sparsity + 1e-8)
    
    # Calculate a dominated metric that combines density and balance metric
    dominated_metric = density * balance_metric
    
    # Prune dominated solutions by removing those with a dominated metric below the 95th percentile
    dominated_prune_threshold = np.percentile(dominated_metric, 95)
    pruned_dominated_metric = np.where(dominated_metric >= dominated_prune_threshold, dominated_metric, 0)
    
    # Introduce randomness to encourage diversity and avoid local optima
    random_factor = np.random.rand(n) * 0.1 + 0.05
    
    # Calculate a diversity metric based on the sparsity
    diversity_metric = sparsity * (1 - sparsity)
    
    # Combine the heuristics using a weighted sum, giving preference to non-dominated items
    heuristics = (0.6 * pruned_dominated_metric +
                  0.2 * density +
                  0.1 * random_factor +
                  0.1 * diversity_metric)
    
    # Normalize heuristics to ensure the sum is close to 1
    normalized_heuristics = heuristics / np.sum(heuristics)
    
    # Maintain diversity by setting low density and low diversity items to zero
    low_density_threshold = np.percentile(density, 5)
    low_diversity_threshold = np.percentile(diversity_metric, 5)
    normalized_heuristics[np.where(density < low_density_threshold)] = 0
    normalized_heuristics[np.where(diversity_metric < low_diversity_threshold)] = 0
    
    return normalized_heuristics
```
