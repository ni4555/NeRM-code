```python
import numpy as np

def heuristics_v2(prize: np.ndarray, weight: np.ndarray) -> np.ndarray:
    # Initialize heuristics array with zeros
    heuristic = np.zeros(prize.shape)
    
    # Calculate the normalized density
    density = prize / np.sum(weight, axis=1)
    
    # Calculate the normalized sparsity
    sparsity = np.sum(weight, axis=1) / np.max(weight, axis=1)
    
    # Introduce randomness with a bias towards higher density
    random_factor = np.random.rand(len(prize))
    random_factor = random_factor * (1 - sparsity) + sparsity
    
    # Integrate a diversity factor based on the standard deviation of density
    diversity_factor = 1 / (1 + np.log(1 + np.std(density)))
    
    # Create a balanced heuristic value
    heuristic_value = density * random_factor * diversity_factor
    
    # Normalize the heuristic to avoid dominance
    heuristic_value = heuristic_value / np.max(heuristic_value)
    
    # Set heuristics of zero weight items to a small value to maintain diversity
    zero_weight_items = np.where(np.sum(weight, axis=1) < 1e-8)
    heuristic[zero_weight_items] = 1e-8
    
    return heuristic
```
