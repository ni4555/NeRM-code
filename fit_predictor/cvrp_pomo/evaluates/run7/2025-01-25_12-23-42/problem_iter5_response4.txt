```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    # The load factor is now subtracted from the heuristic after a logarithmic transformation
    # This encourages the exploration of longer paths on less loaded nodes and penalizes heavily loaded nodes
    heuristics = norm_distances - torch.log(1 + (node_loads * norm_distances).sum(-1))
    return heuristics
```
