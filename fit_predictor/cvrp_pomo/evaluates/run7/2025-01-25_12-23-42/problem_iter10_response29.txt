```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Combine the normalized distance with the load factor, giving higher heuristics to less loaded nodes
    heuristics = norm_distances - (node_loads * norm_distances).sum(-1)
    
    # Add random noise to encourage exploration
    noise = torch.randn_like(heuristics) * 0.1
    
    # Increase noise if the heuristic values are too similar to each other
    heuristic_std = torch.std(heuristics)
    if heuristic_std < 0.01:
        noise *= 1.5
    
    heuristics += noise
    
    # Limit the heuristics to ensure they are within a reasonable range
    heuristics = torch.clamp(heuristics, min=-2.0, max=2.0)
    
    # Reduce the heuristics in highly loaded areas to balance exploration
    high_load_mask = node_loads > 0.5  # Assuming a threshold for high load
    heuristics[high_load_mask] *= 0.8
    
    return heuristics
```
