```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    # The load factor is subtracted from the heuristic to discourage visiting heavily loaded nodes
    heuristics = norm_distances - (node_loads * norm_distances).sum(-1)
    
    # Introduce exploration by blending the heuristics with a random noise
    # The noise will be introduced in a more controlled manner to encourage exploration
    noise = torch.randn_like(heuristics) * 0.1
    # Use a dynamic adjustment factor that can be based on the load of the nodes
    noise *= node_loads.unsqueeze(0).expand_as(noise)
    
    # Adjust the heuristics by considering both exploitation and exploration
    heuristics = heuristics * 0.7 + noise * 0.3  # 70% exploitation, 30% exploration
    
    # Ensure that the heuristics maintain a balance between exploitation and exploration
    heuristics = torch.clamp(heuristics, min=-1.0, max=1.0)
    
    return heuristics
```
