```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the cumulative demand matrix
    cumulative_demand = torch.cumsum(demands[:, None], dim=1)
    
    # Calculate the potential cost of visiting each edge
    potential_costs = norm_distances - cumulative_demand
    
    # Normalize the potential costs by the maximum possible reduction in cost
    max_reduction = torch.max(potential_costs)
    normalized_costs = potential_costs / max_reduction
    
    # Adjust the normalized costs based on vehicle load balance
    # Calculate the load at each node by dividing the demand by the sum of demands
    load_factors = demands / demands.sum()
    adjusted_costs = normalized_costs * load_factors
    
    # Invert the adjusted costs to get heuristics (negative values are undesirable)
    heuristics = -adjusted_costs
    return heuristics
```
