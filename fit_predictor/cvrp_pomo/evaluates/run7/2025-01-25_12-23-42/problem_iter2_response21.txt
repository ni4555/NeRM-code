```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic that considers node relationships, optimizes normalization, and adjusts heuristic scales."""
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_threshold = total_demand / len(demands)
    # Calculate the heuristic value based on the inverse distance and demand, weighted by node relationships
    # Use the square of the distance to give a higher penalty to longer distances
    heuristics = (1 / (1 + distance_matrix ** 2)) * (1 - (demands / demand_threshold))
    # Normalize the heuristics to a range that is more sensitive to changes in demand
    max_demand = demands.max()
    min_demand = demands.min()
    heuristics = (heuristics - min_demand) / (max_demand - min_demand)
    return heuristics
```
