```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Apply a logarithmic transformation to the normalized distances
    log_norm_distances = torch.log(1 + norm_distances)
    
    # Calculate the weighted load by combining the logarithmic transformed distance and the load factor
    # This encourages the exploration of longer paths on less loaded nodes
    weighted_load = (node_loads * log_norm_distances).sum(-1)
    
    # Apply a non-linear transformation to the weighted load to prioritize exploration
    # over exploitation
    transformed_load = torch.relu(weighted_load) - 0.5 * torch.abs(weighted_load)
    
    # Subtract the transformed load from the logarithmic normalized distances to create the heuristics
    heuristics = log_norm_distances - transformed_load
    return heuristics
```
