```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    heuristics = norm_distances - (node_loads * norm_distances).sum(-1)
    
    # Introduce a dynamic load-aware penalty that increases with the load
    dynamic_penalty = 1 + (demands.max() - demands) / demands.max()
    heuristics = heuristics * dynamic_penalty
    
    # Add a noise factor to balance exploration and exploitation
    noise = torch.randn_like(heuristics) * 0.1  # 0.1 is a small scaling factor for the noise
    
    # Normalize the heuristics to ensure they are within a reasonable range
    heuristics = torch.clamp(heuristics, min=-2.0, max=2.0)
    
    return heuristics
```
