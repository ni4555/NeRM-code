```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands = demands.unsqueeze(1)  # Ensure demands is a 2D tensor for broadcasting
    distance_matrix_squared = distance_matrix ** 2
    min_distance = torch.min(distance_matrix, dim=1)[0] ** 2  # Squared distance to nearest customer
    max_demand = torch.max(demands, dim=0)[0]  # Maximum demand in the network
    
    # Calculate a heuristic that emphasizes demand and leverages squared distances
    heuristic = demands - (distance_matrix_squared * demands)
    
    # Cap the negative values to prevent unreasonably low heuristics
    heuristic = torch.clamp_min(heuristic, min=0)
    
    return heuristic
```
