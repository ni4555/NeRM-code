```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic by considering demand, distance, and avoiding revisits."""
    total_demand = demands.sum()
    demand_threshold = total_demand / len(demands)
    # Calculate the heuristic value based on the difference in distance and demand
    heuristics = (1 / (1 + distance_matrix)) * (1 - (demands / demand_threshold))
    # Avoid revisits by penalizing edges leading back to the depot
    revisits_penalty = (distance_matrix == 0) * -1e6
    heuristics += revisits_penalty
    # Balance load by penalizing edges leading to a high load
    load_balance_penalty = (demands > demand_threshold) * -1e6
    heuristics += load_balance_penalty
    return heuristics
```
