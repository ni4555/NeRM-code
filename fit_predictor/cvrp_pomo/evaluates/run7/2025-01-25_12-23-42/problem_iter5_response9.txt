```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristic based on the combination of normalized distance, load, and a temperature factor
    # The temperature factor encourages exploration by favoring longer distances if the load is low
    temperature_factor = torch.exp(-norm_distances / norm_distances.max())
    heuristics = (temperature_factor * node_loads * norm_distances).sum(-1)
    return heuristics
```
