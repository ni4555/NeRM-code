```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Incorporate exploration by using a sigmoid function to balance between the load and distance
    load_weight = torch.sigmoid(node_loads * 5)  # 5 is a tunable parameter for exploration
    
    # Combine the normalized distance and the load factor using the sigmoid weight
    heuristics = (1 - load_weight) * norm_distances - load_weight * (node_loads * norm_distances).sum(-1)
    return heuristics
```
