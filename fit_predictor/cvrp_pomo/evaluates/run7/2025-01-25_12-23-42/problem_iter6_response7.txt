```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Apply logarithmic transformation to the load factor to encourage exploration of less loaded nodes
    log_loads = torch.log(1 + node_loads)
    
    # Incorporate a weight on heavily loaded nodes by subtracting the logarithmic load factor
    # This discourages visiting heavily loaded nodes
    heuristics = norm_distances - log_loads
    return heuristics
```
