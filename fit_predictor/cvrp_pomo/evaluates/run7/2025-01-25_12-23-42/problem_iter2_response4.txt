```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    demand_threshold = total_demand / len(demands)
    
    # Initialize the heuristics matrix
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the heuristics for each edge
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                edge_demand = demands[i] + demands[j]
                if edge_demand <= demand_threshold:
                    distance_cost = distance_matrix[i, j]
                    demand_cost = demand_threshold - edge_demand
                    heuristics_matrix[i, j] = -distance_cost - demand_cost
                else:
                    heuristics_matrix[i, j] = -distance_cost
    
    return heuristics_matrix
```
