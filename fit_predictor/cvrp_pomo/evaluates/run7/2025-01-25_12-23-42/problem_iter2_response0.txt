```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improve the heuristic by considering demand, distance, and their interaction."""
    total_demand = demands.sum()
    demand_threshold = total_demand / len(demands)
    # Initialize the heuristic matrix
    heuristics = torch.zeros_like(distance_matrix)
    # Iterate over each node pair
    for i in range(len(demands)):
        for j in range(len(demands)):
            if i != j:
                # Calculate the heuristic based on distance, demand, and threshold
                heuristics[i, j] = (1 / (1 + distance_matrix[i, j])) * (demands[j] / demand_threshold)
                # Invert the value if the demand of the customer at j is higher than the threshold
                if demands[j] > demand_threshold:
                    heuristics[i, j] = -heuristics[i, j]
    return heuristics
```
