```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate the cumulative demand matrix
    cumulative_demand = torch.cumsum(demands[:, None], dim=1)
    
    # Calculate the cumulative distance matrix
    cumulative_distance = torch.cumsum(distance_matrix, dim=1)
    
    # Calculate the nearest customer distances for each node
    nearest_customer_distance = torch.min(distance_matrix, dim=1)[0]
    
    # Calculate the maximum demand in the network
    max_demand = torch.max(demands)
    
    # Calculate the average distance to the nearest customer
    average_nearest_distance = torch.mean(nearest_customer_distance)
    
    # Use a non-linear transformation to weigh the distance and demand
    # Weigh distance more heavily for edges with larger distances
    # Weigh demand more heavily for edges with larger demands
    heuristics = (distance_matrix / average_nearest_distance) ** 2 * (demands / max_demand) ** 2
    
    # Normalize the heuristics to ensure they are in a usable range
    max_heuristic = torch.max(heuristics)
    heuristics = heuristics / max_heuristic
    
    return heuristics
```
