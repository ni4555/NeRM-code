```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    demand_threshold = total_demand / len(demands)
    # Initialize the heuristic matrix with a high positive value for all edges
    heuristics = torch.full_like(distance_matrix, fill_value=1e6)
    # Iterate over each edge, considering the depot (node 0) and customers
    for i in range(len(demands) + 1):
        for j in range(1, len(demands) + 1):
            # Calculate the heuristic based on distance, demand, and threshold
            if demands[j - 1] <= demand_threshold:
                heuristics[i, j] = 1 / (1 + distance_matrix[i, j])
            else:
                heuristics[i, j] = -1 / (1 + distance_matrix[i, j])
    return heuristics
```
