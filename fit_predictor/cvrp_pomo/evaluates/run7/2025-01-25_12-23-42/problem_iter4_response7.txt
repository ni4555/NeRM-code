```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    demand_threshold = total_demand / len(demands)
    # Calculate the heuristic value considering demand and distance
    heuristics = (1 / (1 + distance_matrix)) * (1 - demands / demand_threshold)
    # Apply penalties for edges that have high demand relative to the threshold
    penalties = (demands / demand_threshold > 1).float()
    heuristics += penalties
    # Normalize the heuristics to ensure non-negative values
    heuristics = torch.clamp(heuristics, min=0)
    return heuristics
```
