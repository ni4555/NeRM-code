```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the cumulative demand matrix, ignoring the last column (return to depot)
    cumulative_demand = torch.cumsum(demands[:, :-1], dim=1)
    
    # Calculate the cumulative distance matrix, ignoring the last column (return to depot)
    cumulative_distance = torch.cumsum(distance_matrix[:, :-1], dim=1)
    
    # Calculate the potential load at each node
    potential_loads = cumulative_demand / cumulative_distance
    
    # Combine load and distance to form the heuristic value
    heuristics = (potential_loads + norm_distances) / 2
    
    return heuristics
```
