```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    # The load factor is subtracted from the heuristic to discourage visiting heavily loaded nodes
    heuristics = norm_distances - (node_loads * norm_distances).sum(-1)
    
    # Introduce exploration and exploitation by adding a dynamic noise
    # The noise will encourage the algorithm to explore alternative paths, and
    # a scaling factor will balance exploration with exploitation
    noise = torch.randn_like(heuristics) * (0.1 + torch.abs(node_loads)).unsqueeze(1)
    heuristics += noise
    
    # Normalize the heuristics to ensure dynamic load balancing
    heuristics /= (heuristics.abs() + 1e-8)
    
    # Clamp the heuristics to maintain a reasonable range for the heuristic values
    heuristics = torch.clamp(heuristics, min=-5.0, max=5.0)
    
    return heuristics
```
