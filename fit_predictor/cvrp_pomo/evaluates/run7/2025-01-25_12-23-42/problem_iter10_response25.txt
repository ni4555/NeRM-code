```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    
    # Normalize distances to be within [0, 1]
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate load factor for each customer node
    load_factors = demands.unsqueeze(1) / total_demand
    
    # Calculate heuristics based on normalized distances and load factors
    heuristics = (norm_distances - (load_factors * norm_distances).sum(-1))
    
    # Add penalty for demand extremes
    demand_extremes_penalty = (demands > 1.5 * total_demand / n).float() * 0.5
    
    # Add diversity penalty to avoid consecutive visits to the same node
    diversity_penalty = (torch.arange(n) == torch.arange(n)[:, None]).float() * 0.05
    
    # Combine the heuristics and penalties
    heuristics = heuristics - demand_extremes_penalty - diversity_penalty
    
    # Saturate the heuristics to be in the range of [-1, 1]
    heuristics = torch.clamp(heuristics, -1, 1)
    
    return heuristics
```
