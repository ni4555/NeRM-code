```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    # Calculate the cumulative demand
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    # Calculate the potential of each edge considering the cumulative demand and normalized distance
    potential = -cumulative_demand * (cumulative_demand > total_demand).float() * norm_distances
    # Normalize the potential to ensure all values are within the range [0, 1]
    potential = torch.clamp(potential, min=0, max=1)
    return potential
```
