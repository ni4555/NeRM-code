```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    # Here we use a non-linear scaling to give more weight to heavily loaded nodes
    heuristics = norm_distances - (node_loads * norm_distances).sum(-1)
    heuristics = torch.log(1 + heuristics)  # Non-linear scaling using logarithm
    
    # Introduce an exploration element by adding a random noise to the heuristics
    # The noise will encourage the algorithm to explore alternative paths
    noise = torch.randn_like(heuristics) * 0.1  # 0.1 is a small scaling factor for the noise
    heuristics += noise
    
    # Introduce a balancing factor that adapts dynamically based on the load
    balancing_factor = (demands.sum() - demands) / demands.sum()
    heuristics *= balancing_factor.unsqueeze(1)
    
    # Limit the heuristics to ensure they are within a reasonable range
    heuristics = torch.clamp(heuristics, min=-2.0, max=2.0)
    
    return heuristics
```
