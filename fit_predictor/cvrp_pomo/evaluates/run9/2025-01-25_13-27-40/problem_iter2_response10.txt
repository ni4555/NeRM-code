```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Calculate the potential of each edge based on the capacity of the vehicle
    potential = torch.exp(-distance_matrix * 0.1) * capacity_mask
    # Apply a penalty to edges leading to nodes with high demand
    high_demand_penalty = demands * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Incorporate distance into the heuristic value
    distance_penalty = distance_matrix
    # Combine potential, distance penalty, and high demand penalty to create the heuristic values
    heuristics = potential - distance_penalty - high_demand_penalty
    # Clip the values to be within the range of [-1, 1] to ensure the heuristic values are within acceptable bounds
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    return heuristics
```
