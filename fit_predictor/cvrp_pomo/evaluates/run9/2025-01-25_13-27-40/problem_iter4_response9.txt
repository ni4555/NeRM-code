```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply exponential decay to the distance matrix
    distance_decay = torch.exp(-distance_matrix * 0.1)
    # Apply a penalty to edges leading to nodes with high demand
    high_demand_penalty = demands * ~capacity_mask
    # Combine potential and penalty to create the heuristic values
    heuristics = distance_decay - high_demand_penalty
    return heuristics
```
