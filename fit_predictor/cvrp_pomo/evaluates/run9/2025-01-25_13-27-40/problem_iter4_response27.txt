```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply a non-linear decay to the distance matrix to weight the edges
    decayed_distances = torch.exp(-distance_matrix * 0.1)
    # Calculate the potential of each edge based on the capacity of the vehicle
    potential = decayed_distances * capacity_mask
    # Apply a non-linear penalty to edges leading to nodes with high demand
    high_demand_penalty = torch.pow(demands, 1.5) * ~capacity_mask
    # Combine potential and penalties to create the heuristic values
    heuristics = potential - high_demand_penalty
    return heuristics
```
