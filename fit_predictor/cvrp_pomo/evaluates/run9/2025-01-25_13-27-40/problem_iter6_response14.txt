```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply a logarithmic decay to the distance matrix to weight the edges
    decayed_distances = torch.log(distance_matrix + 1)  # Adding 1 to avoid log(0)
    # Apply a non-linear scaling to the distances to give more weight to short distances
    distance_potential = 1 / (1 + decayed_distances)
    # Apply a penalty to edges leading to nodes with high demand
    high_demand_penalty = (demands - demands[0]) * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Combine the potential, distance potential, and high demand penalty to create the heuristic values
    heuristics = distance_potential - high_demand_penalty
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    return heuristics
```
