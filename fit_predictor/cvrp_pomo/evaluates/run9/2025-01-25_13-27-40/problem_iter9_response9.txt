```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply an exponential decay to the distance matrix to weight the edges
    decayed_distances = torch.exp(-distance_matrix * 0.1)
    # Normalize the decayed distances and clamp between 0 and 1
    normalized_distances = torch.clamp(decayed_distances, 0, 1)
    # Apply a logarithmic scale to the demand vector to increase the penalty for high demands
    log_demands = torch.log(demands)
    # Use the symmetry of the distance matrix to apply a penalty to outgoing edges from the depot
    symmetry_penalty = 1 - normalized_distances
    # Combine the potential, distance potential, demand penalty, and symmetry penalty to create the heuristic values
    heuristics = normalized_distances - log_demands - symmetry_penalty
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    return heuristics
```
