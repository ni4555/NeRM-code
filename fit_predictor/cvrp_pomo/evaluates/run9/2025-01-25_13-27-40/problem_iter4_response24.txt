```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Calculate the potential of each edge based on the capacity of the vehicle
    potential = torch.exp(-distance_matrix * 0.1) * capacity_mask
    # Introduce demand-related penalties
    high_demand_penalty = demands * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Non-linear scaling for the penalties based on the current demand
    non_linear_penalty = torch.pow(demands, 1.5) * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Apply the penalties, subtracting from potential
    combined_penalty = high_demand_penalty + non_linear_penalty
    # Create the heuristic values
    heuristics = potential - combined_penalty
    # The heuristic for the depot to the first node is set to zero since it's the starting point
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0
    return heuristics
```
