```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    cum_demands = torch.cumsum(demands, dim=0)
    capacity_mask = cum_demands < demands[0]
    
    potential = torch.exp(-distance_matrix * 0.1) * capacity_mask
    
    high_demand_penalty = demands * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    
    # Non-linear scaling of demand for penalties
    demand_penalty = torch.pow(demands, 2) * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    
    over_capacity_penalty = torch.where(capacity_mask, torch.zeros_like(distance_matrix), cum_demands - demands[0])
    
    heuristics = potential - high_demand_penalty - demand_penalty - over_capacity_penalty
    
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0
    
    return heuristics
```
