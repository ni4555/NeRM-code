```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply a non-linear scaling to the distances
    non_linear_scaled_distances = (distance_matrix ** 2) / (distance_matrix ** 2 + 1)
    # Apply a penalty that is inversely proportional to the capacity left
    capacity_penalty = 1 / (1 + cum_demands)
    # Apply the symmetry heuristic by considering both directions of the edge
    symmetry_heuristic = torch.where(capacity_mask, non_linear_scaled_distances, non_linear_scaled_distances.mean(dim=0))
    # Combine the potential, distance potential, and high demand penalty to create the heuristic values
    heuristics = symmetry_heuristic - capacity_penalty
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    return heuristics
```
