```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Calculate the potential of each edge based on the distance and capacity
    potential = torch.exp(-torch.sqrt(distance_matrix)) * capacity_mask
    # Apply a penalty to edges leading to nodes with high demand
    high_demand_penalty = demands * (1 - capacity_mask)
    # Create the heuristic values combining potential and penalty
    heuristics = potential - high_demand_penalty
    # The heuristic from the start node to the first customer is set to 0
    heuristics[0, 1] = 0
    # The heuristic from the first customer to the start node is the negative of the distance
    heuristics[1, 0] = -torch.sqrt(distance_matrix[0, 1])
    return heuristics
```
