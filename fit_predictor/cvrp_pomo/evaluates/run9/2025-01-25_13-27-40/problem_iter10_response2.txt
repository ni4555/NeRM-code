```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply a logarithmic decay to the distance matrix to weight the edges
    decayed_distances = torch.log(distance_matrix + 1)
    # Scale the demands logarithmically to reflect non-linear impact on the cost
    scaled_demands = torch.log(demands + 1)
    # Calculate a penalty that increases as the ratio of the cumulative demand to the capacity increases
    demand_penalty = scaled_demands / demands[0]
    # The penalty is higher when the vehicle is about to exceed its capacity
    demand_penalty = torch.where(capacity_mask, torch.zeros_like(demand_penalty), demand_penalty)
    # The penalty also considers the cumulative demand, so the higher the demand at a node, the higher the penalty
    demand_penalty *= cum_demands
    # The penalty decreases as we move from the start node to customer nodes, as capacity increases
    demand_penalty *= torch.arange(demands.size(0)).float()
    # Combine the penalties with the decayed distances to create the heuristic values
    heuristics = decayed_distances - demand_penalty
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Clamp the heuristics to ensure they do not exceed the range [-1, 1]
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    # The heuristic for the depot to the first node is set to zero since it's the starting point
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0
    return heuristics
```
