```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply a non-linear scaling to the distances to give higher weights to shorter distances
    scaled_distances = distance_matrix ** (1 / 3)
    # Create a high-demand penalty that decreases with capacity utilization
    high_demand_penalty = (demands / demands[0]) ** 2
    high_demand_penalty = torch.where(capacity_mask, high_demand_penalty, torch.zeros_like(high_demand_penalty))
    # Use a logarithmic transformation to the potential, which penalizes large distances more
    distance_potential = torch.log(scaled_distances + 1)
    # Combine the potential, distance potential, and high demand penalty to create the heuristic values
    heuristics = distance_potential - high_demand_penalty
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    return heuristics
```
