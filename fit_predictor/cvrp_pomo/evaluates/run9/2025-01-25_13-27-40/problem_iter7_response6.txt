```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply a non-linear scaling to the distance matrix to weight the edges
    non_linear_scaled_distances = distance_matrix ** 0.8
    # Apply a demand-aware penalty to edges leading to nodes with high demand
    demand_penalty = demands * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Use symmetry to reduce the complexity by only considering one direction of the edges
    symmetry_factor = torch.where(capacity_mask, torch.ones_like(demands), torch.zeros_like(demands))
    # Combine the non-linear scaled distances, demand penalty, and symmetry factor to create the heuristic values
    heuristics = non_linear_scaled_distances - demand_penalty + symmetry_factor
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    return heuristics
```
