```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    cum_demands = torch.cumsum(demands, dim=0)
    capacity_mask = cum_demands < demands[0]
    decayed_distances = torch.exp(-distance_matrix * 0.1)
    distance_potential = 1 / (1 + decayed_distances)
    capacity_penalty = torch.max(torch.zeros_like(distance_potential), 1 / (demands[0] - cum_demands))
    high_demand_penalty = (demands - demands[0]) * capacity_penalty
    heuristics = distance_potential - high_demand_penalty
    # Ensure that the first node is not visited twice by setting its heuristic to 0
    heuristics[0] = 0
    return heuristics
```
