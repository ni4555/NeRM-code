```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Apply exponential decay to the distance matrix for better weight distribution
    distance_decay = torch.exp(-distance_matrix * 0.1)
    # Integrate penalties for high demands directly into potential computation
    high_demand_penalty = -demands * (1 - (cum_demands < demands[0]).float())
    # Combine the potential, distance potential, and high demand penalty to create the heuristic values
    heuristics = distance_decay + high_demand_penalty
    return heuristics
```
