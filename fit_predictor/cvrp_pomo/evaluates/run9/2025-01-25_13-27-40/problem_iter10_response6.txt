```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    cum_demands = torch.cumsum(demands, dim=0)
    capacity_mask = cum_demands < demands[0]
    decayed_distances = torch.log(distance_matrix + 1)
    demand_potential = 1 / (1 + demands)
    potential = decayed_distances * demand_potential
    high_demand_penalty = demands * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    heuristics = potential - high_demand_penalty
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    return heuristics
```
