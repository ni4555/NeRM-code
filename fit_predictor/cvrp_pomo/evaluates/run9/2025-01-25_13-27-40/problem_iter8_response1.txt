```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    
    # Apply a non-linear scaling to the demand to enhance the impact of high demands
    non_linear_demand = demands ** 1.5
    
    # Apply an exponential decay to the distance matrix to weight the edges
    decayed_distances = torch.exp(-distance_matrix * 0.1)
    
    # Apply a linearly decreasing potential with increasing distance
    distance_potential = decayed_distances / (decayed_distances + 1)
    
    # Apply a demand-aware penalty to edges leading to nodes with high demand
    demand_penalty = non_linear_demand * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    
    # Combine the potential, distance potential, and demand penalty to create the heuristic values
    heuristics = distance_potential - demand_penalty
    
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    
    # The heuristic for the depot to the first node is set to zero since it's the starting point
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0
    
    return heuristics
```
