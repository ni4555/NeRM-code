```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Calculate the potential of each edge based on the capacity of the vehicle
    potential = torch.exp(-distance_matrix * 0.1) * capacity_mask
    # Apply a penalty to edges leading to nodes with high demand
    high_demand_penalty = demands * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Calculate a penalty for leaving the current node if it is already full
    full_node_penalty = cum_demands - demands[0]
    # Combine potential, high demand penalty, and full node penalty to create the heuristic values
    heuristics = potential - high_demand_penalty - full_node_penalty
    # Set the heuristic from the depot to the first node to zero since it's the starting point
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0
    return heuristics
```
