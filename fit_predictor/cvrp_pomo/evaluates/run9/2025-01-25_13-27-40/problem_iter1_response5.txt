```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the total distance from the depot to each node
    total_distance = distance_matrix.sum(dim=1)
    
    # Create a matrix to store the heuristics
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the heuristics for each edge
    for i in range(1, len(demands)):
        # For each node, calculate the cost of going from the previous node to the current node
        edge_cost = distance_matrix[i, i-1] - (cumulative_demand[i-1] / demands[i])
        
        # If the edge is promising, add a positive value; otherwise, add a negative value
        heuristics[i, i-1] = edge_cost
        heuristics[i-1, i] = -edge_cost
    
    # The heuristic for the depot to the first node is set to zero since it's the starting point
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0
    
    return heuristics
```
