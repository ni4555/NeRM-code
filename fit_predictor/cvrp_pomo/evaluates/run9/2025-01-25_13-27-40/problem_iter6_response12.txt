```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply non-linear scaling to the distance matrix to weight the edges
    scaled_distances = torch.pow(distance_matrix, 0.5)
    # Use a logarithmic potential to focus on critical factors and increase weight with distance
    distance_potential = torch.log(scaled_distances + 1)
    # Calculate a potential based on remaining capacity to increase attraction of distant nodes
    capacity_potential = (demands - cum_demands) * capacity_mask
    # Apply a penalty to edges leading to nodes with high demand
    high_demand_penalty = (demands - demands[0]) * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Combine the potentials and penalty to create the heuristic values
    heuristics = distance_potential + capacity_potential - high_demand_penalty
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Ensure the depot to the first node has a heuristic of zero
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0
    return heuristics
```
