```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Calculate the potential of each edge based on the capacity of the vehicle
    potential = torch.exp(-distance_matrix * 0.1) * capacity_mask
    # Introduce a non-linear scaling factor for distance and demand
    distance_factor = 1 / (1 + distance_matrix * 0.1)
    demand_factor = demands / (demands.max() + 1e-5)
    # Apply a penalty to edges leading to nodes with high demand
    high_demand_penalty = demand_factor * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Combine potential, non-linear scaling, and penalty to create the heuristic values
    heuristics = potential * distance_factor - high_demand_penalty
    return heuristics
```
