```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the savings matrix using the savings algorithm
    savings_matrix = distance_matrix[:, 1:] - distance_matrix[1:, :] + (normalized_demands.unsqueeze(1) * distance_matrix.sum(axis=1, keepdim=True))
    # Adjust for negative values by adding the maximum value to all elements
    savings_matrix = savings_matrix + torch.max(savings_matrix).unsqueeze(0).unsqueeze(1)
    # Exclude the diagonal elements as they represent the depot to itself
    savings_matrix = savings_matrix - torch.diag(savings_matrix)
    return savings_matrix
```
