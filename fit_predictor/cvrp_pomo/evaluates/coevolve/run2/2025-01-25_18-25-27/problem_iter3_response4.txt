```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Initialize heuristics matrix with negative values for all edges
    heuristics_matrix = -distance_matrix
    # Calculate row-wise sum and add the product of normalized demand and this sum
    heuristics_matrix = heuristics_matrix + normalized_demands.unsqueeze(1) * distance_matrix.sum(axis=1, keepdim=True)
    # Apply a sigmoid function to balance global and local criteria, and ensure positive values
    heuristics_matrix = torch.sigmoid(heuristics_matrix)
    return heuristics_matrix
```
