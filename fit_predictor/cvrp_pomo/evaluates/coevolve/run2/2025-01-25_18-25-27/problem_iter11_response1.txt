```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))

    # Introduce a diversity factor to encourage exploration
    diversity_factor = torch.rand(n)

    # Introduce a penalty for infeasibilities and infeasible demand overflow
    penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    overflow_penalty = torch.where(demands > 1.0, -1.0, 0.0)
    infeasibility_penalty = penalty + overflow_penalty

    # Combine the heuristics with the diversity factor and penalties
    heuristics_matrix += diversity_factor * heuristics_matrix + infeasibility_penalty
    return heuristics_matrix
```
