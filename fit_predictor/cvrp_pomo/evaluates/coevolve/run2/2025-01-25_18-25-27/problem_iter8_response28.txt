```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n

    # Initial heuristic calculation with penalties for infeasibilities
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    heuristics_matrix += infeasibility_penalty

    # Mutation process to introduce randomness and refine heuristics
    mutation_rate = 0.1
    for _ in range(int(n * n * mutation_rate)):
        i, j = torch.randint(0, n, (2,), dtype=torch.long)
        if i != j and distance_matrix[i, j] > 0:  # Ensure we're not penalizing the depot edge
            # Calculate potential gain for swapping i and j
            potential_gain = distance_matrix[i, j] - (normalized_demands[i] * distance_matrix[j, j] + avg_demand * distance_matrix[i, i])
            if potential_gain > 0:
                heuristics_matrix[i, j] += potential_gain
                heuristics_matrix[j, i] += potential_gain

    # Introduce randomness
    random_factor = (torch.rand(n) * 2 - 1) * (heuristics_matrix > 0).float()
    heuristics_matrix += random_factor

    return heuristics_matrix
```
