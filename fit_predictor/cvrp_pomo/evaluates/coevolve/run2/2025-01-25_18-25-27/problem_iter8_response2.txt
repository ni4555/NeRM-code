```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.mean()
    demand_sum_row = normalized_demands.sum(dim=0, keepdim=True)
    demand_sum_col = normalized_demands.sum(dim=1, keepdim=True)
    heuristics_matrix = distance_matrix - (normalized_demands * demand_sum_row + avg_demand * demand_sum_col)
    # Vectorized infeasibility penalty
    infeasible_edges = demands > 1.0
    heuristics_matrix[infeasible_edges] -= 1000
    return heuristics_matrix
```
