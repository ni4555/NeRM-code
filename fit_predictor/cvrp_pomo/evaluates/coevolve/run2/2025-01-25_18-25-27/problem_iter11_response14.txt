```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    
    # Introduce randomness for exploration and exploit neighborhood structures
    random_factor = (torch.rand(n) * 2 - 1) * (heuristics_matrix > 0).float()
    
    # Adjust heuristics based on the proximity to demand peaks
    demand_peaks = torch.argsort(torch.abs(demands - avg_demand))[1:]  # Exclude the depot
    peak_factor = torch.zeros(n)
    for peak in demand_peaks:
        peak_factor[peak] = 1 / (1 + torch.exp(-heuristics_matrix[peak]))
    peak_factor = peak_factor / peak_factor.sum()
    
    # Combine the factors and introduce a penalty for infeasibilities
    feasible_edges = (heuristics_matrix > 0).float()
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    heuristics_matrix = heuristics_matrix + random_factor + peak_factor * (1 - feasible_edges) + infeasibility_penalty * (1 - feasible_edges)
    return heuristics_matrix
```
