```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    # Calculate the average of the heuristics to penalize infeasibilities
    avg_heuristic = (distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))).mean()
    # Apply a penalty for edges that have a normalized demand significantly above the average
    penalized_edges = (normalized_demands - avg_demand).abs() > 0.5
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    heuristics_matrix[penalized_edges] -= avg_heuristic * 2  # Example penalty factor
    return heuristics_matrix
```
