```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    demand_variance = torch.var(normalized_demands)
    
    # Initial heuristic based on normalized demands and average demand
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    
    # Introduce diversity for exploration
    perturbation_scale = 0.5  # Example scale, can be adjusted
    perturbation = (torch.rand(n) * 2 - 1) * perturbation_scale * (demand_variance / normalized_demands)
    perturbation = torch.clamp(perturbation, min=-perturbation_scale, max=perturbation_scale)
    heuristics_matrix += perturbation
    
    # Introduce penalties for infeasibilities and high variance in demand
    feasibility_mask = (heuristics_matrix > 0).float()
    infeasibility_penalty = torch.where(feasibility_mask <= 0, -1.0, 0.0)
    demand_variance_penalty = torch.where(torch.abs(normalized_demands - avg_demand) > demand_variance, -1.0, 0.0)
    
    # Combine penalties with the heuristics matrix
    combined_penalties = infeasibility_penalty + demand_variance_penalty
    heuristics_matrix += combined_penalties
    
    # Normalize heuristics to have a meaningful range and scale
    min_heuristic = heuristics_matrix.min()
    max_heuristic = heuristics_matrix.max()
    heuristics_matrix = (heuristics_matrix - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Penalize edges that do not meet the vehicle capacity requirements
    final_heuristics_matrix = heuristics_matrix
    final_heuristics_matrix[torch.abs(normalized_demands) > 1.0] *= -1
    
    return final_heuristics_matrix
```
