Fitness: 23.265913009643555

Description:
The new heuristic for the Capacitated Vehicle Routing Problem (CVRP) is designed to address the complexities of capacity-constrained route optimization. This approach merges a state-of-the-art genetic algorithm with a dynamic, neighborhood-based local search technique. Key strategies include:

1. **Hybrid Evolutionary Genetic Algorithm**: Utilizing adaptive genetic operators with a selection method based on fitness-probability ranking, a dynamic recombination rate crossover, and a selective mutation scheme to maintain solution diversity and prevent premature convergence.

2. **Advanced Local Search**: Incorporating a hybrid swap-insertion heuristic and a 2-opt variant that focuses on capacity adherence and route length optimization. This is complemented by a real-time penalty system to prevent overloading while enhancing route efficiency.

3. **Normalization and Constraint Handling**: Implementing a normalization technique for customer demand scaling and a constraint-aware optimization process to allocate capacities, balancing route efficiency and overloading risk.

4. **Adaptive Diversity Management**: Dynamically adjusting neighborhood structures and employing a feedback mechanism to identify and exploit promising solution regions, ensuring balanced exploration of the solution landscape and avoiding local optima stagnation.

The objective is to optimize route planning for distance efficiency while strictly adhering to vehicle capacity constraints, resulting in computationally efficient, high-quality solutions that are both robust and reliable.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Normalize demands by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the potential value for each edge as a negative of the demand
    # This will give negative values for promising edges (since we want to minimize distance)
    potential = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)

    # Add distance to the potential to make longer distances less promising
    heuristics = potential + distance_matrix

    return heuristics