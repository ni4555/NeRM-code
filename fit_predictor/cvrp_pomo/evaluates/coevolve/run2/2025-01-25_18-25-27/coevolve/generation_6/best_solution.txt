Fitness: 23.265913009643555

Description:
This advanced heuristic tackles the Capacitated Vehicle Routing Problem by intertwining an enhanced evolutionary algorithm with an advanced local search routine. Central to our solution is the adaptive evolution process, characterized by:

- An intelligent selection mechanism that fosters solution diversity through fitness-probability ranking.
- A dynamic crossover scheme that adjusts recombination rates to maintain an optimal balance between exploration and exploitation.
- A selective mutation method that preserves diversity without compromising vehicle capacities.

Our local search strategy is further fortified with:

- A hybrid swap-insertion heuristic that optimizes route capacities and distances by strategically swapping customer nodes.
- An innovative 2-opt variant that concurrently shortens routes and adheres to capacity constraints using a real-time penalty system.

Enhancing our approach, we implement a normalization technique to equalize customer demands and a constraint-aware process to maximize efficiency. Furthermore, we adaptively manage the neighborhood and diversity, ensuring comprehensive exploration of the solution space and avoiding local optima traps. This combined approach delivers a robust, efficient framework that optimizes both route efficiency and capacity adherence, outpacing traditional methods in both quality and computational efficiency.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize demands
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate heuristic for each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate heuristic value based on distance and demand
                heuristic_value = distance_matrix[i, j] - normalized_demands[i] - normalized_demands[j]
                heuristic_matrix[i, j] = heuristic_value
    
    return heuristic_matrix