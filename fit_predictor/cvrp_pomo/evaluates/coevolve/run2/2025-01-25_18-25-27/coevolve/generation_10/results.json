{
  "generation": 10,
  "description": "The proposed heuristic for the Capacitated Vehicle Routing Problem (CVRP) integrates a targeted hybrid evolutionary strategy with a precise local search module. The hybrid evolutionary component utilizes a state-of-the-art genetic algorithm with adaptive selection, efficient crossover, and selective mutation to explore the solution space effectively. The local search module focuses on neighborhood exploration using a swap-insertion heuristic and a capacity-aware 2-opt algorithm, ensuring both route length optimization and capacity adherence. The heuristic incorporates a normalization technique to level the demand of customer nodes and applies a constraint-aware optimization process to efficiently manage vehicle capacities. Additionally, the algorithm dynamically adjusts the neighborhood structure based on evolutionary progress to balance exploration and exploitation. This streamlined approach provides a clear and direct route to efficient and capacity-constrained solutions, avoiding unnecessary complexity and ensuring a robust optimization process.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Get the number of customers (excluding the depot)\n    num_customers = distance_matrix.size(0) - 1\n    \n    # Calculate the total demand\n    total_demand = demands.sum()\n    \n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / total_demand\n    \n    # Create a vector of all ones for the number of possible routes\n    ones = torch.ones(num_customers, dtype=torch.float32)\n    \n    # Initialize the heuristics matrix with negative values\n    heuristics = -torch.ones_like(distance_matrix)\n    \n    # For each customer, calculate the heuristic based on distance and demand\n    for i in range(num_customers):\n        # Calculate the difference in normalized demand\n        demand_diff = normalized_demands - normalized_demands[i]\n        \n        # Calculate the heuristic as a function of distance and demand difference\n        heuristics[:, i] = distance_matrix[:, i] + demand_diff\n    \n    return heuristics",
      "fitness": 23.25006866455078,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_9.txt",
      "code_file": "coevolve\\generation_10\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the heuristic values based on normalized demands and distance\n    # Here we use a simple heuristic: the sum of the normalized demand and the distance\n    # multiplied by a small constant to weigh the demand more than the distance.\n    # This is a simplistic approach and may be replaced with more complex heuristics.\n    constant = 0.1\n    heuristic_values = normalized_demands * constant + distance_matrix\n    \n    # To make the heuristic positive for promising edges and negative for undesirable ones,\n    # we subtract the minimum heuristic value from all the heuristic values.\n    min_heuristic = heuristic_values.min()\n    heuristic_values -= min_heuristic\n    \n    return heuristic_values",
      "fitness": 23.265913009643555,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_0.txt",
      "code_file": "coevolve\\generation_10\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the normalized demand for the depot node\n    total_capacity = torch.sum(demands)\n    normalized_demand = demands / total_capacity\n    \n    # Initialize a matrix of zeros with the same shape as the distance matrix\n    heuristics_matrix = torch.zeros_like(distance_matrix)\n    \n    # Calculate the heuristics using the normalized demands and distance matrix\n    # This is a simple heuristic based on the normalized demand and distance\n    heuristics_matrix = -distance_matrix * (normalized_demand - 1)\n    \n    # Apply a normalization technique to ensure all values are within a certain range\n    # (e.g., between 0 and 1), here we use the Min-Max normalization\n    min_val = torch.min(heuristics_matrix)\n    max_val = torch.max(heuristics_matrix)\n    heuristics_matrix = (heuristics_matrix - min_val) / (max_val - min_val)\n    \n    return heuristics_matrix",
      "fitness": 23.28392219543457,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_1.txt",
      "code_file": "coevolve\\generation_10\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the heuristic value for each edge\n    # The heuristic is the negative of the demand (promising to include edges with higher demand)\n    # and the distance (undesirable to include edges with higher distance)\n    heuristics = -normalized_demands * distance_matrix\n    \n    # Normalize the heuristics to ensure that they are within a certain range\n    # This step can be omitted if not required\n    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())\n    \n    return heuristics",
      "fitness": 23.29420280456543,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_5.txt",
      "code_file": "coevolve\\generation_10\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    vehicle_capacity = demands.sum() / n  # Assuming the total demand is evenly distributed among vehicles\n    \n    # Normalize demands by vehicle capacity\n    normalized_demands = demands / vehicle_capacity\n    \n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n    \n    # Calculate the heuristic values based on the normalized demands\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # For each edge (i, j), calculate the heuristic value\n                # This is a simple heuristic that considers the demand of the customer node\n                heuristic_value = -normalized_demands[j]\n                heuristic_matrix[i, j] = heuristic_value\n    \n    return heuristic_matrix",
      "fitness": 23.302827835083008,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_8.txt",
      "code_file": "coevolve\\generation_10\\code_8.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    vehicle_capacity = demands.sum()\n\n    # Normalize the customer demands by the total vehicle capacity\n    normalized_demands = demands / vehicle_capacity\n\n    # Create a matrix to hold the heuristics\n    heuristics_matrix = torch.zeros_like(distance_matrix)\n\n    # Calculate the initial heuristic value for each edge\n    # The heuristic is the negative of the normalized demand of the destination node\n    heuristics_matrix[:, 1:] = -normalized_demands[1:]\n\n    # Add the heuristic value for the edge from the depot to the first customer\n    heuristics_matrix[0, 1] = -normalized_demands[1]\n\n    return heuristics_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_3.txt",
      "code_file": "coevolve\\generation_10\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Normalize the demands to the total vehicle capacity\n    normalized_demands = demands / total_capacity\n    \n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n    \n    # Calculate the heuristic values based on normalized demands\n    heuristic_matrix = distance_matrix * normalized_demands\n    \n    # Apply a normalization technique to level the demand of customer nodes\n    # We can use min-max normalization for this purpose\n    min_demand = normalized_demands.min()\n    max_demand = normalized_demands.max()\n    normalized_demand = (normalized_demands - min_demand) / (max_demand - min_demand)\n    \n    # Adjust the heuristic values to be within the range of [0, 1]\n    heuristic_matrix = (heuristic_matrix - min_demand) / (max_demand - min_demand)\n    \n    return heuristic_matrix",
      "fitness": 23.33746910095215,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_6.txt",
      "code_file": "coevolve\\generation_10\\code_6.py"
    }
  ]
}