```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Initialize the heuristics matrix with the distance matrix
    heuristics_matrix = torch.clone(distance_matrix)
    # Add a penalty for edges to the depot
    heuristics_matrix[:, 0] = torch.zeros_like(heuristics_matrix[:, 0])
    heuristics_matrix[0, :] = torch.zeros_like(heuristics_matrix[0, :])
    # Adjust the heuristics matrix based on the normalized demands
    penalty_factor = (1 - normalized_demands.unsqueeze(0)) * (1 - normalized_demands.unsqueeze(1))
    penalty_factor = torch.clamp(penalty_factor, min=0)  # Avoid negative values
    heuristics_matrix += penalty_factor * distance_matrix
    # Introduce a synergy factor to balance global and local criteria
    synergy_factor = torch.rand(n) * 0.1  # Randomly initialized synergy factor
    # Modify the heuristics matrix based on a local capacity adherence heuristic
    local_heuristics = heuristics_matrix - (synergy_factor * torch.abs(heuristics_matrix))
    # Further refine the heuristics matrix to ensure capacity adherence
    capacity_penalty = heuristics_matrix.clone()
    for i in range(1, n):
        # Calculate the cumulative demand along the rows
        row_cumulative_demand = torch.cumsum(demands[i:] * penalty_factor[i:], dim=0)
        # Apply capacity penalty for exceeding the vehicle capacity
        capacity_penalty[i, row_cumulative_demand > 1] = -1000
    # Combine the synergy and capacity adherence heuristics
    combined_heuristics = local_heuristics + capacity_penalty
    return combined_heuristics
```
