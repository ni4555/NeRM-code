```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix with additional considerations for capacity
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True))
    # Incorporate a capacity constraint factor
    capacity_factor = 1 - (demands / demands.sum())
    heuristics_matrix *= capacity_factor[:, None]
    return heuristics_matrix
```
