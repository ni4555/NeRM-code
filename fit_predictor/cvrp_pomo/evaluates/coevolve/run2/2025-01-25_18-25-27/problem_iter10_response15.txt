```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    
    # Introduce penalties and adjust for infeasibility
    penalty = torch.rand(n)
    feasible_edges = (heuristics_matrix > 0).float()
    random_factor = (torch.rand(n) * 2 - 1) * feasible_edges
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    heuristics_matrix += random_factor + infeasibility_penalty * (1 - feasible_edges)
    
    # Mutate the heuristic values to encourage further exploration
    mutation_factor = torch.rand(n)
    mutation = mutation_factor * (heuristics_matrix * 2 - 1) * feasible_edges
    heuristics_matrix += mutation
    
    # Adjust for overall balance between exploration and exploitation
    exploration_factor = torch.rand(n)
    exploration = exploration_factor * (heuristics_matrix * 2 - 1) * feasible_edges
    heuristics_matrix += exploration
    
    return heuristics_matrix
```
