```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))

    # Introduce a penalty for edges that do not respect capacity constraints
    capacity_penalty = (demands > 1.0).float() * -1.0

    # Use a more structured randomness and a refined penalty for infeasibilities
    random_factor = (torch.rand(n) * 2 - 1) * (1 - (capacity_penalty > 0))
    feasible_edges = (heuristics_matrix > 0).float()
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    heuristics_matrix += random_factor + infeasibility_penalty * (1 - feasible_edges)

    # Introduce a local refinement factor to enhance capacity adherence
    local_refinement = torch.rand(n) * (1 - feasible_edges)
    heuristics_matrix += local_refinement

    return heuristics_matrix
```
