```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n

    # Calculate a heuristic value for each edge
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))

    # Introduce randomness with a bias towards edges that are currently feasible
    random_factor = (torch.rand(n) * 2 - 1) * (heuristics_matrix > 0).float()

    # Apply a penalty for infeasibilities
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    feasible_edges = (heuristics_matrix > 0).float()

    # Update the heuristics matrix by adding the random factor and the infeasibility penalty
    heuristics_matrix += random_factor + infeasibility_penalty * (1 - feasible_edges)

    # Normalize the heuristics matrix to ensure it is properly scaled
    heuristics_matrix /= heuristics_matrix.abs().max()

    return heuristics_matrix
```
