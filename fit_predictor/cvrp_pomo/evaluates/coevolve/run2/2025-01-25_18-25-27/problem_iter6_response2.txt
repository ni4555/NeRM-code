```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.mean()
    demand_variance = (normalized_demands - avg_demand) ** 2
    demand_variance_penalty = demand_variance.mean()

    # Compute the heuristics matrix
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))

    # Introduce randomness and a penalty for infeasibilities
    penalty = torch.rand(n)
    feasible_edges = (heuristics_matrix > 0).float()
    random_factor = (torch.rand(n) * 2 - 1) * feasible_edges
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    randomness_factor = (torch.rand(n) * 2 - 1) * feasible_edges

    # Adjust heuristics based on demand variance
    heuristics_matrix += randomness_factor + infeasibility_penalty * (1 - feasible_edges) - demand_variance_penalty * feasible_edges
    return heuristics_matrix
```
