```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix using a modified version of the savings algorithm
    heuristics_matrix = torch.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i):
            # Calculate the difference in demand between the two nodes
            demand_diff = demands[i] - demands[j]
            # Calculate the maximum of distances from the nodes to all other nodes
            max_distance_from_i = distance_matrix[i].max()
            max_distance_from_j = distance_matrix[j].max()
            # Calculate the heuristic based on the savings
            heuristics_matrix[i][j] = max_distance_from_i - max_distance_from_j - demand_diff
            heuristics_matrix[j][i] = heuristics_matrix[i][j]  # Since the matrix is symmetric
    return heuristics_matrix
```
