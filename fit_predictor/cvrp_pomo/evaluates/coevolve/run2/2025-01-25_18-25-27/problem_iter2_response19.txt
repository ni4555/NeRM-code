```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the cumulative demand
    cumulative_demands = torch.cumsum(demands, dim=0)
    # Compute the heuristics matrix using a modified Dijkstra's heuristic
    heuristics_matrix = torch.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i):
            heuristics_matrix[i][j] = distance_matrix[i][j] + \
                (cumulative_demands[i] - cumulative_demands[j]) * (cumulative_demands.max() - cumulative_demands[j])
    return heuristics_matrix
```
