```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    
    # Vectorized implementation to penalize infeasibilities by adding the demand to the distance if the demand is greater than the average
    # This encourages the selection of edges that lead to vehicles not exceeding their capacity
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + 
                                          (normalized_demands > avg_demand) * distance_matrix.sum(axis=0, keepdim=True))
    return heuristics_matrix
```
