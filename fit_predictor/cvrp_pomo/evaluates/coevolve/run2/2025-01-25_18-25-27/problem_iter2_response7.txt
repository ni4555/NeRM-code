```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix using a combination of demand-based and distance-based weighting
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True))
    # Adjust the matrix based on the distance to the depot to prioritize closer nodes
    heuristics_matrix += (distance_matrix[:, 0] * normalized_demands)
    # Enhance the heuristics matrix by incorporating a term that considers the demand's contribution to the total
    # demand per vehicle, encouraging selection of nodes with lower demand per vehicle
    demand_per_vehicle = (1 - normalized_demands) * demands
    heuristics_matrix -= demand_per_vehicle
    return heuristics_matrix
```
