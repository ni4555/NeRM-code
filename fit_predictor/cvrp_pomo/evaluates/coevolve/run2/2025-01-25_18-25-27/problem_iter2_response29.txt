```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Initialize the heuristics matrix with the distance matrix
    heuristics_matrix = distance_matrix.clone()
    # Add a penalty for edges to the depot
    heuristics_matrix[:, 0] = torch.zeros_like(heuristics_matrix[:, 0])
    heuristics_matrix[0, :] = torch.zeros_like(heuristics_matrix[0, :])
    # Adjust the heuristics matrix based on the normalized demands
    row_max = heuristics_matrix.max(dim=1, keepdim=True)[0]
    col_max = heuristics_matrix.max(dim=0, keepdim=True)[0]
    heuristics_matrix += (row_max - col_max) * demands.unsqueeze(1)
    heuristics_matrix *= (1 - normalized_demands)
    return heuristics_matrix
```
