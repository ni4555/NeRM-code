```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n

    # Initial heuristic matrix based on demand normalization and a random factor
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    
    # Randomly mutate a subset of the matrix to introduce diversity in the population
    mutation_rate = 0.05  # Assuming a 5% mutation rate
    indices_to_mutate = torch.randperm(n)[:int(n * mutation_rate)]
    mutation_amplitude = 1  # The amount by which we mutate each entry

    heuristics_matrix[indices_to_mutate] += torch.rand(len(indices_to_mutate)) * 2 - 1  # Random shift

    # Introduce penalties for infeasibility and normalize the matrix
    penalty = torch.rand(n)
    feasible_edges = (heuristics_matrix > 0).float()
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    heuristics_matrix += penalty * feasible_edges + infeasibility_penalty * (1 - feasible_edges)

    return heuristics_matrix
```
