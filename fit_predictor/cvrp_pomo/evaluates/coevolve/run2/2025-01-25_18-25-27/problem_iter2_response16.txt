```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix using a non-linear transformation
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True)) * (1 - torch.exp(-distance_matrix))
    # Apply a sigmoid transformation to map values between 0 and 1
    heuristics_matrix = torch.sigmoid(heuristics_matrix)
    return heuristics_matrix
```
