```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands_sum = demands.sum()
    normalized_demands = demands / demands_sum
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True))
    penalty = -1e5
    heuristics_matrix[torch.arange(n), torch.arange(n)] = penalty
    capacity_bonus = 1e-3
    heuristics_matrix += torch.where(demands[:, None] <= 1, capacity_bonus, 0)
    return heuristics_matrix
```
