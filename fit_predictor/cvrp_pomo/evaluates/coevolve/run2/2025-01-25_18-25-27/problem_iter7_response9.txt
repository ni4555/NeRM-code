```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n

    # Define a penalty matrix that discourages infeasible edges
    penalty_matrix = torch.where(distance_matrix <= 0, -float('inf'), 0)

    # Generate a random factor for random walk
    random_factor = (torch.rand(n) * 2 - 1) * penalty_matrix

    # Compute the initial heuristics
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))

    # Combine penalties and random walk into the heuristics matrix
    heuristics_matrix += random_factor + penalty_matrix
    return heuristics_matrix
```
