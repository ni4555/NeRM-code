```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    
    # Incorporate demand-based and distance-based heuristics
    demand_heuristics = (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) - avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    distance_heuristics = -distance_matrix
    
    # Introduce randomness and a penalty for infeasibilities
    penalty = torch.rand(n)
    feasible_edges = (distance_heuristics > 0).float()
    random_factor = (torch.rand(n) * 2 - 1) * feasible_edges
    infeasibility_penalty = torch.where(distance_heuristics <= 0, -1.0, 0.0)
    
    # Combine heuristics with penalties and randomness
    heuristics_matrix = demand_heuristics + distance_heuristics + random_factor + infeasibility_penalty * (1 - feasible_edges)
    
    # Ensure that the heuristics matrix is non-negative
    heuristics_matrix = torch.clamp_min(heuristics_matrix, min=0)
    
    return heuristics_matrix
```
