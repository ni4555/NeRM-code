```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.6
    distance_weight = 0.4
    
    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    lower_bound = torch.min(torch.diagonal(distance_matrix), torch.min(distance_matrix[:, 1:], torch.arange(len(demands))[None, :]))
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.6) * distance_weight
    
    # Adapt penalties for nodes with high demand and for long distances
    edge_potential = edge_potential - (edge_potential * 0.15 * (demands > 1.5).float())
    edge_potential = edge_potential + (edge_potential * 0.1 * (distance_matrix < 10).float())
    
    # Add a penalty for edges that go from the depot to the depot
    edge_potential[distance_matrix == 0] = -float('inf')
    
    return edge_potential
```
