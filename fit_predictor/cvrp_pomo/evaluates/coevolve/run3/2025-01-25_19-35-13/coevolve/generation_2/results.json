{
  "generation": 2,
  "description": "Enhancing the resolution of the Capacitated Vehicle Routing Problem (CVRP) by implementing a hybrid heuristic algorithm that combines advanced optimization techniques. The goal is to find an optimal route for a fleet of vehicles starting and ending at a central depot, visiting all customer nodes without exceeding the vehicle capacity constraints. Each node has a specific demand, and the route must satisfy the condition that the sum of demands visited by each vehicle does not exceed its capacity limit. The hybrid algorithm should integrate a metaheuristic, such as Genetic Algorithm (GA), with local search strategies like 2-opt and swap to ensure both computational efficiency and solution quality. The metaheuristic will be employed to explore the solution space broadly and quickly converge to a near-optimal solution, while the local search strategies will refine the solution by making incremental improvements. Problem-specific constants to consider include vehicle capacities, the number of vehicles, and the distances between nodes. To maintain scalability, normalization techniques will be applied to the node demands and distances to ensure a fair comparison across different instances of the problem.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure the demands are normalized by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the heuristics\n    # For this example, we use a simple heuristic where we subtract the demand from the distance\n    # to get a negative value for promising edges. The smaller the distance, the more promising the edge.\n    heuristics = distance_matrix - (normalized_demands * distance_matrix)\n\n    # Clip the values to ensure no negative heuristics\n    heuristics = torch.clamp(heuristics, min=0)\n\n    return heuristics",
      "fitness": 23.265913009643555,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_1.txt",
      "code_file": "coevolve\\generation_2\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Compute the heuristic values based on normalized demands and distance\n    # Here we use a simple heuristic: the more distant the edge, the less promising it is\n    # and the more demand it has, the more promising it is.\n    heuristics = -distance_matrix + normalized_demands.unsqueeze(1) * distance_matrix\n    \n    return heuristics",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_0.txt",
      "code_file": "coevolve\\generation_2\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the sum of demands normalized by the total vehicle capacity\n    total_demand = demands.sum()\n    demand_normalized = demands / total_demand\n    \n    # Create a matrix to store heuristics values\n    heuristics_matrix = torch.zeros_like(distance_matrix)\n    \n    # Populate the heuristics matrix\n    # For each edge (i, j), calculate the heuristics as:\n    # 1 - (distance from i to j / max possible distance) * (1 - demand_normalized[j])\n    for i in range(distance_matrix.size(0)):\n        for j in range(distance_matrix.size(1)):\n            if i != j:  # Avoid the depot itself\n                heuristics_matrix[i, j] = 1 - (distance_matrix[i, j] / distance_matrix.max()) * (1 - demand_normalized[j])\n    \n    return heuristics_matrix",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_2.txt",
      "code_file": "coevolve\\generation_2\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity (assuming all vehicles have the same capacity)\n    total_capacity = demands.sum()\n    \n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the heuristics as a function of normalized demands and distance\n    # Here we use a simple heuristic where the lower the distance, the higher the heuristic value\n    # and we penalize nodes with higher normalized demand\n    heuristics = -distance_matrix + normalized_demands\n    \n    return heuristics",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_8.txt",
      "code_file": "coevolve\\generation_2\\code_8.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the sum of demands to normalize them\n    total_demand = demands.sum()\n    \n    # Normalize the demands\n    normalized_demands = demands / total_demand\n    \n    # Create a matrix with the same shape as the distance matrix initialized to zero\n    heuristics_matrix = torch.zeros_like(distance_matrix)\n    \n    # Calculate the heuristics for each edge\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            if i != j:\n                # Calculate the heuristic value for the edge (i, j)\n                heuristics_matrix[i, j] = -distance_matrix[i, j] + normalized_demands[i] * normalized_demands[j]\n    \n    return heuristics_matrix",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_9.txt",
      "code_file": "coevolve\\generation_2\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the sum of demands\n    total_demand = demands.sum()\n    \n    # Normalize demands by the total vehicle capacity\n    normalized_demands = demands / total_demand\n    \n    # Calculate the heuristic values based on normalized demands\n    # Negative values for undesirable edges (e.g., higher distances)\n    # Positive values for promising edges (e.g., lower distances)\n    heuristics = -distance_matrix + normalized_demands.unsqueeze(1) * distance_matrix\n    \n    return heuristics",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_10.txt",
      "code_file": "coevolve\\generation_2\\code_10.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the sum of demands to normalize\n    total_demand = demands.sum()\n    \n    # Normalize the demands\n    normalized_demands = demands / total_demand\n    \n    # Create a matrix of 1s to represent all possible edges\n    edge_matrix = torch.ones_like(distance_matrix)\n    \n    # Subtract the normalized demand from each edge to get a heuristic value\n    # This heuristic value is negative if the edge is not promising and positive if it is\n    heuristics = edge_matrix - normalized_demands[:, None] - normalized_demands[None, :]\n    \n    # Replace infinite distances with 0s to avoid division by zero in normalization\n    heuristics = torch.clamp(heuristics, min=0)\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_3.txt",
      "code_file": "coevolve\\generation_2\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the negative of the normalized demands to use as the heuristic\n    # Negative values indicate undesirable edges (high demand)\n    negative_heuristics = -normalized_demands\n    \n    # Calculate the sum of distances in the distance matrix\n    # This will be used to normalize the distance-based heuristic\n    distance_sum = distance_matrix.sum()\n    \n    # Normalize the distance matrix by the sum of distances\n    # This will be used as the heuristic for edges with low demand\n    normalized_distance_matrix = distance_matrix / distance_sum\n    \n    # Combine the demand-based and distance-based heuristics\n    # We add the two heuristics to combine their information\n    combined_heuristics = negative_heuristics + normalized_distance_matrix\n    \n    return combined_heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_6.txt",
      "code_file": "coevolve\\generation_2\\code_6.py"
    }
  ]
}