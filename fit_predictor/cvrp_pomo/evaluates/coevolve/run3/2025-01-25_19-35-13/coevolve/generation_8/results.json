{
  "generation": 8,
  "description": "Design an advanced hybrid optimization algorithm for the Capacitated Vehicle Routing Problem (CVRP) that synergizes a dynamic demand-driven heuristic with a balanced distance-demand evaluation. The algorithm should incorporate a Genetic Algorithm for global exploration, coupled with dynamic programming for local route optimization and a neighborhood search for solution refinement. This combination aims to optimize the trade-off between computational tractability and solution quality.\n\nThe algorithm will implement the following innovative features:\n1. A demand normalization technique to uniformly evaluate node demands.\n2. A multi-objective fitness function that dynamically adjusts route selection, favoring those that minimize total distance while respecting vehicle capacities.\n3. An adaptive epsilon management technique to handle edge cases and ensure numerical robustness.\n\nKey algorithmic elements include:\n- A Genetic Algorithm variant with a demand-aware selection process.\n- A dynamic programming-based sub-route optimization module.\n- A neighborhood search algorithm for iterative solution enhancement.\n\nThe algorithm's design will emphasize the seamless integration of metaheuristic and local search strategies, ensuring a well-balanced exploration and exploitation of the solution space. The ultimate goal is to achieve a solution that minimizes the total route distance while adhering to capacity constraints, demonstrating an optimal balance between efficiency and optimality.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Initialize the heuristics matrix with zeros\n    heuristics_matrix = torch.zeros_like(distance_matrix)\n    \n    # Calculate the negative demand heuristic\n    heuristics_matrix += -normalized_demands.unsqueeze(1)\n    heuristics_matrix += -normalized_demands.unsqueeze(0)\n    \n    # Calculate the distance heuristic\n    heuristics_matrix += distance_matrix\n    \n    # Ensure that the diagonal elements (self-loops) are not included\n    heuristics_matrix.fill_diagonal_(0)\n    \n    return heuristics_matrix",
      "fitness": 23.265913009643555,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_4.txt",
      "code_file": "coevolve\\generation_8\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total demand\n    total_demand = demands.sum()\n    \n    # Normalize demands by the total vehicle capacity\n    normalized_demands = demands / total_demand\n    \n    # Calculate the negative demand heuristic\n    negative_demand_heuristic = -normalized_demands\n    \n    # Calculate the distance heuristic\n    distance_heuristic = distance_matrix\n    \n    # Combine the two heuristics by element-wise addition\n    combined_heuristic = negative_demand_heuristic + distance_heuristic\n    \n    return combined_heuristic",
      "fitness": 23.265913009643555,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_9.txt",
      "code_file": "coevolve\\generation_8\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the heuristics as a weighted sum of distance and demand\n    # Here, we use a simple linear combination, but this can be adjusted as needed\n    alpha = 0.5  # Weight for distance\n    beta = 0.5   # Weight for demand\n    heuristics = alpha * distance_matrix + beta * normalized_demands\n\n    # Adjust heuristics to have negative values for undesirable edges and positive for promising ones\n    # We do this by subtracting the maximum value from all elements to ensure non-negative heuristics\n    heuristics -= heuristics.max()\n\n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_0.txt",
      "code_file": "coevolve\\generation_8\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure that demands are normalized by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Compute the heuristic values: distance multiplied by the normalized demand\n    heuristics = distance_matrix * normalized_demands\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_1.txt",
      "code_file": "coevolve\\generation_8\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the distance-demand heuristic\n    # For each edge, the heuristic is the negative of the distance multiplied by the normalized demand\n    # This encourages edges with lower distance and higher demand to be included in the solution\n    heuristics = -distance_matrix * normalized_demands\n\n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_5.txt",
      "code_file": "coevolve\\generation_8\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    vehicle_capacity = demands.sum()\n    \n    # Normalize the demands to have a sum of 1\n    normalized_demands = demands / vehicle_capacity\n    \n    # Create a demand matrix where each element is the product of the corresponding elements\n    # from the distance matrix and the normalized demand vector.\n    demand_matrix = distance_matrix * normalized_demands.unsqueeze(1)\n    \n    # The heuristic matrix will be negative for undesirable edges and positive for promising ones.\n    # We can use the negative of the demand matrix as a heuristic, where lower values are better.\n    # We add a small constant to avoid zeros for numerical stability.\n    heuristic_matrix = -demand_matrix + 1e-8\n    \n    return heuristic_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_6.txt",
      "code_file": "coevolve\\generation_8\\code_6.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Demand normalization\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n\n    # Evaluate each edge\n    for i in range(distance_matrix.size(0)):\n        for j in range(distance_matrix.size(1)):\n            if i != j:\n                # Calculate the edge evaluation based on distance and normalized demand\n                edge_evaluation = distance_matrix[i][j] * normalized_demands[i]\n                # Assign the evaluation to the corresponding edge in the heuristic matrix\n                heuristic_matrix[i][j] = edge_evaluation\n\n    return heuristic_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_7.txt",
      "code_file": "coevolve\\generation_8\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / total_capacity\n    \n    # Initialize the heuristics matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n    \n    # Calculate the distance-demand evaluation for each edge\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            if i != j:  # Skip the diagonal (no self-loops)\n                # The heuristic value is the negative of the normalized demand multiplied by the distance\n                # This encourages selecting edges with lower demand first\n                heuristics[i, j] = -normalized_demands[i] * distance_matrix[i, j]\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_11.txt",
      "code_file": "coevolve\\generation_8\\code_11.py"
    }
  ]
}