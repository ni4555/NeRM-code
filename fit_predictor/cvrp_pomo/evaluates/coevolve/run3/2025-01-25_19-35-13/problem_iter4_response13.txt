```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand to normalize
    total_demand = demands.sum()
    
    # Normalize the demands to have the sum of all demands equal to the vehicle capacity
    normalized_demands = demands / total_demand
    
    # Compute the potential for each edge based on distance and demand
    # Use dynamic weight adjustments and more nuanced transformations
    epsilon = 1e-8  # Small positive constant to avoid division by zero
    
    # Calculate the influence of distance on potential
    distance_weight = torch.exp(-torch.log(1 + distance_matrix) / (1 + torch.log(distance_matrix + epsilon)))
    
    # Calculate the influence of demand on potential
    demand_weight = torch.pow(normalized_demands, 1.5) / (1 + torch.pow(normalized_demands, 1.5))
    
    # Combine the influence of distance and demand
    edge_potential = distance_weight * demand_weight
    
    # Apply a penalty for high demands and a bonus for short distances
    edge_potential = edge_potential - (edge_potential * 0.1 * (demands > 1.5).float())
    edge_potential = edge_potential + (edge_potential * 0.05 * (distance_matrix < 10).float())
    
    return edge_potential
```
