```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.7
    distance_weight = 0.3
    
    # Apply dynamic programming to find a lower bound on the cost
    dp = torch.zeros((len(demands), len(demands)))
    for d in range(1, len(demands)):
        for s in range(d):
            dp[d, s] = dp[s, max(0, d-2)] + distance_matrix[s, d]
    
    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight
    
    # Introduce a penalty for high normalized demand
    demand_penalty = (normalized_demands > 0.5).float() * -0.1
    
    # Introduce a penalty for high distances
    distance_penalty = (distance_matrix > 20).float() * -0.1
    
    # Combine the penalties with the heuristics
    edge_potential = edge_potential + demand_penalty + distance_penalty
    
    return edge_potential
```
