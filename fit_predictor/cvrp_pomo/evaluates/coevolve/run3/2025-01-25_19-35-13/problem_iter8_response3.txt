```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand

    # Initialize the edge potential matrix
    edge_potential = torch.zeros_like(distance_matrix)

    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2

    # Greedy heuristic: Start from the depot and calculate potential based on remaining capacity
    for i in range(1, n):
        for j in range(1, n):
            if demands[j] <= 1:  # Only consider nodes with zero or low demand
                edge_potential[i, j] = -normalized_demands[j] + distance_matrix[i, j]

    # Nearest neighbor heuristic: For each node, find the closest node that can be added without exceeding capacity
    for i in range(1, n):
        for j in range(1, n):
            if demands[j] <= 1:  # Only consider nodes with zero or low demand
                edge_potential[i, j] = torch.min(edge_potential[i, j], -normalized_demands[j] + distance_matrix[i, j])

    # Integrate adaptive penalties for high-demand nodes and for nodes that are too far
    edge_potential = edge_potential - (edge_potential * demand_weight * (demands > 1.5).float())
    edge_potential = edge_potential + (edge_potential * distance_weight * (distance_matrix > 10).float())

    # Normalize and scale outputs to maintain a consistent range
    max_potential = edge_potential.max()
    min_potential = edge_potential.min()
    edge_potential = (edge_potential - min_potential) / (max_potential - min_potential) * 2 - 1

    return edge_potential
```
