```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand to normalize
    total_demand = demands.sum()
    
    # Normalize the demands to have the sum of all demands equal to the vehicle capacity
    normalized_demands = demands / total_demand
    
    # Compute the potential for each edge based on distance and demand
    epsilon = 1e-8  # Small positive constant to avoid division by zero
    edge_potential = (1 / (distance_matrix + epsilon)) * normalized_demands
    
    # Apply soft constraints by normalizing the edge potential
    max_potential = edge_potential.max()
    min_potential = edge_potential.min()
    normalized_edge_potential = (edge_potential - min_potential) / (max_potential - min_potential)
    
    # Apply non-linear transformations to further balance the effect of distance and demand
    # We use a sigmoid function to ensure that all values are within the range of 0 to 1
    sigmoid = torch.sigmoid(normalized_edge_potential)
    
    # Apply small penalty to edges with low potential to avoid dominance by shorter edges
    small_penalty = 0.05 * (1 - sigmoid)
    
    # Adjust the potential with the penalty and return the result
    edge_potential_adjusted = sigmoid - small_penalty
    
    return edge_potential_adjusted
```
