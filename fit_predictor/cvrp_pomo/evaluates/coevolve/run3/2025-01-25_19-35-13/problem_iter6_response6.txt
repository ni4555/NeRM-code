```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    epsilon = 1e-8  # Small positive constant to avoid division by zero
    
    # Compute the potential for each edge based on normalized demand and inverse distance
    edge_potential = normalized_demands + 1 / (distance_matrix + epsilon)
    
    # Apply a penalty to edges with high normalized demand
    penalty_factor = 0.1  # Factor to penalize high demands
    capacity_penalty = penalty_factor * (normalized_demands > 1.0).float()
    
    edge_potential = edge_potential - capacity_penalty
    
    return edge_potential
```
