```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Initialize the heuristics matrix with zeros
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the total demand to normalize
    total_demand = demands.sum()
    
    # Normalize the demands to have the sum of all demands equal to the vehicle capacity
    normalized_demands = demands / total_demand
    
    # Compute the potential for each edge based on distance and demand
    # Using a weighted sum of distance and demand, with the weight for distance being negative
    # to encourage shorter paths, and the weight for demand being positive to encourage routes
    # with higher demand.
    weight_distance = -0.1
    weight_demand = 0.2
    epsilon = 1e-8  # Small positive constant to avoid division by zero
    edge_potential = weight_demand * normalized_demands + weight_distance * (1 / (distance_matrix + epsilon))
    
    # Apply a soft thresholding to ensure that the heuristics values are within a certain range
    # This step helps to avoid having too many edges with high potential which could lead to suboptimal solutions
    max_potential = edge_potential.max()
    edge_potential = torch.clamp(edge_potential, min=-max_potential * 0.1, max=max_potential * 0.1)
    
    # Further refine the heuristics by penalizing edges that lead to high cumulative demand
    # We use a simple approach of subtracting the demand of the destination node if it's higher than a threshold
    demand_threshold = 0.7  # This threshold can be tuned
    edge_potential = edge_potential - demands * (demands > demand_threshold).float()
    
    return edge_potential
```
