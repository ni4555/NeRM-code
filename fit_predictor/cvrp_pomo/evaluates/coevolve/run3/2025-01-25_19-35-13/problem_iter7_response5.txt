```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.6
    distance_weight = 0.4
    
    # Apply metaheuristic to estimate a potential for each edge
    n, m = distance_matrix.shape
    edge_potential = torch.full((n, m), float('-inf'))
    edge_potential += torch.exp(-torch.logsumexp((normalized_demands[:, None] * demand_weight * 
                                                torch.exp(-distance_matrix / (0.1 * distance_weight))), dim=1))
    
    # Integrate a neighborhood search strategy to improve the heuristic
    for i in range(n):
        for j in range(n):
            if i != j:
                neighbors = torch.argsort(distance_matrix[i, :])
                neighbors = neighbors[1:3]  # Consider only 2 closest neighbors
                edge_potential[i, j] = torch.mean(edge_potential[i, neighbors])
    
    return edge_potential
```
