```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand

    # Define weights for demand and distance heuristics
    demand_weight = 0.6
    distance_weight = 0.4

    # Initialize a matrix to store the cumulative demand
    cumulative_demand = torch.zeros_like(demands)

    # Apply a modified savings algorithm to calculate the potential
    for i in range(1, len(demands)):
        cumulative_demand[i] = torch.clamp(cumulative_demand[i-1] + normalized_demands[i], min=0)
        # Use a penalty for nodes that exceed the vehicle's capacity
        cumulative_demand[i] = torch.where(cumulative_demand[i] > 1, 0, cumulative_demand[i])

    epsilon = 1e-8
    # Calculate the savings based on the cumulative demand and distance
    savings = 2 * (cumulative_demand * (1 / (distance_matrix + epsilon))) ** demand_weight
    savings = savings * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) ** distance_weight * distance_weight

    # Apply a penalty for high demand and long distances
    high_demand_penalty = (demands > 2).float() * 10
    long_distance_penalty = (distance_matrix > 50).float() * 2

    # Adjust the savings by subtracting penalties
    savings = savings - high_demand_penalty - long_distance_penalty

    # Ensure that the depot has the highest priority
    savings[distance_matrix == 0] = 1e10

    return savings
```
