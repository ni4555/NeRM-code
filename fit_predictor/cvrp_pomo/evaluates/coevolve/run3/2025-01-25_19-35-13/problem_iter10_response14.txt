```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand

    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2

    # Apply dynamic programming to find a lower bound on the cost
    n = len(demands)
    dp = torch.zeros((n, n))
    for d in range(1, n):
        for s in range(d):
            dp[d, s] = torch.min(dp[s, d-1] + distance_matrix[s, d], dp[d, s])

    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight

    # Introduce adaptive penalties based on the demand and distance
    demand_threshold = 1.5
    distance_threshold = 10
    edge_potential = edge_potential - (edge_potential * 0.1 * (demands > demand_threshold).float())
    edge_potential = edge_potential + (edge_potential * 0.05 * (distance_matrix < distance_threshold).float())

    # Integrate an adaptive penalty for high demand and long distances
    high_demand_penalty = edge_potential * (demands > demand_threshold).float() * 0.2
    long_distance_bonus = edge_potential * (distance_matrix > distance_threshold).float() * 0.1
    edge_potential = edge_potential - high_demand_penalty + long_distance_bonus

    # Ensure the matrix is symmetric to account for bidirectional travel
    edge_potential = (edge_potential + edge_potential.t()) / 2

    # Add a penalty for edges that exceed vehicle capacity
    max_capacity = 1.0
    edge_potential = edge_potential - (edge_potential * 0.5 * (distance_matrix < max_capacity).float())

    return edge_potential
```
