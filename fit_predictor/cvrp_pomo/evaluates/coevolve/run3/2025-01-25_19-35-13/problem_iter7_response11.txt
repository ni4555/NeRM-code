```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.7
    distance_weight = 0.3
    
    # Integrate a metaheuristic approach by using a greedy insertion
    n_nodes = len(demands)
    solution = torch.zeros(n_nodes)
    capacities = torch.full((n_nodes,), 1.0)  # Each vehicle has a capacity of 1 for simplicity
    
    # Initialize the first vehicle's route with the depot
    solution[0] = 0
    capacities[0] = 0
    
    # Greedy insertion for each node
    for i in range(1, n_nodes):
        best_insertion = -1
        best_cost = float('inf')
        for j in range(1, n_nodes):
            if (capacities[j] + demands[j]) <= 1.0:  # Check if there's capacity
                insertion_cost = distance_matrix[i, j] + distance_matrix[j, 0]
                if insertion_cost < best_cost:
                    best_cost = insertion_cost
                    best_insertion = j
        if best_insertion != -1:
            capacities[best_insertion] += demands[best_insertion]
            solution[i] = best_insertion
    
    # Calculate the cost of the solution
    solution_cost = torch.zeros(n_nodes, n_nodes)
    for i in range(1, n_nodes):
        for j in range(i + 1, n_nodes):
            solution_cost[i, j] = solution_cost[j, i] = distance_matrix[solution[i], solution[j]]
    
    # Convert cost to potential
    edge_potential = -solution_cost
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + 1e-8)) * torch.pow(normalized_demands, demand_weight) * distance_weight
    
    # Add penalties for high demand nodes
    edge_potential = edge_potential - (edge_potential * 0.1 * (demands > 1.5).float())
    
    # Normalize the potential to ensure that all edge potentials are within the same scale
    edge_potential_min = edge_potential.min()
    edge_potential_max = edge_potential.max()
    edge_potential = (edge_potential - edge_potential_min) / (edge_potential_max - edge_potential_min)
    
    return edge_potential
```
