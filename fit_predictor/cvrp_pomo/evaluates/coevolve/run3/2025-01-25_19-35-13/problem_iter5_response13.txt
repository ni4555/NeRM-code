```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2
    
    # Use a simpler DP approach to calculate the lower bound on the cost
    dp = torch.zeros((len(demands), len(demands)))
    for d in range(1, len(demands)):
        for s in range(d):
            dp[d, s] = torch.min(dp[s, d-1] + distance_matrix[s, d], dp[d, s])
    
    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight
    
    # Apply a smoothness heuristic to penalize high variance in edge weights
    smoothness_weight = 0.1
    edge_potential = edge_potential - smoothness_weight * torch.var(edge_potential)
    
    # Add a penalty for edges connecting to highly demanded nodes
    high_demand_penalty = 0.1
    edge_potential = edge_potential - high_demand_penalty * (demands > 1.5).float() * edge_potential
    
    # Add a reward for short distances
    short_distance_reward = 0.05
    edge_potential = edge_potential + short_distance_reward * (distance_matrix < 10).float() * edge_potential
    
    return edge_potential
```
