```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    epsilon = 1e-8
    
    # Apply dynamic programming to find a lower bound on the cost
    n = len(demands)
    dp = torch.zeros((n, n))
    for d in range(1, n):
        for s in range(d):
            dp[d, s] = torch.min(dp[s, d-1] + distance_matrix[s, d], dp[d, s])
    
    # Calculate the potential based on the lower bound and demand
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.8)
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2
    
    # Use dynamic weights based on vehicle load
    vehicle_load_penalty = (demands > 0.5).float() * 0.1
    
    # Add penalties for high vehicle load and for long distances
    edge_potential = edge_potential - vehicle_load_penalty * edge_potential
    edge_potential = edge_potential + (distance_matrix < 20).float() * 0.05 * edge_potential
    
    # Ensure that the depot has the highest priority
    edge_potential[distance_matrix == 0] = 1e10
    
    # Balance demand and distance penalties
    edge_potential = edge_potential * demand_weight + (1 / (distance_matrix + epsilon)) * distance_weight
    
    # Ensure the potential values are within a specific range
    edge_potential = torch.clamp(edge_potential, min=1e-5, max=1e5)
    
    return edge_potential
```
