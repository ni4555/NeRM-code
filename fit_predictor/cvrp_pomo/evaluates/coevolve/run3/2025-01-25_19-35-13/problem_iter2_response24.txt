```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand to normalize
    total_demand = demands.sum()
    
    # Normalize the demands to have the sum of all demands equal to the vehicle capacity
    normalized_demands = demands / total_demand
    
    # The potential for each edge is a weighted sum of demand and distance
    # Higher demand nodes are more promising as they increase the load of the vehicle
    # Lower distance edges are more promising as they save on travel time and fuel
    # We use a small positive constant to avoid division by zero in the denominator
    epsilon = 1e-8
    edge_potential = (normalized_demands + (1 / (distance_matrix + epsilon)))
    
    return edge_potential
```
