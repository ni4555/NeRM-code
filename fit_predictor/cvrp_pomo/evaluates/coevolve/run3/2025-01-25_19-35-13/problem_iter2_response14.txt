```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand to normalize
    total_demand = demands.sum()
    
    # Normalize the demands to have the sum of all demands equal to the vehicle capacity
    normalized_demands = demands / total_demand
    
    # Compute the potential for each edge based on distance and demand
    # Incorporate a penalty for high demands, a bonus for short distances, and an adaptive threshold
    epsilon = 1e-8  # Small positive constant to avoid division by zero
    edge_potential = (1 / (distance_matrix + epsilon)) * normalized_demands
    high_demand_penalty = edge_potential * 0.1 * (demands > 1.5).float()
    short_distance_bonus = edge_potential * 0.05 * (distance_matrix < 10).float()
    edge_potential -= high_demand_penalty
    edge_potential += short_distance_bonus
    
    # Apply a soft thresholding to ensure that the heuristics values are within a certain range
    # Adaptive thresholding based on the maximum demand
    max_demand = demands.max()
    adaptive_threshold = max_demand * 0.2
    edge_potential = torch.clamp(edge_potential, min=-adaptive_threshold, max=adaptive_threshold)
    
    return edge_potential
```
