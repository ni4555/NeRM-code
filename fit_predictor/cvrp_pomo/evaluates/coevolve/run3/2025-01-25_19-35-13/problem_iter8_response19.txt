```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Initialize the dynamic programming table
    dp = torch.zeros((len(demands), len(demands)))
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2
    
    # Perform dynamic programming with capacity constraints
    for capacity in range(1, int(total_demand) + 1):
        for d in range(1, len(demands)):
            for s in range(d):
                if dp[s, d-1] + distance_matrix[s, d] <= capacity:
                    dp[d, s] = min(dp[d, s], dp[s, d-1] + distance_matrix[s, d])
    
    # Calculate the lower bound for each edge based on the DP table
    epsilon = 1e-8
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    
    # Calculate the potential based on the lower bound and demand
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    
    # Dynamically balance the demand and distance weights
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight
    
    # Introduce penalties for high demand and short distances
    for i in range(len(demands)):
        for j in range(len(demands)):
            if demands[i] > 1.5:
                edge_potential[i, j] -= edge_potential[i, j] * 0.1
            if distance_matrix[i, j] < 10:
                edge_potential[i, j] += edge_potential[i, j] * 0.05
    
    # Ensure non-negative potential values
    edge_potential = torch.clamp(edge_potential, min=0)
    
    return edge_potential
```
