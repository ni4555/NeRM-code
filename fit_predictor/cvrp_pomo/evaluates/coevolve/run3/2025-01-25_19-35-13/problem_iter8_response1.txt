```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.6
    distance_weight = 0.4
    
    # Modified dynamic programming approach to find a lower bound
    dp = torch.zeros((len(demands), len(demands)))
    for d in range(1, len(demands)):
        for s in range(d):
            dp[d, s] = dp[s, max(0, d-2)] + distance_matrix[s, d]
    
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    
    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight
    
    # Adaptive penalties for capacity and distance
    capacity_threshold = 1.5  # Example threshold for capacity
    long_distance_threshold = 10  # Example threshold for long distance
    edge_potential = edge_potential - (edge_potential * 0.1 * (demands > capacity_threshold).float())
    edge_potential = edge_potential + (edge_potential * 0.05 * (distance_matrix > long_distance_threshold).float())
    
    # Local search heuristic to consider the impact of adding a node to the route
    for i in range(1, len(demands)):
        for j in range(1, len(demands)):
            if i != j:
                edge_potential[i, j] += 0.1 * (demands[i] + demands[j] <= 1).float()
    
    # Introduce a penalty for high demand variance within a cluster
    max_demand = torch.max(normalized_demands)
    min_demand = torch.min(normalized_demands)
    demand_variance = max_demand - min_demand
    edge_potential = edge_potential - (edge_potential * 0.2 * (torch.clamp(normalized_demands, min=0.8, max=1.2) - 1))
    
    # Ensure potential is within a defined range
    edge_potential = torch.clamp(edge_potential, min=-10.0, max=10.0)
    
    return edge_potential
```
