```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2
    
    # Vectorized dynamic programming to find a lower bound on the cost
    dp = torch.zeros((len(demands), len(demands)))
    for d in range(1, len(demands)):
        dp[d, :] = torch.cat((dp[d-1, 1:], dp[d-1]), dim=0) + distance_matrix[:, d]
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    
    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight
    
    # Shape the search space; adaptively penalize and reward
    edge_potential = edge_potential - (edge_potential * (demands > 1.5).float())
    edge_potential = edge_potential + (edge_potential * (distance_matrix < 10).float())
    
    # Integrate DP bounds; optimize local search for diversity
    edge_potential = edge_potential - (edge_potential * (lower_bound < 0).float())
    
    return edge_potential
```
