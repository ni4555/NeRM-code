```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand

    # Sigmoid functions to introduce non-linear scaling
    epsilon = 1e-8
    distance_sigmoid = 1 / (1 + torch.exp(-0.01 * distance_matrix))
    demand_sigmoid = torch.exp(-0.05 * torch.log(normalized_demands + epsilon))

    # Apply penalties for high demand and bonus for short distance
    penalty_high_demand = (demands > 2).float() * -0.1
    bonus_short_distance = (distance_matrix < 5).float() * 0.05

    # Combine the effects with a weighted sum
    edge_potential = distance_sigmoid * (1 + demand_sigmoid) + penalty_high_demand + bonus_short_distance

    # Ensure that the potential values are within a certain range
    max_potential = edge_potential.max()
    edge_potential = torch.clamp(edge_potential, min=-max_potential * 0.1, max=max_potential * 0.1)

    return edge_potential
```
