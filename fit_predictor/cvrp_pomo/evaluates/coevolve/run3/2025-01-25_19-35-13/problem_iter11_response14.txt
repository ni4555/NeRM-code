```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    total_demand = demands.sum()
    normalized_demands = demands / total_demand

    # Define dynamic weights based on total demand and capacity of each node
    demand_weight = torch.clamp((normalized_demands * 2), max=1)
    distance_weight = 1 - demand_weight

    # Create an adjacency matrix with zeros for diagonal elements
    adj_matrix = torch.triu(torch.ones_like(distance_matrix), diagonal=1)
    
    # Calculate lower bounds for all edges using dynamic programming
    dp = torch.zeros_like(distance_matrix)
    for i in range(1, len(demands)):
        for j in range(i):
            dp[j, i] = torch.min(dp[:, j] + distance_matrix[:, i], demands[i])

    # Initialize the edge potential matrix
    edge_potential = torch.zeros_like(distance_matrix)

    # Calculate the potential for each edge based on lower bound and demand
    edge_potential = (dp / (distance_matrix + 1e-8)) * demand_weight

    # Integrate distance-based incentive into the potential
    edge_potential += (1 / (distance_matrix + 1e-8)) * distance_weight

    # Shape the search space by penalizing high-demand nodes and distant edges
    edge_potential -= torch.where(demands > 1.5, 0.1 * demand_weight, 0)
    edge_potential += torch.where(distance_matrix < 10, 0.05 * distance_weight, 0)

    return edge_potential
```
