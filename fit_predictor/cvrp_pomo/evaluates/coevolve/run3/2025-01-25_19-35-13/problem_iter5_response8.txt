```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2
    
    # Dynamic programming to find a lower bound on the cost
    dp = torch.zeros((len(demands), len(demands)))
    for d in range(1, len(demands)):
        for s in range(d):
            dp[d, s] = dp[s, d-1] + distance_matrix[s, d]
    
    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    
    # Add a diversity factor to avoid local optima
    diversity_factor = (1 / (distance_matrix + epsilon)) * torch.pow(torch.sum(distance_matrix, dim=1), 0.5)
    edge_potential += diversity_factor * distance_weight
    
    # Introduce a penalty for edges leading to nodes with excess demand
    excess_demand_penalty = (demands - 1.0).clamp(min=0) * 0.1
    edge_potential = edge_potential - excess_demand_penalty
    
    # Avoid overfitting by normalizing the potential
    edge_potential = (edge_potential - edge_potential.min()) / (edge_potential.max() - edge_potential.min())
    
    return edge_potential
```
