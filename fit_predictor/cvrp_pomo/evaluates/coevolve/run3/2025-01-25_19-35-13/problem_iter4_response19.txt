```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Initialize a matrix of zeros with the same shape as the distance matrix
    edge_potential = torch.zeros_like(distance_matrix)
    
    # Calculate the total demand to normalize
    total_demand = demands.sum()
    
    # Normalize the demands to have the sum of all demands equal to the vehicle capacity
    normalized_demands = demands / total_demand
    
    # Incorporate diversity by considering the difference between the maximum and minimum demand
    max_demand = torch.max(normalized_demands)
    min_demand = torch.min(normalized_demands)
    demand_diff = max_demand - min_demand
    
    # Define a penalty function for long distances
    long_distance_penalty = torch.where(distance_matrix > 1.5, -demand_diff * (distance_matrix - 1.5), 0)
    
    # Compute the potential for each edge
    edge_potential = normalized_demands * (1 / (distance_matrix + 1e-8)) + long_distance_penalty
    
    # Introduce a secondary penalty for edges with low demand to encourage diversity
    low_demand_penalty = torch.where(normalized_demands < min_demand, -demand_diff * (1 - normalized_demands), 0)
    
    # Combine the penalties and the potential
    edge_potential = edge_potential + low_demand_penalty
    
    # Ensure that the potential is within a certain range
    edge_potential = torch.clamp(edge_potential, min=-10.0, max=10.0)
    
    return edge_potential
```
