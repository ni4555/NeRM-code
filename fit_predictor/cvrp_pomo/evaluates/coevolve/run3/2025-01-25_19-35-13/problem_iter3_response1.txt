```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Use a Gaussian function to weigh edge potential based on distance and demand
    # Introduce a demand penalty for higher demands and a distance bonus for shorter distances
    epsilon = 1e-8
    demand_penalty = (demands - demands.mean()) * 0.1
    distance_bonus = torch.exp(-distance_matrix / 5)
    
    edge_potential = demand_penalty * normalized_demands
    edge_potential = edge_potential + distance_bonus
    
    # Adjust potential to ensure diversity by adding a random factor
    random_factor = torch.rand_like(edge_potential) * 0.1 - 0.05
    edge_potential += random_factor
    
    return edge_potential
```
