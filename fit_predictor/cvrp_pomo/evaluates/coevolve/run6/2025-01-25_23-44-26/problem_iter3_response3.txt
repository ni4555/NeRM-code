```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a diversity factor to encourage avoiding identical or highly similar edges
    diversity_factor = (demands.unsqueeze(1) * demands.unsqueeze(0)).abs()
    
    # Simulate real-time rerouting capabilities with a time factor
    # Assuming a time constant for the speed of vehicles and time of day
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Weigh the factors based on their importance
    weighted_demand_penalty = demand_penalty * 0.5
    weighted_distance_heuristic = distance_heuristic * 0.3
    weighted_load_balance = load_balance * 0.2
    weighted_diversity_factor = diversity_factor * 0.1
    weighted_time_heuristic = time_heuristic * 0.2
    
    # Combine the weighted factors
    combined_heuristic = weighted_demand_penalty + weighted_distance_heuristic + \
                         weighted_load_balance + weighted_diversity_factor + weighted_time_heuristic
    
    return combined_heuristic
```
