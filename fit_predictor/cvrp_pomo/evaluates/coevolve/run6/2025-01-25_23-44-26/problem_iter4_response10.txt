```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -F.relu(normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0))
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a time factor to simulate real-time rerouting capabilities
    # Assuming a time constant for the speed of vehicles and time of day
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Introduce diversity by ensuring a penalty for edges that are similar in terms of distance
    diversity_penalty = (distance_matrix.sum(axis=1) + distance_matrix.sum(axis=0)).unsqueeze(1) + \
                         (distance_matrix.sum(axis=1) + distance_matrix.sum(axis=0)).unsqueeze(0)
    diversity_penalty = diversity_penalty * (1 / (1 + distance_matrix + 1e-6))
    
    # Combine the demand penalty, distance heuristic, load balance, and diversity penalty
    # Introduce a weight for each heuristic component to balance their influence
    weights = torch.tensor([0.2, 0.4, 0.3, 0.1], dtype=torch.float32)
    combined_heuristic = weights[0] * demand_penalty + \
                          weights[1] * distance_heuristic + \
                          weights[2] * load_balance * time_heuristic + \
                          weights[3] * diversity_penalty
    
    return combined_heuristic
```
