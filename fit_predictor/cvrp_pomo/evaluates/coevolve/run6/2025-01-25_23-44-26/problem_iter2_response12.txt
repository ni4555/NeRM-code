```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Calculate the load on each edge as a heuristic (lighter loads are better)
    load_heuristic = demands.unsqueeze(1) * demands.unsqueeze(0)
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Combine the heuristics to get the final heuristic values
    combined_heuristic = demand_penalty + distance_heuristic + load_heuristic
    
    # Apply a load balancing technique by penalizing imbalances
    load_imbalance_penalty = torch.abs(demands.unsqueeze(1) - demands.unsqueeze(0))
    combined_heuristic -= load_imbalance_penalty
    
    # Normalize to ensure non-negative values
    min_val = combined_heuristic.min()
    combined_heuristic = combined_heuristic - min_val
    
    # Integrate real-time rerouting capabilities by adding a dynamic load penalty
    dynamic_load_penalty = torch.clamp(1 - demands.unsqueeze(1) * demands.unsqueeze(0), min=0)
    combined_heuristic -= dynamic_load_penalty
    
    return combined_heuristic
```
