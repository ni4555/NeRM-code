```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Calculate the load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a time factor to simulate real-time rerouting capabilities
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the cumulative sum of the normalized demands from the depot to each node
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # Calculate a heuristic based on the cumulative demand and the inverse distance
    cumulative_demand_heuristic = cumulative_demand.unsqueeze(1) * cumulative_demand.unsqueeze(0)
    
    # Combine all heuristics into a single combined heuristic
    combined_heuristic = distance_heuristic + load_balance * time_heuristic + cumulative_demand_heuristic
    
    # Normalize the combined heuristic to ensure non-negative values
    min_val = combined_heuristic.min()
    combined_heuristic = combined_heuristic - min_val
    
    return combined_heuristic
```
