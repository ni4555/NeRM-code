```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -torch.sqrt(normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0))
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a dynamic time factor that considers both time of day and expected traffic
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Introduce randomness for diversity but control its magnitude
    diversity_factor = torch.rand(distance_matrix.shape) * 0.01 * (torch.rand(distance_matrix.shape) > 0.5)
    
    # Apply a non-linear transformation to enhance the impact of certain features
    non_linear_transform = torch.relu(demand_penalty + distance_heuristic + load_balance * dynamic_time_factor)
    
    # Normalize the heuristics to ensure they are on a comparable scale
    max_heuristic = non_linear_transform.max(dim=1, keepdim=True)[0]
    normalized_heuristic = non_linear_transform / max_heuristic.expand_as(non_linear_transform)
    
    # Adjust weights based on problem characteristics or empirical results
    weights = torch.tensor([0.2, 0.5, 0.2, 0.1], dtype=torch.float32)
    combined_heuristic = weights[0] * demand_penalty + \
                          weights[1] * distance_heuristic + \
                          weights[2] * load_balance * dynamic_time_factor + \
                          weights[3] * diversity_factor
    
    return combined_heuristic
```
