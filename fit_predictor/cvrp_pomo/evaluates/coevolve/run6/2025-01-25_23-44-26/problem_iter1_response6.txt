```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the demand-based heuristic (edges with higher demand are penalized)
    demand_heuristic = torch.clamp(1 - normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0), min=0)
    
    # Calculate the load-based heuristic (edges that cause imbalances are penalized)
    load_imbalance_penalty = torch.abs(demands.unsqueeze(1) - demands.unsqueeze(0))
    load_heuristic = torch.clamp(1 - load_imbalance_penalty, min=0)
    
    # Calculate the distance-based heuristic (shorter distances are better)
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Combine the heuristics using a weighted sum
    combined_heuristic = 0.5 * demand_heuristic + 0.3 * load_heuristic + 0.2 * distance_heuristic
    
    # Apply a global normalization to ensure non-negative values
    min_val = combined_heuristic.min()
    combined_heuristic = combined_heuristic - min_val
    
    return combined_heuristic
```
