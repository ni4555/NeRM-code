```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the demand penalty using a different approach, e.g., inverse of demand
    demand_penalty = 1 / (normalized_demands.unsqueeze(1) + normalized_demands.unsqueeze(0))
    
    # Calculate the inverse of the distance matrix as a heuristic
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Introduce a dynamic load balancing factor that emphasizes the balance between the demands
    # by using the difference between maximum and minimum demand
    max_demand = torch.max(demands)
    min_demand = torch.min(demands)
    load_balance = (max_demand - min_demand) / (demands.unsqueeze(1) + demands.unsqueeze(0))
    
    # Implement a dynamic time factor based on the day of the week
    # For simplicity, let's use a sinusoidal function to represent the time variation
    day_of_week = torch.arange(7) % 7
    time_factor = torch.sin(2 * 3.14159 * day_of_week / 7)
    time_heuristic = (1 / (1 + time_factor.unsqueeze(1) * time_factor.unsqueeze(0)))
    
    # Combine the heuristics, giving different weights to each heuristic to balance the effects
    weight_demand = 0.3
    weight_distance = 0.5
    weight_load_balance = 0.2
    weight_time = 0.1
    
    combined_heuristic = (
        weight_demand * demand_penalty +
        weight_distance * distance_heuristic +
        weight_load_balance * load_balance +
        weight_time * time_heuristic
    )
    
    return combined_heuristic
```
