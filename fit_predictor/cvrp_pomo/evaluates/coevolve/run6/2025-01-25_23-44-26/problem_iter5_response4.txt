```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Introduce a load balancing factor based on the average of the maximum and minimum demands
    average_demand = torch.mean(demands)
    min_demand = torch.min(demands)
    load_balance_factor = (torch.max(demands) - min_demand) / average_demand
    load_balance = load_balance_factor.unsqueeze(1) * load_balance_factor.unsqueeze(0)
    
    # Use dynamic factors for time to simulate real-time rerouting capabilities
    # Here, time factors are dependent on the time of day and the average demand
    time_factors = torch.where(demands > average_demand, demands / average_demand, average_demand / demands)
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0))) * time_factors
    
    # Combine the demand penalty, distance heuristic, load balance, and time heuristic
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * time_heuristic
    
    return combined_heuristic
```
