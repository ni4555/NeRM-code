```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -torch.sum(normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0), dim=0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a time factor to simulate real-time rerouting capabilities
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine the demand penalty, distance heuristic, and load balance
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * time_heuristic
    
    # Normalize the combined heuristic values to be between 0 and 1
    max_heuristic = combined_heuristic.max()
    min_heuristic = combined_heuristic.min()
    combined_heuristic = (combined_heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Ensure the heuristic values are between 0 and 1, and penalize impossible edges
    combined_heuristic = torch.clamp(combined_heuristic, min=0, max=1)
    
    return combined_heuristic
```
