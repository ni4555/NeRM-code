```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the inverse of the distance matrix as a heuristic
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Use a demand-based heuristic, higher demand gets more negative weight
    demand_heuristic = -torch.abs(normalized_demands.unsqueeze(1) - normalized_demands.unsqueeze(0))
    
    # Implement a load balancing factor using the absolute difference in demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Simulate dynamic conditions like time and traffic
    # Assuming time_of_day and traffic_factor are predefined, e.g., from a traffic API
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Integrate the heuristics with proper weighting
    weight_demand = 0.3
    weight_distance = 0.4
    weight_load_balance = 0.2
    weight_time = 0.1
    
    # Combine the weighted factors using matrix multiplication for efficiency
    combined_heuristic = (
        weight_demand * demand_heuristic +
        weight_distance * distance_heuristic +
        weight_load_balance * load_balance +
        weight_time * dynamic_time_factor
    )
    
    # Normalize the combined heuristic values to be between 0 and 1
    max_heuristic = combined_heuristic.max()
    min_heuristic = combined_heuristic.min()
    combined_heuristic = (combined_heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Introduce diversity by adding a small random perturbation
    diversity_factor = torch.rand(distance_matrix.shape) * 0.01
    diversity_heuristic = combined_heuristic + diversity_factor
    
    # Ensure the heuristic values are within the desired range
    diversity_heuristic = torch.clamp(diversity_heuristic, min=0, max=1)
    
    return diversity_heuristic
```
