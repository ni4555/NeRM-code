```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Introduce a dynamic routing technique by considering historical traffic data
    traffic_data = torch.rand(distance_matrix.shape[0]) * 100  # Simulate historical traffic data
    dynamic_traffic_factor = 1 / (1 + traffic_data.unsqueeze(1) * traffic_data.unsqueeze(0))
    
    # Combine the demand penalty, distance heuristic, load balance, and dynamic traffic factor
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * dynamic_traffic_factor
    
    # Use a blend of heuristics by considering historical demand patterns
    historical_demand = torch.rand(distance_matrix.shape[0]) * 100  # Simulate historical demand data
    historical_demand_factor = historical_demand.unsqueeze(1) * historical_demand.unsqueeze(0)
    
    # Introduce randomness with a controlled factor to escape local optima
    random_factor = torch.rand(distance_matrix.shape) * 0.05 - 0.025  # Slightly negative for diversity
    
    # Normalize consistently by dividing by the sum of heuristics
    normalized_combined_heuristic = combined_heuristic / (combined_heuristic.sum() + 1e-6)
    
    # Blend the historical demand factor and normalized combined heuristic
    blended_heuristic = historical_demand_factor + normalized_combined_heuristic * random_factor
    
    # Apply a non-linear transformation to amplify the impact of certain factors
    heuristics_non_linear = torch.relu(blended_heuristic)
    
    return heuristics_non_linear
```
