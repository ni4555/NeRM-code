```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -torch.abs(normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0))
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a time factor to simulate real-time rerouting capabilities
    # Assuming a time constant for the speed of vehicles and time of day
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine the demand penalty, distance heuristic, load balance, and time heuristic
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * time_heuristic
    
    # Integrate multiple penalties and heuristics
    # Enhance the load balancing by incorporating the cumulative demand difference
    cumulative_load_balance = torch.cumsum(load_balance, dim=0) - load_balance.unsqueeze(1)
    enhanced_load_balance = torch.exp(-cumulative_load_balance)
    
    # Final heuristic value considering all factors
    final_heuristic = combined_heuristic * enhanced_load_balance
    
    return final_heuristic
```
