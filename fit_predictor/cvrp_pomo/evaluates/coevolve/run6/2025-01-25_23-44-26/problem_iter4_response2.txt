```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Iterate over all pairs of nodes (excluding the depot)
    for i in range(distance_matrix.size(0)):
        for j in range(distance_matrix.size(1)):
            if i != j:
                # Calculate the sum of demands from the current node to the destination
                demand_sum = (normalized_demands[i] + normalized_demands[j]).clamp(min=0)
                
                # Calculate the heuristic value for the edge using log1p for better approximation
                heuristic_value = torch.log1p(-demand_sum * distance_matrix[i, j])
                
                # Assign the heuristic value to the edge in the heuristic matrix
                heuristic_matrix[i, j] = heuristic_value
    
    # Local normalization for each edge
    for i in range(distance_matrix.size(0)):
        for j in range(distance_matrix.size(1)):
            if heuristic_matrix[i, j] > 0:
                min_val = heuristic_matrix[i, j].min()
                if min_val > 0:
                    heuristic_matrix[i, j] = (heuristic_matrix[i, j] - min_val) / (heuristic_matrix[i, j].max() - min_val)
    
    return heuristic_matrix
```
