```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the demand-based heuristic (edges with higher demand are penalized)
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Compute the cumulative sum of the normalized demands from the depot to each node
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # Calculate a heuristic based on the cumulative demand and the inverse distance
    cumulative_demand_heuristic = cumulative_demand.unsqueeze(1) * cumulative_demand.unsqueeze(0)
    
    # Combine the demand penalty, distance heuristic, and cumulative demand heuristic
    combined_heuristic = demand_penalty + distance_heuristic + cumulative_demand_heuristic
    
    # Normalize and threshold to enhance edge prominence
    min_val = combined_heuristic.min()
    max_val = combined_heuristic.max()
    normalized_combined_heuristic = (combined_heuristic - min_val) / (max_val - min_val)
    
    return normalized_combined_heuristic
```
