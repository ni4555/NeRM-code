```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Introduce a diversity factor that discourages consecutive edges with similar attributes
    diversity_factor = (torch.abs(torch.diff(distance_matrix)) * torch.abs(torch.diff(demands))).unsqueeze(0).unsqueeze(1)
    
    # Adjust the load balancing factor to include diversity
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs() - diversity_factor
    
    # Use a time factor to simulate real-time rerouting capabilities
    # Assuming a time constant for the speed of vehicles and time of day
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine the demand penalty, distance heuristic, load balance, diversity factor, and time heuristic
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * time_heuristic
    
    return combined_heuristic
```
