```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs() * 0.1  # Scaled down for balance
    
    # Incorporate a demand penalty for high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Use a dynamic factor based on historical data to simulate real-time rerouting capabilities
    historical_data_factor = torch.rand(distance_matrix.shape[0]) * 0.5  # Factor based on historical data
    dynamic_heuristic = (1 / (1 + historical_data_factor.unsqueeze(1) * historical_data_factor.unsqueeze(0)))
    
    # Apply a penalty for edges that are part of the shortest path to the depot to avoid deadlocks
    shortest_path_penalty = -torch.min(distance_matrix, dim=1)[0].unsqueeze(1)
    
    # Combine the different heuristic components
    combined_heuristic = (distance_heuristic + load_balance + demand_penalty + dynamic_heuristic + shortest_path_penalty)
    
    # Normalize the combined heuristic values to be between 0 and 1
    max_heuristic = combined_heuristic.max()
    min_heuristic = combined_heuristic.min()
    combined_heuristic = (combined_heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    return combined_heuristic
```
