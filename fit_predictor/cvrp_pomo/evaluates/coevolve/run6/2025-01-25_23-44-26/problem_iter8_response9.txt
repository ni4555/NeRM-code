```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs() * 0.1  # Scaled down for balance
    
    # Incorporate a demand penalty for high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Use a dynamic time factor that considers both time of day and expected traffic
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Combine the different heuristic components
    combined_heuristic = (distance_heuristic + load_balance + demand_penalty + dynamic_time_factor)
    
    # Normalize the combined heuristic values to be between 0 and 1
    max_heuristic = combined_heuristic.max()
    min_heuristic = combined_heuristic.min()
    combined_heuristic = (combined_heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    return combined_heuristic
```
