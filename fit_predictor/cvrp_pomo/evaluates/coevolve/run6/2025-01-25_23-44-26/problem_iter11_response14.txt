```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the inverse of the distance matrix as a heuristic
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Define a demand-based heuristic that is more penalizing for high demand edges
    demand_heuristic = torch.exp(-torch.abs(normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)))
    
    # Use a load balancing heuristic by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs() * 0.1
    
    # Integrate a normalized time factor that considers both time of day and expected traffic
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Combine the different heuristics, normalizing their influence
    combined_heuristic = (demand_heuristic + distance_heuristic + load_balance * dynamic_time_factor) / 3
    
    # Introduce randomness with a controlled factor to encourage diversity
    random_factor = torch.rand(distance_matrix.shape) * 0.05 - 0.025
    
    # Non-linear transformation to amplify the impact of certain factors
    heuristics_non_linear = torch.relu(combined_heuristic + random_factor)
    
    # Blend heuristics using a normalization step to ensure no single heuristic dominates
    normalization_factor = heuristics_non_linear.sum(dim=1, keepdim=True)
    blended_heuristics = heuristics_non_linear / normalization_factor
    
    return blended_heuristics
```
