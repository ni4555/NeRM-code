```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate potential value based on distance and demand
    distance_weight = 0.5
    demand_weight = 2.0
    penalty_threshold = 0.8
    average_demand = normalized_demands.mean()
    
    potential_values = (normalized_distances * (1 - normalized_demands) +
                        distance_weight * normalized_distances +
                        demand_weight * normalized_demands)
    
    # Create a penalty term for high demand nodes
    penalty_term = torch.where(normalized_demands > penalty_threshold,
                                normalized_demands - average_demand,
                                torch.zeros_like(normalized_demands))
    
    # Combine potential values with penalties
    potential_values = potential_values - penalty_term
    
    # Ensure that the penalties do not cause negative potential values
    potential_values = torch.clamp(potential_values, min=0)
    
    # Apply node partitioning to balance demand across routes
    partition_threshold = 0.6
    partition_penalty = torch.exp(-torch.abs(normalized_demands - partition_threshold))
    potential_values *= partition_penalty
    
    # Use local neighborhood knowledge to favor similar demands
    for i in range(1, n):
        neighbor_demand = demands[distance_matrix[i, :] < max_distance]
        total_neighbor_demand = neighbor_demand.sum()
        neighbor_demand_weight = 1 - (total_neighbor_demand / max_demand)
        potential_values[i, distance_matrix[i, :] < max_distance] *= neighbor_demand_weight
    
    # Apply time window considerations, favoring earlier times
    time_factor = torch.arange(n).float() / n
    time_window_penalty = torch.exp(-time_factor)
    potential_values *= time_window_penalty
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
