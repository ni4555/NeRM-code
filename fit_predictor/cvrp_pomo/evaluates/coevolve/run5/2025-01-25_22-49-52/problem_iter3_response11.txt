```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate the potential value for each edge
    # The potential value now incorporates a demand relaxation factor and a non-linear distance transformation
    demand_relaxation_factor = 0.2
    potential_values = normalized_distances * (1 - (demand_relaxation_factor * (2 * normalized_demands - 1)))
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    # Add a node partitioning effect by penalizing highly interconnected nodes
    partitioning_penalty = 0.1
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate a connectivity measure based on the sum of edge weights
                connectivity_measure = (potential_values[i, :] + potential_values[j, :]).sum()
                potential_values[i, j] -= partitioning_penalty * connectivity_measure
    
    return potential_values
```
