```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Define a function to calculate a multi-term potential function
    def multi_term_potential(dist, demand, alpha=0.5, beta=0.5, gamma=0.1):
        return dist - alpha * demand - beta * torch.log(1 + demand) - gamma * (demand - 1.0)
    
    # Demand relaxation using a dynamic window approach
    relaxed_demands = torch.where(normalized_demands > 0.5, 
                                  normalized_demands, 
                                  0.0)
    
    # Calculate the potential value for each edge using a vectorized approach
    weights = torch.rand(1, n) * 2 - 1  # Random weights between -1 and 1
    potential_values = multi_term_potential(normalized_distances, relaxed_demands)
    potential_values = potential_values - weights * torch.log(1 + relaxed_demands)
    
    # Apply a penalty for high demands to discourage overloading vehicles
    potential_values[torch.where(demands > 1.0)] *= 2.0
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
