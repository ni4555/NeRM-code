```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor, vehicle_capacity: float) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate the potential value for each edge using a balance heuristic
    # The heuristic now includes a dynamic weight based on the distance and demand
    # The weight increases with distance but is dampened by high demands
    distance_weight = 0.5
    demand_weight = 2.0
    penalty_threshold = 0.8  # Nodes with demand greater than 0.8 times the average demand are penalized
    average_demand = normalized_demands.mean()
    
    # Create a penalty term for high demand nodes
    penalty_term = torch.where(normalized_demands > penalty_threshold, 
                                normalized_demands - average_demand, 
                                torch.zeros_like(normalized_demands))
    
    # Introduce a node partitioning approach to separate nodes based on their demand
    # Higher demand nodes are more likely to be penalized or have lower potential
    partitioning_factor = 0.5
    partitioning = torch.where(normalized_demands > average_demand, 
                                normalized_demands, 
                                torch.zeros_like(normalized_demands))
    
    # Adjust potential values based on partitioning
    potential_values = (normalized_distances * (1 - partitioning) +
                        distance_weight * normalized_distances +
                        demand_weight * normalized_demands - 
                        penalty_term * partitioning).abs()
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    # Introduce a dynamic window approach to adapt weights based on current vehicle capacity
    dynamic_weight = 1.0 / (1.0 + vehicle_capacity)
    potential_values *= dynamic_weight
    
    # Incorporate a multi-objective evolutionary algorithm approach to balance objectives
    # We adjust the weights based on a weighted sum of objectives: distance and demand
    weight_distance = 0.6
    weight_demand = 0.4
    potential_values = weight_distance * potential_values + weight_demand * (potential_values / (1 + potential_values))
    
    # Vectorized redundancy avoidance by checking for high correlation between edges
    # Edges with high correlation (close potential values) are penalized
    correlation_matrix = torch.corrcoef(potential_values.view(-1).numpy())
    high_correlation_mask = torch.tensor(correlation_matrix > 0.9).float().view(n, n)
    penalty_for_correlation = 0.1 * potential_values
    potential_values = torch.where(high_correlation_mask, potential_values - penalty_for_correlation, potential_values)
    
    return potential_values
```
