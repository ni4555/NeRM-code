```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Initialize a matrix of the same size as the distance matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the cumulative demand up to each node
    cumulative_demands = demands.cumsum(0)
    
    # Normalize cumulative demands for non-linear transformation
    normalized_cumulative_demands = (cumulative_demands - cumulative_demands.min()) / (cumulative_demands.max() - cumulative_demands.min())
    
    # Define a function to calculate the weight of each node based on its normalized cumulative demand
    def calculate_node_weight(normalized_cumulative_demand):
        # The weight is inversely proportional to the normalized cumulative demand, with a minimum threshold
        return 1 / (1 + torch.exp(-5 * normalized_cumulative_demand))
    
    # Apply the function to each node
    node_weights = calculate_node_weight(normalized_cumulative_demands)
    
    # Calculate the weight of each edge
    # The weight of an edge is the sum of the weights of its two nodes
    edge_weights = node_weights[None, :] + node_weights[:, None]
    
    # Normalize the edge weights to ensure they are non-negative
    edge_weights = edge_weights.clamp(min=0)
    
    # Calculate the potential value for each edge
    # The potential value is the product of the distance and the weight
    potential_values = normalized_distances * edge_weights
    
    # Further improve by penalizing high demand nodes
    demand_penalty = (1 / (1 + torch.exp(-torch.abs(demands - 0.5)))) * -1
    potential_values += demand_penalty
    
    # Adjust weights dynamically based on demand proximity
    distance_to_depot = torch.sqrt(torch.sum(distance_matrix**2, dim=1))
    dynamic_weights = (1 - distance_to_depot / (distance_to_depot.max().item()))
    potential_values *= dynamic_weights
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
