{
  "generation": 5,
  "description": "Develop an optimized heuristic algorithm for the Dynamic Capacitated Vehicle Routing Problem (DCVRP) with a focus on minimizing route distances while ensuring strict adherence to vehicle capacities. The algorithm should integrate constraint programming with specific techniques such as node partitioning and path decomposition, and utilize dynamic window approaches to effectively manage changes in demand and vehicle capacities during execution. This heuristic must incorporate a clear heuristic for path potential based on distance and demand, normalize for consistent scaling, and demonstrate real-time adaptation to dynamic problem instances. The algorithm should also prioritize load balancing and maintain computational efficiency while ensuring scalability for large problem instances.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    demands_normalized = demands / total_capacity\n\n    # Path potential heuristic: combine distance and demand\n    distance_potential = distance_matrix\n    demand_potential = demands_normalized.unsqueeze(1) * demands_normalized.unsqueeze(0)\n\n    # Normalize the potential to ensure consistent scaling\n    max_potential = torch.max(torch.abs(distance_potential) + torch.abs(demand_potential))\n    normalized_potential = (torch.abs(distance_potential) + torch.abs(demand_potential)) / max_potential\n\n    # Heuristic function that combines distance and demand potential\n    heuristic_values = normalized_potential * (1 - demands_normalized)  # Priority to visit nodes with lower demand first\n\n    return heuristic_values",
      "fitness": 23.28392219543457,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_11.txt",
      "code_file": "coevolve\\generation_5\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands by the sum of demands to get a capacity ratio\n    demand_ratio = demands / demands.sum()\n    \n    # Calculate the distance-based potential\n    distance_potential = -distance_matrix\n    \n    # Calculate the demand-based potential\n    demand_potential = -torch.sum(demand_ratio.unsqueeze(0) * distance_matrix.unsqueeze(1), dim=2)\n    \n    # Combine the two potentials to get the total potential\n    total_potential = distance_potential + demand_potential\n    \n    # Normalize the potential to ensure consistent scaling\n    max_potential = torch.max(total_potential)\n    min_potential = torch.min(total_potential)\n    normalized_potential = (total_potential - min_potential) / (max_potential - min_potential)\n    \n    return normalized_potential",
      "fitness": 23.3020076751709,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_2.txt",
      "code_file": "coevolve\\generation_5\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by total vehicle capacity (assuming total capacity is 1 for simplicity)\n    total_capacity = 1.0\n    normalized_demands = demands / total_capacity\n\n    # Calculate path potential based on distance and demand\n    # The heuristic function is designed to favor shorter distances and lower demands\n    path_potential = distance_matrix * (1 - normalized_demands)\n\n    # Normalize path potential for consistent scaling\n    # We use a simple min-max normalization here\n    min_potential = path_potential.min()\n    max_potential = path_potential.max()\n    normalized_potential = (path_potential - min_potential) / (max_potential - min_potential)\n\n    # Invert the normalized potential to give negative values to undesirable edges and positive to promising ones\n    heuristics = -normalized_potential\n\n    return heuristics",
      "fitness": 23.3020076751709,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_8.txt",
      "code_file": "coevolve\\generation_5\\code_8.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands to be in the range [0, 1]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the path potential based on distance and demand\n    # The heuristic is negative for edges with higher distance or demand\n    heuristic_matrix = -torch.abs(distance_matrix) - normalized_demands\n\n    return heuristic_matrix",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_1.txt",
      "code_file": "coevolve\\generation_5\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    \n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate distance-based potential\n    distance_potential = -distance_matrix\n    \n    # Calculate demand-based potential\n    demand_potential = -normalized_demands * demands\n    \n    # Combine distance and demand potentials\n    combined_potential = distance_potential + demand_potential\n    \n    # Apply normalization to ensure consistent scaling\n    max_potential = combined_potential.max()\n    min_potential = combined_potential.min()\n    normalized_potential = (combined_potential - min_potential) / (max_potential - min_potential)\n    \n    return normalized_potential",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_3.txt",
      "code_file": "coevolve\\generation_5\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the normalized demand for each customer\n    normalized_demands = demands / demands.sum()\n    \n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n    \n    # Calculate the heuristic for each edge based on distance and demand\n    heuristic_matrix = -distance_matrix + normalized_demands\n    \n    # Normalize the heuristic matrix for consistent scaling\n    max_value = heuristic_matrix.max()\n    min_value = heuristic_matrix.min()\n    normalized_heuristic_matrix = (heuristic_matrix - min_value) / (max_value - min_value)\n    \n    return normalized_heuristic_matrix",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_5.txt",
      "code_file": "coevolve\\generation_5\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = torch.sum(demands)\n    demands_normalized = demands / total_capacity\n\n    # Calculate potential based on distance and demand\n    distance_potential = distance_matrix.clone()\n    demand_potential = demands_normalized.repeat(n, 1)\n    path_potential = distance_potential * demand_potential\n\n    # Normalize path potential for consistent scaling\n    path_potential = torch.nn.functional.normalize(path_potential, p=1, dim=1)\n\n    # Adjust potential to promote load balancing\n    load_balance_factor = torch.clamp((1 - demands_normalized), min=0, max=1)\n    balanced_potential = path_potential * load_balance_factor\n\n    # Heuristic function that promotes edges with higher balanced potential\n    heuristic_matrix = balanced_potential.clone()\n    # Apply a negative heuristic value for undesirable edges (e.g., high distance)\n    # This is a simple heuristic to avoid long distances, it can be refined\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] = -torch.clamp(distance_matrix[i, j], min=0, max=1)\n            else:\n                heuristic_matrix[i, j] = 0\n\n    return heuristic_matrix",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_7.txt",
      "code_file": "coevolve\\generation_5\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.size(0)\n    # Normalize the demands by the total capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the potential for each edge based on distance and demand\n    # The heuristic is defined as -distance + normalized_demand to encourage\n    # shorter distances and higher demands.\n    heuristic_matrix = -distance_matrix + normalized_demands\n    \n    # To ensure the heuristic is positive, we can add a very small positive constant\n    # to all elements of the heuristic matrix.\n    epsilon = 1e-6\n    heuristic_matrix = torch.clamp(heuristic_matrix, min=epsilon)\n    \n    return heuristic_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_9.txt",
      "code_file": "coevolve\\generation_5\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    demand_normalized = demands / total_capacity\n\n    # Calculate path potential based on distance and demand\n    distance_potential = distance_matrix * demand_normalized\n\n    # Normalize for consistent scaling\n    max_potential = distance_potential.max()\n    min_potential = distance_potential.min()\n    normalized_potential = (distance_potential - min_potential) / (max_potential - min_potential)\n\n    # Apply a penalty for high demand to encourage load balancing\n    load_balance_penalty = demand_normalized * 0.1\n\n    # Combine the normalized potential with the load balance penalty\n    heuristics = normalized_potential - load_balance_penalty\n\n    # Apply a small positive value to all edges to avoid zero values\n    heuristics = torch.clamp(heuristics, min=0.001)\n\n    return heuristics",
      "fitness": 23.33746910095215,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_6.txt",
      "code_file": "coevolve\\generation_5\\code_6.py"
    },
    {
      "code": "import torch\nimport numpy as np\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure the input tensors are on the same device\n    distance_matrix = distance_matrix.to(demands.device)\n    demands = demands.to(demands.device)\n    \n    # Normalize demands to be between 0 and 1\n    max_demand = demands.max()\n    normalized_demands = demands / max_demand\n    \n    # Compute path potential based on distance and demand\n    path_potential = distance_matrix * normalized_demands\n    \n    # Add a penalty for high demand to encourage load balancing\n    demand_penalty = 1 - normalized_demands\n    penalized_potential = path_potential * demand_penalty\n    \n    # Normalize the potential to ensure values are within a consistent scale\n    max_potential = penalized_potential.max()\n    normalized_potential = penalized_potential / max_potential\n    \n    # Apply a heuristic to adjust the potential for promising edges\n    # Here, we assume a simple heuristic that promotes edges with lower potential\n    heuristic_factor = torch.exp(-normalized_potential)\n    \n    # Return the adjusted potential as the heuristic value\n    return heuristic_factor",
      "fitness": 23.350656509399414,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_4.txt",
      "code_file": "coevolve\\generation_5\\code_4.py"
    }
  ]
}