{
  "generation": 0,
  "description": "Assisting in solving Capacitated Vehicle Routing Problem (CVRP) with some prior heuristics. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the difference in demand between each pair of nodes\n    demand_diff = demands.unsqueeze(1) - demands.unsqueeze(0)\n    \n    # Create a mask for the edges where the demand difference is positive\n    positive_demand_diff_mask = (demand_diff > 0).to(torch.float32)\n    \n    # Calculate the heuristic value for each edge as the negative of the distance\n    # multiplied by the demand difference\n    heuristic_values = -distance_matrix * positive_demand_diff_mask\n    \n    return heuristic_values",
      "fitness": 23.288536071777344,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_11.txt",
      "code_file": "coevolve\\generation_0\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total demand\n    total_demand = demands.sum()\n    \n    # Calculate the average demand per customer\n    average_demand = total_demand / demands.size(0)\n    \n    # Calculate the heuristics based on the average demand\n    # Promising edges will have a positive value, undesirable edges will have a negative value\n    heuristics = (distance_matrix < average_demand).float() * (distance_matrix > 0).float()\n    \n    return heuristics",
      "fitness": 23.30044174194336,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_3.txt",
      "code_file": "coevolve\\generation_0\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the sum of demands to normalize\n    total_demand = demands.sum()\n    \n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / total_demand\n    \n    # Calculate the potential cost of each edge (distance * normalized demand)\n    potential_costs = distance_matrix * normalized_demands\n    \n    # Apply a threshold to promote edges with lower potential costs\n    threshold = 0.5  # This threshold can be adjusted\n    heuristics = torch.where(potential_costs < threshold, potential_costs, -torch.inf)\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_4.txt",
      "code_file": "coevolve\\generation_0\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total demand\n    total_demand = demands.sum()\n    \n    # Calculate the average demand per customer\n    average_demand = total_demand / demands.size(0)\n    \n    # Calculate the difference between the average demand and the actual demand for each customer\n    demand_diff = demands - average_demand\n    \n    # Calculate the heuristic value for each edge\n    # Promising edges will have positive values, undesirable edges will have negative values\n    heuristics = -distance_matrix * demand_diff\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_5.txt",
      "code_file": "coevolve\\generation_0\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total demand\n    total_demand = demands.sum()\n    \n    # Calculate the average demand per customer\n    average_demand = total_demand / demands.size(0)\n    \n    # Calculate the difference between the average demand and the actual demand for each customer\n    demand_diff = demands - average_demand\n    \n    # Calculate the heuristic value for each edge\n    # Promising edges will have positive values, undesirable edges will have negative values\n    heuristics = -distance_matrix * demand_diff\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_7.txt",
      "code_file": "coevolve\\generation_0\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Define a demand threshold (for demonstration purposes, we set it to 0.5).\n    # This threshold can be adjusted based on the problem specifics.\n    demand_threshold = 0.5\n    \n    # Normalize the distance matrix by the maximum distance in the matrix\n    # to prevent any distance value from dominating the computation.\n    max_distance = distance_matrix.max()\n    normalized_distance_matrix = distance_matrix / max_distance\n    \n    # Calculate the product of normalized distances and demands to find promising edges.\n    demand_normalized_distance = demands * normalized_distance_matrix\n    \n    # Assign negative values to edges where the total demand exceeds the threshold.\n    # The penalty factor is chosen arbitrarily for demonstration purposes.\n    penalty_factor = -100\n    demand_exceeds_threshold = demand_normalized_distance > demand_threshold\n    penalty_matrix = penalty_factor * demand_exceeds_threshold\n    \n    # Apply the penalty to the demand normalized distance matrix.\n    heuristics_matrix = demand_normalized_distance + penalty_matrix\n    \n    # Add a small positive constant to ensure that no edge has a negative heuristic value.\n    epsilon = 1e-5\n    heuristics_matrix = torch.clamp(heuristics_matrix, min=epsilon)\n    \n    return heuristics_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_9.txt",
      "code_file": "coevolve\\generation_0\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total demand\n    total_demand = demands.sum()\n    \n    # Calculate the average demand per customer\n    average_demand = total_demand / demands.size(0)\n    \n    # Calculate the heuristics based on the difference between the average demand and each customer's demand\n    heuristics = average_demand - demands\n    \n    # Normalize the heuristics by the distance matrix\n    heuristics = heuristics * distance_matrix\n    \n    # Ensure that the heuristics are within the range of the distance matrix\n    heuristics = torch.clamp(heuristics, min=0, max=distance_matrix.max())\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_10.txt",
      "code_file": "coevolve\\generation_0\\code_10.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # The total demand per vehicle can be a priori determined by the maximum of demands or based on an assumption\n    # For simplicity, we'll use max of the demands to denote vehicle capacity in terms of demands.\n    vehicle_capacity = torch.max(demands)\n\n    # Compute a score that reflects how desirable it is to visit a customer.\n    # The heuristic for an edge is negative for edges where visiting a customer makes it too likely to exceed vehicle capacity.\n    # A basic heuristic might be that a customer with a high normalized demand should be visited earlier rather than later.\n    # The heuristic can be calculated as follows:\n    # (1 - (customer_demand / vehicle_capacity)) * distance_matrix - excess_demand_score\n\n    # Compute excess_demand_score where a customer would exceed the vehicle capacity\n    # if visited before being fully utilized. We subtract this score to penalize those edges.\n    excess_demand_score = demands * (demands / vehicle_capacity) * distance_matrix\n\n    # Now compute the positive part of the heuristic:\n    # Subtract from the base cost to make a smaller value a higher priority\n    heuristic_score = (vehicle_capacity - demands) / vehicle_capacity\n    heuristic_score = (1 - heuristic_score) * distance_matrix\n\n    # The total heuristic value for an edge (i, j) would be:\n    # negative score for when customer at node i's demand, when added to what has already been visited, would exceed vehicle capacity\n    # and a positive score when considering just the cost and the remaining demand.\n\n    # Combine the negative excess_demand_score with the positive heuristic_score.\n    heuristic_matrix = heuristic_score - excess_demand_score\n\n    return heuristic_matrix\n\n# Example usage:\n# n is the number of nodes\n# Assuming distance_matrix is given in the form of a torch.Tensor\n# demands is given in the form of a torch.Tensor where each element represents the demand of a node\n\n# n = 5\n# distance_matrix = torch.tensor([\n#     [0, 5, 6, 4, 1],\n#     [5, 0, 1, 9, 4],\n#     [6, 1, 0, 5, 6],\n#     [4, 9, 5, 0, 7],\n#     [1, 4, 6, 7, 0]\n# ], dtype=torch.float)\n# demands = torch.tensor([1.0, 2.0, 2.5, 2.5, 2.5], dtype=torch.float)\n# result = heuristics_v2(distance_matrix, demands)",
      "fitness": 23.33746910095215,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_1.txt",
      "code_file": "coevolve\\generation_0\\code_1.py"
    }
  ]
}