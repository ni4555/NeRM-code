{
  "generation": 7,
  "description": "Design a sophisticated hybrid optimization framework for the Capacitated Vehicle Routing Problem (CVRP) that prioritizes route efficiency under stringent capacity constraints. This approach combines an enhanced Genetic Algorithm (GA) with advanced local search methods, including a state-of-the-art Simulated Annealing (SA) algorithm for fine-tuning. The framework initializes with a robust node partitioning strategy to ensure a strong starting solution, and incorporates demand relaxation to accommodate dynamic changes. By normalizing distance and demand metrics, the heuristic function computes a tailored potential value to steer the GA's exploration. The hybridization process begins with a node partitioning and demand relaxation phase, followed by extensive GA exploration and SA-based iterative refinement to achieve a delicate balance between solution diversity and optimization quality.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Compute the potential value for each edge\n    # Here we use a simple heuristic: the potential value is the negative of the distance\n    # and we add a positive term proportional to the normalized demand\n    potential_value = -distance_matrix + normalized_demands * 10.0\n\n    # The heuristic function returns the potential value for each edge\n    return potential_value",
      "fitness": 23.315486907958984,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_8.txt",
      "code_file": "coevolve\\generation_7\\code_8.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Compute the normalized distance matrix\n    normalized_distance_matrix = distance_matrix / distance_matrix.mean()\n\n    # Calculate the potential value for each edge\n    potential_values = normalized_distance_matrix - normalized_demands.unsqueeze(1) - normalized_demands.unsqueeze(0)\n\n    return potential_values",
      "fitness": 23.31553077697754,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_11.txt",
      "code_file": "coevolve\\generation_7\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Normalize demands by the total capacity\n    normalized_demands = demands / total_capacity\n    \n    # Normalize the distance matrix by the maximum distance in the matrix\n    max_distance = torch.max(distance_matrix)\n    normalized_distance_matrix = distance_matrix / max_distance\n    \n    # Calculate the potential value for each edge\n    # Here we use a simple heuristic: potential = -distance + demand\n    # This heuristic prioritizes shorter distances and higher demands\n    potential_matrix = -normalized_distance_matrix + normalized_demands\n    \n    # Ensure that the potential values are within the range [-1, 0] for undesirable edges\n    # and [0, 1] for promising ones by adding a small constant to the minimum potential\n    # and subtracting it from the maximum potential\n    min_potential = torch.min(potential_matrix)\n    max_potential = torch.max(potential_matrix)\n    potential_matrix = (potential_matrix - min_potential) / (max_potential - min_potential)\n    \n    return potential_matrix",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_1.txt",
      "code_file": "coevolve\\generation_7\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Normalize the distance matrix\n    max_distance = distance_matrix.max()\n    normalized_distance_matrix = distance_matrix / max_distance\n    \n    # Compute the heuristic value for each edge\n    # The heuristic function is a combination of normalized distance and normalized demand\n    # Negative values indicate undesirable edges, positive values indicate promising ones\n    heuristics = -normalized_distance_matrix + normalized_demands\n    \n    return heuristics",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_4.txt",
      "code_file": "coevolve\\generation_7\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the sum of normalized demands for each edge\n    edge_demand_sums = torch.matmul(normalized_demands.unsqueeze(1), demands.unsqueeze(0)).squeeze(1)\n    \n    # Normalize the distance matrix\n    normalized_distance_matrix = distance_matrix / distance_matrix.max()\n    \n    # Compute the heuristic value as the negative of the sum of edge demand sums and normalized distances\n    heuristic_matrix = -edge_demand_sums - normalized_distance_matrix\n    \n    return heuristic_matrix",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_7.txt",
      "code_file": "coevolve\\generation_7\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands to be between 0 and 1\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Normalize distances using the demands to create a weighted distance matrix\n    # The idea is to weight distances by the demands to prioritize edges with higher demands\n    weighted_distance_matrix = distance_matrix * normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)\n\n    # The heuristic is the negative of the weighted distance, as we want to minimize the sum of weighted distances\n    heuristics = -weighted_distance_matrix\n\n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_0.txt",
      "code_file": "coevolve\\generation_7\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands by the total capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Normalize the distance matrix by dividing by the maximum distance\n    max_distance = distance_matrix.max()\n    normalized_distance_matrix = distance_matrix / max_distance\n\n    # Calculate the potential value for each edge\n    # The potential value is a function of both normalized demand and normalized distance\n    potential_value = normalized_distance_matrix * normalized_demands\n\n    # We want to steer the GA to desirable edges, so we take the negative of the potential value\n    # to ensure that positive values indicate promising edges\n    heuristics = -potential_value\n\n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_2.txt",
      "code_file": "coevolve\\generation_7\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the sum of demands to normalize\n    total_demand = demands.sum()\n    \n    # Normalize the demands\n    normalized_demands = demands / total_demand\n    \n    # Normalize the distance matrix (divide by the maximum distance)\n    max_distance = distance_matrix.max()\n    normalized_distance_matrix = distance_matrix / max_distance\n    \n    # Compute the potential value for each edge\n    # This is a simple example, more sophisticated heuristics can be applied\n    potential_values = -normalized_distance_matrix * normalized_demands\n    \n    # The heuristics should return negative values for undesirable edges\n    # and positive values for promising ones, we can simply use the potential values\n    return potential_values",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_3.txt",
      "code_file": "coevolve\\generation_7\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Normalize distance matrix by dividing by the maximum distance\n    max_distance = distance_matrix.max()\n    normalized_distance_matrix = distance_matrix / max_distance\n    \n    # Compute potential value for each edge\n    potential_value = normalized_distance_matrix * normalized_demands\n    \n    # Add a small constant to avoid division by zero\n    epsilon = 1e-6\n    potential_value = torch.clamp(potential_value, min=epsilon)\n    \n    # Invert the potential value to have negative values for undesirable edges\n    heuristics = -potential_value\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_5.txt",
      "code_file": "coevolve\\generation_7\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the distance matrix\n    max_distance = torch.max(distance_matrix)\n    normalized_distance_matrix = distance_matrix / max_distance\n    \n    # Normalize the demands\n    total_capacity = torch.sum(demands)\n    normalized_demands = demands / total_capacity\n    \n    # Compute potential value for each edge\n    # The potential value is a combination of normalized distance and normalized demand\n    # Negative values for undesirable edges, positive values for promising ones\n    potential_matrix = normalized_distance_matrix * normalized_demands\n    \n    # Subtract the potential value from the maximum possible value to get negative values\n    # for undesirable edges\n    max_potential = torch.max(potential_matrix)\n    heuristics = max_potential - potential_matrix\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_6.txt",
      "code_file": "coevolve\\generation_7\\code_6.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Normalize distance matrix by dividing by the maximum distance\n    normalized_distance = distance_matrix / distance_matrix.max()\n\n    # Compute potential value for each edge\n    # We use a simple heuristic: the negative of the normalized distance\n    # multiplied by the normalized demand (to give a preference to edges with lower demand)\n    potential = -normalized_distance * normalized_demands\n\n    # To make the potential values more distinct, we add a small constant\n    potential += 1e-5\n\n    return potential",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_9.txt",
      "code_file": "coevolve\\generation_7\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the distance matrix by dividing each row by the maximum value in that row\n    normalized_distance_matrix = distance_matrix / distance_matrix.max(dim=1, keepdim=True)[0]\n    \n    # Normalize the demands by dividing each demand by the total vehicle capacity\n    vehicle_capacity = demands.sum()\n    normalized_demands = demands / vehicle_capacity\n    \n    # Compute the potential value for each edge based on normalized distance and demand\n    # The heuristic function: heur = -distance + demand\n    heuristics = -normalized_distance_matrix + normalized_demands\n    \n    # Ensure that the heuristics matrix has the same shape as the distance matrix\n    assert heuristics.shape == distance_matrix.shape, \"Heuristics shape does not match distance matrix shape\"\n    \n    return heuristics",
      "fitness": 23.341075897216797,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_10.txt",
      "code_file": "coevolve\\generation_7\\code_10.py"
    }
  ]
}