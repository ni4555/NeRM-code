```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor, vehicle_capacity: float) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate the potential value for each edge using a balance heuristic
    # The heuristic now includes adaptive weights based on demand variance
    demand_variance = torch.var(normalized_demands)
    average_demand = normalized_demands.mean()
    variance_weight = 1.0 / (1.0 + demand_variance)
    
    # Introduce a relaxation of demands based on variance
    demand.relaxation = torch.where(normalized_demands > average_demand + variance_weight, 
                                     average_demand + variance_weight, 
                                     normalized_demands)
    
    # Adjust potential values based on the relaxed demands
    potential_values = (normalized_distances * variance_weight +
                        normalized_demands * (1.0 - variance_weight)).abs()
    
    # Create a penalty term for edges between high variance nodes
    penalty_factor = 0.2
    penalty = torch.where(torch.abs(demand_variance - torch.mean(torch.abs(demand_variance - torch.mean(demand_variance)))) > penalty_factor,
                            -potential_values, 
                            potential_values)
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    # Introduce a dynamic window approach to adapt weights based on current vehicle capacity
    dynamic_weight = 1.0 / (1.0 + vehicle_capacity)
    potential_values *= dynamic_weight
    
    return potential_values
```
