```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Define a demand threshold
    demand_threshold = 0.5
    
    # Calculate the potential value for each edge
    # The transformation incorporates a demand threshold and emphasizes both distance and demand
    potential_values = torch.where(
        normalized_demands < demand_threshold,
        normalized_distances + (normalized_demands * (1 - normalized_demands)),
        (normalized_distances + normalized_demands) * (1 - 2 * normalized_demands)
    )
    
    # Incorporate penalties for highly interconnected nodes
    partitioning_penalty = 0.1
    connectivity_measure = (potential_values.sum(dim=1) + potential_values.sum(dim=0) - potential_values**2).diag()
    partitioning_effect = partitioning_penalty * connectivity_measure
    
    # Adjust the potential values based on the partitioning effect
    potential_values -= partitioning_effect
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
