```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Introduce a node partitioning step based on demand threshold
    threshold = 0.5
    partition_indices = torch.where(normalized_demands > threshold)[0]
    
    # Adjust the potential value based on partition
    partition_potential = torch.ones_like(normalized_distances) * (1 - 2 * threshold)
    non_partition_potential = torch.ones_like(normalized_distances) * (1 - 2 * (1 - threshold))
    
    # Apply the adjusted potential values based on partitioning
    potential_values = torch.where(
        torch.tensor(partition_indices).unsqueeze(1).expand_as(normalized_distances) > 0,
        partition_potential * normalized_distances,
        non_partition_potential * normalized_distances
    )
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
