```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate the potential value for each edge using a balance heuristic
    # The heuristic now considers both distance and demand, with an emphasis on
    # dynamic window adaptation by incorporating a time factor or other real-time data.
    # It also uses a more complex penalty for high-demand nodes.
    demand_weight = 1.2
    penalty_threshold = 0.9  # Nodes with demand greater than 0.9 times the average demand are penalized
    average_demand = normalized_demands.mean()
    
    # Calculate a dynamic window factor that could represent real-time changes
    # For simplicity, we will use a time factor which decreases over time (e.g., as 1/t)
    time_factor = 1 / (torch.arange(1, n+1) + 1)
    
    # Create a penalty term for high demand nodes
    penalty_term = torch.where(normalized_demands > penalty_threshold, 
                                normalized_demands - average_demand, 
                                torch.zeros_like(normalized_demands))
    
    # Combine potential values with dynamic window factor
    potential_values = (normalized_distances + 
                        demand_weight * normalized_demands * time_factor - 
                        penalty_term).abs()
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
