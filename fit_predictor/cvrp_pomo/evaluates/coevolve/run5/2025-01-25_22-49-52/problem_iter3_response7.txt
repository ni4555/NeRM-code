```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Perform node partitioning based on demand
    partition_threshold = 0.3
    partition_indices = torch.where(normalized_demands > partition_threshold)[0]
    
    # Adjust the potential value for the depot to encourage visiting partitioned nodes
    for idx in partition_indices:
        potential_values[0, idx] = -max_distance
    
    # Adjust potential values based on distance and demand with a more nuanced approach
    potential_values = torch.where(
        normalized_demands < 0.5,
        normalized_distances + (normalized_demands * (1 - normalized_demands)),
        (normalized_distances + normalized_demands) * (1 - 2 * normalized_demands)
    )
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
