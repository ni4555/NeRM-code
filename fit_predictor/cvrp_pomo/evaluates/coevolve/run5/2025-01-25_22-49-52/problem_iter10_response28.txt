```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate a penalty term for high demand nodes
    penalty_threshold = 0.9
    average_demand = normalized_demands.mean()
    penalty_term = torch.where(normalized_demands > penalty_threshold, 
                                normalized_demands - average_demand, 
                                torch.zeros_like(normalized_demands))
    
    # Sigmoid function to smoothly adjust the weight based on demand
    demand_smoothing = torch.sigmoid((normalized_demands - 0.5) / 0.5)
    
    # Calculate the potential value for each edge
    potential_values = (normalized_distances * demand_smoothing +
                        normalized_demands - 
                        penalty_term)
    
    # Cap the potential values to ensure non-negativity
    potential_values = torch.clamp(potential_values, min=0)
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
