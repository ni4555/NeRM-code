```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate the potential value for each edge using a balance heuristic
    distance_weight = 0.5
    demand_weight = 2.0
    penalty_threshold = 0.8  # Nodes with demand greater than 0.8 times the average demand are penalized
    average_demand = normalized_demands.mean()
    
    # Create a penalty term for high demand nodes
    penalty_term = torch.where(normalized_demands > penalty_threshold, 
                                normalized_demands - average_demand, 
                                torch.zeros_like(normalized_demands))
    
    # Combine potential values with a dampening factor for high demands
    potential_values = (normalized_distances * (1 - normalized_demands) +
                        distance_weight * normalized_distances +
                        demand_weight * normalized_demands - 
                        penalty_term).abs()
    
    # Introduce mutation for exploration
    mutation_factor = torch.rand(n, n)
    mutation = mutation_factor * (potential_values * 0.01)
    mutated_potential_values = potential_values + mutation
    
    # Introduce a balance factor to maintain constraint stability
    balance_factor = torch.max(potential_values.sum(dim=1) / n, torch.zeros_like(potential_values.sum(dim=1)))
    balanced_potential_values = mutated_potential_values / (1 + balance_factor)
    
    # Adjust the balance factor to ensure the potential values are not too high
    adjusted_balance_factor = torch.clamp(balance_factor, min=0.1, max=1.0)
    final_potential_values = balanced_potential_values * adjusted_balance_factor
    
    # Set the depot to 0 potential value
    final_potential_values[0, :] = 0
    final_potential_values[:, 0] = 0
    
    return final_potential_values
```
