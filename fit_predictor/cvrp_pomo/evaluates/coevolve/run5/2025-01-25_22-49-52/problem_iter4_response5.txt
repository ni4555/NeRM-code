```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate the potential value for each edge using a balanced approach with penalties
    potential_values = (normalized_distances + normalized_demands).abs() * (1 - 2 * normalized_demands)
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    # Apply a penalty for high demands to discourage overloading vehicles
    potential_values[torch.where(demands > 1.0)] *= 2.0
    
    return potential_values
```
