```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic: edges with shorter distances are more promising
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic: edges with normalized demand closer to 1 are more promising
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment: adaptively adjust the search space based on performance
    mean_distance = distance_matrix.mean()
    heuristic_range = 1.0 / (distance_matrix + 1e-8)
    if mean_distance > 1.5:
        heuristic_range *= 0.5

    # Load balancing strategy: prioritize edges with demand close to capacity
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # High-demand customers are given higher weight
    high_demand_weight = torch.where(normalized_demands > 0.8, 1.5, 1.0)

    # Combine heuristics with weights based on their effectiveness
    combined_heuristic = (inverse_distance * 0.4 +
                          demand_weight * 0.5 +
                          heuristic_range * 0.1 +
                          load_balance * 0.2 +
                          high_demand_weight * 0.3)

    # Clamp values to a reasonable range to avoid extreme values
    combined_heuristic = torch.clamp(combined_heuristic, min=-10.0, max=10.0)

    return combined_heuristic
```
