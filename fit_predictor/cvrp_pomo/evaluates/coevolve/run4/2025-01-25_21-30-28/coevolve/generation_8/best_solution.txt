Fitness: 23.26198387145996

Description:
Design an optimized heuristic algorithm for solving the Capacitated Vehicle Routing Problem (CVRP) that minimizes total travel distance while adhering to vehicle capacity constraints. The algorithm must iteratively refine route sequences by utilizing inverse distance and demand normalization heuristics to optimize the allocation of customer demands and reduce the overall distance traveled. Implement load balancing strategies to ensure vehicle capacities are not exceeded, and adjust vehicle routes dynamically to enhance load distribution. Further enhance the search process with a heuristic range adjustment to expand the solution space based on previous solution performance. The algorithm should be robust, capable of adapting to real-world scenarios, and provide balanced, optimal solutions that minimize travel time while maximizing resource utilization, adhering to strict capacity and demand constraints of the vehicles.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the inverse distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Normalize the demands by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    
    # Compute the heuristic values as the product of inverse distance and normalized demand
    heuristic_values = inv_distance_matrix * normalized_demands
    
    return heuristic_values