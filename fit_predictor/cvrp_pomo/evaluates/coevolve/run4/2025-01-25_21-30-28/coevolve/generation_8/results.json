{
  "generation": 8,
  "description": "Design an optimized heuristic algorithm for solving the Capacitated Vehicle Routing Problem (CVRP) that minimizes total travel distance while adhering to vehicle capacity constraints. The algorithm must iteratively refine route sequences by utilizing inverse distance and demand normalization heuristics to optimize the allocation of customer demands and reduce the overall distance traveled. Implement load balancing strategies to ensure vehicle capacities are not exceeded, and adjust vehicle routes dynamically to enhance load distribution. Further enhance the search process with a heuristic range adjustment to expand the solution space based on previous solution performance. The algorithm should be robust, capable of adapting to real-world scenarios, and provide balanced, optimal solutions that minimize travel time while maximizing resource utilization, adhering to strict capacity and demand constraints of the vehicles.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the inverse distance matrix\n    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Normalize the demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Compute the heuristic values as the product of inverse distance and normalized demand\n    heuristic_values = inv_distance_matrix * normalized_demands\n    \n    return heuristic_values",
      "fitness": 23.26198387145996,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_0.txt",
      "code_file": "coevolve\\generation_8\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    # Inverse distance heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n\n    # Demand normalization heuristic\n    normalized_demands = demands / demands.sum()\n\n    # Calculate the heuristic value for each edge\n    # We use a simple weighted sum of inverse distance and normalized demand\n    heuristic_matrix = inverse_distance * normalized_demands\n\n    return heuristic_matrix",
      "fitness": 23.26198387145996,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_8.txt",
      "code_file": "coevolve\\generation_8\\code_8.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the inverse distance matrix\n    inv_distance_matrix = 1.0 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero\n    \n    # Normalize the demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the heuristics based on inverse distance and demand normalization\n    heuristics = inv_distance_matrix * normalized_demands\n    \n    return heuristics",
      "fitness": 23.26198387145996,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_10.txt",
      "code_file": "coevolve\\generation_8\\code_10.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Inverse distance heuristic\n    inv_distance = 1.0 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Demand normalization heuristic\n    demand_normalized = demands / demands.sum()\n    \n    # Combining heuristics\n    combined_heuristics = inv_distance * demand_normalized\n    \n    # Ensuring that the values are within a reasonable range to prevent overflow or underflow\n    combined_heuristics = torch.clamp(combined_heuristics, min=-1.0, max=1.0)\n    \n    return combined_heuristics",
      "fitness": 23.262128829956055,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_3.txt",
      "code_file": "coevolve\\generation_8\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands to the range [0, 1]\n    normalized_demands = demands / demands.sum()\n    \n    # Inverse distance heuristic\n    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small value to avoid division by zero\n    \n    # Combine inverse distance and demand normalization\n    combined_heuristic = inverse_distance * normalized_demands\n    \n    # Apply a scaling factor to adjust the heuristics\n    scaling_factor = 10  # This can be tuned for better performance\n    heuristics = combined_heuristic * scaling_factor\n    \n    return heuristics",
      "fitness": 23.26265525817871,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_2.txt",
      "code_file": "coevolve\\generation_8\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    demand_normalized = demands / total_capacity\n    \n    # Inverse distance heuristic\n    inv_distance = 1 / (distance_matrix + 1e-8)  # Adding a small value to avoid division by zero\n    \n    # Demand normalization heuristic\n    demand_normalized = demands / demands.sum()\n    \n    # Combine heuristics\n    combined_heuristic = inv_distance * demand_normalized\n    \n    # Negative values for undesirable edges (to be minimized during the search)\n    combined_heuristic = -combined_heuristic\n    \n    return combined_heuristic",
      "fitness": 23.331899642944336,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_4.txt",
      "code_file": "coevolve\\generation_8\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate inverse distance\n    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Normalize demands\n    demand_sum = demands.sum()\n    normalized_demands = demands / demand_sum\n    \n    # Calculate heuristics based on inverse distance and demand normalization\n    heuristics = -inv_distance_matrix * normalized_demands\n    \n    return heuristics",
      "fitness": 23.331899642944336,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_5.txt",
      "code_file": "coevolve\\generation_8\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate inverse distance matrix\n    inv_distance_matrix = 1.0 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n    \n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the heuristics using inverse distance and demand normalization\n    heuristics = -inv_distance_matrix * normalized_demands\n    \n    return heuristics",
      "fitness": 23.331899642944336,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_9.txt",
      "code_file": "coevolve\\generation_8\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate inverse distance\n    inv_distance = 1.0 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Normalize demands by the total capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Combine inverse distance and demand normalization\n    heuristics = inv_distance * normalized_demands\n    \n    # Adjust the heuristics to have negative values for undesirable edges\n    heuristics = 1.0 - heuristics\n    \n    return heuristics",
      "fitness": 23.331899642944336,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_11.txt",
      "code_file": "coevolve\\generation_8\\code_11.py"
    }
  ]
}