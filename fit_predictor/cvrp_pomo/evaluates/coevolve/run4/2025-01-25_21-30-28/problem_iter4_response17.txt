```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic: edges with shorter distances are more promising
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic: edges with normalized demand closer to 1 are more promising
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment: penalize edges with larger distances
    mean_distance = distance_matrix.mean()
    heuristic_range = 1.0 / (distance_matrix + mean_distance + 1e-8)

    # Load balancing strategy: prioritize edges with demand close to capacity
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Weights for each heuristic
    weights = {
        'inverse_distance': 0.6,
        'demand_weight': 0.3,
        'heuristic_range': 0.05,
        'load_balance': 0.05
    }

    # Combine heuristics with weightings for each heuristic
    combined_heuristic = (
        weights['inverse_distance'] * inverse_distance +
        weights['demand_weight'] * demand_weight +
        weights['heuristic_range'] * heuristic_range +
        weights['load_balance'] * load_balance
    )

    # Ensure the heuristics are within a specified range
    combined_heuristic = torch.clamp(combined_heuristic, min=-10.0, max=10.0)

    return combined_heuristic
```
