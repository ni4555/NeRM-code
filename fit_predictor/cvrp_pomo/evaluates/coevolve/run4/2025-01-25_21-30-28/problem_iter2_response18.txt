```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment: adaptively modify the search space based on demand normalization
    avg_demand_deviation = torch.mean(demand_diff)
    heuristic_range_adjustment = 1.0 / (avg_demand_deviation + 1e-8)

    # Load balancing strategy: dynamically adjust customer demand allocation
    load_balance = torch.abs(normalized_demands - 0.5) * 2.0
    load_balance_weight = torch.exp(-load_balance)

    # Integrate heuristics with normalization and load balancing
    combined_heuristic = inverse_distance + demand_weight * heuristic_range_adjustment + load_balance_weight

    # Adjust the heuristic to balance the influence of each factor
    adjusted_heuristic = combined_heuristic * (1 - (n - 1) / total_capacity)

    return adjusted_heuristic
```
