```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment
    mean_distance = distance_matrix.mean()
    heuristic_range = 1.0 / (distance_matrix + mean_distance + 1e-8)

    # Load balancing strategy
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Penalize edges that would exceed vehicle capacity
    capacity_penalty = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - demands))

    # Prioritize local and capacity-aware heuristics
    local_search = (inverse_distance * 0.5 + demand_weight * 0.5)
    capacity_aware = (load_balance * 0.5 + capacity_penalty * 0.5)

    # Combine local and capacity-aware heuristics
    combined_heuristic = local_search * 0.6 + capacity_aware * 0.4

    # Normalize and scale heuristics to balance global and local search
    combined_heuristic = torch.clamp(combined_heuristic, min=-10.0, max=10.0)

    # Integrate domain knowledge through tailored weight adjustments
    domain_knowledge_adjustment = torch.full_like(combined_heuristic, 0.1)
    combined_heuristic += domain_knowledge_adjustment

    # Integrate domain knowledge into heuristic weights
    # Adjust weights based on the problem characteristics or performance metrics
    domain_knowledge_weights = torch.tensor([0.5, 0.5])
    combined_heuristic = combined_heuristic * domain_knowledge_weights

    return combined_heuristic
```
