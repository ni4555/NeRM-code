```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment
    mean_distance = distance_matrix.mean()
    heuristic_range = 1.0 / (distance_matrix + mean_distance + 1e-8)

    # Load balancing strategy
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Dynamic balancing of heuristics
    heuristic_weights = {
        'inverse_distance': 0.5,
        'demand_weight': 0.3,
        'heuristic_range': 0.2,
        'load_balance': 0.4
    }

    # Combine heuristics using dynamic weights
    combined_heuristic = (inverse_distance * heuristic_weights['inverse_distance'] +
                          demand_weight * heuristic_weights['demand_weight'] +
                          heuristic_range * heuristic_weights['heuristic_range'] +
                          load_balance * heuristic_weights['load_balance'])

    # Normalize combined heuristic to ensure stability
    combined_heuristic = combined_heuristic / combined_heuristic.sum()

    # Mutation: Introduce a random factor to explore new solutions
    random_factor = torch.rand_like(combined_heuristic)
    mutated_heuristic = combined_heuristic + random_factor * 2 - 1

    # Mutation: Introduce a penalty for large deviations from the mean
    penalty_factor = torch.clamp(torch.abs(mutated_heuristic - combined_heuristic) * 100, max=10.0)
    mutated_heuristic -= penalty_factor

    # Mutation: Introduce a bonus for large deviations from the mean if they lead to improvement
    improvement_bonus = torch.clamp(torch.abs(mutated_heuristic - combined_heuristic) * 10, max=10.0)
    mutated_heuristic += improvement_bonus

    # Normalize mutated heuristic to ensure stability
    mutated_heuristic = mutated_heuristic / mutated_heuristic.sum()

    return mutated_heuristic
```
