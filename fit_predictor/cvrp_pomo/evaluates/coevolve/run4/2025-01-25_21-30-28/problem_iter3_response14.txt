```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment, with dynamic adjustment based on performance
    mean_distance = distance_matrix.mean()
    performance_based_adjustment = (1.0 / (distance_matrix + mean_distance + 1e-8)) * torch.rand(n)
    heuristic_range = performance_based_adjustment

    # Load balancing strategy, focusing on demand distribution
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Enhanced combined heuristic, with dynamic weights based on the problem characteristics
    combined_heuristic = inverse_distance * 0.5 + demand_weight * 0.3 + heuristic_range * 0.2 + load_balance * 0.4
    dynamic_weights = torch.rand(4)
    combined_heuristic = combined_heuristic * dynamic_weights

    # Quantify and tune weights based on problem impact
    weights_impact = torch.rand(4)
    combined_heuristic = combined_heuristic * weights_impact

    # Clamp values to a reasonable range to avoid extreme values
    combined_heuristic = torch.clamp(combined_heuristic, min=-10.0, max=10.0)

    return combined_heuristic
```
