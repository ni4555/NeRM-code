```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment
    mean_distance = distance_matrix.mean()
    heuristic_range = 1.0 / (distance_matrix + mean_distance + 1e-8)

    # Load balancing strategy
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Combine heuristics with balanced weights
    combined_heuristic = (inverse_distance * 0.45 +
                          demand_weight * 0.25 +
                          heuristic_range * 0.20 +
                          load_balance * 0.10)

    # Normalize combined heuristic to ensure all values are positive
    max_value = combined_heuristic.max()
    min_value = combined_heuristic.min()
    combined_heuristic = (combined_heuristic - min_value) / (max_value - min_value)

    # Mutation: Introduce a random factor to explore new solutions
    random_factor = torch.rand_like(combined_heuristic)
    mutated_heuristic = combined_heuristic + random_factor * 0.05 - 0.025

    # Mutation: Introduce a penalty for large deviations from the mean
    penalty_factor = torch.clamp(torch.abs(mutated_heuristic - combined_heuristic) * 5, max=1.0)
    mutated_heuristic -= penalty_factor

    # Mutation: Introduce a bonus for large deviations from the mean if they lead to improvement
    improvement_bonus = torch.clamp(torch.abs(mutated_heuristic - combined_heuristic) * 1, max=1.0)
    mutated_heuristic += improvement_bonus

    # Normalize mutated heuristic to ensure all values are positive
    max_muted_value = mutated_heuristic.max()
    min_muted_value = mutated_heuristic.min()
    mutated_heuristic = (mutated_heuristic - min_muted_value) / (max_muted_value - min_muted_value)

    return mutated_heuristic
```
