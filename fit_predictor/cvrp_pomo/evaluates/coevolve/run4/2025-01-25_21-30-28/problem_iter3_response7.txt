```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic: edges with shorter distances are more promising
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic: edges with normalized demand closer to 1 are more promising
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment: penalize edges with larger distances
    mean_distance = distance_matrix.mean()
    heuristic_range = 1.0 / (distance_matrix + mean_distance + 1e-8)

    # Load balancing strategy: prioritize edges with demand close to capacity
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Adaptive weight tuning based on performance (example using mean distance)
    performance_weight = torch.exp(-mean_distance / (mean_distance + 1))

    # Combine heuristics with performance-based weights
    combined_heuristic = (
        inverse_distance * 0.5 * performance_weight +
        demand_weight * 0.3 * performance_weight +
        heuristic_range * 0.2 * performance_weight +
        load_balance * 0.4 * performance_weight
    )

    # Normalize the combined heuristic to maintain the scale of promising edges
    combined_heuristic /= combined_heuristic.max()

    # Clamp values to a reasonable range to avoid extreme values
    combined_heuristic = torch.clamp(combined_heuristic, min=-1.0, max=1.0)

    return combined_heuristic
```
