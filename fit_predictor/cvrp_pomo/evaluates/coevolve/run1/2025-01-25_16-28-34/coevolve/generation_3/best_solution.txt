Fitness: 23.28392219543457

Description:
The goal is to develop an optimized routing strategy for a fleet of vehicles that must deliver goods to a set of destinations while adhering to specific constraints. The problem can be described as follows:

Design a heuristic for solving the Capacitated Vehicle Routing Problem (CVRP) that efficiently allocates vehicle routes to ensure all delivery demands are met without exceeding vehicle capacities. The heuristic should incorporate demand and distance normalization to create a balanced and comparable scale for all nodes. Additionally, the heuristic must explicitly check vehicle capacities to ensure that no route exceeds the vehicle's carrying capacity. The strategy should be straightforward and directly address the problem constraints, focusing on simplicity and clear objectives to achieve optimal load distribution and minimize overall routing costs.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize demand by dividing by the total capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    
    # Normalize distance matrix by dividing by the maximum distance
    max_distance = distance_matrix.max()
    normalized_distance_matrix = distance_matrix / max_distance
    
    # Calculate the heuristics as a combination of normalized demand and distance
    # Negative values for undesirable edges, positive for promising ones
    heuristics = normalized_distance_matrix - normalized_demands
    
    return heuristics