```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the total vehicle capacity
    total_capacity = demands.sum()
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Calculate the heuristics based on the average demand per edge
    heuristics = (average_demand_per_edge - total_capacity) / total_capacity
    
    # Apply a local search heuristic to refine neighborhood exploration
    # This part is a placeholder for the problem-specific local search
    heuristics = refine_neighborhood(heuristics, distance_matrix, demands)
    
    # Apply PSO-inspired velocity adjustments to enhance exploration
    # This part is a placeholder for the adaptive PSO velocity update
    heuristics = update_velocity(heuristics)
    
    # Apply tabu search to promote efficient navigation
    # This part is a placeholder for the dynamic tabu search
    heuristics = tabu_search(heuristics, distance_matrix, demands)
    
    # Adjust the heuristics to ensure they are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0  # Avoid division by zero
    heuristics[heuristics >= 0] = 0  # Set non-negative values to zero
    
    return heuristics

def refine_neighborhood(heuristics: torch.Tensor, distance_matrix: torch.Tensor, demands: torch.Tensor):
    # Placeholder for local search strategy
    return heuristics

def update_velocity(heuristics: torch.Tensor):
    # Placeholder for PSO-inspired velocity update
    return heuristics

def tabu_search(heuristics: torch.Tensor, distance_matrix: torch.Tensor, demands: torch.Tensor):
    # Placeholder for dynamic tabu search
    return heuristics
```
