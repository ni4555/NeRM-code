```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Adjust the average demand per edge to be relative to the total capacity
    adjusted_average_demand = average_demand_per_edge / total_capacity
    
    # Apply problem-specific local search to refine neighborhood exploration
    # This is a placeholder for the problem-specific local search mechanism
    refined_adjusted_average_demand = refine_neighborhood(adjusted_average_demand)
    
    # Apply adaptive PSO with adaptive population management to enhance exploration
    # This is a placeholder for the PSO-based adjustment
    pso_adjusted_average_demand = pso_based_adjustment(refined_adjusted_average_demand)
    
    # Apply dynamic tabu search with adaptive cost function to promote efficient navigation
    # This is a placeholder for the tabu search-based adjustment
    tabu_adjusted_average_demand = tabu_based_adjustment(pso_adjusted_average_demand)
    
    # Final heuristics matrix after applying all heuristic adjustments
    heuristics = tabu_adjusted_average_demand
    
    # Return the heuristics matrix with edges with zero distance set to zero
    heuristics[distance_matrix == 0] = 0
    
    return heuristics

def refine_neighborhood(adjusted_demand):
    # Placeholder for local search mechanism
    # Vectorized implementation should be used here
    return adjusted_demand

def pso_based_adjustment(adjusted_demand):
    # Placeholder for PSO-based adjustment
    # Vectorized implementation should be used here
    return adjusted_demand

def tabu_based_adjustment(adjusted_demand):
    # Placeholder for tabu search-based adjustment
    # Vectorized implementation should be used here
    return adjusted_demand
```
