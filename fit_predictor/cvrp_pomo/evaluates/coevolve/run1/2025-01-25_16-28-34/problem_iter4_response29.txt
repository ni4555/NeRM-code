```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)
    total_capacity = demands.sum()

    # Problem-specific Local Search
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                load = demands[i] + demands[j]
                if load > 1.0:
                    heuristics[i, j] = -1  # Undesirable edge due to overcapacity
                else:
                    # Calculate a heuristic based on load, distance, and total capacity
                    edge_heuristic = torch.clamp((load / total_capacity) - 1, min=0)
                    heuristics[i, j] = -edge_heuristic * distance_matrix[i, j]

    # Adjust the heuristic for the depot edges
    for i in range(1, n):
        heuristics[i, 0] = heuristics[i, 0] - distance_matrix[i, 0]
        heuristics[0, i] = heuristics[0, i] - distance_matrix[0, i]

    # Adaptive PSO with Population Management
    swarm_size = 10  # Example swarm size
    iterations = 100  # Example number of iterations
    for _ in range(iterations):
        for i in range(swarm_size):
            # Update velocity and position based on local and global best
            # This is a simplified example and should be replaced with actual PSO logic
            velocity = torch.rand_like(heuristics) * 0.1
            heuristics += velocity

    # Dynamic Tabu Search with Adaptive Cost Function
    tabu_list = set()
    for i in range(n):
        for j in range(i + 1, n):
            if (i, j) not in tabu_list and load[0, i, j] <= 1:
                # Update heuristics based on tabu search
                heuristics[i, j] *= 0.95
                heuristics[j, i] *= 0.95
                tabu_list.add((i, j))

    # Adjust heuristics to ensure they are negative for undesirable edges
    heuristics[heuristics >= 0] = 0

    return heuristics
```
