```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Calculate the heuristics based on the average demand per edge
    heuristics = (average_demand_per_edge - total_capacity) / total_capacity
    
    # Apply local search penalties for load imbalance
    load_penalty = torch.abs(demands[:, None] + demands[None, :]) * distance_matrix
    load_penalty = torch.sum(load_penalty, dim=2) / total_capacity
    heuristics = heuristics + load_penalty
    
    # Apply PSO-inspired exploration: increase heuristics for edges with lower load factor
    heuristics = heuristics + (1 - (heuristics / total_capacity))
    
    # Apply tabu search-inspired exploitation: decrease heuristics for recently visited edges
    visited_edges = torch.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i + 1, n):
            visited_edges[i, j] = 1
            visited_edges[j, i] = 1
    heuristics = heuristics * (1 - visited_edges)
    
    # Normalize heuristics to ensure they are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0  # Avoid division by zero
    heuristics[heuristics >= 0] = 0  # Set non-negative values to zero
    
    return heuristics
```
