```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demands = demands / total_capacity  # Normalize demands to vehicle capacity
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Apply problem-specific local search to refine neighborhood exploration
    # Vectorized implementation
    load = average_demand_per_edge > 1.0
    average_demand_per_edge[load] = 0  # Set edges with overcapacity to zero
    
    # Placeholder for adaptive PSO with population management
    # Vectorized implementation (assuming PSO-related calculations)
    # Assuming PSO does not change the average demand significantly
    # pso_adjusted_average_demand = ps§à_based_adjustment(average_demand_per_edge)
    
    # Placeholder for dynamic tabu search with adaptive cost function
    # Vectorized implementation (assuming Tabu Search-related calculations)
    # Assuming Tabu Search does not change the average demand significantly
    # tabu_adjusted_average_demand = tabu_based_adjustment(pso_adjusted_average_demand)
    
    # Final heuristics matrix after applying all heuristic adjustments
    # Assuming no significant changes from PSO and Tabu Search
    heuristics = average_demand_per_edge
    
    # Ensure heuristics are negative for undesirable edges
    undesirable_edges = average_demand_per_edge <= 0
    heuristics[undesirable_edges] = -float('inf')
    
    # Return the heuristics matrix with edges with zero distance set to zero
    heuristics[distance_matrix == 0] = 0
    
    return heuristics
```
