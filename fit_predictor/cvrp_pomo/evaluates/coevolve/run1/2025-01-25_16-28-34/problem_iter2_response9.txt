```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the total vehicle capacity
    total_capacity = demands.sum()
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Calculate the weighted load factor for each edge
    weighted_load_factor = (average_demand_per_edge - total_capacity) / total_capacity
    
    # Apply local search to refine neighborhood exploration
    # This section is a placeholder for a refined local search mechanism
    # and should include logic to balance load and ensure capacity constraints
    
    # Apply adaptive PSO with population management
    # This section is a placeholder for the PSO logic with adaptive velocity and position update rules
    
    # Apply dynamic tabu search with adaptive cost function
    tabu_list = set()
    for i in range(n):
        for j in range(i + 1, n):
            if (i, j) not in tabu_list and weighted_load_factor[i, j] <= 1:
                # Update heuristics based on tabu search
                heuristics[i, j] *= 0.95
                heuristics[j, i] *= 0.95
                tabu_list.add((i, j))
    
    # Adjust the heuristics to ensure they are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0  # Avoid division by zero
    heuristics[weighted_load_factor >= 0] = 0  # Set non-negative values to zero
    
    return heuristics
```
