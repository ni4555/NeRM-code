```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demands = demands / total_capacity
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = torch.clamp((demands[:, None] + demands[None, :]) * distance_matrix, min=0)
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Apply penalties for edges that exceed the vehicle's capacity
    overload_penalty = torch.clamp(average_demand_per_edge / total_capacity - 1, min=0)
    
    # Apply a penalty for very short edges to avoid unnecessary detours
    edge_length_penalty = 1 - distance_matrix / (distance_matrix.max())
    
    # Calculate the heuristics based on penalties
    heuristics = -torch.abs(overload_penalty + edge_length_penalty)
    
    # Ensure the heuristics are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0
    
    return heuristics
```
