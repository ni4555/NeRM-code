```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Introduce a more refined heuristic that considers the balance between overloading and underloading
    heuristics = torch.log1p(average_demand_per_edge) - torch.log1p(total_capacity)
    
    # Calculate penalties for overloading and underloading
    overload_penalty = torch.abs(heuristics)
    underload_penalty = torch.abs(1 - heuristics)
    
    # Dynamic penalties based on the ratio of average demand to total capacity
    penalty_ratio = torch.clamp((average_demand_per_edge / total_capacity), min=0, max=1)
    dynamic_penalty = (penalty_ratio ** 2) * (overload_penalty + underload_penalty)
    
    # Apply the dynamic penalty to the heuristics
    heuristics -= dynamic_penalty
    
    # Encourage diversity and adapt the heuristic based on historical information
    tabu_list = torch.zeros_like(heuristics)
    for i in range(1, n):
        for j in range(i + 1, n):
            if torch.any(tabu_list[i, j]) == 0:
                tabu_list[i, j] = 1  # Add to tabu list if not recently considered
            else:
                tabu_list[i, j] = max(tabu_list[i, j] - 0.5, 0)  # Decrease tabu list value
    
    # Adjust heuristics based on tabu list
    heuristics = heuristics - tabu_list * 0.2
    
    # Ensure the heuristics are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0
    heuristics[heuristics >= 0] = -torch.abs(heuristics[heuristics >= 0])
    
    # Add perturbation to maintain diversity
    perturbation = torch.rand_like(heuristics)
    heuristics -= perturbation * 0.05
    
    return heuristics
```
