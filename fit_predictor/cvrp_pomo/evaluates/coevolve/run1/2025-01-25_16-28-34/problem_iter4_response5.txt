```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Adjust the average demand per edge to be relative to the total capacity
    adjusted_average_demand = average_demand_per_edge / total_capacity
    
    # Calculate the heuristics based on the adjusted average demand per edge
    heuristics = (adjusted_average_demand - 1) * (distance_matrix != 0)
    
    # Calculate the load on the edges
    edge_load = torch.clamp(average_demand_per_edge * total_capacity, 0, 1)
    
    # Calculate the penalty for overloading
    load_penalty = (edge_load - 1) * 1000
    
    # Apply neighborhood validity checks
    edge_mask = (distance_matrix != 0) & (edge_load <= 1)
    heuristics[edge_mask] -= load_penalty[edge_mask]
    
    return heuristics
```
