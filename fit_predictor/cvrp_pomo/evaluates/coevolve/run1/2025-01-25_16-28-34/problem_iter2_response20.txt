```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demands_expanded = demands[:, None] + demands[None, :]
    edge_demand_sum = demands_expanded * distance_matrix
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    heuristics = (average_demand_per_edge - total_capacity) / total_capacity
    
    # Set the heuristics to zero for the diagonal (depot to itself) and for edges that cannot be taken
    heuristics[distance_matrix == 0] = 0
    heuristics[heuristics >= 0] = 0
    
    return heuristics
```
