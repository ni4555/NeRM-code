```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Adjust the average demand per edge to be relative to the total capacity
    adjusted_average_demand = average_demand_per_edge / total_capacity
    
    # Introduce a penalty for overcapacity and a bonus for undercapacity
    penalty = torch.where(adjusted_average_demand > 1, 
                          torch.log(adjusted_average_demand) - 1, 
                          0)
    bonus = torch.where(adjusted_average_demand < 1, 
                        torch.log(1 / adjusted_average_demand) - 1, 
                        0)
    
    # Introduce exploration and exploitation mechanisms
    exploration = torch.rand_like(adjusted_average_demand) * 0.1
    exploitation = (1 - adjusted_average_demand) ** 3
    
    # Combine exploration and exploitation with the penalties and bonuses
    heuristics = penalty + bonus + exploration - exploitation
    
    # Incorporate distance into the heuristic
    heuristics -= distance_matrix
    
    # Introduce a penalty for very high and very low adjusted average demands
    high_demand_penalty = torch.where(adjusted_average_demand > 1.1, 
                                      -10 * (adjusted_average_demand - 1.1), 
                                      torch.zeros_like(adjusted_average_demand))
    low_demand_penalty = torch.where(adjusted_average_demand < 0.9, 
                                      -10 * (1.1 - adjusted_average_demand), 
                                      torch.zeros_like(adjusted_average_demand))
    
    # Apply the penalties to the heuristics
    heuristics += high_demand_penalty + low_demand_penalty
    
    # Set edges with zero distance to zero
    heuristics[distance_matrix == 0] = 0
    
    return heuristics
```
