```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Calculate penalties for overloading and underloading
    overload_penalty = torch.log1p((average_demand_per_edge - total_capacity) / total_capacity)
    underload_penalty = torch.log1p((total_capacity - average_demand_per_edge) / total_capacity)
    
    # Introduce a penalty for very short edges to encourage more diverse routes
    edge_length_penalty = torch.log1p((distance_matrix - 1.5) / 1.5)
    
    # Weighted combination of penalties
    penalty = 0.5 * (overload_penalty + underload_penalty) + 0.5 * edge_length_penalty
    
    # Apply the penalty to the heuristics
    heuristics = average_demand_per_edge - penalty
    
    # Ensure the heuristics are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0
    heuristics[heuristics >= 0] = -torch.abs(heuristics[heuristics >= 0])
    
    return heuristics
```
