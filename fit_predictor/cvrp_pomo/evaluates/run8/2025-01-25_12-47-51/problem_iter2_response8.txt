```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Greedy heuristic: start with the depot and add customers with the least demand first
    sorted_indices = torch.argsort(demands[1:])  # Ignore the depot's demand
    for i in sorted_indices:
        current_position = 0
        while True:
            min_distance = torch.min(distance_matrix[current_position, 1:])
            next_position = torch.argmin(distance_matrix[current_position, 1:])
            if demands[next_position] + demands[current_position] <= 1:
                heuristics[current_position, next_position] = min_distance
                break
            current_position = next_position

    # Nearest neighbor heuristic: for each customer, add the closest node that can be reached without exceeding capacity
    for i in range(1, n):
        remaining_capacity = 1 - demands[i]
        if remaining_capacity > 0:
            closest_node = torch.argmin(distance_matrix[i, 1:])
            if demands[closest_node] <= remaining_capacity:
                heuristics[i, closest_node] = distance_matrix[i, closest_node]

    # Combine greedy and nearest neighbor heuristics: Use a modified greedy approach to add the closest feasible nodes
    for i in range(1, n):
        current_capacity = 1 - demands[i]
        feasible_nodes = distance_matrix[i, 1:].argmin()  # Find the nearest feasible node
        while feasible_nodes != torch.zeros_like(feasible_nodes) and current_capacity > 0:
            current_capacity -= demands[feasible_nodes]
            next_node = feasible_nodes
            feasible_nodes = torch.min(distance_matrix[feasible_nodes[1:], 1:]).argmin()  # Find the next feasible node
            if current_capacity + demands[next_node] <= 1:
                heuristics[i, next_node] = distance_matrix[i, next_node]

    return heuristics
```
