```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate inverse distance matrix and normalize by total demand
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Avoid division by zero
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: prioritize edges with higher demand
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Remaining capacity-based heuristic: prioritize edges with higher remaining capacity
    remaining_capacity = 1 - demands
    capacity_weighted_distance = remaining_capacity * inv_distance_matrix

    # Nearest-neighbor heuristic: add the closest node for each customer
    nearest_neighbor = torch.min(distance_matrix, dim=1).values

    # Improved demand-based heuristic: add a penalty for edges with high demand
    high_demand_penalty = 1 / (demands + 1e-8) * demand_weighted_distance

    # Improved remaining capacity-based heuristic: reduce penalty for high capacity utilization
    capacity_penalty = remaining_capacity * capacity_weighted_distance
    capacity_penalty[remaining_capacity < 0.5] = 0

    # Improved nearest-neighbor heuristic: add more weight to closest nodes
    nearest_neighbor_weight = 10 * nearest_neighbor

    # Balance between demand and capacity heuristics to avoid infeasibilities
    balance_term = (1 - demand_normalized) * capacity_penalty

    # Combine heuristics with improved terms
    combined_heuristic = demand_weighted_distance + balance_term + nearest_neighbor_weight

    # Ensure that edges with insufficient capacity are penalized
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    # Apply a smoothing term to prevent very large heuristic values
    smoothing_factor = 0.5
    combined_heuristic = (1 - smoothing_factor) * combined_heuristic + smoothing_factor

    return combined_heuristic
```
