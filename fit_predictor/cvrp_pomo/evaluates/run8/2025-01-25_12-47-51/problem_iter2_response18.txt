```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of all demands to use for normalization
    total_demand = torch.sum(demands)
    
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    
    # Calculate the inverse of the normalized distance matrix
    inv_normalized_distance_matrix = 1 / (normalized_distance_matrix + 1e-8)
    
    # Greedy heuristic: sort nodes by demand and add the ones with the lowest demand first
    sorted_indices = torch.argsort(demands[1:])  # Ignore the depot's demand
    for i in sorted_indices:
        current_position = 0
        while True:
            remaining_capacity = 1 - demands[i]
            if demands[current_position] <= remaining_capacity:
                heuristics[current_position, i] = inv_normalized_distance_matrix[current_position, i]
                break
            next_position = torch.argmin(inv_normalized_distance_matrix[current_position, 1:])
            if demands[next_position] + demands[current_position] <= 1:
                heuristics[current_position, next_position] = inv_normalized_distance_matrix[current_position, next_position]
                current_position = next_position
            else:
                break
    
    # Nearest neighbor heuristic: for each customer, add the closest node that can be reached without exceeding capacity
    for i in range(1, n):
        remaining_capacity = 1 - demands[i]
        if remaining_capacity > 0:
            closest_node = torch.argmin(distance_matrix[i, 1:])
            if demands[closest_node] <= remaining_capacity:
                heuristics[i, closest_node] = inv_normalized_distance_matrix[i, closest_node]

    return heuristics
```
