```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic incorporating demand and distance considerations."""
    # Calculate the total demand
    total_demand = torch.sum(demands)
    
    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Calculate the weighted inverse distance by customer demand
    weighted_inv_distance = inv_distance_matrix * demands
    
    # Normalize the weighted inverse distance by the total demand
    normalized_weighted_inv_distance = weighted_inv_distance / total_demand
    
    # Calculate the heuristic matrix by subtracting the normalized weighted inverse distance from 1
    heuristic_matrix = 1 - normalized_weighted_inv_distance
    
    return heuristic_matrix
```
