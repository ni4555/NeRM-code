```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)

    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Calculate the demand-to-capacity ratio
    demand_to_capacity_ratio = demands / total_demand

    # Create a heuristic that combines normalized inverse distance and demand-to-capacity ratio
    heuristic = normalized_inv_distance_matrix * (1 - demand_to_capacity_ratio)

    # Ensure that the heuristic values are non-negative
    heuristic = torch.clamp(heuristic, min=0.0)

    return heuristic
```
