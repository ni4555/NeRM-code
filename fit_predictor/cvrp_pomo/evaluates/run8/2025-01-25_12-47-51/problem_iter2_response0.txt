```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Precompute the demand threshold for each edge
    demand_thresholds = 1 - demands

    # Greedy heuristic: start with the depot and add customers with the least demand first
    sorted_indices = torch.argsort(demands[1:])  # Ignore the depot's demand
    for i in sorted_indices:
        current_position = 0
        while True:
            # Find the next customer with the minimum remaining capacity
            mask = (distance_matrix[current_position, 1:] <= demand_thresholds[current_position])
            next_positions = torch.nonzero(mask, as_tuple=False)[0]
            if len(next_positions) == 0:
                break
            next_position = next_positions[torch.argmin(distance_matrix[current_position, next_positions])]
            # Update the heuristic
            heuristics[current_position, next_position] = distance_matrix[current_position, next_position]
            # Update the remaining capacity
            demand_thresholds[current_position] -= demands[next_position]
            current_position = next_position

    # Nearest neighbor heuristic: for each customer, add the closest node that can be reached without exceeding capacity
    for i in range(1, n):
        if demand_thresholds[i] > 0:
            closest_node = torch.argmin(distance_matrix[i, 1:])
            if demands[closest_node] <= demand_thresholds[i]:
                heuristics[i, closest_node] = distance_matrix[i, closest_node]
                demand_thresholds[i] -= demands[closest_node]

    return heuristics
```
