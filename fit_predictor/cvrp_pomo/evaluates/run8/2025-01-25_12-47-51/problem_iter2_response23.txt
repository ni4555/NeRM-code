```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic function for CVRP by balancing demand and distance, and promoting diversity."""
    # Calculate the total demand
    total_demand = torch.sum(demands)
    
    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand
    
    # Calculate the difference in demand for diversity
    diversity = torch.abs(torch.diff(demands))
    
    # Use the balance between normalized inverse distance and diversity as the heuristic
    # Promote diversity with a smaller scale factor and penalize large distances
    heuristic_matrix = -normalized_inv_distance_matrix * (1 + 0.1 * diversity)
    
    return heuristic_matrix
```
