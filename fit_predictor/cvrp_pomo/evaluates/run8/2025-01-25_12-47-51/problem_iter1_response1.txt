```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand from the depot to each customer
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative distance from the depot to each customer
    cumulative_distance = torch.cumsum(distance_matrix[0, 1:], dim=0)
    
    # Calculate the total cost of visiting each customer starting from the depot
    total_cost = cumulative_demand * cumulative_distance
    
    # Normalize the cost by the total demand to get the potential cost per unit of demand
    normalized_cost = total_cost / demands
    
    # Use a negative normalization to make higher cost edges more undesirable
    heuristics = -normalized_cost
    
    return heuristics
```
