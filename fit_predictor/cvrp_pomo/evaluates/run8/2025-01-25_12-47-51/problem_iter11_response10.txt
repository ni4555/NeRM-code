```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Normalize demand and distance for diversity
    normalized_demand = demands / total_demand
    normalized_distance = distance_matrix / torch.max(distance_matrix)

    # Dynamic weights based on domain-specific knowledge
    demand_weight = 1 / (demands + 1e-8)
    distance_weight = 1 / (distance_matrix + 1e-8)

    # Local heuristics: balance demand and distance
    local_heuristic = demand_weight * normalized_demand[:, None] * normalized_distance[None, :]

    # Global heuristics: prioritize high capacity utilization
    remaining_capacity = 1 - demands
    global_heuristic = remaining_capacity * distance_weight

    # Combine local and global heuristics
    combined_heuristic = local_heuristic + global_heuristic

    # Penalties for infeasibilities
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    return combined_heuristic
```
