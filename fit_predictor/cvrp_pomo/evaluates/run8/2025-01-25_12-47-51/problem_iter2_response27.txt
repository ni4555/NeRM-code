```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic for CVRP that considers both local and global constraints, optimized for scalability."""
    # Calculate the total demand
    total_demand = torch.sum(demands)
    
    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand
    
    # Calculate the cumulative demand matrix
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative heuristic matrix
    cumulative_heuristic = torch.cumsum(normalized_inv_distance_matrix, dim=0)
    
    # Create a binary matrix indicating if the cumulative demand exceeds the vehicle capacity
    demand_exceeds_capacity = (cumulative_demand > 1.0).float()
    
    # Apply a penalty to edges that lead to exceeding vehicle capacity
    heuristic_matrix = cumulative_heuristic * (1 - demand_exceeds_capacity)
    
    return heuristic_matrix
```
