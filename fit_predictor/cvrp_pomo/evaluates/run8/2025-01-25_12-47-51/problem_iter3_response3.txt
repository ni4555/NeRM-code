```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the total demand
    total_demand = torch.sum(demands)

    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero

    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Apply a demand-based heuristic
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Apply a capacity-based heuristic
    # Create a matrix where each row is a customer's demand normalized by the vehicle capacity
    demand_normalized_matrix = demands / torch.sum(demands)
    # Calculate the remaining capacity for each customer after considering its own demand
    remaining_capacity = 1 - demand_normalized_matrix
    # Calculate the weighted sum of distances considering the remaining capacity
    capacity_weighted_distance = (remaining_capacity * inv_distance_matrix).T

    # Apply a nearest-neighbor heuristic
    # Initialize a vector with zeros
    initial_position = torch.zeros(n)
    # Initialize the current position
    current_position = 0
    # Initialize a visited set
    visited = set()
    # Initialize a visited matrix
    visited_matrix = torch.zeros(n)
    # Initialize the heuristic matrix
    nearest_neighbor_heuristic = torch.zeros_like(distance_matrix)

    # Iterate through each node
    while len(visited) < n - 1:
        # Get the closest unvisited node
        next_position = torch.argmin(distance_matrix[current_position] + nearest_neighbor_heuristic)
        # If the node has already been visited, break the loop
        if visited_matrix[next_position]:
            break
        # Add the node to the visited set
        visited.add(next_position)
        # Update the visited matrix
        visited_matrix[next_position] = 1
        # Update the heuristic for the current node
        nearest_neighbor_heuristic[current_position, next_position] = -torch.inf
        # Update the current position
        current_position = next_position

    # Combine all heuristics
    combined_heuristic = demand_weighted_distance + capacity_weighted_distance + nearest_neighbor_heuristic

    # Ensure that edges with insufficient capacity are penalized
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    return combined_heuristic
```
