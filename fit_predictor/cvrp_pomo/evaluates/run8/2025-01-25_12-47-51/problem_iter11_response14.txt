```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Dynamic weights based on demand and distance
    demand_weight = 1 / (demands + 1e-8)
    distance_weight = 1 / (distance_matrix + 1e-8)

    # Normalized by total vehicle capacity to balance the impact of demand
    normalized_demand_weight = demand_weight / total_demand

    # Domain-specific knowledge: prioritize short distances and high demands
    distance_normalized = distance_weight / total_demand
    demand_normalized = normalized_demand_weight * demands

    # Use dynamic weights for both distance and demand
    combined_weight = distance_normalized + demand_normalized

    # Prioritize edges with higher demand and shorter distances
    demand_based_heuristic = -combined_weight

    # Integrate diversity by considering the distance to the nearest node
    nearest_neighbor = torch.min(distance_matrix, dim=1).values
    nearest_neighbor_weight = 10 * nearest_neighbor

    # Combine demand-based heuristic with nearest-neighbor heuristic
    combined_heuristic = demand_based_heuristic + nearest_neighbor_weight

    # Avoid infeasibilities by penalizing edges that exceed capacity
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    return combined_heuristic
```
