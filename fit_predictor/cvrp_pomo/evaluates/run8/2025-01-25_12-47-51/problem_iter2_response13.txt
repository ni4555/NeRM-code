```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Inverse distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)

    # Greedy heuristic: Start with the depot and add customers with the least demand first
    sorted_indices = torch.argsort(demands[1:])  # Ignore the depot's demand
    for i in sorted_indices:
        current_position = 0
        while True:
            # Find the closest node that can be added without exceeding capacity
            feasible_indices = (demands[current_position] + demands[1:]) < 1
            feasible_indices[0] = False  # Exclude the current position
            closest_node = torch.argmin(inv_distance_matrix[current_position, feasible_indices])
            if demands[closest_node] <= 1 - demands[current_position]:
                heuristic_matrix[current_position, closest_node] = -inv_distance_matrix[current_position, closest_node]
                demands[current_position] += demands[closest_node]
                if demands[current_position] >= 1:
                    # If the capacity is exceeded, return to the depot
                    heuristic_matrix[current_position, 0] = -inv_distance_matrix[current_position, 0]
                    demands[current_position] -= demands[closest_node]
                    break
            else:
                break

    # Nearest neighbor heuristic: for each customer, add the closest node that can be reached without exceeding capacity
    for i in range(1, n):
        remaining_capacity = 1 - demands[i]
        if remaining_capacity > 0:
            closest_node = torch.argmin(distance_matrix[i, 1:])
            if demands[closest_node] <= remaining_capacity:
                heuristic_matrix[i, closest_node] = -distance_matrix[i, closest_node]

    # Normalize heuristics by total demand
    heuristic_matrix = heuristic_matrix / total_demand

    return heuristic_matrix
```
