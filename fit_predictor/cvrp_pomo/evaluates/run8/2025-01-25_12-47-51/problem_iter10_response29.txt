```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate inverse distance matrix and normalize by total demand
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Avoid division by zero
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: prioritize edges with higher demand
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Remaining capacity-based heuristic: prioritize edges with higher remaining capacity
    remaining_capacity = 1 - demands
    capacity_weighted_distance = remaining_capacity * inv_distance_matrix

    # Nearest-neighbor heuristic: add the closest node for each customer
    nearest_neighbor = torch.min(distance_matrix, dim=1).values

    # Improved demand-based heuristic: penalize edges with high demand
    high_demand_penalty = -demand_weighted_distance / (demands + 1e-8)

    # Improved remaining capacity-based heuristic: penalize for high capacity utilization
    capacity_penalty = remaining_capacity * capacity_weighted_distance
    capacity_penalty[remaining_capacity < 0.5] = 0

    # Improved nearest-neighbor heuristic: add more weight to closest nodes
    nearest_neighbor_weight = 10 * nearest_neighbor

    # Combine heuristics with improved terms
    combined_heuristic = high_demand_penalty + capacity_penalty + nearest_neighbor_weight

    # Apply penalties for edge constraints
    capacity_penalty = (demands[:, None] + demands[None, :]) > 1
    combined_heuristic[capacity_penalty] = -torch.inf

    # Weight edge contributions by their strategic impact
    # Here we increase the weight for edges that are part of the nearest neighbor heuristic
    # This assumes that being close to a customer is a strategic advantage
    strategic_weight = torch.max(demands) * 5
    combined_heuristic = combined_heuristic * (1 + strategic_weight * (nearest_neighbor > 0))

    # Avoid overpenalizing or underweighting critical constraints
    # Here we add a small positive value to all edges to ensure they are not underweighted
    combined_heuristic = combined_heuristic + 1e-4

    return combined_heuristic
```
