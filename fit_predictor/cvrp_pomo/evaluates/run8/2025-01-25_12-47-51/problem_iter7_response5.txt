```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Normalize demand to represent demand per vehicle capacity
    demand_normalized = demands / total_demand

    # Calculate inverse distance matrix and normalize by total demand
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Avoid division by zero

    # Demand-based heuristic: prioritize edges with higher demand
    demand_heuristic = demand_normalized * inv_distance_matrix

    # Remaining capacity-based heuristic: prioritize edges with higher remaining capacity
    remaining_capacity = 1 - demands
    capacity_heuristic = remaining_capacity * inv_distance_matrix

    # Nearest-neighbor heuristic: add the closest node for each customer
    nearest_neighbor = torch.min(distance_matrix, dim=1).values

    # Combine heuristics
    combined_heuristic = demand_heuristic + capacity_heuristic + nearest_neighbor

    # Penalize edges with total demand exceeding vehicle capacity
    capacity_penalty_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[capacity_penalty_mask] = -torch.inf

    return combined_heuristic
```
