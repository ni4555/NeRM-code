```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An improved heuristic that considers demand-to-capacity ratios and distances."""
    # Calculate the total demand
    total_demand = torch.sum(demands)
    
    # Calculate the demand-to-capacity ratios
    demand_to_capacity = demands / total_demand
    
    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Combine the demand-to-capacity ratios and the inverse distance matrix
    combined_weights = demand_to_capacity * inv_distance_matrix
    
    # Normalize the combined weights by the total demand
    normalized_combined_weights = combined_weights / total_demand
    
    # Use the negative of the normalized combined weights as the heuristic
    heuristic_matrix = -normalized_combined_weights
    
    return heuristic_matrix
```
