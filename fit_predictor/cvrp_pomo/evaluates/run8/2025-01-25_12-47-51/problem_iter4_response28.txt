```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic incorporating demand magnitude, distance, and demand scaling."""
    # Calculate the total demand
    total_demand = torch.sum(demands)
    
    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand
    
    # Incorporate demand magnitude by scaling it with a negative factor
    demand_scaled = -torch.abs(demands) / total_demand
    
    # Combine the normalized inverse distance and demand scaled by a weight factor
    weight_factor = 0.5  # This can be adjusted based on the problem at hand
    heuristic_matrix = normalized_inv_distance_matrix + weight_factor * demand_scaled
    
    # Adjust the scale of the heuristic to ensure non-negative values
    heuristic_matrix = torch.clamp(heuristic_matrix, min=0, max=1)
    
    return heuristic_matrix
```
