```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Inverse of distance matrix with small constant to avoid division by zero
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)

    # Demand-based heuristic: prioritize edges with higher demand
    demand_normalized = demands / total_demand
    demand_weighted_distance = demand_normalized * inv_distance_matrix

    # Distance-based heuristic: prioritize edges with lower distance
    distance_weighted_distance = 1 - demand_weighted_distance

    # Remaining capacity-based heuristic: prioritize edges with higher remaining capacity
    remaining_capacity = 1 - demands
    capacity_weighted_distance = remaining_capacity * inv_distance_matrix

    # Local optimization heuristic: penalize nodes that are far from the nearest neighbor
    nearest_neighbor = torch.min(distance_matrix, dim=1).values
    local_optimization = torch.abs(distance_matrix - nearest_neighbor[:, None])

    # Combine all heuristics with appropriate weighting
    combined_heuristic = 0.4 * demand_weighted_distance + 0.4 * distance_weighted_distance + 0.2 * capacity_weighted_distance - 0.2 * local_optimization

    # Penalties for edges that exceed the vehicle capacity
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    return combined_heuristic
```
