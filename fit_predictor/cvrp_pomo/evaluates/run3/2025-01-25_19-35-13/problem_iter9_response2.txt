```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Introduce a penalty for the depot to avoid direct connections
    depot_penalty = 1000
    distance_matrix[0, :] += depot_penalty
    distance_matrix[:, 0] += depot_penalty
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.6
    distance_weight = 0.4
    
    # Apply a modified nearest neighbor heuristic to get an initial solution
    initial_route = []
    unvisited = set(range(1, len(demands)))  # Skip the depot
    while unvisited:
        current = min(unvisited, key=lambda x: normalized_demands[x] * distance_matrix[0, x])
        initial_route.append(current)
        unvisited.remove(current)
        # Update demands to account for already visited nodes
        new_demand = demands[current] - (total_demand / len(demands))
        demands[current] = new_demand
        total_demand -= new_demand
        unvisited = set(range(1, len(demands))) - set(initial_route)
    
    # Calculate the potential based on the initial route and demand
    epsilon = 1e-8
    edge_potential = torch.zeros_like(distance_matrix)
    for i in range(len(initial_route)):
        for j in range(i + 1, len(initial_route)):
            edge_potential[initial_route[i], initial_route[j]] = 1
            edge_potential[initial_route[j], initial_route[i]] = 1
    
    # Adjust the potential based on demands and distances
    edge_potential = (edge_potential * normalized_demands**demand_weight) + \
                     ((1 - edge_potential) * (1 / (distance_matrix + epsilon)))**distance_weight
    
    # Introduce a penalty for high demand and long distances
    edge_potential = edge_potential - (edge_potential * 0.1 * (demands > 1.5).float())
    edge_potential = edge_potential + (edge_potential * 0.05 * (distance_matrix < 10).float())
    
    return edge_potential
```
