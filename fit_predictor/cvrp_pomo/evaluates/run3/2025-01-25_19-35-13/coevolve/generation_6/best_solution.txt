Fitness: 23.265913009643555

Description:
Develop an algorithm to solve the Capacitated Vehicle Routing Problem (CVRP) with the objective of minimizing the total route distance while ensuring that no vehicle exceeds its defined capacity and that each vehicle returns to the origin after delivering all goods. The algorithm should integrate a multi-faceted approach that includes the use of metaheuristics to explore a wide solution space, dynamic programming to efficiently calculate optimal sub-routes, and neighborhood search strategies to refine candidate solutions. The emphasis is on balancing computational efficiency with solution optimality, and the algorithm must effectively manage unique node demands and enforce capacity constraints.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    
    # Calculate the heuristic values based on the normalized demands
    heuristics = distance_matrix - normalized_demands.unsqueeze(1) * distance_matrix
    
    # Enforce the constraint that the sum of heuristics for each node must be non-negative
    # by ensuring that the diagonal elements are the minimum value in the row
    for i in range(n):
        heuristics[i, i] = torch.min(heuristics[i, :])
    
    return heuristics