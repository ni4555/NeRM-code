Fitness: 23.265913009643555

Description:
Design an advanced hybrid optimization algorithm for the Capacitated Vehicle Routing Problem (CVRP) that synergizes a dynamic demand-driven heuristic with a balanced distance-demand evaluation. The algorithm should incorporate a Genetic Algorithm for global exploration, coupled with dynamic programming for local route optimization and a neighborhood search for solution refinement. This combination aims to optimize the trade-off between computational tractability and solution quality.

The algorithm will implement the following innovative features:
1. A demand normalization technique to uniformly evaluate node demands.
2. A multi-objective fitness function that dynamically adjusts route selection, favoring those that minimize total distance while respecting vehicle capacities.
3. An adaptive epsilon management technique to handle edge cases and ensure numerical robustness.

Key algorithmic elements include:
- A Genetic Algorithm variant with a demand-aware selection process.
- A dynamic programming-based sub-route optimization module.
- A neighborhood search algorithm for iterative solution enhancement.

The algorithm's design will emphasize the seamless integration of metaheuristic and local search strategies, ensuring a well-balanced exploration and exploitation of the solution space. The ultimate goal is to achieve a solution that minimizes the total route distance while adhering to capacity constraints, demonstrating an optimal balance between efficiency and optimality.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize demands by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    
    # Initialize the heuristics matrix with zeros
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the negative demand heuristic
    heuristics_matrix += -normalized_demands.unsqueeze(1)
    heuristics_matrix += -normalized_demands.unsqueeze(0)
    
    # Calculate the distance heuristic
    heuristics_matrix += distance_matrix
    
    # Ensure that the diagonal elements (self-loops) are not included
    heuristics_matrix.fill_diagonal_(0)
    
    return heuristics_matrix