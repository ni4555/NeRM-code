Fitness: 23.265913009643555

Description:
The objective is to develop an innovative heuristic for the Capacitated Vehicle Routing Problem (CVRP) by integrating a demand normalization process, a robust potential function, and a synergistic blend of dynamic programming, neighborhood search, and local search techniques. The heuristic should be meticulously crafted to normalize node demands relative to vehicle capacity, ensuring consistency across scenarios. It should introduce a sophisticated potential function that assigns weights to edges based on the sum of normalized demands and incorporates factors such as distance and road quality. A hybrid strategy that leverages dynamic programming for sub-route optimization, neighborhood search for refinement, and local search for enhancement will be employed. The potential function will be refined to prevent division by zero errors and ensure reliability. The resulting heuristic must offer a well-defined optimization process with the potential to yield efficient and near-optimal routes under CVRP constraints.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    
    # Initialize potential function matrix
    potential_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate edge weights based on normalized demands, distance, and road quality (assumed as 1 for simplicity)
    for i in range(n):
        for j in range(n):
            if i != j:  # Exclude self-loops
                potential_matrix[i, j] = normalized_demands[i] + normalized_demands[j] + distance_matrix[i, j]
    
    # Handle division by zero by setting a small threshold
    threshold = 1e-8
    potential_matrix[potential_matrix <= threshold] = -threshold
    
    return potential_matrix