{
  "generation": 4,
  "description": "Enhancing the resolution of the Capacitated Vehicle Routing Problem (CVRP) by integrating state-of-the-art optimization heuristics. The goal is to identify an optimal route that covers all designated nodes, including a return to the origin, while adhering to the capacity constraints of each vehicle. This problem requires careful consideration of each node's unique demand, and the cumulative demand along any route must not exceed the vehicle's capacity. When the demand exceeds the vehicle's capacity, the vehicle must backtrack to the starting point. The solution will utilize a combination of metaheuristics, dynamic programming, and neighborhood search strategies to achieve a balance between computational efficiency and solution quality. Specifically, the approach will incorporate techniques such as genetic algorithms for global exploration, simulated annealing for avoiding local optima, and the nearest neighbor heuristic for efficient initial solution generation, while ensuring that the neighborhood search considers potential edges with high heuristic values to guide the search towards optimal routes.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    demand_vector = demands / total_capacity\n    \n    # Calculate the heuristic for each edge based on the demands and distances\n    heuristics = (1 / (distance_matrix + 1e-5)) * (1 - demand_vector)\n    \n    return heuristics",
      "fitness": 23.26851463317871,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_0.txt",
      "code_file": "coevolve\\generation_4\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the distance matrix\n    distance_matrix = distance_matrix / distance_matrix.max()\n    \n    # Calculate the demand difference between each customer and the depot\n    demand_diff = demands - demands.mean()\n    \n    # Combine the normalized distances and demand differences to create heuristics\n    heuristics = distance_matrix - torch.abs(demand_diff)\n    \n    # Add a small constant to avoid division by zero and to ensure positive values\n    epsilon = 1e-6\n    heuristics = (heuristics + epsilon) / (heuristics + epsilon).max()\n    \n    return heuristics",
      "fitness": 23.281885147094727,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_5.txt",
      "code_file": "coevolve\\generation_4\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    # Calculate the total demand\n    total_demand = demands.sum()\n    # Calculate the normalized demand for each customer\n    normalized_demands = demands / total_demand\n    \n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n    \n    # Calculate the heuristic values\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Calculate the heuristic value based on the distance and demand\n                heuristic_value = -distance_matrix[i][j] + normalized_demands[j]\n                heuristic_matrix[i][j] = heuristic_value\n    \n    return heuristic_matrix",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_7.txt",
      "code_file": "coevolve\\generation_4\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the normalized demand vector\n    normalized_demands = demands / demands.sum()\n    \n    # Calculate the demand contribution for each edge\n    edge_demands = torch.outer(normalized_demands, normalized_demands)\n    \n    # Calculate the heuristic values by subtracting the distance (to encourage short routes)\n    heuristics = -distance_matrix + torch.sum(edge_demands, dim=0)\n    \n    # Ensure that the heuristics matrix is of the same shape as the distance matrix\n    assert heuristics.shape == distance_matrix.shape\n    \n    return heuristics",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_10.txt",
      "code_file": "coevolve\\generation_4\\code_10.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the sum of demands to normalize them\n    total_demand = torch.sum(demands)\n    \n    # Normalize the demands\n    normalized_demands = demands / total_demand\n    \n    # Create a matrix to hold the heuristic values\n    heuristics_matrix = torch.full_like(distance_matrix, fill_value=-1e6)\n    \n    # Calculate the heuristics for each edge\n    # Subtracting the normalized demand of the destination from the normalized demand of the source\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            if i != j:  # Avoid self-loops\n                heuristics_matrix[i, j] = normalized_demands[i] - normalized_demands[j]\n    \n    return heuristics_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_1.txt",
      "code_file": "coevolve\\generation_4\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    # Calculate the sum of all demands\n    total_demand = demands.sum()\n    # Normalize demands by total capacity\n    normalized_demands = demands / total_demand\n    \n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n    \n    # Compute the heuristic values\n    for i in range(1, n):\n        for j in range(1, n):\n            if demands[j] > 0:  # Only consider non-depot nodes with non-zero demand\n                heuristic_value = normalized_demands[j] * (distance_matrix[i, j] - distance_matrix[0, j])\n                heuristic_matrix[i, j] = heuristic_value\n    \n    return heuristic_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_2.txt",
      "code_file": "coevolve\\generation_4\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total demand\n    total_demand = demands.sum()\n    \n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / total_demand\n    \n    # Calculate the heuristic values for each edge\n    # We use the negative of the normalized demand as the heuristic value\n    # because we want to minimize the heuristic value to find the best edges\n    heuristics = -normalized_demands * distance_matrix\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_3.txt",
      "code_file": "coevolve\\generation_4\\code_3.py"
    }
  ]
}