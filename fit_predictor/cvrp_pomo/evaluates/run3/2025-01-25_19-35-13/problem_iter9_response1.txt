```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.6
    distance_weight = 0.4
    
    # Apply a modified savings algorithm to find a feasible solution
    n = len(demands)
    savings = torch.full((n, n), float('inf'))
    for d in range(1, n):
        for s in range(d):
            savings[d, s] = demands[d] + demands[s] - distance_matrix[s, d]
    feasible_savings = torch.triu(savings, k=1)
    feasible_savings = feasible_savings[feasible_savings < float('inf')].min()
    edge_potential = torch.zeros_like(distance_matrix)
    edge_potential[torch.triu_indices(n, n, k=1)[1]] = feasible_savings
    
    # Adapt the potential based on the savings found and demand
    epsilon = 1e-8
    edge_potential = edge_potential / (distance_matrix + epsilon)
    edge_potential = edge_potential * torch.pow(normalized_demands, demand_weight)
    
    # Incorporate a penalty for long distances and demand overcapacity
    edge_potential = edge_potential - (edge_potential * 0.2 * (distance_matrix < 5).float())
    edge_potential = edge_potential + (edge_potential * 0.15 * (demands > 1).float())
    
    return edge_potential
```
