```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.7
    distance_weight = 0.3
    
    # Use a nearest neighbor heuristic to initially assign customers to vehicles
    order = torch.argsort(normalized_demands)
    assignments = torch.zeros(len(demands), dtype=torch.int32)
    vehicle_loads = torch.zeros(len(demands), dtype=torch.float32)
    for i, customer in enumerate(order):
        if assignments[customer] == -1:  # Unassigned customer
            assignments[customer] = i // 2  # Assign to vehicle
            vehicle_loads[i // 2] += normalized_demands[customer]
        elif vehicle_loads[i // 2] + normalized_demands[customer] <= 1:  # Can load customer
            vehicle_loads[i // 2] += normalized_demands[customer]
        else:  # Need to backtrack
            assignments[customer] = (i // 2 + 1) % 2  # Assign to other vehicle
            vehicle_loads[(i // 2 + 1) % 2] += normalized_demands[customer]
    
    # Calculate edge potentials based on demand and distance
    epsilon = 1e-8
    lower_bound = torch.zeros(len(demands), dtype=torch.float32)
    edge_potential = torch.full_like(distance_matrix, fill_value=-1e8)
    
    for vehicle in range(len(vehicle_loads)):
        for i in range(len(demands)):
            if assignments[i] == vehicle:
                for j in range(len(demands)):
                    if i != j and assignments[j] == -1:  # Only consider unassigned customers
                        edge_potential[i, j] = normalized_demands[i] * normalized_demands[j] * distance_matrix[i, j]
                        edge_potential[i, j] *= (1 - demand_weight) + (1 / (distance_matrix[i, j] + epsilon)) * distance_weight
    
    # Apply penalties for high demand and long distances
    edge_potential = edge_potential - (edge_potential * 0.1 * (demands > 1.5).float())
    edge_potential = edge_potential + (edge_potential * 0.05 * (distance_matrix < 10).float())
    
    return edge_potential
```
