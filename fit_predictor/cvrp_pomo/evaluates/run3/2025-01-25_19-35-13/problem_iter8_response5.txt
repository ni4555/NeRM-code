```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand

    # Define weights for demand and distance heuristics
    demand_weight = 0.75
    distance_weight = 0.25

    # Apply dynamic programming to find a lower bound on the cost
    n = len(demands)
    dp = torch.zeros((n, n))
    for d in range(1, n):
        for s in range(d):
            dp[d, s] = torch.min(dp[s, d-1] + distance_matrix[s, d], dp[d, s])

    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)

    # Introduce an adaptive penalty based on the demand and distance
    demand_threshold = 1.5
    distance_threshold = 10
    edge_potential = edge_potential - (edge_potential * 0.15 * (demands > demand_threshold).float())
    edge_potential = edge_potential + (edge_potential * 0.1 * (distance_matrix > distance_threshold).float())

    # Adjust the weight of the distance heuristic based on the cumulative demand
    edge_potential = edge_potential * (1 - (demands.sum() < 0.5).float()) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight * (demands.sum() < 0.5).float()

    return edge_potential
```
