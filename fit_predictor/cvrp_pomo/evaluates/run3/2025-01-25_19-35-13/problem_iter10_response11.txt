```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand

    demand_weight = 0.6
    distance_weight = 0.4

    cumulative_demand = torch.zeros_like(demands)
    for i in range(1, len(demands)):
        cumulative_demand[i] = torch.clamp(cumulative_demand[i - 1] + normalized_demands[i], min=0)
        cumulative_demand[i] = torch.where(cumulative_demand[i] > 1, 0, cumulative_demand[i])

    epsilon = 1e-8
    savings = (2 * (cumulative_demand ** demand_weight) * (1 / (distance_matrix + epsilon))) ** distance_weight
    savings = savings * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) ** (1 + distance_weight)

    high_demand_penalty = (demands > 2).float() * 10
    long_distance_penalty = (distance_matrix > 50).float() * 2

    savings = savings - high_demand_penalty - long_distance_penalty

    # Give highest priority to the depot
    savings[distance_matrix == 0] = 1e10

    return savings
```
