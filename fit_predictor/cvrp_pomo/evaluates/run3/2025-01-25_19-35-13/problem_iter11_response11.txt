```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2
    
    # Initialize potential matrix with zeros
    edge_potential = torch.zeros_like(distance_matrix)
    
    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    lower_bound = torch.min(torch.sum(distance_matrix, dim=0), torch.sum(distance_matrix, dim=1))
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    
    # Shape the search space by penalizing high demand and rewarding short distances
    edge_potential = edge_potential - (edge_potential * 0.1 * (demands > 1.5).float())
    edge_potential = edge_potential + (edge_potential * 0.05 * (distance_matrix < 10).float())
    
    # Add a small distance weight to ensure all edges are considered
    edge_potential = edge_potential + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight
    
    return edge_potential
```
