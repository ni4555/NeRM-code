```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand

    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2

    # Apply dynamic programming to find a lower bound on the cost
    dp = torch.zeros((len(demands), len(demands)))
    for d in range(1, len(demands)):
        for s in range(d):
            dp[d, s] = torch.min(dp[s, d-1] + distance_matrix[s, d], dp[s, d])

    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight

    # Integrate diversity by rewarding edges that serve a diverse set of demands
    diversity = (torch.abs(normalized_demands - normalized_demands.mean()) * 0.5)
    edge_potential += diversity * (1 / (distance_matrix + epsilon))

    # Adjust weights for balance and apply penalties for undesirable attributes
    edge_potential = edge_potential - (edge_potential * 0.1 * (demands > 1.5).float())
    edge_potential = edge_potential + (edge_potential * 0.05 * (distance_matrix < 5).float())

    # Normalize the potential to ensure a balance between distance and demand
    edge_potential = edge_potential / (torch.exp(edge_potential).sum(dim=1, keepdim=True) + epsilon)

    # Set the potential of the diagonal (depot node) to zero
    edge_potential.diag().fill_(0)

    return edge_potential
```
