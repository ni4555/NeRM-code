```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / (total_demand + 1e-8)  # Add epsilon to avoid division by zero
    
    # Compute the potential for each edge based on normalized demand and inverse distance
    edge_potential = normalized_demands + 1 / (distance_matrix + 1e-8)
    
    # Apply a penalty to edges with high normalized demand
    penalty_threshold = 1.0
    capacity_penalty = (normalized_demands > penalty_threshold).float() * -0.1
    
    edge_potential = edge_potential + capacity_penalty
    
    return edge_potential
```
