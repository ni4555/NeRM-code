```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand

    # Define weights for demand and distance heuristics
    demand_weight = 0.6
    distance_weight = 0.4

    # Incentive for close proximity
    distance_incentive = 1 / (distance_matrix + 1e-8)

    # Penalty for high demand variance within a cluster
    max_demand = torch.max(normalized_demands)
    min_demand = torch.min(normalized_demands)
    demand_variance = max_demand - min_demand
    high_demand_penalty = demand_variance * torch.where(normalized_demands > 0.8, normalized_demands - 0.8, torch.zeros_like(normalized_demands))

    # Balance the penalty to prevent excessive incentive towards low-demand edges
    low_demand_penalty = -demand_variance * torch.where(normalized_demands < 0.2, normalized_demands - 0.2, torch.zeros_like(normalized_demands))

    # Incorporate the penalty for distance beyond a threshold
    distance_threshold = 2
    distance_penalty = -torch.where(distance_matrix > distance_threshold, distance_matrix - distance_threshold, torch.zeros_like(distance_matrix))

    # Incentive for demand fulfillment
    demand_fulfillment_incentive = (1 - torch.clamp(normalized_demands, max=1))

    # Combine the incentives and penalties
    edge_potential = distance_incentive - high_demand_penalty - low_demand_penalty - distance_penalty + demand_fulfillment_incentive

    # Normalize the potential to balance the influence of the different heuristics
    edge_potential /= (torch.sum(edge_potential) + 1e-8)

    # Ensure potential is within a defined range
    edge_potential = torch.clamp(edge_potential, min=-10.0, max=10.0)

    # Ensure the depot has the highest priority
    edge_potential[distance_matrix == 0] = 1e10

    return edge_potential
```
