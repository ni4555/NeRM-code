```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Introduce a new weight for demand heuristic to emphasize high demand
    demand_weight = 0.9
    distance_weight = 0.1
    
    # Apply metaheuristic inspired adaptive penalty for high demand
    demand_penalty = torch.abs(normalized_demands - 0.5)
    demand_penalty = torch.exp(-demand_penalty)  # Sigmoid-like penalty for demand
    
    # Apply a dynamic programming approach to find lower bounds on the cost
    dp = torch.zeros((len(demands), len(demands)))
    for d in range(1, len(demands)):
        for s in range(d):
            dp[d, s] = dp[s, d-1] + distance_matrix[s, d]
    
    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    
    # Integrate the adaptive penalty into the potential
    edge_potential = edge_potential * (1 - demand_weight) + demand_penalty * distance_weight
    
    # Add penalties for edges with long distances
    edge_potential = edge_potential - (edge_potential * 0.1 * (distance_matrix > 10).float())
    
    return edge_potential
```
