```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2
    
    # Initialize the edge potential matrix
    edge_potential = torch.zeros_like(distance_matrix)
    
    # Define a function to calculate lower bound using dynamic programming
    def calculate_lower_bound():
        dp = torch.zeros((len(demands), len(demands)))
        for d in range(1, len(demands)):
            for s in range(d):
                dp[d, s] = torch.min(dp[s, d-1] + distance_matrix[s, d], dp[d, s])
        return torch.min(dp[:, 0], dp[0, :])
    
    # Calculate lower bound on the cost
    lower_bound = calculate_lower_bound()
    
    # Compute the potential for each edge based on the lower bound and demand
    epsilon = 1e-8
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight
    
    # Add adaptive penalties based on demand and distance
    edge_potential = edge_potential - (edge_potential * torch.clamp(demands / total_demand, 0, 1.5))
    edge_potential = edge_potential + (edge_potential * torch.clamp(1 - (distance_matrix / distance_matrix.max()), 0, 0.5))
    
    return edge_potential
```
