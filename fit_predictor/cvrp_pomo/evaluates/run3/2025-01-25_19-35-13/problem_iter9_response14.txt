```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2
    
    # Implement a more efficient dynamic programming approach
    # Precompute cumulative demand for each node
    cumulative_demand = torch.cumsum(torch.cat([torch.zeros(1), normalized_demands]), dim=0)
    
    # Initialize DP matrix
    dp = torch.full((len(demands), len(demands)), float('inf'))
    
    # Update DP matrix
    for capacity in torch.arange(1, total_demand + 1).type(torch.long):
        for s in range(len(demands)):
            for d in range(len(demands)):
                if cumulative_demand[d] <= capacity:
                    dp[d, s] = min(dp[d, s], dp[s, :d].max() + distance_matrix[s, d])
    
    # Calculate the potential based on the lower bound and demand
    epsilon = 1e-8
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight
    
    # Adjust penalties to be more dynamic based on demand and distance
    edge_potential = edge_potential - (edge_potential * 0.1 * (demands > 2.0).float())
    edge_potential = edge_potential + (edge_potential * 0.05 * (distance_matrix < 15).float())
    
    # Incorporate a local search improvement heuristic
    edge_potential = edge_potential + (edge_potential * 0.02 * (torch.abs(dp[:, 0] - total_demand) < 1).float())
    
    return edge_potential
```
