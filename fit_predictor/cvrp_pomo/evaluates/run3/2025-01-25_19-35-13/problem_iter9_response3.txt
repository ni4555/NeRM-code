```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Define weights for demand and distance heuristics
    demand_weight = 0.8
    distance_weight = 0.2
    
    # Use a modified dynamic programming approach that considers vehicle capacity
    dp = torch.zeros((len(demands), len(demands)))
    for capacity in range(1, int(total_demand) + 1):
        for d in range(1, len(demands)):
            for s in range(d):
                dp[d, s] = torch.min(dp[s, d-1] + distance_matrix[s, d], dp[s, d-1] + distance_matrix[s, d] + dp[d, 0])
    
    # Initialize edge potential
    epsilon = 1e-8
    edge_potential = torch.zeros_like(distance_matrix)
    
    # Calculate edge potential based on the lower bound and demand
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    edge_potential = (lower_bound / (distance_matrix + epsilon)) * torch.pow(normalized_demands, demand_weight)
    
    # Adapt the potential by incorporating distance weight and capacity constraints
    edge_potential = edge_potential * (1 - distance_weight) + (1 / (distance_matrix + epsilon)) * torch.pow(normalized_demands, 0.5) * distance_weight
    
    # Implement a more nuanced penalty system
    edge_potential = edge_potential - (edge_potential * 0.1 * (demands > 1.5).float())
    edge_potential = edge_potential + (edge_potential * 0.05 * (distance_matrix < 10).float())
    edge_potential = edge_potential * (1 - (capacity < demands).float())
    
    return edge_potential
```
