```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.size(0)
    
    # Initialize the heuristics matrix with zeros
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the total demand to normalize
    total_demand = demands.sum()
    
    # Normalize the demands to have the sum of all demands equal to the vehicle capacity
    normalized_demands = demands / total_demand
    
    # Compute the potential for each edge based on distance and demand
    alpha = torch.clamp(distance_matrix / distance_matrix.max(), min=0.1, max=1.0)
    beta = normalized_demands * demands / demands.sum()
    edge_potential = alpha + beta
    
    # Apply a soft thresholding to ensure that the heuristics values are within a certain range
    max_potential = edge_potential.max()
    edge_potential = torch.clamp(edge_potential, min=-max_potential * 0.1, max=max_potential * 0.1)
    
    # Adjust the heuristics based on the total vehicle capacity to ensure it can serve all demands
    heuristics_matrix = (1 - (edge_potential.sum(1) / n)) * edge_potential
    
    return heuristics_matrix
```
