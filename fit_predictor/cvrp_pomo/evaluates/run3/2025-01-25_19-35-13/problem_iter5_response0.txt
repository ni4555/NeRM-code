```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Introduce a dynamic penalty factor based on vehicle capacity usage
    capacity_penalty_factor = (demands / demands.max()).unsqueeze(1)
    
    # Introduce a dynamic distance heuristic using a function of distance
    def dynamic_distance_weight(distance):
        return torch.exp(-distance / 10)
    
    # Apply a simple DP approach for an initial estimate of potential
    dp = torch.zeros((len(demands), len(demands)))
    for d in range(1, len(demands)):
        for s in range(d):
            dp[d, s] = dp[s, d-1] + distance_matrix[s, d]
    lower_bound = torch.min(dp[:, 0], dp[0, :])
    
    # Calculate potential considering demand and distance, with dynamic weights
    edge_potential = (lower_bound / (distance_matrix + 1e-8)) * torch.pow(normalized_demands, 1.5)
    edge_potential = edge_potential * (1 - dynamic_distance_weight(distance_matrix).unsqueeze(0).unsqueeze(1)) + \
                     dynamic_distance_weight(distance_matrix) * (1 / (distance_matrix + 1e-8))
    
    # Apply capacity penalty factor and balance with the initial potential
    edge_potential = edge_potential * (1 - capacity_penalty_factor)
    
    return edge_potential
```
