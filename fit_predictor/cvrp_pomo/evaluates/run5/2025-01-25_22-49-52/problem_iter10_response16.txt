```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Initialize potential values matrix
    potential_values = torch.zeros_like(distance_matrix)
    
    # Demand-specific penalties
    high_demand_penalty = 0.5
    high_demand_threshold = 0.9
    demand_penalty = torch.where(normalized_demands > high_demand_threshold,
                                 high_demand_penalty * (normalized_demands - high_demand_threshold),
                                 torch.zeros_like(normalized_demands))
    
    # Distance and demand weights
    distance_weight = 0.4
    demand_weight = 1.6
    
    # Calculate potential values for edges based on distance, demand, and penalties
    potential_values = (distance_weight * normalized_distances +
                        demand_weight * (normalized_demands - demand_penalty))
    
    # Apply node partitioning to balance demand across routes
    partition_threshold = 0.6
    partition_penalty = torch.exp(-torch.abs(normalized_demands - partition_threshold))
    potential_values *= partition_penalty
    
    # Use local neighborhood knowledge to favor similar demands
    for i in range(1, n):
        neighbor_demand = demands[distance_matrix[i, :] < max_distance]
        total_neighbor_demand = neighbor_demand.sum()
        neighbor_demand_weight = 1 - (total_neighbor_demand / max_demand)
        potential_values[i, distance_matrix[i, :] < max_distance] *= neighbor_demand_weight
    
    # Apply time window considerations, favoring earlier times
    time_factor = torch.arange(n).float() / n
    time_window_penalty = torch.exp(-time_factor)
    potential_values *= time_window_penalty
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
