```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate the potential value for each edge using a balance heuristic
    # The heuristic includes a demand bonus and a distance penalty
    demand_bonus = 1.5
    distance_penalty = 0.5
    average_demand = normalized_demands.mean()
    
    # Calculate demand bonus, penalizing nodes with high relative demand
    bonus_term = demand_bonus * (normalized_demands - average_demand)
    bonus_term = torch.clamp(bonus_term, min=-1.0)  # Cap the penalty at -1
    
    # Combine potential values
    potential_values = (normalized_distances * (1 - distance_penalty) + 
                        bonus_term).abs()
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
