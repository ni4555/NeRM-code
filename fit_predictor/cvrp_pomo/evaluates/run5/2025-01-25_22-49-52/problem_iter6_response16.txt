```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize the distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize the demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate balance factors for distance and demand
    distance_balance = torch.clamp(1 - 2 * normalized_distances, min=0)
    demand_balance = torch.clamp(1 - 2 * normalized_demands, min=0)
    
    # Combine the balance factors using a weighted average
    balance_factor = (distance_balance + demand_balance) / 2
    
    # Adjust the distances with the balance factors
    adjusted_distances = normalized_distances * balance_factor
    
    # Apply a non-linear function to adjust the edge weights
    non_linear_adjustment = torch.exp(-adjusted_distances)
    
    # Incorporate multi-criteria evaluations using a weighted sum of adjusted distances and demands
    criteria_weight = torch.tensor([1.5, 0.5], dtype=torch.float)  # Example weights for distance and demand
    potential_values = criteria_weight[0] * adjusted_distances + criteria_weight[1] * (normalized_demands * (1 - normalized_demands))
    
    # Apply the non-linear adjustment to the potential values
    potential_values = potential_values * non_linear_adjustment
    
    # Incorporate demand relaxation based on partitioning
    partition_threshold = 0.7  # Adaptive threshold for partitioning
    relaxed_demands = torch.where(normalized_demands > partition_threshold, 
                                  normalized_demands, 
                                  0.0)
    
    # Use a weighted combination of distance and demand relaxation
    weights = torch.rand(1, n) * 2 - 1  # Random weights between -1 and 1
    potential_values += weights * relaxed_demands
    
    # Apply dynamic window approach
    time_factor = torch.arange(n).float() / n
    potential_values += torch.exp(-time_factor)
    
    # Apply local neighborhood knowledge
    for i in range(1, n):
        # Calculate the total demand of neighbors
        neighbor_demand = demands[distance_matrix[i, :] < max_distance]
        total_neighbor_demand = neighbor_demand.sum()
        # Favor edges with similar demand neighbors
        potential_values[i, distance_matrix[i, :] < max_distance] += torch.exp(-torch.abs(normalized_demands[i] - normalized_demands[distance_matrix[i, :] < max_distance]))
        # Increase potential if the total demand of the neighbors is low
        potential_values[i, distance_matrix[i, :] < max_distance] += (1 - (total_neighbor_demand / max_demand))
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
