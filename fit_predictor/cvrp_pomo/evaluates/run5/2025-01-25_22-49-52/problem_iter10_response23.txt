```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Node partitioning heuristic: increase potential for nodes that are not densely connected
    # This encourages diversity in the routes
    connectivity_matrix = 1 - torch.sum(distance_matrix < max_distance * 0.1, axis=1, keepdim=True)
    partitioning_potential = 0.3 * (1 - connectivity_matrix)
    
    # Create a penalty term for high demand nodes
    average_demand = normalized_demands.mean()
    penalty_threshold = 0.8
    penalty_term = torch.where(normalized_demands > penalty_threshold, 
                                normalized_demands - average_demand, 
                                torch.zeros_like(normalized_demands))
    
    # Calculate the potential value for each edge using a multi-objective heuristic
    # Balancing distance and demand with a dampening factor to reduce the impact of high demands
    distance_weight = 0.5
    demand_weight = 1.5
    dampening_factor = 0.3 * (1 - penalty_term)
    potential_values = (distance_weight * normalized_distances +
                        demand_weight * normalized_demands +
                        partitioning_potential -
                        dampening_factor).abs()
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
