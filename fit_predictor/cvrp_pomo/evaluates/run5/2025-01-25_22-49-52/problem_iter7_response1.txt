```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate the potential value for each edge using a multi-objective heuristic
    # This heuristic balances distance, demand, and node partitioning
    distance_weight = 0.5
    demand_weight = 2.0
    partitioning_factor = 0.3
    penalty_threshold = 0.8  # Nodes with demand greater than 0.8 times the average demand are penalized
    average_demand = normalized_demands.mean()
    
    # Node partitioning heuristic: increase potential for nodes that are not densely connected
    # This encourages diversity in the routes
    connectivity_matrix = 1 - torch.sum(distance_matrix < max_distance * 0.1, axis=1, keepdim=True)
    partitioning_potential = partitioning_factor * connectivity_matrix
    
    # Create a penalty term for high demand nodes
    penalty_term = torch.where(normalized_demands > penalty_threshold, 
                                normalized_demands - average_demand, 
                                torch.zeros_like(normalized_demands))
    
    # Combine potential values with a dampening factor for high demands
    potential_values = (normalized_distances * (1 - normalized_demands) +
                        distance_weight * normalized_distances +
                        demand_weight * normalized_demands - 
                        penalty_term + 
                        partitioning_potential).abs()
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
