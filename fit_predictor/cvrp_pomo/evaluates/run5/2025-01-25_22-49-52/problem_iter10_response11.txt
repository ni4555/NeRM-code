```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize the distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize the demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate the average demand
    average_demand = normalized_demands.mean()
    
    # Define a load factor based on the average demand
    load_factor = demands.mean()
    
    # Calculate a penalty term for nodes with high demand
    penalty_threshold = 0.8  # Nodes with demand greater than 0.8 times the average demand are penalized
    penalty_term = torch.where(normalized_demands > penalty_threshold, 
                                torch.log(1 / (1 + torch.exp(0.1 * (2 * (normalized_demands - penalty_threshold) - 1)))), 
                                torch.zeros_like(normalized_demands))
    
    # Apply dynamic weighting based on the load factor
    demand_weight = 1.5
    dynamic_weight = 1.0 + (load_factor - 1.0) * 0.5  # Weight adjustment between 1.0 and 1.5
    
    # Calculate potential values with dynamic demand weighting and penalty term
    potential_values = (normalized_distances + 
                        dynamic_weight * normalized_demands - 
                        penalty_term).abs()
    
    # Introduce a dampening factor for high demand nodes
    dampening_factor = torch.where(normalized_demands > average_demand, 
                                    torch.log(1 / (1 + torch.exp(0.1 * (2 * (normalized_demands - average_demand) - 1)))), 
                                    1.0)
    
    # Adjust potential values with the dampening factor
    potential_values = potential_values * dampening_factor
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
