```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Initialize potential values matrix
    potential_values = torch.zeros_like(distance_matrix)
    
    # Incorporate distance-based potential with exponential decay to avoid excessive penalties
    potential_values += torch.exp(-torch.arange(n).float() * normalized_distances)
    
    # Incorporate demand-based potential with demand relaxation and exponential decay
    relaxed_demands = torch.where(normalized_demands > 0.5, 
                                  normalized_demands, 
                                  0.0)  # Only consider relaxed demands when greater than 50% of the capacity
    potential_values += torch.exp(-torch.abs(normalized_demands - relaxed_demands))
    
    # Apply node partitioning to further balance the demand across routes
    partition_threshold = 0.6  # Threshold for demand relaxation
    potential_values += torch.exp(-torch.abs(normalized_demands - partition_threshold))
    
    # Use local neighborhood knowledge to favor similar demands
    for i in range(1, n):
        neighbor_demand = demands[distance_matrix[i, :] < max_distance]
        total_neighbor_demand = neighbor_demand.sum()
        # Increase potential if the total demand of the neighbors is low
        potential_values[i, distance_matrix[i, :] < max_distance] += (1 - (total_neighbor_demand / max_demand))
    
    # Apply time window considerations, favoring earlier times
    time_factor = torch.arange(n).float() / n
    potential_values += torch.exp(-time_factor)
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
