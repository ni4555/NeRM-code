```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate the sum of squared distances and demands for each edge
    sum_of_squares = (normalized_distances ** 2).sum(dim=0) + (normalized_demands ** 2).sum(dim=0)
    
    # Use the sum of squares as a heuristic value for each edge
    heuristic_values = -sum_of_squares  # Negative values for better edges
    
    # Set the depot to 0 potential value
    heuristic_values[0, :] = 0
    heuristic_values[:, 0] = 0
    
    return heuristic_values
```
