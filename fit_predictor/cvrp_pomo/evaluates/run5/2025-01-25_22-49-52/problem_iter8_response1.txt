```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Apply node partitioning by relaxing demands for high-demand nodes
    high_demand_threshold = 0.8
    relaxed_demands = torch.where(normalized_demands > high_demand_threshold,
                                  max_demand * 0.5,
                                  normalized_demands)
    
    # Calculate potential values based on normalized distances and relaxed demands
    potential_values = normalized_distances + (1 - normalized_distances) * relaxed_demands
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
