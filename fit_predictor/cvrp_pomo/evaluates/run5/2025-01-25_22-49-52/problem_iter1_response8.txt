```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate the distance-based potential
    max_distance = distance_matrix.max().item()
    distance_potential = distance_matrix / max_distance
    
    # Calculate the demand-based potential
    max_demand = demands.max().item()
    demand_potential = demands / max_demand
    
    # Use a weighted combination of distance and demand to get the potential value for each edge
    # Here we use a weight factor w to balance between distance and demand
    w = 0.5
    potential_values = w * (distance_potential - demand_potential)
    
    # Adjust the potential values at the depot
    potential_values[0, :] = -torch.inf
    potential_values[:, 0] = -torch.inf
    
    return potential_values
```
