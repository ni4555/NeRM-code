```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate the potential value for each edge by considering the inverse distance and a balance factor
    # for demands to prioritize routes with lower distances and balanced customer demands
    potential_values = distance_matrix.inverse() - (demands * (demands.sum() / demands.shape[0]))
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
