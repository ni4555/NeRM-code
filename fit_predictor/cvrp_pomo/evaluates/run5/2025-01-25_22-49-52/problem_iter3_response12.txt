```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate the potential value for each edge
    # Using a more sophisticated transformation to balance demand and distance
    potential_values = torch.where(
        normalized_demands < 0.5,
        normalized_distances * (1 + 2 * normalized_demands),
        normalized_distances * (1 - 4 * normalized_demands ** 2)
    )
    
    # Apply node partitioning and demand relaxation
    for i in range(1, n):
        # Node partitioning: increase potential for nodes with higher demands
        potential_values[i, i] = potential_values[i, i] * (1 + demands[i] / demands[0])
        # Demand relaxation: increase potential for nodes with higher normalized demands
        potential_values[i, i] = potential_values[i, i] * (1 + (demands[i] / max_demand) ** 2)
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
