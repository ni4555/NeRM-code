```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Calculate demand balance factor
    demand_balance_factor = torch.abs(normalized_demands - 0.5)
    
    # Calculate potential value using a combination of demand relaxation and distance transformation
    # We encourage edges with short distances and low demand imbalances
    potential_values = torch.where(
        normalized_distances < 0.5,
        (1 - normalized_distances) * (1 - demand_balance_factor),
        normalized_distances * (1 - demand_balance_factor)
    )
    
    # Apply a dynamic weight to the demand balance factor based on distance
    # This discourages selecting heavily loaded edges for longer distances
    distance_weight = 1 - normalized_distances
    potential_values *= distance_weight
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values
```
