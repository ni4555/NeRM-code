{
  "generation": 9,
  "description": "Problem Description:\n\nDevelop an optimized algorithm for solving the Dynamic Capacitated Vehicle Routing Problem (DCVRP) with a focus on minimizing route distances while enforcing strict adherence to vehicle capacities. The algorithm should incorporate constraint programming to enforce vehicle capacity constraints, a dynamic window approach to handle real-time changes in problem parameters, and a Multi-Objective Evolutionary Algorithm (MOEA) to balance route distances and vehicle load distribution. Utilize node partitioning to efficiently decompose the problem, demand relaxation to mitigate the impact of dynamic changes, and path decomposition to enhance solution quality. The heuristic must be capable of real-time adaptation to dynamic problem instances, where nodes' demands and vehicle capacities may change during execution, and it should include a normalization technique to ensure consistent performance across varying problem scales. The solution should maximize efficiency and adaptability, demonstrating robust performance in complex, dynamic routing environments.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity by summing the demands\n    total_capacity = demands.sum()\n    \n    # Normalize demands to represent fractions of the total capacity\n    normalized_demands = demands / total_capacity\n    \n    # Initialize a tensor with the same shape as the distance matrix to store heuristics\n    heuristics = torch.full_like(distance_matrix, fill_value=-1e9)\n    \n    # Iterate over each node pair to calculate heuristics\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            if i != j:  # Exclude the depot node from comparisons\n                # Calculate the heuristic for the edge (i, j)\n                heuristic = distance_matrix[i, j] - normalized_demands[i] * normalized_demands[j]\n                heuristics[i, j] = heuristic\n    \n    return heuristics",
      "fitness": 23.265913009643555,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_8.txt",
      "code_file": "coevolve\\generation_9\\code_8.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    vehicle_capacity = demands.sum()\n    demands_normalized = demands / vehicle_capacity\n\n    # Calculate the potential negative impact of each edge\n    negative_impact = distance_matrix.clone() * demands_normalized.unsqueeze(1)\n    negative_impact = negative_impact + (1 - demands_normalized.unsqueeze(1))\n\n    # Calculate the positive impact of each edge\n    positive_impact = torch.exp(-distance_matrix / 10.0)  # Exponential decay with a small scale factor\n\n    # Combine the negative and positive impacts\n    heuristics = negative_impact - positive_impact\n\n    # Normalize the heuristics to ensure consistent performance across varying problem scales\n    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())\n\n    return heuristics",
      "fitness": 23.284208297729492,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_5.txt",
      "code_file": "coevolve\\generation_9\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the sum of normalized demands for each node\n    demand_sums = normalized_demands.cumsum(dim=0)\n    \n    # Calculate the heuristic values\n    # Positive values for promising edges and negative values for undesirable edges\n    heuristics = distance_matrix + (demand_sums * distance_matrix)\n    \n    # Enforce vehicle capacity constraint by penalizing heavily loaded edges\n    capacity_penalty = (demands > 1).float() * 1000  # Arbitrary large number for heavily loaded edges\n    heuristics = heuristics + capacity_penalty\n    \n    return heuristics",
      "fitness": 23.293914794921875,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_11.txt",
      "code_file": "coevolve\\generation_9\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the sum of all demands to normalize them\n    total_demand = demands.sum()\n    \n    # Normalize demands\n    normalized_demands = demands / total_demand\n    \n    # Calculate the heuristics based on normalized demands\n    # Here we use a simple heuristic that considers demand density\n    # The idea is to promote edges with higher demand density\n    heuristics = distance_matrix * normalized_demands\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_0.txt",
      "code_file": "coevolve\\generation_9\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands with respect to the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Initialize a tensor with the same shape as distance_matrix, filled with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n\n    # Calculate the cost of each edge by adding the distance and a function of the demand\n    # Here, we use a simple linear function: demand * demand_factor\n    demand_factor = 1.0  # This factor can be adjusted to prioritize demand\n    heuristics += distance_matrix * demand_factor * normalized_demands.unsqueeze(1)\n    heuristics += normalized_demands.unsqueeze(0) * demand_factor\n\n    # Enforce vehicle capacity constraint by penalizing high-demand edges\n    # This is a simple heuristic, in a real problem, more complex rules might be applied\n    heuristics[torch.where(demands > 1.0)] -= 1000\n\n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_2.txt",
      "code_file": "coevolve\\generation_9\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the distance matrix to ensure consistency\n    min_distance = distance_matrix.min()\n    max_distance = distance_matrix.max()\n    normalized_distance_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)\n    \n    # Normalize the demands to ensure they sum up to the vehicle capacity\n    normalized_demands = demands / demands.sum()\n    \n    # Calculate the initial heuristic values based on normalized demands\n    # and a simple heuristic that takes into account the distance\n    heuristic_matrix = normalized_distance_matrix * normalized_demands.unsqueeze(1)\n    \n    # Add a penalty for edges leading to the depot to discourage starting/ending at the depot\n    depot_penalty = -1\n    heuristic_matrix[torch.arange(distance_matrix.size(0)), torch.arange(distance_matrix.size(0))] = depot_penalty\n    \n    return heuristic_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_3.txt",
      "code_file": "coevolve\\generation_9\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    # Normalize the demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the potential of each edge\n    # Here we use a simple heuristic based on normalized demand and distance\n    # This is just an example and can be replaced with more sophisticated methods\n    potential = -distance_matrix * normalized_demands\n    \n    # Add a small constant to avoid division by zero when taking the log\n    potential = potential + 1e-10\n    \n    # Apply the normalized demand to the potential\n    potential = potential / potential.sum() * demands.sum()\n    \n    return potential",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_6.txt",
      "code_file": "coevolve\\generation_9\\code_6.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Assuming demands are normalized by the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Calculate the inverse of the demand, which will be used to penalize high-demand edges\n    demand_inverse = 1 / (demands + 1e-6)  # Adding a small constant to avoid division by zero\n    \n    # Create a matrix to hold the heuristic values\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n    \n    # Assign a negative heuristic value to high-demand edges\n    heuristic_matrix[demands > total_capacity / len(demands)] = -1\n    \n    # Normalize the distance matrix by the total capacity to account for varying problem scales\n    normalized_distance_matrix = distance_matrix / total_capacity\n    \n    # Adjust the heuristic values based on the normalized distances\n    heuristic_matrix += normalized_distance_matrix\n    \n    return heuristic_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_7.txt",
      "code_file": "coevolve\\generation_9\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the potential cost of each edge as the product of distance and normalized demand\n    potential_costs = distance_matrix * normalized_demands.unsqueeze(1)\n\n    # Add a small constant to avoid division by zero\n    epsilon = 1e-8\n    # Calculate the heuristic values as the ratio of potential costs to the sum of potential costs\n    # This will give negative values for edges with lower potential costs and positive values for higher ones\n    heuristic_values = potential_costs / (potential_costs.sum(1, keepdim=True) + epsilon)\n\n    return heuristic_values",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_9.txt",
      "code_file": "coevolve\\generation_9\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the inverse of demand as a heuristic for promising edges\n    demand_inverse = 1 / (normalized_demands + 1e-8)  # Add a small constant to avoid division by zero\n\n    # Initialize a matrix with zeros of the same shape as the distance matrix\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n\n    # Vectorized implementation of the heuristic\n    # Promising edges will have positive values, undesirable edges will have negative values\n    # The heuristic is based on the inverse of demand\n    heuristic_matrix = -distance_matrix * demand_inverse\n\n    return heuristic_matrix",
      "fitness": 34.7876091003418,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_1.txt",
      "code_file": "coevolve\\generation_9\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = torch.sum(demands)\n    normalized_demands = demands / total_capacity\n\n    # Calculate the heuristic values based on normalized demands\n    # Here we use a simple heuristic: the inverse of the demand multiplied by the distance\n    # This heuristic assumes that nodes with lower demand are more promising\n    heuristics = 1 / (normalized_demands * distance_matrix)\n\n    # Replace NaNs with a very small number to avoid division by zero\n    heuristics = torch.nan_to_num(heuristics, nan=1e-10)\n\n    # Ensure that all values are non-negative\n    heuristics = torch.clamp(heuristics, min=0)\n\n    return heuristics",
      "fitness": 231.0624542236328,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_10.txt",
      "code_file": "coevolve\\generation_9\\code_10.py"
    }
  ]
}