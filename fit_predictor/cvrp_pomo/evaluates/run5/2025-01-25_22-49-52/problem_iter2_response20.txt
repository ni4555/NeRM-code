```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize distance matrix
    max_distance = distance_matrix.max().item()
    normalized_distances = distance_matrix / max_distance
    
    # Normalize demands
    max_demand = demands.max().item()
    normalized_demands = demands / max_demand
    
    # Initialize the potential value matrix
    potential_values = torch.zeros_like(distance_matrix)
    
    # Use a more sophisticated node partitioning technique
    clusters = partition_nodes_sophisticated(demands)
    
    # Calculate the potential value for edges between clusters
    for i in range(n):
        for j in range(i + 1, n):
            if i in clusters[i] and j in clusters[j]:
                potential_values[i, j] = normalized_distances[i, j] - torch.sum(normalized_demands[clusters[i]]) - torch.sum(normalized_demands[clusters[j]])
            else:
                potential_values[i, j] = -float('inf')
    
    # Set the depot to 0 potential value
    potential_values[0, :] = 0
    potential_values[:, 0] = 0
    
    return potential_values

def partition_nodes_sophisticated(demands: torch.Tensor) -> list:
    # Placeholder for a more sophisticated partitioning algorithm
    # This should implement advanced clustering techniques like k-means, DBSCAN, etc.
    # For simplicity, we'll use a simple k-means clustering approach
    n_clusters = 5  # Example number of clusters
    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(demands.view(-1, 1))
    clusters = [set(kmeans.labels_ == i).astype(int).nonzero()[0].view(-1).tolist() for i in range(n_clusters)]
    return clusters
```
