```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment
    mean_distance = distance_matrix.mean()
    heuristic_range = 1.0 / (distance_matrix + mean_distance + 1e-8)

    # Load balancing strategy
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Dynamic weighting based on performance
    weight_inverse_distance = 0.5
    weight_demand_weight = 0.3
    weight_heuristic_range = 0.2
    weight_load_balance = 0.4

    # Combine heuristics with normalized weights
    combined_heuristic = (inverse_distance * weight_inverse_distance +
                          demand_weight * weight_demand_weight +
                          heuristic_range * weight_heuristic_range +
                          load_balance * weight_load_balance)

    # Mutation to introduce diversity in the search space
    mutation_factor = torch.randn_like(combined_heuristic) * 0.1
    mutated_heuristic = combined_heuristic + mutation_factor

    # Clamp the mutated heuristic to avoid extreme values
    mutated_heuristic = torch.clamp(mutated_heuristic, min=-10.0, max=10.0)

    return mutated_heuristic
```
