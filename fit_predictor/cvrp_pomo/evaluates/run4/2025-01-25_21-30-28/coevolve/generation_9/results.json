{
  "generation": 9,
  "description": "The objective of this problem is to design an advanced heuristic algorithm tailored to solve the Capacitated Vehicle Routing Problem (CVRP), with the aim of minimizing the total travel distance while strictly adhering to vehicle capacity constraints. The algorithm should integrate a comprehensive set of optimization techniques, including dynamic programming, genetic algorithms, and tabu search, to iteratively refine and enhance solution paths. The following key aspects are integral to the algorithm's design:\n\n1. Iterative path refinement using a combination of the inverse distance heuristic to prioritize proximity among nodes and the demand normalization heuristic to evenly distribute customer demands across vehicle routes.\n2. Implementation of a sophisticated load balancing mechanism to guarantee that no vehicle exceeds its capacity, with a focus on dynamically reallocating customer demands among vehicles based on current load levels.\n3. Utilization of heuristic range adjustment techniques to adaptively adjust the search space and exploit the performance of previously evaluated solutions for better optimization.\n4. Incorporation of normalization and inverse distance heuristics to further improve the algorithm's overall performance.\n\nThe algorithm must be robust and adaptable to a variety of real-world scenarios, yielding balanced and optimal solutions that minimize travel time. Additionally, it must maximize resource utilization by ensuring that vehicle capacities and demand constraints are respected, resulting in an efficient and effective resolution to the CVRP.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the inverse distance heuristic\n    inv_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n    \n    # Normalize the demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the demand normalization heuristic\n    demand_heuristic = normalized_demands * distance_matrix\n    \n    # Combine the two heuristics\n    combined_heuristic = inv_distance - demand_heuristic\n    \n    return combined_heuristic",
      "fitness": 23.26851463317871,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_2.txt",
      "code_file": "coevolve\\generation_9\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the inverse distance heuristic\n    inv_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n    \n    # Normalize the customer demands\n    total_demand = demands.sum()\n    normalized_demands = demands / total_demand\n    \n    # Combine the inverse distance and normalized demands using a weighted sum\n    # The weights can be adjusted to favor either distance or demand\n    weight_distance = 0.5\n    weight_demand = 0.5\n    heuristic_matrix = weight_distance * inv_distance + weight_demand * normalized_demands\n    \n    return heuristic_matrix",
      "fitness": 23.2957706451416,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_4.txt",
      "code_file": "coevolve\\generation_9\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the inverse distance heuristic\n    inv_distance_heuristic = -distance_matrix\n    \n    # Calculate the demand normalization heuristic\n    demand_normalization_heuristic = normalized_demands.expand_as(distance_matrix)\n    \n    # Combine both heuristics\n    combined_heuristic = inv_distance_heuristic + demand_normalization_heuristic\n    \n    return combined_heuristic",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_3.txt",
      "code_file": "coevolve\\generation_9\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Inverse distance heuristic: edges with smaller distances are more promising\n    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n\n    # Demand normalization heuristic: edges with higher normalized demand are more promising\n    demand_heuristic = normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)\n\n    # Combine both heuristics by taking the minimum (which will be more negative for less promising edges)\n    combined_heuristic = torch.min(inverse_distance, demand_heuristic)\n\n    return combined_heuristic",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_0.txt",
      "code_file": "coevolve\\generation_9\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Inverse distance heuristic: Promote edges with shorter distances\n    inverse_distance = -distance_matrix\n    \n    # Demand normalization heuristic: Normalize demands by total capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Combine heuristics: Multiply the inverse distance by normalized demand\n    combined_heuristic = inverse_distance * normalized_demands\n    \n    return combined_heuristic",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_10.txt",
      "code_file": "coevolve\\generation_9\\code_10.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Inverse distance heuristic\n    distance_inverse = 1.0 / (distance_matrix + 1e-8)  # Add a small constant to avoid division by zero\n    \n    # Demand normalization heuristic\n    demand_normalized = normalized_demands * distance_inverse\n    \n    # Combine heuristics\n    combined_heuristics = demand_normalized - distance_inverse\n    \n    return combined_heuristics",
      "fitness": 27.164958953857422,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_7.txt",
      "code_file": "coevolve\\generation_9\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    \n    # Normalize the demands by the total capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the inverse distance heuristic\n    min_distance = distance_matrix.min(dim=1)[0]\n    inv_distance = 1.0 / min_distance\n    \n    # Calculate the demand normalization heuristic\n    demand_normalized = normalized_demands * distance_matrix\n    \n    # Combine the two heuristics\n    combined_heuristics = inv_distance + demand_normalized\n    \n    # Clamp the values to ensure they are within a reasonable range\n    combined_heuristics = torch.clamp(combined_heuristics, min=-1e9, max=1e9)\n    \n    return combined_heuristics",
      "fitness": 231.0624542236328,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_5.txt",
      "code_file": "coevolve\\generation_9\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the inverse distance heuristic\n    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Calculate the demand normalization heuristic\n    total_demand = demands.sum()\n    demand_normalized = demands / total_demand\n    \n    # Combine the heuristics\n    combined_heuristics = inverse_distance * demand_normalized\n    \n    # Ensure that the heuristics are negative for undesirable edges and positive for promising ones\n    # We can do this by subtracting the maximum value from the combined heuristics\n    max_heuristic = combined_heuristics.max()\n    heuristics = combined_heuristics - max_heuristic\n    \n    return heuristics",
      "fitness": 231.0624542236328,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_6.txt",
      "code_file": "coevolve\\generation_9\\code_6.py"
    }
  ]
}