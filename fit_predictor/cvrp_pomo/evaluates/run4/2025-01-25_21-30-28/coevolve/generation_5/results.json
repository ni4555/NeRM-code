{
  "generation": 5,
  "description": "The goal is to design a heuristic algorithm that solves the Capacitated Vehicle Routing Problem (CVRP) by minimizing the total distance traveled while respecting vehicle capacity constraints. The algorithm should leverage advanced techniques such as dynamic programming, genetic algorithms, or tabu search to iteratively refine solution paths. Key components include the optimization of node sequences to minimize distance, load balancing to ensure vehicle capacities are not exceeded, and the integration of heuristics like normalization and inverse distance to enhance performance. The algorithm must effectively handle real-world scenarios, resulting in a balanced and optimal solution that not only minimizes travel time but also maximizes resource utilization by adhering to the capacity and demand constraints of the vehicles.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the inverse of the distances\n    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Normalize the demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the heuristics using the inverse distance and normalized demands\n    heuristics = inv_distance_matrix * normalized_demands\n    \n    return heuristics",
      "fitness": 23.26198387145996,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_7.txt",
      "code_file": "coevolve\\generation_5\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Inverse distance heuristic\n    inv_distance = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Normalization heuristic\n    demand_penalty = normalized_demands * distance_matrix\n    \n    # Combine heuristics\n    heuristic_values = inv_distance - demand_penalty\n    \n    return heuristic_values",
      "fitness": 23.26851463317871,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_3.txt",
      "code_file": "coevolve\\generation_5\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Inverse distance heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n\n    # Normalization heuristic\n    normalization = normalized_demands\n\n    # Combine heuristics: sum of inverse distance and normalization\n    heuristics = inverse_distance + normalization\n\n    return heuristics",
      "fitness": 23.26851463317871,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_4.txt",
      "code_file": "coevolve\\generation_5\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate inverse distance heuristic\n    inverse_distance = 1 / (distance_matrix + 1e-10)  # Adding a small constant to avoid division by zero\n\n    # Calculate demand-based heuristic\n    demand_heuristic = normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)\n\n    # Combine heuristics\n    combined_heuristic = inverse_distance + demand_heuristic\n\n    # Normalize the combined heuristic to ensure it has a good balance between inverse distance and demand\n    max_combined_heuristic = combined_heuristic.max()\n    min_combined_heuristic = combined_heuristic.min()\n    normalized_combined_heuristic = (combined_heuristic - min_combined_heuristic) / (max_combined_heuristic - min_combined_heuristic)\n\n    return normalized_combined_heuristic",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_2.txt",
      "code_file": "coevolve\\generation_5\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the inverse of the demands to give higher priority to smaller demands\n    inverse_demands = 1 / (normalized_demands + 1e-8)  # Adding a small constant to avoid division by zero\n\n    # Calculate the heuristic value as the sum of the inverse demands and the negative distance\n    # Negative distance to encourage shorter paths\n    heuristics = inverse_demands - distance_matrix\n\n    # Normalize the heuristics matrix to ensure the sum of heuristics for each row is equal to 1\n    row_sums = heuristics.sum(dim=1, keepdim=True)\n    heuristics = heuristics / row_sums\n\n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_8.txt",
      "code_file": "coevolve\\generation_5\\code_8.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.size(0)\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Normalize distance matrix to create a weight matrix\n    normalized_distance_matrix = distance_matrix / distance_matrix.max()\n    \n    # Inverse distance heuristic\n    inverse_distance = 1 / (normalized_distance_matrix + 1e-10)  # Adding small value to avoid division by zero\n    \n    # Demands heuristic: higher demands get lower priority\n    demands_heuristic = -normalized_demands\n    \n    # Combine heuristics\n    heuristics = inverse_distance + demands_heuristic\n    \n    return heuristics",
      "fitness": 23.73599624633789,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_5.txt",
      "code_file": "coevolve\\generation_5\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Normalize the distance matrix by the total capacity\n    normalized_distance_matrix = distance_matrix / total_capacity\n    \n    # Inverse distance heuristic\n    inverse_distance = 1 / (normalized_distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Normalization heuristic\n    demand_diff = torch.abs(demands - demands.mean())\n    \n    # Combine heuristics\n    combined_heuristics = inverse_distance - demand_diff\n    \n    return combined_heuristics",
      "fitness": 32.663330078125,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_9.txt",
      "code_file": "coevolve\\generation_5\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    demands_normalized = demands / demands.sum()\n    # Inverse distance heuristic\n    inv_distance = 1.0 / (distance_matrix + 1e-10)  # Add a small value to avoid division by zero\n    # Normalize the inverse distance by the demand to balance the influence of distance and demand\n    normalized_inv_distance = inv_distance / (demands_normalized + 1e-10)\n    return normalized_inv_distance",
      "fitness": 231.0624542236328,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_10.txt",
      "code_file": "coevolve\\generation_5\\code_10.py"
    }
  ]
}