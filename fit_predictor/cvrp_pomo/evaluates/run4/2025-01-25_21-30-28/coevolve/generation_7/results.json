{
  "generation": 7,
  "description": "The goal of this problem is to develop a sophisticated heuristic algorithm designed to address the Capacitated Vehicle Routing Problem (CVRP) by achieving the optimal total distance traveled, while concurrently respecting strict vehicle capacity constraints. This algorithm will employ a combination of advanced optimization techniques, including dynamic programming, genetic algorithms, and tabu search, to iteratively enhance solution paths. The key aspects of the algorithm include the following:\n\n1. Iterative refinement of node sequences to minimize travel distance, leveraging techniques such as the inverse distance heuristic to prioritize nearby nodes and the demand normalization heuristic to balance the allocation of customer demands.\n2. Implementation of load balancing strategies to ensure that vehicle capacities are not exceeded, with a focus on dynamically adjusting the allocation of customer demands to individual vehicles.\n3. Integration of advanced heuristics like the heuristic range adjustment, which adaptively modifies the search space based on the performance of previously evaluated solutions.\n4. Utilization of normalization and inverse distance heuristics to enhance the overall performance of the algorithm.\n\nThe resulting solution must be robust and adaptable to real-world scenarios, producing balanced and optimal solutions that minimize travel time. Furthermore, the algorithm must maximize resource utilization by adhering to the capacity and demand constraints of the vehicles, thereby ensuring an efficient and effective resolution to the CVRP.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Inverse distance heuristic: edges with shorter distances are more promising\n    inverse_distance = 1.0 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n\n    # Demand normalization heuristic: edges with normalized demand closer to 1 are more promising\n    demand_diff = torch.abs(normalized_demands - 1.0)\n    demand_weight = 1.0 / (demand_diff + 1e-8)  # Adding a small constant to avoid division by zero\n\n    # Combine heuristics: sum the inverse distance and demand weight for each edge\n    combined_heuristic = inverse_distance + demand_weight\n\n    return combined_heuristic",
      "fitness": 23.231159210205078,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_3.txt",
      "code_file": "coevolve\\generation_7\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the inverse distance heuristic (IDH)\n    idh = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n\n    # Calculate the demand normalization heuristic (DNH)\n    dnh = normalized_demands\n\n    # Combine IDH and DNH to get the heuristic values\n    heuristics = idh * dnh\n\n    return heuristics",
      "fitness": 23.26198387145996,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_11.txt",
      "code_file": "coevolve\\generation_7\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_demand = demands.sum()\n    normalized_demands = demands / total_demand\n\n    # Inverse distance heuristic: prioritize nearby nodes\n    inverse_distance = 1.0 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n\n    # Demand normalization heuristic: balance the allocation of customer demands\n    demand_heuristic = normalized_demands\n\n    # Combine the heuristics\n    combined_heuristic = inverse_distance + demand_heuristic\n\n    # Ensure that the heuristic matrix is symmetric (since distance matrix is symmetric)\n    combined_heuristic = (combined_heuristic + combined_heuristic.t()) / 2\n\n    return combined_heuristic",
      "fitness": 23.26851463317871,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_7.txt",
      "code_file": "coevolve\\generation_7\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Inverse distance heuristic: lower distances are more promising\n    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Demand normalization heuristic: higher demand nodes are more promising\n    demand_heuristic = normalized_demands * 10  # Scale factor for demand\n    \n    # Combine heuristics: sum of inverse distance and demand heuristic\n    combined_heuristic = inverse_distance + demand_heuristic\n    \n    return combined_heuristic",
      "fitness": 23.26888656616211,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_0.txt",
      "code_file": "coevolve\\generation_7\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Get the total demand which is used for normalization\n    total_demand = demands.sum().item()\n    \n    # Calculate the inverse distance heuristic\n    # This is the negative distance because we want to prioritize shorter distances\n    inv_distance = -distance_matrix\n    \n    # Calculate the demand normalization heuristic\n    # We divide the demands by the total demand and subtract from 1 to normalize them\n    # This helps in balancing the allocation of customer demands\n    demand_normalization = (1 - (demands / total_demand))\n    \n    # Combine both heuristics using element-wise addition\n    # The resulting heuristic values will be negative for undesirable edges\n    combined_heuristics = inv_distance + demand_normalization\n    \n    return combined_heuristics",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_2.txt",
      "code_file": "coevolve\\generation_7\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    # Normalize demands by total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Inverse distance heuristic: closer nodes have higher priority\n    inv_distance = 1.0 / (distance_matrix + 1e-8)  # Adding a small value to avoid division by zero\n    \n    # Demand normalization heuristic: balance the allocation of customer demands\n    demand_normalized = normalized_demands * inv_distance\n    \n    # Combine heuristics\n    heuristics = -demand_normalized\n    \n    return heuristics",
      "fitness": 23.331899642944336,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_5.txt",
      "code_file": "coevolve\\generation_7\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    # Calculate the total demand to normalize by\n    total_demand = demands.sum()\n    # Normalize demands\n    normalized_demands = demands / total_demand\n    # Inverse distance heuristic\n    inverse_distance = 1 / distance_matrix\n    # Demand normalization heuristic\n    demand_heuristic = normalized_demands * demands\n    # Combine heuristics\n    combined_heuristic = inverse_distance + demand_heuristic\n    # Clip values to ensure they are within a certain range (e.g., between -1 and 1)\n    combined_heuristic = torch.clamp(combined_heuristic, min=-1, max=1)\n    return combined_heuristic",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_1.txt",
      "code_file": "coevolve\\generation_7\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the inverse distance heuristic\n    # We use a large positive value for the diagonal to avoid self-loops\n    inv_distance = 1.0 / (distance_matrix + 1e-6)\n\n    # Calculate the demand normalization heuristic\n    demand_norm = normalized_demands * inv_distance\n\n    # Combine the heuristics to get the final heuristic values\n    heuristic_values = demand_norm - inv_distance\n\n    return heuristic_values",
      "fitness": 27.164958953857422,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_9.txt",
      "code_file": "coevolve\\generation_7\\code_9.py"
    }
  ]
}