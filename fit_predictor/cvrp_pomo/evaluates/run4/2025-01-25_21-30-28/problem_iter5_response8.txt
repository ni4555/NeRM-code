```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic: edges with shorter distances are more promising
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic: edges with normalized demand closer to 1 are more promising
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment: adaptively adjust the search space based on previous performance
    mean_distance = distance_matrix.mean()
    # Use a decayed mean distance to encourage exploration of distant edges
    heuristic_range = 1.0 / (distance_matrix + decayed_mean_distance + 1e-8)
    decayed_mean_distance = mean_distance * torch.exp(-0.1)

    # Load balancing strategy: prioritize edges with demand close to capacity
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Adjust weights based on relative importance and problem specifics
    weight_inverse_distance = 0.5
    weight_demand_weight = 0.3
    weight_heuristic_range = 0.2
    weight_load_balance = 0.4

    # Combine heuristics using relative measures and weights
    combined_heuristic = (inverse_distance * weight_inverse_distance +
                          demand_weight * weight_demand_weight +
                          heuristic_range * weight_heuristic_range +
                          load_balance * weight_load_balance)

    # Normalize the heuristics to balance global and local search
    combined_heuristic = combined_heuristic / combined_heuristic.sum()

    # Clamp values to avoid extreme values that may skew the heuristic
    combined_heuristic = torch.clamp(combined_heuristic, min=-1.0, max=1.0)

    return combined_heuristic
```
