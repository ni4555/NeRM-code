```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment
    heuristic_range = torch.abs(distance_matrix) / torch.sum(torch.abs(distance_matrix), dim=0)

    # Load balancing strategy
    load_balance = torch.max(0.0, 1.0 - (torch.abs(normalized_demands) * demands / total_capacity))

    # Integrate domain-specific insights
    vehicles_needed = torch.ceil(total_capacity / demands.max())
    vehicle_efficiency = 1.0 / vehicles_needed

    # Combine heuristics with the above factors
    combined_heuristic = (inverse_distance * 0.4 +
                          demand_weight * 0.3 +
                          heuristic_range * 0.2 +
                          load_balance * 0.1 +
                          vehicle_efficiency * 0.1)

    # Clamp values to a reasonable range
    combined_heuristic = torch.clamp(combined_heuristic, min=-10.0, max=10.0)

    return combined_heuristic
```
