```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic: edges with shorter distances are more promising
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic: edges with normalized demand closer to 1 are more promising
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment: penalize edges with larger distances
    mean_distance = distance_matrix.mean()
    heuristic_range = 1.0 / (distance_matrix + mean_distance + 1e-8)

    # Load balancing strategy: prioritize edges with demand close to capacity
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Introduce adaptive learning to adjust the weights based on performance
    performance_metric = -torch.sum(distance_matrix * heuristics_v1(distance_matrix, demands))
    weight_inverse_distance = 0.5 * (1 - performance_metric / total_capacity)
    weight_demand_weight = 0.3 * (1 - performance_metric / total_capacity)
    weight_heuristic_range = 0.2 * (1 - performance_metric / total_capacity)
    weight_load_balance = 0.4 * (1 - performance_metric / total_capacity)

    # Combine heuristics using the updated weights
    combined_heuristic = (inverse_distance * weight_inverse_distance +
                          demand_weight * weight_demand_weight +
                          heuristic_range * weight_heuristic_range +
                          load_balance * weight_load_balance)

    # Introduce local search to refine the solution by swapping nodes
    for i in range(n):
        for j in range(i + 1, n):
            swap_cost = distance_matrix[i, j] - distance_matrix[i, (j - 1) % n] - distance_matrix[(j - 1) % n, i] + distance_matrix[(j - 1) % n, (j - 1) % n]
            if swap_cost > 0:
                combined_heuristic[i, j] += swap_cost
                combined_heuristic[j, i] += swap_cost

    # Mutation: Introduce a random factor to explore new solutions
    random_factor = torch.rand_like(combined_heuristic)
    mutated_heuristic = combined_heuristic + random_factor * 2 - 1

    # Mutation: Introduce a penalty for large deviations from the mean
    penalty_factor = torch.clamp(torch.abs(mutated_heuristic - combined_heuristic) * 100, max=10.0)
    mutated_heuristic -= penalty_factor

    # Mutation: Introduce a bonus for large deviations from the mean if they lead to improvement
    improvement_bonus = torch.clamp(torch.abs(mutated_heuristic - combined_heuristic) * 10, max=10.0)
    mutated_heuristic += improvement_bonus

    # Clamp mutated values to a reasonable range to avoid extreme values
    mutated_heuristic = torch.clamp(mutated_heuristic, min=-10.0, max=10.0)

    return mutated_heuristic
```
