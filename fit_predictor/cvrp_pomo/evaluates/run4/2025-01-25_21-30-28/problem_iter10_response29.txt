```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment
    mean_distance = distance_matrix.mean()
    heuristic_range = 1.0 / (distance_matrix + mean_distance + 1e-8)

    # Load balancing strategy
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Dynamically calculate weights based on the problem characteristics
    weights = calculate_optimal_weights(distance_matrix, normalized_demands)

    # Combine heuristics with calculated weights
    combined_heuristic = (weights[0] * inverse_distance +
                          weights[1] * demand_weight +
                          weights[2] * heuristic_range +
                          weights[3] * load_balance)

    # Clamp values to a reasonable range to avoid extreme values
    combined_heuristic = torch.clamp(combined_heuristic, min=-10.0, max=10.0)

    return combined_heuristic

def calculate_optimal_weights(distance_matrix, normalized_demands):
    # Placeholder for a dynamic weight calculation
    # This function would be based on problem complexity and performance feedback
    # For this example, we return a fixed weight vector
    return torch.tensor([0.4, 0.4, 0.1, 0.1], dtype=torch.float32)
```
