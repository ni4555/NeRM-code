```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic: shorter distances are more promising
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic: edges with demand normalized close to 1 are more promising
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment: prioritize edges that lead to solutions with a smaller range of demands
    max_demand = torch.max(normalized_demands)
    min_demand = torch.min(normalized_demands)
    demand_range = max_demand - min_demand
    range_weight = 1.0 / (demand_range + 1e-8)

    # Load balancing strategy: adjust the heuristic values based on the remaining capacity
    remaining_capacity = torch.ones_like(demands)
    for i in range(n):
        remaining_capacity[i] -= demands[i]
        # Adjusting only negative remaining capacities to ensure no overcapacity
        remaining_capacity[i] = torch.clamp(remaining_capacity[i], min=0)
    load_balance_weight = 1.0 / (1.0 - remaining_capacity / total_capacity)

    # Combine heuristics using a weighted sum with domain-specific insights
    combined_heuristic = (
        0.5 * inverse_distance +
        0.3 * demand_weight +
        0.1 * range_weight +
        0.1 * load_balance_weight
    )

    # Apply a soft clipping to ensure the values are within a reasonable range
    combined_heuristic = torch.clamp(combined_heuristic, min=-1.0, max=1.0)

    return combined_heuristic
```
