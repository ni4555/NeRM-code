```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic: edges with shorter distances are more promising
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic: edges with normalized demand closer to 1 are more promising
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment: penalize edges with larger distances
    heuristic_range = 1.0 / (distance_matrix + distance_matrix.mean() + 1e-8)

    # Load balancing strategy: prioritize edges with demand close to capacity
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Combine heuristics with meaningful weights
    combined_heuristic = (inverse_distance * 0.4 +
                          demand_weight * 0.3 +
                          heuristic_range * 0.2 +
                          load_balance * 0.1)

    # Normalize heuristics to ensure they are within a feasible range
    min_heuristic = combined_heuristic.min()
    max_heuristic = combined_heuristic.max()
    normalized_combined_heuristic = (combined_heuristic - min_heuristic) / (max_heuristic - min_heuristic)

    # Ensure that all edge heuristics are within a feasible range to promote real-world applicability
    normalized_combined_heuristic = torch.clamp(normalized_combined_heuristic, min=-1.0, max=1.0)

    return normalized_combined_heuristic
```
