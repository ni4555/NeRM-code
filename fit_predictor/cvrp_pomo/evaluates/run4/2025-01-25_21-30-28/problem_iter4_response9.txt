```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic: edges with shorter distances are more promising
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic: edges with normalized demand closer to 1 are more promising
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Load balancing strategy: introduce a load factor based on the vehicle capacity
    load_factor = total_capacity / (n - 1)
    load_balance_heuristic = (1.0 - load_factor) * inverse_distance

    # Combine heuristics: sum the inverse distance, demand weight, and load balancing heuristic for each edge
    combined_heuristic = inverse_distance + demand_weight + load_balance_heuristic

    return combined_heuristic
```
