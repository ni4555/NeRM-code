```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment using mean distance
    mean_distance = distance_matrix.mean()
    heuristic_range = 1.0 / (distance_matrix + mean_distance + 1e-8)

    # Load balancing strategy
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Combine heuristics with normalized weights
    weights = {
        'inverse_distance': 0.5,
        'demand_weight': 0.3,
        'heuristic_range': 0.2,
        'load_balance': 0.4
    }
    combined_heuristic = (
        weights['inverse_distance'] * inverse_distance +
        weights['demand_weight'] * demand_weight +
        weights['heuristic_range'] * heuristic_range +
        weights['load_balance'] * load_balance
    )

    # Normalize the combined heuristic to avoid extreme values
    combined_heuristic = combined_heuristic / combined_heuristic.abs().max()

    return combined_heuristic
```
