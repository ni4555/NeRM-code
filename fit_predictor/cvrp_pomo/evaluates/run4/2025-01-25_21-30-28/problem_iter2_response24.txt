```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic: edges with shorter distances are more promising
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic: edges with normalized demand closer to 1 are more promising
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment: prioritize edges that lead to solutions with a lower range
    max_demand = torch.max(normalized_demands)
    min_demand = torch.min(normalized_demands)
    demand_range = max_demand - min_demand
    range_weight = 1.0 / (demand_range + 1e-8)

    # Genetic algorithm inspired heuristic: use a binary string representation of each edge
    # and assign higher weight to edges that have appeared more frequently in previous solutions
    genetic_insight = torch.nn.functional.one_hot(torch.arange(n), num_classes=n).to(torch.float32)
    genetic_insight = torch.matmul(genetic_insight, genetic_insight.T)
    genetic_weight = (1.0 / (genetic_insight.sum(1) + 1e-8)) ** 2

    # Diversity-promoting heuristic: encourage the inclusion of edges that have not been included often
    diversity = (1.0 / (genetic_insight.sum(1) + 1e-8))

    # Combine heuristics with a weighted sum, where we may adjust the weights for each heuristic
    # For simplicity, we use equal weights here, but in practice, these should be tuned
    combined_heuristic = (
        0.4 * inverse_distance +
        0.3 * demand_weight +
        0.2 * range_weight +
        0.1 * genetic_weight +
        0.1 * diversity
    )

    return combined_heuristic
```
