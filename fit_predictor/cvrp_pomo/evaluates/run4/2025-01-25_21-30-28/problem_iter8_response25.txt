```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Inverse distance heuristic: edges with shorter distances are more promising
    inverse_distance = 1.0 / (distance_matrix + 1e-8)

    # Demand normalization heuristic: edges with normalized demand closer to 1 are more promising
    demand_diff = torch.abs(normalized_demands - 1.0)
    demand_weight = 1.0 / (demand_diff + 1e-8)

    # Heuristic range adjustment: penalize edges with larger distances
    mean_distance = distance_matrix.mean()
    heuristic_range = 1.0 / (distance_matrix + mean_distance + 1e-8)

    # Load balancing strategy: prioritize edges with demand close to capacity
    load_balance = 1.0 / (1 + torch.abs(torch.linspace(0, total_capacity, steps=n) - normalized_demands))

    # Adapt heuristics dynamically based on performance: use a simple decay to simulate learning
    decay_factor = 0.95  # Reduced decay factor to allow more exploration
    inverse_distance *= decay_factor
    demand_weight *= decay_factor
    heuristic_range *= decay_factor
    load_balance *= decay_factor

    # Use relative performance measures to guide search
    relative_inverse_distance = inverse_distance / (inverse_distance + heuristic_range)
    relative_demand_weight = demand_weight / (demand_weight + load_balance)

    # Integrate relative measures to enhance heuristic performance
    enhanced_inverse_distance = relative_inverse_distance * 0.5
    enhanced_demand_weight = relative_demand_weight * 0.5

    # Balance global/local search by adjusting weights
    weight_enhanced_inverse_distance = 0.6
    weight_enhanced_demand_weight = 0.4

    # Combine heuristics using domain knowledge and adjusted weights
    combined_heuristic = (enhanced_inverse_distance * weight_enhanced_inverse_distance +
                          enhanced_demand_weight * weight_enhanced_demand_weight)

    # Clamp values to a reasonable range to avoid extreme values
    combined_heuristic = torch.clamp(combined_heuristic, min=-10.0, max=10.0)

    return combined_heuristic
```
