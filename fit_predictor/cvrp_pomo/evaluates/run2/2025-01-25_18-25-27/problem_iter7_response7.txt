```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    # Introduce a perturbation to encourage exploration of alternative solutions
    perturbation = (torch.rand(n) * 2 - 1) * heuristics_matrix
    # Introduce a penalty for infeasibilities
    feasibility_mask = (heuristics_matrix > 0).float()
    infeasibility_penalty = torch.where(feasibility_mask <= 0, -1.0, 0.0)
    heuristics_matrix += perturbation + infeasibility_penalty * (1 - feasibility_mask)
    return heuristics_matrix
```
