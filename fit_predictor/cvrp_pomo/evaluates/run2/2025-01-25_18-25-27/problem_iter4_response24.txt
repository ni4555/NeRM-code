```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix
    heuristics_matrix = distance_matrix - distance_matrix * normalized_demands[:, None]
    # Incorporate a capacity constraint factor by adding negative penalties for overcapacity
    heuristics_matrix -= (demands > demands.sum()).float() * torch.inf
    return heuristics_matrix
```
