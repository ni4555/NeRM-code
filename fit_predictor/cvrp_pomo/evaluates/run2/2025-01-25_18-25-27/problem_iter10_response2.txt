```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n

    # Compute the heuristics matrix
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))

    # Introduce randomness and a penalty for infeasibilities
    penalty = torch.rand(n)
    feasible_edges = (heuristics_matrix > 0).float()
    random_factor = (torch.rand(n) * 2 - 1) * feasible_edges
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    heuristics_matrix = heuristics_matrix + random_factor + infeasibility_penalty * (1 - feasible_edges)

    # Mutation: Swap edges based on a probability to introduce diversity
    mutation_probability = 0.1
    edges_to_swap = torch.rand(n, n) < mutation_probability
    edges_to_swap = edges_to_swap.triu(diagonal=1)  # Swap only non-diagonal edges
    heuristics_matrix[edges_to_swap] = heuristics_matrix[torch.arange(n), torch.where(edges_to_swap, torch.arange(n), torch.zeros_like(n, dtype=torch.long, device=heuristics_matrix.device))]

    return heuristics_matrix
```
