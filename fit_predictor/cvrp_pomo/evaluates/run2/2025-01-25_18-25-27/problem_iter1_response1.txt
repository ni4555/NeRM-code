```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the cumulative demand sum from the last customer backwards
    cumulative_demand = torch.cumsum(demands[::-1], dim=0)[::-1]
    # Calculate the maximum demand that can be carried at each step
    max_demand = cumulative_demand / (cumulative_demand.cumsum(dim=0) + 1)
    # Compute the heuristics matrix
    heuristics_matrix = distance_matrix - (max_demand * distance_matrix.sum(axis=1, keepdim=True))
    return heuristics_matrix
```
