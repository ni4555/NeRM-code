```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True))
    
    # Introduce a local search heuristic by adjusting the heuristics based on the demands
    # This heuristic could be based on the difference in demands, or other local criteria
    local_adjustment = (demands - demands.mean()) * (distance_matrix.sum(axis=1, keepdim=True) - distance_matrix.sum() / n)
    heuristics_matrix += local_adjustment
    
    return heuristics_matrix
```
