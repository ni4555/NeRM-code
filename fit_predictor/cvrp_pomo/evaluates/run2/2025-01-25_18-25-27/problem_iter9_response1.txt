```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    
    # Randomly perturb the heuristics matrix to introduce new solutions
    mutation_rate = 0.1
    mutation = torch.rand_like(heuristics_matrix) * 2 - 1
    mutated_heuristics = heuristics_matrix + mutation * mutation_rate
    
    # Introduce a penalty for infeasibilities and normalize the matrix
    penalty = torch.rand(n)
    feasible_edges = (mutated_heuristics > 0).float()
    infeasibility_penalty = torch.where(mutated_heuristics <= 0, -1.0, 0.0)
    normalized_heuristics = mutated_heuristics + penalty * feasible_edges + infeasibility_penalty * (1 - feasible_edges)
    
    return normalized_heuristics
```
