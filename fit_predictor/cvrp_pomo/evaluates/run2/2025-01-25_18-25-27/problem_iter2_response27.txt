```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix using a modified version of the savings algorithm
    heuristics_matrix = distance_matrix - (normalized_demands.unsqueeze(1) * distance_matrix.sum(axis=1, keepdim=True))
    # Adjust for negative values by adding the maximum value to all elements
    max_value = torch.max(heuristics_matrix)
    heuristics_matrix = heuristics_matrix + max_value.unsqueeze(0).unsqueeze(1)
    # Adjust the matrix based on the distance to the depot to prioritize closer nodes
    heuristics_matrix += (distance_matrix[:, 0] * normalized_demands)
    # Incorporate a local structure factor that considers the distance to neighboring nodes
    for i in range(1, n):
        for j in range(1, n):
            heuristics_matrix[i, j] *= (1 - torch.exp(-distance_matrix[i, j]))
    return heuristics_matrix
```
