```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True))
    # Introduce a penalty for edges leading back to the depot to encourage diversification
    penalty = -1e5
    heuristics_matrix[torch.arange(n), torch.arange(n)] = penalty
    # Introduce a bonus for edges that satisfy capacity constraints
    capacity_bonus = 1e-3
    mask = (demands[:, None] < demands[None, :])
    heuristics_matrix[mask] += capacity_bonus
    # Incorporate domain-specific insights by penalizing highly demanded customers more
    highly_demanding_penalty = 0.1 * (demands - normalized_demands)
    heuristics_matrix += highly_demanding_penalty * (distance_matrix.sum(axis=1, keepdim=True))
    return heuristics_matrix
```
