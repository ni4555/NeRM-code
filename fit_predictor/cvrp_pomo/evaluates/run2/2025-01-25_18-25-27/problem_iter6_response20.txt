```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True))
    # Introduce a penalty for high demands to encourage capacity adherence
    capacity_penalty = (demands - demands.mean()) * 0.1
    # Introduce a penalty for edges to the depot
    heuristics_matrix[:, 0] = torch.zeros_like(heuristics_matrix[:, 0])
    heuristics_matrix[0, :] = torch.zeros_like(heuristics_matrix[0, :])
    # Incorporate a local search component by adjusting the heuristics for edges within a certain radius
    radius = 5  # Assuming 5 is the radius for neighborhood
    neighborhood_indices = torch.tensor([[i, j] for i in range(n) for j in range(n) if i != j and distance_matrix[i][j] < radius]).t()
    if neighborhood_indices.numel() > 0:
        for idx in neighborhood_indices:
            heuristics_matrix[idx[0], idx[1]] -= capacity_penalty[idx[0]] * capacity_penalty[idx[1]]
    # Adjust for negative values by adding the maximum value to all elements
    max_val = torch.max(heuristics_matrix)
    heuristics_matrix = heuristics_matrix + max_val
    return heuristics_matrix
```
