```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix using exponential decay and normalized demands
    heuristics_matrix = (normalized_demands.unsqueeze(1) * distance_matrix.sum(axis=1, keepdim=True) +
                         torch.exp(-distance_matrix) * (1 - normalized_demands) * distance_matrix)
    return heuristics_matrix
```
