```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Normalize demands
    demands_sum = demands.sum()
    normalized_demands = demands / demands_sum
    # Calculate the weighted distances
    weighted_distances = distance_matrix * (1 - torch.exp(-distance_matrix))
    # Apply the demand normalization and sum over the demand dimension
    normalized_weighted_distances = weighted_distances - (normalized_demands[:, None] * weighted_distances.sum(axis=1, keepdim=True))
    return normalized_weighted_distances
```
