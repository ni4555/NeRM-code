```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n

    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))

    # Introduce randomness and a penalty for infeasibilities
    penalty = torch.rand(n)
    feasible_edges = (heuristics_matrix > 0).float()
    random_factor = (torch.rand(n) * 2 - 1) * feasible_edges
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    heuristics_matrix += random_factor + infeasibility_penalty * (1 - feasible_edges)

    # Mutation step: Swap some edges to introduce diversity
    swap_indices = torch.randperm(n)[:int(n * 0.1)]  # Swap 10% of the edges
    for i in range(0, len(swap_indices), 2):
        if i + 1 < len(swap_indices):
            heuristics_matrix[swap_indices[i], swap_indices[i+1]] = heuristics_matrix[swap_indices[i+1], swap_indices[i]]
            heuristics_matrix[swap_indices[i+1], swap_indices[i]] = heuristics_matrix[swap_indices[i], swap_indices[i+1]]

    # Ensure all vehicle capacities are respected by enforcing non-negative heuristic values
    heuristics_matrix = torch.clamp_min(heuristics_matrix, min=0.0)

    return heuristics_matrix
```
