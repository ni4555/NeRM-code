```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    # Adjust the heuristics to penalize infeasibilities and favor more balanced routes
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    # Introduce a penalty for high deviation from the average demand
    penalty = torch.clamp((normalized_demands - avg_demand) ** 2, min=0)
    heuristics_matrix -= penalty * distance_matrix.sum(axis=1, keepdim=True)
    # Normalize and scale the heuristics matrix to ensure efficient computation
    heuristics_matrix /= heuristics_matrix.sum() / distance_matrix.shape[0]
    return heuristics_matrix
```
