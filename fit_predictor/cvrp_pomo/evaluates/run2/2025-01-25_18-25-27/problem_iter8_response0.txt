```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand

    # Initial heuristic calculation with penalties for infeasibilities
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True))
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    heuristics_matrix += infeasibility_penalty

    # Local adjustments
    for i in range(1, n):  # Skip the depot
        for j in range(1, n):  # Skip the depot and i itself
            heuristics_matrix[i, j] += normalized_demands[i] * distance_matrix[i, j]
            heuristics_matrix[j, i] += normalized_demands[j] * distance_matrix[j, i]

    # Introduce randomness
    random_factor = (torch.rand(n, n) * 2 - 1) * (heuristics_matrix > 0).float()
    heuristics_matrix += random_factor

    return heuristics_matrix
```
