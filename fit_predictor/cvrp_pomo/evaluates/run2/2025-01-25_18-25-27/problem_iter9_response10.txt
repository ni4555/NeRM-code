```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    
    # Random perturbation for exploration
    random_perturbation = (torch.rand(n, n) * 2 - 1) * (heuristics_matrix > 0)
    
    # Introduce a penalty for edges that do not meet the demand threshold
    demand_threshold = 0.5
    penalty = torch.where(heuristics_matrix <= demand_threshold, -1.0, 0.0)
    
    # Adjust heuristics matrix with random perturbation and penalty
    heuristics_matrix += random_perturbation + penalty
    
    return heuristics_matrix
```
