```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n

    # Calculate initial heuristic matrix with penalties
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))

    # Introduce randomness and perturb the heuristics matrix
    mutation_rate = 0.1
    random_perturbation = torch.rand_like(heuristics_matrix) * 2 - 1
    heuristics_matrix += random_perturbation * mutation_rate

    # Normalize the heuristics matrix by penalizing infeasible edges and non-zero edges
    penalty = torch.rand(n)
    feasible_edges = (heuristics_matrix > 0).float()
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    normalized_heuristics = heuristics_matrix + penalty * feasible_edges + infeasibility_penalty * (1 - feasible_edges)

    # Ensure that all heuristics are positive
    normalized_heuristics = torch.clamp(normalized_heuristics, min=0)

    return normalized_heuristics
```
