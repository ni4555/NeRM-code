```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initialize heuristics matrix with zeros
    heuristics_matrix = torch.zeros_like(distance_matrix)
    # Calculate the total weight matrix
    total_weight_matrix = distance_matrix + demands[:, None]
    # Iterate through the matrix to compute heuristics
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristics for the current edge
                heuristics_matrix[i, j] = torch.clamp(total_weight_matrix[i, j] - distance_matrix[i, j], min=-1e6, max=0)
    return heuristics_matrix
```
