```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Calculate the sum of all demands
    total_demand = demands.sum()
    # Vectorized calculation of edge demand and h(n)
    h_n = distance_matrix / (total_demand + distance_matrix.sum(axis=1, keepdim=True))
    # Compute the heuristics matrix
    heuristics_matrix = normalized_demands.unsqueeze(1) * h_n
    return heuristics_matrix
```
