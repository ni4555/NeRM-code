```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True))
    # Introduce a synergy factor that balances global and local criteria
    synergy_factor = torch.rand(n) * 0.1  # Randomly initialized synergy factor
    # Modify the heuristics matrix based on a local capacity adherence heuristic
    local_heuristics = heuristics_matrix - (synergy_factor * torch.abs(heuristics_matrix))
    return local_heuristics
```
