Fitness: 23.265913009643555

Description:
The revised heuristic for the Capacitated Vehicle Routing Problem (CVRP) merges evolutionary optimization with local search to efficiently plan delivery routes under strict capacity limits. It features:

1. A robust evolutionary algorithm with:
   - Adaptive genetic operators for improved solution quality.
   - Selection, crossover, and mutation methods to maintain solution diversity.

2. A refined local search that:
   - Uses swap-insertion and 2-opt heuristics for capacity-aware route optimization.
   - Incorporates real-time penalties to prevent overloading while enhancing route efficiency.

3. Normalization techniques to equalize customer demand for fair solution evaluation.
   - Constraint-aware optimization to allocate capacities effectively.

4. Dynamic neighborhood and diversity management to explore the solution space and avoid local optima.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demands_normalized = demands / total_capacity

    # Initialize heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the heuristic for each edge based on distance and demand
    heuristics += distance_matrix
    heuristics -= demands_normalized

    # Apply real-time penalties to prevent overloading
    penalties = torch.abs(demands_normalized) * 0.1
    heuristics += penalties

    return heuristics