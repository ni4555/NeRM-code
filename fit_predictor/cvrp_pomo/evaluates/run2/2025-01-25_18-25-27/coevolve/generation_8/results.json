{
  "generation": 8,
  "description": "The revised heuristic for the Capacitated Vehicle Routing Problem (CVRP) merges evolutionary optimization with local search to efficiently plan delivery routes under strict capacity limits. It features:\n\n1. A robust evolutionary algorithm with:\n   - Adaptive genetic operators for improved solution quality.\n   - Selection, crossover, and mutation methods to maintain solution diversity.\n\n2. A refined local search that:\n   - Uses swap-insertion and 2-opt heuristics for capacity-aware route optimization.\n   - Incorporates real-time penalties to prevent overloading while enhancing route efficiency.\n\n3. Normalization techniques to equalize customer demand for fair solution evaluation.\n   - Constraint-aware optimization to allocate capacities effectively.\n\n4. Dynamic neighborhood and diversity management to explore the solution space and avoid local optima.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    demands_normalized = demands / total_capacity\n\n    # Initialize heuristics matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n\n    # Calculate the heuristic for each edge based on distance and demand\n    heuristics += distance_matrix\n    heuristics -= demands_normalized\n\n    # Apply real-time penalties to prevent overloading\n    penalties = torch.abs(demands_normalized) * 0.1\n    heuristics += penalties\n\n    return heuristics",
      "fitness": 23.265913009643555,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_3.txt",
      "code_file": "coevolve\\generation_8\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    demands_normalized = demands / total_capacity\n\n    # Initialize heuristics matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n\n    # Calculate the heuristic for each edge based on distance and demand\n    # Here we use a simple heuristic: the sum of the distance and the normalized demand\n    heuristics = distance_matrix + demands_normalized\n\n    # Apply penalties for edges leading to overloading\n    # This is a simple example; more complex logic can be used\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Calculate the total demand on the route if this edge is included\n                total_demand = demands_normalized[i] + demands_normalized[j]\n                # Apply a penalty if the total demand exceeds the capacity\n                if total_demand > 1.0:\n                    heuristics[i, j] -= 1000  # Arbitrary large penalty\n\n    return heuristics",
      "fitness": 23.265913009643555,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_4.txt",
      "code_file": "coevolve\\generation_8\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    # Normalize demands\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Initialize heuristic matrix with large negative values\n    heuristic_matrix = -torch.ones_like(distance_matrix)\n    \n    # Calculate heuristic values for each edge\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Calculate heuristic based on distance and normalized demand\n                heuristic = distance_matrix[i][j] - normalized_demands[i] * normalized_demands[j]\n                heuristic_matrix[i][j] = heuristic\n    \n    return heuristic_matrix",
      "fitness": 23.265913009643555,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_5.txt",
      "code_file": "coevolve\\generation_8\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n\n    # Calculate the heuristic values based on distance and normalized demand\n    heuristic_matrix = distance_matrix * normalized_demands\n\n    # Apply penalties for edges that lead to overloading\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Assuming that the depot is at index 0 and the demand at the depot is 0\n                # The penalty is the sum of the demand at the customer node\n                penalty = demands[j]\n                heuristic_matrix[i, j] -= penalty\n\n    return heuristic_matrix",
      "fitness": 23.278629302978516,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_0.txt",
      "code_file": "coevolve\\generation_8\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    # Normalize demands by the total vehicle capacity (sum of all demands)\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n\n    # Calculate the heuristic values for each edge\n    # The heuristic is based on the normalized demand of the destination node\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # The heuristic value is negative for the depot node to encourage leaving it\n                if i == 0:\n                    heuristic_matrix[i, j] = -normalized_demands[j]\n                else:\n                    # The heuristic value is positive for customer nodes\n                    heuristic_matrix[i, j] = normalized_demands[j]\n\n    return heuristic_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_1.txt",
      "code_file": "coevolve\\generation_8\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the normalized demand\n    normalized_demand = demands / demands.sum()\n\n    # Calculate the heuristic for each edge\n    heuristics = distance_matrix * normalized_demand\n    \n    # Adjust heuristics for overloading: reduce heuristics for edges leading to overloading\n    total_demand = torch.cumsum(normalized_demand, dim=0)\n    overloading_threshold = demands.new_zeros(1).fill_(1)\n    heuristics[total_demand > 1] *= -1  # Mark overloading edges with negative heuristics\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_7.txt",
      "code_file": "coevolve\\generation_8\\code_7.py"
    }
  ]
}