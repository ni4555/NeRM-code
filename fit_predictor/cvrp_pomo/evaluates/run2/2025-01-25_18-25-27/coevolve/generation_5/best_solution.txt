Fitness: 23.265913009643555

Description:
The refined heuristic for the Capacitated Vehicle Routing Problem (CVRP) harnesses a synergistic blend of a sophisticated evolutionary algorithm and an advanced local search algorithm. This integrated approach leverages adaptive genetic operators such as fitness-probability based selection, a state-of-the-art crossover method, and a strategic mutation process to preserve diversity and avoid convergence issues. The local search component combines a refined swap-insertion heuristic with an optimized 2-opt variant, ensuring capacity constraints are respected while minimizing route lengths. A demand normalization technique facilitates equitable solution evaluation by standardizing customer demand levels. Furthermore, a constraint-aware allocation strategy is employed to optimize capacity utilization and prevent overloading. The algorithm dynamically modifies neighborhood structures and implements a responsive penalty mechanism to uphold capacity limits. This hybrid method, emphasizing the harmonious integration of evolutionary and local search techniques, ensures optimal distance efficiency and capacity adherence, providing computationally efficient and robust solutions with a focused and targeted problem-solving strategy.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize the demands by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    
    # Calculate the negative of the demand to use as a heuristic
    negative_demands = -normalized_demands
    
    # Create a matrix of ones to represent all possible edges
    edge_matrix = torch.ones_like(distance_matrix)
    
    # Subtract the negative demand from the edge distances to create a heuristic
    edge_matrix = edge_matrix * distance_matrix - negative_demands.unsqueeze(1)
    
    # Replace any negative values with zeros to indicate undesirable edges
    edge_matrix[edge_matrix < 0] = 0
    
    return edge_matrix