{
  "generation": 5,
  "description": "The refined heuristic for the Capacitated Vehicle Routing Problem (CVRP) harnesses a synergistic blend of a sophisticated evolutionary algorithm and an advanced local search algorithm. This integrated approach leverages adaptive genetic operators such as fitness-probability based selection, a state-of-the-art crossover method, and a strategic mutation process to preserve diversity and avoid convergence issues. The local search component combines a refined swap-insertion heuristic with an optimized 2-opt variant, ensuring capacity constraints are respected while minimizing route lengths. A demand normalization technique facilitates equitable solution evaluation by standardizing customer demand levels. Furthermore, a constraint-aware allocation strategy is employed to optimize capacity utilization and prevent overloading. The algorithm dynamically modifies neighborhood structures and implements a responsive penalty mechanism to uphold capacity limits. This hybrid method, emphasizing the harmonious integration of evolutionary and local search techniques, ensures optimal distance efficiency and capacity adherence, providing computationally efficient and robust solutions with a focused and targeted problem-solving strategy.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the negative of the demand to use as a heuristic\n    negative_demands = -normalized_demands\n    \n    # Create a matrix of ones to represent all possible edges\n    edge_matrix = torch.ones_like(distance_matrix)\n    \n    # Subtract the negative demand from the edge distances to create a heuristic\n    edge_matrix = edge_matrix * distance_matrix - negative_demands.unsqueeze(1)\n    \n    # Replace any negative values with zeros to indicate undesirable edges\n    edge_matrix[edge_matrix < 0] = 0\n    \n    return edge_matrix",
      "fitness": 23.265913009643555,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_4.txt",
      "code_file": "coevolve\\generation_5\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands to have a sum of 1\n    demand_sum = demands.sum()\n    normalized_demands = demands / demand_sum\n\n    # Calculate the potential cost of visiting each customer\n    # Subtracting the demand value from the distance to make higher demands more promising\n    potential_costs = distance_matrix - normalized_demands.unsqueeze(1)\n\n    # Use a penalty for high demands to avoid overloading the vehicle\n    penalty = torch.clamp(potential_costs, min=0)  # Ensure no negative values\n\n    return penalty",
      "fitness": 23.265913009643555,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_9.txt",
      "code_file": "coevolve\\generation_5\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the heuristic values\n    # The heuristic is a combination of the normalized demand and the distance\n    # We use a negative value for the distance to ensure that edges with higher distances are less promising\n    heuristics = -distance_matrix + normalized_demands.unsqueeze(1) * total_capacity\n    \n    return heuristics",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_3.txt",
      "code_file": "coevolve\\generation_5\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize customer demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Initialize a heuristics matrix with zeros\n    heuristics_matrix = torch.zeros_like(distance_matrix)\n\n    # Compute the heuristics for each edge\n    # For each edge (i, j), calculate the heuristic as:\n    # - distance(i, j) * (demands[j] / total_capacity)\n    # This heuristic is negative for undesirable edges and positive for promising ones\n    heuristics_matrix = distance_matrix * normalized_demands.unsqueeze(0)\n\n    return heuristics_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_5.txt",
      "code_file": "coevolve\\generation_5\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    vehicle_capacity = demands.sum()\n    normalized_demands = demands / vehicle_capacity\n\n    # Calculate the heuristic values\n    # For simplicity, we use a basic heuristic that is a combination of demand and distance\n    # This is a placeholder for the actual heuristic that would be implemented\n    heuristics = -normalized_demands * distance_matrix\n\n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_8.txt",
      "code_file": "coevolve\\generation_5\\code_8.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the normalized demands\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n    \n    # Calculate the heuristics\n    # For the heuristic, we will use a simple demand-based heuristic where we\n    # calculate the negative demand of the customer as it is more likely to be\n    # included in the route if the demand is high. The idea is that edges leading\n    # to customers with high demands will have a higher \"cost\" (lower heuristic value).\n    heuristic_matrix = -normalized_demands.unsqueeze(1) - normalized_demands.unsqueeze(0)\n    \n    return heuristic_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_11.txt",
      "code_file": "coevolve\\generation_5\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure that the distance matrix and demands are on the same device and tensor type\n    distance_matrix = distance_matrix.to(demands.device).to(demands.dtype)\n    demands = demands.to(distance_matrix.device).to(distance_matrix.dtype)\n\n    # Get the number of customers (excluding the depot)\n    num_customers = distance_matrix.shape[0] - 1\n\n    # Compute the total vehicle capacity\n    total_capacity = demands.sum()\n\n    # Normalize customer demands to the total vehicle capacity\n    normalized_demands = demands / total_capacity\n\n    # Compute the heuristic values for each edge\n    # The heuristic function used here is a simple one: the negative of the distance\n    # multiplied by the normalized demand of the destination node.\n    # This is a placeholder for the actual heuristic which may be more complex.\n    heuristics = -distance_matrix * normalized_demands\n\n    # Apply a demand normalization technique to ensure equitable solution evaluation\n    # Here we use the sum of the normalized demands to scale the heuristic values\n    normalized_sum = heuristics.sum(dim=1, keepdim=True)\n    heuristics /= normalized_sum\n\n    # Apply a constraint-aware allocation strategy to optimize capacity utilization\n    # and prevent overloading. This step could involve more complex logic and is\n    # simplified here for demonstration purposes.\n    # We ensure that the sum of demands in any vehicle does not exceed the capacity\n    # by clamping the sum to the total capacity.\n    vehicle_demands = heuristics.sum(dim=1, keepdim=True)\n    vehicle_demands = torch.clamp(vehicle_demands, min=0, max=total_capacity)\n\n    # Adjust the heuristic values based on the vehicle demands\n    # Here we use a simple penalty mechanism: the more the demand of a vehicle,\n    # the higher the penalty for its edges.\n    penalty = (vehicle_demands / total_capacity) * 1000  # arbitrary penalty factor\n    heuristics -= penalty\n\n    return heuristics",
      "fitness": 23.352672576904297,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_1.txt",
      "code_file": "coevolve\\generation_5\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize customer demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Initialize the heuristic matrix with high negative values for undesirable edges\n    heuristic_matrix = -torch.ones_like(distance_matrix)\n\n    # Compute the potential benefit of each edge by considering the normalized demand\n    # The benefit is inversely proportional to the demand (lower demand is better)\n    benefit_matrix = 1 / (normalized_demands + 1e-6)  # Adding a small constant to avoid division by zero\n\n    # Use the benefit matrix to update the heuristic matrix\n    # The heuristic is positive for promising edges and negative for undesirable ones\n    heuristic_matrix = distance_matrix * benefit_matrix\n\n    return heuristic_matrix",
      "fitness": 231.0624542236328,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_0.txt",
      "code_file": "coevolve\\generation_5\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the heuristic values based on normalized demands\n    # We will use a simple heuristic where the heuristic value is inversely proportional to the demand\n    # This means higher demand nodes will have lower heuristic values (undesirable edges)\n    # and lower demand nodes will have higher heuristic values (promising edges)\n    heuristic_values = 1 / (normalized_demands + 1e-8)  # Adding a small value to avoid division by zero\n\n    # The distance_matrix is used to scale the heuristic values by the distance\n    # We will assume that the distance_matrix is pre-normalized to [0, 1] range\n    # and we will use it to weight the heuristic values\n    heuristic_values = heuristic_values * distance_matrix\n\n    return heuristic_values",
      "fitness": 231.0624542236328,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_5\\stdout_2.txt",
      "code_file": "coevolve\\generation_5\\code_2.py"
    }
  ]
}