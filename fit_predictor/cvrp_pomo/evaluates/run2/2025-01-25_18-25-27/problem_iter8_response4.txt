```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n

    # Introduce a cost for each edge based on the difference from average demand
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))

    # Add a penalty for edges that are already infeasible (demands > capacity at the depot)
    infeasibility_penalty = torch.where(demands > 1, -1.0, 0.0)

    # Incorporate randomness for exploration, but only on feasible edges
    random_factor = (torch.rand(n) * 2 - 1) * (1 - (heuristics_matrix <= 0).float())

    # Combine all factors
    heuristics_matrix += random_factor + infeasibility_penalty
    return heuristics_matrix
```
