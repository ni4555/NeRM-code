```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    avg_demand = normalized_demands.sum() / n
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True) + avg_demand * distance_matrix.sum(axis=0, keepdim=True))
    
    # Introduce randomness and a penalty for infeasibilities
    penalty = torch.rand(n)
    feasible_edges = (heuristics_matrix > 0).float()
    random_factor = (torch.rand(n) * 2 - 1) * feasible_edges
    infeasibility_penalty = torch.where(heuristics_matrix <= 0, -1.0, 0.0)
    
    # Mutation process to refine the heuristics
    mutation_rate = 0.1
    mutated_heuristics = heuristics_matrix.clone()
    for i in range(n):
        for j in range(n):
            if torch.rand(1) < mutation_rate:
                mutated_heuristics[i, j] += torch.randn(1)
                # Ensure the mutated heuristic remains non-negative
                mutated_heuristics[i, j] = torch.clamp(mutated_heuristics[i, j], min=0)
    
    heuristics_matrix += random_factor + infeasibility_penalty * (1 - feasible_edges) + mutated_heuristics - heuristics_matrix
    return heuristics_matrix
```
