```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True))
    # Apply a local search heuristic to refine the heuristics
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = max(heuristics_matrix[i, j], heuristics_matrix[i, j] - (0.1 * (demands[j] / demands.sum())))
    return heuristics_matrix
```
