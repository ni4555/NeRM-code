```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Initialize a matrix to hold the heuristics with padding for the diagonal
    heuristics_matrix = torch.full((n, n), float('inf'))
    heuristics_matrix.fill_diagonal_(0)
    # Compute the heuristics matrix with a more sophisticated approach
    for i in range(n):
        for j in range(n):
            if i != j:
                # Compute the heuristic value for the edge (i, j)
                heuristics_matrix[i, j] = distance_matrix[i, j] - (normalized_demands[i] + normalized_demands[j])
    return heuristics_matrix
```
