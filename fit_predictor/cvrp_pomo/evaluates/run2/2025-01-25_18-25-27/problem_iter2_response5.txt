```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    normalized_demands = demands / demands.sum()
    heuristics_matrix = distance_matrix - (normalized_demands * distance_matrix.sum(axis=1, keepdim=True))
    penalty = (normalized_demands * distance_matrix).sum(axis=1) - 1.0
    penalty = penalty.unsqueeze(1).expand(n, n)
    heuristics_matrix += -1000 * torch.clamp(penalty, min=0)
    return heuristics_matrix
```
