```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    # Initialize the heuristics matrix with the distance matrix
    heuristics_matrix = torch.clone(distance_matrix)
    # Add a penalty for edges to the depot
    heuristics_matrix[:, 0] = torch.zeros_like(heuristics_matrix[:, 0])
    heuristics_matrix[0, :] = torch.zeros_like(heuristics_matrix[0, :])
    # Adjust the heuristics matrix based on the normalized demands
    for i in range(1, n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] += (1 - normalized_demands[j]) * distance_matrix[i, j]
    return heuristics_matrix
```
