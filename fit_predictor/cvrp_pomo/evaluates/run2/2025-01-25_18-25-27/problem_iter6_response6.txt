```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Normalize the demands
    normalized_demands = demands / demands.sum()
    # Compute the heuristics matrix using a modified version of the savings algorithm
    heuristics_matrix = distance_matrix - (normalized_demands.unsqueeze(1) * distance_matrix.sum(axis=1, keepdim=True))
    # Ensure all values are non-negative
    min_value = torch.min(heuristics_matrix)
    heuristics_matrix = heuristics_matrix + min_value
    return heuristics_matrix
```
