```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -torchOuterProduct(normalized_demands.unsqueeze(1), normalized_demands.unsqueeze(0))
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Compute the cumulative sum of the normalized demands from the depot to each node
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # Calculate a heuristic based on the cumulative demand and the inverse distance
    cumulative_demand_heuristic = torchOuterProduct(cumulative_demand.unsqueeze(1), cumulative_demand.unsqueeze(0))
    
    # Combine the demand penalty, distance heuristic, and cumulative demand heuristic
    combined_heuristic = demand_penalty + distance_heuristic + cumulative_demand_heuristic
    
    # Normalize the combined heuristic to ensure a positive scale
    combined_heuristic = combined_heuristic / combined_heuristic.max()
    
    return combined_heuristic

# Assuming a helper function to perform outer product in a vectorized way
def torchOuterProduct(a: torch.Tensor, b: torch.Tensor) -> torch.Tensor:
    # Using torch.bmm to perform the outer product of 2D tensors
    return torch.bmm(a.unsqueeze(1), b.unsqueeze(0)).squeeze(0)
```
