```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Use a non-linear transformation for demand normalization
    demand_penalty = torch.log(normalized_demands.unsqueeze(1) + 1e-6) - torch.log(normalized_demands.unsqueeze(0) + 1e-6)
    
    # Use vectorized operations for inverse distance matrix calculation
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Calculate the absolute difference in demands to balance the load
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Integrate time of day and expected traffic into a dynamic factor
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = 1 / (1 + (time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Combine heuristics with careful weight assignment to balance factors
    combined_heuristic = 0.5 * demand_penalty + 0.3 * distance_heuristic + 0.1 * load_balance * dynamic_time_factor
    
    # Introduce a diversity heuristic through small random perturbations
    diversity_factor = torch.rand(distance_matrix.shape) * 0.01 - torch.rand(distance_matrix.shape) * 0.01
    diversity_heuristic = combined_heuristic + diversity_factor
    
    # Cap the diversity factor to ensure it doesn't significantly alter the heuristics
    diversity_heuristic = torch.clamp(diversity_heuristic, min=-1, max=1)
    
    return diversity_heuristic
```
