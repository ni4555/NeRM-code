```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a dynamic factor to simulate real-time rerouting capabilities
    # This factor could be time-dependent or based on other dynamic factors
    dynamic_factor = torch.rand(distance_matrix.shape[0])
    dynamic_heuristic = (1 / (1 + dynamic_factor.unsqueeze(1) * dynamic_factor.unsqueeze(0)))
    
    # Combine the demand penalty, distance heuristic, load balance, and dynamic heuristic
    # Introduce a balancing parameter to control the influence of each heuristic
    balancing_param = torch.tensor([0.5, 0.3, 0.2])  # Example values
    combined_heuristic = (demand_penalty * balancing_param[0] +
                          distance_heuristic * balancing_param[1] +
                          load_balance * balancing_param[2] +
                          dynamic_heuristic * balancing_param[3])
    
    return combined_heuristic
```
