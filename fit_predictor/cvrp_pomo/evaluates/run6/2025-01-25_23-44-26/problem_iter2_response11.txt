```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the demand-to-distance ratio as a heuristic to penalize longer routes
    demand_to_distance_ratio = normalized_demands.unsqueeze(1) / (distance_matrix + 1e-6)
    
    # Calculate the cumulative sum of demands to account for load balancing
    cumulative_demands = torch.cumsum(normalized_demands, dim=0)
    
    # Create a load balancing factor that decreases as the cumulative demand increases
    load_balance_factor = 1 - cumulative_demands.unsqueeze(1)
    
    # Apply dynamic routing techniques by incorporating the distance matrix
    dynamic_routing_factor = 1 - (distance_matrix / distance_matrix.max())
    
    # Combine the factors to get the final heuristic values
    combined_heuristic = demand_to_distance_ratio * load_balance_factor * dynamic_routing_factor
    
    # Incorporate real-time rerouting capabilities by adding a time factor that considers
    # how frequently the route is being taken
    # Assuming that the more frequently a route is taken, the less attractive it becomes
    # Here, we use the inverse of the frequency of taking the route as the time factor
    # For simplicity, let's assume the frequency is proportional to the inverse of the distance
    frequency_factor = 1 / distance_matrix.sum(dim=1, keepdim=True)
    time_factor = 1 - frequency_factor
    
    # Final heuristic value considering all factors
    final_heuristic = combined_heuristic * time_factor
    
    return final_heuristic
```
