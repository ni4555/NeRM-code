```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Demand-based heuristic: Higher demand results in higher penalty
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Distance heuristic: Shorter distances have lower heuristic values
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Load balance heuristic: Consider the balance between node demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Time dynamics heuristic: Introduce a dynamic element to represent real-time rerouting
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine all heuristic components using a weighted sum
    # Here we use equal weights for simplicity, but in practice, these could be tuned
    combined_heuristic = demand_penalty + distance_heuristic + load_balance + time_heuristic
    
    # Normalize the combined heuristic to ensure non-negative values and scale the values
    min_val = combined_heuristic.min()
    max_val = combined_heuristic.max()
    heuristic_matrix = (combined_heuristic - min_val) / (max_val - min_val)
    
    return heuristic_matrix
```
