```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the demand difference to encourage diversity in route assignments
    demand_difference = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs() / (demands.sum(0) + 1e-6)
    
    # Introduce a diversity factor based on the demand difference
    diversity_factor = 1 / (1 + demand_difference)
    
    # Use a time factor to simulate real-time rerouting capabilities
    # Assuming a time constant for the speed of vehicles and time of day
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine factors with complementary properties to maintain proportionality
    combined_heuristic = (
        (demand_difference * diversity_factor + distance_heuristic) * load_balance * time_heuristic
    )
    
    # Normalize the combined heuristic values to ensure they sum to 1 for each row (edge)
    row_sums = combined_heuristic.sum(dim=1, keepdim=True)
    normalized_combined_heuristic = combined_heuristic / row_sums
    
    return normalized_combined_heuristic
```
