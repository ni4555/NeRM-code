```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a dynamic load balancing factor that emphasizes the difference between adjacent nodes
    # More emphasis on balancing between consecutive nodes in the route
    load_balance_adjacent = load_balance * torch.cat((torch.ones_like(load_balance), torch.zeros_like(load_balance[:-1])), dim=1)
    
    # Use a time factor to simulate real-time rerouting capabilities
    # Assuming a time constant for the speed of vehicles and time of day
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine the demand penalty, distance heuristic, load balance, and time heuristic
    # Introduce a balancing factor for the load balance to ensure it doesn't dominate the heuristic
    balancing_factor = torch.max(torch.abs(demand_penalty), torch.abs(distance_heuristic))
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * time_heuristic + load_balance_adjacent + balancing_factor
    
    return combined_heuristic
```
