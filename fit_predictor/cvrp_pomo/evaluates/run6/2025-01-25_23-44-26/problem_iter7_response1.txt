```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the inverse of the distance matrix as a heuristic
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Use a demand-based heuristic to penalize edges with high demand
    demand_heuristic = -torch.abs(torch.einsum('ij,ik->jk', normalized_demands, normalized_demands))
    
    # Introduce a load balancing heuristic by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a dynamic time factor that considers both time of day and expected traffic
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Combine the demand, distance, load balance, and dynamic time heuristics
    combined_heuristic = demand_heuristic + distance_heuristic + load_balance * dynamic_time_factor
    
    # Introduce a diversity heuristic by slightly randomizing the heuristics
    diversity_factor = torch.rand(distance_matrix.shape) * 0.01
    diversity_heuristic = combined_heuristic + diversity_factor
    
    # Normalize the heuristics to ensure non-negative values and maintain a relative scale
    max_heuristic = torch.max(torch.abs(combined_heuristic))
    normalized_heuristic = diversity_heuristic / max_heuristic
    
    return normalized_heuristic
```
