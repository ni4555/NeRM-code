```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Calculate a dynamic load balancing heuristic by adding a term that promotes load balancing
    load_balance_heuristic = (torch.abs(normalized_demands.unsqueeze(1) - normalized_demands.unsqueeze(0)) /
                              (torch.abs(normalized_demands.unsqueeze(1) - normalized_demands.unsqueeze(0)).max() + 1e-6))
    
    # Calculate the real-time rerouting capability by considering the current route distance
    # Assuming a function `current_route_distance` is available which calculates the distance of the current route
    # For the sake of this heuristic, we'll assume this function exists and returns a torch.Tensor
    real_time_rerouting = 1.0 / (current_route_distance() + 1e-6)
    
    # Combine the heuristics to get the final heuristic values
    combined_heuristic = demand_penalty + distance_heuristic + load_balance_heuristic + real_time_rerouting
    
    return combined_heuristic
```
