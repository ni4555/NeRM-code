```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the demand-to-distance ratio as a heuristic to penalize longer routes
    demand_to_distance_ratio = normalized_demands.unsqueeze(1) / (distance_matrix + 1e-6)
    
    # Calculate the cumulative sum of demands to account for load balancing
    cumulative_demands = torch.cumsum(normalized_demands, dim=0)
    
    # Create a load balancing factor that decreases as the cumulative demand increases
    load_balance_factor = 1 - cumulative_demands.unsqueeze(1)
    
    # Combine the demand-to-distance ratio and load balancing factor to get the final heuristic values
    combined_heuristic = demand_to_distance_ratio * load_balance_factor
    
    # Add a dynamic routing factor to encourage rerouting to areas with lower cumulative demand
    dynamic_routing_factor = 1 / (cumulative_demands + 1e-6)
    
    # Final heuristic values are a weighted sum of the combined heuristic and dynamic routing factor
    final_heuristic = combined_heuristic * dynamic_routing_factor
    
    return final_heuristic
```
