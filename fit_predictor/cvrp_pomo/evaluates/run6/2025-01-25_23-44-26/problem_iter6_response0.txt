```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Introduce a diversity factor to encourage exploration of different routes
    diversity_factor = (torch.rand(distance_matrix.shape[0]) - 0.5) * 2
    
    # Use a time factor to simulate real-time rerouting capabilities
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = 1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0))
    
    # Combine the demand penalty, distance heuristic, load balance, diversity factor, and time heuristic
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * time_heuristic + diversity_factor
    
    # Normalize the combined heuristic to ensure all values are in the same scale
    combined_heuristic = combined_heuristic / combined_heuristic.sum()
    
    return combined_heuristic
```
