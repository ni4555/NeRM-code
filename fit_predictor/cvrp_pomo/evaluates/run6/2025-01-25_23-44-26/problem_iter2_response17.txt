```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Iterate over all pairs of nodes (excluding the depot)
    for i in range(1, len(distance_matrix)):
        for j in range(1, len(distance_matrix)):
            # Calculate the sum of demands from the current node to the destination
            demand_sum = (normalized_demands[i] + normalized_demands[j]).clamp(min=0)
            
            # Calculate the heuristic value for the edge
            heuristic_value = torch.log1p(-demand_sum * distance_matrix[i, j])
            
            # Assign the heuristic value to the edge in the heuristic matrix
            heuristic_matrix[i, j] = heuristic_value
    
    # Apply local normalization to ensure non-negative values and scale the values
    min_val = heuristic_matrix.min()
    max_val = heuristic_matrix.max()
    heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    return heuristic_matrix
```
