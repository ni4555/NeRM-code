```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Calculate cumulative demand to account for load balancing
    cumulative_demands = torch.cumsum(normalized_demands, dim=0)
    
    # Create a load balancing factor that decreases as cumulative demand increases
    load_balance_factor = 1 - cumulative_demands.unsqueeze(1)
    
    # Calculate the load heuristic (lighter loads are better)
    load_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Use a time factor to simulate real-time rerouting capabilities
    time_constant = torch.rand(distance_matrix.shape[0]) * 100  # Randomly assign time constants
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Introduce a diversity heuristic that promotes routing variation
    diversity_penalty = (torch.mean(distance_matrix, dim=1) + torch.mean(distance_matrix, dim=0)) * (1 / (distance_matrix + 1e-6))
    
    # Weights for different heuristics
    weights = torch.tensor([0.2, 0.4, 0.2, 0.2], dtype=torch.float32)
    
    # Combine heuristics and penalties, emphasizing different aspects
    combined_heuristic = (
        weights[0] * -torch.prod(normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0), dim=0) +
        weights[1] * distance_heuristic +
        weights[2] * load_balance_factor * load_heuristic +
        weights[3] * time_heuristic +
        weights[4] * diversity_penalty
    )
    
    return combined_heuristic
```
