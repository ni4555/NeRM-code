```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a dynamic time factor that considers both time of day and expected traffic
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Introduce a diversity heuristic by slightly randomizing the heuristics
    diversity_factor = torch.rand(distance_matrix.shape) * 0.01
    diversity_heuristic = torch.clamp(combined_heuristic + diversity_factor, min=0)
    
    # Introduce a non-linear transformation to the heuristic values
    non_linear_transform = torch.log1p(torch.abs(combined_heuristic))
    
    # Balance the weights of the different heuristics
    weight_demand = 0.2
    weight_distance = 0.5
    weight_load_balance = 0.1
    weight_dynamic_time = 0.1
    weight_diversity = 0.1
    
    balanced_heuristic = (weight_demand * demand_penalty +
                          weight_distance * distance_heuristic +
                          weight_load_balance * load_balance +
                          weight_dynamic_time * dynamic_time_factor +
                          weight_diversity * diversity_heuristic +
                          weight_diversity * non_linear_transform)
    
    return balanced_heuristic
```
