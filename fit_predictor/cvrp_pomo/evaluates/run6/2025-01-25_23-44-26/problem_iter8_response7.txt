```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the demand heuristic with penalties for high demand edges
    demand_penalty = -torch.abs(normalized_demands.unsqueeze(1) - normalized_demands.unsqueeze(0))
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = torch.abs(demands.unsqueeze(1) - demands.unsqueeze(0))
    
    # Use a dynamic time factor that considers both time of day and expected traffic
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = torch.exp(-time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) - traffic_factor)
    
    # Introduce a diversity heuristic by slightly randomizing the heuristics
    diversity_factor = torch.rand(distance_matrix.shape) * 0.01
    
    # Combine the demand penalty, distance heuristic, load balance, dynamic time factor, and diversity heuristic
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * dynamic_time_factor + diversity_factor
    
    # Normalize the heuristics to ensure they are balanced and do not dominate each other
    heuristic_sum = combined_heuristic.sum(dim=1, keepdim=True)
    normalized_combined_heuristic = combined_heuristic / heuristic_sum
    
    return normalized_combined_heuristic
```
