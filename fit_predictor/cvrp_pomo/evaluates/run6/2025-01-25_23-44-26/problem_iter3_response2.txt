```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Integrate demand by considering the potential of edges based on the difference in demand
    demand_potential = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a penalty for edges with high potential (to avoid high demand)
    demand_penalty = -0.5 * (demand_potential > 1).float() * demand_potential
    
    # Vectorize the calculation of heuristic by considering inverse distance
    # We use a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Vectorize load balancing algorithm by balancing the load between nodes
    load_balance = torch.abs(normalized_demands.unsqueeze(1) - normalized_demands.unsqueeze(0))
    
    # Introduce diversity by ensuring a penalty for edges that are similar in terms of distance
    diversity_penalty = (distance_matrix.sum(axis=1) + distance_matrix.sum(axis=0)).unsqueeze(1) + \
                         (distance_matrix.sum(axis=1) + distance_matrix.sum(axis=0)).unsqueeze(0)
    diversity_penalty = diversity_penalty * (1 / (1 + distance_matrix + 1e-6))
    
    # Use a time factor to simulate real-time rerouting capabilities
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine all heuristics with appropriate weights
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * time_heuristic + diversity_penalty
    
    return combined_heuristic
```
