```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a dynamic time factor that considers both time of day and expected traffic
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Combine the demand penalty, distance heuristic, load balance, and dynamic time heuristic
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * dynamic_time_factor
    
    # Introduce a diversity heuristic by using a non-linear transformation to increase variance
    non_linear_transform = torch.sqrt(combined_heuristic + 1e-6)
    
    # Introduce a balance weight to ensure that no single heuristic dominates the others
    balance_weight = torch.rand(distance_matrix.shape)
    balanced_heuristic = balance_weight * non_linear_transform
    
    return balanced_heuristic
```
