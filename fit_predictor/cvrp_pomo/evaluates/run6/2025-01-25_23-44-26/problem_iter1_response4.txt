```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Integrate dynamic routing techniques by considering the current load of each vehicle
    # We assume there are 'num_vehicles' available, which can be a parameter or calculated
    num_vehicles = demands.size(0) - 1
    vehicle_loads = torch.zeros(num_vehicles)
    
    # Simulate the load distribution
    for i in range(num_vehicles):
        vehicle_loads[i] = torch.dot(distance_matrix[i], normalized_demands)
    
    # Calculate the load-based heuristic
    load_heuristic = 1 / (vehicle_loads + 1e-6)
    
    # Calculate the load balance penalty to encourage equal load distribution
    load_balance_penalty = (vehicle_loads - vehicle_loads.mean()).abs()
    
    # Combine the demand penalty, distance heuristic, load heuristic, and load balance penalty
    combined_heuristic = demand_penalty + distance_heuristic + load_heuristic + load_balance_penalty
    
    return combined_heuristic
```
