```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Calculate the load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a time factor to simulate real-time rerouting capabilities
    # Assuming a time constant for the speed of vehicles and time of day
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine the distance heuristic, load balance, and time heuristic with a weight for each factor
    # Weights are adjusted for experimentation and can be tuned
    distance_weight = 0.5
    load_balance_weight = 0.3
    time_weight = 0.2
    
    combined_heuristic = distance_weight * distance_heuristic + load_balance_weight * load_balance * time_heuristic
    
    return combined_heuristic
```
