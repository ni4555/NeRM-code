```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -torch.prod(normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0), dim=0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Calculate the cumulative sum of demands to account for load balancing
    cumulative_demands = torch.cumsum(normalized_demands, dim=0)
    
    # Create a load balancing factor that decreases as the cumulative demand increases
    load_balance_factor = 1 - cumulative_demands.unsqueeze(1)
    
    # Calculate the load heuristic (lighter loads are better)
    load_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Apply dynamic routing by incorporating load penalties
    load_penalty = load_balance_factor * (1 - normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0))
    
    # Combine the heuristics and penalties to get the final heuristic values
    combined_heuristic = demand_penalty + distance_heuristic + load_heuristic + load_penalty
    
    return combined_heuristic
```
