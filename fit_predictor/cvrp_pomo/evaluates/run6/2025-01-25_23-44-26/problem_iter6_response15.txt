```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a time factor to simulate real-time rerouting capabilities
    time_constant = torch.rand(distance_matrix.shape[0]) * 100  # Randomly assign time constants
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Weigh the factors based on their importance for the problem specifics
    weight_demand = 0.5
    weight_distance = 0.4
    weight_load_balance = 0.3
    weight_time = 0.2
    
    # Combine the weighted factors
    combined_heuristic = (
        weight_demand * demand_penalty +
        weight_distance * distance_heuristic +
        weight_load_balance * load_balance +
        weight_time * time_heuristic
    )
    
    # Normalize the combined heuristic
    combined_heuristic = combined_heuristic / combined_heuristic.sum()
    
    # Ensure that the heuristic values are within a reasonable range
    combined_heuristic = torch.clamp(combined_heuristic, min=-1.0, max=1.0)
    
    return combined_heuristic
```
