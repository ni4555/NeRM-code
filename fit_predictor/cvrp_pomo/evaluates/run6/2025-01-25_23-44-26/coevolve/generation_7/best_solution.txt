Fitness: 49.78913116455078

Description:
Develop an advanced heuristic for the Capacitated Vehicle Routing Problem (CVRP) that leverages normalization to homogenize demand and distance metrics. The heuristic employs a hybrid approach, initially using an Inverse Distance heuristic for customer assignment, then integrating a demand-penalty mechanism to deter overloading vehicles. To enhance route quality, the algorithm incorporates a Genetic Algorithm (GA) for iterative refinement, Simulated Annealing (SA) to evade local minima, and Ant Colony Optimization (ACO) to uncover optimal paths. The system must be equipped with a robust real-time rerouting capability that swiftly adjusts vehicle assignments and routes in response to evolving customer demands and vehicle capacities within a stringent response time limit. The primary objective is to minimize the total travel distance, adhere to capacity limits, and ensure a scalable and responsive solution for fluctuating CVRP scenarios.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demands_normalized = demands / total_capacity
    
    # Inverse Distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-10)  # Adding a small value to avoid division by zero
    
    # Demand-penalty mechanism
    demand_penalty = demands_normalized - demands_normalized.min()
    
    # Combine heuristics
    combined_heuristic = inverse_distance * demand_penalty
    
    return combined_heuristic