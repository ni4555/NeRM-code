{
  "generation": 9,
  "description": "Develop a comprehensive heuristic-based solution for the Capacitated Vehicle Routing Problem (CVRP) that incorporates advanced normalization techniques for demand and distance to ensure uniformity across the problem instance. Implement a multi-faceted approach that begins with an Inverse Distance Heuristic (IDH) for initial customer distribution to vehicles, followed by a demand-sensitive penalty mechanism to prevent overloading of vehicles close to their capacity limits. Augment the initial solution through an iterative Genetic Algorithm (GA) process, which incorporates sophisticated crossover and mutation strategies for enhanced route optimization. Further optimize the routes by applying a Simulated Annealing (SA) algorithm to explore potential solutions beyond local optima, and integrate Ant Colony Optimization (ACO) to discover efficient traversal paths. The final solution must incorporate a dynamic rerouting system capable of swiftly adapting to real-time fluctuations in customer demand and vehicle availability, ensuring an agile and continuously optimized vehicle routing strategy.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure that the demands are normalized by the total vehicle capacity\n    vehicle_capacity = demands.max()\n    normalized_demands = demands / vehicle_capacity\n\n    # Initialize the heuristics matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n\n    # Calculate the inverse distance heuristic\n    heuristics = -distance_matrix\n\n    # Incorporate demand-sensitive penalty mechanism\n    # We add a penalty for edges that are close to the vehicle capacity limit\n    demand_penalty = 0.1 * (1 - normalized_demands)\n    heuristics += demand_penalty\n\n    return heuristics",
      "fitness": 49.7680778503418,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_11.txt",
      "code_file": "coevolve\\generation_9\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the inverse of the distance matrix\n    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Add a small value to avoid division by zero\n    \n    # Normalize the demands by the sum of all demands to get the capacity load per customer\n    demand_ratio = demands / demands.sum()\n    \n    # Compute the heuristics by combining inverse distance and demand-sensitive ratio\n    heuristics = -inv_distance_matrix * demand_ratio\n    \n    # Clip negative values to a very small number to represent undesirable edges\n    heuristics = torch.clamp(heuristics, min=-1e-8)\n    \n    return heuristics",
      "fitness": 49.88407897949219,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_1.txt",
      "code_file": "coevolve\\generation_9\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands to be between 0 and 1\n    total_demand = demands.sum()\n    normalized_demands = demands / total_demand\n\n    # Calculate the inverse distance heuristic\n    inv_distance = 1 / (distance_matrix + 1e-8)  # Add a small constant to avoid division by zero\n\n    # Combine inverse distance with normalized demands\n    heuristics = inv_distance * normalized_demands\n\n    # Apply a demand-sensitive penalty mechanism to prevent overloading\n    demand_penalty = demands / (demands.sum() + 1e-8)  # Avoid division by zero\n    heuristics *= demand_penalty\n\n    return heuristics",
      "fitness": 49.88407897949219,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_3.txt",
      "code_file": "coevolve\\generation_9\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Inverse Distance Heuristic (IDH)\n    # Normalize the distance matrix to get a uniform scale\n    distance_matrix = distance_matrix / distance_matrix.max()\n    \n    # Add a penalty for high demand, using a simple inverse relationship\n    demand_penalty = 1 / (demands + 1e-6)  # Add a small constant to avoid division by zero\n    \n    # Combine the inverse distance and demand penalties\n    heuristic_matrix = -distance_matrix + demand_penalty\n    \n    # Normalize the heuristic matrix to get a uniform scale for edge evaluation\n    heuristic_matrix = heuristic_matrix / heuristic_matrix.max()\n    \n    return heuristic_matrix",
      "fitness": 49.901893615722656,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_10.txt",
      "code_file": "coevolve\\generation_9\\code_10.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure demands are normalized\n    total_capacity = demands.sum()\n    demands = demands / total_capacity\n    \n    # Inverse Distance Heuristic (IDH)\n    # Calculate the inverse distance for each edge\n    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Demand-sensitive penalty mechanism\n    # Calculate the demand-based penalty for each edge\n    demand_penalty = demands.unsqueeze(1) * demands.unsqueeze(0)\n    \n    # Combine IDH and demand penalty to get the heuristic values\n    heuristics = inverse_distance - demand_penalty\n    \n    return heuristics",
      "fitness": 50.694759368896484,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_0.txt",
      "code_file": "coevolve\\generation_9\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Inverse Distance Heuristic (IDH) - the heuristic function will be inversely proportional to the distance\n    # and will also consider the demand. The demand-sensitive penalty mechanism will be incorporated here.\n    \n    # Calculate the inverse of the distance matrix (edges with higher distance will have lower weights)\n    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Normalize the demand vector by the total vehicle capacity (assuming the capacity is 1 for simplicity)\n    normalized_demands = demands / demands.sum()\n    \n    # Create a matrix that combines the inverse distance and the demand normalization\n    # The demand-sensitive penalty will be a linear combination of the normalized demand and the inverse distance\n    # We use a penalty factor to control how much we penalize high demands\n    penalty_factor = 1.0\n    heuristic_matrix = inv_distance_matrix * (1 + penalty_factor * normalized_demands)\n    \n    return heuristic_matrix",
      "fitness": 50.72380447387695,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_5.txt",
      "code_file": "coevolve\\generation_9\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the inverse distance heuristic\n    # The inverse distance is a simple heuristic that encourages routes to use\n    # edges with shorter distances.\n    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Incorporate demand sensitivity into the heuristic\n    # A demand-sensitive penalty mechanism is applied to edges leading to\n    # customers with high demand, which discourages overloading vehicles.\n    demand_penalty = -demands * (1 / (1 + demands))  # Demand penalty function\n    \n    # Combine the inverse distance and demand penalty to form the final heuristic\n    combined_heuristic = inverse_distance + demand_penalty\n    \n    return combined_heuristic",
      "fitness": 50.95594787597656,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_9.txt",
      "code_file": "coevolve\\generation_9\\code_9.py"
    },
    {
      "code": "import torch\nimport numpy as np\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure the input is in the correct shape and type\n    if not (isinstance(distance_matrix, torch.Tensor) and isinstance(demands, torch.Tensor)):\n        raise ValueError(\"Both distance_matrix and demands should be torch.Tensor objects.\")\n    \n    # Normalize demands by the total vehicle capacity\n    vehicle_capacity = demands.sum() / len(demands)\n    normalized_demands = demands / vehicle_capacity\n    \n    # Initialize the heuristic matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n    \n    # Apply Inverse Distance Heuristic (IDH) for the heuristic matrix\n    # We use a simple inverse distance as the heuristic value\n    # In a real-world scenario, this should be combined with demand normalization\n    heuristics = 1.0 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    \n    # Incorporate a demand-sensitive penalty mechanism\n    # Increase the heuristic value for edges that lead to overloading\n    for i in range(len(demands)):\n        for j in range(len(demands)):\n            if i != j:\n                # If adding this customer to the vehicle would cause it to overload\n                if normalized_demands[i] + normalized_demands[j] > 1.0:\n                    heuristics[i, j] *= 1.5  # Increase the penalty by 50%\n    \n    return heuristics",
      "fitness": 52.05217361450195,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_4.txt",
      "code_file": "coevolve\\generation_9\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure the demands are normalized by the total vehicle capacity\n    total_capacity = demands.sum()\n    if total_capacity == 0:\n        raise ValueError(\"Total vehicle capacity must be non-zero.\")\n    normalized_demands = demands / total_capacity\n\n    # Compute the inverse distance heuristic\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n\n    # Compute the demand-sensitive penalty (the penalty is inversely proportional to the normalized demand)\n    demand_penalty = 1 / (normalized_demands + 1e-6)  # Adding a small constant to avoid division by zero\n\n    # Combine the heuristics by taking a weighted sum\n    # Weigh the demand penalty by a factor to balance it against the inverse distance heuristic\n    demand_penalty_factor = 0.5  # This factor can be adjusted\n    combined_heuristic = inverse_distance * demand_penalty_factor + demand_penalty * (1 - demand_penalty_factor)\n\n    return combined_heuristic\n\n# Example usage:\n# distance_matrix = torch.tensor([[0, 1, 2, 3], [1, 0, 4, 5], [2, 4, 0, 6], [3, 5, 6, 0]], dtype=torch.float32)\n# demands = torch.tensor([1, 2, 1, 2], dtype=torch.float32)\n# heuristics = heuristics_v2(distance_matrix, demands)\n# print(heuristics)",
      "fitness": 530.4158325195312,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_6.txt",
      "code_file": "coevolve\\generation_9\\code_6.py"
    }
  ]
}