```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the demand penalty for each edge
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Calculate the load balancing factor
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Calculate the dynamic routing factor based on current vehicle loads
    # Assuming the vehicles are currently assigned to routes with given loads
    vehicle_loads = torch.rand(distance_matrix.shape[0])  # Placeholder for actual vehicle loads
    dynamic_factor = (1 / (1 + vehicle_loads.unsqueeze(1) * vehicle_loads.unsqueeze(0)))
    
    # Calculate the time factor considering time of day
    time_of_day = torch.rand(distance_matrix.shape[0])  # Placeholder for actual time of day
    time_heuristic = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0)))
    
    # Combine the heuristics with a balanced weight
    combined_heuristic = demand_penalty * 0.3 + distance_heuristic * 0.4 + load_balance * 0.2 + dynamic_factor * 0.1 + time_heuristic * 0.1
    
    return combined_heuristic
```
