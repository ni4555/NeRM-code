```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the demand penalty by penalizing high demand edges
    demand_penalty = -torch.clamp(normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0), min=-1.0)
    
    # Calculate the inverse of the distance matrix as a heuristic
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Simulate time of day and traffic factor
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Combine the heuristics with normalization
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * dynamic_time_factor
    
    # Introduce randomness with a controlled factor for diversity
    random_factor = torch.rand(distance_matrix.shape) * 0.1 - 0.05
    diversity_heuristic = combined_heuristic + random_factor
    
    # Apply a non-linear transformation to amplify the impact of certain factors
    heuristics_non_linear = torch.log1p(torch.exp(diversity_heuristic))
    
    # Normalize the heuristics to ensure they are within a certain range
    heuristics_normalized = (heuristics_non_linear - heuristics_non_linear.min()) / (heuristics_non_linear.max() - heuristics_non_linear.min())
    
    return heuristics_normalized
```
