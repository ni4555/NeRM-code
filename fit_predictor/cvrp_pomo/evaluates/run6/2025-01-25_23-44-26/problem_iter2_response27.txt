```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -torch.sqrt(normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0))
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Introduce a dynamic load balancing factor that decreases as the cumulative demand increases
    cumulative_demands = torch.cumsum(normalized_demands, dim=0)
    dynamic_load_balance = 1 - (cumulative_demands.unsqueeze(1) - 0.5)
    
    # Use a time factor to simulate real-time rerouting capabilities
    # Assuming a time constant for the speed of vehicles and time of day
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine the heuristics with appropriate weights
    combined_heuristic = demand_penalty * 0.2 + distance_heuristic * 0.4 + load_balance * 0.2 + dynamic_load_balance * 0.1 + time_heuristic * 0.1
    
    return combined_heuristic
```
