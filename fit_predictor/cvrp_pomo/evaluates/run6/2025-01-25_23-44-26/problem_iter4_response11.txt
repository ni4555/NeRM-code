```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -torch.prod(normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0), dim=0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Calculate the cumulative sum of demands to account for load balancing
    cumulative_demands = torch.cumsum(normalized_demands, dim=0)
    
    # Create a load balancing factor that decreases as the cumulative demand increases
    load_balance_factor = 1 - cumulative_demands.unsqueeze(1)
    
    # Calculate the load heuristic (lighter loads are better)
    load_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Use a time factor to simulate real-time rerouting capabilities
    time_constant = torch.rand(distance_matrix.shape[0]) * 100  # Randomly assign time constants
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine the heuristics and penalties to get the final heuristic values
    # Apply different weights to emphasize different aspects
    weight_demand = 0.5
    weight_distance = 0.3
    weight_load_balance = 0.1
    weight_time = 0.1
    
    combined_heuristic = (
        weight_demand * demand_penalty +
        weight_distance * distance_heuristic +
        weight_load_balance * load_balance_factor +
        weight_time * time_heuristic
    )
    
    return combined_heuristic
```
