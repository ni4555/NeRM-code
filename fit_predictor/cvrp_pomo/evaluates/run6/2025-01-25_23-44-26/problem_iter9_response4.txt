```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the demand penalty with a focus on balancing the load more evenly
    load_balance_factor = 0.5
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0) * load_balance_factor
    
    # Calculate the inverse of the distance matrix as a heuristic, with a non-linear transformation
    distance_heuristic = torch.log(distance_matrix + 1e-6)
    
    # Introduce randomness to escape local optima while maintaining some diversity
    randomness_factor = torch.rand(distance_matrix.shape) * 0.01
    distance_heuristic += randomness_factor
    
    # Use a load balancing factor that considers the deviation from the average demand
    average_demand = demands.mean()
    load_balance = (demands.unsqueeze(1) - average_demand.unsqueeze(0)).abs()
    
    # Integrate a dynamic routing technique that considers a time factor
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Combine the heuristics with a careful balance of penalties and heuristics
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * dynamic_time_factor
    
    # Normalize the combined heuristic to maintain a consistent scale
    combined_heuristic = combined_heuristic / combined_heuristic.sum()
    
    return combined_heuristic
```
