```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Implement a more balanced heuristic by combining normalized demands and distance
    demand_weight = torch.clamp(1 - normalized_demands, min=0)  # Prevent negative weights
    balanced_heuristic = demand_weight * distance_heuristic
    
    # Introduce a dynamic load balancing algorithm by using the variance of demands
    load_balance = torch.var(demands) * demand_weight
    
    # Integrate real-time rerouting by considering time of day and traffic conditions
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Combine the heuristics, emphasizing distance and load balance, and introduce randomness for diversity
    combined_heuristic = distance_heuristic + load_balance * dynamic_time_factor
    randomness = torch.rand(distance_matrix.shape) * 0.1 - 0.05  # Slightly negative for diversity
    diversity_heuristic = combined_heuristic + randomness
    
    # Non-linear transformation to emphasize the importance of the combined heuristic
    heuristics_non_linear = torch.relu(diversity_heuristic)
    
    # Normalize the heuristics to prevent one factor from dominating
    normalized_heuristics = heuristics_non_linear / heuristics_non_linear.sum()
    
    return normalized_heuristics
```
