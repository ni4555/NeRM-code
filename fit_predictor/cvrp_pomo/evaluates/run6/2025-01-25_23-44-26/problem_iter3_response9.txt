```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Introduce a diversity factor that penalizes edges with similar demand
    diversity_factor = torch.abs(1 - normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0))
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Integrate a dynamic routing factor that adapts to real-time data
    # Assuming a time constant for the speed of vehicles and time of day
    time_constant = torch.rand(distance_matrix.shape[0])
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine the heuristics with a weighted sum to balance their influence
    combined_heuristic = (distance_heuristic * 0.4 +
                          diversity_factor * 0.2 +
                          load_balance * 0.3 +
                          time_heuristic * 0.1)
    
    return combined_heuristic
```
