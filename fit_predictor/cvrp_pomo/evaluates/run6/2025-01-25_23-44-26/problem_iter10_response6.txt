```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the penalty for high demand edges
    demand_penalty = -torch.abs(normalized_demands.unsqueeze(1) - normalized_demands.unsqueeze(0))
    
    # Use the inverse of the distance matrix as a heuristic
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Implement load balancing by considering the difference in demands
    load_balance = torch.abs(demands.unsqueeze(1) - demands.unsqueeze(0))
    
    # Incorporate dynamic routing with a time of day and traffic factor
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = torch.exp(-time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) - traffic_factor)
    
    # Combine the demand penalty, distance heuristic, load balance, and dynamic time heuristic
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * dynamic_time_factor
    
    # Introduce controlled randomness to promote diversity in routing
    diversity_factor = torch.rand(distance_matrix.shape) * 0.01
    diversity_heuristic = combined_heuristic + diversity_factor
    
    # Normalize the heuristics to ensure balance and prevent domination of any heuristic
    heuristic_sum = combined_heuristic.sum(dim=1, keepdim=True)
    normalized_diversity_heuristic = diversity_heuristic / heuristic_sum
    
    # Ensure non-negative heuristics to avoid invalidating the search
    normalized_diversity_heuristic = torch.clamp(normalized_diversity_heuristic, min=0)
    
    return normalized_diversity_heuristic
```
