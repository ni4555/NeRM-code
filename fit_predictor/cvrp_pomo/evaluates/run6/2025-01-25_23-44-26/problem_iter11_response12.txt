```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the demand penalty using a weighted sum of demands
    demand_penalty = -torch.sum(normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0), dim=2)
    
    # Calculate the inverse of the distance matrix as a heuristic
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Introduce a dynamic routing factor that includes time of day and expected traffic
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1
    dynamic_routing_factor = torch.exp(-time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) * traffic_factor)
    
    # Combine the demand penalty, distance heuristic, load balance, and dynamic routing factor
    combined_heuristic = demand_penalty + distance_heuristic + load_balance * dynamic_routing_factor
    
    # Introduce randomness with a controlled factor to avoid local optima
    random_factor = torch.rand(distance_matrix.shape) * 0.1 - 0.05
    diversity_heuristic = combined_heuristic + random_factor
    
    # Normalize the heuristic values to ensure consistency
    normalized_heuristics = diversity_heuristic / (torch.sum(torch.abs(diversity_heuristic), dim=1, keepdim=True) + 1e-6)
    
    # Apply a non-linear transformation to emphasize certain factors
    heuristics_non_linear = torch.relu(normalized_heuristics)
    
    return heuristics_non_linear
```
