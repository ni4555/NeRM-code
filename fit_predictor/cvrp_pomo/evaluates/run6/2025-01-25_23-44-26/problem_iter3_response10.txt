```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Create a matrix of all pairs of demands to calculate load balancing
    demand_diff = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Create a diversity factor to encourage exploration of different routes
    diversity_factor = torch.abs(torch.rand(distance_matrix.shape[0]))
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = 1 / (distance_matrix + 1e-6)
    
    # Use a dynamic time factor to simulate real-time rerouting capabilities
    time_constant = torch.rand(distance_matrix.shape[0])  # Time factor can be more complex in real scenarios
    time_heuristic = (1 / (1 + time_constant.unsqueeze(1) * time_constant.unsqueeze(0)))
    
    # Combine the demand penalty, distance heuristic, load balance, diversity factor, and time heuristic
    combined_heuristic = (
        -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)  # Demand penalty
        + distance_heuristic  # Distance heuristic
        + demand_diff * diversity_factor  # Load balance and diversity
        + time_heuristic  # Time heuristic
    )
    
    return combined_heuristic
```
