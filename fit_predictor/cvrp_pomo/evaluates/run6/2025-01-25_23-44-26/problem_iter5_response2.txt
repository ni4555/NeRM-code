```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs() * 0.1  # Scaled down for balance
    
    # Use dynamic routing techniques by incorporating a dynamic factor based on historical data
    dynamic_factor = torch.rand(distance_matrix.shape[0]) * 0.2  # Random factor to simulate dynamic data
    dynamic_heuristic = (1 / (1 + dynamic_factor.unsqueeze(1) * dynamic_factor.unsqueeze(0)))
    
    # Combine the demand penalty, distance heuristic, load balance, and dynamic heuristic
    combined_heuristic = demand_penalty + distance_heuristic + load_balance + dynamic_heuristic
    
    # Apply a penalty for edges that are part of the shortest path to the depot to avoid deadlocks
    shortest_path_penalty = -torch.min(distance_matrix, dim=1)[0].unsqueeze(1)
    combined_heuristic += shortest_path_penalty
    
    return combined_heuristic
```
