```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the inverse of the distance matrix as a heuristic
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Use a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Apply a non-linear transformation to the demand for each edge
    demand_transform = torch.log1p(normalized_demands)  # log(1 + demand) to penalize larger demands
    
    # Incorporate a dynamic time factor that considers both time of day and expected traffic
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Combine the heuristics with a weighted sum
    weights = torch.tensor([0.3, 0.5, 0.1, 0.1], dtype=torch.float32)  # Example weights
    combined_heuristic = weights[0] * demand_transform + weights[1] * distance_heuristic + \
                         weights[2] * load_balance * dynamic_time_factor + \
                         weights[3] * (distance_heuristic - distance_heuristic.mean())
    
    # Introduce a diversity heuristic by slightly randomizing the heuristics
    diversity_factor = torch.rand(distance_matrix.shape) * 0.01
    diversity_heuristic = combined_heuristic + diversity_factor
    
    return diversity_heuristic
```
