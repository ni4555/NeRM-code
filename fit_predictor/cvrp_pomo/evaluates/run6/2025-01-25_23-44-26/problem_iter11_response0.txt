```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized demands
    normalized_demands = demands / demands.sum()
    
    # Calculate the negative of the demand for each edge to penalize high demand edges
    demand_penalty = -normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0)
    
    # Calculate the inverse of the distance matrix as a heuristic (shorter distances are better)
    # Note: We add a small constant to avoid division by zero
    distance_heuristic = torch.inverse(distance_matrix + 1e-6)
    
    # Add a load balancing factor by considering the difference between demands
    load_balance = (demands.unsqueeze(1) - demands.unsqueeze(0)).abs()
    
    # Use a dynamic time factor that considers both time of day and expected traffic
    time_of_day = torch.rand(distance_matrix.shape[0]) * 24  # Simulate different hours of the day
    traffic_factor = torch.rand(distance_matrix.shape[0]) * 2 - 1  # Simulate expected traffic (0-1 range)
    dynamic_time_factor = (1 / (1 + time_of_day.unsqueeze(1) * time_of_day.unsqueeze(0) + traffic_factor))
    
    # Combine heuristics in a weighted manner to balance domain insights and perturb diversity
    weighted_combined_heuristic = 0.4 * demand_penalty + 0.2 * distance_heuristic + \
                                  0.3 * load_balance * dynamic_time_factor + 0.1 * torch.relu(torch.rand(distance_matrix.shape) - 0.5)
    
    # Normalize the combined heuristics to ensure consistent weights
    normalized_heuristics = weighted_combined_heuristic / weighted_combined_heuristic.norm(p=1)
    
    # Penalize undesirable edges by setting a threshold
    undesirable_threshold = 0.5
    heuristics_thresholded = torch.where(weighted_combined_heuristic < -undesirable_threshold, -undesirable_threshold, weighted_combined_heuristic)
    
    return heuristics_thresholded
```
