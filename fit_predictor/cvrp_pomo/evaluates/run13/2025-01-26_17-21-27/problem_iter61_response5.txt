```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Modularized distance penalty with emphasis on early detection of high costs
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_penalty *= (1 + 0.2 * cumulative_demand / total_capacity)
    
    # Dynamic capacity penalty with modularized scaling
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity)
    
    # Early overflow detection with immediate penalty
    early_overflow_penalty = torch.where(
        cumulative_demand > total_capacity_vector,
        -torch.log1p(cumulative_demand - total_capacity_vector - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with modularized balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with demand-aware diversity control
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Integrate demand-aware features with modularized penalties
    heuristics = (
        distance_penalty +
        dynamic_capacity_penalty +
        early_overflow_penalty +
        load_balance_penalty
    )
    
    # Apply scaling factors for core objectives
    scaling_factor = 2.0
    heuristics *= scaling_factor
    
    # Modularize time-adaptive factors to cap randomness and avoid overfitting
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    heuristics *= time_factor
    
    # Add randomness factor with controlled impact
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += randomness_factor
    
    # Introduce time-adaptive diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Adjust heuristics based on early overflow and imbalance
    heuristics *= (1 + (cumulative_demand > total_capacity_vector).float())
    heuristics += diversity_factor
    
    return heuristics
```
