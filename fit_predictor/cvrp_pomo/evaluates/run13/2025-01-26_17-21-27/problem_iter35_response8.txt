```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = distance_penalty * (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with a diversity approach to avoid local optima
    diversity_factor = torch.randn(n)
    load_balance = torch.abs(cumulative_demand - total_capacity / n) + diversity_factor
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Apply adaptive scaling for heuristics and penalties
    adaptive_scaling = (total_capacity - cumulative_demand) / total_capacity
    heuristics = distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty
    
    # Adjust scaling based on the proximity to overflow and the balance of the load
    heuristics *= (1 + adaptive_scaling * torch.cos(torch.acos(torch.min(torch.abs(heuristics), dim=1).values) / (2 * n)))
    
    # Additional diversity in penalty application
    heuristics += torch.randn(n, n) * (1 - heuristics.abs().max() / heuristics.abs().sum())
    
    return heuristics
```
