```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Use a dynamic load balance factor to encourage vehicles to be utilized more evenly
    load_balance_factor = (cumulative_demand / total_capacity - 0.5) * 2
    
    # Implement a domain-specific heuristic based on customer demand distribution
    demand_diff = torch.abs(demands - demands.mean())
    demand_based_heuristic = -torch.log1p(demand_diff - 1e-8) * (1 + load_balance_factor)
    
    # Introduce a time-adaptive scaling to the distance heuristic
    distance_heuristic = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_heuristic *= time_factor
    
    # Integrate a capacity-based heuristic that penalizes overflows early
    capacity_heuristic = -torch.log1p(torch.abs(demands - (total_capacity / n)))
    early_overflow = cumulative_demand > total_capacity / n
    capacity_heuristic *= (1 + early_overflow)
    
    # Combine heuristics with controlled randomness
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Final heuristic with balancing exploration and exploitation
    heuristics = (
        0.6 * distance_heuristic + 0.3 * capacity_heuristic + 
        0.1 * demand_based_heuristic + randomness_factor
    )
    
    return heuristics
```
