```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)

    # Decay functions for distance and cumulative demand
    distance_decay = torch.exp(-distance_matrix / 100.0)
    cumulative_demand_decay = torch.exp(-cumulative_demand / 100.0)

    # Scale penalties based on the current load
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty = capacity_penalty * (torch.clamp(1 + (total_capacity - cumulative_demand) / total_capacity, min=0))

    # Overflow detection with nuanced scaling
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )

    # Load balance heuristic with decay
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)

    # Combine heuristics with decay, scaling, and penalty adjustments
    heuristics = (distance_decay * (1 - dynamic_capacity_penalty) +
                  dynamic_capacity_penalty +
                  overflow_penalty +
                  load_balance_penalty)

    # Normalize heuristics to have a range of 0 to 1
    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())
    
    return heuristics
```
