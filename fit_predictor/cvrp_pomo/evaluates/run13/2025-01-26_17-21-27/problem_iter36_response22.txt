```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Distance penalty
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Dynamic capacity penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Introduce diversity by penalizing highly similar load distributions
    diversity_penalty = torch.mean(torch.abs(load_balance - load_balance.mean()), dim=0)
    
    # Scale the penalties and integrate them
    heuristics = distance_penalty + dynamic_capacity_penalty + load_balance_penalty + diversity_penalty
    
    # Apply a strong scaling factor to prioritize core objectives
    scaling_factor = 3.0
    heuristics *= scaling_factor
    
    # Apply an additional penalty for the depot to return to itself
    heuristics[0] = -1000
    
    return heuristics
```
