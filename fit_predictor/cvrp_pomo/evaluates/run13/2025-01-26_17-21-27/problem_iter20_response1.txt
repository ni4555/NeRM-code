```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    relative_cumulative_demand = torch.cumsum(demands / total_capacity, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)

    balance_bonus = torch.max(0.0, torch.min(1.0, (2 * relative_cumulative_demand - 1).abs()))
    heuristics = distance_penalty + balance_bonus.unsqueeze(1) * (torch.arange(n) == 0).float().unsqueeze(0) + capacity_penalty
    return heuristics
```
