```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demand = demands / total_capacity
    cumulative_demand = torch.cumsum(normalized_demand, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    demand_penalty = -5.0 * (cumulative_demand > 1)  # Create a penalty for over-demand
    heuristics = distance_penalty * (1 + demand_penalty)
    return heuristics
```
