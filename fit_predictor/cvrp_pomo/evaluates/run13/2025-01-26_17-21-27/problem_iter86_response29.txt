```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_per_node = total_capacity / n
    early_overflow = cumulative_demand > capacity_per_node

    # Dynamic capacity penalty with adaptive scaling and early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - capacity_per_node) - 1e-8)
    dynamic_capacity_penalty *= torch.where(early_overflow, 1.5, 1)

    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 3))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor

    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_penalty *= torch.where(early_overflow, 1, 0)

    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - capacity_per_node)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)

    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)

    # Apply separate scaling for each heuristic to refine prioritization
    scaling_factors = {
        'distance': 2.0,
        'dynamic': 1.5,
        'overflow': 1.0,
        'balance': 1.0,
        'randomness': 0.1
    }

    heuristics = sum(
        scaling_factors[heuristic_name] * heuristic_value
        for heuristic_name, heuristic_value in zip(
            ['distance', 'dynamic', 'overflow', 'balance', 'randomness'],
            [distance_scaling, dynamic_capacity_penalty, overflow_penalty, load_balance_penalty, randomness_factor]
        )
    )

    # Introduce adaptive diversity factor to encourage route exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)

    # Adjust heuristics based on early overflow and imbalance
    heuristics *= torch.where(early_overflow, 1.5, 1)
    heuristics += diversity_factor

    return heuristics
```
