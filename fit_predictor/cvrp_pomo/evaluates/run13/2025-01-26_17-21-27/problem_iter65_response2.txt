```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Prioritize early overflow detection with a strong penalty
    overflow_penalty = -torch.log1p(torch.abs(cumulative_demand) - 1e-8)
    overflow_penalty[overflow_penalty == float('inf')] = 0  # Handle overflow cases
    
    # Incorporate demand awareness in distance scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Introduce capacity awareness in the heuristic
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity)
    
    # Load balance penalty to encourage balanced loads
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Use a controlled randomness factor to explore
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine the factors with a prioritized scaling factor
    scaling_factor = 2.0
    heuristics = (
        scaling_factor * (
            distance_scaling +
            capacity_penalty +
            overflow_penalty +
            load_balance_penalty
        ) +
        randomness_factor
    )
    
    # Apply a diversity factor for exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Adjust heuristics based on imbalance
    heuristics += diversity_factor
    
    return heuristics
```
