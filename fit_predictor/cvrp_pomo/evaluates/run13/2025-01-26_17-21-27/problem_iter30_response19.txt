```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Distance penalty
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Capacity penalty
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Overflow penalty for edges that lead to overcapacity
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Demand scaling using exponential decay
    demand_scaling = (1 / (1 + torch.exp(-cumulative_demand / 10.0)))
    
    # Scale penalties by cumulative demand
    scaled_distance_penalty = demand_scaling * distance_penalty
    scaled_capacity_penalty = demand_scaling * capacity_penalty
    
    # Load balance factor to encourage even distribution of demand
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine scaled penalties and load balance penalty
    heuristics = scaled_distance_penalty + scaled_capacity_penalty + overflow_penalty + load_balance_penalty
    
    # Subtract the penalty for depot to ensure it's not chosen as a next node
    depot_penalty = torch.arange(n) == 0
    heuristics = heuristics - depot_penalty.float().unsqueeze(0)
    
    return heuristics
```
