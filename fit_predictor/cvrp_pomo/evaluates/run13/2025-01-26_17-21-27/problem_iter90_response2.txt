```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Combined penalties for capacity, overflow, and load balance
    combined_penalty = -torch.log1p(
        torch.abs(demands - total_capacity) +
        torch.where(
            (cumulative_demand[:, None] + demands[None, :]) > total_capacity_vector,
            (cumulative_demand[:, None] + demands[None, :]) - total_capacity_vector,
            torch.zeros_like(cumulative_demand)
        ) +
        torch.abs(cumulative_demand - total_capacity_vector)
    - 1e-8
    )
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Apply a scaling factor to prioritize core objectives
    scaling_factor = 2.5
    heuristics = (
        scaling_factor * (
            distance_scaling +
            combined_penalty
        ) +
        randomness_factor
    )
    
    # Introduce diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    diversity_factor *= torch.sqrt(torch.tensor(n, dtype=heuristics.dtype))
    
    return heuristics
```
