```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    heuristic_matrix = -torch.abs(distance_matrix)

    # Normalize by demand to prioritize high-demand nodes
    demand_normalized = (demands / total_demand) * 10

    # Incorporate distance and demand into heuristic
    heuristic_matrix = heuristic_matrix + demand_normalized

    # Adjust the scale of the heuristic matrix to make the range of values more suitable
    heuristic_matrix = (heuristic_matrix - heuristic_matrix.min()) / (heuristic_matrix.max() - heuristic_matrix.min())

    # Invert the matrix to make higher values more promising
    heuristic_matrix = 1 - heuristic_matrix

    # Ensure no negative values by clamping
    heuristic_matrix = torch.clamp(heuristic_matrix, min=0)

    return heuristic_matrix
```
