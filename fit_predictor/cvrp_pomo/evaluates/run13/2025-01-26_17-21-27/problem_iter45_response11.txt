```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Scale the heuristics to balance the influence of the different components
    balance_factor = torch.tensor([0.2, 0.4, 0.3, 0.1])  # Adjust the weights as needed
    scaled_heuristics = balance_factor[0] * distance_scaling \
                        + balance_factor[1] * dynamic_capacity_penalty \
                        + balance_factor[2] * overflow_penalty \
                        + balance_factor[3] * load_balance_penalty
    
    # Encourage diversity by introducing a random factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Early exit strategy to avoid overflow
    early_exit = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    scaled_heuristics *= early_exit
    
    # Foster diversity in heuristic selection to escape local optima
    scaled_heuristics += diversity_factor
    
    # Adapt penalties dynamically based on the current state
    scaled_heuristics *= (1 + (cumulative_demand - total_capacity_vector) / total_capacity)
    
    return scaled_heuristics
```
