```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Introduce capacity-based penalties and distance-based penalties
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Scale distance penalty by the current load (dynamic scaling)
    dynamic Scaling = torch.clamp(cumulative_demand / total_capacity, min=0, max=1)
    distance_penalty_scaled = distance_penalty * (1 + dynamic_Scaling)
    
    # Incentivize edges leading to the depot to encourage a diversity of paths
    depot_incentive = (torch.arange(n) == 0).float().unsqueeze(0)
    
    # Incentivize remaining capacity, to prioritize visiting all nodes if possible
    remaining_capacity = total_capacity - cumulative_demand
    capacity_incentive = torch.exp(-remaining_capacity / total_capacity)
    
    # Combine penalties and incentives into a final heuristic value
    heuristics = distance_penalty_scaled + capacity_penalty + depot_incentive * capacity_incentive
    return heuristics
```
