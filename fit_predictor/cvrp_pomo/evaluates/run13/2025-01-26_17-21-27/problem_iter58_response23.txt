```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty with early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_overflow = (cumulative_demand > total_capacity_vector).float()
    dynamic_capacity_penalty *= early_overflow
    
    # Time-adaptive distance scaling with randomness
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    randomness_factor = torch.abs(torch.randn_like(distance_matrix)) * 0.1
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor * (1 + randomness_factor)
    
    # Overflow penalty with immediate return to depot
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Diversity factor based on load imbalance
    diversity_factor = torch.abs(torch.randn_like(load_balance_penalty)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    
    # Combine heuristics with diversity and scale according to core objectives
    heuristics = (
        0.8 * distance_scaling +
        0.9 * dynamic_capacity_penalty +
        1.0 * overflow_penalty +
        1.1 * load_balance_penalty
    )
    heuristics += diversity_factor
    
    # Adjust heuristics based on early overflow to maintain diversity
    heuristics *= (1 + early_overflow)
    
    return heuristics
```
