```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    def time_adaptiveScaling(factor, scale_factor):
        return factor * torch.exp(-cumulative_demand / (total_capacity * scale_factor))
    
    def distanceScaling(distance_matrix, scale_factor):
        return time_adaptiveScaling(-torch.log1p(torch.abs(distance_matrix) - 1e-8), scale_factor)
    
    def dynamicCapacityScaling(demands, total_capacity):
        return time_adaptiveScaling(-torch.log1p(torch.abs(demands - total_capacity) - 1e-8), 5)
    
    def overflowScaling(cumulative_demand, total_capacity):
        overflow_mask = (cumulative_demand[:, None] + demands[None, :]) > total_capacity
        return torch.where(overflow_mask, -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8), torch.zeros_like(cumulative_demand))
    
    def loadBalanceScaling(cumulative_demand, total_capacity_vector):
        load_balance = torch.abs(cumulative_demand - total_capacity_vector)
        return time_adaptiveScaling(-torch.log1p(load_balance - 1e-8), 5)
    
    def randomness():
        return time_adaptiveScaling(torch.abs(torch.randn_like(demands)) * 0.1, 5)
    
    def diversity():
        diversity = torch.abs(torch.randn_like(demands)) * 0.2
        diversity /= (torch.sum(torch.abs(diversity)) + 1e-8)
        return diversity
    
    heuristics = distanceScaling(distance_matrix, 5) + dynamicCapacityScaling(demands, total_capacity)
    heuristics += overflowScaling(cumulative_demand, total_capacity) + loadBalanceScaling(cumulative_demand, total_capacity_vector)
    heuristics += randomness()
    heuristics += diversity()
    
    heuristics *= (1 + (cumulative_demand > total_capacity_vector))
    heuristics = torch.clamp(heuristics, min=-10.0, max=10.0)
    heuristics[0, 0] = -1e7
    
    return heuristics
```
