```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty with adaptive scaling and early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine the core factors with proper scaling
    core_factors = (
        distance_scaling +
        dynamic_capacity_penalty +
        overflow_penalty +
        load_balance_penalty
    )
    
    # Introduce randomness for diversity with controlled impact
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine core factors and randomness with proper scaling
    heuristics = (
        1.5 * core_factors +  # Prioritize core objectives
        0.5 * randomness_factor  # Encourage diversity
    )
    
    # Apply penalties and scaling to encourage proper exploration
    heuristics *= (1 + early_overflow)
    heuristics = torch.clamp(heuristics, min=-1e7, max=1e7)
    
    # Exclude the depot from itself with a large penalty
    heuristics[0, 0] = -1e7
    
    # Normalize the heuristics to maintain consistency
    heuristics /= (heuristics.sum() + 1e-8)
    
    return heuristics
```
