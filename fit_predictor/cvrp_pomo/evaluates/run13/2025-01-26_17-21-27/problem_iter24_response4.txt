```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the distance penalty
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Calculate the capacity penalty, with a dynamic scaling based on the remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Calculate the balance penalty, encouraging equal distribution of demand
    balance_penalty = -torch.log1p(torch.abs(cumulative_demand - total_capacity / 2) - 1e-8)
    
    # Calculate the overflow penalty for when demand exceeds capacity
    overflow_penalty = -torch.log1p(torch.abs(cumulative_demand + demands - total_capacity) - 1e-8)
    
    # Scale the penalties to balance their influence
    scaling_factor_distance = 0.4
    scaling_factor_capacity = 0.4
    scaling_factor_balance = 0.1
    scaling_factor_overflow = 0.1
    
    # Combine the scaled penalties
    heuristics = (scaling_factor_distance * distance_penalty +
                  scaling_factor_capacity * dynamic_capacity_penalty +
                  scaling_factor_balance * balance_penalty +
                  scaling_factor_overflow * overflow_penalty)
    return heuristics
```
