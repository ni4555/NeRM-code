```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    max_demand = demands.max()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity = demands.sum()
    
    # Initialize the heuristics matrix with the distance_matrix
    heuristics = torch.clone(distance_matrix)
    
    # Apply penalties for edges that lead to exceeding the capacity
    for i in range(1, n):
        for j in range(1, n):
            if cumulative_demand[i] - demands[j] > capacity:
                heuristics[i, j] -= 1000  # Large negative penalty
    
    # Encourage edges that help in reducing the total distance
    heuristics *= -1  # Invert the heuristics to encourage shorter paths
    
    # Normalize the heuristics matrix by the maximum demand encountered
    heuristics /= max_demand
    
    return heuristics
```
