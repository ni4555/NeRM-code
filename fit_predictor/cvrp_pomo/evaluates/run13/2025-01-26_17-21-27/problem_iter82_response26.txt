```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty with adaptive scaling and early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Introduce time-adaptive diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Modular design: separate out heuristics components
    heuristics_components = {
        'distance': distance_scaling,
        'capacity': dynamic_capacity_penalty,
        'overflow': overflow_penalty,
        'load_balance': load_balance_penalty,
        'randomness': randomness_factor,
        'diversity': diversity_factor
    }
    
    # Combine components based on their relative importance
    combined_heuristics = 0.6 * sum(
        [heuristics_components[comp] for comp in ['distance', 'capacity', 'overflow', 'load_balance']]
    ) + 0.2 * heuristics_components['randomness'] + 0.2 * heuristics_components['diversity']
    
    # Adjust heuristics based on the state of the system
    combined_heuristics *= (1 + early_overflow)
    
    # Cap the heuristics to maintain stability
    combined_heuristics = torch.clamp(combined_heuristics, min=-10.0, max=10.0)
    
    # Apply a large penalty for the depot to return to itself
    combined_heuristics[0, 0] = -1e7
    
    return combined_heuristics
```
