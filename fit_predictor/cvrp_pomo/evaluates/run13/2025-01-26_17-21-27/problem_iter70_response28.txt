```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Time-adaptive distance scaling
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 3))
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8) * time_factor
    
    # Simplified capacity penalty with balance adjustments
    capacity_penalty = -torch.log1p(torch.abs(demands - (total_capacity / n))) * (1 / (1 + cumulative_demand / total_capacity))
    
    # Overflow penalty for edges that would exceed vehicle capacity
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity_vector,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity_vector - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic adjusted by inverse cumulative demand
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8) * (1 / (1 + cumulative_demand / total_capacity))
    
    # Randomness factor to introduce variability
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine core objectives and randomness
    heuristics = (
        distance_scaling +
        capacity_penalty +
        overflow_penalty +
        load_balance_penalty
    ) * 2.0 + randomness_factor
    
    # Introduce diversity through small random perturbations
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += diversity_factor
    
    return heuristics
```
