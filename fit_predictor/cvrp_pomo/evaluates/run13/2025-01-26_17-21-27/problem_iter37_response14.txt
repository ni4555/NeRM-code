```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Dynamic capacity penalty with early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - (total_capacity / n)) - 1e-8)
    early_overflow = torch.where(cumulative_demand > total_capacity / n, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    dynamic_capacity_penalty *= early_overflow
    
    # Distance penalty considering cumulative demand
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / (2 * total_capacity))
    
    # Overflow penalty for nodes that would exceed capacity when included
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to promote even distribution of demands
    load_balance = torch.abs(cumulative_demand - (total_capacity / n))
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Diversity heuristic to escape local optima
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Blend heuristics and apply penalties with a balancing factor
    balancing_factor = 0.5
    heuristics = balancing_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty)
    heuristics += (1 - balancing_factor) * diversity_factor
    
    return heuristics
```
