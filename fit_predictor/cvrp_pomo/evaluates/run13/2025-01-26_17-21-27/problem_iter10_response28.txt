```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    distance_penalty = torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = (cumulative_demand / total_capacity).exp()
    # Balancing the distance and capacity penalties
    balanced_penalty = distance_penalty / (distance_penalty + capacity_penalty)
    # Normalizing the balanced penalty to ensure competitive balance
    normalized_penalty = balanced_penalty / (balanced_penalty.sum() + 1e-8)
    # Combining the penalties with the cumulative demand
    heuristics = normalized_penalty * cumulative_demand
    return heuristics
```
