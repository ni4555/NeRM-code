```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Calculate overflow penalty using broadcasting
    overflow_penalty = (torch.max(torch.zeros_like(demands), cumulative_demand - total_capacity) * 
                        torch.log1p(torch.abs(torch.max(torch.zeros_like(demands), cumulative_demand - total_capacity)) - 1e-8))
    overflow_penalty = overflow_penalty[:, None] + overflow_penalty
    
    # Combine the penalties with scaling and vectorization
    heuristics = (distance_scaling + dynamic_capacity_penalty + overflow_penalty) / 3.0
    return heuristics
```
