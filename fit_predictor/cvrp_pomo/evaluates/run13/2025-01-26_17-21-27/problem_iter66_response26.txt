```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_threshold = total_capacity * 0.7  # Example threshold for capacity constraint

    # Early detection for capacity violation
    early_violation = (cumulative_demand > capacity_threshold).float()

    # Dynamic capacity penalty based on proximity to threshold
    dynamic_capacity_penalty = -(cumulative_demand / capacity_threshold).clamp(min=0)

    # Enhanced distance penalty with adaptive scaling based on cumulative demand
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / total_capacity)
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor

    # Overflow penalty for edges that would cause overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )

    # Load balance penalty for imbalances in cumulative demand
    load_balance = torch.abs(cumulative_demand - total_capacity * (demands > 0).sum(dim=0) / demands.sum())
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)

    # Randomness factor to avoid getting stuck in local optima
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)

    # Combine the heuristics, prioritizing the capacity and distance penalties
    heuristics = dynamic_capacity_penalty + distance_scaling + overflow_penalty + load_balance_penalty + randomness_factor

    # Apply diversity to avoid local optima
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)

    # Final adjustment of heuristics to include diversity
    heuristics += diversity_factor

    return heuristics
```
