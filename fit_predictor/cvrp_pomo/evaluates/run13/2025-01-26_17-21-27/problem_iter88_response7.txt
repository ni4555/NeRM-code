```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty with adaptive scaling
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity / n) - 1e-8)
    capacity_penalty *= (1 + 0.5 * (cumulative_demand - total_capacity_vector) / total_capacity)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_penalty *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Early overflow detection with penalty
    overflow_penalty = torch.where(
        cumulative_demand > total_capacity_vector,
        -torch.log1p(cumulative_demand - total_capacity_vector - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine all factors into a single heuristic score
    heuristics = (
        capacity_penalty +
        distance_penalty +
        overflow_penalty +
        load_balance_penalty +
        randomness_factor
    )
    
    # Introduce time-adaptive diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += diversity_factor
    
    # Early overflow detection with a penalty that scales with the overflow
    early_overflow = cumulative_demand > total_capacity_vector
    overflow_penalty = -torch.log1p(early_overflow.float())
    heuristics *= (1 + overflow_penalty)
    
    # Time-adaptive factors
    time_adaptive_factor = torch.exp(-cumulative_demand / (total_capacity * 10))
    heuristics *= time_adaptive_factor
    
    return heuristics
```
