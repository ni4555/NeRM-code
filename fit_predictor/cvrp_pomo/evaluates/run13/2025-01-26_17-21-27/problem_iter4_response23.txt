```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    capacity = demands.max()  # Assuming all vehicles have the same capacity as the largest demand
    
    # Calculate the savings for each edge
    savings = (distance_matrix**2 - torch.clamp(distance_matrix, min=1e-8)) * (demands[:, None] - demands[None, :])
    
    # Calculate the cumulative demand at each node if visited
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Create a mask to check if adding a node exceeds the vehicle capacity
    demand_mask = cumulative_demand <= capacity
    
    # Adjust the savings heuristic to consider demand
    adjusted_savings = savings * demand_mask
    
    # Normalize by capacity to ensure the heuristic is relative to the vehicle's capacity
    normalized_savings = adjusted_savings / (capacity * (n - 1))
    
    # Invert the matrix to make higher values more promising
    heuristic_matrix = -normalized_savings
    
    # Calculate a penalty for edges that exceed the vehicle capacity
    capacity_penalty = (1 - demand_mask).float()
    
    # Add a demand-distance interaction term
    demand_distance_interaction = (demands > 0.1).float() * (1 / (distance_matrix + 1e-8))
    
    # Combine all terms and normalize to a range of [0, 1]
    combined_heuristic = heuristic_matrix + capacity_penalty + demand_distance_interaction
    min_val, max_val = combined_heuristic.min(), combined_heuristic.max()
    scale = (1 / (max_val - min_val))
    bias = min_val * scale
    heuristic_matrix = combined_heuristic * scale + bias
    
    return heuristic_matrix
```
