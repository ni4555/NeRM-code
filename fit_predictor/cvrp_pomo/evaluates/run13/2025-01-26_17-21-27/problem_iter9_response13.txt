```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    demand_sensitivity = (demands / total_capacity) ** 2
    overcapacity_penalty = (cumulative_demand > 1).float() * (cumulative_demand - 1) * (cumulative_demand - 1)
    heuristics = distance_penalty * (1 + demand_sensitivity) + overcapacity_penalty
    return heuristics
```
