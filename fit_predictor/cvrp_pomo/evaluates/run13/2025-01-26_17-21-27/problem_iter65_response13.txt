```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_thresholds = total_capacity * torch.linspace(1, n, steps=n)

    # Dynamic capacity penalty based on the ratio of cumulative demand to threshold
    dynamic_capacity_penalty = -torch.log1p(torch.abs(cumulative_demand - capacity_thresholds) - 1e-8)
    
    # Enhanced distance penalty with adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with a threshold-based approach
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > capacity_thresholds[:, None],
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - capacity_thresholds[:, None] - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic using normalized load factor
    load_balance_factor = (cumulative_demand / total_capacity)
    load_balance_penalty = -torch.log1p(load_balance_factor - 1e-8)
    
    # Introduce diversity through randomness with decreasing influence as the path lengthens
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Scale and combine heuristics for a balance between exploitation and exploration
    scaling_factors = torch.ones_like(demands)
    heuristics = (
        scaling_factors * (
            distance_scaling +
            dynamic_capacity_penalty +
            overflow_penalty +
            load_balance_penalty
        ) +
        diversity_factor
    )
    
    # Normalize the heuristics to ensure positive values for promising edges
    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())
    
    return heuristics
```
