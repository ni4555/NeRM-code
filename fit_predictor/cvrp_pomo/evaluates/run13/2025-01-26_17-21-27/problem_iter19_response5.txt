```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    demand_penalty = torch.log1p(torch.abs(cumulative_demand - total_capacity / 2) - 1e-8)
    capacity_balance_factor = (total_capacity - cumulative_demand) / total_capacity
    heuristics = capacity_balance_factor * (distance_penalty + demand_penalty)
    return heuristics
```
