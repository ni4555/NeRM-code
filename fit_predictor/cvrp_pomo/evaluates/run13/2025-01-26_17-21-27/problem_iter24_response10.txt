```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    cumulative_demand = cumulative_demand - cumulative_demand[0]  # Normalize cumulative demand
    
    # Scaled demand to normalize between 0 and 1
    scaled_demand = (cumulative_demand - cumulative_demand.min()) / (cumulative_demand.max() - cumulative_demand.min())
    
    # Dynamic scaling factors for demand and distance
    demand_scaling = scaled_demand ** 2
    distance_scaling = 1 + (1 / (1 + cumulative_demand))
    
    # Calculate penalties
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Apply scaling factors
    scaled_capacity_penalty = capacity_penalty * demand_scaling
    scaled_distance_penalty = distance_penalty * distance_scaling
    
    # Introduce a penalty for edges that lead to overflow capacity
    overflow_penalty = torch.where(cumulative_demand > total_capacity, -torch.log1p(cumulative_demand - total_capacity), torch.zeros_like(cumulative_demand))
    overflow_penalty = overflow_penalty.scatter_add(0, torch.arange(n), overflow_penalty)
    
    # Introduce load balance factor to penalize uneven loading
    load_balance = (cumulative_demand / total_capacity).unsqueeze(1)
    load_balance_penalty = torch.where(load_balance > 1.0, torch.log1p((load_balance - 1.0) / (load_balance - 1.0 + 1e-8)), torch.zeros_like(load_balance))
    load_balance_penalty = load_balance_penalty.unsqueeze(1).expand_as(distance_matrix)
    
    # Combine all factors to create heuristics
    heuristics = scaled_capacity_penalty + scaled_distance_penalty + overflow_penalty + load_balance_penalty
    return heuristics
```
