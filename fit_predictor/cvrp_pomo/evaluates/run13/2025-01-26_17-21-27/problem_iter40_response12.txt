```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8) * (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balancing penalty
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Diversity penalty
    diversity_penalty = torch.exp(-torch.sum((load_balance[:, None] == load_balance[None, :])**2, dim=1))
    
    # High load balance penalty
    high_load_balance_penalty = torch.where(
        load_balance > total_capacity / (3 * n),
        -torch.log1p(load_balance - 1e-8),
        torch.zeros_like(load_balance)
    )
    
    # Combine heuristics with a strong scaling factor
    scaling_factor = 3.0
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty + diversity_penalty + high_load_balance_penalty)
    
    # Cap the heuristics to avoid overflow and underflow
    heuristics = torch.clamp(heuristics, min=-100, max=100)
    
    return heuristics
```
