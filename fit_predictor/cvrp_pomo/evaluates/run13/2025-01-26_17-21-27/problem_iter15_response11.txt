```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    heuristics = distance_scaling + capacity_penalty

    # Dynamic adaptation based on current cumulative demand
    demand_threshold = total_capacity * 0.8  # 80% of total capacity as a threshold
    dynamic_adjustment = (cumulative_demand > demand_threshold).float()
    heuristics *= dynamic_adjustment

    return heuristics
```
