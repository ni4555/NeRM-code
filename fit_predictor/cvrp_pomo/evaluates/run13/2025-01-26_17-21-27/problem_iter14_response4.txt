```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    demand_sensitivity = (demands / total_capacity - 0.5) * 2
    balance = demand_sensitivity ** 2
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    heuristics = distance_penalty * balance
    heuristics -= torch.log1p(torch.arange(n))  # Adjust to balance the heuristics
    heuristics[:, 0] = -distance_penalty[:, 0]  # Negative heuristic for the depot to depot edge
    return heuristics
```
