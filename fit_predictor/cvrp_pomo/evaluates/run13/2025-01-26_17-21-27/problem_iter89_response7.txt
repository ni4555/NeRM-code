```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    balance_factor = 1.0 / (1.0 + torch.exp(-cumulative_demand / total_capacity * 5.0))

    # Dynamic capacity penalty with adaptive scaling and early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    overflow_penalty = torch.zeros_like(dynamic_capacity_penalty)
    overflow_penalty[cumulative_demand > total_capacity] = dynamic_capacity_penalty[cumulative_demand > total_capacity]
    dynamic_capacity_penalty *= balance_factor

    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= balance_factor

    # Load balance heuristic with dynamic balance factor
    load_balance = (cumulative_demand - total_capacity / n) * balance_factor

    # Introduce time-adaptive diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)

    # Apply a scaling factor to prioritize core objectives
    scaling_factor = 2.0
    heuristics = scaling_factor * (
        distance_scaling +
        dynamic_capacity_penalty +
        overflow_penalty +
        load_balance
    ) + diversity_factor
    
    return heuristics
```
