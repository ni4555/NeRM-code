```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty with early return to avoid overflow
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_return_penalty = -torch.log1p(torch.abs(cumulative_demand) - 1e-8)
    dynamic_capacity_penalty *= torch.where(cumulative_demand > total_capacity_vector, early_return_penalty, 1)
    
    # Distance scaling with a penalty for longer paths
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_penalty = distance_scaling * (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with penalties for imbalance
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Apply scaling factors to prioritize objectives
    scaling_factors = torch.tensor([0.5, 2.0, 1.0, 1.5], dtype=torch.float32)
    heuristics = (
        scaling_factors[0] * dynamic_capacity_penalty +
        scaling_factors[1] * distance_penalty +
        scaling_factors[2] * overflow_penalty +
        scaling_factors[3] * load_balance_penalty
    )
    
    # Introduce controlled randomness to escape local optima
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Encourage diversity by balancing the randomness with the heuristics
    diversity_factor = randomness_factor * 0.2 + heuristics * 0.8
    
    # Encourage diversity and balance
    diversity_factor += torch.clamp(heuristics, min=-0.5) * 0.1
    
    # Apply additional penalties for early overflow and imbalance
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    heuristics *= early_overflow
    
    # Final balance of heuristics and diversity
    heuristics += diversity_factor
    return heuristics
```
