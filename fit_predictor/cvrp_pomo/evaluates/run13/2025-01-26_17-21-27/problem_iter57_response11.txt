```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Enhanced capacity penalty with early overflow detection and time-adaptive scaling
    capacity_penalty = -torch.log1p(torch.abs(demands - (total_capacity / n)) - 1e-8)
    capacity_penalty *= (1 + 0.5 * torch.abs(demands - (total_capacity / n))) * (1 + (cumulative_demand > total_capacity_vector))
    
    # Distance penalty with improved scaling and time factor
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 3))
    distance_scaling *= (1 + 0.1 * cumulative_demand / total_capacity) * time_factor
    
    # Overflow penalty with time-adaptive scaling and early return to depot
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_penalty *= (1 + cumulative_demand / total_capacity)
    
    # Load balance heuristic with refined balance factor and time-adaptive scaling
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance *= (1 - 0.5 * (cumulative_demand / total_capacity))
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with reduced impact for high demand and load balance
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.2
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Apply scaling to prioritize core objectives and introduce diversity
    scaling_factor = 2.0
    heuristics = (
        scaling_factor * (
            distance_scaling +
            capacity_penalty +
            overflow_penalty +
            load_balance_penalty
        ) +
        randomness_factor
    )
    
    # Introduce a time-adaptive diversity factor for exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Adjust heuristics based on the current state to prevent overflow and imbalance
    heuristics *= (1 + (cumulative_demand > total_capacity_vector))
    heuristics += diversity_factor
    
    return heuristics
```
