```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Simplify objectives and focus on capacity constraints
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Introduce dynamic scaling with a focus on core objectives
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Encourage diversity and balance with reduced complexity
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Avoid redundancy and simplify scaling by focusing on the most critical components
    core_objectives = distance_scaling + dynamic_capacity_penalty + load_balance_penalty
    scaling_factor = 3.0
    heuristics = scaling_factor * core_objectives
    
    # Foster diversity to avoid local optima without introducing excessive randomness
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Adapt heuristics for early overflow and imbalance without overly penalizing
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    heuristics *= early_overflow
    
    # Encourage diversity and balance
    heuristics += diversity_factor
    return heuristics
```
