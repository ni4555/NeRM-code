```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Early overflow penalty to avoid unnecessary overflow
    early_overflow_penalty = torch.where(
        cumulative_demand > total_capacity_vector,
        -torch.log1p(cumulative_demand - total_capacity_vector - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Dynamic capacity penalty to encourage vehicles to return when capacity is exceeded
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Diversity factor to escape local optima
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Combine heuristics with an emphasis on early overflow and capacity management
    heuristics = (
        distance_scaling +
        early_overflow_penalty +
        dynamic_capacity_penalty +
        load_balance_penalty +
        diversity_factor
    )
    
    # Scale heuristics to prioritize the core objectives
    scaling_factor = 3.0
    heuristics *= scaling_factor
    
    return heuristics
```
