```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Apply a strong scaling factor to prioritize core objectives
    scaling_factor = 3.0
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty)
    
    # Introduce randomness for diversity
    diversity_factor = torch.randn_like(demands) * 0.1
    
    # Cap the maximum load to avoid overflow
    max_load = total_capacity * 0.9
    load_penalty = torch.where(cumulative_demand > max_load, -torch.log1p(cumulative_demand - max_load - 1e-8), torch.zeros_like(cumulative_demand))
    
    # Introduce a diversity heuristic that encourages different solutions
    diversity_heuristic = torch.abs(diversity_factor)
    
    # Apply penalties to maintain balance and encourage diversity
    heuristics += load_penalty
    heuristics += diversity_heuristic
    
    # Ensure the heuristic values are within a specified range
    heuristics = torch.clamp(heuristics, min=-1.0, max=1.0)
    
    return heuristics
```
