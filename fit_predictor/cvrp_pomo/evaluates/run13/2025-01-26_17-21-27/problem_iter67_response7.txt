```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_per_node = total_capacity / n
    
    # Modularize penalties and use a vectorized approach for distance and capacity penalties
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - capacity_per_node) - 1e-8)
    
    # Integrate early overflow detection within the capacity penalty
    early_overflow = cumulative_demand > capacity_per_node
    capacity_penalty *= (1 + 0.3 * (capacity_per_node - cumulative_demand) / capacity_per_node) * (1 + early_overflow)
    
    # Use time-adaptive factors to balance exploration and exploitation
    time_factor = torch.exp(-cumulative_demand / (capacity_per_node * 5))
    adjusted_distance_penalty = distance_penalty * (1 + cumulative_demand / capacity_per_node) * time_factor
    
    # Combine penalties into a single heuristic vector
    heuristics = adjusted_distance_penalty + capacity_penalty
    
    # Introduce diversity by adding randomness with controlled impact
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Incorporate load balance and manage randomness and diversity
    load_balance = torch.abs(cumulative_demand - capacity_per_node)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    heuristics += load_balance_penalty + randomness_factor
    
    # Apply a scaling factor to prioritize core objectives and cap heuristic values
    scaling_factor = 2.5
    heuristics = torch.clamp(heuristics * scaling_factor, min=-100, max=100)
    
    # Introduce time-adaptive diversity factor for exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += diversity_factor
    
    return heuristics
```
