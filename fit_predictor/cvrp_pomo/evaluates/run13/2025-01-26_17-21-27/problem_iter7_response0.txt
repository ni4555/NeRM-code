```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    demand_penalty = torch.abs(demands) / total_capacity  # Normalize demand to be capacity-conscious
    distance_scaling = torch.log1p(torch.abs(distance_matrix) - 1e-8) * demand_penalty
    return distance_scaling + cumulative_demand
```
