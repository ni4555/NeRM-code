```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demands_cumulative = torch.cumsum(demands, dim=0)
    
    # Initialize heuristics matrix with large negative values
    heuristics = -torch.ones_like(distance_matrix)
    
    # Add positive values for edges that are within the first half of the cumulative demand
    heuristics[torch.arange(n), 1:] += (demands_cumulative[:n-1] / (total_capacity / 2)) * 2
    
    # Add capacity-aware penalties for edges that exceed the vehicle capacity
    penalties = (demands_cumulative - total_capacity).where(demands_cumulative > total_capacity)
    if penalties.any():
        penalties = penalties.mean().item()
        heuristics += penalties * (torch.triu_indices(n, n, k=1)[:, None] * -1)
    
    # Introduce nuanced demand-distance interactions
    interaction_factor = 1 - (demands_cumulative / total_capacity)
    heuristics[torch.arange(n), torch.arange(n)[1:]] *= interaction_factor
    
    return heuristics
```
