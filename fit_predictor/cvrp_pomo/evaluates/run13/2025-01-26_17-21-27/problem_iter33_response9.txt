```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = distance_penalty * (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Adaptive scaling factor to balance between distance and capacity
    scaling_factor = torch.sigmoid(torch.sum(distance_penalty) / torch.sum(capacity_penalty))
    
    # Encourage diversity by adding a penalty for highly similar routes
    similarity_penalty = -torch.log1p(torch.abs(torch.corrcoef(torch.reshape(distance_matrix, (n, n)))[0, 1]) - 1e-8)
    
    # Apply the adaptive scaling factor to the core objectives
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty)
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine all penalties into a single heuristic value
    heuristics += load_balance_penalty + similarity_penalty
    
    # Apply an additional penalty for high load balance to avoid overloading any single vehicle
    high_load_balance_penalty = torch.where(
        load_balance > total_capacity / (3 * n),
        -torch.log1p(load_balance - 1e-8),
        torch.zeros_like(load_balance)
    )
    
    heuristics += high_load_balance_penalty
    return heuristics
```
