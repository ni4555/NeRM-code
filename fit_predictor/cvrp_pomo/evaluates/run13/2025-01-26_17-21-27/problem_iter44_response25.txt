```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)

    # Simplified distance scaling that takes into account cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)

    # Dynamic capacity penalty with early return to avoid unnecessary overflow
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_return = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    dynamic_capacity_penalty *= early_return

    # Load balance penalty to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)

    # Apply a scaling factor to prioritize core objectives
    scaling_factor = 2.0
    combined_penalty = scaling_factor * (distance_scaling + dynamic_capacity_penalty + load_balance_penalty)

    # Encourage diversity to escape local optima with a low noise factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.05

    # Combine the combined penalty with diversity and avoid the depot
    heuristics = combined_penalty + diversity_factor - (torch.arange(n) == 0).float().unsqueeze(0)

    # Normalize heuristics to maintain consistency
    heuristics /= (heuristics.abs().max() + 1e-8)

    return heuristics
```
