```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Scale the distance penalty by the cumulative demand
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    scaled_distance_penalty = distance_penalty * (1 + cumulative_demand)
    
    # Dynamic overflow penalty with aggressive scaling
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_penalty = overflow_penalty * 3.0  # More aggressive penalty for overflow
    
    # Load balance heuristic with a penalty for imbalances
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine all penalties, focusing on critical factors and avoiding redundant penalties
    combined_penalty = scaled_distance_penalty + overflow_penalty + load_balance_penalty
    
    # Normalize the penalties to sum to 1 for each edge
    penalties_sum = combined_penalty.sum(dim=1, keepdim=True)
    normalized_penalties = combined_penalty / (penalties_sum + 1e-8)
    
    # Include a penalty for the depot node
    depot_mask = (torch.arange(n) == 0).float()
    heuristics = normalized_penalties + depot_mask.unsqueeze(0) * cumulative_demand.unsqueeze(0)
    
    return heuristics
```
