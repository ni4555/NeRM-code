```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Dynamic capacity penalty that adapts to the level of overflow
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity))
    early_overflow = cumulative_demand > 0.75 * total_capacity / n
    capacity_penalty *= (1 + 0.5 * (early_overflow.float() - early_overflow))
    
    # Enhanced distance penalty with more aggressive time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= time_factor * (1 + cumulative_demand / total_capacity)
    
    # Early return penalty to encourage vehicles to return to the depot early if over capacity
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_penalty *= early_overflow
    
    # Load balance heuristic with a more refined balance factor
    load_balance_factor = 1 / (1 + cumulative_demand / total_capacity)
    load_balance = torch.abs(cumulative_demand - total_capacity)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8) * load_balance_factor
    
    # Randomness factor to add some noise to the heuristic values
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Scale and combine heuristics with priority to the core objectives
    scaling_factor = 2.0
    heuristics = scaling_factor * (
        distance_scaling +
        capacity_penalty +
        overflow_penalty +
        load_balance_penalty
    ) + randomness_factor
    
    # Diversity factor to encourage the exploration of different solutions
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += diversity_factor
    
    return heuristics
```
