```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Modular design with separate modules for different heuristic components
    def capacity_penalty():
        penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
        return penalty

    def distance_penalty():
        scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
        time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
        return scaling * (1 + cumulative_demand / total_capacity) * time_factor

    def overflow_penalty():
        return torch.where(
            (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
            -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
            torch.zeros_like(cumulative_demand)
        )

    def load_balance_penalty():
        return -torch.log1p(torch.abs(cumulative_demand - total_capacity_vector) - 1e-8)

    def randomness_factor():
        return torch.abs(torch.randn_like(demands)) * 0.1 * (1 - cumulative_demand / total_capacity)

    def diversity_factor():
        return torch.abs(torch.randn_like(demands)) * 0.2 / (torch.sum(torch.abs(torch.randn_like(demands))) + 1e-8) * (1 - cumulative_demand / total_capacity)

    # Apply heuristics components with controlled randomness
    penalties = (
        capacity_penalty() +
        distance_penalty() +
        overflow_penalty() +
        load_balance_penalty()
    )
    randomness = randomness_factor()
    diversity = diversity_factor()
    
    # Combine heuristics with penalties, randomness, and diversity
    heuristics = penalties + randomness + diversity
    
    return heuristics
```
