```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    balance_penalty = -torch.abs(cumulative_demand - (total_capacity / n)) ** 2
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = (distance_penalty + balance_penalty) * torch.sqrt(1 + cumulative_demand)
    heuristics = distance_scaling
    return heuristics
```
