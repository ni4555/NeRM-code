```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 3))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Dynamic capacity penalty with early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= (1 + early_overflow)
    
    # Overflow penalty with early return
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine core objectives and randomness factor
    heuristics = (
        distance_scaling +
        dynamic_capacity_penalty +
        overflow_penalty +
        load_balance_penalty
    )
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += randomness_factor
    
    # Introduce time-adaptive diversity factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Adjust heuristics based on specific conditions
    early_overflow_penalty = (1 + early_overflow) * load_balance_penalty
    heuristics += early_overflow_penalty
    
    # Normalize diversity factor before combining with heuristics
    heuristics += diversity_factor / (torch.sum(heuristics) + 1e-8)
    
    return heuristics
```
