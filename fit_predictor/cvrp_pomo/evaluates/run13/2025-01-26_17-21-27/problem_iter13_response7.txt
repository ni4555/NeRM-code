```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    dynamic_penalty = torch.exp(-capacity_penalty * 0.1) * distance_penalty
    distance_scaling = dynamic_penalty * (1 + cumulative_demand)
    normalized_demand = cumulative_demand / total_capacity
    heuristics = distance_scaling * (1 - normalized_demand)
    return heuristics
```
