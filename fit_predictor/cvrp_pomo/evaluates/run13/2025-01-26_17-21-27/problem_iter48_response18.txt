```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Apply a strong scaling factor to prioritize core objectives
    core_scaling_factor = 3.0
    
    # Apply randomness for diversity in heuristic selection
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Introduce early return mechanism that adapts to remaining capacity
    early_return_factor = 1.0
    early_return = torch.where(cumulative_demand > total_capacity_vector, 
                               -torch.log1p(cumulative_demand - total_capacity_vector - 1e-8) * early_return_factor,
                               torch.zeros_like(cumulative_demand))
    
    # Introduce diversity to promote different paths in solution
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    diversity_heuristic = diversity_factor
    
    # Combine the heuristics with controlled scaling and penalties
    heuristics = core_scaling_factor * (distance_scaling + dynamic_capacity_penalty + load_balance_penalty)
    heuristics += randomness_factor + diversity_heuristic + early_return
    
    # Balance the impact of different objectives
    final_heuristics = heuristics / heuristics.abs().max()
    
    return final_heuristics
```
