```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Improved dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + 0.3 * (demands / total_capacity - 0.5))
    
    # Enhanced distance penalty with adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Enhanced overflow penalty with threshold-based adjustment
    overflow_threshold = total_capacity * 1.2
    overflow_penalty = torch.where(
        cumulative_demand + demands > overflow_threshold,
        -torch.log1p(cumulative_demand + demands - overflow_threshold - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Improved load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(torch.clamp(load_balance, min=1e-8) - 1e-8)
    
    # Adjusted randomness factor with reduced impact
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Scaling and diversity adjustments
    scaling_factor = 2.5
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    heuristics = (
        scaling_factor * (
            distance_scaling +
            dynamic_capacity_penalty +
            overflow_penalty +
            load_balance_penalty
        ) +
        randomness_factor
    )
    
    heuristics += diversity_factor
    heuristics *= (1 + (cumulative_demand > total_capacity_vector))
    
    return heuristics
```
