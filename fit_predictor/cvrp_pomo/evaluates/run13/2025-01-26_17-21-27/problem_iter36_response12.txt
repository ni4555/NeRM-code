```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    base_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Core objective: minimize distance
    distance_scaling = base_penalty * (1 + cumulative_demand / total_capacity)
    
    # Dynamic penalties based on demand to avoid overflow
    dynamic_demand_penalty = base_penalty * (1 + torch.abs(demands - total_capacity / n))
    
    # Diversity heuristic to encourage different vehicle paths
    diversity = (cumulative_demand - cumulative_demand.mean()).abs()
    diversity_penalty = -torch.log1p(diversity - 1e-8)
    
    # Combine core objective with demand penalty and diversity
    core_objective = distance_scaling + dynamic_demand_penalty
    heuristics = core_objective + diversity_penalty
    
    # Scaling factor for core objective and diversity
    scaling_factor_core = 1.5
    scaling_factor_diversity = 0.5
    
    # Apply scaling to the heuristics
    heuristics *= (scaling_factor_core + scaling_factor_diversity)
    
    # Avoid overloading any single vehicle
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    heuristics += overflow_penalty
    
    # Apply a penalty for the depot to return to itself
    heuristics[0] = -1000
    
    return heuristics
```
