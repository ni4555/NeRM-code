```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Dynamic capacity penalty with more granular adjustments
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty = dynamic_capacity_penalty * (1 + (cumulative_demand - total_capacity) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8) * (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balancing heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Introduce diversity to avoid local optima by penalizing similar load distributions
    diversity_penalty = torch.exp(-torch.sum((load_balance[:, None] == load_balance[None, :])**2, dim=1))
    
    # High load balance penalty to avoid overloading any single vehicle
    high_load_balance_penalty = torch.where(
        load_balance > total_capacity / (3 * n),
        -torch.log1p(load_balance - 1e-8),
        torch.zeros_like(load_balance)
    )
    
    # Balance the influence of individual heuristics
    scaling_factors = {
        'distance_scaling': 1.5,
        'dynamic_capacity_penalty': 1.0,
        'overflow_penalty': 1.0,
        'load_balance_penalty': 1.0,
        'diversity_penalty': 0.5,
        'high_load_balance_penalty': 1.0
    }
    
    # Combine heuristics with a strong scaling factor for impact
    heuristics = sum(
        scaling_factors[heuristic_name] * getattr(torch, heuristic_name)(distance_matrix, demands)
        for heuristic_name in scaling_factors
    )
    
    # Cap the heuristics to avoid overflow and underflow
    heuristics = torch.clamp(heuristics, min=-100, max=100)
    
    return heuristics
```
