```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    capacity = demands.max()
    
    # Calculate the savings for each edge
    savings = (distance_matrix**2 - torch.clamp(distance_matrix, min=1e-8)) * (demands[:, None] - demands[None, :])
    
    # Calculate the cumulative demand at each node if visited
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate penalties for edges that lead to exceeding the vehicle capacity
    penalty_mask = cumulative_demand > capacity
    penalties = penalty_mask.float() * (distance_matrix + (capacity - demands[None, :] + demands[:, None]))
    
    # Subtract penalties from savings
    heuristic = savings - penalties
    
    # Normalize the heuristic to ensure the range is within [0, 1]
    min_heuristic = heuristic.min()
    max_heuristic = heuristic.max()
    normalized_heuristic = (heuristic - min_heuristic) / (max_heuristic - min_heuristic)
    
    return normalized_heuristic
```
