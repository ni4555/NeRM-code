```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    dynamic_scaling = torch.where(demands < total_capacity, 1 + cumulative_demand, 1)
    demand_penalty = (demands / total_capacity).unsqueeze(1).unsqueeze(2) * (1 + cumulative_demand.unsqueeze(0).unsqueeze(1))
    edge_adjustment = distance_penalty * demand_penalty
    heuristics = edge_adjustment * dynamic_scaling + capacity_penalty
    return heuristics
```
