```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    relative_cumulative_demand = torch.cumsum(demands, dim=0) / total_capacity
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)

    depot_mask = (torch.arange(n) == 0).float()
    heuristics = distance_penalty + relative_cumulative_demand.unsqueeze(1) * depot_mask.unsqueeze(0) + capacity_penalty
    return heuristics
```
