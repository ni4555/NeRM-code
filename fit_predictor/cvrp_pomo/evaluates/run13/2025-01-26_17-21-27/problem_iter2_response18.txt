```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic for CVRP that incorporates distance, demand interactions, cumulative demand, and non-linear scaling."""
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    capacity = demands.max()  # Assuming all vehicles have the same capacity as the largest demand

    # Calculate the savings for each edge
    savings = (distance_matrix**2 - torch.clamp(distance_matrix, min=1e-8)) * (demands[:, None] - demands[None, :])

    # Calculate the cumulative demand at each node if visited
    cumulative_demand = torch.cumsum(demands, dim=0)

    # Create a mask to check if adding a node exceeds the vehicle capacity
    demand_mask = cumulative_demand <= capacity

    # Adjust the savings heuristic to consider demand and cumulative demand
    adjusted_savings = savings * demand_mask

    # Apply non-linear scaling to the adjusted savings to emphasize short paths and high demands
    non_linear_scaled_savings = torch.exp(-adjusted_savings)

    # Apply a penalty for edges that exceed the vehicle capacity
    penalty = torch.where(adjusted_savings > 0, non_linear_scaled_savings, -non_linear_scaled_savings)
    
    return penalty
```
