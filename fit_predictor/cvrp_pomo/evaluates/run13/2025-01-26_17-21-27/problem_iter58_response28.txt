```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = total_capacity / n

    # Early overflow detection
    early_overflow = cumulative_demand > total_capacity_vector

    # Early overflow penalty
    overflow_penalty = -torch.log1p((cumulative_demand + demands - total_capacity) - 1e-8) * (early_overflow.float())

    # Dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity)

    # Distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor

    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)

    # Randomness factor
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1 * (1 - cumulative_demand / total_capacity)

    # Diversity factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2 / (torch.sum(torch.abs(diversity_factor), dim=0) + 1e-8) * (1 - cumulative_demand / total_capacity)

    # Core objectives
    core_objectives = distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty

    # Total heuristics
    heuristics = (2.5 * core_objectives) + randomness_factor + diversity_factor

    # Avoid choosing the depot as the next node
    depot_penalty = torch.arange(n) == 0
    heuristics[depot_penalty] -= 10.0

    # Cap the heuristics
    heuristics = torch.clamp(heuristics, min=-10.0, max=10.0)

    return heuristics
```
