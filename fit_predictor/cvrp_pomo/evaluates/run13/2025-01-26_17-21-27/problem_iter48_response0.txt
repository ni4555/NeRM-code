```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Apply scaling factors to emphasize core objectives
    scaling_factors = torch.tensor([3.0, 1.0, 1.0, 1.0])
    
    # Combine heuristics with scaling factors
    heuristics = (scaling_factors[0] * dynamic_capacity_penalty +
                  scaling_factors[1] * distance_scaling +
                  scaling_factors[2] * overflow_penalty +
                  scaling_factors[3] * load_balance_penalty)
    
    # Introduce controlled randomness for diversity
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.05
    
    # Adjust penalties based on current state of the route
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    early_imbalance = torch.where(load_balance > 1e-2, torch.ones_like(load_balance), torch.zeros_like(load_balance))
    
    # Scale penalties to balance diversity and core objectives
    heuristics *= early_overflow * early_imbalance
    
    # Apply randomness with a controlled factor to encourage diversity
    heuristics += diversity_factor * early_overflow * early_imbalance
    
    # Ensure that penalties do not dominate the heuristic values and apply final scaling
    heuristics = torch.clamp(heuristics, min=-100, max=100)
    heuristics *= scaling_factors[0]
    
    # Apply a large penalty for the depot to return to itself
    heuristics[0, 0] = -1000
    
    return heuristics
```
