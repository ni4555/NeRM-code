```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Introduce a dynamic demand threshold to encourage smaller routes
    demand_threshold = (total_capacity / (n - 1)) / 2
    demand_penalty = torch.where(cumulative_demand < demand_threshold, 0.0, -1.0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    # Increase the penalty for routes that exceed the demand threshold
    enhanced_demand_penalty = demand_penalty * (cumulative_demand - demand_threshold)
    dynamic_capacity_penalty = -torch.log1p(torch.abs(total_capacity - cumulative_demand) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    heuristics = distance_scaling + dynamic_capacity_penalty + enhanced_demand_penalty
    return heuristics
```
