```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Enhanced distance penalty to account for cumulative load and remaining distance to depot
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8) * (1 + cumulative_demand / total_capacity + (total_capacity - cumulative_demand) / total_capacity)
    
    # Dynamic capacity penalty based on the remaining capacity of the vehicle
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Focus on the most loaded vehicle to avoid overloading
    max_demand = torch.max(cumulative_demand)
    max_demand_penalty = -torch.log1p(max_demand - total_capacity / n - 1e-8)
    
    # Avoid high density regions by penalizing nodes with high demand per distance ratio
    high_demand_density = demands / (distance_matrix + 1e-8)  # Adding 1e-8 to avoid division by zero
    high_demand_density_penalty = -torch.log1p(high_demand_density - 1e-8)
    
    # Combine all penalties with a focus on distance and load balancing
    heuristics = distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty + max_demand_penalty + high_demand_density_penalty
    
    # Scale the heuristics to ensure they are within a reasonable range
    scaling_factor = 3.0
    heuristics = heuristics * scaling_factor
    
    # Cap the heuristics to avoid overflow and underflow
    heuristics = torch.clamp(heuristics, min=-100, max=100)
    
    return heuristics
```
