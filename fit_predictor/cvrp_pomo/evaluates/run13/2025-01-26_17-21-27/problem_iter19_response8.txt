```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    demand_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    demand_scale = (1 + cumulative_demand / total_capacity)
    capacity_balance = (total_capacity - cumulative_demand) / total_capacity
    heuristics = distance_penalty * demand_scale + demand_penalty * capacity_balance
    return heuristics
```
