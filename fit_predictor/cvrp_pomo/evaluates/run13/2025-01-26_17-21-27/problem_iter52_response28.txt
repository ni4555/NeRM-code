```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Scaling factors for the penalties
    scaling_factor_distance = 0.5
    scaling_factor_capacity = 1.0
    scaling_factor_overflow = 1.5
    scaling_factor_balance = 0.5
    
    # Combined penalties
    combined_penalties = (distance_scaling * scaling_factor_distance +
                          dynamic_capacity_penalty * scaling_factor_capacity +
                          overflow_penalty * scaling_factor_overflow +
                          load_balance_penalty * scaling_factor_balance)
    
    # Introduce controlled randomness for diversity
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Apply diversity to the combined penalties
    combined_penalties = combined_penalties * (1 - diversity_factor) + diversity_factor * torch.ones_like(combined_penalties)
    
    # Adjust penalties to favor balanced load and prevent overflow
    balanced_load_bonus = torch.where(
        load_balance < total_capacity_vector * 0.1,
        combined_penalties,
        combined_penalties * 0.5
    )
    
    # Early overflow detection and response
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    combined_penalties *= early_overflow
    
    # Final heuristics
    heuristics = combined_penalties
    
    # Return the adjusted heuristics with penalties and diversity factors
    return heuristics
```
