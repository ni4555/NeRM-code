```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    demand_penalty_threshold = (demands > total_capacity / 2).float() * (total_capacity - demands)
    heuristics = distance_scaling - (demand_penalty_threshold.unsqueeze(1) * (torch.arange(n) == 0).float().unsqueeze(0))
    return heuristics
```
