```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = (1 / n) * total_capacity * torch.ones_like(cumulative_demand)
    
    # Early overflow detection with immediate return
    early_return = torch.where(
        cumulative_demand > total_capacity_vector,
        -torch.log1p(cumulative_demand - total_capacity_vector - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Penalty for non-uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Scaling factor for core objectives
    scaling_factor = 3.0
    
    # Distance heuristic scaled with cumulative demand
    distance_heuristic = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_heuristic *= (1 + cumulative_demand / total_capacity)
    
    # Dynamic capacity heuristic scaled with remaining capacity
    capacity_heuristic = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    capacity_heuristic *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Combine heuristics with penalties
    heuristics = scaling_factor * (
        distance_heuristic + capacity_heuristic + early_return + balance_penalty
    )
    
    # Introduce randomness to escape local optima
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Apply penalties and randomness
    heuristics += randomness_factor
    return heuristics
```
