```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty with adaptive scaling and early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Diversity factor that encourages exploration of less connected areas
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Scaling factors for each component
    scaling_factor = 2.5
    capacity_scale = 1.2
    distance_scale = 0.8
    overflow_scale = 1.5
    load_balance_scale = 1.0
    randomness_scale = 0.1
    
    # Combine all heuristics components, balancing the impact of each
    heuristics = (
        scaling_factor * (
            capacity_scale * dynamic_capacity_penalty +
            distance_scale * distance_scaling +
            overflow_scale * overflow_penalty +
            load_balance_scale * load_balance_penalty
        ) +
        randomness_scale * randomness_factor +
        diversity_factor
    )
    
    # Adjust heuristics based on early overflow and imbalance
    heuristics *= (1 + early_overflow)
    
    # Mutation: Introduce an additional penalty for heavily loaded vehicles
    heavily_loaded_penalty = torch.where(
        cumulative_demand > total_capacity_vector,
        heuristics * 0.5,
        torch.zeros_like(heuristics)
    )
    
    # Mutation: Modify the randomness factor to be more impactful during overflow
    randomness_factor_overflow = torch.where(
        early_overflow,
        randomness_factor * 0.5,
        randomness_factor
    )
    
    # Combine all factors for the final heuristics
    heuristics = (
        scaling_factor * (
            capacity_scale * dynamic_capacity_penalty +
            distance_scale * distance_scaling +
            overflow_scale * overflow_penalty +
            load_balance_scale * load_balance_penalty
        ) +
        randomness_factor_overflow +
        heavily_loaded_penalty
    )
    
    # Cap the heuristics to maintain stability
    heuristics = torch.clamp(heuristics, min=-10.0, max=10.0)
    
    # Apply a large penalty for the depot to return to itself
    heuristics[0, 0] = -1e7
    
    return heuristics
```
