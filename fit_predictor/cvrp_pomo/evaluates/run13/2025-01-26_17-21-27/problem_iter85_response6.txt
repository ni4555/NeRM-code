```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_factor = total_capacity / n
    
    # Dynamic capacity penalty with adaptive scaling and early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - capacity_factor) - 1e-8)
    overflow_penalty = (cumulative_demand + demands) > capacity_factor
    dynamic_capacity_penalty *= (1 + 0.3 * (capacity_factor - cumulative_demand) / capacity_factor) * torch.where(overflow_penalty, 1, 0)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (capacity_factor * 5))
    distance_scaling *= (1 + cumulative_demand / capacity_factor) * time_factor
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > capacity_factor,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - capacity_factor - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - capacity_factor)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / capacity_factor)
    
    # Apply a scaling factor to prioritize core objectives
    scaling_factor = 2.5
    heuristics = (
        scaling_factor * (
            distance_scaling +
            dynamic_capacity_penalty +
            overflow_penalty +
            load_balance_penalty
        ) +
        randomness_factor
    )
    
    # Introduce time-adaptive diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / capacity_factor)
    
    # Adjust heuristics based on early overflow and imbalance
    heuristics *= (1 + overflow_penalty)
    heuristics += diversity_factor
    
    return heuristics
```
