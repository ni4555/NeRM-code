```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty to encourage vehicles to return to the depot
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty based on cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Introduce randomness for diversity without overwhelming other objectives
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Combine heuristics with a strong emphasis on dynamic capacity, distance scaling, and load balance
    combined_heuristics = dynamic_capacity_penalty + distance_scaling + load_balance_penalty
    
    # Scale the combined heuristics to prioritize these objectives
    scaling_factor = 2.0
    heuristics = scaling_factor * combined_heuristics
    
    # Introduce diversity without overwhelming the primary objectives
    heuristics += diversity_factor
    
    # Cap the heuristics to maintain a balance between randomness and the primary objectives
    heuristics = torch.clamp(heuristics, min=-5.0, max=5.0)
    
    # Apply a large penalty for the depot to return to itself
    heuristics[0, 0] = -1000
    
    return heuristics
```
