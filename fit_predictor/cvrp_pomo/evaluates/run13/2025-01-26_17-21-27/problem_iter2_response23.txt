```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_normalized = (demands / total_demand) * 10  # Normalize demands to have higher values for higher demand

    # Use a weighted sum of demand and distance to create the heuristic
    heuristic_matrix = torch.abs(distance_matrix - 0.5 * (demands + demand_normalized))

    # Invert the heuristic matrix to promote higher values
    heuristic_matrix = -heuristic_matrix

    # Clamp the values to ensure no negative values exist
    heuristic_matrix = torch.clamp(heuristic_matrix, min=0)

    return heuristic_matrix
```
