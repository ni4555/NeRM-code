```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Use logarithmic scale for penalties to emphasize core objectives
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Dynamic scaling for capacity penalty based on the remaining capacity
    dynamic_capacity_scale = (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Scaling for distance based on cumulative demand to balance distance with load
    distance_scale = (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to the depot to minimize the risk of overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Dynamic scaling for penalties to adapt to the problem state
    heuristics = distance_scale * distance_penalty + dynamic_capacity_scale * capacity_penalty + overflow_penalty + load_balance_penalty
    
    # Scaling factor to prioritize core objectives
    scaling_factor = 3.0
    heuristics *= scaling_factor
    
    # Additional penalty for high load balance to encourage diversity in the solution
    high_load_balance_penalty = torch.where(
        load_balance > total_capacity / (3 * n),
        -torch.log1p(load_balance - 1e-8),
        torch.zeros_like(load_balance)
    )
    
    heuristics += high_load_balance_penalty
    
    # Clipping the heuristics to ensure non-negative values
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
