```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Use logarithmic capacity penalty for overflow
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity / (n - 1)))
    
    # Use logarithmic distance penalty
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Dynamic distance scaling to reflect load build-up
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    
    # Dynamic capacity scaling
    capacity_scaling = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Introduce overflow penalties for edges that lead to capacity overflow
    overflow_penalty = torch.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                total_demand = cumulative_demand[j] + demands[j]
                if total_demand > total_capacity:
                    overflow_penalty[i, j] = -torch.log1p(total_demand - total_capacity - 1e-8)
    
    # Apply the heuristics by combining the scaled penalties
    heuristics = (distance_scaling + capacity_scaling + overflow_penalty)
    
    # Add depot penalty to maintain diversity
    depot_penalty = torch.arange(n) == 0
    heuristics[depot_penalty] = -1
    
    return heuristics
```
