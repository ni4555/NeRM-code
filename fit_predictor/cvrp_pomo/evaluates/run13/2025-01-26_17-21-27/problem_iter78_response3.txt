```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    def dynamic_penalty_component():
        dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
        early_overflow = cumulative_demand > total_capacity_vector
        return dynamic_capacity_penalty * (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)

    def distance_penalty_component():
        distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
        time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
        return distance_scaling * (1 + cumulative_demand / total_capacity) * time_factor

    def overflow_penalty_component():
        overflow_penalty = torch.where(
            (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
            -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
            torch.zeros_like(cumulative_demand)
        )
        return overflow_penalty

    def load_balance_component():
        load_balance = torch.abs(cumulative_demand - total_capacity_vector)
        return -torch.log1p(load_balance - 1e-8)

    def randomness_component():
        randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
        randomness_factor *= (1 - cumulative_demand / total_capacity)
        return randomness_factor

    def diversity_component():
        diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
        diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
        diversity_factor *= (1 - cumulative_demand / total_capacity)
        return diversity_factor

    core_objectives = (
        distance_penalty_component() +
        dynamic_penalty_component() +
        overflow_penalty_component() +
        load_balance_component()
    )
    
    scaling_factor = 2.5
    heuristics = scaling_factor * core_objectives + randomness_component()
    heuristics += diversity_component()
    
    early_overflow = cumulative_demand > total_capacity_vector
    heuristics *= (1 + early_overflow)
    
    depot_penalty = torch.arange(n) == 0
    heuristics = heuristics - depot_penalty.float().unsqueeze(0)
    
    heuristics = torch.clamp(heuristics, min=-10.0, max=10.0)
    
    return heuristics
```
