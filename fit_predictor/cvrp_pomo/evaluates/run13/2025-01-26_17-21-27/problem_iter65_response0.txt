```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Early detection of capacity issues to reduce unnecessary computation
    early_overflow = cumulative_demand > total_capacity_vector
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    capacity_penalty *= (1 + early_overflow)
    
    # Modularize the computation of distance scaling and load balance
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine penalties in a single vectorized operation
    heuristics_base = distance_scaling + capacity_penalty + load_balance_penalty
    
    # Integrate randomness and diversity into the heuristic for exploration
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Integrate the randomness and diversity into the base heuristic
    heuristics = heuristics_base + randomness_factor + diversity_factor
    
    # Adjust heuristics based on early overflow
    heuristics *= (1 + early_overflow)
    
    return heuristics
```
