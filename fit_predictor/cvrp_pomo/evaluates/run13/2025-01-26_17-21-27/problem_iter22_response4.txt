```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate distance penalty
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Calculate dynamic capacity penalty
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Calculate overflow penalty for edges that lead to overflow capacity
    overflow_penalty = -torch.log1p(torch.abs(cumulative_demand + demands - total_capacity) - 1e-8)
    
    # Scale down the influence of penalties as cumulative demand increases
    demand_scaling = (1 + cumulative_demand / total_capacity) ** 2
    
    # Combine the penalties with the scaling factors
    heuristics = (distance_penalty + capacity_penalty * demand_scaling + overflow_penalty * demand_scaling)
    
    # Aggressive scaling factor to enhance penalty impact
    scaling_factor = 2.5
    heuristics *= scaling_factor
    
    return heuristics
```
