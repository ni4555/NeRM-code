```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    
    # Normalize by demand to emphasize high-demand nodes
    demand_normalized = (demands / total_demand) * 10
    
    # Incorporate distance and demand without absolute terms
    heuristic_matrix = (distance_matrix ** 2) + demand_normalized
    
    # Introduce balancing factors for controlled influence
    balancing_factor = torch.zeros_like(distance_matrix)
    balancing_factor[distance_matrix < 50] = 1.2  # Example balancing factor
    balancing_factor[distance_matrix >= 50] = 1.0
    
    # Apply the balancing factor
    heuristic_matrix *= balancing_factor
    
    # Clamp to eliminate negative values for a smooth gradient
    heuristic_matrix = torch.clamp(heuristic_matrix, min=0)
    
    return heuristic_matrix
```
