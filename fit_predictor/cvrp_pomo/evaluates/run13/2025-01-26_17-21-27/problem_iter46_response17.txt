```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Core objectives: Minimize distance, overflow and non-uniform load
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    load_balance = torch.abs(cumulative_demand - (total_capacity / n))
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine penalties with balancing factors
    distance_weight = 3.0
    overflow_weight = 1.5
    load_balance_weight = 1.0
    
    # Heuristics combining core objectives with balancing factors
    heuristics = distance_weight * distance_penalty + overflow_weight * overflow_penalty + load_balance_weight * load_balance_penalty
    
    # Introduce controlled diversity
    diversity_factor = 0.1
    diversity_influence = torch.randn(n) * diversity_factor
    
    # Heuristics with diversity influence
    heuristics += diversity_influence
    
    return heuristics
```
