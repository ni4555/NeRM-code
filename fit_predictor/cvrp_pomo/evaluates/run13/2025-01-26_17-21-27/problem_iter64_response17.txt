```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Initialize penalties and factors
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    overflow_penalty = torch.zeros_like(cumulative_demand)
    load_balance_penalty = -torch.log1p(torch.abs(cumulative_demand - total_capacity_vector) - 1e-8)
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Apply adaptive scaling and early overflow detection
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
    distance_scaling *= (1 + cumulative_demand / total_capacity) * torch.exp(-cumulative_demand / (total_capacity * 5))
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Apply scaling factors and combine penalties
    scaling_factor = 2.5
    heuristics = (
        scaling_factor * (
            distance_scaling +
            dynamic_capacity_penalty +
            overflow_penalty +
            load_balance_penalty
        ) +
        randomness_factor
    )
    
    # Introduce diversity factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += diversity_factor
    
    # Adjust heuristics based on early overflow and imbalance
    heuristics *= (1 + early_overflow)
    
    # Exclude the depot from itself
    depot_penalty = torch.arange(n) == 0
    heuristics -= depot_penalty.float().unsqueeze(0)
    
    # Normalize the heuristics
    heuristics /= (heuristics.sum() + 1e-8)
    
    return heuristics
```
