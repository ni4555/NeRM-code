```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate dynamic penalties
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Enhanced distance penalty based on cumulative load
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand / total_capacity)
    
    # Scaling factors for penalties
    capacity_scale = 2.0
    distance_scale = 1.0
    overflow_scale = 1.5
    
    # Combine penalties with scaling factors
    heuristics = capacity_scale * dynamic_capacity_penalty + \
                 distance_scale * distance_scaling + \
                 overflow_scale * overflow_penalty
    
    # Encourage uniform load distribution by penalizing high load imbalance
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    load_balance_scale = 1.0
    heuristics += load_balance_scale * load_balance_penalty
    
    return heuristics
```
