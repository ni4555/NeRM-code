```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()

    # Calculate cumulative demand
    cumulative_demand = torch.cumsum(demands, dim=0)

    # Core objective: Distance scaled by cumulative demand and total capacity
    distance_scaled = torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_scaled * (1 + cumulative_demand / total_capacity)

    # Dynamic capacity penalty considering remaining capacity
    dynamic_capacity_penalty = torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)

    # Overflow penalty with early return to avoid overloading
    overflow_penalty = torch.where(
        (cumulative_demand + demands) > total_capacity,
        -torch.log1p((cumulative_demand + demands) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )

    # Load balance penalty to encourage even distribution of load
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = torch.log1p(load_balance - 1e-8)

    # Combine penalties and factors, prioritize core objectives
    base_heuristic = distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty

    # Dynamic scaling based on cumulative demand and total capacity
    dynamic_scaling = torch.exp(-torch.abs(cumulative_demand / total_capacity))
    heuristics = base_heuristic * dynamic_scaling

    # Ensure the depot penalty is subtracted to prevent it from being chosen as a next node
    depot_penalty = torch.arange(n) == 0
    heuristics = heuristics - depot_penalty.float().unsqueeze(0)

    return heuristics
```
