```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    base_distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    base_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = base_capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = base_distance_penalty * (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Diversity heuristic to avoid selecting similar edges
    diversity_penalty = torch.sum(torch.abs(distance_matrix - distance_matrix.mean()), dim=0)
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # High load balance penalty to discourage heavily loaded vehicles
    high_load_balance_penalty = torch.where(
        load_balance > total_capacity / (2 * n),
        -torch.log1p(load_balance - 1e-8),
        torch.zeros_like(load_balance)
    )
    
    # Apply strong scaling factor to prioritize core objectives
    scaling_factor = 3.0
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty)
    
    # Apply diversity factor to penalize edges that do not add diversity
    diversity_factor = 0.5
    heuristics -= diversity_factor * diversity_penalty
    
    # Adjust the high load balance penalty to encourage diversity
    heuristics += high_load_balance_penalty
    
    # Normalize the heuristics to sum to 1 for each edge
    penalties_sum = heuristics.sum(dim=1, keepdim=True)
    normalized_heuristics = heuristics / (penalties_sum + 1e-8)
    
    # Introduce a penalty for the depot to return to itself
    normalized_heuristics[0] = -1000
    
    return normalized_heuristics
```
