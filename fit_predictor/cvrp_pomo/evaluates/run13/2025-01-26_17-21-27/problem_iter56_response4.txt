```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Time-adaptive distance penalty
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= time_factor
    
    # Early overflow detection and capacity penalty
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
    
    # Load balancing penalty
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Scaling factor to prioritize core objectives
    scaling_factor = 2.5
    heuristics = (
        scaling_factor * (
            distance_scaling +
            dynamic_capacity_penalty +
            overflow_penalty +
            load_balance_penalty
        ) +
        randomness_factor
    )
    
    # Time-adaptive diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Mutation: Introduce a more aggressive balance to prevent local optima
    imbalance_factor = (torch.abs(cumulative_demand - total_capacity_vector) > 0.1 * total_capacity_vector).float()
    heuristics *= imbalance_factor
    
    # Mutation: Introduce a penalty for edges that have been visited more than once
    visited_edges = torch.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            if cumulative_demand[i] > 0 and cumulative_demand[j] > 0:
                visited_edges[i, j] = 1
    visited_penalty = -torch.log1p(visited_edges)
    heuristics += visited_penalty
    
    # Apply time-adaptive scaling to the combined heuristics
    time_factor_combined = torch.exp(-torch.sum(heuristics) / (total_capacity * 10))
    heuristics *= time_factor_combined
    
    return heuristics
```
