```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = distance_penalty * (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Apply a strong scaling factor to prioritize core objectives
    scaling_factor = 3.0
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty)
    
    # Dynamic scaling for impact and efficiency
    dynamic_scaling = (1 + cumulative_demand / total_capacity) * (1 + (total_capacity - cumulative_demand) / total_capacity)
    heuristics *= dynamic_scaling
    
    # Encourage diversity by introducing random noise
    random_noise = torch.rand_like(heuristics) * (1e-6)
    heuristics += random_noise
    
    # Minimize computation by vectorizing operations and focusing on key factors
    heuristics = heuristics.clamp(min=-1e8, max=1e8)  # Clamp to avoid numerical issues
    
    # Apply a penalty for the depot to return to itself
    heuristics[0] = -1000
    
    return heuristics
```
