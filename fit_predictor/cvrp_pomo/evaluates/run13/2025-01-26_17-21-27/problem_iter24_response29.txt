```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    balance_factor = (cumulative_demand - total_capacity / 2) / total_capacity

    # Introduce a balance penalty to encourage more balanced load distribution
    balance_penalty = -balance_factor ** 2

    # Scale penalties dynamically with demand
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    distance_scaling = distance_penalty * (1 + cumulative_demand)

    # Use a vectorized approach to calculate overflow penalties
    overflow_penalty = torch.max(torch.zeros_like(distance_matrix),
                                 -torch.log1p(torch.abs(cumulative_demand + demands - total_capacity) - 1e-8))

    # Combine penalties with a scaling factor
    scaling_factor = 1.5
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + balance_penalty + overflow_penalty)

    # Add a penalty for the depot to return to itself
    heuristics[0] = -1000

    return heuristics
```
