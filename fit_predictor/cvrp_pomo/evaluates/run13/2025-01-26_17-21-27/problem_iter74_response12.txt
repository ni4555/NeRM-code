```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Capacity penalty for overflow
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity))
    
    # Distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 3))
    distance_scaling *= time_factor
    
    # Overflow penalty
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic
    load_balance_factor = 1 / (1 + cumulative_demand / total_capacity)
    load_balance_penalty = -torch.log1p(torch.abs(cumulative_demand - total_capacity)) * load_balance_factor
    
    # Combine core heuristics
    heuristics = capacity_penalty + distance_scaling + overflow_penalty + load_balance_penalty
    
    # Randomness and diversity factors
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    
    heuristics += randomness_factor + diversity_factor
    
    # Normalize heuristics
    heuristics /= heuristics.sum() / n
    
    return heuristics
```
