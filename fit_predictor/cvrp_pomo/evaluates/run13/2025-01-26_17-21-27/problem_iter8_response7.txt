```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    cumulative_demand_scaled = (cumulative_demand - cumulative_demand.min()) / (cumulative_demand.max() - cumulative_demand.min())
    heuristics = distance_penalty + cumulative_demand_scaled
    heuristics = heuristics * (total_capacity / cumulative_demand.max())
    heuristics[heuristics <= 0] = -1e8  # Ensure negative values for undesirable edges
    return heuristics
```
