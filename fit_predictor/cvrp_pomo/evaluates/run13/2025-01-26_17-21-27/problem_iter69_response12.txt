```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty with controlled exploration and early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    exploration_factor = 0.5 + (torch.rand_like(demands) - 0.5) * 0.2
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= (exploration_factor * (1 + early_overflow))
    
    # Distance penalty optimized with controlled randomness
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    randomness_factor = 0.1 + torch.rand_like(distance_scaling) * 0.3
    distance_scaling *= (randomness_factor * torch.rand_like(distance_scaling))
    
    # Overflow penalty refined for early return
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic enhanced with balanced objective normalization
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Apply penalties with balanced weights
    heuristics = (
        (0.6 * dynamic_capacity_penalty) +
        (0.4 * distance_scaling) +
        (0.2 * overflow_penalty) +
        (0.1 * load_balance_penalty)
    )
    
    # Introduce controlled randomness for diversity without overwhelming penalties
    randomness_factor = 0.2 * torch.rand_like(heuristics)
    heuristics += randomness_factor
    
    # Normalize the heuristics for fairness
    max_value = torch.max(heuristics)
    min_value = torch.min(heuristics)
    heuristics = (heuristics - min_value) / (max_value - min_value)
    
    return heuristics
```
