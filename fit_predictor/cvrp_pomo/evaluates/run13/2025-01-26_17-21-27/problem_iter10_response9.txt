```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    penalty = -torch.abs(demands).min().to(distance_matrix.device)
    cumulative_demand = torch.cumsum(demands, dim=0)
    heuristics = (distance_matrix + cumulative_demand * penalty) - (demands * penalty)
    heuristics[heuristics < 0] = 0  # Set negative heuristics to zero
    return heuristics
```
