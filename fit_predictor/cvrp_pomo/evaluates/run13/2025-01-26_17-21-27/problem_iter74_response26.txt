```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Core objectives
    core_objectives = torch.log1p(-torch.abs(distance_matrix))  # Distance penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)  # Capacity penalty
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )  # Overflow penalty
    load_balance_penalty = -torch.log1p(torch.abs(cumulative_demand - total_capacity_vector) - 1e-8)  # Load balance penalty
    
    # Scale the core objectives
    core_objectives = core_objectives + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty
    
    # Randomness and diversity factors
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    
    # Time-adaptive scaling
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine heuristics with core objectives and factors
    heuristics = core_objectives + randomness_factor + diversity_factor
    
    # Adjust heuristics based on early overflow and imbalance
    early_overflow = cumulative_demand > total_capacity_vector
    heuristics *= (1 + early_overflow)
    
    # Cap the heuristics to maintain stability
    heuristics = torch.clamp(heuristics, min=-10.0, max=10.0)
    
    # Subtract depot penalty
    depot_penalty = torch.arange(n) == 0
    heuristics = heuristics - depot_penalty.float().unsqueeze(0)
    
    return heuristics
```
