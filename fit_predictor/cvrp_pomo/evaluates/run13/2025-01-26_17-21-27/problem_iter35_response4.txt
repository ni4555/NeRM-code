```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8) * (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Diversity in heuristic selection to escape local optima
    diversity_penalty = -torch.log1p(torch.abs(distance_matrix - torch.median(distance_matrix, dim=0)[0]) - 1e-8)
    
    # Load balancing heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Apply a scaling factor to prioritize core objectives
    scaling_factor = 3.0
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + diversity_penalty + load_balance_penalty)
    
    # Adaptively scale heuristics and penalties for early overflow and imbalance
    imbalance_penalty = -torch.log1p(torch.abs(torch.mean(demands) - total_capacity / n) - 1e-8)
    heuristics += imbalance_penalty
    
    return heuristics
```
