```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = torch.clamp(
        -torch.log1p(torch.abs(demands - (total_capacity - cumulative_demand)) - 1e-8),
        min_value=0.0
    ) * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = torch.clamp(
        -torch.log1p(load_balance - 1e-8),
        min_value=0.0
    )
    
    # Apply a scaling factor to the penalties
    scaling_factors = torch.cat([
        torch.full_like(distance_scaling, 1.0),  # Distance penalty is scaled to give less weight
        torch.full_like(dynamic_capacity_penalty, 0.5),  # Capacity penalty is scaled to half its importance
        torch.full_like(overflow_penalty, 1.5),  # Overflow penalty is scaled to a higher weight
        torch.full_like(load_balance_penalty, 0.3)  # Load balance penalty is scaled to a moderate weight
    ])
    
    # Blend penalties and scaling factors
    heuristics = scaling_factors * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty)
    
    # Integrate dynamic scaling to balance penalties
    dynamic_scaling_factor = torch.clamp(
        (1 / (1 + (cumulative_demand / total_capacity)**2)),
        min_value=0.1, max_value=2.0
    )
    heuristics *= dynamic_scaling_factor
    
    # Apply an additional penalty for high load balance to avoid overloading any single vehicle
    high_load_balance_penalty = torch.where(
        load_balance > total_capacity / (3 * n),
        torch.clamp(
            -torch.log1p(load_balance - 1e-8),
            min_value=0.0
        ),
        torch.zeros_like(load_balance)
    )
    
    heuristics += high_load_balance_penalty
    return heuristics
```
