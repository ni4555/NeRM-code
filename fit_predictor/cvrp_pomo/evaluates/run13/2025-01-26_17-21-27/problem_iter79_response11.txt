```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Scaled capacity penalty for dynamic adjustment
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity / n) - 1e-8)
    
    # Enhanced distance penalty with adaptive scaling
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_penalty *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with immediate return to avoid overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to encourage balance
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Apply a scaling factor to prioritize core objectives
    scaling_factor = 2.0
    heuristics = (
        scaling_factor * (
            distance_penalty +
            capacity_penalty +
            overflow_penalty +
            load_balance_penalty
        ) +
        randomness_factor
    )
    
    # Introduce diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Adjust heuristics based on early overflow and imbalance
    heuristics *= (1 + (cumulative_demand > total_capacity_vector).float())
    heuristics += diversity_factor
    
    return heuristics
```
