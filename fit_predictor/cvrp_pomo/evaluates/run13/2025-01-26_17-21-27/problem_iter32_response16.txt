```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    overflow_penalty = -torch.log1p(
        (cumulative_demand[:, None] + demands[None, :]) - total_capacity
    )
    overflow_penalty = torch.clamp(overflow_penalty, min=0)
    
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    load_balance_penalty = -torch.log1p(torch.abs(cumulative_demand - total_capacity / n) - 1e-8)
    
    # Calculate scaled capacity penalties for edges
    scaled_capacity_penalty = distance_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Vectorized load balance penalty
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Calculate the heuristics
    heuristics = scaled_capacity_penalty + distance_penalty + overflow_penalty + load_balance_penalty
    
    # Apply a penalty for the depot to return to itself
    heuristics[0] = -1000
    
    return heuristics
```
