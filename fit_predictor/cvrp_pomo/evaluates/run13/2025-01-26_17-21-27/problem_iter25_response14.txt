```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Introduce exponential decay for demand awareness
    demand_decay = torch.exp(-torch.abs(demands - total_capacity) / total_capacity)
    
    # Integrate demand scaling
    demand_scaling = demands * demand_decay
    
    # Balance load heuristic with exponential decay
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_decay = torch.exp(-load_balance)
    
    # Dynamic scaling for load balance
    load_balance_scaling = load_balance_decay * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Aggressive scaling factor
    scaling_factor = 2.0
    heuristics = scaling_factor * (distance_penalty + dynamic_capacity_penalty + demand_scaling + load_balance_scaling)
    return heuristics
```
