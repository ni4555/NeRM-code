```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with capped load difference
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    load_balance_penalty = torch.clamp(load_balance_penalty, max=0)
    
    # Apply randomness with a lower scale factor to maintain stability
    random_factor = torch.abs(torch.randn_like(demands)) * 0.05
    
    # Apply scaling factors to heuristics
    scaling_factor = 2.0
    distance_penalty_scaling = 1.5
    capacity_penalty_scaling = 1.0
    overflow_penalty_scaling = 1.0
    load_balance_scaling = 1.0
    
    # Combine heuristics with scaling
    heuristics = (
        (distance_penalty_scaling * distance_scaling) +
        (capacity_penalty_scaling * dynamic_capacity_penalty) +
        (overflow_penalty_scaling * overflow_penalty) +
        (load_balance_scaling * load_balance_penalty)
    )
    
    # Add randomness to foster diversity
    heuristics += random_factor
    
    # Apply penalties for early overflow and imbalance
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    imbalance_penalty = torch.where(load_balance > 1e-3, torch.ones_like(load_balance), torch.zeros_like(load_balance))
    heuristics *= early_overflow * imbalance_penalty
    
    # Normalize heuristics to maintain a balance between penalties and rewards
    heuristics /= (heuristics.abs().max() + 1e-8)
    
    return heuristics
```
