```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    dynamic_demand = (cumulative_demand / (total_capacity + 1e-8)) * (demands / total_capacity)

    dynamic_distance = distance_matrix * (cumulative_demand / total_capacity)
    demand_penalty = -torch.log1p(dynamic_demand - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(dynamic_distance) - 1e-8)

    heuristics = demand_penalty + distance_penalty
    return heuristics
```
