```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    balance_factor = 1 / (torch.max(torch.abs(cumulative_demand - total_capacity / n), torch.zeros_like(cumulative_demand)) + 1e-8)

    # Early overflow detection and capacity penalty
    early_overflow = cumulative_demand > total_capacity / n
    capacity_penalty = torch.log1p(torch.abs(demands - total_capacity / n) - 1e-8) * balance_factor

    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = torch.log1p(torch.abs(distance_matrix) - 1e-8) * balance_factor
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor

    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity / n,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity / n - 1e-8),
        torch.zeros_like(cumulative_demand)
    )

    # Load balance heuristic with refined balance factor
    load_balance = balance_factor * torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)

    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1 * balance_factor
    randomness_factor *= (1 - cumulative_demand / total_capacity)

    # Introduce diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)

    # Combine components based on their relative importance and adjust for early overflow
    heuristics = (
        capacity_penalty +
        distance_scaling +
        overflow_penalty +
        load_balance_penalty +
        randomness_factor +
        diversity_factor
    ) * (1 + early_overflow)

    return heuristics
```
