```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    
    # Dynamic capacity penalty based on the remaining capacity of each vehicle
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Overflow penalty to detect when the total demand exceeds the vehicle capacity
    overflow_penalty = -torch.log1p(torch.abs(cumulative_demand + demands - total_capacity) - 1e-8)
    
    # Incorporate the penalties with a scaling factor to balance the impact of each
    scaling_factor = 2.0
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty)
    return heuristics
```
