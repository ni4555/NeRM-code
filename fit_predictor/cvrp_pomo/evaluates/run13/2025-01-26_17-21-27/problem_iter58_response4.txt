```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Enhanced distance scaling considering cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Dynamic capacity scaling based on remaining capacity
    dynamic_capacity_scaling = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_scaling *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Overflow penalty scaled by the risk of overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic encouraging uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Prioritize core objectives
    core_objectives = 3.0 * distance_scaling + 2.0 * dynamic_capacity_scaling + 1.5 * overflow_penalty + 1.5 * load_balance_penalty
    
    # Introduce controlled randomness for diversity
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Final heuristic value, combining core objectives and diversity
    heuristics = core_objectives + diversity_factor
    
    # Ensure heuristics are within a reasonable range
    heuristics = torch.clamp(heuristics, min=-10, max=10)
    
    return heuristics
```
