```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Introduce a penalty that increases with the cumulative demand
    dynamic_penalty = -torch.log1p(cumulative_demand)
    
    # Apply a scaling to prioritize distance and capacity considerations
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Scale the penalties by the cumulative demand to ensure they adapt with the load
    distance_scaling = distance_penalty * (cumulative_demand / total_capacity)
    capacity_scaling = capacity_penalty * (cumulative_demand / total_capacity)
    
    # Encourage diversity by adding a penalty that promotes different routes
    diversity_penalty = -torch.log1p(torch.abs(cumulative_demand[:, None] - cumulative_demand[None, :]) - 1e-8)
    
    # Encourage load balancing by adding a penalty for large deviations from average load
    average_demand = total_capacity / n
    load_balance_penalty = -torch.log1p(torch.abs(cumulative_demand - average_demand) - 1e-8)
    
    # Introduce an adaptive scaling factor to handle early overflow and imbalances
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Adjust scaling factors to account for early overflow and imbalances
    scaling_factor = 1.0 + torch.clamp(cumulative_demand / total_capacity - 1, min=0)
    
    # Combine all heuristics and penalties, and scale by the diversity heuristic
    heuristics = scaling_factor * (distance_scaling + capacity_scaling + diversity_penalty + load_balance_penalty + overflow_penalty)
    
    return heuristics
```
