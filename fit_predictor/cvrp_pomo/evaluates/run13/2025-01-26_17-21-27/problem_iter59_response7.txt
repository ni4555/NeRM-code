```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Adaptive capacity scaling based on early overflow detection
    capacity_factor = torch.where(
        cumulative_demand > demands[:, None],
        0.7 * demands,
        1.3 * demands
    )
    
    # Dynamic distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 2))
    distance_scaling *= (1 + 0.1 * (cumulative_demand / total_capacity) * time_factor)
    
    # Load balance heuristic with enhanced balance factor
    balance_factor = (1 + (torch.abs(cumulative_demand - (demands / n)) / total_capacity))
    
    # Overflow penalty with controlled randomness
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_penalty *= (1 - 0.1 * torch.exp(-cumulative_demand / (total_capacity * 1)))
    
    # Randomness factor with early termination
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.05
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Prioritize core objectives with a scaling factor
    scaling_factor = 2.0
    
    # Apply all heuristics to the distance matrix
    heuristics = (
        scaling_factor * (
            balance_factor * distance_scaling +
            capacity_factor * overflow_penalty +
            randomness_factor
        )
    )
    
    # Add diversity factor to promote exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.15
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    
    # Final adjustments for overflow and imbalance
    overflow_adjustment = torch.where(cumulative_demand > demands[:, None], heuristics, heuristics / 2)
    load_balance_adjustment = balance_factor * heuristics
    
    # Combine heuristics
    heuristics = (overflow_adjustment + load_balance_adjustment + diversity_factor) / 3
    
    return heuristics
```
