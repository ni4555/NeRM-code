```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Introduce dynamic penalties for capacity, distance, and load balance
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    load_balance_penalty = torch.abs(cumulative_demand - total_capacity_vector)
    
    # Scale penalties based on cumulative demand
    capacity_scale = (1 + (total_capacity - cumulative_demand) / total_capacity)
    distance_scale = (1 + cumulative_demand / total_capacity)
    load_balance_scale = torch.relu(1 + cumulative_demand / total_capacity)
    
    # Adjust penalties for overflow scenarios
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_scale = torch.relu(1 - cumulative_demand / total_capacity)
    
    # Introduce a diversity heuristic that varies penalties over time
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    diversity_scale = 0.5  # This controls the influence of diversity over time
    
    # Combine the penalties and scale by their respective scales
    combined_penalty = (dynamic_capacity_penalty * capacity_scale +
                        distance_penalty * distance_scale +
                        load_balance_penalty * load_balance_scale +
                        overflow_penalty * overflow_scale +
                        diversity_factor * diversity_scale)
    
    # Scale all heuristics to emphasize the core objectives
    scaling_factor = 3.0
    heuristics = scaling_factor * combined_penalty
    
    # Foster diversity by periodically introducing randomness in penalty adjustments
    # This can help avoid getting stuck in local optima
    random_influence = torch.abs(torch.randn_like(demands)) * 0.05
    random_factor = 0.5  # This controls the intensity of randomness
    heuristics += random_influence * random_factor
    
    return heuristics
```
