```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Use an exponential decay for the dynamic capacity penalty to allow for earlier overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.exp(-torch.abs(demands - total_capacity) - 1e-8))
    
    # Introduce a softer distance scaling to prevent early convergence
    distance_scaling = -torch.log1p(torch.exp(-torch.abs(distance_matrix) - 1e-8))
    
    # Adjust the overflow penalty to be more pronounced as the demand increases
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_penalty *= (1 + cumulative_demand / total_capacity)
    
    # Implement a load balance heuristic that penalizes imbalances more heavily
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    load_balance_penalty *= (1 + load_balance)
    
    # Incorporate randomness with a controlled impact that diminishes as the route fills up
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Scale heuristics to prioritize core objectives
    scaling_factor = 2.0
    heuristics = (
        scaling_factor * (
            distance_scaling +
            dynamic_capacity_penalty +
            overflow_penalty +
            load_balance_penalty
        ) +
        randomness_factor
    )
    
    # Introduce a diversity factor that encourages the search to avoid local optima
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Adjust heuristics to ensure stability and early overflow detection
    stability_factor = (1 + (cumulative_demand > total_capacity_vector))
    heuristics *= stability_factor
    
    # Combine the diversity and stability factors to finish the heuristics
    heuristics += diversity_factor
    
    return heuristics
```
