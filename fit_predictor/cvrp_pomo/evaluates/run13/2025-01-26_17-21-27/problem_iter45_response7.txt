```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Dynamic distance scaling to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Scale objectives dynamically to adapt penalties based on current state
    scaling_factor = torch.clamp(1.0 - (cumulative_demand / total_capacity), min=0.1, max=1.0)
    
    # Introduce diversity to heuristic values to avoid local optima
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.05
    diversity_factor *= torch.clamp(1.0 - (cumulative_demand / total_capacity), min=0.1, max=1.0)
    
    # Encourage early overflow and imbalance detection
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    dynamic_scaling = scaling_factor * early_overflow
    
    # Combine heuristics with scaling and diversity factors
    heuristics = (dynamic_capacity_penalty * dynamic_scaling +
                  distance_scaling * dynamic_scaling +
                  overflow_penalty * dynamic_scaling +
                  load_balance_penalty * dynamic_scaling +
                  diversity_factor)
    
    return heuristics
```
