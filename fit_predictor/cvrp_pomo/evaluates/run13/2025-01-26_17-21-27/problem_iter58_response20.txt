```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty with adaptive scaling and early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Introduce time-adaptive diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Mutation: Introduce a penalty for nodes with high variance in their visitation order
    variance_penalty = -torch.log1p(torch.abs(torch.var(demands[1:])) - 1e-8)
    
    # Mutation: Introduce a discount factor for distant nodes to encourage shorter routes
    distance_discount = torch.exp(-distance_matrix)
    
    # Apply scaling factors to prioritize core objectives
    scaling_factors = {
        'distance': 3.0,
        'capacity': 2.5,
        'overflow': 2.0,
        'balance': 1.5,
        'variance': 1.0,
        'distance_discount': 0.5
    }
    
    # Combine the weighted penalties
    heuristics = (
        scaling_factors['distance'] * distance_scaling +
        scaling_factors['capacity'] * dynamic_capacity_penalty +
        scaling_factors['overflow'] * overflow_penalty +
        scaling_factors['balance'] * load_balance_penalty +
        scaling_factors['variance'] * variance_penalty
    )
    
    # Apply distance discount
    heuristics *= distance_discount
    
    # Introduce diversity by adding randomness
    heuristics += randomness_factor
    
    # Normalize heuristics to ensure they are positive and consistent
    heuristics /= (heuristics.sum() + 1e-8)
    
    return heuristics
```
