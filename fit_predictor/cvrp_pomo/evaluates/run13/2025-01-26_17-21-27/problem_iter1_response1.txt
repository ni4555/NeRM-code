```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    
    # Calculate the sum of demands of all nodes except the depot
    non_depot_demands = demands[1:]
    
    # Calculate the maximum feasible demands for each edge
    max_demand_per_edge = non_depot_demands / non_depot_demands.sum() * total_demand
    
    # Calculate the heuristic value for each edge
    # Promising edges will have high positive values, undesirable edges will have negative values
    heuristic_values = max_demand_per_edge - distance_matrix
    
    # Ensure that edges that exceed the maximum feasible demand have negative values
    heuristic_values[non_depot_demands > max_demand_per_edge] = -torch.inf
    
    return heuristic_values
```
