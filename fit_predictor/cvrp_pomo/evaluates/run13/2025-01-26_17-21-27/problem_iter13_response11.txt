```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    balance_factor = 0.1  # Balance factor for dynamic scaling
    dynamic_scaling = (1 - balance_factor) * cumulative_demand + balance_factor * (total_capacity / cumulative_demand)
    heuristics = (distance_penalty * dynamic_scaling) + capacity_penalty
    return heuristics
```
