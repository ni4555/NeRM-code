```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Dynamic penalties based on cumulative load
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - (total_capacity / (n + 1)))
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Apply a scaling factor to prioritize core objectives
    scaling_factor = 3.0
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty)
    
    # Embrace diversity through rescaling and noise
    rescaling_probability = 0.2
    heuristics *= torch.where(
        torch.rand_like(demands) < rescaling_probability,
        1 / (1 + torch.abs(torch.randn_like(heuristics))),
        1
    )
    
    # Adaptively scale heuristics and penalties for early overflow and imbalance
    early_overflow_penalty = torch.where(cumulative_demand > (total_capacity / (n + 1)), torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    heuristics *= early_overflow_penalty
    
    # Focus on the most promising edges to streamline complexity
    edge_importance = heuristics / (heuristics.abs().sum(dim=1, keepdim=True) + 1e-8)
    heuristics *= edge_importance
    
    return heuristics
```
