```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    remaining_capacity = total_capacity - cumulative_demand
    
    # Early overflow penalty
    early_overflow_penalty = torch.where(
        cumulative_demand > total_capacity,
        -torch.log1p(cumulative_demand - total_capacity - 1e-8),
        torch.zeros_like(distance_matrix)
    )
    
    # Distance penalty scaled by the current load
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_penalty *= (1 + cumulative_demand / total_capacity)
    
    # Dynamic capacity penalty based on the remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(remaining_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + cumulative_demand / total_capacity)
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine penalties with appropriate scaling factors
    heuristics = (
        distance_penalty * 2 +  # Higher weight for distance
        dynamic_capacity_penalty * 1.5 +  # Moderate weight for dynamic capacity
        early_overflow_penalty * 3 +  # Strong penalty for early overflow
        load_balance_penalty * 1.5   # Moderate weight for load balance
    )
    
    # Normalize the heuristics to ensure they are within a reasonable range
    heuristics = (1 + heuristics) / (1 + heuristics).max()
    
    return heuristics
```
