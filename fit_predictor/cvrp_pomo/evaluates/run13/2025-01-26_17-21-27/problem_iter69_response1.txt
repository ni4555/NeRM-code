```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Modularized penalties with early overflow detection
    def dynamic_capacity_penalty(demands, total_capacity, cumulative_demand):
        return -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * \
               (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * \
               (1 + (cumulative_demand > total_capacity_vector).float())

    def distance_scaling(distance_matrix, cumulative_demand, total_capacity):
        return -torch.log1p(torch.abs(distance_matrix) - 1e-8) * \
               (1 + cumulative_demand / total_capacity) * \
               torch.exp(-cumulative_demand / (total_capacity * 5))

    def overflow_penalty(cumulative_demand, demands, total_capacity):
        return torch.where(
            (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
            -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
            torch.zeros_like(cumulative_demand)
        )

    def load_balance_penalty(cumulative_demand, total_capacity_vector):
        return -torch.log1p(torch.abs(cumulative_demand - total_capacity_vector) - 1e-8)

    def randomness_factor(demands, total_capacity):
        return torch.abs(torch.randn_like(demands)) * 0.1 * (1 - cumulative_demand / total_capacity)

    # Calculate penalties
    dynamic_penalty = dynamic_capacity_penalty(demands, total_capacity, cumulative_demand)
    distance_penalty = distance_scaling(distance_matrix, cumulative_demand, total_capacity)
    overflow_penalty_val = overflow_penalty(cumulative_demand, demands, total_capacity)
    load_balance_penalty_val = load_balance_penalty(cumulative_demand, total_capacity_vector)
    randomness = randomness_factor(demands, total_capacity)
    
    # Apply scaling and combine penalties
    scaling_factor = 2.5
    heuristics = scaling_factor * (
        distance_penalty +
        dynamic_penalty +
        overflow_penalty_val +
        load_balance_penalty_val
    ) + randomness
    
    # Introduce diversity
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2 / (torch.sum(torch.abs(torch.randn_like(demands))) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += diversity_factor
    
    return heuristics
```
