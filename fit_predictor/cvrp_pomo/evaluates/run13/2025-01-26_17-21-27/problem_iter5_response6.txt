```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demands_cumulative = torch.cumsum(demands, dim=0)
    
    # Initialize heuristics matrix with large negative values
    heuristics = -torch.ones_like(distance_matrix)
    
    # Add positive values for edges that are within the first half of the cumulative demand
    heuristics[torch.arange(n), 1:] += (demands_cumulative[:n-1] / total_capacity) * 2
    
    # Use vectorized operations to add capacity-aware penalties for edges that exceed the vehicle capacity
    for i in range(1, n):
        excess_demand = demands_cumulative[i:] - demands_cumulative[i-1]
        heuristics[i-1, i:] -= excess_demand.clamp(min=0) * 10
    
    return heuristics
```
