```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * (1 + (total_capacity - cumulative_demand) / total_capacity)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand / total_capacity)
    
    # Introduce diversity by randomly perturbing the distance scaling for some edges
    diversity_factor = torch.rand_like(distance_scaling)
    diversity_penalty = diversity_factor * (distance_scaling * (1 + torch.rand_like(distance_scaling) * 0.1))
    
    # Implement a targeted load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    targeted_load_balance_penalty = -torch.log1p(load_balance - 1e-8) * (1 + load_balance / total_capacity)
    
    # Early overflow and imbalance detection
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    imbalance_penalty = torch.where(
        load_balance > total_capacity / (2 * n),
        -torch.log1p(load_balance - 1e-8),
        torch.zeros_like(load_balance)
    )
    
    # Combine heuristics with a balanced scaling factor
    scaling_factor = 2.0
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + diversity_penalty + targeted_load_balance_penalty + overflow_penalty + imbalance_penalty)
    
    return heuristics
```
