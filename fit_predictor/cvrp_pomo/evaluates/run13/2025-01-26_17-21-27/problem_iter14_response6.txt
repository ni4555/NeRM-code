```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.clamp(demands / total_capacity, min=0, max=1) * (demands > total_capacity / 2).float() * (total_capacity - demands)
    heuristics = distance_penalty * (1 + cumulative_demand) + capacity_penalty
    return heuristics
```
