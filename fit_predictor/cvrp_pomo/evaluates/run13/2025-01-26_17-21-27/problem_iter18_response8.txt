```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    demand_excess = torch.clamp(cumulative_demand / total_capacity - 1, min=0)
    demand_penalty = demand_excess * total_capacity
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    depot_priority = (torch.arange(n) == 0).float().unsqueeze(0)
    heuristics = distance_penalty * (1 + cumulative_demand) - demand_penalty * depot_priority

    # Apply non-linear scaling factor for demand to emphasize high demand
    non_linear_demand_scale = (demands / total_capacity) ** 2
    heuristics += non_linear_demand_scale * distance_penalty

    # Incorporate a penalty for edges leading to an overflow
    overflow_penalty = torch.zeros_like(distance_matrix)
    for i in range(1, n):
        if cumulative_demand[i] > total_capacity:
            overflow_penalty[i] = 1
    heuristics -= overflow_penalty * distance_penalty

    return heuristics
```
