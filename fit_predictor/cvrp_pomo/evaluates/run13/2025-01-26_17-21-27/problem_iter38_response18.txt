```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Dynamic penalties
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Early overflow detection and penalty
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balancing heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Encourage diversity
    diversity_penalty = torch.log1p(torch.abs(demands - demands.mean()) - 1e-8)
    
    # Apply penalties to the distance matrix
    heuristics = distance_penalty + capacity_penalty + overflow_penalty + load_balance_penalty + diversity_penalty
    
    # Scale heuristics for robust optimization
    scaling_factor = 2.0
    heuristics *= scaling_factor
    
    # Apply penalties to encourage uniform load distribution
    uniform_load_penalty = torch.where(
        load_balance > total_capacity / (2 * n),
        -torch.log1p(load_balance - 1e-8),
        torch.zeros_like(load_balance)
    )
    
    heuristics += uniform_load_penalty
    
    # Apply a penalty for nodes with high variance in load
    variance_penalty = -torch.log1p(torch.abs(torch.var(demands[1:], dim=0) - demands.mean()) - 1e-8)
    heuristics += variance_penalty
    
    # Normalize heuristics for better comparison
    heuristics = heuristics / heuristics.max()
    
    return heuristics
```
