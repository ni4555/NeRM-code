```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    scaling_factor = 3.0
    
    # Dynamic capacity penalty based on the difference from total capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty incorporating cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty to encourage early returns
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balancing heuristic to encourage even load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine core objectives with a strong scaling factor
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty)
    
    # Diversity heuristic to escape local optima
    diversity_heuristic = (2 * torch.arange(n)[None, :] == torch.arange(n, 2*n)) * distance_scaling
    
    # Apply diversity heuristic scaled down to avoid dominance by load balancing
    diversity_scaled = diversity_heuristic * (1 - scaling_factor)
    
    # Combine heuristics
    heuristics = heuristics + diversity_scaled
    return heuristics
```
