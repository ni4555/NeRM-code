```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    # Dynamic scaling factor that considers both cumulative demand and distance
    dynamic_scaling = cumulative_demand / (total_capacity + distance_matrix.sum())
    heuristics = capacity_penalty + distance_penalty * dynamic_scaling
    return heuristics
```
