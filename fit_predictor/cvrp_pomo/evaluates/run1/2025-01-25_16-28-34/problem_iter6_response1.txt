```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)

    # Problem-specific local search: Calculate the heuristic based on the demand distribution
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)

    # Adaptive PSO-inspired exploration: Adjust the heuristics based on the potential to balance load
    potential_balance = (average_demand_per_edge - total_capacity) / total_capacity
    heuristics = torch.clamp(potential_balance, min=-1, max=1)

    # Dynamic Tabu Search-inspired exploitation: Penalize heavily overloading and underloading
    overload_penalty = torch.clamp(1 - heuristics, max=0)
    underload_penalty = torch.clamp(heuristics, max=0)
    penalty = 0.5 * (overload_penalty + underload_penalty)
    heuristics -= penalty

    # Ensure the heuristics are negative for undesirable edges and zero for diagonal elements
    heuristics[distance_matrix == 0] = 0
    heuristics[heuristics >= 0] = -heuristics[heuristics >= 0]

    # Vectorized neighborhood exploration to refine the heuristics
    for i in range(n):
        for j in range(i + 1, n):
            if distance_matrix[i, j] != 0 and demands[i] < total_capacity and demands[j] < total_capacity:
                # Calculate the potential load after swap
                new_demand = demands[i] + demands[j]
                # If the swap keeps the load within capacity, update the heuristics
                if new_demand <= total_capacity:
                    heuristics[i, j] = -1
                    heuristics[j, i] = -1

    return heuristics
```
