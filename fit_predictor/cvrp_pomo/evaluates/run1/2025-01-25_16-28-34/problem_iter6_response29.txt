```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    # Initialize heuristics matrix with zero
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the load distribution cost for each edge
    load_distribution_cost = torch.abs(demands[:, None] + demands[None, :] - 2 * total_capacity * distance_matrix)
    
    # Compute the heuristics by inverting the load distribution cost
    heuristics = -load_distribution_cost / total_capacity
    
    # Set zero cost for edges with zero distance
    heuristics[distance_matrix == 0] = 0
    
    return heuristics
```
