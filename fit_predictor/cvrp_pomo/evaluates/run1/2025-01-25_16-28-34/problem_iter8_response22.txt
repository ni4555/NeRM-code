```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Introduce penalties for overloading and underloading
    overload_penalty = torch.log1p(average_demand_per_edge / total_capacity - 1)
    underload_penalty = torch.log1p(average_demand_per_edge / total_capacity)
    
    # Introduce a penalty for very short edges to avoid unnecessary detours
    edge_length_penalty = torch.log1p(1 - distance_matrix / (distance_matrix.max()))
    
    # Dynamic adjustment of penalties based on the number of customers served
    num_customers_served = torch.clamp(torch.sum(distance_matrix > 0), min=1)
    penalty_factor = 1 / (1 + num_customers_served)
    penalties = penalty_factor * (overload_penalty + underload_penalty + edge_length_penalty)
    
    # Refined neighborhood exploration heuristic
    for i in range(1, n):
        for j in range(1, n):
            if distance_matrix[i, j] != 0:
                # Calculate the load difference between including edge (i, j)
                load_diff = (average_demand_per_edge[i, j] - total_capacity) * (distance_matrix[i, j] ** 2)
                load_diff_penalty = torch.log1p(torch.abs(load_diff))
                penalties[i, j] += load_diff_penalty
    
    # Adaptive PSO-inspired population management heuristic
    diversity_factor = torch.rand(n)
    pso_heuristic = diversity_factor * (torch.log1p(average_demand_per_edge) - torch.log1p(total_capacity))
    
    # Dynamic Tabu Search-inspired cost function heuristic
    tabu_search_heuristic = torch.where(
        average_demand_per_edge > total_capacity,
        -torch.log1p(average_demand_per_edge) + torch.log1p(total_capacity),
        torch.zeros_like(average_demand_per_edge)
    )
    
    # Combine all heuristics with proper weighting
    weighted_heuristics = 0.4 * penalties - 0.3 * pso_heuristic + 0.3 * tabu_search_heuristic
    
    # Ensure the heuristics are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0
    heuristics[heuristics >= 0] = -torch.abs(heuristics[heuristics >= 0])
    
    return heuristics
```
