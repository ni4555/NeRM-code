```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Adjust the average demand per edge to be relative to the total capacity
    adjusted_average_demand = average_demand_per_edge / total_capacity
    
    # Calculate the load impact for each edge
    load_impact = adjusted_average_demand - 1
    
    # Introduce a penalty for high load impact to encourage exploration
    load_impact_penalty = torch.clamp(load_impact, min=-1, max=1)
    
    # Introduce a penalty for very short edges to avoid unnecessary detours
    edge_length_penalty = 1 - distance_matrix / (distance_matrix.max())
    
    # Combine penalties and normalize
    combined_penalty = (load_impact_penalty + edge_length_penalty) / 2
    
    # Adjust heuristics based on penalties and load impact
    heuristics = (1 - combined_penalty) - load_impact
    
    # Ensure the heuristics are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0
    heuristics[heuristics >= 0] = -torch.abs(heuristics[heuristics >= 0])
    
    return heuristics
```
