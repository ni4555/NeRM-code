```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Introduce a more refined heuristic that considers the balance between overloading and underloading
    heuristics = torch.log1p(average_demand_per_edge) - torch.log1p(total_capacity)
    
    # Calculate penalties for overloading and underloading
    overload_penalty = torch.abs(heuristics)
    underload_penalty = torch.abs(1 - heuristics)
    
    # Dynamic penalties based on the ratio of average demand to total capacity
    penalty_ratio = torch.clamp((average_demand_per_edge / total_capacity), min=0, max=1)
    dynamic_penalty = (penalty_ratio ** 2) * (overload_penalty + underload_penalty)
    
    # Apply the dynamic penalty to the heuristics
    heuristics -= dynamic_penalty
    
    # Ensure the heuristics are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0
    heuristics[heuristics >= 0] = -torch.abs(heuristics[heuristics >= 0])
    
    # Encourage diversity by adding a perturbation with adaptive strength
    perturbation_strength = torch.rand_like(heuristics) * 0.1 + 0.1  # Between 0.1 and 0.2
    perturbation = torch.rand_like(heuristics)
    heuristics -= perturbation * perturbation_strength
    
    # Incorporate a problem-specific local search mechanism
    for i in range(n):
        for j in range(n):
            if i != j and distance_matrix[i, j] != 0:
                for k in range(n):
                    if i != k and j != k:
                        # Swap (i, j) with (i, k) and (j, k)
                        new_demand_sum = edge_demand_sum[i, j] - demands[k] * distance_matrix[i, k] - demands[k] * distance_matrix[j, k]
                        new_demand_sum += demands[k] * distance_matrix[i, j] + demands[k] * distance_matrix[i, k] + demands[k] * distance_matrix[j, k]
                        if new_demand_sum <= total_capacity:
                            # Calculate the change in heuristics
                            heuristics[i, j] += torch.log1p(new_demand_sum) - torch.log1p(total_capacity)
                            heuristics[j, i] += torch.log1p(new_demand_sum) - torch.log1p(total_capacity)
                            heuristics[i, k] += torch.log1p(demands[k]) - torch.log1p(total_capacity)
                            heuristics[k, i] += torch.log1p(demands[k]) - torch.log1p(total_capacity)
                            heuristics[j, k] += torch.log1p(demands[k]) - torch.log1p(total_capacity)
                            heuristics[k, j] += torch.log1p(demands[k]) - torch.log1p(total_capacity)
    
    return heuristics
```
