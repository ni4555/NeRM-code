```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Adjust the average demand per edge to be relative to the total capacity
    adjusted_average_demand = average_demand_per_edge / total_capacity
    
    # Introduce a risk penalty for high average demand per edge to encourage exploration
    risk_penalty = adjusted_average_demand.clamp(min=0) ** 2
    
    # Introduce a success bonus for edges with lower average demand per edge to encourage exploitation
    success_bonus = (1 - adjusted_average_demand.clamp(max=1)) ** 2
    
    # Calculate the heuristic value as the difference between risk penalty and success bonus
    heuristics = risk_penalty - success_bonus
    
    # Introduce a diversity factor by penalizing highly connected nodes
    # This is a simplistic approach and can be replaced with more complex metrics
    diversity_penalty = 1 / (distance_matrix.sum(dim=1) + 1)
    
    # Combine heuristics with diversity penalty
    heuristics = heuristics - diversity_penalty
    
    # Ensure all penalties are negative
    heuristics = -torch.abs(heuristics)
    
    # Return the heuristics matrix with edges with zero distance set to zero
    heuristics[distance_matrix == 0] = 0
    
    return heuristics
```
