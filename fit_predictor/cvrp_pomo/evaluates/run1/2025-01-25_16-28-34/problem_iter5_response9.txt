```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Adjust heuristics based on average demand and capacity
    heuristics = (average_demand_per_edge - total_capacity) / total_capacity
    
    # Implement adaptive local search by adding a term that encourages
    # neighborhood diversity and respects vehicle capacities
    # For simplicity, we use a soft constraint on the total demand per vehicle
    for i in range(1, n):
        for j in range(1, n):
            if distance_matrix[i, j] > 0:
                heuristics[i, j] = heuristics[i, j] - 0.1 * torch.abs(demands[j] - (demands.sum() - demands[i]))
    
    # Apply penalties for overloading and underloading
    overload_penalty = torch.abs(heuristics)
    underload_penalty = torch.abs(1 - heuristics)
    
    # Weighted combination of overloading and underloading penalties
    penalty = 0.5 * (overload_penalty + underload_penalty)
    
    # Apply the penalty to the heuristics
    heuristics -= penalty
    
    # Ensure the heuristics are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0
    heuristics[heuristics >= 0] = -torch.abs(heuristics[heuristics >= 0])
    
    return heuristics
```
