```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)
    
    # Define a local search to refine neighborhood exploration
    def local_search(start, end):
        # Swap nodes until no improvement can be made
        improved = True
        while improved:
            improved = False
            for i in range(n):
                if i != start and i != end:
                    # Swap node i with the node at the end
                    if (demands[i] + demands[end]) <= demands[start] and distance_matrix[i, start] < distance_matrix[i, end]:
                        demands[start], demands[i] = demands[i], demands[start]
                        improved = True
                        break
        return demands
    
    # Define PSO to enhance exploration capability
    def particle_swarm_optimization():
        # Initialize particles
        # (code for particle initialization omitted for brevity)
        # ...
        
        # Update velocities and positions
        for i in range(particles.shape[0]):
            # (code for velocity and position update omitted for brevity)
            # ...
            # Apply adaptive rules for velocity and position
            # ...
        
        # (code for PSO main loop omitted for brevity)
        # ...
        
        # Return best particle
        return best_particle
    
    # Define tabu search to navigate solution space dynamically
    def tabu_search(start, tabu_list):
        # (code for tabu search main loop omitted for brevity)
        # ...
        
        # Return best solution found
        return best_solution
    
    # Combine strategies
    for i in range(n):
        for j in range(n):
            if i != j:
                demands = demands.clone()
                demands[i] += demands[j]
                demands[j] = 0
                # Perform local search
                demands = local_search(i, j)
                # Apply PSO for exploration
                best_particle = particle_swarm_optimization(demands)
                # Apply tabu search for exploitation
                best_solution = tabu_search(i, j, tabu_list)
                # Update heuristics based on best solutions
                if (best_particle is not None) and (best_solution is not None):
                    heuristics[i, j] = (best_particle - best_solution) / total_capacity
    
    return heuristics
```
