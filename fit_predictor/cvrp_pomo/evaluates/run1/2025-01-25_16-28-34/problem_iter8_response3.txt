```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Adjust the average demand per edge to be relative to the total capacity
    adjusted_average_demand = average_demand_per_edge / total_capacity
    
    # Calculate the heuristics based on the adjusted average demand per edge
    heuristics = (adjusted_average_demand - 1) * (distance_matrix != 0)
    
    # Apply neighborhood validity checks efficiently using vectorized operations
    for i in range(n):
        # Vectorized check for overloading
        overload_check = heuristics[i, :] + demands[i:] > total_capacity[i:i+1]
        heuristics[i, :] = torch.where(overload_check, -float('inf'), heuristics[i, :])
        
        # Vectorized check for underloading
        underload_check = heuristics[i, :] + demands[i:] < 0
        heuristics[i, :] = torch.where(underload_check, -float('inf'), heuristics[i, :])
    
    # Return the heuristics matrix with edges with zero distance set to zero
    heuristics[distance_matrix == 0] = 0
    
    return heuristics
```
