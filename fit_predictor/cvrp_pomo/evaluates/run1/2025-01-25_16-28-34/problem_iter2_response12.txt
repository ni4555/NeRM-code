```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Calculate the heuristics based on the average demand per edge
    heuristics = (average_demand_per_edge - total_capacity) / total_capacity
    
    # Apply penalties for load imbalance and high demand
    load_penalty = (demands[:, None] + demands[None, :]) * distance_matrix
    heuristics = heuristics + load_penalty / (total_capacity ** 2)
    
    # Normalize heuristics to ensure they are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0  # Avoid division by zero
    heuristics[heuristics >= 0] = 0  # Set non-negative values to zero
    
    return heuristics
```
