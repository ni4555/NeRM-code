```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)
    total_capacity = demands.sum()
    
    # Define a function to check if the current route would exceed capacity
    def is_capacity_exceeded(route_demand):
        return route_demand > total_capacity
    
    # Define a function to calculate the initial load for a given edge
    def calculate_initial_load(i, j):
        return demands[i] + demands[j]
    
    # Define a function to update the heuristics based on load distribution
    def update_heuristics(route_loads):
        for i in range(n):
            for j in range(i+1, n):
                if not is_capacity_exceeded(route_loads[i, j]):
                    heuristics[i, j] = 1 - (route_loads[i, j] / total_capacity)
    
    # Placeholder for PSO and Tabu Search to be integrated here
    # Assuming that the PSO and Tabu Search are already implemented
    # and return an optimal route with associated loads
    # optimal_route_loads = pso_tabu_search(distance_matrix, demands)
    
    # For the sake of this example, we will generate a random load distribution
    # This should be replaced by the actual PSO and Tabu Search outputs
    num_edges = (n * (n - 1)) // 2
    random_loads = torch.randn(num_edges, 1) * total_capacity
    
    # Calculate the average load per edge and update heuristics
    route_loads = random_loads
    update_heuristics(route_loads)
    
    return heuristics
```
