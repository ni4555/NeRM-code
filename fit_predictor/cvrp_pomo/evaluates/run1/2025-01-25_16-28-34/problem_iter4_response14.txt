```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the total vehicle capacity
    total_capacity = demands.sum()
    
    # Calculate the edge potential as the product of demand and distance
    edge_potential = demands[:, None] * distance_matrix
    
    # Apply local search to refine neighborhood exploration
    # Use a simulated annealing-like mechanism to balance loads
    temperature = 1.0
    while temperature > 1e-4:
        for i in range(n):
            for j in range(i + 1, n):
                load_change = (demands[i] + demands[j]) - total_capacity
                if 0 < load_change < temperature:
                    distance_matrix[i, j], distance_matrix[j, i] = distance_matrix[j, i], distance_matrix[i, j]
                    demands[j] = demands[i]
                    demands[i] = 0
                temperature *= 0.95  # Cool down the system
    
    # Apply adaptive PSO with population management
    swarm_size = 10  # Example swarm size
    num_iterations = 100  # Example number of iterations
    for _ in range(num_iterations):
        for i in range(swarm_size):
            for j in range(n):
                for k in range(n):
                    if i != j and i != k and j != k:
                        # Update the heuristics based on velocity and position update rules
                        if edge_potential[j, k] < edge_potential[i, k]:
                            distance_matrix[i, j], distance_matrix[j, i] = distance_matrix[j, i], distance_matrix[i, j]
                            demands[j] = demands[i]
                            demands[i] = 0
                            edge_potential[i, j] = demands[i] * demands[j]
                            edge_potential[j, i] = demands[j] * demands[i]
                        # Introduce diversity by swapping random edges with high potential
                        for random_edge in torch.argsort(edge_potential, dim=1, descending=True)[:5]:
                            if random_edge != i and random_edge != j:
                                distance_matrix[i, j], distance_matrix[j, i] = distance_matrix[j, i], distance_matrix[i, j]
                                demands[j] = demands[i]
                                demands[i] = 0
                                edge_potential[i, j] = demands[i] * demands[j]
                                edge_potential[j, i] = demands[j] * demands[i]
    
    # Apply dynamic tabu search with adaptive cost function
    tabu_list = set()
    for i in range(n):
        for j in range(i + 1, n):
            if (i, j) not in tabu_list:
                # Calculate tabu penalty based on the time decay and the number of improvements
                tabu_penalty = 0.95 ** (len(tabu_list) / max(len(tabu_list), 1))
                # Update heuristics based on tabu search
                heuristics[i, j] *= tabu_penalty
                heuristics[j, i] *= tabu_penalty
                tabu_list.add((i, j))
    
    # Ensure that the heuristics are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0  # Avoid division by zero
    heuristics[heuristics >= 0] = -heuristics[heuristics >= 0]  # Set non-negative values to negative
    
    return heuristics
```
