```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    
    # Normalize demands by the total vehicle capacity
    normalized_demands = demands / total_capacity
    
    # Problem-specific Local Search
    edge_demand_sum = torch.dot(normalized_demands.view(-1, 1), normalized_demands.view(1, -1))
    edge_demand_sum[distance_matrix == 0] = 0  # Ignore the depot node
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Apply adaptive PSO with adaptive population management
    # Placeholder for PSO-based adjustment
    # Vectorized implementation should be used here
    pso_adjusted_average_demand = average_demand_per_edge
    
    # Apply dynamic tabu search with adaptive cost function
    # Placeholder for tabu search-based adjustment
    # Vectorized implementation should be used here
    tabu_adjusted_average_demand = pso_adjusted_average_demand
    
    # Final heuristics matrix after applying all heuristic adjustments
    heuristics = -tabu_adjusted_average_demand
    
    # Return the heuristics matrix with edges with zero distance set to zero
    heuristics[distance_matrix == 0] = 0
    
    return heuristics
```
