```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Introduce penalties for overloading and underloading
    overload_penalty = torch.abs(average_demand_per_edge / total_capacity - 1)
    underload_penalty = torch.abs(average_demand_per_edge / total_capacity)
    
    # Introduce a penalty for very short edges to avoid unnecessary detours
    edge_length_penalty = 1 - distance_matrix / (distance_matrix.max())
    
    # Dynamic adjustment of penalties based on the number of customers served
    num_customers_served = torch.clamp(torch.sum(distance_matrix > 0), min=1)
    penalty_factor = 1 / (1 + num_customers_served)
    penalties = penalty_factor * (overload_penalty + underload_penalty + edge_length_penalty)
    
    # Apply the penalties to the heuristics
    heuristics = average_demand_per_edge - penalties
    
    # Ensure the heuristics are negative for undesirable edges
    heuristics[distance_matrix == 0] = 0
    heuristics[heuristics >= 0] = -torch.abs(heuristics[heuristics >= 0])
    
    return heuristics
```
