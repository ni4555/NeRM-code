```python
import torch

def refine_neighborhood(heuristics: torch.Tensor, distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Placeholder for the actual implementation of local search
    # For the purpose of this example, we return the heuristics unchanged
    return heuristics

def update_velocity(heuristics: torch.Tensor) -> torch.Tensor:
    # Placeholder for the actual implementation of PSO-inspired velocity update
    # For the purpose of this example, we return the heuristics unchanged
    return heuristics

def tabu_search(heuristics: torch.Tensor, distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Placeholder for the actual implementation of tabu search
    # For the purpose of this example, we return the heuristics unchanged
    return heuristics

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    heuristics = (average_demand_per_edge - total_capacity) / total_capacity
    
    heuristics = refine_neighborhood(heuristics, distance_matrix, demands)
    heuristics = update_velocity(heuristics)
    heuristics = tabu_search(heuristics, distance_matrix, demands)
    
    heuristics[distance_matrix == 0] = 0
    heuristics[heuristics >= 0] = 0
    
    return heuristics
```
