```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    # Calculate the load distribution cost for each edge
    load_distribution_cost = torch.abs(demands[:, None] + demands[None, :] - 2 * total_capacity * distance_matrix)
    # Normalize the load distribution cost by the total capacity
    normalized_load_distribution_cost = load_distribution_cost / total_capacity
    # Invert the normalized load distribution cost to have negative values for undesirable edges
    heuristics = -normalized_load_distribution_cost
    # Set edges with zero distance to zero
    heuristics[distance_matrix == 0] = 0
    return heuristics
```
