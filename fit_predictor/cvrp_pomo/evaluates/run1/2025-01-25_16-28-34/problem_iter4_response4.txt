```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    
    # Calculate the sum of demands for each edge (i, j)
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    
    # Calculate the average demand per edge
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    
    # Adjust the average demand per edge to be relative to the total capacity
    adjusted_average_demand = average_demand_per_edge / total_capacity
    
    # Define a function for refined neighborhood exploration
    def refine_neighborhood(heuristics, distance_matrix, demands):
        # Placeholder for a more complex neighborhood exploration mechanism
        # Here we assume a simple heuristic based on adjusted average demand
        return heuristics * (distance_matrix != 0)
    
    # Define a function for PSO-inspired velocity update
    def update_velocity(heuristics):
        # Placeholder for a dynamic adjustment mechanism for velocity and position update rules
        # This is a placeholder and should be replaced with actual PSO logic
        return heuristics
    
    # Define a function for dynamic tabu search
    def tabu_search(heuristics, distance_matrix, demands):
        # Placeholder for a tabu search approach with a dynamic cost function
        # This is a placeholder and should be replaced with actual tabu search logic
        return heuristics
    
    # Apply the refined neighborhood exploration mechanism
    heuristics = refine_neighborhood(adjusted_average_demand, distance_matrix, demands)
    
    # Apply PSO-inspired velocity update
    heuristics = update_velocity(heuristics)
    
    # Apply dynamic tabu search
    heuristics = tabu_search(heuristics, distance_matrix, demands)
    
    # Return the heuristics matrix with edges with zero distance set to zero
    heuristics[distance_matrix == 0] = 0
    
    return heuristics
```
