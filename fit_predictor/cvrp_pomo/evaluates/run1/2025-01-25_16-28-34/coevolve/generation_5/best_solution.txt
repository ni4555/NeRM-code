Fitness: 23.265913009643555

Description:
Design a sophisticated optimization heuristic for the Capacitated Vehicle Routing Problem (CVRP) by integrating a dynamic combination of Particle Swarm Optimization (PSO) with Tabu Search (TS). This hybrid approach should focus on adaptive population management within PSO to foster diversity and prevent premature convergence. The TS should employ a dynamic tabu list, leveraging real-time vehicle capacities and demand fluctuations to effectively circumvent suboptimal solutions. The core of the heuristic will be an intelligent cost function that dynamically evaluates load distribution and routing efficiency, ensuring a balanced exploration of the solution space. The ultimate goal is to achieve a near-optimal load distribution, minimize routing costs, and optimize overall system performance, while carefully avoiding the traps of convergence to local optima.

Code:
import torch
import numpy as np
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure inputs are tensors
    distance_matrix = torch.tensor(distance_matrix, dtype=torch.float32)
    demands = torch.tensor(demands, dtype=torch.float32)
    
    # Normalize demands by the total capacity for comparison purposes
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    
    # Calculate the heuristic values for each edge
    # We use a simple heuristic that combines distance and normalized demand
    # Negative values are undesirable edges, positive values are promising ones
    # We subtract the normalized demand from the distance to give a priority to edges
    # with lower demand and lower distance
    heuristics = distance_matrix - normalized_demands
    
    return heuristics