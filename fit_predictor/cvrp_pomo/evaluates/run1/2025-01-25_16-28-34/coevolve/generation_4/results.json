{
  "generation": 4,
  "description": "The goal is to design an efficient optimization heuristic for the Capacitated Vehicle Routing Problem (CVRP) that combines domain-specific insights with simplicity in implementation. The heuristic should prioritize a direct approach using normalized demand and distance as key elements, ensuring clarity and specificity. The heuristic should integrate a basic yet effective local search strategy to refine initial solutions while maintaining an optimal balance between load distribution and distance traveled. This approach will avoid overly complex adaptive mechanisms and will focus on problem context to yield improved system performance, optimal load distribution, and reduced overall routing costs. The new problem description is as follows:\n\n---\n\nDevelop a streamlined heuristic for the Capacitated Vehicle Routing Problem (CVRP) that leverages normalized demand and distance metrics to find an efficient route. The heuristic should initiate by assigning routes based on demand and distance, using a greedy approach to distribute the load evenly across vehicles. Subsequently, employ a simple local search technique to refine the initial solutions, exploring neighboring routes that improve load balance and reduce the total distance traveled. The heuristic should prioritize solutions with a high degree of load uniformity and minimal route deviation, while avoiding unnecessary complexity to ensure quick convergence and practical implementation.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity (sum of demands)\n    total_capacity = demands.sum()\n    \n    # Normalize demands\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the normalized distance matrix\n    normalized_distance_matrix = distance_matrix / distance_matrix.max()\n    \n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n    \n    # Apply the greedy approach to assign routes based on demand and distance\n    for i in range(1, len(normalized_demands)):\n        for j in range(1, len(normalized_demands)):\n            if j != i:\n                # Calculate the heuristic value for the edge (i, j)\n                heuristic_value = -normalized_distance_matrix[i, j] + normalized_demands[i]\n                # Update the heuristic matrix\n                heuristic_matrix[i, j] = heuristic_value\n    \n    return heuristic_matrix",
      "fitness": 23.278860092163086,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_2.txt",
      "code_file": "coevolve\\generation_4\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate normalized distance matrix by dividing each distance by the max distance\n    normalized_distance_matrix = distance_matrix / distance_matrix.max()\n    \n    # Calculate the weighted demand for each edge based on demand and normalized distance\n    # The weights are calculated as demand divided by the sum of all demands, which represents the fraction of capacity for each customer\n    weights = demands / demands.sum()\n    weighted_demand_matrix = weights.view(1, -1) * weights.view(-1, 1) * normalized_distance_matrix\n    \n    # Subtract the weighted demand matrix from 1 to get the negative heuristics\n    heuristics = 1 - weighted_demand_matrix\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_3.txt",
      "code_file": "coevolve\\generation_4\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Normalize demands\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the normalized distance matrix\n    normalized_distance_matrix = distance_matrix / distance_matrix.max()\n    \n    # Calculate the initial heuristic values based on normalized demand and distance\n    # We will use a simple formula that combines the normalized demand and normalized distance\n    heuristic_values = -normalized_demands * normalized_distance_matrix\n    \n    # Adjust the heuristic values to ensure they are negative for undesirable edges\n    # We can use a simple threshold to convert positive values to negative ones\n    threshold = 0.5\n    heuristic_values[heuristic_values > threshold] = -heuristic_values[heuristic_values > threshold]\n    \n    return heuristic_values",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_5.txt",
      "code_file": "coevolve\\generation_4\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate normalized distance matrix\n    normalized_distance_matrix = distance_matrix / distance_matrix.sum(axis=0)\n    \n    # Calculate the initial heuristics based on normalized demand and distance\n    heuristics = normalized_distance_matrix * normalized_demands\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_7.txt",
      "code_file": "coevolve\\generation_4\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate normalized demand\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the distance-weighted demand\n    distance_weighted_demand = torch.mul(distance_matrix, normalized_demands)\n\n    # Initialize the heuristic matrix with negative values\n    heuristic_matrix = -torch.ones_like(distance_matrix)\n\n    # Apply the greedy approach to assign routes based on distance-weighted demand\n    for i in range(1, distance_matrix.shape[0]):\n        for j in range(1, distance_matrix.shape[0]):\n            heuristic_matrix[i, j] = distance_weighted_demand[i, j]\n\n    # Normalize the heuristic matrix to ensure positive values\n    heuristic_matrix = (heuristic_matrix - heuristic_matrix.min()) / (heuristic_matrix.max() - heuristic_matrix.min())\n\n    return heuristic_matrix",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_8.txt",
      "code_file": "coevolve\\generation_4\\code_8.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate normalized distance matrix\n    normalized_distance_matrix = distance_matrix / distance_matrix.max()\n    \n    # Initialize the heuristics matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n    \n    # Greedy assignment based on demand\n    for i in range(1, n):\n        min_distance = normalized_distance_matrix[0, i:].min()\n        min_index = torch.where(normalized_distance_matrix[0, i:] == min_distance)[0].item()\n        heuristics[0, i] = normalized_demands[i] * min_distance\n        normalized_distance_matrix[:, i] += distance_matrix[0, i]  # Exclude the depot node for the next iteration\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_11.txt",
      "code_file": "coevolve\\generation_4\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    # Normalize demand vector to the range [0, 1]\n    normalized_demands = demands / demands.sum()\n    \n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n    \n    # Calculate the normalized distance matrix\n    normalized_distance_matrix = distance_matrix / distance_matrix.sum(axis=1, keepdim=True)\n    \n    # Calculate the heuristic for each edge\n    # The heuristic is a combination of normalized demand and normalized distance\n    heuristic_matrix = normalized_demands.unsqueeze(1) * normalized_distance_matrix\n    \n    # Add a penalty for edges that go against the direction of demand (i.e., from high to low demand)\n    # This encourages load balancing\n    penalty = torch.abs(torch.cumsum(normalized_demands, dim=0) - torch.arange(n))\n    heuristic_matrix += penalty.unsqueeze(1)\n    \n    return heuristic_matrix",
      "fitness": 57.93442916870117,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_1.txt",
      "code_file": "coevolve\\generation_4\\code_1.py"
    }
  ]
}