{
  "generation": 10,
  "description": "Develop a state-of-the-art hybrid optimization framework for the Capacitated Vehicle Routing Problem (CVRP) by incorporating a tailored local search module, an adaptive particle swarm optimization (PSO) algorithm with evolving population control, and a dynamic tabu search approach. This framework should emphasize the following pivotal elements to harmonize exploration and exploitation, while ensuring comprehensive search space exploration:\n\n1. **Customized Local Search**: Craft a sophisticated neighborhood exploration process that strictly adheres to vehicle capacity constraints and demand patterns, guaranteeing the generation of feasible and well-balanced neighborhoods.\n\n2. **Advanced PSO with Adaptive Population Dynamics**: Integrate an adaptive PSO algorithm with a dynamic adjustment mechanism for velocity and position update rules. The population management should dynamically adapt to preserve diversity and accelerate convergence towards the optimal solution.\n\n3. **Intelligent Tabu Search with a Flexible Cost Model**: Implement a tabu search mechanism that is capable of adapting to vehicle capacities and demand distributions, enabling the algorithm to navigate intricate solution landscapes and avoid suboptimal traps. The cost function should be highly adaptive, considering both load distribution and routing costs to guide the search process effectively.\n\nThe proposed algorithm should be modular in design, facilitating the isolation and analysis of individual heuristic components. It should prioritize a focused, problem-specific optimization strategy that optimizes load distribution, minimizes routing costs, and enhances overall system performance, while circumventing the drawbacks of static neighborhood structures, ineffective population management, and inflexible tabu list adaptability.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Normalize demands by total capacity\n    normalized_demands = demands / total_capacity\n    \n    # Initialize the heuristics matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n    \n    # Iterate over the distance matrix to calculate heuristics\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            if i != j:\n                # Calculate the heuristic value for each edge\n                # Here we use a simple heuristic that considers the demand at customer j\n                # and the distance from customer i to j. This is a naive approach and\n                # can be replaced with more sophisticated heuristics.\n                heuristics[i, j] = -normalized_demands[j] + distance_matrix[i, j]\n    \n    return heuristics",
      "fitness": 23.265913009643555,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_2.txt",
      "code_file": "coevolve\\generation_10\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Calculate the normalized demands\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the demand difference matrix\n    demand_diff_matrix = demands.unsqueeze(1) - demands.unsqueeze(0)\n    \n    # Calculate the heuristics based on the normalized demands and the difference matrix\n    # We use a simple heuristic where we penalize the edges with higher demand differences\n    heuristics = -torch.abs(demand_diff_matrix)\n    \n    # Adjust the heuristics based on the distance matrix\n    # We assume that shorter distances are more promising\n    heuristics += distance_matrix\n    \n    # Normalize the heuristics to ensure they are within the range of the distance matrix\n    heuristics /= (heuristics.max() + 1e-8)\n    \n    return heuristics",
      "fitness": 23.27081298828125,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_5.txt",
      "code_file": "coevolve\\generation_10\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the load difference between each pair of nodes\n    load_diff = demands.unsqueeze(1) - demands.unsqueeze(0)\n    \n    # Calculate the heuristic value as the negative of the load difference\n    # and add a small constant to avoid zero heuristic values\n    heuristic_matrix = -load_diff + 1e-6\n    \n    # Invert the heuristic matrix to prioritize promising edges\n    # Negative values will be less desirable, positive values more desirable\n    heuristic_matrix = -heuristic_matrix\n    \n    return heuristic_matrix",
      "fitness": 23.278629302978516,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_4.txt",
      "code_file": "coevolve\\generation_10\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure demands are normalized by the total vehicle capacity\n    total_capacity = demands.sum()\n    demands = demands / total_capacity\n\n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n\n    # Compute the heuristic for each edge\n    # The heuristic can be a combination of the demand and distance\n    # Here we use a simple formula: -distance + demand\n    heuristic_matrix = -distance_matrix + demands\n\n    # Ensure the heuristic matrix is symmetrical\n    # This is important as CVRP is an undirected problem\n    symmetric_heuristic_matrix = (heuristic_matrix + heuristic_matrix.t()) / 2\n\n    return symmetric_heuristic_matrix",
      "fitness": 23.317523956298828,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_1.txt",
      "code_file": "coevolve\\generation_10\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure the demands are normalized\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Define a factor to adjust the heuristics (e.g., 0.1 is a small penalty for high distance)\n    distance_factor = 0.1\n    \n    # Calculate the heuristic matrix\n    # We use a negative factor for distance to promote shorter routes\n    # and negative demand to promote routes with lower load\n    heuristics = -distance_matrix * distance_factor - normalized_demands\n    \n    return heuristics",
      "fitness": 23.3272762298584,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_3.txt",
      "code_file": "coevolve\\generation_10\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.size(0)\n    # Calculate the maximum load per vehicle as a fraction of total demand\n    max_load = 1.0 / demands.sum()\n    \n    # Initialize the heuristics matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n    \n    # Loop through each pair of nodes to calculate the heuristic\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Calculate the edge heuristic as the negative of the distance\n            # multiplied by the load factor, adjusted by the demand difference\n            edge_heuristic = -distance_matrix[i, j] * max_load\n            if demands[i] != demands[j]:\n                edge_heuristic += demands[i] * (demands[i] - demands[j])\n            \n            # Update the heuristics matrix\n            heuristics[i, j] = edge_heuristic\n            heuristics[j, i] = edge_heuristic  # The matrix is symmetric\n    \n    return heuristics",
      "fitness": 23.3272762298584,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_10.txt",
      "code_file": "coevolve\\generation_10\\code_10.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    # Calculate the normalized demand difference for each edge\n    normalized_demand_diff = demands.unsqueeze(1) - demands.unsqueeze(0)\n    \n    # Calculate the cost for each edge, considering the absolute difference in demand\n    cost = torch.abs(normalized_demand_diff)\n    \n    # Incorporate the distance into the heuristic\n    heuristics = cost * distance_matrix\n    \n    return heuristics",
      "fitness": 23.337182998657227,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_11.txt",
      "code_file": "coevolve\\generation_10\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the load on each vehicle if we were to visit all customers\n    total_load = demands.sum()\n    \n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / total_load\n    \n    # Initialize the heuristics matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n    \n    # Calculate the cost of visiting each customer\n    # This is a simple heuristic that assumes the cost is equal to the distance\n    heuristics += distance_matrix\n    \n    # Adjust the heuristics based on the normalized demands\n    # Customers with higher normalized demand get a lower heuristic value\n    heuristics -= normalized_demands\n    \n    # Apply a penalty for long distances\n    # This encourages the algorithm to find more compact routes\n    heuristics += torch.log(distance_matrix + 1e-10)  # Adding a small epsilon to avoid log(0)\n    \n    return heuristics",
      "fitness": 23.364334106445312,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_10\\stdout_9.txt",
      "code_file": "coevolve\\generation_10\\code_9.py"
    }
  ]
}