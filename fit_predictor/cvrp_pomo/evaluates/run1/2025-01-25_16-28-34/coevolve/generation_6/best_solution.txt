Fitness: 23.240375518798828

Description:
The task involves the design of an integrated heuristic for solving the Capacitated Vehicle Routing Problem (CVRP) that effectively utilizes prior heuristics while incorporating elements from hybrid evolutionary algorithms. Specifically, the heuristic will leverage local search techniques to explore the neighborhood of solutions, enhance the exploration phase of Particle Swarm Optimization (PSO) through adaptive population management, and employ a dynamic tabu search with an adaptive cost function. The objective is to develop a heuristic that balances load distribution and minimizes routing cost, while ensuring a clear representation of individual heuristic contributions to the overall solution.

This new heuristic aims to address the limitations of overgeneralization by focusing on the specifics of each component and their integration:

- **Problem-specific Local Search**: Apply local search methods that are tailored to the structure of the CVRP, ensuring efficient neighborhood exploration while considering vehicle capacities and demands.
  
- **Adaptive PSO Population Management**: Use PSO to drive exploration by allowing for dynamic adjustment of velocity and position update mechanisms, with an adaptive population management strategy to maintain diversity and convergence towards the optimal route assignments.
  
- **Dynamic Tabu Search with Adaptive Cost Function**: Implement tabu search with a cost function that adaptively evaluates both load balance and distance traveled to facilitate efficient navigation of the solution space, avoiding previously visited suboptimal solutions while exploring uncharted regions.

The proposed heuristic will combine these components in a modular manner, where each heuristic contributes directly to the problem representation, thus avoiding overgeneralization and ensuring a clear, specific, and successful optimization strategy for the CVRP.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)

    # Problem-specific Local Search
    # Calculate a simple heuristic based on the distance to the depot and the customer demand
    for i in range(1, n):  # Skip the depot node
        # Promote edges based on lower distance and demand
        heuristic_matrix[i, 0] = -distance_matrix[i, 0] - demands[i]

    # Adaptive PSO Population Management
    # For simplicity, we will use a basic PSO-inspired heuristic that promotes edges closer to the depot
    # and with lower demand, which could be considered as a "fitness" for PSO.
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Promote edges closer to the depot and with lower demand
                heuristic_matrix[i, j] = -distance_matrix[i, j] - demands[j]

    # Dynamic Tabu Search with Adaptive Cost Function
    # For simplicity, we will use a tabu list that bans the last used edges
    # This is a placeholder for a more complex tabu search mechanism
    tabu_list = set()
    for i in range(1, n):
        for j in range(1, n):
            if i != j and (i, j) not in tabu_list:
                # Increase the heuristic value for edges not in the tabu list
                heuristic_matrix[i, j] += 1

    return heuristic_matrix