```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    edge_demand_sum = (demands[:, None] + demands[None, :]) * distance_matrix
    average_demand_per_edge = edge_demand_sum / (distance_matrix ** 2)
    adjusted_average_demand = average_demand_per_edge / total_capacity
    heuristics = (adjusted_average_demand - 1) * (distance_matrix != 0)
    
    # Problem-specific local search mechanism
    # Adjusting heuristics based on vehicle capacities and demand distributions
    for i in range(n):
        for j in range(n):
            if i != j and distance_matrix[i, j] != 0:
                # Calculate the load if the edge (i, j) is included
                current_load = demands[i] + demands[j]
                # Calculate the load if the edge (i, j) is excluded
                alternative_load = demands[i] + demands[(i+1) % n]
                # If including the edge exceeds vehicle capacity, reduce its heuristic value
                if current_load > total_capacity:
                    heuristics[i, j] *= 0.5
                # If the alternative load is lower, increase the heuristic value
                if alternative_load < current_load:
                    heuristics[i, j] *= 1.1
    
    # Set edges with zero distance to zero
    heuristics[distance_matrix == 0] = 0
    
    return heuristics
```
