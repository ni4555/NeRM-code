```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the capacity penalty matrix
    capacity_penalty = torch.min(torch.tensor(1.0) - demands, torch.zeros_like(demands))
    
    # Calculate the inverse distance matrix with a small epsilon to avoid division by zero
    inverse_distance = 1 / (distance_matrix + 1e-8)
    
    # Calculate the heuristic value considering distance, demand, and global demand
    heuristic_value = demands[:, None] * inverse_distance * (capacity_penalty[:, None] + (1 - capacity_penalty[:, None]) * (demands / demands.sum(dim=0)))
    
    return heuristic_value
```
