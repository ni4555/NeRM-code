```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands = demands / demands.sum()  # Normalize demand by the total demand
    
    # Create a matrix where each element is the demand for the column node from the row node
    demand_matrix = demands[:, None] * demands
    
    # Normalize the demand matrix to get a probability distribution
    demand_matrix = demand_matrix - torch.diag_embed(demand_matrix)
    
    # Incorporate capacity constraint by using a capacity factor
    capacity_factor = 1 / (demands + 1e-8)
    
    # Calculate the heuristics by combining the demand matrix and the capacity factor
    heuristics = demand_matrix * distance_matrix * capacity_factor
    
    # Ensure all elements are non-negative
    heuristics = torch.clamp(heuristics, min=0, max=1)
    
    return heuristics
```
