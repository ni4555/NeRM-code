```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate the demand vector with a soft thresholding
    demand_vector = demands / (demands.sum() + 1e-8)
    
    # Normalize distance matrix with the demand vector to minimize loops
    distance_matrix = distance_matrix / (distance_matrix * demand_vector).sum(axis=1, keepdim=True)
    
    # Calculate the sum of distance and demand
    combined_score = distance_matrix + demand_vector
    
    # Apply a decay factor to less promising routes (more distant)
    decay_factor = 1 - (distance_matrix.sum(dim=1) / distance_matrix.sum()).unsqueeze(1)
    combined_score *= decay_factor
    
    # Integrate capacity by adding the inverse demand
    capacity_factor = 1 / (demands + 1e-8)
    
    # Calculate the heuristic by combining the scores and capacity factor
    heuristics = combined_score * capacity_factor
    
    # Clip negative values to zero
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
