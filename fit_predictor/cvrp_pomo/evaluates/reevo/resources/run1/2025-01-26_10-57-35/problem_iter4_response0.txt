```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    # Calculate the cumulative demand from the depot
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Calculate the cumulative distance from the depot
    cumulative_distance = torch.cumsum(distance_matrix[:, 0], dim=0)
    # Calculate the heuristics value for each edge
    for i in range(1, n):
        for j in range(i+1, n):
            if cumulative_demand[j] > 1:
                heuristics[i, j] = (cumulative_distance[j] - cumulative_distance[i]) * (1 - cumulative_demand[j])
            else:
                heuristics[i, j] = (cumulative_distance[j] - cumulative_distance[i]) * cumulative_demand[j]
    return heuristics
```
