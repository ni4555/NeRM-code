```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)  # Enhance promising edges
    
    # Prioritize depot by ensuring its edges have the highest heuristic values
    heuristics[:, 0] = heuristics[:, 0] * 2  # Prioritize outgoing edges from the depot
    heuristics[0, :] = heuristics[0, :] * 2  # Prioritize incoming edges to the depot
    
    # Avoid dominance by using a min-max approach on dominated edges
    dominated_edges = heuristics.unsqueeze(0).repeat(n, 1, 1) + heuristics.unsqueeze(1).repeat(1, n, 1) - heuristics.unsqueeze(2)
    dominated_edges = dominated_edges.min(dim=2)[0]
    dominated_edges[dominated_edges <= 0] = float('inf')
    dominated_edges = dominated_edges.max(dim=1)[0]  # Apply max on second axis to get max from dominated edges
    heuristics = heuristics.max(dim=1)[0]  # Max on first axis to apply minimum constraint from dominated edges
    
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = 0
    loop_reduction = torch.clamp(loop_heuristics, min=0)  # Avoid negative values during subtraction
    heuristics -= loop_reduction / 2  # Reduce loop influence by half to prevent excessive reduction
    
    return heuristics
```
