```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_threshold = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    priority_queue = torch.argsort(cumulative_demand)[::-1]
    
    heuristics = torch.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                heuristics[i, j] = (cumulative_demand[j] - cumulative_demand[i]) / demand_threshold * distance_matrix[i, j]
    
    return heuristics
```
