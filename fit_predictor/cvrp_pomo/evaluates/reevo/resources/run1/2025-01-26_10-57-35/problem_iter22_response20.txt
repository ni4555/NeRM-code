```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum().item()
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)  # Enhance promising edges
    
    # Ensure all elements are non-negative and within the capacity constraint
    heuristics = torch.clamp(heuristics, min=0)
    
    # Adjust the heuristics to mitigate dominance, without explicitly comparing all pairs
    # This can be done by ensuring that the maximum heuristic value for each node does not
    # exceed the capacity times the demand of the node, effectively limiting the dominance
    
    for i in range(n):
        max_demand = demands[i]
        max_heuristic = heuristics[i].max()
        adjusted_max = min(max_demand, max_heuristic)
        heuristics[i] = torch.clamp(heuristics[i], min=0, max=adjusted_max)
    
    return heuristics
```
