```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand) and normalize by the total demand for each node
    demand_matrix = (demand_matrix - torch.diag(demand_matrix)) / demands.sum(dim=1, keepdim=True)
    
    # Incorporate a penalty for loops (self-loop) in the heuristic
    loop_penalty = torch.ones_like(demand_matrix)
    torch.fill_diagonal_(loop_penalty, float('-inf'))
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * loop_penalty
    
    # Normalize the weighted distance matrix
    row_sums = weighted_distance_matrix.sum(dim=1, keepdim=True)
    weighted_distance_matrix = weighted_distance_matrix / row_sums
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = 1 / (demands + 1e-8)  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Clip negative values to zero
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
