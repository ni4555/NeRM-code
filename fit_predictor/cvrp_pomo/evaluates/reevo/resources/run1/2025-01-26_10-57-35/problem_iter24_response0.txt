```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    total_weighted_distance = weighted_distance_matrix.sum(dim=1, keepdim=True)
    normalized_weighted_distance = weighted_distance_matrix / (total_weighted_distance + 1e-8)
    
    # Integrate capacity constraint with a decay function for distant nodes
    capacity_decay = (1 / (1 + distance_matrix ** 2))  # Decay factor that increases with distance
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance, demand, and capacity
    heuristics = normalized_weighted_distance + demand_matrix * capacity_factor * capacity_decay
    
    # Enhance promising edges by considering both distance, demand, and capacity decay
    heuristics = heuristics * (1 + demands)
    
    # Minimize dominance in a vectorized way
    dominated_mask = torch.zeros((n, n), dtype=torch.bool)
    dominated_edges = (heuristics[:, None] + heuristics - heuristics[:, None, :]) > 0
    dominated_edges = dominated_edges.any(dim=2)
    for i in range(n):
        for j in range(n):
            if dominated_edges[i, j]:
                dominated_mask[i, j] = True
                min_dominated = heuristics[i, :] + heuristics[:, j] - heuristics[i, j]
                min_dominated = min_dominated[dominated_edges[i, j]]
                heuristics[i, j] = torch.max(heuristics[i, j], min_dominated)
    
    return heuristics
```
