```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_matrix = demands[:, None] * demands - torch.diag(demands)
    demand_matrix /= demands.sum(dim=1)
    weighted_distance_matrix = distance_matrix * demand_matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1)
    capacity_factor = (1 / (demands + 1e-8))
    heuristics = weighted_distance_matrix - capacity_factor * demand_matrix
    heuristics = torch.clamp(heuristics, min=0, max=1)
    return heuristics
```
