```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance depot edges and balance demands
    heuristics = heuristics + 0.5 * torch.diag(demands) * torch.ones(n, n)
    
    # Optimize capacities by reducing the impact of less capacitive nodes
    heuristics = heuristics - (demands / demands.sum())[:, None] * distance_matrix
    
    # Decay the heuristics for longer distances
    heuristics = heuristics * torch.exp(-0.1 * distance_matrix)
    
    # Minimize dominance by ensuring that no edge is overly dominated by another
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges <= 0] = 0
    dominated_edges = dominated_edges.view(n * n, n * n).min(dim=1)[0]
    dominated_edges[dominated_edges > 0] = dominated_edges[dominated_edges > 0].min()
    dominated_edges[dominated_edges > 0] = dominated_edges[dominated_edges > 0] - heuristics
    
    # Apply the dominated edge values
    heuristics += dominated_edges.view(n, n)
    
    # Ensure that the heuristic for the depot is always the highest to encourage visiting it
    heuristics[:, 0] = 1.0
    heuristics[0, :] = 1.0
    
    return heuristics
```
