```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    cumulative_demand = torch.cumsum(demands, dim=0)
    demand_diff = cumulative_demand[:, None] - cumulative_demand[None, :]
    inverse_distance = 1 / (distance_matrix + 1e-8)
    heuristics = demand_diff * inverse_distance
    # Normalize the heuristics to ensure non-negative values and to give preference to edges with lower distance
    heuristics = torch.clamp(heuristics, min=0) / heuristics.max() + 1e-8
    return heuristics
```
