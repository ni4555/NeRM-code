```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]

    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands

    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)

    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix

    # Integrate capacity constraint by subtracting the inverse of demand from the weighted distance
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    capacity_factor = capacity_factor[:, None].repeat(1, n)

    # Calculate heuristic by combining weighted distance and demand, subtracting capacity factor
    heuristics = weighted_distance_matrix - demand_matrix * capacity_factor

    # Normalize heuristics by dividing with max value to balance between heuristics values
    max_heuristic = heuristics.max()
    heuristics /= max_heuristic if max_heuristic != 0 else torch.zeros_like(heuristics)

    # Prioritize depot edges with higher weights
    depot_cost = demands[0]  # Fixed cost of visiting the depot
    heuristics[0, :] += depot_cost
    heuristics[:, 0] += depot_cost

    # Normalize heuristics to maintain a consistent scale
    heuristics /= heuristics.sum(dim=1, keepdim=True)

    # Saturate heuristics to ensure all are non-negative and to maintain a distinct edge between depot and other nodes
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
