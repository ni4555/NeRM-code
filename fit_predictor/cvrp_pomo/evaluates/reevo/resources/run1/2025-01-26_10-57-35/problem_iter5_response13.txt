```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands_cumulative = demands.cumsum(dim=0)
    
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Loop through all nodes to calculate the heuristic values
    for i in range(1, n):
        for j in range(i + 1, n):
            # Calculate the cumulative demand difference
            demand_diff = demands_cumulative[j] - demands_cumulative[i]
            
            # Calculate the heuristic value
            heuristic_value = demand_diff / distance_matrix[i, j]
            
            # Assign the heuristic value to the edge
            heuristics[i, j] = heuristic_value
            heuristics[j, i] = heuristic_value
    
    return heuristics
```
