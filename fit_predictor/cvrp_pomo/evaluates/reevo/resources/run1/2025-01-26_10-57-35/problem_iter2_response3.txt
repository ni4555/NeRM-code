```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the initial distances from the depot to all other nodes
    initial_distances = distance_matrix[depot]
    
    # Initialize a visited array to keep track of visited nodes
    visited = torch.zeros(n, dtype=torch.bool)
    
    # Iterate over all nodes except the depot
    for i in range(1, n):
        if not visited[i]:
            # Find the nearest unvisited node
            nearest_node = torch.argmin(initial_distances)
            # Update the heuristics for the edge from the depot to the nearest node
            heuristics[depot, nearest_node] = distance_matrix[depot, nearest_node]
            heuristics[nearest_node, depot] = distance_matrix[nearest_node, depot]
            
            # Update the initial distances by subtracting the distance to the nearest node
            initial_distances -= distance_matrix[nearest_node]
            
            # Mark the node as visited
            visited[i] = True
    
    # Calculate the cumulative demand from the depot to all other nodes
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the demand-based heuristic
    demand_heuristic = demands - demands[depot]
    
    # Combine the distance-based heuristic and the demand-based heuristic
    heuristics += demand_heuristic.unsqueeze(0)
    heuristics += demand_heuristic.unsqueeze(1)
    
    return heuristics
```
