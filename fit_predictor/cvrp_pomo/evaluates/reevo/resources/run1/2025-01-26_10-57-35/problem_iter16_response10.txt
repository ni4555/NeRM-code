```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize demands
    demand_normalized = demands / demands.sum()
    
    # Initialize the cost matrix with negative distances for non-diagonal elements
    cost_matrix = torch.where(torch.eye(n, dtype=distance_matrix.dtype) == 1, 0, -distance_matrix)
    
    # Loop penalty matrix
    loop_penalty = -1e8 * torch.eye(n, dtype=cost_matrix.dtype)
    
    # Add demand-based factors to the cost matrix
    cost_matrix += demand_normalized[None, :] * cost_matrix
    cost_matrix += demand_normalized[:, None] * cost_matrix
    
    # Normalize the cost matrix
    row_sums = cost_matrix.sum(dim=1, keepdim=True)
    row_sums[row_sums == 0] = 1  # Avoid division by zero
    cost_matrix = cost_matrix / row_sums
    
    # Apply capacity factor
    capacity_factor = 1 / (demands + 1e-8)
    cost_matrix *= capacity_factor
    
    # Add loop penalty
    cost_matrix += loop_penalty
    
    return cost_matrix
```
