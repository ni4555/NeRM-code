```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize demand matrix by summing demands to account for total vehicle capacity
    demand_sum = demands.sum()
    normalized_demands = demands / demand_sum
    
    # Demand matrix for self-comparison, normalized
    demand_matrix = normalized_demands[:, None] * normalized_demands
    
    # Subtract diagonal (self-demand)
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix by its sum
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint using inverse demand
    capacity_factor = (1 / (normalized_demands + 1e-8))
    
    # Combine weighted distance, demand, and capacity factor
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Apply logarithmic scale to balance demand and distance
    heuristics = torch.log1p(heuristics)
    
    # Apply demand balance factor to weigh demands uniformly
    demand_balance_factor = (1 - normalized_demands)
    heuristics *= demand_balance_factor
    
    # Ensure depot heuristic is highest by adding demands of depot
    depot_cost = demand_sum
    heuristics[0, :] += depot_cost
    heuristics[:, 0] += depot_cost
    
    # Apply penalties for overcapacity and undercapacity
    overcapacity_penalty = (demands > 1).float() * -10
    undercapacity_penalty = (demands < 1).float() * 5
    heuristics += overcapacity_penalty - undercapacity_penalty
    
    # Avoid dominance by ensuring that no edge is overly dominated
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges > 0] = 0
    heuristics = torch.max(heuristics, dominated_edges.min(dim=2)[0])
    
    # Apply dampening factor to all heuristic values to prevent over-aggressive heuristics
    dampening_factor = 0.95
    heuristics *= dampening_factor
    
    # Apply capacity factor to emphasize capacity constraints
    heuristics += (capacity_factor - 1) * demands
    
    # Apply loop minimization to ensure stability
    loop_minimization_factor = 0.75
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = loop_minimization_factor * loop_heuristics[loop_heuristics > 0]
    heuristics += loop_heuristics
    
    # Refine loop minimization iteratively for better stability
    loop_minimization_factor = 0.70
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = loop_minimization_factor * loop_heuristics[loop_heuristics > 0]
    heuristics += loop_heuristics
    
    return heuristics
```
