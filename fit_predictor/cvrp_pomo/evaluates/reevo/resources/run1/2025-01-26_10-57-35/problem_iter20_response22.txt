```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]

    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands

    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)

    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix

    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)

    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero

    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor

    # Apply penalties for loops (edges from a node to itself)
    loop_penalty = 1e-4
    heuristics = heuristics + loop_penalty * (demand_matrix * demand_matrix)

    # Apply a dominance minimization strategy by considering the minimum distance to the depot
    min_distance_to_depot = distance_matrix[:, 0]
    heuristics = heuristics - min_distance_to_depot

    # Balance the heuristic to minimize dominance by considering the inverse distance to the depot
    inverse_distance_to_depot = (1 / (distance_matrix[:, 0] + 1e-8))  # Adding a small epsilon to avoid division by zero
    heuristics = heuristics * inverse_distance_to_depot

    # Normalize heuristics by their sum to maintain relative weights
    heuristics = heuristics / heuristics.sum(dim=1, keepdim=True)

    # Clip negative values to zero
    heuristics = torch.clamp(heuristics, min=0)

    return heuristics
```
