```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance depot edges by considering their fixed cost
    depot_cost = demands[0]  # Fixed cost of visiting the depot
    heuristics[0, :] = heuristics[0, :] + depot_cost
    heuristics[:, 0] = heuristics[:, 0] + depot_cost
    
    # Decay undesirable edges based on dominance and balance demands
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the dominance of edge i-j
                dominance = heuristics[i, :] + heuristics[:, j] - heuristics[i, j]
                dominated_edges = (dominance > 0).nonzero(as_tuple=False)
                if dominated_edges.numel() > 0:
                    max_dominated = dominance[dominated_edges].max()
                    heuristics[i, j] = heuristics[i, j] - max_dominated
                    
    # Balance demands by adjusting heuristics based on node demand
    demand_balance_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    heuristics = heuristics * demand_balance_factor
    
    return heuristics
```
