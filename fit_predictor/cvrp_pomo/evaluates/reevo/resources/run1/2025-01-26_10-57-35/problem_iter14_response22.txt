```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Inverse demand matrix to consider capacity
    inverse_demand_matrix = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Integrate capacity constraint and demand diversity in heuristic
    heuristics = weighted_distance_matrix + inverse_demand_matrix
    
    # Normalize the heuristic by the sum of inverse demand to ensure all values are positive
    total_capacity = inverse_demand_matrix.sum()
    heuristics /= total_capacity
    
    return heuristics
```
