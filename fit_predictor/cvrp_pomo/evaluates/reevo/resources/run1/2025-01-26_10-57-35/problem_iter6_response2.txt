```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the sum of demands for each edge
    sum_of_demands = torch.sum(demands[:, None] + demands[None, :], dim=0)
    
    # Calculate the inverse of the distance matrix
    inverse_distance = 1 / (distance_matrix + 1e-8)  # Add a small constant to avoid division by zero
    
    # Combine the sum of demands and inverse distance
    combined_values = sum_of_demands * inverse_distance
    
    # Normalize the combined values to ensure non-negative and to scale the values appropriately
    max_value = combined_values.max() + 1e-8
    heuristics = combined_values / max_value
    
    # Adjust heuristics by demand, ensuring that the sum of demands in any route does not exceed the vehicle capacity
    total_demand = demands.sum()
    for i in range(n):
        for j in range(n):
            if i != j:
                # Normalize by the total demand to avoid exceeding the vehicle capacity
                heuristics[i, j] *= demands[i] / total_demand
    
    return heuristics
```
