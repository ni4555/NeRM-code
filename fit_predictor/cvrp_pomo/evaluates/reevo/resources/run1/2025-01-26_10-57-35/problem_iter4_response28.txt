```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    heuristics = torch.zeros_like(distance_matrix)
    
    # Pre-compute cumulative demands and distances
    cumulative_demand = torch.cumsum(demands, dim=0)
    cumulative_distance = torch.cumsum(distance_matrix[:, 0], dim=0)
    
    # Pre-compute the distance from the depot to the last node
    last_node_distance = distance_matrix[:, 0].unsqueeze(1)
    
    # Initialize the heuristics matrix with zeros
    heuristics.fill_(float('inf'))
    
    # For each node, calculate the heuristics value for edges
    for i in range(1, n):
        for j in range(i + 1, n):
            # Calculate the remaining capacity
            remaining_capacity = 1 - cumulative_demand[j] / demands[j]
            # Calculate the heuristics value
            heuristics[i, j] = (cumulative_distance[j] - cumulative_distance[i]) * remaining_capacity
            heuristics[j, i] = heuristics[i, j]
    
    # Incorporate demand awareness directly in the heuristic
    demand_adjustment = (demands[None] - cumulative_demand[:, None]) * (1 - cumulative_demand[:, None])
    heuristics += demand_adjustment
    
    # Adjust for the return to the depot
    heuristics += cumulative_distance[:, None] - last_node_distance
    
    return heuristics
```
