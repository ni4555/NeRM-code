```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Create a mask where cumulative demand at j is greater than at i
    mask = cumulative_demand[:, None] > cumulative_demand[None, :]
    # Calculate the potential cost for each edge
    potential_cost = distance_matrix * (1 - mask)
    # Apply negative mask to get negative values for promising edges
    heuristics = -potential_cost
    return heuristics
```
