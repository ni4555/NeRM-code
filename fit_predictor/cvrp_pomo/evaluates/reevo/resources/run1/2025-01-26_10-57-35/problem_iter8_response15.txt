```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    capacity_penalty = torch.min(torch.tensor(1.0) - demands, torch.zeros_like(demands))
    sum_of_demands = torch.sum(demands[:, None] + demands[None, :], dim=0)
    inverse_distance = 1 / (distance_matrix + 1e-8)
    heuristics = (sum_of_demands * inverse_distance) * (1 - demands) * capacity_penalty
    heuristics[distance_matrix > 0] = torch.clamp(heuristics[distance_matrix > 0], max=0)
    return heuristics
```
