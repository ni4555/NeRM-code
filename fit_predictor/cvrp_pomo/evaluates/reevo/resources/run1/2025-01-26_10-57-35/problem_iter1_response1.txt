```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    demand_cumsum = demands.cumsum()
    demand_thresholds = demand_cumsum * (distance_matrix[depot] / (distance_matrix[depot].sum()))
    
    heuristics = -torch.ones_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j and i != depot and j != depot:
                if distance_matrix[i, j] < demand_thresholds[i]:
                    heuristics[i, j] = distance_matrix[i, j] / demands[i]
    return heuristics
```
