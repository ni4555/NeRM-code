```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]

    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands

    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)

    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix

    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)

    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = (1 / (demands + 1e-8))  # Avoid division by zero

    # Calculate heuristic by combining weighted distance, demand, and capacity factor
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor

    # Apply a logarithmic scale to balance demand and distance
    heuristics = torch.log1p(heuristics)

    # Normalize the heuristics to avoid dominance and ensure stability
    max_heuristic = heuristics.max()
    normalized_heuristics = heuristics / max_heuristic

    # Integrate demand balance by adjusting the heuristics directly
    demand_balance_factor = demands / demands.sum()
    heuristics *= demand_balance_factor

    # Apply a linear combination of capacity and demand
    heuristics = (1 - 0.8) * heuristics + (0.8 * (capacity_factor - 1) * demands)

    # Minimize loops by penalizing them directly in the heuristic
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] *= -1
    heuristics += loop_heuristics

    # Reduce the dampening factor to increase the influence of capacity constraints
    dampening_factor = 0.9
    heuristics *= dampening_factor

    # Refine the loop minimization by reducing the impact of loops
    loop_minimization_factor = 0.1
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] *= loop_minimization_factor
    heuristics += loop_heuristics

    # Emphasize capacity in the heuristic more than demand
    capacity_emphasis_factor = 1.1
    heuristics *= capacity_emphasis_factor

    # Reflect on the dampening factor and reduce its effect to stabilize the heuristic
    dampening_factor = 0.95
    heuristics *= dampening_factor

    # Apply penalties for overcapacity and undercapacity more explicitly
    overcapacity_penalty = (demands > 1).float() * -10
    undercapacity_penalty = (demands < 1).float() * 5
    heuristics += normalized_heuristics * overcapacity_penalty - undercapacity_penalty

    # Adjust the heuristic values to ensure they are not overly dominant
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges > 0] = 0
    dominated_edges = dominated_edges.view(n, n, n)
    dominated_edges = dominated_edges.min(dim=2)[0]
    heuristics = torch.max(heuristics, dominated_edges)

    return heuristics
```
