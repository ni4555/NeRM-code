```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum().item()
    demand_matrix = (demands[:, None] * demands - torch.diag(demands**2)) / demands.sum(dim=1, keepdim=True)
    demand_matrix = torch.clamp(demand_matrix, min=0)

    # Vectorized computation for weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix

    # Integrate capacity constraints by considering demands and distances
    capacity_constrained_matrix = torch.clamp(weighted_distance_matrix, max=demands)

    # Normalize the capacity constrained matrix
    normalized_capacity_constrained_matrix = capacity_constrained_matrix / capacity_constrained_matrix.sum(dim=1, keepdim=True)

    # Combine normalized demand and normalized distance
    heuristics = normalized_capacity_constrained_matrix + demand_matrix

    # Normalize the heuristics matrix to ensure non-negative values
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    return heuristics
```
