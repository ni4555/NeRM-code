```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand and a distance-based decay
    capacity_factor = (1 / (demands + 1e-8)) * torch.exp(-0.5 * weighted_distance_matrix)
    
    # Combine the weighted distance, demand, and capacity constraint
    combined_factor = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Ensure all values are non-negative
    heuristics = torch.clamp(combined_factor, min=0)
    
    return heuristics
```
