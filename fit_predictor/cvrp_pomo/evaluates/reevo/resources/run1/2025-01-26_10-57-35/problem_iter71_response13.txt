```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Initialize heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = (1 / (demands + 1e-8))  # Avoid division by zero
    
    # Normalize the distance matrix by the sum of the capacity factor and demand
    normalized_distance_matrix = distance_matrix / (capacity_factor + demand_matrix)
    
    # Emphasize capacity constraints
    heuristics = capacity_factor * normalized_distance_matrix
    
    # Apply a logarithmic scale to balance demand and distance
    heuristics = torch.log1p(heuristics)
    
    # Normalize the heuristics to avoid dominance and ensure stability
    max_heuristic = heuristics.max()
    normalized_heuristics = heuristics / max_heuristic
    
    # Apply penalties for overcapacity and undercapacity
    overcapacity_penalty = (demands > 1).float() * -10
    undercapacity_penalty = (demands < 1).float() * 5
    heuristics += normalized_heuristics * overcapacity_penalty - undercapacity_penalty
    
    # Ensure that the heuristic for the depot is the highest
    heuristics[0, :] += demands[0]
    heuristics[:, 0] += demands[0]
    
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = 0
    heuristics += loop_heuristics
    
    # Apply a dampening factor to all heuristic values
    dampening_factor = 0.8
    heuristics *= dampening_factor
    
    # Adjust the loop minimization effect
    loop_minimization_factor = 0.6
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = loop_minimization_factor * loop_heuristics[loop_heuristics > 0]
    heuristics += loop_heuristics
    
    return heuristics
```
