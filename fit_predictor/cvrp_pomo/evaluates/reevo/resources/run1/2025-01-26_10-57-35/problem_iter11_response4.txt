```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand) and normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / (demands.sum(dim=1)[:, None] + 1e-8)
    
    # Normalize distances by their median to balance the effect of outliers
    median_distance = distance_matrix.median(dim=1)[0]
    normalized_distance_matrix = distance_matrix / median_distance[:, None]
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = 1 / (demands + 1e-8)
    
    # Combine demand and normalized distance, adjusted by capacity
    heuristics = demand_matrix + normalized_distance_matrix * capacity_factor
    
    # Clip negative values to zero and normalize by the maximum positive heuristic value
    max_positive = torch.max(heuristics[heuristics > 0])
    heuristics[heuristics < 0] = 0
    if max_positive > 0:
        heuristics /= max_positive
    
    return heuristics
```
