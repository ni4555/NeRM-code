```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An improved heuristic that considers the inverse of distance, cumulative demand, and a demand-based heuristic."""
    # Calculate the cumulative demand for each node in the order of the distance matrix
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Calculate the inverse of the distance matrix
    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small value to avoid division by zero
    # Calculate a demand-based heuristic, favoring edges with lower demand difference
    demand_diff = demands[:, None] - demands[None, :]
    demand_diff heuristic = -torch.abs(demand_diff)
    # Combine the heuristics using a weighted sum
    heuristics = inverse_distance * (inverse_distance + demand_diff heuristic)
    # Normalize the heuristics by the maximum value to ensure non-negative values
    heuristics /= heuristics.max() + 1e-8
    return heuristics
```
