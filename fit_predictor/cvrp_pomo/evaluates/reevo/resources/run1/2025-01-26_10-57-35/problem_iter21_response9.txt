```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint with decay function for distant nodes
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    decay_factor = 1 / (distance_matrix + 1e-8)
    
    # Calculate heuristic by combining normalized weighted distance, demand, and decay factor
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor * decay_factor
    
    # Enhance promising edges by considering distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)
    
    # Normalize to ensure the maximum heuristic is the sum of total distance
    total_distance = weighted_distance_matrix.sum()
    heuristics = heuristics / heuristics.sum()
    
    return heuristics
```
