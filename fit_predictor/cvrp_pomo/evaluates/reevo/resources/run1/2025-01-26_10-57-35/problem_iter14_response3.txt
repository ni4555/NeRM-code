```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum().item()
    demands = demands / total_capacity  # Normalize demand by total vehicle capacity
    
    # Initialize the heuristic matrix with negative infinity
    heuristics = -torch.inf * torch.ones_like(distance_matrix)
    
    # Priority queue for the edges (start, end) based on the initial heuristic value
    priority_queue = []
    heuristics[0, 1:n] = distance_matrix[0, 1:n]
    
    for end in range(1, n):
        heapq.heappush(priority_queue, (distance_matrix[0, end], (0, end)))
    
    # Track the demand used so far to ensure capacity constraint is not violated
    current_demand = 0
    
    while priority_queue:
        cost, (start, end) = heapq.heappop(priority_queue)
        
        if current_demand + demands[end] > total_capacity:
            continue
        
        heuristics[start, end] = cost
        heuristics[end, start] = cost
        current_demand += demands[end]
        
        if current_demand <= total_capacity:
            for next_node in range(n):
                if demands[next_node] <= total_capacity - current_demand and heuristics[end, next_node] == -torch.inf:
                    heapq.heappush(priority_queue, (distance_matrix[end, next_node], (end, next_node)))
    
    # Apply a penalty for edges that would cause the vehicle to exceed capacity
    for i in range(n):
        for j in range(n):
            if i != j and demands[j] > total_capacity - demands[i]:
                heuristics[i, j] += float('inf')
    
    # Remove infinite values and replace them with a very large negative number
    inf_mask = heuristics == float('inf')
    heuristics[inf_mask] = -float('inf')
    
    # Ensure all edges have positive heuristics
    heuristics = torch.clamp(heuristics, min=1e-10)
    
    return heuristics
```
