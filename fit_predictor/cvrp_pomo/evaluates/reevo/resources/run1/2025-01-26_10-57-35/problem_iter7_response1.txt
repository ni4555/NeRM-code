```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_matrix = demands[:, None] * demands
    demand_matrix -= torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate the cumulative demand matrix, considering symmetry
    cumulative_demand_matrix = torch.cumsum(demand_matrix, dim=1)
    cumulative_demand_matrix /= cumulative_demand_matrix[:, -1][:, None]
    
    # Calculate the capacity constraint matrix
    capacity_constraint_matrix = (cumulative_demand_matrix <= 1.0)
    
    # Calculate the weighted distance matrix based on demand
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    normalized_weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Combine heuristics using demand variance and distance correlation
    heuristics = (capacity_constraint_matrix * normalized_weighted_distance_matrix) + demand_matrix
    
    # Update heuristics adaptively based on the current state of the solution
    adaptive_heuristics = heuristics * capacity_constraint_matrix
    
    # Clip the negative values to zero, as they are undesirable
    heuristics = torch.clamp(adaptive_heuristics, min=0)
    
    return heuristics
```
