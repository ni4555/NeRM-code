```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by subtracting the inverse of demand from the weighted distance
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand, subtracting capacity factor
    heuristics = weighted_distance_matrix - demand_matrix * capacity_factor
    
    # Scale the heuristics to ensure all are non-negative and to provide a balance
    max_heuristic = heuristics.max()
    scaled_heuristics = heuristics / max_heuristic if max_heuristic != 0 else torch.zeros_like(heuristics)
    
    # Ensure that the heuristic for the depot is always the highest to encourage visiting it
    scaled_heuristics[0, :] = 1.0
    scaled_heuristics[:, 0] = 1.0
    
    return scaled_heuristics
```
