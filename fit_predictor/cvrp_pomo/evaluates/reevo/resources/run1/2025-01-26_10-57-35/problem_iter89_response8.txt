```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = (1 / (demands + 1e-8))  # Avoid division by zero
    
    # Calculate heuristic by combining weighted distance, demand, and capacity factor
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Apply a logarithmic scale to balance demand and distance
    heuristics = torch.log1p(heuristics)
    
    # Normalize the heuristics to avoid dominance and ensure stability
    max_heuristic = heuristics.max()
    normalized_heuristics = heuristics / max_heuristic
    
    # Integrate capacity constraints more directly by penalizing overcapacity and rewarding undercapacity
    overcapacity_penalty = (demands > 1).float() * -15
    undercapacity_reward = (demands < 1).float() * 10
    heuristics += normalized_heuristics * overcapacity_penalty + undercapacity_reward
    
    # Emphasize capacity constraints more than distance
    capacity_emphasis_factor = 1.2
    heuristics *= capacity_emphasis_factor
    
    # Reduce the effect of demand on heuristic to prioritize distance
    demand_influence_reduction = 0.8
    heuristics *= demand_influence_reduction
    
    # Avoid dominance by ensuring that no edge is overly dominated by another
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges > 0] = 0
    dominated_edges = dominated_edges.view(n, n, n)
    dominated_edges = dominated_edges.min(dim=2)[0]
    heuristics = torch.max(heuristics, dominated_edges)
    
    # Apply a dampening factor to all heuristic values to prevent too aggressive search
    dampening_factor = 0.9
    heuristics *= dampening_factor
    
    # Reflect on loop minimization to balance exploration and exploitation
    loop_minimization_factor = 0.2
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = loop_minimization_factor * loop_heuristics[loop_heuristics > 0]
    heuristics += loop_heuristics
    
    # Further stabilize the heuristic by ensuring no edge is overly dominated
    heuristics = heuristics - dominated_edges
    
    return heuristics
```
