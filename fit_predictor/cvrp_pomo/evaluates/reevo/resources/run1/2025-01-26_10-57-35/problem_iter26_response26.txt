```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_matrix = demands[:, None] * demands
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    capacity_factor = (1 / (demands + 1e-8))
    
    heuristics = weighted_distance_matrix - demand_matrix * capacity_factor
    
    # Enhance the heuristic values for high-demand edges and ensure dominance
    heuristics = heuristics * (1 + torch.relu(capacity_factor - 1))
    
    # Normalize the heuristics by dividing by the maximum heuristic value
    max_heuristic = heuristics.max()
    heuristics /= max_heuristic
    
    # Add a small positive value to all heuristics to ensure they are not zero
    heuristics += 1e-8
    
    return heuristics
```
