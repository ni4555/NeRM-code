```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)  # Enhance promising edges
    
    # Prioritize depot by ensuring its edges have the highest heuristic values
    heuristics[:, 0] = heuristics[:, 0] * 2  # Prioritize outgoing edges from the depot
    heuristics[0, :] = heuristics[0, :] * 2  # Prioritize incoming edges to the depot
    
    # Avoid dominance by ensuring that no edge is overly dominated by another
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges > 0] = 0
    min_dominated = dominated_edges.max(dim=2)[0]
    heuristics = torch.max(heuristics, min_dominated)
    
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = 0
    heuristics += loop_heuristics
    
    # Normalize heuristics to avoid dominance issues
    max_heuristic = heuristics.max()
    scaled_heuristics = torch.clamp(heuristics / max_heuristic, min=0, max=1)
    
    # Introduce a penalty for overcapacity edges
    overcapacity_penalty = (demands > 1).float() * -10  # Large negative value for overcapacity
    heuristics = heuristics + overcapacity_penalty
    
    # Apply decay function for distant nodes
    decay_factor = torch.exp(-weighted_distance_matrix)
    heuristics = heuristics * decay_factor
    
    return scaled_heuristics
```
