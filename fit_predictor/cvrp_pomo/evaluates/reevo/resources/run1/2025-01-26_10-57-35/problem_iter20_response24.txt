```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand) and normalize by the total demand for each node
    total_demand = demand_matrix.sum(dim=1, keepdim=True)
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / (total_demand + 1e-8)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Integrate capacity constraint by subtracting the inverse of the demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix - demand_matrix * capacity_factor
    
    # Ensure heuristic values are non-negative
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
