```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    heuristics = torch.zeros_like(distance_matrix)
    total_capacity = demands.sum()
    demands = demands / total_capacity  # Normalize demand by total vehicle capacity
    
    # Initialize a visited array to keep track of visited nodes
    visited = torch.zeros(n, dtype=torch.bool)
    
    # Create a priority queue to store the potential edges with their heuristics
    import heapq
    priority_queue = []
    
    # Add the initial depot edge to the priority queue
    heapq.heappush(priority_queue, (0, (depot, 1)))
    
    while len(visited) < n - 1:  # We do not visit the depot as our last stop
        _, (u, v) = heapq.heappop(priority_queue)
        if not visited[u]:
            heuristics[u, v] = distance_matrix[u, v]
            heuristics[v, u] = distance_matrix[v, u]
            
            # Update the cumulative demand
            visited[u] = True
            visited[v] = True
            cumulative_demand = torch.cumsum(demands[visited], dim=0)
            
            # Calculate the heuristic based on remaining demand
            for i in range(n):
                if not visited[i]:
                    heuristics[i, v] += (cumulative_demand - demands[i]) / (distance_matrix[i, v] + 1e-8)
                    heuristics[v, i] += (cumulative_demand - demands[i]) / (distance_matrix[v, i] + 1e-8)
                    
            # Add new edges to the priority queue
            for i in range(n):
                if not visited[i]:
                    heapq.heappush(priority_queue, (0, (v, i)))
    
    return heuristics
```
