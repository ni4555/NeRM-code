```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Apply a decay factor to the heuristic to encourage diversification
    decay_factor = 0.5
    heuristics *= decay_factor
    
    # Balance heuristics by incorporating the vehicle's remaining capacity into the heuristic
    capacity_factor = 1 - (demands / demands.sum())
    heuristics += capacity_factor * torch.clamp(demand_matrix, max=1)
    
    # Prioritize the depot edges, as in heuristics_v1
    heuristics[:, 0] = heuristics[:, 0] * 2  # Prioritize outgoing edges from the depot
    heuristics[0, :] = heuristics[0, :] * 2  # Prioritize incoming edges to the depot
    
    # Instead of dominance checking, encourage non-domination by reducing values
    non_domination_factor = 0.1
    for i in range(n):
        dominated_edges = heuristics[i, :] + heuristics[:, i] - heuristics[i, i]
        dominated_edges[dominated_edges < 0] = 0
        heuristics[i, :] = torch.min(heuristics[i, :], dominated_edges + non_domination_factor)
    
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = 0
    heuristics += loop_heuristics
    
    return heuristics
```
