```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the sum of demands for each edge, considering the depot (0)
    sum_of_demands = torch.sum(demands[:, None] + demands[None, :], dim=0)
    # Calculate the inverse of the distance matrix, adding a small constant to avoid division by zero
    inverse_distance = 1 / (distance_matrix + 1e-8)
    # Combine the sum of demands and inverse distance
    heuristics = sum_of_demands * inverse_distance
    # Normalize the heuristics by the maximum value to ensure non-negative values
    heuristics /= heuristics.max() + 1e-8
    return heuristics
```
