```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Initialize heuristic matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = (1 / (demands + 1e-8))  # Avoid division by zero
    
    # Calculate basic heuristic by combining weighted distance and demand
    basic_heuristic = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Balance between distance and demand using a linear function
    demand_balance_factor = demands / demands.sum()
    basic_heuristic *= demand_balance_factor
    
    # Adjust for stability
    stable_heuristic = torch.log1p(basic_heuristic)
    
    # Apply penalties for overcapacity and undercapacity to stable heuristic
    overcapacity_penalty = (demands > 1).float() * -15
    undercapacity_penalty = (demands < 1).float() * 10
    stable_heuristic += stable_heuristic * overcapacity_penalty - undercapacity_penalty
    
    # Emphasize capacity constraints
    stable_heuristic += (capacity_factor - 1) * demands
    
    # Apply a dampening factor
    dampening_factor = 0.95
    heuristics = dampening_factor * stable_heuristic
    
    # Adjust loop minimization effect to reduce the weight
    loop_minimization_factor = 0.1
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = loop_minimization_factor * loop_heuristics[loop_heuristics > 0]
    heuristics += loop_heuristics
    
    # Reflect on the dampening factor and apply again
    dampening_factor = 0.90
    heuristics = dampening_factor * heuristics
    
    # Apply final adjustments to penalties and balance
    heuristics += overcapacity_penalty - undercapacity_penalty
    
    return heuristics
```
