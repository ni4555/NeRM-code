```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)  # Enhance promising edges
    
    # Prioritize depot by ensuring its edges have the highest heuristic values
    heuristics[:, 0] = heuristics[:, 0] * 2  # Prioritize outgoing edges from the depot
    heuristics[0, :] = heuristics[0, :] * 2  # Prioritize incoming edges to the depot
    
    # Decay non-promising paths
    non_promising_factor = 1 - torch.sigmoid((1 - weighted_distance_matrix / (heuristics.sum(dim=1, keepdim=True) + 1e-8)))
    heuristics *= non_promising_factor
    
    # Normalize again for consistency
    heuristics /= heuristics.sum(dim=1, keepdim=True)
    
    # Ensure the depot's edges are the most attractive
    heuristics[:, 0] = heuristics[:, 0] * 3
    heuristics[0, :] = heuristics[0, :] * 3
    
    # Introduce a penalty for overcapacity edges
    overcapacity_penalty = (demands > 1).float() * -10  # Large negative value for overcapacity
    heuristics = heuristics + overcapacity_penalty
    
    return heuristics
```
