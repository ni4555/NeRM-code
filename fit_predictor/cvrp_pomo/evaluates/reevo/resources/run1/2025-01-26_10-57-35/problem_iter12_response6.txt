```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by subtracting the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand, subtracting capacity factor
    heuristics = weighted_distance_matrix - demand_matrix * capacity_factor
    
    # Emphasize high-capacity edges
    inverse_demand_factor = 1 / (demands + 1e-8)
    
    # Normalize the heuristics to ensure non-negative values and a maximum value of 1
    max_demand = demands.max()
    heuristics = heuristics / max_demand * inverse_demand_factor
    
    # Ensure all values are between 0 and 1
    heuristics = torch.clamp(heuristics, min=0, max=1)
    
    return heuristics
```
