```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_matrix = demands[:, None] * demands
    demand_matrix -= demand_matrix.diag()
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate the weighted distance matrix based on demand
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    normalized_weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Calculate the demand variance
    demand_variance = (demands - demands.mean()) ** 2
    
    # Calculate the heuristic by combining normalized demand, normalized distance, and demand variance
    heuristics = normalized_weighted_distance_matrix + demand_matrix - demand_variance
    
    # Apply a capacity balance heuristic by adding a factor that encourages visiting nodes with similar demands
    balance_factor = torch.abs(torch.argsort(demands, dim=0) - torch.arange(n, device=demands.device)) * 0.1
    
    # Combine all factors into the final heuristic
    heuristics += balance_factor
    
    # Clip the negative values to zero, as they are undesirable
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
