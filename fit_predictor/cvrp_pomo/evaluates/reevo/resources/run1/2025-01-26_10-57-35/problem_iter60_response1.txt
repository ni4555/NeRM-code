```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = 1 / (demands + 1e-8)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Combine weighted distance, demand, and capacity factor
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Apply a logarithmic scale to balance demand and distance
    heuristics = torch.log1p(heuristics)
    
    # Normalize the combined heuristic
    normalized_heuristics = heuristics / heuristics.sum(dim=1, keepdim=True)
    
    # Apply a decay to prevent dominance of edges leading to the depot
    depot_decay_factor = torch.log1p(torch.abs(distance_matrix[:, 0]))
    normalized_heuristics[:, 0] *= depot_decay_factor
    normalized_heuristics[0, :] *= depot_decay_factor
    
    # Balance between distance and demand using a linear function
    demand_balance_factor = 1 + demands
    
    # Apply penalties for overcapacity and undercapacity
    overcapacity_penalty = (demands > 1).float() * -10
    undercapacity_penalty = (demands < 1).float() * 5
    normalized_heuristics += overcapacity_penalty - undercapacity_penalty
    
    # Ensure that the heuristic for the depot is the highest
    depot_cost = demands[0]
    normalized_heuristics[0, :] += depot_cost
    normalized_heuristics[:, 0] += depot_cost
    
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_matrix = torch.eye(n) + torch.eye(n).transpose(0, 1)
    loop_heuristics = normalized_heuristics + normalized_heuristics.T - loop_matrix
    loop_heuristics[loop_heuristics > 0] = 0
    normalized_heuristics -= loop_heuristics
    
    # Avoid dominance by ensuring that no edge is overly dominated by another
    dominated_edges = normalized_heuristics.unsqueeze(1) + normalized_heuristics.unsqueeze(0) - normalized_heuristics.unsqueeze(2)
    dominated_edges[dominated_edges > 0] = 0
    dominated_edges = dominated_edges.view(n, n, n)
    dominated_edges = dominated_edges.min(dim=2)[0]
    normalized_heuristics = torch.max(normalized_heuristics, dominated_edges)
    
    return normalized_heuristics
```
