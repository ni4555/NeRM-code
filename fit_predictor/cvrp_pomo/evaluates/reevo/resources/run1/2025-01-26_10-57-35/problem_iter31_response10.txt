```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)  # Enhance promising edges
    
    # Minimize loops by ensuring that the sum of demands does not exceed vehicle capacity
    for i in range(n):
        for j in range(n):
            if i != j:
                # Find edges that would create a loop
                loop_edges = heuristics[i, :] + heuristics[:, j] - heuristics[i, j]
                loop_edges = loop_edges[loop_edges > 0]
                if loop_edges.numel() > 0:
                    # Minimize loops by setting the heuristic for loop edges to 0
                    heuristics[i, j] = torch.clamp(heuristics[i, j] - loop_edges.min(), min=0)
    
    # Prioritize depot by setting the heuristic for edges to the depot to a high value
    heuristics[:, 0] = 1.0
    heuristics[0, :] = 1.0
    
    return heuristics
```
