```python
import torch
import heapq

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    heuristics = torch.zeros_like(distance_matrix)
    total_capacity = demands.sum()
    demands = demands / total_capacity  # Normalize demand by total vehicle capacity
    
    # Initialize a visited array to keep track of visited nodes
    visited = torch.zeros(n, dtype=torch.bool)
    
    # Priority queue to store potential edges with their heuristics
    priority_queue = []
    
    # Add the initial depot edge to the priority queue
    heapq.heappush(priority_queue, (0, (depot, 1)))
    
    while len(visited) < n - 1:  # We do not visit the depot as our last stop
        _, (u, v) = heapq.heappop(priority_queue)
        if not visited[u]:
            heuristics[u, v] = distance_matrix[u, v]
            heuristics[v, u] = distance_matrix[v, u]
            
            # Update the cumulative demand
            visited[u] = True
            visited[v] = True
            cumulative_demand = torch.cumsum(demands[visited], dim=0)
            
            # Calculate the heuristic based on remaining demand
            for i in range(n):
                if not visited[i]:
                    if cumulative_demand - demands[i] <= 1:
                        heuristics[i, v] += (cumulative_demand - demands[i]) / (distance_matrix[i, v] + 1e-8)
                        heuristics[v, i] += (cumulative_demand - demands[i]) / (distance_matrix[v, i] + 1e-8)
                        heapq.heappush(priority_queue, (0, (v, i)))
    
    # Adjust heuristics to reflect the capacity constraint by penalizing edges that exceed capacity
    for i in range(n):
        for j in range(n):
            if i != j and (i == depot or j == depot) and (i != 0 or j != 0):
                if heuristics[i, j] > 0:
                    # Penalize by adding the difference between total capacity and the remaining capacity
                    penalty = (1 - demands[:i+1].sum() - demands[i+1:].sum()) / (distance_matrix[i, j] + 1e-8)
                    heuristics[i, j] += penalty
                    heuristics[j, i] += penalty
    
    return heuristics
```
