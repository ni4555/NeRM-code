```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate the distance-penalty matrix
    distance_penalty = (1 - torch.sqrt(torch.diag(torch.clamp(distance_matrix, min=0, max=1)) / torch.diag(torch.clamp(distance_matrix, min=0, max=1)).sum(dim=1, keepdim=True)))
    
    # Normalize demands by total demand for each node
    normalized_demands = demands / demands.sum(dim=0)
    
    # Normalize distance by the average distance to the nearest customer (excluding self-distance)
    average_distance = distance_matrix / normalized_demands[None, :]
    average_distance = average_distance.sum(dim=1)
    normalized_distance = average_distance / average_distance.sum(dim=0, keepdim=True)
    
    # Calculate capacity-based weight (inverse of demand plus a small constant to avoid division by zero)
    capacity_weight = (1 / (demands + 1e-8))
    
    # Combine the distance-penalty, normalized distance, and capacity-based weight
    heuristics = distance_penalty + normalized_distance * capacity_weight
    
    return heuristics
```
