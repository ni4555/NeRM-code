```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)
    
    # Prioritize depot by ensuring its edges have the highest heuristic values
    heuristics[:, 0] = heuristics[:, 0] * 2
    heuristics[0, :] = heuristics[0, :] * 2
    
    # Utilize decay for long-term stability, reducing heuristic for long distances
    distance_decay = (distance_matrix**2).sum() / distance_matrix.sum()
    heuristics = heuristics * (1 - distance_decay)
    
    # Avoid dominance by ensuring that no edge is overly dominated by another
    dominated_edges = torch.cat((heuristics.unsqueeze(1), heuristics.unsqueeze(0)), 1) - torch.diag_embed(heuristics)
    dominated_edges[dominated_edges < 0] = 0
    dominance_check = (dominated_edges > 0).sum(-1)
    if dominance_check.max() > 1:
        dominated = dominated_edges.sum(0) > dominated_edges.max(-1)[0][:, None]
        dominated_indices = dominated.nonzero(as_tuple=True)[0]
        dominated_edges[dominated_indices, :] = heuristics[dominated_indices, :]
    
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = 0
    heuristics += loop_heuristics
    
    return heuristics
```
