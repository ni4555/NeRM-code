```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic using the combination of sum of demands, inverse distance, and normalization."""
    # Ensure the distance matrix has no zeros to avoid division by zero errors
    distance_matrix = distance_matrix + 1e-8
    # Calculate the sum of demands for each edge
    sum_of_demands = torch.sum(demands[:, None] + demands[None, :], dim=0)
    # Calculate the inverse of the distance matrix
    inverse_distance = 1 / distance_matrix
    # Combine the sum of demands and inverse distance
    combined_values = sum_of_demands * inverse_distance
    # Normalize the combined values to ensure non-negative and to scale the values appropriately
    max_value = combined_values.max() + 1e-8
    heuristics = combined_values / max_value
    return heuristics
```
