```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    heuristic_matrix = -torch.abs(distance_matrix)

    # Normalize by demand to prioritize high-demand nodes
    demand_normalized = (demands / total_demand) * 10

    # Incorporate distance and demand into heuristic
    heuristic_matrix = heuristic_matrix + demand_normalized

    # Adjust scale of distances to reduce their impact
    distance_scaled = heuristic_matrix[:, 0] * 0.1

    # Use a weighted sum to balance distance and demand
    weighted_heuristic = distance_scaled + heuristic_matrix

    # Invert the matrix to make higher values more promising
    heuristic_matrix = -weighted_heuristic

    # Ensure no negative values by clamping
    heuristic_matrix = torch.clamp(heuristic_matrix, min=0)

    return heuristic_matrix
```
