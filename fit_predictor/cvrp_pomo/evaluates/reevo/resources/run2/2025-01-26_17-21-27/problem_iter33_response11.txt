```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate a dynamic penalty that adapts to the remaining capacity
    dynamic_penalty = (torch.abs(demands - total_capacity) - 1e-8) * torch.log1p(1 / (demands - 1e-8))
    
    # Core objective: Distance heuristic
    distance_heuristic = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Encourage diversity by penalizing nodes that are already included in many paths
    diversity_penalty = -torch.log1p(torch.bincount(cumulative_demand.int()) - 1)
    
    # Adaptive scaling for the distance heuristic
    distance_scaling = distance_heuristic * (1 + cumulative_demand / total_capacity)
    
    # Core objective: Capacity penalty
    capacity_penalty = dynamic_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Overflow penalty to encourage early return to the depot
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balancing heuristic to avoid overloading any single vehicle
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine heuristics with a strong scaling factor
    scaling_factor = 2.0
    heuristics = scaling_factor * (distance_scaling + capacity_penalty + overflow_penalty + load_balance_penalty)
    
    # Introduce a diversity heuristic that promotes non-repetitive solutions
    diversity_heuristic = -torch.log1p(torch.bincount(cumulative_demand.int()) - 1)
    
    # Apply diversity heuristic to the overall heuristic
    heuristics += diversity_heuristic
    
    return heuristics
```
