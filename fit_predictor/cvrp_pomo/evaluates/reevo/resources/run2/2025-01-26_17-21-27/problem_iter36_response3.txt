```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Core objective: distance scaled by cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8) * (1 + cumulative_demand / total_capacity)
    
    # Dynamic penalty for remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - (total_capacity - cumulative_demand)) - 1e-8)
    
    # Early return penalty for avoiding unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance penalty to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Diversity penalty to avoid similar load distributions
    diversity_penalty = torch.exp(-torch.sum((load_balance[:, None] == load_balance[None, :])**2, dim=1))
    
    # Normalize the penalties to sum to 1 for each edge
    combined_penalty = distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty + diversity_penalty
    penalties_sum = combined_penalty.sum(dim=1, keepdim=True)
    normalized_penalties = combined_penalty / (penalties_sum + 1e-8)
    
    # Cap the heuristics to avoid overflow and underflow
    heuristics = torch.clamp(normalized_penalties, min=-100, max=100)
    
    return heuristics
```
