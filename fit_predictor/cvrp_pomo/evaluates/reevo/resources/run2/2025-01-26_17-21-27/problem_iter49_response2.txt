```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Introduce a penalty for large distances to encourage closer node visits
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Introduce a dynamic penalty for capacity violation
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Encourage uniform load distribution with a load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Use a weighted sum of penalties to form the heuristic
    heuristics = 0.5 * distance_penalty + 0.3 * capacity_penalty + 0.2 * load_balance_penalty
    
    # Add controlled randomness to avoid local optima
    randomness = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Introduce a penalty for early overflow to encourage early returns to the depot
    early_overflow_penalty = torch.where(cumulative_demand > total_capacity_vector, -1000 * (cumulative_demand - total_capacity_vector), torch.zeros_like(cumulative_demand))
    heuristics += early_overflow_penalty
    
    # Scale the heuristic by total capacity to maintain a balance between objectives
    heuristics /= total_capacity
    
    # Combine randomness with the heuristic to encourage diversity
    heuristics += randomness
    
    return heuristics
```
