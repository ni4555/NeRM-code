```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    demand_scaling = demands / (total_capacity / n)  # Scale demands based on total demand
    distance_scaling = distance_penalty * (1 + demand_scaling)
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Vectorized overflow penalty
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Introduce an exponential decay for load balancing
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    decay_factor = 0.5  # Decay factor for load balance penalty
    load_balance_penalty *= decay_factor ** (torch.arange(n)[:, None])
    
    # Integrate exponential decay for distance scaling
    decay_factor_distance = 0.9  # Decay factor for distance scaling
    distance_scaling *= decay_factor_distance ** (torch.arange(n)[:, None])
    
    # Combine the heuristics components with aggressive scaling
    heuristics = (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty)
    heuristics = heuristics.clamp(min=-100)  # Cap the minimum heuristic value
    return heuristics
```
