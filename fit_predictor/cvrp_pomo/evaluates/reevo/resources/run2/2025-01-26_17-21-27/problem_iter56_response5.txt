```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty with adaptive scaling and early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Scaling factors for core objectives
    scaling_distance = 2.5
    scaling_capacity = 2.0
    scaling_overflow = 1.5
    scaling_balance = 1.5
    
    # Combined heuristics
    heuristics = (
        scaling_distance * distance_scaling +
        scaling_capacity * dynamic_capacity_penalty +
        scaling_overflow * overflow_penalty +
        scaling_balance * load_balance_penalty
    )
    
    # Introduce time-adaptive diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Adjust heuristics based on early overflow and imbalance
    heuristics *= (1 + early_overflow)
    heuristics += diversity_factor
    
    # Mutation: Introduce a secondary scaling factor for load balance and randomness
    secondary_scaling_factor = 1.5
    secondary_load_balance_factor = load_balance_penalty * secondary_scaling_factor
    secondary_randomness_factor = randomness_factor * secondary_scaling_factor
    
    # Combine the secondary factors with the original heuristics
    heuristics += secondary_load_balance_factor + secondary_randomness_factor
    
    # Mutation: Introduce a balance between distance and demand to favor diverse solutions
    balance_factor = torch.abs(cumulative_demand - total_capacity_vector) / (torch.abs(distance_matrix) + 1e-8)
    balance_factor_penalty = -torch.log1p(balance_factor - 1e-8)
    
    # Combine the balance factor with the heuristics
    heuristics += balance_factor_penalty
    
    return heuristics
```
