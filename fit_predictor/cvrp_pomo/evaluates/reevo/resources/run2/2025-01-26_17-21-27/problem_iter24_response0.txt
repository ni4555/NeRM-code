```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate penalties using vectorized operations
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    overflow_penalty = -torch.log1p(torch.abs(cumulative_demand + demands - total_capacity) - 1e-8)
    
    # Scale the penalties based on whether the demand has reached the vehicle's capacity
    # No need for separate conditional scaling as we directly compute the scaling based on the cumulative demand
    demand_scaling = torch.clamp(1 + cumulative_demand / total_capacity, min=1)
    
    # Combine the penalties and apply the scaling factors
    heuristics = (distance_penalty + capacity_penalty * demand_scaling + overflow_penalty * demand_scaling)
    
    # Apply a scaling factor to enhance the penalty impact
    scaling_factor = 2.5
    heuristics *= scaling_factor
    
    return heuristics
```
