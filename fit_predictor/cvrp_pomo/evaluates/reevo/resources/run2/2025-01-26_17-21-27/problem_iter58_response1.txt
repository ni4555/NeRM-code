```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Vectorized dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity)
    dynamic_capacity_penalty *= (1 + (cumulative_demand > total_capacity_vector))
    
    # Vectorized distance scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    distance_scaling *= torch.exp(-cumulative_demand / (total_capacity * 5))
    
    # Vectorized overflow penalty
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Vectorized load balance penalty
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Vectorized randomness factor
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Vectorized diversity factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Vectorized very short edge penalty
    very_short_edge_penalty = torch.where(distance_matrix < 2, -0.5 * torch.log1p(torch.abs(distance_matrix) - 1e-8), torch.zeros_like(distance_matrix))
    
    # Combine all factors with consistent scaling and capping
    scaling_factor = 2.5
    combined_penalties = scaling_factor * (
        distance_scaling +
        dynamic_capacity_penalty +
        overflow_penalty +
        load_balance_penalty
    )
    heuristics = combined_penalties + randomness_factor + diversity_factor + very_short_edge_penalty
    
    # Cap the heuristics to ensure they are within reasonable bounds
    heuristics = torch.clamp(heuristics, min=-1e6, max=1e6)
    
    return heuristics
```
