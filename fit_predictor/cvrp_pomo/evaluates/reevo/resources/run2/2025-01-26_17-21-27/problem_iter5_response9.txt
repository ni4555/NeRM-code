```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demands_cumulative = torch.cumsum(demands, dim=0)
    
    # Initialize heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Add capacity-aware positive values for edges that can fit within the capacity without exceeding the total capacity
    heuristics[torch.arange(n), 1:] += ((demands_cumulative[1:] - demands_cumulative[:-1]) / total_capacity)
    
    # Apply penalties based on the ratio of the edge's demand to the total capacity
    demand_ratio = demands / total_capacity
    heuristics = heuristics * demand_ratio.unsqueeze(0) + demand_ratio.unsqueeze(1)
    
    # Normalize heuristics values based on the shortest distance to encourage paths that visit closer nodes first
    heuristics = heuristics * (1 / (distance_matrix * 0.5 + 1))  # Using a small constant to prevent division by zero
    
    # Cap the maximum heuristic value to ensure the solution is not overly optimistic
    heuristics = torch.clamp(heuristics, max=1)
    
    return heuristics
```
