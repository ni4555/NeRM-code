```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate capacity penalty that increases as the cumulative demand increases
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity))
    
    # Calculate distance penalty that decreases heuristic value for longer distances
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Dynamic scaling based on cumulative demand
    dynamic_scaling = cumulative_demand / total_capacity
    
    # Normalize penalties by cumulative demand
    normalized_capacity_penalty = capacity_penalty / (dynamic_scaling + 1e-8)
    normalized_distance_penalty = distance_penalty / (dynamic_scaling + 1e-8)
    
    # Balance penalties with a heuristic that reduces the impact of distance penalty when demand is high
    balanced_penalty = (1 - dynamic_scaling) * normalized_capacity_penalty + dynamic_scaling * normalized_distance_penalty
    
    # Incentivize remaining capacity explicitly
    remaining_capacity = total_capacity - cumulative_demand
    capacity_incentive = torch.exp(-remaining_capacity / total_capacity)
    
    # Combine the components into the final heuristic
    heuristics = balanced_penalty * capacity_incentive * (torch.arange(n) == 0).float().unsqueeze(0)
    
    return heuristics
```
