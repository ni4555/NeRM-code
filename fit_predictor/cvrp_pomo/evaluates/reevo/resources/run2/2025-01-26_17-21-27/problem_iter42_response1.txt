```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Dynamic capacity penalty with early return encouragement
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Load balancing heuristic to encourage even distribution of demand
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Distance penalty scaled by cumulative load
    distance_load_scale = -torch.log1p(torch.abs(distance_matrix) - 1e-8) * (cumulative_demand / total_capacity)
    
    # Overflow penalty to encourage early returns
    overflow_penalty = torch.where(
        cumulative_demand[:, None] + demands[None, :] > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Combine heuristics with balanced weights
    heuristics = 0.4 * capacity_penalty + 0.3 * load_balance_penalty + 0.2 * distance_load_scale + 0.1 * overflow_penalty
    
    # Cap the heuristics to ensure feasibility and diversity
    heuristics = torch.clamp(heuristics, min=-10, max=10)
    
    # Encourage diversity to escape local optima
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    heuristics += diversity_factor
    
    # Additional penalty to avoid selecting the depot as the next node
    depot_penalty = torch.arange(n) == 0
    heuristics[depot_penalty] -= 1e8
    
    return heuristics
```
