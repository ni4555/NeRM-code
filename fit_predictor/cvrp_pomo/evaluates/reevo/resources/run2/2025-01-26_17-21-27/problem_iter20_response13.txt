```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)

    # Normalize demands by the total capacity
    normalized_demand = demands / total_capacity

    # Calculate distance-based heuristic
    distance_heuristic = -torch.log1p(torch.abs(distance_matrix) - 1e-8)

    # Calculate capacity-based heuristic using exponential scaling
    capacity_heuristic = -torch.log(1 + normalized_demand)

    # Calculate total heuristic as the product of distance and capacity heuristics
    heuristics = distance_heuristic * capacity_heuristic
    return heuristics
```
