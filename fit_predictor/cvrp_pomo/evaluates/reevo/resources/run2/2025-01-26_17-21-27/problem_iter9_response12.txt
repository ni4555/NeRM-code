```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    demand_penalty = -torch.log1p(torch.abs(cumulative_demand) - 1e-8)
    capacity_penalty = torch.zeros_like(demand_penalty)
    capacity_penalty[1:] = torch.clamp(demands.cumsum(dim=0) - total_capacity, min=0)
    distance_scaling = demand_penalty * (1 + cumulative_demand)
    heuristics = distance_scaling - (capacity_penalty.unsqueeze(1) * (torch.arange(n) == 0).float().unsqueeze(0))
    return heuristics
```
