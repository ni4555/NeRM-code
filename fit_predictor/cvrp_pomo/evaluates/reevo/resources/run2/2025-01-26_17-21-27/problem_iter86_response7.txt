```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Early overflow detection and dynamic capacity penalty
    overflow = cumulative_demand > total_capacity_vector
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity_vector) - 1e-8)
    capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + overflow)
    
    # Time-adaptive distance penalty
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_penalty *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Scaling factor to prioritize core objectives
    scaling_factor = 2.5
    heuristics = scaling_factor * (
        distance_penalty +
        capacity_penalty +
        overflow * -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8) +
        load_balance_penalty
    ) + randomness_factor
    
    # Diversity factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Balancing factor to ensure the heuristic is not too biased
    balancing_factor = 0.1
    balancing_factor *= (1 - torch.mean(torch.abs(demands - total_capacity / n)))
    
    # Adjust heuristics based on early overflow and imbalance
    heuristics *= (1 + overflow) * balancing_factor
    heuristics += diversity_factor
    
    return heuristics
```
