```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    
    # Normalize demand to emphasize larger demands
    demand_normalized = (demands / total_capacity).unsqueeze(1)
    
    # Scale by remaining capacity to prioritize filling up the vehicle
    remaining_capacity = total_capacity - cumulative_demand
    capacity_normalized = (remaining_capacity / total_capacity).unsqueeze(1)
    
    # Combine the different heuristics
    heuristics = distance_scaling + capacity_penalty * (torch.arange(n) == 0).float().unsqueeze(0)
    heuristics = heuristics + demand_normalized * distance_penalty + capacity_normalized * distance_penalty
    return heuristics
```
