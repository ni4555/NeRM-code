```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty with adaptive scaling and early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Modular design with independent penalty components
    heuristics = torch.zeros_like(distance_matrix)
    heuristics += dynamic_capacity_penalty
    heuristics += distance_scaling
    heuristics += overflow_penalty
    heuristics += load_balance_penalty
    heuristics += randomness_factor
    
    # Introduce controlled randomness for exploration
    randomness_factor_exploration = torch.abs(torch.randn_like(demands)) * 0.2
    randomness_factor_exploration *= (1 - cumulative_demand / total_capacity)
    
    # Encourage early termination and adapt to the current state
    termination_factor = torch.where(
        early_overflow,
        -torch.log1p(torch.abs(cumulative_demand) - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    heuristics += termination_factor + randomness_factor_exploration
    
    # Normalize heuristics to maintain consistency across different runs
    heuristics /= (heuristics.abs().sum() + 1e-8)
    
    return heuristics
```
