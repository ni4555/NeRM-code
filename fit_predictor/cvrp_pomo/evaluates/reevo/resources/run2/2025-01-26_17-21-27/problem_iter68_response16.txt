```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Core objectives
    def core_objectives(distance_matrix, cumulative_demand, total_capacity):
        scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
        time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
        scaling *= (1 + cumulative_demand / total_capacity) * time_factor
        return scaling
    
    # Penalties
    def dynamic_capacity_penalty(demands, total_capacity, cumulative_demand):
        penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
        early_overflow = cumulative_demand > total_capacity_vector
        penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
        return penalty
    
    def overflow_penalty(cumulative_demand, demands, total_capacity):
        penalty = torch.where(
            (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
            -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
            torch.zeros_like(cumulative_demand)
        )
        return penalty
    
    def load_balance_penalty(cumulative_demand, total_capacity_vector):
        balance = torch.abs(cumulative_demand - total_capacity_vector)
        penalty = -torch.log1p(balance - 1e-8)
        return penalty
    
    # Randomness and diversity
    def randomness_factor(demands, cumulative_demand, total_capacity):
        randomness = torch.abs(torch.randn_like(demands)) * 0.1
        randomness *= (1 - cumulative_demand / total_capacity)
        return randomness
    
    def diversity_factor(demands):
        return torch.abs(torch.randn_like(demands)) * 0.2 / \
               (torch.sum(torch.abs(torch.randn_like(demands))) + 1e-8)
    
    # Apply core objectives
    core_obj = core_objectives(distance_matrix, cumulative_demand, total_capacity)
    
    # Apply penalties
    dynamic_penalty = dynamic_capacity_penalty(demands, total_capacity, cumulative_demand)
    overflow_penalty_value = overflow_penalty(cumulative_demand, demands, total_capacity)
    load_balance_penalty_value = load_balance_penalty(cumulative_demand, total_capacity_vector)
    
    # Apply randomness and diversity
    randomness_factor_value = randomness_factor(demands, cumulative_demand, total_capacity)
    diversity_factor_value = diversity_factor(demands)
    
    # Combine all factors with scaling
    scaling_factor = 2.5
    heuristics = (
        scaling_factor * (
            core_obj +
            dynamic_penalty +
            overflow_penalty_value +
            load_balance_penalty_value
        ) +
        randomness_factor_value
    )
    
    # Introduce diversity
    heuristics += diversity_factor_value
    
    # Adjust heuristics based on early overflow and imbalance
    heuristics *= (1 + (cumulative_demand > total_capacity_vector).float())
    
    return heuristics
```
