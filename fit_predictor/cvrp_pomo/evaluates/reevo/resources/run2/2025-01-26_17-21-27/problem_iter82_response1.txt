```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)

    # Enhanced distance scaling with time-adaptive factor
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 3))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor

    # Dynamic capacity scaling emphasizing near and over capacity levels
    dynamic_capacity_scaling = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    near_capacity_threshold = 0.8 * total_capacity
    dynamic_capacity_scaling *= (1 + (cumulative_demand / near_capacity_threshold) * 2)

    # Overflow penalty that encourages immediate return
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )

    # Load balance scaling that promotes a uniform distribution of demand
    load_balance_scaling = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_scaling *= (1 + torch.log1p(load_balance_scaling / (total_capacity_vector + 1e-8)))

    # Randomness factor to prevent premature convergence
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.05
    randomness_factor *= (1 - cumulative_demand / total_capacity)

    # Diversity factor to encourage exploration of different solutions
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)

    # Combine heuristics with appropriate weights
    heuristics = (
        2.0 * distance_scaling +  # Prioritize distance
        1.5 * dynamic_capacity_scaling +  # Prioritize capacity management
        1.0 * overflow_penalty +  # Prevent overflow
        1.0 * load_balance_scaling +  # Balance load
        0.5 * randomness_factor  # Allow randomness
    )

    # Introduce diversity factor to encourage exploration
    heuristics += diversity_factor

    # Cap the heuristics to maintain stability
    heuristics = torch.clamp(heuristics, min=-10.0, max=10.0)

    # Apply a large penalty for the depot to return to itself
    heuristics[0, 0] = -1e7

    return heuristics
```
