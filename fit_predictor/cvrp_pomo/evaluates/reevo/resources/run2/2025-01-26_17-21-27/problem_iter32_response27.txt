```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Emphasize core objectives: Logarithmic scale for distance and capacity
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Scale penalties based on the current state: Dynamic scaling for both penalties
    dynamic_capacity_scale = (1 + (total_capacity - cumulative_demand) / total_capacity)
    dynamic_distance_scale = (1 + cumulative_demand / total_capacity)
    distance_penalty = distance_penalty * dynamic_distance_scale
    capacity_penalty = capacity_penalty * dynamic_capacity_scale
    
    # Encourage diversity and reduce high load imbalances
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    high_load_balance_penalty = torch.where(
        load_balance > total_capacity / (2 * n),
        -torch.log1p(load_balance - 1e-8),
        torch.zeros_like(load_balance)
    )
    
    # Early return to the depot for overflow prevention
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Combine the scaled penalties with the distance penalty
    heuristics = distance_penalty + capacity_penalty + overflow_penalty + high_load_balance_penalty
    
    # Normalize the penalties to sum to 1 for each edge
    penalties_sum = heuristics.sum(dim=1, keepdim=True)
    normalized_penalties = heuristics / (penalties_sum + 1e-8)
    
    # Include a penalty for the depot node
    depot_mask = (torch.arange(n) == 0).float()
    heuristics = normalized_penalties + depot_mask.unsqueeze(0) * cumulative_demand.unsqueeze(0)
    
    return heuristics
```
