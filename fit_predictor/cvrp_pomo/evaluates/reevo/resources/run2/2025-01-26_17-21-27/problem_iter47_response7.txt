```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    remaining_capacity = total_capacity - cumulative_demand
    
    # Cumulative demand and dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= remaining_capacity / total_capacity
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= cumulative_demand / total_capacity
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        cumulative_demand > total_capacity,
        -torch.log1p((cumulative_demand - total_capacity) - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand / total_capacity - 1)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Controlled randomness for diversity
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Apply a strong scaling factor to core objectives
    scaling_factor = 2.0
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty)
    
    # Introduce early penalties for overflow to promote capacity awareness
    early_overflow = torch.where(cumulative_demand > 0.9 * total_capacity, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    heuristics *= early_overflow
    
    # Foster diversity and balance to avoid local optima
    heuristics += diversity_factor
    
    # Adjust heuristics for better exploration and to handle the initial part of the route
    heuristics *= (1 - cumulative_demand / total_capacity)
    return heuristics
```
