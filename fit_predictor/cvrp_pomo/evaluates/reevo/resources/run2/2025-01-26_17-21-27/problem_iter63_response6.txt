```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)

    # Modular dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    capacity_module = (cumulative_demand - total_capacity_vector) < 0
    dynamic_capacity_penalty = torch.where(capacity_module, dynamic_capacity_penalty, torch.zeros_like(dynamic_capacity_penalty))

    # Modularized distance penalty with early overflow detection
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_penalty = (1 + cumulative_demand / total_capacity) * time_factor
    distance_scaling = torch.where(distance_penalty > 0, distance_scaling, torch.zeros_like(distance_scaling))

    # Modular overflow penalty with early return to depot
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_module = (cumulative_demand + demands) <= total_capacity
    overflow_penalty = torch.where(overflow_module, torch.zeros_like(overflow_penalty), overflow_penalty)

    # Modular load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance = torch.where(load_balance < 1, load_balance, torch.zeros_like(load_balance))
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)

    # Randomness factor with demand-aware scaling
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor = torch.where(demands > 0, randomness_factor, torch.zeros_like(randomness_factor))

    # Apply scaling to core objectives
    scaling_factor = 2.5
    heuristics = (
        scaling_factor * (
            distance_scaling +
            dynamic_capacity_penalty +
            overflow_penalty +
            load_balance_penalty
        ) +
        randomness_factor
    )

    # Modular diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor = torch.where(demands > 0, diversity_factor, torch.zeros_like(diversity_factor))
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)

    # Final adjustment based on overflow and imbalance
    heuristics *= (1 + (cumulative_demand > total_capacity_vector))
    heuristics += diversity_factor

    return heuristics
```
