```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Distance scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic
    load_balance = torch.abs(cumulative_demand - (total_capacity / n))
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Heuristics calculation with prioritized scaling factors
    capacity_scale = 3.0
    distance_scale = 1.5
    overflow_scale = 2.0
    balance_scale = 1.5
    heuristics = (
        capacity_scale * dynamic_capacity_penalty +
        distance_scale * distance_scaling +
        overflow_scale * overflow_penalty +
        balance_scale * load_balance_penalty
    )
    
    # Introduce controlled randomness for exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Normalize heuristics to maintain balance
    min_val, max_val = heuristics.min(), heuristics.max()
    heuristics = ((heuristics - min_val) / (max_val - min_val)) * 20 - 10
    
    return heuristics
```
