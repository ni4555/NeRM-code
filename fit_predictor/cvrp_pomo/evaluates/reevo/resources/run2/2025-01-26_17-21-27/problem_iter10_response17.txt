```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    demand_penalty = -torch.log1p(torch.abs(demands) - 1e-8)
    capacity_over_demand = cumulative_demand > total_capacity

    # Incorporate cumulative demand into the distance penalty
    distance_with_demand = distance_penalty * (1 + cumulative_demand)

    # Normalize demand with respect to the total capacity and scale by the cumulative demand
    normalized_demand = (demands / total_capacity) * (1 + cumulative_demand)

    # Combine the penalties with the distance penalty, scaled by the normalized demand
    heuristics = distance_with_demand - normalized_demand.unsqueeze(1) * (torch.arange(n) == 0).float().unsqueeze(0)

    # Penalize edges where capacity is exceeded by a customer
    heuristics[capacity_over_demand] += demand_penalty[capacity_over_demand]

    return heuristics
```
