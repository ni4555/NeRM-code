```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Dynamic scaling based on cumulative demand and total capacity
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Load balance factor to encourage more even distribution of demand
    load_balance_factor = (cumulative_demand - total_capacity / 2) / (total_capacity / n)
    
    # Combine penalties with load balance factor and scale to ensure non-negative values
    heuristics = (
        (distance_penalty + dynamic_capacity_penalty) +
        torch.clamp(load_balance_factor, min=0)
    )
    
    # Apply a scaling factor to normalize the heuristic values
    scaling_factor = (total_capacity - cumulative_demand[-1]) / total_capacity
    heuristics *= scaling_factor
    
    # Include a penalty for the depot node
    depot_mask = (torch.arange(n) == 0).float()
    heuristics = heuristics + depot_mask.unsqueeze(0) * cumulative_demand.unsqueeze(0)
    
    return heuristics
```
