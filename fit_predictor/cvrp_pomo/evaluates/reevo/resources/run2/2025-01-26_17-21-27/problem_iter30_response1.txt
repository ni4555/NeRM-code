```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate penalties for exceeding capacity
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Enhanced distance penalty to account for cumulative load
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand / total_capacity)
    
    # Early return to avoid unnecessary overflow
    early_return = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # High load balance penalty to avoid overloading any single vehicle
    high_load_balance_penalty = torch.where(
        load_balance > total_capacity / (3 * n),
        -torch.log1p(load_balance - 1e-8),
        torch.zeros_like(load_balance)
    )
    
    # Combine the penalties
    heuristics = distance_scaling + early_return + load_balance_penalty + high_load_balance_penalty
    
    # Normalize the heuristics to sum to 1 for each edge
    penalties_sum = heuristics.sum(dim=1, keepdim=True)
    normalized_heuristics = heuristics / (penalties_sum + 1e-8)
    
    return normalized_heuristics
```
