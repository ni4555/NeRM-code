```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Dynamic adaptation: scale penalties based on current demand
    dynamic_penalty_scale = (cumulative_demand / total_capacity) * (1 + 0.1 * torch.randn_like(cumulative_demand))
    
    distance_scaling = distance_penalty * dynamic_penalty_scale
    heuristics = distance_scaling + capacity_penalty
    return heuristics
```
