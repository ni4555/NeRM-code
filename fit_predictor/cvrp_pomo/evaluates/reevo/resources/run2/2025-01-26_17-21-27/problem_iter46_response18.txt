```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Dynamic capacity penalty adjusted for the current load
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Introduce randomness for diversity
    randomness = torch.rand_like(demands) * 0.1 - 0.05
    
    # Apply a strong scaling factor to prioritize core objectives
    scaling_factor = 3.0
    heuristics = scaling_factor * (
        distance_scaling + 
        dynamic_capacity_penalty + 
        overflow_penalty + 
        load_balance_penalty
    )
    
    # Foster diversity in heuristic selection to escape local optima
    diversity_factor = (torch.rand_like(demands) * 2 - 1) * randomness
    
    # Adaptively scale heuristics based on early overflow and imbalance
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    imbalance = torch.where(
        (cumulative_demand - total_capacity_vector) > 1e-8,
        torch.ones_like(cumulative_demand),
        torch.zeros_like(cumulative_demand)
    )
    heuristics *= early_overflow * imbalance
    
    # Apply additional penalties to encourage diversity and balance
    heuristics += diversity_factor
    
    # Cap the heuristics to avoid excessive randomness and ensure the heuristics are within a certain range
    heuristics = torch.clamp(heuristics, min=-10.0, max=10.0)
    
    return heuristics
```
