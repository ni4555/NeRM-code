```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    balance_penalty = (demands / total_capacity - cumulative_demand / total_capacity).abs()
    distance_scaling = (distance_penalty + balance_penalty) * (1 + cumulative_demand)
    heuristics = distance_scaling + capacity_penalty
    heuristics[distance_matrix == 0] = 0  # Avoid division by zero in log1p
    return heuristics
```
