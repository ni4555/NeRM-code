```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)

    # Use an adaptive distance penalty that scales with the remaining capacity
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_penalty *= (1 + cumulative_demand / total_capacity)

    # Introduce a dynamic overflow penalty for edges that contribute to overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_penalty *= (1 + 0.3 * (cumulative_demand / total_capacity))

    # Use a load balance heuristic that promotes more even distribution of demands
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)

    # Add randomness to explore alternative paths
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)

    # Integrate the heuristics with scaling factors to prioritize objectives
    heuristics = (
        distance_penalty +
        capacity_penalty +
        overflow_penalty +
        load_balance_penalty +
        randomness_factor
    )

    # Adjust heuristics to manage diversity by adding a small random factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += diversity_factor

    return heuristics
```
