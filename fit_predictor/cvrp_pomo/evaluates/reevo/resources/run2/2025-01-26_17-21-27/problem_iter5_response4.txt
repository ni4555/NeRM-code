```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demands_cumulative = torch.cumsum(demands, dim=0)
    
    # Initialize heuristics matrix with large negative values
    heuristics = -torch.ones_like(distance_matrix)
    
    # Add positive values for edges that are within the first half of the cumulative demand
    heuristics[torch.arange(n), 1:] += (demands_cumulative[:n-1] / total_capacity) * 2
    
    # Vectorized capacity-aware penalties for edges that exceed the vehicle capacity
    demand_excess = demands_cumulative[1:] - demands_cumulative[:-1]
    mask_excess = demand_excess > total_capacity
    heuristics[torch.triu_indices(n, n, k=1)] *= (1 - mask_excess.float())
    
    # Add nuanced demand-distance interaction: higher penalties for longer distances
    heuristics *= distance_matrix
    
    return heuristics
```
