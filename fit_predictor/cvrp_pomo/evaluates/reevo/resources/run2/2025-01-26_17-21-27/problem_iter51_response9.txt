```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Scale the load balance heuristic to prioritize load balance
    load_balance_penalty /= 2
    
    # Introduce controlled randomness to escape local optima
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1  # Reduced randomness factor
    
    # Encourage diversity by balancing the randomness with the heuristics
    diversity_factor = randomness_factor * 0.1 + (heuristics_v1(distance_matrix, demands) * 0.9)  # Use original heuristics_v1 for diversity
    
    # Adaptively scale heuristics and penalties for early overflow and imbalance
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    early_imbalance = torch.where(load_balance > total_capacity_vector / 2, torch.ones_like(load_balance), torch.zeros_like(load_balance))
    
    heuristics = dynamic_capacity_penalty + distance_scaling + overflow_penalty + load_balance_penalty + diversity_factor
    heuristics *= (early_overflow + early_imbalance)  # Apply penalties for early overflow and imbalance
    
    # Apply additional scaling for diversity and load balance
    heuristics *= 1 + (diversity_factor / heuristics_v1(distance_matrix, demands).max())
    heuristics *= 1 + (load_balance_penalty / load_balance_penalty.max())
    
    return heuristics
```
