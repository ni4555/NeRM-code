```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Enhanced distance penalty with adaptive scaling
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_penalty *= (1 + cumulative_demand / total_capacity)
    
    # Early overflow detection
    early_overflow = cumulative_demand > demands[0]
    
    # Dynamic capacity penalty with adaptive scaling
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    capacity_penalty *= (1 + early_overflow)
    
    # Load balance heuristic with controlled randomness
    load_balance = torch.abs(cumulative_demand - demands[0])
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Apply scaling factors to prioritize core objectives
    scaling_factor = 2.0
    distance_scaled = distance_penalty * scaling_factor
    capacity_scaled = capacity_penalty * scaling_factor
    load_balance_scaled = load_balance_penalty * scaling_factor
    
    # Introduce diversity to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine heuristics
    heuristics = distance_scaled + capacity_scaled + load_balance_scaled + randomness_factor
    heuristics += diversity_factor
    
    # Adjust heuristics based on early overflow and imbalance
    heuristics *= (1 + early_overflow)
    
    return heuristics
```
