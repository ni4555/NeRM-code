```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Use vectorized operations to calculate overflow penalties
    overflow_penalty = torch.zeros_like(distance_matrix)
    overflow_mask = cumulative_demand.unsqueeze(1) + demands.unsqueeze(0) > total_capacity
    overflow_penalty[overflow_mask] = -torch.log1p(torch.abs(torch.triu(cumulative_demand, 1) + demands) - total_capacity - 1e-8)
    
    # Combine all penalties using vectorization
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    heuristics = (distance_scaling + dynamic_capacity_penalty + overflow_penalty)
    return heuristics
```
