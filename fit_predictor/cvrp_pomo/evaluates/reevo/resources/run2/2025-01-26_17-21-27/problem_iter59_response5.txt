```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Adaptive scaling and early overflow detection
    early_overflow = cumulative_demand > total_capacity_vector
    overflow_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    overflow_penalty *= (1 + early_overflow)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity)
    
    # Load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Time-adaptive diversity factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine penalties and factors, prioritizing overflow prevention
    heuristics = distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty
    heuristics += randomness_factor + diversity_factor
    
    # Introduce an imbalance penalty for heavily loaded vehicles
    imbalance_penalty = (cumulative_demand > total_capacity_vector).float() * (cumulative_demand - total_capacity_vector) / (1e-8 + cumulative_demand)
    heuristics -= imbalance_penalty
    
    # Introduce an overflow recovery heuristic that rewards early returns
    overflow_recovery = torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    overflow_recovery *= (1 + (cumulative_demand > total_capacity_vector).float())
    heuristics += overflow_recovery
    
    # Normalize heuristics to prevent overflow and to give a balanced importance to all factors
    heuristics /= (heuristics.sum() + 1e-8)
    
    return heuristics
```
