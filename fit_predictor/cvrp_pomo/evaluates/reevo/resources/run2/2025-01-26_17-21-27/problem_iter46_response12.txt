```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Enhanced distance and demand penalties to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    demand_scaling = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    combined_penalty = distance_scaling * (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Apply a strong scaling factor to prioritize core objectives
    scaling_factor = 3.0
    combined_heuristics = scaling_factor * (
        combined_penalty + 
        overflow_penalty + 
        load_balance_penalty
    )
    
    # Foster diversity in heuristic selection to escape local optima
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Normalize heuristics to sum to 1 for each edge
    penalties_sum = combined_heuristics.sum(dim=1, keepdim=True)
    normalized_heuristics = combined_heuristics / (penalties_sum + 1e-8)
    
    # Integrate diversity factor and normalize
    normalized_heuristics += diversity_factor
    normalized_heuristics /= (normalized_heuristics.sum(dim=1, keepdim=True) + 1e-8)
    
    return normalized_heuristics
```
