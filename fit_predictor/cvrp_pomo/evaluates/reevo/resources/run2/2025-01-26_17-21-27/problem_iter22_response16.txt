```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Use logarithmic demand penalty that accounts for cumulative demand
    demand_penalty = -torch.log1p(torch.abs(demands - total_capacity / (n - 1)))
    demand_penalty = demand_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    # Use logarithmic distance penalty
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_penalty = distance_penalty * (1 + cumulative_demand)
    # Heuristic that balances demand and distance penalties
    heuristics = demand_penalty + distance_penalty
    # Add depot penalty to maintain diversity
    depot_penalty = torch.arange(n) == 0
    heuristics[depot_penalty] = -1
    return heuristics
```
