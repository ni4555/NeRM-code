```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    cumulative_demand = torch.cumsum(demands, dim=0)
    demand_over_capacity = (cumulative_demand > 1.0).float()  # Vectorized check for demand exceeding capacity
    penalty = torch.max(distance_matrix, dim=1)[0] * demand_over_capacity  # Apply capacity-aware penalties
    demand_distance_interaction = -distance_matrix * demands  # Negative interaction for distance-demand
    return penalty + demand_distance_interaction  # Combine all factors
```
