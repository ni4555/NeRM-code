```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance penalty
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Weigh different components
    weight_distance = 2.0
    weight_capacity = 1.5
    weight_overflow = 1.0
    weight_balance = 1.0
    
    # Weigh the components for each edge
    core_objectives = (
        weight_distance * distance_scaling +
        weight_capacity * dynamic_capacity_penalty +
        weight_overflow * overflow_penalty +
        weight_balance * load_balance_penalty
    )
    
    # Introduce randomness for diversity
    random_factor = torch.rand_like(demands) * 0.1
    
    # Early overflow detection
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(core_objectives), torch.zeros_like(core_objectives))
    
    # Adjust core objectives based on overflow
    adjusted_core_objectives = torch.where(
        early_overflow,
        torch.zeros_like(core_objectives),
        core_objectives
    )
    
    # Add randomness and balance adjustment to the heuristics
    balanced_core_objectives = adjusted_core_objectives - (load_balance_penalty * 0.5)
    heuristics = balanced_core_objectives + random_factor
    
    return heuristics
```
