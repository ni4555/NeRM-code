```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Dynamic scaling for penalties
    dynamic_scale = (1 - (cumulative_demand / total_capacity))
    
    # Dynamic penalties for capacity, distance, and early overflow
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * dynamic_scale
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8) * (1 + cumulative_demand / total_capacity)
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balancing penalty
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Enhanced load balancing by focusing on the load variance
    variance = torch.var(load_balance, dim=0)
    load_balance_penalty += -torch.log1p(variance - 1e-8)
    
    # Apply a scaling factor for each penalty
    scaling_factors = torch.tensor([0.6, 0.3, 0.1, 0.2], dtype=capacity_penalty.dtype)
    heuristics = torch.zeros_like(distance_matrix)
    
    heuristics = scaling_factors[0] * distance_penalty + \
                 scaling_factors[1] * capacity_penalty + \
                 scaling_factors[2] * overflow_penalty + \
                 scaling_factors[3] * load_balance_penalty
    
    # Apply a penalty for the depot to return to itself
    heuristics[0] = -1000
    
    return heuristics
```
