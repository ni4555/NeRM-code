```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    relative_cumulative_demand = cumulative_demand / total_capacity
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)

    # Ensure capacity penalty is non-negative
    capacity_penalty = capacity_penalty.clamp(min=0)

    # Proximity bonus to the depot node (index 0)
    proximity_bonus = torch.arange(n) == 0

    # Combine the penalties with careful scaling and weighting
    heuristics = distance_penalty + (1 - relative_cumulative_demand) * capacity_penalty \
                 + relative_cumulative_demand * proximity_bonus.float()
    return heuristics
```
