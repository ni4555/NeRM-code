```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Modular Dynamic Capacity Penalty
    def capacity_penalty(demands, total_capacity):
        return -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Modular Enhanced Distance Penalty
    def distance_penalty(distance_matrix, cumulative_demand, total_capacity):
        distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
        time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
        return distance_scaling * (1 + cumulative_demand / total_capacity) * time_factor
    
    # Modular Overflow Penalty
    def overflow_penalty(cumulative_demand, demands, total_capacity):
        overflow_penalty_mask = (cumulative_demand[:, None] + demands[None, :]) > total_capacity
        return torch.where(overflow_penalty_mask, -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8), torch.zeros_like(cumulative_demand))
    
    # Modular Load Balance Heuristic
    def load_balance_heuristic(cumulative_demand, total_capacity_vector):
        load_balance = torch.abs(cumulative_demand - total_capacity_vector)
        return -torch.log1p(load_balance - 1e-8)
    
    # Modular Randomness Factor
    def randomness_factor(cumulative_demand, total_capacity):
        randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
        randomness_factor *= (1 - cumulative_demand / total_capacity)
        return randomness_factor
    
    # Modular Time-Adaptive Diversity Factor
    def diversity_factor(cumulative_demand, total_capacity):
        diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
        diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
        diversity_factor *= (1 - cumulative_demand / total_capacity)
        return diversity_factor
    
    # Calculate each heuristic component
    dynamic_capacity_penalty = capacity_penalty(demands, total_capacity)
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
    
    distance_scaling = distance_penalty(distance_matrix, cumulative_demand, total_capacity)
    
    overflow_penalty_value = overflow_penalty(cumulative_demand, demands, total_capacity)
    
    load_balance_penalty = load_balance_heuristic(cumulative_demand, total_capacity_vector)
    
    randomness_factor_value = randomness_factor(cumulative_demand, total_capacity)
    
    diversity_factor_value = diversity_factor(cumulative_demand, total_capacity)
    
    # Combine heuristics components
    heuristics = (
        distance_scaling +
        dynamic_capacity_penalty +
        overflow_penalty_value +
        load_balance_penalty +
        randomness_factor_value
    )
    
    # Introduce time-adaptive diversity factor
    heuristics += diversity_factor_value
    
    # Adjust heuristics based on early overflow and imbalance
    heuristics *= (1 + early_overflow)
    
    return heuristics
```
