```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Modularized penalties with exploration and exploitation balance
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    load_balance_penalty = -torch.log1p(torch.abs(cumulative_demand - total_capacity_vector) - 1e-8)
    
    # Time-adaptive factors and vectorized computations
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    early_overflow = cumulative_demand > total_capacity_vector
    
    # Heuristics with scaling and capping to prioritize core objectives
    heuristics = (
        (distance_penalty + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty) *
        time_factor
    )
    
    # Randomness and diversity management
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Specialization for efficiency and stability
    heuristics += randomness_factor
    heuristics *= (1 + early_overflow)
    
    # Final adjustments to encourage exploration and manage imbalance
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += diversity_factor
    
    return heuristics
```
