```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    dynamic_scaling = (cumulative_demand / total_capacity) * distance_scaling
    heuristics = dynamic_scaling + capacity_penalty
    heuristics = heuristics.clamp(min=0)  # Ensuring no negative values
    return heuristics
```
