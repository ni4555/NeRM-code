```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Core heuristics
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Early overflow detection
    early_overflow = cumulative_demand > total_capacity / 2
    dynamic_capacity_penalty *= early_overflow.float()
    
    # Overflow penalty with early return
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity / 2)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Introduce diversity
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Adjust heuristics based on early overflow and imbalance
    adjusted_heuristics = distance_penalty + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty
    adjusted_heuristics *= (1 + early_overflow.float())
    
    # Apply scaling and randomness
    heuristics = adjusted_heuristics + randomness_factor + diversity_factor
    
    return heuristics
```
