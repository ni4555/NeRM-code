```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Distance penalty to reflect load distribution
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Capacity constraint enforcement penalty
    capacity_enforcement = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Overflow penalty to discourage overloading
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance penalty to promote uniform distribution of loads
    load_balance = torch.abs(cumulative_demand)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Scaling factors for each penalty
    distance_scale = 2.0
    capacity_scale = 1.5
    overflow_scale = 1.0
    load_balance_scale = 1.0
    
    # Combined heuristic value for each edge
    heuristics = (
        distance_scale * distance_penalty +
        capacity_scale * capacity_enforcement +
        overflow_scale * overflow_penalty +
        load_balance_scale * load_balance_penalty
    )
    
    # Introduce diversity factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.05
    
    # Add diversity to the heuristic values
    heuristics += diversity_factor
    
    # Normalize the heuristic values
    heuristics = torch.clamp(heuristics, min=0, max=1)
    
    return heuristics
```
