```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    balance_factor = 1.0 + (cumulative_demand / total_capacity)
    balance_penalty = capacity_penalty * balance_factor
    
    # Vectorized implementation of overflow penalty
    overflow_penalty = -torch.log1p((cumulative_demand + demands.unsqueeze(1)) - total_capacity - 1e-8)
    overflow_penalty = torch.min(overflow_penalty, torch.zeros_like(overflow_penalty))
    
    # Combine penalties and apply a scaling factor
    heuristics = -torch.log1p(torch.cat([distance_penalty, balance_penalty, overflow_penalty], dim=1))
    heuristics = heuristics.mean(dim=1)
    heuristics = torch.exp(heuristics)
    return heuristics
```
