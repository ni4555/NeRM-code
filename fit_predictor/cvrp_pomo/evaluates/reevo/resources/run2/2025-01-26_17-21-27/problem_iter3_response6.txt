```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.zeros(n)
    
    for i in range(1, n):
        cumulative_demand[i] = cumulative_demand[i-1] + demands[i]
    
    # Create an initial heuristic matrix with negative values for edges
    heuristic_matrix = -distance_matrix
    
    # Add capacity-aware penalties
    capacity_penalties = (cumulative_demand > 0.5 * total_capacity).float()
    
    # Add demand-distance interaction
    demand_distance_interactions = (demands > 0.1).float() * (1 / (distance_matrix + 1e-8))
    
    # Update heuristic matrix with additional heuristic values
    heuristic_matrix = heuristic_matrix + capacity_penalties + demand_distance_interactions
    
    # Normalize the heuristic matrix to be within a certain range (e.g., [-1, 1])
    min_val, max_val = -1, 1
    scale = (max_val - min_val) / (heuristic_matrix.max() - heuristic_matrix.min())
    bias = min_val - scale * heuristic_matrix.min()
    heuristic_matrix = (heuristic_matrix * scale + bias)
    
    return heuristic_matrix
```
