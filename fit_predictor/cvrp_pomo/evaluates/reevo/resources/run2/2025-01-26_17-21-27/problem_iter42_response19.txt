```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Combined distance and load scaling
    distance_load_scale = -torch.log1p(torch.abs(distance_matrix) - 1e-8) * (cumulative_demand / total_capacity)
    
    # Dynamic capacity penalty and overflow penalty
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * (1 + (total_capacity - cumulative_demand) / total_capacity)
    overflow_penalty = -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8)
    
    # Load balancing heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Diversity heuristic
    diversity_heuristic = torch.log1p(torch.abs(distance_matrix) - 1e-8).sum(dim=0)
    
    # Scaling factor for heuristics
    scaling_factor = 3.0
    
    # Combine heuristics with core objectives
    combined_heuristics = scaling_factor * (distance_load_scale + capacity_penalty + overflow_penalty + load_balance_penalty)
    
    # Apply diversity heuristic to avoid local optima
    combined_heuristics += diversity_heuristic
    
    # Cap the heuristics to prevent overflow and underflow
    heuristics = torch.clamp(combined_heuristics, min=-100, max=100)
    
    # Introduce a penalty for the depot to return to itself
    heuristics[0] = -1000
    
    return heuristics
```
