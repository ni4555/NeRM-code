```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demand = demands / total_capacity
    cumulative_demand = torch.cumsum(normalized_demand, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(normalized_demand - 1.0) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    heuristics = (distance_penalty * (1 + cumulative_demand)) + capacity_penalty
    heuristics[torch.arange(n) != 0] += torch.arange(n).unsqueeze(0) * (1 - normalized_demand[torch.arange(n) != 0])
    heuristics[torch.arange(n) == 0] += 0  # Adding a small constant for the depot to ensure it's not zero
    return heuristics
```
