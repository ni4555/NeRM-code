```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Modularize penalties for clarity and balance
    def dynamic_capacity_penalty(demands, total_capacity):
        penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
        overflow = cumulative_demand > total_capacity_vector
        penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + overflow)
        return penalty
    
    def distance_penalty(distance_matrix, cumulative_demand, total_capacity):
        scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
        time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
        scaling *= (1 + cumulative_demand / total_capacity) * time_factor
        return scaling
    
    def overflow_penalty(demands, total_capacity):
        overflow_penalty = torch.where(
            (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
            -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
            torch.zeros_like(cumulative_demand)
        )
        return overflow_penalty
    
    def load_balance_penalty(cumulative_demand, total_capacity_vector):
        load_balance = torch.abs(cumulative_demand - total_capacity_vector)
        penalty = -torch.log1p(load_balance - 1e-8)
        return penalty
    
    def randomness_factor(cumulative_demand, total_capacity):
        randomness = torch.abs(torch.randn_like(demands)) * 0.1
        randomness *= (1 - cumulative_demand / total_capacity)
        return randomness
    
    def scaling_factor():
        return 2.5
    
    def diversity_factor(cumulative_demand, total_capacity):
        diversity = torch.abs(torch.randn_like(demands)) * 0.2
        diversity /= (torch.sum(torch.abs(diversity)) + 1e-8)
        diversity *= (1 - cumulative_demand / total_capacity)
        return diversity
    
    # Apply modularized functions to create the heuristic
    dynamic_penalty = dynamic_capacity_penalty(demands, total_capacity)
    distance_penalty_value = distance_penalty(distance_matrix, cumulative_demand, total_capacity)
    overflow_penalty_value = overflow_penalty(demands, total_capacity)
    load_balance_penalty_value = load_balance_penalty(cumulative_demand, total_capacity_vector)
    randomness = randomness_factor(cumulative_demand, total_capacity)
    scale = scaling_factor()
    diversity = diversity_factor(cumulative_demand, total_capacity)
    
    heuristics = (
        scale * (
            distance_penalty_value +
            dynamic_penalty +
            overflow_penalty_value +
            load_balance_penalty_value
        ) +
        randomness
    )
    
    heuristics += diversity
    
    return heuristics
```
