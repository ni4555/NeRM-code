```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demands_cumulative = torch.cumsum(demands, dim=0)
    
    # Initialize heuristics matrix with large negative values
    heuristics = -torch.ones_like(distance_matrix)
    
    # Add positive values for edges that are within the first half of the cumulative demand
    half_capacity = total_capacity / 2
    for i in range(n):
        for j in range(i+1, n):
            if demands_cumulative[j] - demands_cumulative[i] <= half_capacity:
                heuristics[i, j] += (demands_cumulative[j] - demands_cumulative[i]) / total_capacity
    
    # Add capacity-aware penalties for edges that exceed the vehicle capacity
    for i in range(n):
        for j in range(i+1, n):
            if demands_cumulative[j] - demands_cumulative[i] > total_capacity:
                heuristics[i, j] -= 10
                heuristics[j, i] -= 10
    
    return heuristics
```
