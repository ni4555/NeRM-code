```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    balance_penalty = -torch.log1p(torch.abs(demands / total_capacity - 1) - 1e-8)
    dynamic_penalty_scale = 1 + cumulative_demand / total_capacity
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    heuristics = distance_penalty * dynamic_penalty_scale + balance_penalty
    return heuristics
```
