```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    demand_sensitivity = torch.relu((demands / total_capacity - 0.5) * 2) ** 2
    capacity_penalty = (cumulative_demand / total_capacity).pow(1.5)
    combined_balance = cumulative_demand * distance_penalty * demand_sensitivity * capacity_penalty
    heuristics = combined_balance - torch.log1p(torch.arange(n))
    heuristics[:, 0] = -distance_penalty[:, 0]  # Negative heuristic for the depot to depot edge
    heuristics /= (heuristics.sum() + 1e-8)  # Normalize the heuristics
    return heuristics
```
