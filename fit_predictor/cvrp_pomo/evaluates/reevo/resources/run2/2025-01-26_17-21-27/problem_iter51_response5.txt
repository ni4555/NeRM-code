```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty based on proximity to capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty with load balancing
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with immediate return if capacity is exceeded
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balancing heuristic to distribute the load evenly
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Scaling factors for different penalties
    capacity_penalty_scale = 1.5
    distance_scale = 1.0
    overflow_scale = 2.0
    load_balance_scale = 0.5
    
    # Construct the heuristic by combining the scaled penalties
    heuristics = (
        capacity_penalty_scale * dynamic_capacity_penalty +
        distance_scale * distance_scaling +
        overflow_scale * overflow_penalty +
        load_balance_scale * load_balance_penalty
    )
    
    # Introduce randomness to avoid local optima
    random_factor = torch.rand_like(demands) * 0.1
    
    # Balance the randomness with the heuristic values
    balanced_heuristics = heuristics * 0.7 + random_factor * 0.3
    
    # Additional penalty to encourage diversity and better load balancing
    diversity_penalty = torch.abs(torch.randn_like(demands)) * 0.05
    
    # Final heuristics with diversity and additional penalties
    final_heuristics = balanced_heuristics + diversity_penalty
    return final_heuristics
```
