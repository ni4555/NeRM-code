```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_normalized = (demands / total_demand) ** 2  # Square the demand to favor higher demand

    # Calculate a weighted sum of distance and normalized demand to create the heuristic
    # Weighing factor for distance is set to 0.9
    heuristic_matrix = torch.abs(distance_matrix) + 0.1 * demand_normalized

    # Apply a non-linear transformation to reduce the impact of larger distances
    heuristic_matrix = torch.log1p(heuristic_matrix)

    # Clamp the values to ensure no negative values exist
    heuristic_matrix = torch.clamp(heuristic_matrix, min=0)

    return heuristic_matrix
```
