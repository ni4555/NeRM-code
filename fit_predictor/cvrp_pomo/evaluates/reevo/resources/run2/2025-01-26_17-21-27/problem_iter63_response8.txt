```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    balance_factor = torch.abs(cumulative_demand - total_capacity / n)
    
    # Demand-aware distance scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    demand_weighting = (demands / total_capacity) ** 2
    distance_scaling *= demand_weighting
    
    # Early overflow detection and penalty
    early_overflow = cumulative_demand > total_capacity / n
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity / n,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity / n - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic
    load_balance = balance_factor
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Diversity and randomness
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine heuristics with scaling and diversity
    base_heuristics = distance_scaling + overflow_penalty + load_balance_penalty
    combined_heuristics = base_heuristics + diversity_factor
    
    # Introduce dynamic scaling for exploration
    exploration_factor = torch.exp(-cumulative_demand / (total_capacity / n * 10))
    heuristics = combined_heuristics * exploration_factor
    
    return heuristics
```
