```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Dynamic capacity penalty adjusted for the current load
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (total_capacity - cumulative_demand) / total_capacity
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine core objectives early and add randomness later
    core_objectives = distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty
    heuristics = 3.0 * core_objectives
    
    # Introduce controlled randomness for diversity
    randomness = torch.rand_like(demands) * 0.1 - 0.05
    
    # Apply the diversity factor
    heuristics += randomness
    
    # Avoid selecting the depot as the next node
    depot_penalty = torch.arange(n) == 0
    heuristics[depot_penalty] -= 1e8
    
    # Adaptively scale heuristics based on early overflow or imbalance
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    heuristics *= early_overflow
    
    # Normalize heuristics to maintain a balance between objectives
    heuristics /= (heuristics.abs().max() + 1e-8)
    
    return heuristics
```
