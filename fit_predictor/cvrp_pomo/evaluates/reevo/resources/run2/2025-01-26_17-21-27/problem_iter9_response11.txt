```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Normalize the distance by the cumulative demand
    distance_scaling = distance_matrix / cumulative_demand.unsqueeze(1)
    # Normalize the demand by the total capacity
    demand_scaling = demands / total_capacity
    # Combine the normalized distance and demand
    combined_scaling = distance_scaling + demand_scaling
    # Penalize for overcapacity and return to the depot
    heuristics = combined_scaling * (torch.arange(n) != 0).float().unsqueeze(0)
    return heuristics
```
