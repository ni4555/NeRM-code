```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    balance_load_penalty = torch.where(
        cumulative_demand - demands[:-1] < demands[1:],
        0,
        torch.log1p(cumulative_demand - demands[:-1]) - torch.log1p(demands[1:])
    )
    
    distance_scaling = distance_penalty * (1 + balance_load_penalty)
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    overflow_penalty = -torch.log1p(
        (cumulative_demand[1:] + demands[1:]) - total_capacity
    )[:, :-1]
    
    heuristics = distance_scaling + dynamic_capacity_penalty + overflow_penalty
    return heuristics
```
