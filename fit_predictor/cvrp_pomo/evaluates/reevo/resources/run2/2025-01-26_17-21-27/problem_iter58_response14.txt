```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    def calculate_penalty(cumulative_demand, total_capacity_vector, threshold):
        return -torch.log1p(torch.abs(cumulative_demand - total_capacity_vector) - 1e-8) * (cumulative_demand > threshold)
    
    def calculate_scaling(distance_matrix, cumulative_demand, total_capacity):
        scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
        scaling *= (1 + cumulative_demand / total_capacity)
        scaling *= torch.exp(-cumulative_demand / (total_capacity * 5))
        return scaling
    
    dynamic_capacity_penalty = calculate_penalty(cumulative_demand, total_capacity_vector, total_capacity_vector)
    distance_scaling = calculate_scaling(distance_matrix, cumulative_demand, total_capacity)
    overflow_penalty = calculate_penalty(cumulative_demand + demands, total_capacity, total_capacity)
    load_balance_penalty = calculate_penalty(cumulative_demand, total_capacity_vector, total_capacity_vector)
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1 * (1 - cumulative_demand / total_capacity)
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2 / (torch.sum(torch.abs(torch.randn_like(demands))) + 1e-8) * (1 - cumulative_demand / total_capacity)
    
    heuristics = 2.5 * (dynamic_capacity_penalty + distance_scaling + overflow_penalty + load_balance_penalty) + randomness_factor + diversity_factor
    
    return heuristics
```
