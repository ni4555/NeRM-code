```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))

    # Enhanced distance penalty with time-adaptive scaling
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_penalty *= (1 + cumulative_demand / total_capacity) * time_factor

    # Dynamic capacity penalty with early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_overflow = cumulative_demand > total_capacity * 0.8
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    dynamic_capacity_penalty += overflow_penalty

    # Load balance heuristic with a refined balance factor
    balance_factor = torch.abs(cumulative_demand - total_capacity / n)
    balance_penalty = -torch.log1p(balance_factor - 1e-8)

    # Randomness factor with controlled impact
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)

    # Diversity factor to avoid local optima
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)

    # Combine heuristics
    heuristics = distance_penalty + dynamic_capacity_penalty + balance_penalty + randomness_factor + diversity_factor

    # Adjust heuristics based on early overflow
    heuristics *= (1 + early_overflow)

    return heuristics
```
