```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.abs((demands - total_capacity / 2) / (total_capacity / 2))
    
    # Adjust the capacity penalty based on the cumulative demand
    adjusted_capacity_penalty = capacity_penalty * (1 + cumulative_demand / total_capacity)
    
    # Integrate the demand sensitivity with the capacity penalty
    demand_sensitivity = torch.relu((demands / total_capacity - 0.5) * 2) ** 2
    
    # Combine the penalties with a weight that decreases as the cumulative demand increases
    weight = 1 - cumulative_demand / total_capacity
    heuristics = weight * (capacity_penalty * demand_sensitivity) + (1 - weight) * distance_penalty
    return heuristics
```
