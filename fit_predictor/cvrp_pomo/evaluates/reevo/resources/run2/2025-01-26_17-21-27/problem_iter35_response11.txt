```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Dynamic penalty based on remaining capacity, now with a more pronounced effect
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity ** 2)
    
    # Enhanced distance penalty with an adaptive scaling that emphasizes short paths
    distance_scaling = distance_penalty * (1 + cumulative_demand / total_capacity)
    adaptive_scaling = torch.exp(-distance_scaling)
    
    # Overflow penalty with an early warning system for imbalances
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    early_warning = torch.where(
        cumulative_demand > total_capacity / 2,
        -torch.log1p(cumulative_demand - total_capacity / 2 - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_penalty += early_warning
    
    # Diversity heuristic by penalizing consecutive nodes with similar demands
    diversity_penalty = torch.zeros_like(distance_matrix)
    for i in range(1, n):
        diversity_penalty[i, i-1] = -torch.log1p(torch.abs(demands[i] - demands[i-1]) - 1e-8)
    
    # Load balance heuristic to encourage uniform load distribution, with a focus on preventing overflows
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    overflow_prevention = torch.where(
        load_balance > total_capacity / (2 * n),
        -torch.log1p(load_balance - 1e-8),
        torch.zeros_like(load_balance)
    )
    load_balance_penalty += overflow_prevention
    
    # Apply a strong scaling factor to prioritize core objectives
    scaling_factor = 2.0
    heuristics = scaling_factor * (adaptive_scaling + dynamic_capacity_penalty + overflow_penalty + diversity_penalty + load_balance_penalty)
    
    # Apply a diversity promotion heuristic to escape local optima
    diversity_promotion = torch.where(
        (demands[None, :] == demands[None, :].T).any(axis=1),
        -torch.log1p(1.0 - (demands[None, :] == demands[None, :].T).any(axis=1)),
        torch.zeros_like(demands)
    )
    heuristics += diversity_promotion
    
    return heuristics
```
