```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    scale_factor = 5
    
    # Dynamic distance penalty with time-adaptive scaling
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_penalty *= torch.exp(-cumulative_demand / (total_capacity * scale_factor))
    
    # Dynamic capacity penalty with early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= torch.exp(-cumulative_demand / (total_capacity * scale_factor))
    overflow_penalty = torch.where(
        cumulative_demand[:, None] > total_capacity,
        -torch.log1p(cumulative_demand[:, None] - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_penalty *= torch.exp(-cumulative_demand / (total_capacity * scale_factor))
    
    # Load balance penalty with time-adaptive scaling
    total_demand = demands[1:]
    balance_factor = torch.abs(cumulative_demand[1:] - total_demand.mean())
    balance_penalty = -torch.log1p(balance_factor - 1e-8)
    balance_penalty *= torch.exp(-cumulative_demand[1:] / (total_demand.mean() * scale_factor))
    
    # Randomness factor with controlled impact
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    randomness_factor *= torch.exp(-cumulative_demand / (total_capacity * scale_factor))
    
    # Diversity factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    diversity_factor *= torch.exp(-cumulative_demand / (total_capacity * scale_factor))
    
    # Combine core objectives
    heuristics = distance_penalty + dynamic_capacity_penalty + overflow_penalty + balance_penalty
    
    # Add randomness and diversity factor
    heuristics += randomness_factor + diversity_factor
    
    # Cap the heuristics to maintain stability
    heuristics = torch.clamp(heuristics, min=-10.0, max=10.0)
    
    # Apply a large penalty for the depot to return to itself
    heuristics[0, 0] = -1e7
    
    return heuristics
```
