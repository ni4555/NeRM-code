```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Early overflow detection to quickly identify infeasible edges
    early_overflow = cumulative_demand > total_capacity_vector
    
    # Dynamic capacity penalty with adaptive scaling
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= early_overflow
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine penalties to simplify and clarify decision space
    penalties = (
        dynamic_capacity_penalty +
        distance_scaling +
        load_balance_penalty
    )
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Diversity factor for exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine heuristics with scaling and diversity
    heuristics = (
        penalties +
        randomness_factor
    )
    
    # Incorporate early overflow detection into heuristics
    heuristics *= (1 + early_overflow)
    
    # Adjust heuristics based on diversity to balance exploration and exploitation
    heuristics += diversity_factor
    
    return heuristics
```
