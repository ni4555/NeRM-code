```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Core objectives
    def dynamic_capacity_penalty():
        return -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * (
            1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity * 
            (cumulative_demand > total_capacity_vector)
        )
    
    def distance_penalty():
        scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
        time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
        scaling *= (1 + cumulative_demand / total_capacity) * time_factor
        return scaling
    
    def overflow_penalty():
        return torch.where(
            (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
            -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
            torch.zeros_like(cumulative_demand)
        )
    
    def load_balance_penalty():
        load_balance = torch.abs(cumulative_demand - total_capacity_vector)
        return -torch.log1p(load_balance - 1e-8)
    
    # Diversity factor
    def diversity_factor():
        diversity = torch.abs(torch.randn_like(demands)) * 0.2
        diversity /= (torch.sum(torch.abs(diversity)) + 1e-8)
        diversity *= (1 - cumulative_demand / total_capacity)
        return diversity
    
    # Scaling factor for core objectives
    scaling_factor = 2.5
    
    core_objectives = distance_penalty() + dynamic_capacity_penalty() + overflow_penalty() + load_balance_penalty()
    
    # Combine the core objectives with the diversity factor
    heuristics = scaling_factor * core_objectives + diversity_factor()
    
    # Introduce early overflow detection
    heuristics *= (1 + (cumulative_demand > total_capacity_vector))
    
    return heuristics
```
