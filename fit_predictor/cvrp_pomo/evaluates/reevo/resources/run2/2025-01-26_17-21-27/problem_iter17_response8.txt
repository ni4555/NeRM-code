```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    # Dynamically scale the distance penalty based on cumulative demand
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    # Apply a penalty that increases as the vehicle approaches full capacity
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    # Balance demand and distance by adding a weight to the cumulative demand
    demand_weight = 0.5  # Weight can be adjusted based on problem specifics
    balance_factor = demand_weight * cumulative_demand + (1 - demand_weight) * distance_scaling
    heuristics = balance_factor + dynamic_capacity_penalty
    return heuristics
```
