```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Demand-aware edge evaluation
    demand_difference = demands - total_capacity / n
    demand_heuristic = -torch.log1p(torch.abs(demand_difference) - 1e-8)
    
    # Early overflow detection to prune edges
    overflow_mask = cumulative_demand > total_capacity
    overflow_penalty = -torch.log1p(cumulative_demand[overflow_mask] - total_capacity - 1e-8)
    
    # Distance scaling with time-adaptive component
    distance_heuristic = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 10))
    distance_heuristic *= time_factor
    
    # Balancing exploration and exploitation through randomness
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.05
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Load balance heuristic with early overflow adjustment
    load_balance_heuristic = -torch.log1p(torch.abs(cumulative_demand - total_capacity / n) - 1e-8)
    load_balance_heuristic *= (1 + 0.5 * overflow_mask.float())
    
    # Combining heuristics
    heuristics = demand_heuristic + distance_heuristic + overflow_penalty + randomness_factor + load_balance_heuristic
    
    # Encourage exploration by adding diversity factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Final heuristic with scaling and early overflow adjustment
    final_heuristics = heuristics + diversity_factor * (1 + overflow_mask.float())
    
    return final_heuristics
```
