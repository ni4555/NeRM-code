```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Introduce a penalty for edges that lead to overflow capacity
    overflow_penalty = torch.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                total_demand = cumulative_demand[j] + demands[j]
                if total_demand > total_capacity:
                    overflow_penalty[i, j] = -torch.log1p(total_demand - total_capacity - 1e-8)
    
    # Vectorized penalty for edges leading to unbalanced load distribution
    balance_penalty = -torch.log1p(torch.abs(torch.diff(demands) - total_capacity / n) - 1e-8)
    
    # Aggressive scaling factor
    scaling_factor = 2.0
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + balance_penalty)
    return heuristics
```
