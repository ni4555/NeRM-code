```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Focus core objectives with scaling factors
    core_objectives = (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty)
    
    # Introduce a scaling factor for core objectives
    scaling_factor = 3.0
    scaled_core_objectives = core_objectives * scaling_factor
    
    # Foster diversity to escape local optima
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Normalize heuristics to maintain range and consistency
    normalized_diversity = diversity_factor / (diversity_factor.abs().max() + 1e-8)
    
    # Encourage diversity and balance through a combination of penalties and scaling
    heuristics = scaled_core_objectives + normalized_diversity
    
    # Early exit for overflow conditions
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.zeros_like(heuristics), heuristics)
    
    return early_overflow
```
