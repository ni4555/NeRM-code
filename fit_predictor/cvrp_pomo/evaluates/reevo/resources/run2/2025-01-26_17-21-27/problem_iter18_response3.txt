```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Distance penalty scaled by cumulative demand
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8) * (1 + cumulative_demand)
    
    # High demand penalty for nodes with demand over half the vehicle capacity
    high_demand_penalty = torch.where(demands > total_capacity / 2, -torch.log1p(torch.abs(demands - total_capacity / 2) - 1e-8), torch.zeros_like(demands))
    
    # Dynamic capacity penalty based on the difference between total capacity and cumulative demand
    dynamic_capacity_penalty = -torch.log1p(torch.abs(total_capacity - cumulative_demand) - 1e-8)
    
    heuristics = distance_penalty + high_demand_penalty + dynamic_capacity_penalty
    return heuristics
```
