```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Core objectives scaling
    scaling_factors = {
        'capacity': 3.0,
        'distance': 2.0,
        'balance': 1.5,
        'randomness': 1.0
    }
    
    # Dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor
    randomness_factor = torch.abs(torch.randn_like(demands)) * scaling_factors['randomness']
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Core objectives computation
    core_objectives = (
        scaling_factors['capacity'] * dynamic_capacity_penalty +
        scaling_factors['distance'] * distance_scaling +
        scaling_factors['balance'] * load_balance_penalty
    )
    
    # Heuristics
    heuristics = core_objectives + randomness_factor
    
    # Introduce diversity
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += diversity_factor
    
    # Local search for refinement
    for i in range(1, n):  # Exclude the depot
        for j in range(n):
            if i != j:
                # Check if adding this edge would not cause overflow
                if (cumulative_demand[j] + demands[i]) <= total_capacity:
                    # Add the improvement to the heuristic if it does not cause overflow
                    heuristics[i, j] += distance_matrix[i, j] - distance_scaling[i, j]
                else:
                    # Add a penalty if it would cause overflow
                    heuristics[i, j] -= distance_matrix[i, j] - distance_scaling[i, j] * 10
    
    # Subtract depot penalty
    depot_penalty = torch.arange(n) == 0
    heuristics = heuristics - depot_penalty.float().unsqueeze(0)
    
    # Cap the heuristics
    heuristics = torch.clamp(heuristics, min=-10.0, max=10.0)
    
    return heuristics
```
