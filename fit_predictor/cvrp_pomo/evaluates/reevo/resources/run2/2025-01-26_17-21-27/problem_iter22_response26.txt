```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    scaling_factor = 1.0
    load_balance_factor = (cumulative_demand - total_capacity / 2) / (total_capacity / n)

    # Combine distance and demand into a single heuristic value
    heuristics = (
        scaling_factor *
        (distance_penalty + dynamic_capacity_penalty)
    )
    # Add load balance factor
    heuristics += torch.clamp(load_balance_factor, -1, 1)
    return heuristics
```
