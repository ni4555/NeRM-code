```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic capacity penalty with adaptive scaling and early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow)
    
    # Enhanced distance penalty with time-adaptive scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with refined balance factor
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness factor with controlled impact based on cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Introduce a modular design for scalability
    heuristics_components = [
        dynamic_capacity_penalty,
        distance_scaling,
        overflow_penalty,
        load_balance_penalty,
        randomness_factor
    ]
    
    # Scale components based on their relevance to core objectives
    scaling_factors = [2.5, 1.5, 1.0, 1.0, 0.5]
    
    # Normalize heuristics to balance their influence
    heuristics_sum = torch.stack(heuristics_components).sum(dim=0)
    heuristics_sum[heuristics_sum == 0] = 1e-8
    normalized_components = [sf * component / heuristics_sum for sf, component in zip(scaling_factors, heuristics_components)]
    
    # Combine components into the final heuristics vector
    heuristics = torch.stack(normalized_components).sum(dim=0)
    
    # Integrate time-adaptive diversity factor to encourage exploration
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += diversity_factor
    
    # Introduce time-adaptive early overflow and imbalance detection
    heuristics *= (1 + early_overflow)
    imbalance_factor = torch.abs(cumulative_demand - total_capacity_vector) / total_capacity_vector
    heuristics += 0.5 * imbalance_factor
    
    return heuristics
```
