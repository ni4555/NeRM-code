```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Simplified dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity / n) - 1e-8)
    
    # Optimized distance penalty
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / (2 * total_capacity))
    
    # Optimized overflow penalty
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity / n,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity / n - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    overflow_penalty *= 0.5
    
    # Load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Controlled randomness factor
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.05
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine heuristics with balanced scaling factor
    heuristics = (
        0.4 * distance_scaling +
        0.3 * dynamic_capacity_penalty +
        0.2 * overflow_penalty +
        0.1 * load_balance_penalty +
        0.05 * randomness_factor
    )
    
    # Introduce time-adaptive diversity factor
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.05
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Adjust heuristics for load imbalance
    load_imbalance = load_balance > 0.01
    heuristics += diversity_factor * (1 + load_imbalance)
    
    return heuristics
```
