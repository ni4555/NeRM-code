```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    relative_cumulative_demand = cumulative_demand / total_capacity

    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)

    # Scale the penalties with the relative cumulative demand and ensure the sum of penalties does not exceed the capacity
    scaled_distance_penalty = distance_penalty * relative_cumulative_demand.unsqueeze(1)
    scaled_capacity_penalty = capacity_penalty * relative_cumulative_demand.unsqueeze(1)
    scaled_penalties = torch.clamp(scaled_distance_penalty + scaled_capacity_penalty, min=0, max=1)

    # Include a penalty for the depot node
    depot_mask = (torch.arange(n) == 0).float()
    heuristics = scaled_penalties + depot_mask.unsqueeze(0) * relative_cumulative_demand.unsqueeze(0)
    return heuristics
```
