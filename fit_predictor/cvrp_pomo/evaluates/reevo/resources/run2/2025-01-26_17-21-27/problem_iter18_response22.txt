```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Scale distance penalties by cumulative demand and introduce a demand penalty
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    demand_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Increase distance penalty as we approach the cumulative demand of the vehicle
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    
    # Increase demand penalty for nodes that would overload the vehicle if added
    high_demand_penalty = torch.where(demands > total_capacity / n, demand_penalty, torch.zeros_like(demand_penalty))
    
    # Adjust capacity penalty to reflect how close the vehicle is to its capacity
    capacity_penalty = demand_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Combine penalties into a heuristic score
    heuristics = distance_scaling + high_demand_penalty + capacity_penalty
    return heuristics
```
