```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    
    # Compute dynamic scaling without the use of torch.where
    dynamic_scaling = torch.where(demands < total_capacity, cumulative_demand, 1)
    
    # Simplified heuristic without additional balancing factor and constant
    heuristics = capacity_penalty * (1 - dynamic_scaling) + distance_penalty * dynamic_scaling
    # Apply a penalty for the depot to return to itself
    heuristics[0] = -1000
    
    return heuristics
```
