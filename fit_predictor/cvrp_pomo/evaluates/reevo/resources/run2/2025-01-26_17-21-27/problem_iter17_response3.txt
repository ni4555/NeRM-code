```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Increase penalty for high cumulative demand and long distances
    high_demand_penalty = -torch.log1p(torch.abs(cumulative_demand - total_capacity) - 1e-8)
    long_distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    # Decrease penalty when demand is balanced across vehicles
    balance_factor = (cumulative_demand - total_capacity) / (total_capacity * (n - 1))
    balanced_demand_penalty = balance_factor * long_distance_penalty
    heuristics = high_demand_penalty + balanced_demand_penalty
    return heuristics
```
