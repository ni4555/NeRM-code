```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_normalized = (demands / total_demand) * 10  # Prioritize high-demand nodes
    distance_weight = -torch.abs(distance_matrix)  # Use negative distances to prioritize short paths

    # Combine demand and distance into heuristic matrix
    heuristic_matrix = distance_weight + demand_normalized

    # Clamp negative values to zero to ensure all heuristics are positive
    heuristic_matrix = torch.clamp(heuristic_matrix, min=0)

    return heuristic_matrix
```
