```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Enhanced capacity penalty with early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    early_overflow = cumulative_demand > total_capacity_vector
    dynamic_capacity_penalty *= torch.exp(-torch.min(0.1 * early_overflow.float(), 0.5))
    
    # Priority for shorter paths to core customers
    distance_priority = torch.log1p(-torch.abs(distance_matrix) - 1e-8)
    distance_priority *= torch.exp(torch.relu(demands / (2 * total_capacity)))
    
    # Time-adaptive scaling for distance and capacity penalties
    time_factor = torch.exp(-cumulative_demand / (0.5 * total_capacity))
    dynamic_capacity_penalty *= time_factor
    distance_priority *= time_factor
    
    # Early return penalty for demand exceeding capacity
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic with balance factor adjusted by time
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance *= time_factor
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Introduce diversity factor based on demand
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine all heuristics with a balance factor
    balance_factor = 1.2
    heuristics = (
        balance_factor * (
            distance_priority +
            dynamic_capacity_penalty +
            overflow_penalty +
            load_balance_penalty
        ) +
        diversity_factor
    )
    
    # Adjust heuristics based on overflow
    heuristics *= (1 + early_overflow)
    
    return heuristics
```
