```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    capacity = demands.max()
    
    # Calculate the savings for each edge
    savings = (distance_matrix**2 - torch.clamp(distance_matrix, min=1e-8)) * (demands[:, None] - demands[None, :])
    
    # Calculate the cumulative demand at each node if visited
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Create a mask to check if adding a node exceeds the vehicle capacity
    demand_mask = cumulative_demand <= capacity
    
    # Adjust the savings heuristic to consider demand
    adjusted_savings = savings * demand_mask
    
    # Invert the savings to make higher values more promising and clamp to avoid negative values
    heuristic_matrix = torch.clamp(-adjusted_savings, min=0)
    
    # Normalize the heuristic by the total demand to ensure relative importance
    heuristic_matrix /= total_demand

    # Due to symmetry, we only need to consider half the matrix
    upper_triangle = heuristic_matrix[:n, :n].triu(diagonal=1)
    lower_triangle = heuristic_matrix[n-1::-1, n-1::-1].tril(diagonal=-1)
    symmetric_heuristic_matrix = upper_triangle + lower_triangle

    return symmetric_heuristic_matrix
```
