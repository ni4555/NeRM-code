```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Early overflow detection for early termination and penalty
    early_overflow = (cumulative_demand[:, None] > total_capacity_vector[None, :])
    
    # Dynamic capacity penalty with early overflow detection
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + 0.3 * (total_capacity - cumulative_demand) / total_capacity) * (1 + early_overflow.float())
    
    # Time-adaptive distance scaling
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
    distance_scaling *= (1 + cumulative_demand / total_capacity) * time_factor
    
    # Refined load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Randomness and diversity controlled by the problem state
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Prioritize core objectives with a scaling factor
    scaling_factor = 2.5
    
    # Combine penalties and randomness, then adjust for early overflow
    heuristics = (
        scaling_factor * (
            distance_scaling +
            dynamic_capacity_penalty +
            load_balance_penalty
        ) +
        randomness_factor + diversity_factor
    )
    heuristics *= (1 + early_overflow.float())
    
    # Normalize heuristics
    heuristics = torch.clamp(heuristics, min=-10, max=10)
    
    return heuristics
```
