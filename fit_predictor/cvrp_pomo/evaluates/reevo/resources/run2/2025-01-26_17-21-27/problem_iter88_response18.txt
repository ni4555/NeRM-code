```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Demand penalty: High demand leads to a negative heuristic
    demand_penalty = torch.abs(demands - total_capacity_vector)
    
    # Distance penalty: Higher distances lead to a negative heuristic
    distance_penalty = torch.abs(distance_matrix)
    
    # Overflow penalty: If the cumulative demand exceeds the vehicle capacity, apply a penalty
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance penalty: If the load balance (difference between cumulative demand and average demand) is high, apply a penalty
    load_balance_penalty = torch.abs(cumulative_demand - total_capacity_vector)
    
    # Combine penalties, scaling them by cumulative demand
    combined_penalties = demand_penalty + distance_penalty + overflow_penalty + load_balance_penalty
    combined_penalties *= cumulative_demand / total_capacity
    
    # Introduce randomness for exploration, scaling it by the cumulative demand
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Time-adaptively scale the randomness based on cumulative demand
    time_adaptive_factor = torch.exp(-cumulative_demand / (total_capacity * 3))
    randomness_factor *= time_adaptive_factor
    
    # Combine the penalties and randomness to create the heuristic values
    heuristics = -combined_penalties + randomness_factor
    
    # Add diversity by introducing a random component
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    heuristics += diversity_factor
    
    # Scale the heuristics to prioritize core objectives
    scaling_factor = 2.0
    heuristics *= scaling_factor
    
    return heuristics
```
