```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    relative_cumulative_demand = torch.cumsum(demands, dim=0) / total_capacity

    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)

    # Incorporating the load balance with a linear decrease as the cumulative demand increases
    load_balance_penalty = -torch.sum(relative_cumulative_demand * torch.arange(n))

    # The heuristic function combines the penalties
    heuristics = distance_penalty + capacity_penalty + load_balance_penalty
    return heuristics
```
