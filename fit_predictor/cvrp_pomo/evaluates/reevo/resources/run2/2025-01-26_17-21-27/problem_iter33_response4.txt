```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Integrate dynamic penalties, adaptive scaling, and diversity
    # Use a penalty that decreases as the solution becomes more diverse
    diversity_penalty = -torch.log1p(torch.abs(demands) - 1e-8)
    
    # Dynamic capacity penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(total_capacity - cumulative_demand) - 1e-8)
    
    # Adaptive scaling for distances that accounts for load on the route
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8) * (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Introduce a diversity heuristic by penalizing edges that are part of the most frequently used paths
    edge_usage = torch.zeros_like(distance_matrix)
    edge_usage.scatter_add_(1, torch.arange(n)[None], 1)
    frequency_penalty = -torch.log1p(edge_usage - 1 - 1e-8)
    
    # Apply a strong scaling factor to prioritize core objectives
    scaling_factor = 3.0
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty + overflow_penalty + load_balance_penalty + frequency_penalty)
    
    # Apply an additional penalty for high load balance to avoid overloading any single vehicle
    high_load_balance_penalty = torch.where(
        load_balance > total_capacity / (3 * n),
        -torch.log1p(load_balance - 1e-8),
        torch.zeros_like(load_balance)
    )
    
    heuristics += high_load_balance_penalty
    return heuristics
```
