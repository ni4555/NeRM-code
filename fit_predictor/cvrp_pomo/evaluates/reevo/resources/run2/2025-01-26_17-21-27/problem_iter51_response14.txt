```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Introduce controlled randomness to escape local optima
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Scale heuristics and penalties with different factors
    scaling_factor_distance = 2.0
    scaling_factor_dynamic_capacity = 1.5
    scaling_factor_overflow = 1.0
    scaling_factor_load_balance = 0.5
    scaling_factor_randomness = 0.5
    
    heuristics = (
        scaling_factor_distance * distance_scaling +
        scaling_factor_dynamic_capacity * dynamic_capacity_penalty +
        scaling_factor_overflow * overflow_penalty +
        scaling_factor_load_balance * load_balance_penalty +
        scaling_factor_randomness * randomness_factor
    )
    
    # Normalize heuristics to maintain the same scale as other terms
    heuristics /= (scaling_factor_distance + scaling_factor_dynamic_capacity + scaling_factor_overflow + scaling_factor_load_balance + scaling_factor_randomness)
    
    return heuristics
```
