```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    
    # Enhanced distance penalty with load balance and capacity awareness
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand / total_capacity + (total_capacity - cumulative_demand) / total_capacity)
    
    # Dynamic capacity penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Overflow penalty
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Early return heuristic
    early_return = torch.where(
        cumulative_demand > total_capacity / 2,
        -torch.log1p(cumulative_demand - total_capacity / 2 - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # High demand density penalty to avoid congestion
    high_demand_density = demands / (distance_matrix + 1e-8)
    high_demand_density_penalty = -torch.log1p(high_demand_density - 1e-8)
    
    # Diversity penalty
    diversity_penalty = torch.mean(torch.abs(load_balance - load_balance.mean()), dim=0)
    
    # Combine all penalties into the heuristics vector
    heuristics = distance_scaling + dynamic_capacity_penalty + overflow_penalty + early_return + load_balance_penalty + high_demand_density_penalty + diversity_penalty
    
    # Scale the heuristics to prioritize core objectives
    scaling_factor = 3.0
    heuristics = heuristics * scaling_factor
    
    # Cap the heuristics to avoid unrealistic high or low values
    heuristics = torch.clamp(heuristics, min=-100, max=100)
    
    # Penalty for the depot to return to itself
    heuristics[0] = -1000
    
    return heuristics
```
