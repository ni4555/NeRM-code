```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    # Dynamic weight for capacity penalties
    dynamic_weight = torch.where(cumulative_demand < total_capacity, 
                                 1 + (total_capacity - cumulative_demand) / total_capacity, 
                                 torch.ones_like(cumulative_demand))
    adjusted_capacity_penalty = capacity_penalty * dynamic_weight
    
    # Normalize distance penalty for demand size
    demand_scaled = demands / demands.max()
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand) * demand_scaled
    
    # Combine penalties with a balance between demand and distance
    heuristics = distance_scaling + adjusted_capacity_penalty
    return heuristics
```
