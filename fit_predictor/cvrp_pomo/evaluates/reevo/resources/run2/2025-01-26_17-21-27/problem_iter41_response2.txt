```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    load_balance = torch.abs(cumulative_demand - total_capacity / n)
    
    # Simplified objective with vectorized operations and reduced redundancy
    distance_scaled = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Prioritize core objectives and introduce dynamic scaling
    heuristics = (distance_scaled * 0.3 + capacity_penalty * 0.6 + overflow_penalty * 0.7 + load_balance_penalty * 0.5)
    heuristics = heuristics * (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Introduce randomness to foster diversity and escape local optima
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    heuristics += diversity_factor
    
    # Balance penalties and encourage diversity without redundancy
    heuristics *= torch.where(cumulative_demand > total_capacity / n, torch.ones_like(heuristics), torch.zeros_like(heuristics))
    return heuristics
```
