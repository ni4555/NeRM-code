```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Dynamic penalty based on remaining capacity
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    dynamic_capacity_penalty *= (1 + (total_capacity - cumulative_demand) / total_capacity)
    
    # Enhanced distance penalty to account for cumulative load
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Overflow penalty with early return to avoid unnecessary overflow
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance load heuristic to encourage uniform load distribution
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Scale objectives to balance importance
    scaling_factors = {
        'distance_scaling': 2.0,
        'dynamic_capacity_penalty': 1.5,
        'overflow_penalty': 1.0,
        'load_balance_penalty': 1.0
    }
    
    # Combine the weighted objectives into a heuristic
    combined_heuristics = 0.0
    for key, value in scaling_factors.items():
        obj = locals()[key]
        combined_heuristics += obj * value
    
    # Introduce randomness to encourage diversity
    random_factor = torch.abs(torch.randn_like(demands)) * 0.05
    
    # Control the introduction of randomness to prevent overflow
    early_overflow_mask = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    random_factor *= early_overflow_mask
    
    # Adjust combined heuristics by randomness, but still respect balance and load objectives
    heuristics = combined_heuristics + random_factor
    return heuristics
```
