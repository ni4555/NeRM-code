```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling = distance_penalty * (1 + cumulative_demand)
    dynamic_capacity_penalty = capacity_penalty * (1 + (total_capacity - cumulative_demand) / total_capacity)
    # Dynamic scaling of penalties based on demand awareness and capacity balancing
    scaling_factor = torch.max(torch.abs(distance_scaling), torch.abs(dynamic_capacity_penalty))
    heuristics = scaling_factor * (distance_scaling + dynamic_capacity_penalty)
    return heuristics
```
