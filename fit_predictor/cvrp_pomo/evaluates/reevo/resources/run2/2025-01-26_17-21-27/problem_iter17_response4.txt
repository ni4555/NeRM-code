```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Use a penalty for edges that are longer than the average distance
    average_distance = distance_matrix.mean()
    distance_penalty = -torch.log1p(torch.abs(distance_matrix - average_distance) - 1e-8)
    # Apply a demand-based scaling to the distance penalty
    demand_scaled_distance_penalty = distance_penalty * (1 + (cumulative_demand / total_capacity) ** 2)
    # Calculate the dynamic capacity penalty
    dynamic_capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8) * (1 + (cumulative_demand / total_capacity))
    heuristics = demand_scaled_distance_penalty + dynamic_capacity_penalty
    return heuristics
```
