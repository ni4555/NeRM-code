```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Prioritize core objectives and balance diversity
    core_objectives = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Normalize randomness with time-adaptive scaling
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Detect early overflow to adapt penalties dynamically
    early_overflow = cumulative_demand > total_capacity_vector
    overflow_penalty = -torch.log1p(torch.abs((cumulative_demand[:, None] + demands[None, :]) - total_capacity) - 1e-8) * (1 + early_overflow)
    
    # Detect imbalance in load and apply load balance heuristic
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Combine all factors
    heuristics = core_objectives + diversity_factor + randomness_factor + overflow_penalty + load_balance_penalty
    
    return heuristics
```
