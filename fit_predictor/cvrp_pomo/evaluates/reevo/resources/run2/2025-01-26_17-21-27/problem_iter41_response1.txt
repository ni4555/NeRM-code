```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Scaled penalties for dynamic load management
    dynamic_capacity_penalty = torch.where(
        demands > total_capacity_vector,
        -torch.log1p((demands - total_capacity_vector) - 1e-8),
        torch.zeros_like(demands)
    )
    dynamic_capacity_penalty *= (1 + cumulative_demand / total_capacity)
    
    # Optimized distance penalty that considers load impact
    distance_scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    distance_scaling *= (1 + cumulative_demand / total_capacity)
    
    # Efficient overflow penalty with immediate return to depot
    overflow_penalty = torch.where(
        (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Load balance heuristic to prevent overloading any vehicle
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Scaling factors to balance penalties and prioritize load constraints
    scaling_factors = {
        'distance': 2.0,
        'capacity': 4.0,
        'load_balance': 1.0
    }
    
    # Combined heuristics with optimized scaling
    heuristics = (
        scaling_factors['distance'] * distance_scaling +
        scaling_factors['capacity'] * dynamic_capacity_penalty +
        scaling_factors['load_balance'] * load_balance_penalty
    )
    
    # Encourage diversity in heuristic values to avoid local optima
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.1
    
    # Adaptively adjust heuristics based on early overflow and imbalance
    early_overflow = torch.where(cumulative_demand > total_capacity_vector, torch.ones_like(cumulative_demand), torch.zeros_like(cumulative_demand))
    heuristics *= early_overflow
    
    # Apply the diversity factor to heuristics to enhance diversity
    heuristics += diversity_factor
    return heuristics
```
