```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    # Modulate capacity penalty based on demand fulfillment
    capacity_penalty = -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    capacity_penalty *= (1 - cumulative_demand / total_capacity)
    
    # Scale distance penalty adaptively with a time factor
    distance_penalty = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
    time_factor = torch.exp(-cumulative_demand / (total_capacity * 2))
    distance_penalty *= time_factor
    
    # Introduce a penalty for potential overflows early in the route
    overflow_penalty = torch.where(
        cumulative_demand[:, None] + demands[None, :] > total_capacity,
        -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
        torch.zeros_like(cumulative_demand)
    )
    
    # Balance the load across vehicles
    load_balance = torch.abs(cumulative_demand - total_capacity_vector)
    load_balance_penalty = -torch.log1p(load_balance - 1e-8)
    
    # Add randomness to encourage exploration, with less randomness as demand fills
    randomness_factor = torch.abs(torch.randn_like(demands)) * 0.1
    randomness_factor *= (1 - cumulative_demand / total_capacity)
    
    # Combine all penalties and randomness
    combined_penalties = capacity_penalty + distance_penalty + overflow_penalty + load_balance_penalty
    heuristics = combined_penalties + randomness_factor
    
    # Introduce a diversity factor that adapts based on the cumulative demand
    diversity_factor = torch.abs(torch.randn_like(demands)) * 0.2
    diversity_factor /= (torch.sum(torch.abs(diversity_factor)) + 1e-8)
    diversity_factor *= (1 - cumulative_demand / total_capacity)
    
    # Adjust heuristics based on early overflow and imbalance
    heuristics *= (1 + (cumulative_demand > total_capacity_vector).float())
    heuristics += diversity_factor
    
    return heuristics
```
