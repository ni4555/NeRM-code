```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Exponential decay with a base that scales with cumulative demand
    base = torch.exp(-0.1 * cumulative_demand)
    
    # Dynamic scaling of distances with exponential decay
    distance_scaling = base * torch.log1p(distance_matrix - 1e-8)
    
    # Dynamic capacity overflow detection with exponential scaling
    overflow_penalty = -torch.log1p(torch.abs(cumulative_demand + demands - total_capacity) - 1e-8)
    
    # Introducing a dynamic balance load heuristic
    balance_load = (cumulative_demand - total_capacity / n) ** 2
    balance_load_penalty = -torch.log1p(balance_load - 1e-8)
    
    # Weighing the penalties
    distance_weight = 2.0
    capacity_weight = 1.5
    load_balance_weight = 1.0
    
    # Combine the components to form the heuristics matrix
    heuristics = (
        distance_weight * distance_scaling +
        capacity_weight * overflow_penalty +
        load_balance_weight * balance_load_penalty
    )
    
    # Saturate the heuristics to ensure non-negative values
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
