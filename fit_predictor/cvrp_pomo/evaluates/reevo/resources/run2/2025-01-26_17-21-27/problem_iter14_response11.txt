```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    demand_balance = -torch.abs(cumulative_demand - total_capacity) / total_capacity
    distance_balance = 1 / (1 + distance_matrix)
    combined_balance = demand_balance * distance_balance
    depot_priority = (torch.arange(n) == 0).float().unsqueeze(0)
    heuristics = combined_balance * depot_priority
    return heuristics
```
