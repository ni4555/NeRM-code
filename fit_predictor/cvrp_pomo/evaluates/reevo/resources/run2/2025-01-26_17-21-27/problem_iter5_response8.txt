```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demands_cumulative = torch.cumsum(demands, dim=0)
    
    # Initialize heuristics matrix with large negative values
    heuristics = -torch.ones_like(distance_matrix)
    
    # Calculate demand-based heuristics
    demand_thresholds = total_capacity * torch.arange(0, n)
    for i in range(n):
        for j in range(n):
            if demands_cumulative[j] - demands_cumulative[i] <= total_capacity:
                heuristics[i, j] = torch.relu(demands_cumulative[j] - demands_cumulative[i] - demand_thresholds[j])
    
    # Add capacity-aware penalties for edges that exceed the vehicle capacity
    heuristics[torch.arange(n), 1:] -= (demands_cumulative[:n-1] - demand_thresholds[:n-1]) / total_capacity * 10
    
    # Vectorized demand-distance interaction
    heuristics += (demands * distance_matrix) / total_capacity
    
    return heuristics
```
