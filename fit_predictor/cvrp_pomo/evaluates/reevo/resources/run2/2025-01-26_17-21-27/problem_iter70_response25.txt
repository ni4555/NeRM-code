```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    total_capacity_vector = torch.full((n,), total_capacity / n)
    
    def calculate_penalty(penalty_function, *args):
        return penalty_function(*args) * torch.exp(-cumulative_demand / (total_capacity * 2))
    
    def dynamic_capacity_penalty(demands, total_capacity):
        return -torch.log1p(torch.abs(demands - total_capacity) - 1e-8)
    
    def distance_penalty(distance_matrix):
        scaling = -torch.log1p(torch.abs(distance_matrix) - 1e-8)
        time_factor = torch.exp(-cumulative_demand / (total_capacity * 5))
        scaling *= (1 + cumulative_demand / total_capacity) * time_factor
        return scaling
    
    def overflow_penalty(demands, total_capacity):
        return torch.where(
            (cumulative_demand[:, None] + demands[None, :]) > total_capacity,
            -torch.log1p((cumulative_demand[:, None] + demands[None, :]) - total_capacity - 1e-8),
            torch.zeros_like(cumulative_demand)
        )
    
    def load_balance_penalty(cumulative_demand, total_capacity_vector):
        load_balance = torch.abs(cumulative_demand - total_capacity_vector)
        return -torch.log1p(load_balance - 1e-8)
    
    def randomness_factor():
        return torch.abs(torch.randn_like(demands)) * 0.1
    
    def diversity_factor():
        diversity = torch.abs(torch.randn_like(demands)) * 0.2
        diversity /= (torch.sum(torch.abs(diversity)) + 1e-8)
        return diversity
    
    heuristics = (
        calculate_penalty(dynamic_capacity_penalty, demands, total_capacity) +
        calculate_penalty(distance_penalty, distance_matrix) +
        calculate_penalty(overflow_penalty, demands, total_capacity) +
        calculate_penalty(load_balance_penalty, cumulative_demand, total_capacity_vector) +
        randomness_factor() +
        diversity_factor()
    )
    
    return heuristics
```
