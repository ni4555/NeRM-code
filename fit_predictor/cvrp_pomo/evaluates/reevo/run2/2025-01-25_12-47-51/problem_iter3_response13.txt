```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the total demand
    total_demand = torch.sum(demands)

    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero

    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Prioritize nodes by demand and distance
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Incorporate demand-to-capacity ratios and prioritize paths with better remaining capacity
    demand_normalized_matrix = demands / torch.sum(demands)
    remaining_capacity = 1 - demand_normalized_matrix
    capacity_weighted_distance = remaining_capacity * inv_distance_matrix

    # Combine demand and capacity-based heuristics and apply nearest-neighbor strategy
    combined_heuristic = demand_weighted_distance + capacity_weighted_distance
    nearest_neighbor_heuristic = torch.sum(demand_weighted_distance, dim=1)

    # Use a blend of the combined heuristic and nearest-neighbor heuristic
    blended_heuristic = 0.5 * combined_heuristic + 0.5 * nearest_neighbor_heuristic

    # Ensure that edges with insufficient capacity are penalized
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    blended_heuristic[insufficient_capacity_mask] = -torch.inf

    return blended_heuristic
```
