```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Dynamic weights based on domain-specific knowledge
    dynamic_weight = torch.sqrt(torch.arange(1, n) / (n - 1))

    # Calculate inverse distance matrix and normalize by total demand
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Avoid division by zero
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic with dynamic weights
    demand_normalized = demands / total_demand
    demand_weighted_distance = dynamic_weight * normalized_inv_distance_matrix * demand_normalized

    # Remaining capacity-based heuristic with dynamic weights
    remaining_capacity = 1 - demands
    capacity_weighted_distance = dynamic_weight * remaining_capacity * inv_distance_matrix

    # Nearest-neighbor heuristic with diversity; normalize demand
    nearest_neighbor = torch.min(distance_matrix, dim=1).values
    demand_normalized = demands / total_demand
    nearest_neighbor_weight = nearest_neighbor * demand_normalized

    # Improved demand-based heuristic with diversity
    high_demand_penalty = 1 / (demands + 1e-8) * demand_weighted_distance

    # Improved nearest-neighbor heuristic with dynamic weights
    nearest_neighbor_weight = dynamic_weight * nearest_neighbor_weight

    # Combine heuristics with improved terms
    combined_heuristic = demand_weighted_distance + capacity_weighted_distance + nearest_neighbor_weight

    # Ensure that edges with insufficient capacity are penalized
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    return combined_heuristic
```
