```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the total demand
    total_demand = torch.sum(demands)

    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero

    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Apply a demand-based heuristic
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Apply a capacity-based heuristic
    demand_normalized_matrix = demands / total_demand
    remaining_capacity = 1 - demand_normalized_matrix
    capacity_weighted_distance = (remaining_capacity * inv_distance_matrix).T

    # Combine both heuristics with a preference for lower demand and capacity
    combined_heuristic = demand_weighted_distance + capacity_weighted_distance

    # Prioritize nodes with higher demand and capacity
    demand_capacity_normalized = (demands / total_demand) * (remaining_capacity)
    demand_capacity_weighted = demand_capacity_normalized * normalized_inv_distance_matrix

    # Adjust the combined heuristic with demand and capacity prioritization
    combined_heuristic += demand_capacity_weighted

    # Incorporate a nearest-neighbor heuristic to favor short paths
    nearest_neighbor_heuristic = torch.zeros_like(distance_matrix)
    for i in range(n):
        nearest_neighbor = torch.argmin(distance_matrix[i, 1:])
        nearest_neighbor_heuristic[i, nearest_neighbor] = -distance_matrix[i, nearest_neighbor]
    combined_heuristic += nearest_neighbor_heuristic

    # Ensure that edges with insufficient capacity are penalized
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    # Normalize the heuristics by the sum of heuristics values to ensure that the maximum value is close to 1
    combined_heuristic /= torch.sum(combined_heuristic)

    return combined_heuristic
```
