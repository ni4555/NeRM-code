```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the total demand
    total_demand = torch.sum(demands)

    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero

    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: prioritize nodes with higher demand
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Capacity-based heuristic: prioritize nodes that can be visited without exceeding capacity
    demand_normalized_matrix = demands / torch.sum(demands)
    remaining_capacity = 1 - demand_normalized_matrix
    capacity_weighted_distance = (remaining_capacity * inv_distance_matrix).T

    # Nearest-neighbor heuristic: prioritize nodes that are closer to the depot
    nearest_neighbor_distance = torch.min(distance_matrix[:, 1:], dim=1).values

    # Combine heuristics: blend demand, capacity, and distance
    combined_heuristic = demand_weighted_distance + capacity_weighted_distance - nearest_neighbor_distance

    # Penalize edges that would exceed vehicle capacity
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    return combined_heuristic
```
