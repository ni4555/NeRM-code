```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Greedy heuristic: sort customers by demand and visit them in order
    sorted_indices = torch.argsort(demands[1:])  # Ignore the depot's demand
    for i in sorted_indices:
        current_position = 0
        remaining_capacity = 1 - demands[i]
        while remaining_capacity > 0:
            min_distance = torch.min(distance_matrix[current_position, 1:])
            next_position = torch.argmin(distance_matrix[current_position, 1:])
            if demands[next_position] <= remaining_capacity:
                heuristics[current_position, next_position] = min_distance
                current_position = next_position
                remaining_capacity -= demands[next_position]

    # Nearest neighbor heuristic: for each customer, add the closest node that can be reached without exceeding capacity
    for i in range(1, n):
        if remaining_capacity[i] > 0:  # If there is still capacity left for this customer
            closest_node = torch.argmin(distance_matrix[i, 1:])
            if demands[closest_node] <= remaining_capacity[i]:
                heuristics[i, closest_node] = distance_matrix[i, closest_node]

    # Local search heuristic: try to improve the solution by swapping nodes if it's beneficial
    for _ in range(10):  # Limit iterations to avoid excessive computation
        for i in range(1, n):
            for j in range(1, n):
                if heuristics[i, j] != 0 and demands[i] + demands[j] <= 1:
                    swap = heuristics[i, j] - heuristics[j, i]
                    if swap > 0:
                        heuristics[i, j], heuristics[j, i] = swap, -swap

    return heuristics
```
