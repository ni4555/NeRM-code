```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)
    weighted_inv_distance = inv_distance_matrix * demands
    heuristic_matrix = weighted_inv_distance / total_demand - (1 - weighted_inv_distance / total_demand) * demands

    capacity_penalty = demands[:, None] + demands[None, :] > 1
    heuristic_matrix[capacity_penalty] = -float('inf')

    return heuristic_matrix
```
