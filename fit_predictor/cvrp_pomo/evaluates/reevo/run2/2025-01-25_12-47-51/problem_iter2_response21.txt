```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Precompute the total demand and the normalized inverse distance matrix
    total_demand = torch.sum(demands)
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Greedy heuristic: start with the depot and add customers with the least demand first
    sorted_indices = torch.argsort(demands[1:])  # Ignore the depot's demand
    for i in sorted_indices:
        current_position = 0
        while True:
            min_distance = torch.min(distance_matrix[current_position, 1:])
            next_position = torch.argmin(distance_matrix[current_position, 1:])
            if demands[next_position] + demands[current_position] <= 1:
                heuristics[current_position, next_position] = min_distance
                break
            current_position = next_position

    # Nearest neighbor heuristic: for each customer, add the closest node that can be reached without exceeding capacity
    for i in range(1, n):
        remaining_capacity = 1 - demands[i]
        if remaining_capacity > 0:
            closest_node = torch.argmin(distance_matrix[i, 1:])
            if demands[closest_node] <= remaining_capacity:
                heuristics[i, closest_node] = distance_matrix[i, closest_node]

    # Local search: try to improve the solution by swapping edges
    visited = torch.zeros_like(demands, dtype=torch.bool)
    for _ in range(10):  # Limit the number of iterations for efficiency
        for i in range(1, n):
            if visited[i]:
                continue
            for j in range(1, n):
                if visited[j] or j == i:
                    continue
                if demands[i] + demands[j] <= 1:
                    # Swap the positions
                    temp = heuristics[i, :]
                    heuristics[i, :] = heuristics[j, :]
                    heuristics[j, :] = temp
                    visited[i] = True
                    visited[j] = True
                    break
        visited.fill_(False)

    return heuristics
```
