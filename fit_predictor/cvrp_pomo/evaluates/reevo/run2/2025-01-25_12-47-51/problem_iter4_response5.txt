```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Normalize the demands to be between 0 and 1
    total_demand = torch.sum(demands)
    normalized_demands = demands / total_demand

    # Inverse of the distance matrix to avoid division by zero and to allow multiplication
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)

    # Demand-based heuristic: prioritize edges with higher demand
    demand_based = normalized_demands[:, None] * normalized_demands[None, :] * inv_distance_matrix

    # Nearest-neighbor heuristic: prioritize edges closer to the depot
    nearest_neighbor = inv_distance_matrix

    # Capacity-based heuristic: consider remaining capacity of the vehicle
    remaining_capacity = 1 - normalized_demands
    capacity_based = remaining_capacity[:, None] * remaining_capacity[None, :] * inv_distance_matrix

    # Combine heuristics with a balance factor to weigh different criteria
    balance_factor = 0.5
    combined_heuristic = balance_factor * (demand_based + nearest_neighbor + capacity_based)

    # Penalize edges that would exceed vehicle capacity
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    return combined_heuristic
```
