```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic that incorporates demand-based weights and distance-based penalties."""
    # Calculate the total demand
    total_demand = torch.sum(demands)
    
    # Normalize the demands by the total demand
    normalized_demands = demands / total_demand
    
    # Calculate the inverse of distance matrix with a small constant to avoid division by zero
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)
    
    # Combine the demand-based weights and distance-based penalties
    heuristic_matrix = -normalized_demands * inv_distance_matrix
    
    # Clip the values to a range between -1 and 1 for better interpretability
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
