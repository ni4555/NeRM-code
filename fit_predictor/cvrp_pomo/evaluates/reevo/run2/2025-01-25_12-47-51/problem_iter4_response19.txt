```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initialize the heuristic matrix with a large negative value
    heuristics = -torch.inf * torch.ones_like(distance_matrix)
    
    # Add edges with the smallest distance for which the demand does not exceed the vehicle capacity
    for i in range(1, n):
        for j in range(1, n):
            if demands[i] + demands[j] <= 1:
                heuristics[i, j] = distance_matrix[i, j]
    
    # Apply a penalty to edges that would exceed vehicle capacity
    capacity_penalty = (demands[:, None] + demands[None, :]) > 1
    heuristics[capacity_penalty] = -float('inf')
    
    return heuristics
```
