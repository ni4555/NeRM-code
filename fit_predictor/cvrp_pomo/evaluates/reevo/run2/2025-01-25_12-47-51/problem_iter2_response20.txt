```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An improved heuristic that incorporates node demand penalties, adjusts distance sensitivity, and exploits structure."""
    # Calculate the total demand
    total_demand = torch.sum(demands)
    
    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand
    
    # Incorporate node demand penalties for higher demand nodes
    demand_penalty = demands * 0.1
    
    # Adjust the distance sensitivity by considering a constant factor
    distance_sensitivity = 0.1
    
    # Combine the normalized inverse distance with demand penalties and adjust for distance sensitivity
    heuristic_matrix = -normalized_inv_distance_matrix + demand_penalty + distance_sensitivity
    
    return heuristic_matrix
```
