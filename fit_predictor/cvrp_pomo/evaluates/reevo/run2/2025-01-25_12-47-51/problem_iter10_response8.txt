```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Inverse distance matrix to avoid division by zero
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)
    
    # Normalize by total demand to account for varying demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: higher demand nodes have higher heuristic value
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Remaining capacity heuristic: prioritize edges with higher remaining capacity
    remaining_capacity = 1 - demands
    capacity_weighted_distance = remaining_capacity * inv_distance_matrix

    # Nearest-neighbor heuristic: consider the closest node for each customer
    nearest_neighbor = torch.min(distance_matrix, dim=1).values

    # Dynamic weight for nearest-neighbor heuristic to amplify influence
    nearest_neighbor_weight = torch.clamp(10 * nearest_neighbor, min=1)

    # Dynamic penalty for high demand to avoid suboptimal conditions
    high_demand_penalty = 1 / (demands + 1e-8) * demand_weighted_distance
    high_demand_penalty[high_demand_penalty > 1] = 1

    # Dynamic penalty for high capacity utilization to avoid suboptimal conditions
    capacity_penalty = remaining_capacity * capacity_weighted_distance
    capacity_penalty[remaining_capacity < 0.5] = 0

    # Combine heuristics with dynamic weights and penalties
    combined_heuristic = demand_weighted_distance + capacity_penalty + nearest_neighbor_weight - high_demand_penalty

    # Ensure that edges with insufficient capacity are penalized
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    return combined_heuristic
```
