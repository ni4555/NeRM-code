```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Inverse of distance matrix with small constant to avoid division by zero
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)

    # Demand-based heuristic: Higher demand should discourage inclusion
    demand_weighted_distance = -demands * inv_distance_matrix

    # Distance-based heuristic: Lower distance should encourage inclusion
    distance_weighted_distance = demands * inv_distance_matrix

    # Capacity-based heuristic: Consider the remaining capacity for each customer
    demand_normalized_matrix = demands / torch.sum(demands)
    remaining_capacity = 1 - demand_normalized_matrix
    capacity_weighted_distance = remaining_capacity * inv_distance_matrix

    # Combine all heuristics
    combined_heuristic = demand_weighted_distance + distance_weighted_distance + capacity_weighted_distance

    # Penalize infeasible edges clearly
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    # Normalize the heuristic values to ensure they are within a reasonable range
    combined_heuristic = combined_heuristic - combined_heuristic.min()

    return combined_heuristic
```
