```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate inverse distance matrix and normalize by total demand
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Avoid division by zero
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: prioritize edges with higher demand
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Remaining capacity-based heuristic: prioritize edges with higher remaining capacity
    remaining_capacity = 1 - demands
    capacity_weighted_distance = remaining_capacity * inv_distance_matrix

    # Nearest-neighbor heuristic: add the closest node for each customer
    nearest_neighbor = torch.min(distance_matrix, dim=1).values

    # Dynamic weight heuristic: adjust weights based on distance and demand
    dynamic_weight = (1 / (distance_matrix + 1e-8)) * (1 - demands)

    # Domain-specific knowledge heuristic: penalize high demand nodes to avoid overloading vehicles
    high_demand_penalty = 1 / (demands + 1e-8) * demand_weighted_distance

    # Infeasibility prevention heuristic: ensure that no edge leads to an infeasible solution
    infeasibility_prevention = (1 - remaining_capacity) * (1 / (distance_matrix + 1e-8))

    # Combine heuristics with dynamic weights and domain-specific knowledge
    combined_heuristic = (demand_weighted_distance * 0.5 +
                          capacity_weighted_distance * 0.5 +
                          nearest_neighbor * 0.2 +
                          dynamic_weight * 0.2 +
                          high_demand_penalty * 0.1 +
                          infeasibility_prevention * 0.1)

    # Prioritize edges that balance demand, capacity, and distance
    balance_priority = demand_weighted_distance + capacity_weighted_distance

    # Final combined heuristic, incorporating balance and prioritization
    final_heuristic = balance_priority * 0.6 + combined_heuristic * 0.4

    # Ensure that edges with insufficient capacity are penalized
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    final_heuristic[insufficient_capacity_mask] = -torch.inf

    return final_heuristic
```
