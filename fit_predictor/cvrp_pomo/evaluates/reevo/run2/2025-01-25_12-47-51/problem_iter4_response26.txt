```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: Higher demand nodes get a higher priority
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Capacity-based heuristic: Prioritize nodes that can be visited without exceeding capacity
    demand_normalized_matrix = demands / torch.sum(demands)
    remaining_capacity = 1 - demand_normalized_matrix
    capacity_weighted_distance = (remaining_capacity * inv_distance_matrix).T

    # Nearest-neighbor heuristic: Prioritize nodes that are closer to the depot
    nearest_neighbor_distance = distance_matrix[0, 1:]  # Exclude the depot from the search
    nearest_neighbor_weight = -nearest_neighbor_distance

    # Combine the heuristics with a balance between demand, capacity, and distance
    combined_heuristic = demand_weighted_distance + capacity_weighted_distance + nearest_neighbor_weight

    # Penalize edges that would result in a vehicle going over its capacity
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    # Normalize heuristics to ensure positive values are promising
    combined_heuristic = combined_heuristic - combined_heuristic.min()
    combined_heuristic = combined_heuristic / combined_heuristic.max()

    return combined_heuristic
```
