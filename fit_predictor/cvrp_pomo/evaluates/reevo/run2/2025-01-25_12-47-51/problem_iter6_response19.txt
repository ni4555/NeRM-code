```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Demand-based heuristic
    demand_normalized = demands / total_demand
    inv_demand = 1 / (demands + 1e-8)
    demand_heuristic = demand_normalized[:, None] * inv_demand[None, :]

    # Remaining capacity-based heuristic
    remaining_capacity = 1 - demand_normalized
    capacity_weighted_distance = remaining_capacity * (1 / (distance_matrix + 1e-8))

    # Combine heuristics with a weighted sum
    combined_heuristic = demand_heuristic + capacity_weighted_distance

    # Penalize infeasible edges
    redundant_trips_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[redundant_trips_mask] = -torch.inf

    # Scale heuristics to ensure a balance between demand and distance
    combined_heuristic = combined_heuristic * torch.exp(-demands)  # Scaling with demand to balance

    return combined_heuristic
```
