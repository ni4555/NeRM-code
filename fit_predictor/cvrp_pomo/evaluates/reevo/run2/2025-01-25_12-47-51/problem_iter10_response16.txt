```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)

    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: prioritize nodes with higher demand
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Nearest-neighbor heuristic: prioritize nodes that are closer to the depot
    nearest_neighbor_heuristic = normalized_inv_distance_matrix

    # Capacity-based heuristic: consider the remaining capacity of the vehicle
    demand_normalized_matrix = demands / torch.sum(demands)
    remaining_capacity = 1 - demand_normalized_matrix
    capacity_weighted_distance = (remaining_capacity * inv_distance_matrix).T

    # Combine heuristics: demand, nearest-neighbor, and capacity
    combined_heuristic = demand_weighted_distance + nearest_neighbor_heuristic + capacity_weighted_distance

    # Penalize edges that would exceed vehicle capacity
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    # Introduce a balance factor to weigh between demand and capacity
    balance_factor = 0.5
    combined_heuristic = (1 - balance_factor) * combined_heuristic + balance_factor * (demand_weighted_distance + capacity_weighted_distance)

    # Further optimization: balance between local and global optimization
    # Add a local optimization heuristic that penalizes far nodes if they have high demand
    local_optimization_heuristic = -combined_heuristic * (demands / total_demand)
    combined_heuristic += local_optimization_heuristic

    # Normalize the heuristics to ensure they are within a certain range
    min_val, max_val = combined_heuristic.min(), combined_heuristic.max()
    combined_heuristic = (combined_heuristic - min_val) / (max_val - min_val)

    return combined_heuristic
```
