```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate inverse distance matrix and normalize by total demand
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Avoid division by zero
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: prioritize edges with higher demand
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Remaining capacity-based heuristic: prioritize edges with higher remaining capacity
    remaining_capacity = 1 - demands
    capacity_weighted_distance = remaining_capacity * inv_distance_matrix

    # Nearest-neighbor heuristic: add the closest node for each customer
    nearest_neighbor = torch.min(distance_matrix, dim=1).values

    # Greedy heuristic: add the farthest node for each customer
    farthest_neighbor = torch.max(distance_matrix, dim=1).values

    # Local search heuristic: balance demand and capacity by penalizing over-capacity
    over_capacity_mask = demands[:, None] + demands[None, :] > 1
    over_capacity_penalty = torch.where(over_capacity_mask, -torch.inf, 0)

    # Combine heuristics with a balance between demand, capacity, and distance
    combined_heuristic = demand_weighted_distance + capacity_weighted_distance + nearest_neighbor + farthest_neighbor + over_capacity_penalty

    return combined_heuristic
```
