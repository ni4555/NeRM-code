```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Prioritize high demand: Start by assigning the highest demand customer to each vehicle
    sorted_indices = torch.argsort(demands[1:], descending=True)  # Ignore the depot's demand
    for i in range(1, n):
        for j in range(i+1, n):
            if demands[j] > demands[i]:
                demand_swap = demands[j]
                demands[j] = demands[i]
                demands[i] = demand_swap
                break

    # Local search: Improve the solution by moving customers to their nearest neighbor within the capacity constraint
    while True:
        improved = False
        for i in range(1, n):
            for j in range(i+1, n):
                if demands[i] + demands[j] <= 1:
                    if heuristics[i, j] == 0 and heuristics[j, i] == 0:
                        if distance_matrix[i, j] < distance_matrix[i, torch.argmin(distance_matrix[i, 1:])] + distance_matrix[j, torch.argmin(distance_matrix[j, 1:])):
                            heuristics[i, j] = distance_matrix[i, j]
                            improved = True
        if not improved:
            break

    # Combine multiple heuristics: Use both greedy and nearest neighbor approaches
    for i in range(1, n):
        remaining_capacity = 1 - demands[i]
        if remaining_capacity > 0:
            closest_node = torch.argmin(distance_matrix[i, 1:])
            if demands[closest_node] <= remaining_capacity:
                heuristics[i, closest_node] = distance_matrix[i, closest_node]

    return heuristics
```
