```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the total demand
    total_demand = torch.sum(demands)

    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero

    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: weigh by demand-to-capacity ratio and inverse distance
    demand_based_heuristic = normalized_inv_distance_matrix * demands

    # Capacity-based heuristic: weigh by remaining capacity and inverse distance
    remaining_capacity = 1 - demands
    capacity_based_heuristic = (remaining_capacity * inv_distance_matrix).T

    # Combine both heuristics
    combined_heuristic = demand_based_heuristic + capacity_based_heuristic

    # Early capacity constraint: if a node's demand is over the capacity, it's a poor candidate
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    # Nearest-neighbor strategy: prioritize closer nodes, refining the heuristic matrix
    visited = torch.zeros(n, dtype=torch.bool)
    visited[0] = True
    priority_queue = torch.full((n,), float('-inf'))
    priority_queue[0] = combined_heuristic[0, 0]
    result = torch.zeros_like(combined_heuristic)

    while torch.any(~visited):
        nearest_idx = torch.argmax(priority_queue)
        priority_queue[nearest_idx] = float('-inf')
        visited[nearest_idx] = True
        result[nearest_idx, nearest_idx] = combined_heuristic[nearest_idx, nearest_idx]
        for j in range(n):
            if not visited[j]:
                result[nearest_idx, j] = torch.max(result[nearest_idx, j], combined_heuristic[nearest_idx, j])
                result[j, nearest_idx] = torch.max(result[j, nearest_idx], combined_heuristic[j, nearest_idx])
                priority_queue[j] = torch.max(priority_queue[j], combined_heuristic[nearest_idx, j])

    return result
```
