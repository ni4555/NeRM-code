```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Normalize distance matrix
    normalized_distance_matrix = distance_matrix / torch.max(distance_matrix, dim=1).values[:, None]

    # Normalize demand vector
    normalized_demand = demands / total_demand

    # Calculate inverse demand
    inv_demand = 1 / (demands + 1e-8)  # Avoid division by zero

    # Demand-based heuristic
    demand_heuristic = normalized_demand[:, None] * inv_demand[None, :]

    # Remaining capacity-based heuristic
    remaining_capacity = 1 - demands
    remaining_capacity_heuristic = remaining_capacity[:, None] * inv_demand[None, :]

    # Distance-based heuristic
    distance_heuristic = normalized_distance_matrix

    # Combine heuristics with a weighted sum
    combined_heuristic = demand_heuristic + remaining_capacity_heuristic + distance_heuristic

    # Penalize infeasible edges
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    # Scale heuristics to ensure a balance between demand and distance
    scaled_heuristic = combined_heuristic * torch.exp(-demands)  # Scaling with demand to balance

    return scaled_heuristic
```
