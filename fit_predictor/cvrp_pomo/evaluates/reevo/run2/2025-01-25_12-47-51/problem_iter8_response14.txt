```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    normalized_demands = demands / total_demand
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)
    heuristic_matrix = -normalized_demands * inv_distance_matrix
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    # Penalize infeasible edges
    infeasible_edges = demands[:, None] + demands[None, :] > 1
    heuristic_matrix[infeasible_edges] = -torch.inf
    
    # Normalize heuristics by scaling to ensure all values are in a manageable range
    min_value = heuristic_matrix.min()
    max_value = heuristic_matrix.max()
    heuristic_matrix = (heuristic_matrix - min_value) / (max_value - min_value)
    
    return heuristic_matrix
```
