```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate normalized inverse distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Avoid division by zero

    # Normalize by total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: prioritize edges with higher demand
    demand_normalized = demands / total_demand
    demand_weighted_distance = normalized_inv_distance_matrix * demand_normalized

    # Remaining capacity-based heuristic: prioritize edges with higher remaining capacity
    remaining_capacity = 1 - demands
    capacity_weighted_distance = remaining_capacity * inv_distance_matrix

    # Nearest-neighbor heuristic: add the closest node for each customer
    nearest_neighbor = torch.min(distance_matrix, dim=1).values

    # Infeasibility penalty: apply a strong penalty for edges that exceed the capacity
    infeasibility_penalty = torch.full_like(distance_matrix, fill_value=-torch.inf)
    feasible_edges_mask = demands[:, None] + demands[None, :] <= 1
    infeasibility_penalty[feasible_edges_mask] = demand_weighted_distance + capacity_weighted_distance + nearest_neighbor

    return infeasibility_penalty
```
