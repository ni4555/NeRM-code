```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    heuristics = torch.zeros_like(distance_matrix)

    # Inverse of distance matrix with small constant to avoid division by zero
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)

    # Demand-based heuristic: Higher demand means more negative value, encouraging prioritization
    demand_normalized = demands / total_demand
    demand_weighted_distance = -demand_normalized * inv_distance_matrix

    # Distance-based heuristic: Lower distance means more positive value, encouraging inclusion
    distance_weighted_distance = demand_normalized * inv_distance_matrix

    # Capacity-based heuristic: Consider the remaining capacity for each customer
    demand_normalized_matrix = demands / torch.sum(demands)
    remaining_capacity = 1 - demand_normalized_matrix
    capacity_weighted_distance = remaining_capacity * inv_distance_matrix

    # Combine all heuristics with appropriate weighting
    combined_heuristic = 0.6 * demand_weighted_distance + 0.2 * distance_weighted_distance + 0.2 * capacity_weighted_distance

    # Penalize infeasible edges clearly
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    # Normalize the heuristic values to ensure they are within a reasonable range
    heuristic_min = combined_heuristic.min()
    combined_heuristic = combined_heuristic - heuristic_min

    # Apply a scaling factor to normalize the heuristics
    scaling_factor = 1 / (combined_heuristic.max() + 1e-8)
    combined_heuristic = combined_heuristic * scaling_factor

    return combined_heuristic
```
