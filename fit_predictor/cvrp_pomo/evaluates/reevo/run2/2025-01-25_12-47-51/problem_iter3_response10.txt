```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the total demand
    total_demand = torch.sum(demands)

    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero

    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: prioritize edges with higher demand-to-distance ratio
    demand_to_distance_ratio = demands / inv_distance_matrix
    demand_based_heuristic = demand_to_distance_ratio / total_demand

    # Capacity-based heuristic: prioritize edges that do not exceed vehicle capacity
    # Create a matrix where each row is a customer's demand normalized by the vehicle capacity
    demand_normalized_matrix = demands / torch.sum(demands)
    # Calculate the remaining capacity for each customer after considering its own demand
    remaining_capacity = 1 - demand_normalized_matrix
    # Calculate the weighted sum of distances considering the remaining capacity
    capacity_based_heuristic = (remaining_capacity * inv_distance_matrix).T

    # Nearest-neighbor heuristic: prioritize edges with shortest distance
    nearest_neighbor_heuristic = normalized_inv_distance_matrix

    # Combine heuristics using weighted sum
    alpha = 0.5  # Balance parameter for blending heuristics
    combined_heuristic = alpha * demand_based_heuristic + (1 - alpha) * (capacity_based_heuristic + nearest_neighbor_heuristic)

    # Ensure that edges with insufficient capacity are penalized
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    return combined_heuristic
```
