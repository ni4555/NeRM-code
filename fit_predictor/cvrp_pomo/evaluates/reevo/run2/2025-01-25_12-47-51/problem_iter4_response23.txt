```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the total demand
    total_demand = torch.sum(demands)

    # Normalize the demands by the total demand
    normalized_demands = demands / total_demand

    # Calculate the inverse of distance matrix
    inv_distance_matrix = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero

    # Normalize the inverse distance matrix by the total demand
    normalized_inv_distance_matrix = inv_distance_matrix / total_demand

    # Demand-based heuristic: weight the edges by the inverse of the distance multiplied by the normalized demand
    demand_weighted_distance = normalized_inv_distance_matrix * normalized_demands

    # Capacity-based heuristic: weight the edges by the inverse of the distance multiplied by the remaining capacity
    remaining_capacity = 1 - normalized_demands
    capacity_weighted_distance = (remaining_capacity * inv_distance_matrix).T

    # Combine both heuristics with a preference for lower demand and capacity
    combined_heuristic = demand_weighted_distance + capacity_weighted_distance

    # Nearest-neighbor heuristic: favor short paths by penalizing longer ones
    nearest_neighbor_heuristic = -torch.min(distance_matrix[:, 1:], dim=1)[0]

    # Adjust the combined heuristic with the nearest-neighbor heuristic
    combined_heuristic += nearest_neighbor_heuristic

    # Apply a penalty to edges that would exceed vehicle capacity
    insufficient_capacity_mask = demands[:, None] + demands[None, :] > 1
    combined_heuristic[insufficient_capacity_mask] = -torch.inf

    return combined_heuristic
```
