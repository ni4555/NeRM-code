```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)

    # Greedy heuristic: start with the depot and add customers with the least demand first
    sorted_indices = torch.argsort(demands[1:])  # Ignore the depot's demand
    for i in sorted_indices:
        current_position = 0
        while True:
            min_distance = torch.min(distance_matrix[current_position, 1:])
            next_position = torch.argmin(distance_matrix[current_position, 1:])
            if demands[next_position] + demands[current_position] <= 1:
                heuristics[current_position, next_position] = min_distance
                break
            current_position = next_position

    # Nearest neighbor heuristic: for each customer, add the closest node that can be reached without exceeding capacity
    for i in range(1, n):
        remaining_capacity = 1 - demands[i]
        if remaining_capacity > 0:
            closest_node = torch.argmin(distance_matrix[i, 1:])
            if demands[closest_node] <= remaining_capacity:
                heuristics[i, closest_node] = distance_matrix[i, closest_node]

    # Local search to refine the solution: swap customers between vehicles
    for _ in range(10):  # Number of iterations for the local search
        for i in range(1, n):
            for j in range(1, n):
                if heuristics[i, j] > 0:
                    new_demand_sum_i = demands[i] + demands[j]
                    new_demand_sum_j = demands[i] + demands[j]
                    if new_demand_sum_i <= 1 and new_demand_sum_j <= 1:
                        temp = heuristics[i, j]
                        heuristics[i, j] = 0
                        heuristics[j, i] = 0
                        heuristics[i, i] += temp
                        heuristics[j, j] += temp
                        break  # Break inner loop as we only want to swap with one neighbor

    return heuristics
```
