```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Scale demands to the range [0, 1] using the inverse demand ratio
    scaled_demands = 1 / (1 + demands)
    # Scale distances based on the maximum distance to normalize
    scaled_distances = distance_matrix / distance_matrix.max()
    # Combine the scaled distances and scaled demands using a non-linear interaction
    # using a logistic function to ensure the output is between 0 and 1
    combined_heuristic = torch.sigmoid(scaled_distances * scaled_demands)
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
