```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Calculate the cumulative sum of demands
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Use the ratio of the cumulative demand to total demand as a heuristic
    cumulative_demand_ratio = cumulative_demand / total_demand
    # Subtract the cumulative demand ratio from the normalized distance matrix
    # to create a heuristic that penalizes longer distances
    combined_heuristic = normalized_distance_matrix - cumulative_demand_ratio
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
