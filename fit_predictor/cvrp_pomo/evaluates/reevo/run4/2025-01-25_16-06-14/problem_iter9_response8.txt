```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Integrate symmetry by considering both directions of the edge
    symmetrical_distance_matrix = (normalized_distance_matrix + normalized_distance_matrix.t()) / 2
    # Balance demand and distance significance by using a weighted sum
    # Weighting the distance with a factor that reflects the importance of demand
    demand_weight = 0.5  # This can be adjusted based on the problem specifics
    combined_heuristic = demand_weight * scaled_demands - (1 - demand_weight) * symmetrical_distance_matrix
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
