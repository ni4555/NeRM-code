```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    scaled_distance_matrix = distance_matrix / total_demand
    scaled_demands = demands / demands.max()
    # Use a logarithmic transformation for distances to emphasize shorter distances
    log_distance_weight = torch.log1p(-scaled_distance_matrix)
    # Use a square root transformation for demands to emphasize lower demands
    sqrt_demand_weight = torch.sqrt(scaled_demands)
    # Combine both weights with a balanced factor to create the heuristic
    combined_heuristic = log_distance_weight - sqrt_demand_weight
    # Normalize to the range [-1, 1] for edge-specific factors
    combined_heuristic = (combined_heuristic - combined_heuristic.min()) / (combined_heuristic.max() - combined_heuristic.min())
    return combined_heuristic
```
