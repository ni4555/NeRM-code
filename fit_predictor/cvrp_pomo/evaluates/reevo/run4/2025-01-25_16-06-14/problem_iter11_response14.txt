```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Use the arctan function for a non-linear transformation that maps values to a range of (-дл/2, дл/2)
    non_linear_distance = torch.atan(normalized_distance_matrix)
    # Combine the non-linear transformed distance with the scaled demands
    # Adjust the demand term to have a higher weight by scaling it up
    combined_heuristic = non_linear_distance - scaled_demands * 10
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
