```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Normalize the scaled demands by the sum of all scaled demands to exploit symmetry
    normalized_scaled_demands = scaled_demands / scaled_demands.sum()
    # Apply a non-linear transformation to both the normalized distances and normalized scaled demands
    non_linear_distance = torch.exp(-2 * normalized_distance_matrix)  # Exponential decay to emphasize shorter distances
    non_linear_demand = torch.sin(torch.pi * (2 * normalized_scaled_demands - 1))  # Sigmoid-like function for demand
    # Combine the non-linear transformations by subtracting the demand term from the distance term
    combined_heuristic = non_linear_distance - non_linear_demand
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
