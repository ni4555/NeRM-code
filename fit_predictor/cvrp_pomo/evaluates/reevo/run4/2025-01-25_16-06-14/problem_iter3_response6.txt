```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Calculate the cumulative sum of demands from the depot
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)
    # Use a non-linear transformation on the normalized distances and cumulative demands
    # to enhance the gradient-based search and account for different magnitudes
    non_linear_distance = torch.pow(normalized_distance_matrix, 2)
    non_linear_demand = torch.log(1 + cumulative_demand)
    # Combine the non-linear transformations and subtract to create a heuristic
    combined_heuristic = non_linear_distance - non_linear_demand
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
