```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand sum
    total_demand = demands.sum()
    
    # Calculate the sum of distances from the depot to each node
    depot_distances = distance_matrix[0, 1:]
    
    # Calculate the potential profit for each node (demand divided by distance)
    potential_profit = demands[1:] / depot_distances
    
    # Normalize potential profit by total demand to indicate promise
    normalized_profit = potential_profit / total_demand
    
    # Apply a penalty for larger distances
    penalty = -0.1 * (distance_matrix[0, 1:] - depot_distances.min())
    
    # Combine normalized profit and penalty to get the heuristics matrix
    heuristics_matrix = normalized_profit + penalty
    heuristics_matrix[0, :] = 0  # Depot edge to any node should have 0 heuristic value
    
    return heuristics_matrix
```
