```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    # Normalize distance matrix by total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands relative to maximum demand
    scaled_demands = demands / demands.max()
    # Calculate exponential decay for distances and hyperbolic tangent for demands
    exp_decay_distance = torch.exp(-normalized_distance_matrix)
    tanh_demand = torch.tanh(scaled_demands)
    # Combine the transformations with a weighted difference
    combined_heuristic = exp_decay_distance - tanh_demand * 2.0
    # Invert the sign to prioritize edge selection
    return -combined_heuristic
```
