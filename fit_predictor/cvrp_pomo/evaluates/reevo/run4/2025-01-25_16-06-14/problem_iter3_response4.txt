```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Subtract the demand from the normalized distances to penalize edges
    # based on the remaining capacity of the vehicle
    combined_heuristic = normalized_distance_matrix - demands
    # Use a threshold to convert the heuristic values to binary indicators
    # This threshold can be adjusted based on the problem scale
    threshold = 0.1
    binary_heuristic = torch.sign(combined_heuristic) * (torch.abs(combined_heuristic) > threshold)
    # Convert binary heuristic to a range of values (-1 to 1)
    scaled_binary_heuristic = 2 * binary_heuristic - 1
    return scaled_binary_heuristic
```
