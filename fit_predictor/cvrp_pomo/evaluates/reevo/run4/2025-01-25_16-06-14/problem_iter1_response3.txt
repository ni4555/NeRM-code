```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand for each vehicle to prevent exceeding capacity
    vehicle_capacity = demands.sum() / len(demands)
    total_demand = demands.cumsum()
    
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Iterate over each node as a potential starting point
    for i in range(len(demands)):
        # Iterate over all possible destinations
        for j in range(1, len(demands)):
            # If adding this customer does not exceed the vehicle's capacity
            if (total_demand[j] - demands[j]) <= vehicle_capacity:
                # Calculate the potential profit of visiting this edge
                potential_profit = distance_matrix[i, j] - demands[j]
                # If the edge does not exist in the matrix (e.g., between same nodes)
                if potential_profit < 0:
                    potential_profit = 0
                # Add the potential profit to the heuristics matrix
                heuristics[i, j] = potential_profit
                heuristics[j, i] = potential_profit
    
    return heuristics
```
