```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An improved heuristic that assigns scores based on customer demand and distance to the depot."""
    n = distance_matrix.shape[0]
    depot_index = 0
    demand_threshold = 0.1  # This threshold can be adjusted to prioritize demand over distance
    distance_threshold = 0.5  # This threshold can be adjusted to prioritize distance over demand

    # Calculate the total demand of all nodes except the depot
    total_demand = demands[1:]
    # Calculate the distance from each node to the depot
    distances_to_depot = distance_matrix[:, depot_index]
    
    # Score based on demand and distance
    scores = -torch.abs(demands) * torch.where(demands < demand_threshold, torch.ones_like(demands), torch.zeros_like(demands)) \
           + distances_to_depot * torch.where(distances_to_depot < distance_threshold, torch.ones_like(distances_to_depot), torch.zeros_like(distances_to_depot))
    
    # Return the scores matrix
    return scores
```
