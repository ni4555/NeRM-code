```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Use a linear combination of the normalized distances and scaled demands
    # with a weight for the distance to emphasize the cost of traveling
    weight_distance = 0.5
    weight_demand = 0.5
    combined_heuristic = weight_distance * normalized_distance_matrix - weight_demand * scaled_demands
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
