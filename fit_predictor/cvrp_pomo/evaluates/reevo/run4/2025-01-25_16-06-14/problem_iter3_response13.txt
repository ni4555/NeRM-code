```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Use a linear combination of the scaled demands and the normalized distances
    # to create a heuristic that balances demand and distance
    combined_heuristic = scaled_demands * normalized_distance_matrix
    # Apply a non-linear transformation to enhance the gradient-based search
    combined_heuristic = torch.exp(-torch.pow(combined_heuristic, 2))
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
