```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Balance demand and distance using a weighted sum with an inverse square root of demand
    # to increase the importance of nodes with lower demand
    weighted_distance = normalized_distance_matrix * torch.sqrt(1 / (scaled_demands + 1e-6))
    # Invert the sign to get negative values for undesirable edges
    return -weighted_distance
```
