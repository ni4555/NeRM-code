```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Integrate symmetry by considering the absolute difference between demands to avoid redundant calculations
    symmetrical_demand = torch.abs(demands - scaled_demands)
    # Combine the symmetry with the scaled demand to balance demand and distance significance
    balanced_demand = scaled_demands + symmetrical_demand
    # Use a non-linear transformation to enhance the gradient-based search
    non_linear_demand = torch.clamp(balanced_demand, min=0.1) * (2 * torch.sin(torch.acos(balanced_demand)))  # Sigmoid-like function
    # Combine the non-linear transformations with the normalized distance matrix
    combined_heuristic = normalized_distance_matrix - non_linear_demand
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
