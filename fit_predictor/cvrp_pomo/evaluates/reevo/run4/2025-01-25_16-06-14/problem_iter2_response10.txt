```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Add a small positive value to non-zero edges to prevent division by zero
    positive_matrix = torch.clamp(normalized_distance_matrix, min=1e-10)
    # Compute the difference between original and positive matrix to get promising edges
    promising_matrix = positive_matrix - normalized_distance_matrix
    # Ensure negative values are returned for undesirable edges
    undesirable_matrix = torch.clamp(promising_matrix, min=0.0)
    return undesirable_matrix
```
