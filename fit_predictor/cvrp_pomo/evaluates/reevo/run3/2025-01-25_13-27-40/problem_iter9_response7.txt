```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply an exponential decay to the distance matrix to weight the edges
    decayed_distances = torch.exp(-distance_matrix * 0.1)
    # Apply a logarithmic scale to distances to reduce the impact of larger distances
    log_distances = torch.log(decayed_distances + 1)
    # Scale the demand to provide a penalty for higher demands, but not exceeding the distance potential
    scaled_demand = demands * (1 / (1 + demands))
    # Integrate the scaled demand penalty into the heuristic
    demand_penalty = scaled_demand * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Normalize the heuristics to the range [0, 1] using a sigmoid function for consistency
    sigmoid_scaled = torch.sigmoid(log_distances - demand_penalty)
    # Adjust the heuristics to ensure that all values are within the desired range
    max_val = torch.max(sigmoid_scaled)
    heuristics = sigmoid_scaled / max_val
    # Clamp the heuristics to ensure values are within the range [0, 1]
    heuristics = torch.clamp(heuristics, min=0, max=1)
    return heuristics
```
