```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Calculate the total distance from the depot to each node
    total_distance = distance_matrix.sum(dim=1)
    # Calculate the total demand to normalize the penalties
    total_demand = demands.sum()
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Calculate the potential of each edge based on the capacity of the vehicle
    potential = torch.exp(-distance_matrix * 0.1) * capacity_mask
    # Normalize the penalties based on the total demand
    high_demand_penalty = demands / total_demand
    # Normalize the distance penalty based on the total distance
    distance_penalty = distance_matrix / total_distance
    # Combine potential and penalties to create the heuristic values
    heuristics = potential - high_demand_penalty - distance_penalty
    # Set the heuristic for the depot to the first node to zero
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0
    # Ensure that heuristic values are non-negative
    heuristics = torch.max(heuristics, torch.zeros_like(heuristics))
    return heuristics
```
