```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply a logarithmic transformation to the distance matrix to emphasize closer edges
    log_distances = torch.log(distance_matrix + 1e-8)  # Adding a small value to avoid log(0)
    # Apply a non-linear scaling factor to the log of distances
    scaled_log_distances = log_distances * (1 - (cum_demands / demands[0]))
    # Apply a demand-aware penalty using a demand-based factor
    demand_factor = 1 / (demands + 1e-8)  # Adding a small value to avoid division by zero
    penalty = torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands)) * demand_factor
    # Combine the scaled log distances and the penalty to create the heuristic values
    heuristics = scaled_log_distances - penalty
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    return heuristics
```
