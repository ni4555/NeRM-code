```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    
    # Calculate the potential of each edge based on the capacity of the vehicle
    potential = torch.exp(-distance_matrix * 0.1) * capacity_mask
    
    # Define a single penalty term based on distance and demand
    penalty = (distance_matrix ** 2 * 0.001) + (demands / (demands[0] + 1e-5) ** 2 * 0.001)
    
    # Apply the penalty only when the vehicle is under capacity
    penalty *= ~capacity_mask
    
    # Combine potential and penalty to create the heuristic values
    heuristics = potential - penalty
    
    # The heuristic for the depot to the first node is set to zero since it's the starting point
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0
    
    return heuristics
```
