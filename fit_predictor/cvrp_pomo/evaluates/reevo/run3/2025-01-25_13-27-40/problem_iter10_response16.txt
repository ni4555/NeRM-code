```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply an exponential decay to the distance matrix to weight the edges
    decayed_distances = torch.exp(-distance_matrix * 0.15)
    # Apply a logarithmic scaling to the distances to give more weight to closer nodes
    distance_scaling = torch.log(decayed_distances + 1)
    # Apply a non-linear scaling to the demand to penalize highly demanded nodes
    demand_penalty = torch.pow(demands, 2.0)
    # Apply the demand penalty only if the vehicle is under capacity
    demand_penalty *= torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Combine the scaling factors to create the heuristic values
    heuristics = distance_scaling - demand_penalty
    # Normalize the heuristics to the range [0, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=0, max=1)
    return heuristics
```
