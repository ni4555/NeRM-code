```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    cum_demands = torch.cumsum(demands, dim=0)
    capacity_mask = cum_demands < demands[0]

    # Non-linear scaling of distances using the cube root to give higher weights to shorter distances
    scaled_distances = distance_matrix ** (1 / 3)

    # High-demand penalty that decreases with capacity utilization, using a logarithmic transformation
    high_demand_penalty = torch.log1p((demands / demands[0]) ** 2)
    high_demand_penalty = torch.where(capacity_mask, high_demand_penalty, torch.zeros_like(high_demand_penalty))

    # Potential based on scaled distances, penalized by high demand
    potential = scaled_distances - high_demand_penalty

    # Over-capacity penalty, which is the difference between the cumulative demand and the vehicle capacity
    over_capacity_penalty = torch.where(capacity_mask, torch.zeros_like(distance_matrix), cum_demands - demands[0])

    # Combine the potential and over-capacity penalty to create the heuristic values
    heuristics = potential - over_capacity_penalty

    # Normalize the heuristics to ensure all values are within the range [-1, 1]
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    heuristics = torch.clamp(heuristics, min=-1, max=1)

    # Ensure the depot to itself has a heuristic of 0
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0

    return heuristics
```
