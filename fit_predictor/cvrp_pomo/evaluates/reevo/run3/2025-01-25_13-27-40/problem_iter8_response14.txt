```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply non-linear demand scaling using 1.5th power
    non_linear_demand = demands ** 1.5
    # Apply exponential decay to the distance matrix with a decay factor of 0.1
    decayed_distances = torch.exp(-distance_matrix * 0.1)
    # Compute the potential function which is the inverse of the sum of distances
    # Adding 1 to avoid division by zero
    distance_potential = decayed_distances / (decayed_distances + 1)
    # Apply a demand-aware penalty to edges leading to nodes with high demand
    demand_penalty = non_linear_demand * capacity_mask.float()
    # Combine the potential, distance potential, and demand penalty to create the heuristic values
    heuristics = distance_potential - demand_penalty
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    return heuristics
```
