```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply a non-linear scaling to the distance matrix
    scaled_distances = distance_matrix ** (0.5)
    # Apply a penalty to edges leading to nodes with high demand
    high_demand_penalty = (1 - capacity_mask) * demands
    # Combine the scaled distances, high demand penalty, and capacity mask to create the heuristic values
    heuristics = scaled_distances - high_demand_penalty
    # Normalize the heuristics to the range [0, 1] to maintain consistency
    max_val = torch.max(heuristics)
    heuristics /= max_val
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=0, max=1)
    return heuristics
```
