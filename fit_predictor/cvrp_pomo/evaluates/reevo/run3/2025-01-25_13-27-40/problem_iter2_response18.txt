```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply a penalty for edges leading to nodes with cumulative demand over capacity
    penalty = (cum_demands >= demands[0]) * -torch.inf
    # Calculate the potential of each edge based on the capacity of the vehicle
    potential = torch.exp(-distance_matrix * 0.1) * capacity_mask
    # Combine potential, penalty, and exponential decay for distance to create the heuristic values
    heuristics = potential - penalty
    return heuristics
```
