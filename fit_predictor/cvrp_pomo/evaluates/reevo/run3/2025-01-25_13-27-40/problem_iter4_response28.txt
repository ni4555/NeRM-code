```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Calculate the potential of each edge based on the capacity of the vehicle
    potential = torch.exp(-distance_matrix * 0.1) * capacity_mask
    # Define a non-linear function to penalize based on the distance
    distance_penalty = torch.relu(distance_matrix ** 2 * 0.001)
    # Define a non-linear function to penalize based on the demand
    demand_penalty = torch.relu(demands / (demands[0] + 1e-5) ** 2 * 0.001)
    # Combine potential, distance penalty, and demand penalty
    heuristics = potential - (distance_penalty + demand_penalty)
    # The heuristic for the depot to the first node is set to zero since it's the starting point
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0
    return heuristics
```
