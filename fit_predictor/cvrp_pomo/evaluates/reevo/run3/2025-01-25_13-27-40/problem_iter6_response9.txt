```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    cum_demands = torch.cumsum(demands, dim=0)
    capacity_mask = cum_demands < demands[0]
    potential = torch.exp(-distance_matrix * 0.1)
    weighted_potential = potential * capacity_mask.float()
    high_demand_penalty = (demands - demands[0]) * torch.clamp((demands - cum_demands) / (demands[0] - demands[1]), 0, 1)
    adjusted_potential = weighted_potential - high_demand_penalty
    # Ensure symmetry in the heuristic function
    adjusted_potential = (adjusted_potential + adjusted_potential.t()) / 2
    return adjusted_potential
```
