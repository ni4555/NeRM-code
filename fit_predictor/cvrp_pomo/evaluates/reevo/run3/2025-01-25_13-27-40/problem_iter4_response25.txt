```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Calculate the potential of each edge based on the capacity of the vehicle
    potential = torch.exp(-distance_matrix * 0.1) * capacity_mask
    # Apply a penalty to edges leading to nodes with high demand
    high_demand_penalty = (demands / cum_demands) * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Combine potential and penalty to create the heuristic values
    heuristics = potential - high_demand_penalty
    # The heuristic for the depot to the first node and the first node to the depot is set to zero
    heuristics[0, 1] = 0
    heuristics[1, 0] = 0
    return heuristics
```
