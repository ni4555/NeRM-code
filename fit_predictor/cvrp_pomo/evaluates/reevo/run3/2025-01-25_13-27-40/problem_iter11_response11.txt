```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply an exponential decay to the distance matrix to weight the edges
    decayed_distances = torch.exp(-distance_matrix * 0.1)
    # Apply a logarithmic scaling to encourage exploration for longer edges
    log_distance_scale = torch.log1p(decayed_distances)
    # Apply a demand-aware penalty with a weight factor to the penalty
    demand_weight = 0.5
    high_demand_penalty = demand_weight * demands * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Combine the logarithmic scaling, distance potential, and high demand penalty to create the heuristic values
    heuristics = log_distance_scale - high_demand_penalty
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    return heuristics
```
