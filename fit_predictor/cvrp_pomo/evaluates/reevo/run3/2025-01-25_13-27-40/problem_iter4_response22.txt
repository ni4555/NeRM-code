```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply a non-linear transformation to the distance matrix to enhance the impact of close nodes
    distance_transformed = torch.pow(distance_matrix, 2)
    # Apply a logarithmic transformation to demands to give more weight to higher demands
    demand_transformed = torch.log1p(demands)
    # Calculate the potential of each edge based on the capacity of the vehicle and the transformed factors
    potential = torch.exp(-distance_transformed * 0.1) * capacity_mask * (distance_transformed + demand_transformed)
    # Apply a penalty to edges leading to nodes with high demand that are not under capacity
    high_demand_penalty = demands * (1 - capacity_mask)
    # Combine potential, penalty, and the transformed factors to create the heuristic values
    heuristics = potential - high_demand_penalty
    return heuristics
```
