```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Apply an exponential decay to the distance matrix to weight the edges
    decayed_distances = torch.exp(-distance_matrix * 0.1)
    # Apply a non-linear scaling to the decayed distances
    non_linear_scale = torch.pow(decayed_distances, 2)
    # Apply a demand-aware penalty that increases with the remaining capacity
    remaining_capacity = demands[0] - cum_demands
    demand_penalty = (1 - remaining_capacity / demands[0]) * demands
    # Combine the non-linear scaled distance potential, demand penalty, and symmetry to create the heuristic values
    heuristics = non_linear_scale - demand_penalty * (1 - torch.eye(len(demands))[capacity_mask].float())
    # Normalize the heuristics to the range [-1, 1] to maintain consistency
    max_val = torch.max(torch.abs(heuristics))
    heuristics /= max_val
    # Adjust the heuristics to ensure that all values are within the desired range
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    return heuristics
```
