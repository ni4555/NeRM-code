```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the start node
    cum_demands = torch.cumsum(demands, dim=0)
    # Create a binary mask where a 1 indicates the vehicle is still under capacity
    capacity_mask = cum_demands < demands[0]
    # Calculate the potential of each edge based on the capacity of the vehicle
    potential = torch.exp(-distance_matrix * 0.1) * capacity_mask
    # Apply a penalty to edges leading to nodes with high demand
    high_demand_penalty = demands * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Introduce a non-linear scaling to the penalty based on the current demand
    non_linear_penalty = torch.pow(demands, 2) * torch.where(capacity_mask, torch.zeros_like(demands), torch.ones_like(demands))
    # Balance the potential reduction by introducing a scaling factor
    balance_factor = torch.exp(-torch.sum(potential) * 0.01)
    # Combine potential and penalties to create the heuristic values
    heuristics = potential - high_demand_penalty - non_linear_penalty * balance_factor
    # Ensure the heuristic matrix is symmetric by mirroring the values
    heuristics = (heuristics + heuristics.t()) / 2
    return heuristics
```
