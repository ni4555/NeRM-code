```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the load-aware penalties for each edge
    load_penalties = node_loads.unsqueeze(0) * node_loads.unsqueeze(1)
    
    # Calculate the heuristics by combining the normalized distance and the load penalties
    heuristics = norm_distances - load_penalties.sum(-1)
    
    # Dynamically adapt the heuristics based on the cumulative demand
    cumulative_demand = demands.cumsum()
    demand_penalty = cumulative_demand / demands.sum()
    heuristics = heuristics - (demand_penalty.unsqueeze(1) * norm_distances).sum(-1)
    
    # Introduce a balance noise for exploration
    noise = torch.randn_like(heuristics) * 0.1  # 0.1 is a small scaling factor for the noise
    
    # Normalize the heuristics to ensure they are within a reasonable range
    heuristics = torch.clamp(heuristics, min=-2.0, max=2.0)
    
    return heuristics
```
