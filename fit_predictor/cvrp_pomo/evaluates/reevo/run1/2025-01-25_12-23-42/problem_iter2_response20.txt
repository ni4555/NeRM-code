```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize the distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Normalize the demands to get the load factor for each customer
    normalized_demands = demands / demands.sum()
    
    # Calculate the cumulative load factor along the path
    cumulative_load_factor = torch.cumsum(normalized_demands, dim=0)
    
    # Calculate the heuristics based on normalized distance and cumulative load factor
    heuristics = norm_distances + cumulative_load_factor
    return heuristics
```
