```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Introduce a balance between exploitation and exploration
    # The balance factor is used to adjust the influence of the load on the heuristic
    balance_factor = 0.8
    heuristics = norm_distances - (balance_factor * node_loads * norm_distances).sum(-1)
    
    # Add noise to the heuristics for exploration, but with an adaptive approach
    # The noise intensity is proportional to the node load, which encourages exploration in underutilized areas
    noise_intensity = torch.abs(node_loads) * 0.05  # 0.05 is a small scaling factor for the noise
    noise = torch.randn_like(heuristics) * noise_intensity
    heuristics += noise
    
    # Normalize the heuristics to maintain dynamic load balancing
    # The normalization is proportional to the sum of the absolute differences from the median
    median_heuristics = torch.median(heuristics, dim=1, keepdim=True)[0]
    abs_diff = torch.abs(heuristics - median_heuristics)
    sum_abs_diff = abs_diff.sum(-1)
    normalized_heuristics = heuristics / (sum_abs_diff + 1e-6)  # Add a small epsilon to avoid division by zero
    
    # Limit the heuristics to ensure they are within a reasonable range
    heuristics = torch.clamp(normalized_heuristics, min=-1.0, max=1.0)
    
    return heuristics
```
