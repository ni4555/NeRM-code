```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the cumulative demand matrix
    cumulative_demand = torch.cumsum(demands[:, None], dim=1)
    
    # Calculate the cumulative distance matrix
    cumulative_distance = torch.cumsum(distance_matrix, dim=1)
    
    # Calculate the nearest customer distances for each node
    nearest_customer_distance = torch.min(distance_matrix, dim=1)[0]
    
    # Calculate the maximum demand in the network
    max_demand = torch.max(demands)
    
    # Create a matrix that represents the potential cost of visiting each edge
    potential_costs = cumulative_distance - cumulative_demand - nearest_customer_distance * max_demand
    
    # Normalize the potential costs by the maximum possible reduction in cost
    max_reduction = torch.max(potential_costs)
    normalized_costs = potential_costs / max_reduction
    
    # Invert the normalized costs to get heuristics (negative values are undesirable)
    heuristics = -normalized_costs
    
    return heuristics
```
