```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands = demands.unsqueeze(1)  # Ensure demands are a 2D tensor for broadcasting
    distance_matrix_squared = distance_matrix ** 2
    min_distance_to_depot = torch.min(distance_matrix, dim=1)[0] ** 2  # Squared distance to nearest customer
    max_demand = torch.max(demands, dim=0)[0]  # Maximum demand in the network
    
    # Calculate a heuristic based on distance to the nearest depot and demand
    heuristic = -distance_matrix_squared + min_distance_to_depot * max_demand
    # Avoid revisits by penalizing edges leading back to the depot
    revisits_penalty = (distance_matrix == 0) * -1e6
    heuristic += revisits_penalty
    # Balance load by penalizing edges leading to a high load
    load_balance_penalty = (demands > 1.0) * -1e6  # Assuming demands are normalized
    heuristic += load_balance_penalty
    return heuristic
```
