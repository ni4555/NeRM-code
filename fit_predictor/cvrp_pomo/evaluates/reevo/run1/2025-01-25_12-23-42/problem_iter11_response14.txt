```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    # The load factor is subtracted from the heuristic to discourage visiting heavily loaded nodes
    heuristics = norm_distances - (node_loads * norm_distances).sum(-1)
    
    # Introduce a dynamic load-aware penalty based on the demand variance
    load_variance = (demands - demands.mean()).pow(2).sum() / demands.size(0)
    dynamic_penalty = load_variance * norm_distances
    
    # Combine the heuristics with the dynamic penalty
    heuristics += dynamic_penalty
    
    # Normalize the heuristics to ensure they are within a reasonable range
    heuristics = torch.clamp(heuristics, min=-2.0, max=2.0)
    
    # Introduce a dynamic exploration factor based on the current iteration or other parameters
    # For example, decreasing the exploration factor over iterations could be beneficial
    # Here, we assume an iterative approach and reduce the exploration factor as iterations progress
    iteration = 0  # Placeholder for the current iteration, should be provided when calling the function
    exploration_factor = 0.1 / (iteration + 1)  # Example of a decreasing exploration factor
    
    # Generate noise with a decreasing standard deviation over iterations
    noise = torch.randn_like(heuristics) * (0.1 / (iteration + 1))
    
    # Apply the noise and exploration factor to the heuristics
    heuristics = heuristics + exploration_factor * noise
    
    return heuristics
```
