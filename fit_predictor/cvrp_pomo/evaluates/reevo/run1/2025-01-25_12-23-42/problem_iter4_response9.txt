```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Create a mask where each cell is True if the cumulative demand at that node exceeds the total demand
    demand_exceeds_total = (cumulative_demand > total_demand).bool()
    
    # Initialize the potential with -distance_matrix
    potential = -distance_matrix
    
    # Set potential to 0 for edges where the cumulative demand exceeds total demand
    potential[demand_exceeds_total] = 0
    
    # Normalize the potential to ensure all values are within the range [0, 1]
    max_potential = torch.max(potential[potential != 0])
    if max_potential == 0:
        # Avoid division by zero if there are no edges to consider
        return torch.zeros_like(potential)
    
    return torch.clamp(potential / max_potential, min=0, max=1)
```
