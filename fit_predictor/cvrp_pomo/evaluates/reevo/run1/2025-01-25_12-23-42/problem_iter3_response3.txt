```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic by incorporating load balancing and avoiding revisits."""
    n = len(demands)
    total_demand = demands.sum()
    demand_threshold = total_demand / n
    # Initialize heuristics with a large negative value
    heuristics = -torch.ones_like(distance_matrix)
    # Heuristic values for edges from the depot to all customers
    depot_to_customers = (1 / (1 + distance_matrix)) * (1 - (demands / demand_threshold))
    heuristics[:, 1:] = depot_to_customers
    # Avoid revisits by setting negative values for the diagonal
    heuristics.diag().fill_(float('-inf'))
    # Heuristic values for edges between customers
    for i in range(1, n):
        for j in range(i + 1, n):
            load_at_i = demands[i] - (demands[j] / demands[i]) * demands[i]
            load_at_j = demands[j] - (demands[i] / demands[j]) * demands[j]
            # Adjust heuristic based on load balance and distance
            heuristics[i, j] = heuristics[i, j] * ((load_at_i / load_at_j) - 1) / distance_matrix[i, j]
            heuristics[j, i] = heuristics[j, i] * ((load_at_j / load_at_i) - 1) / distance_matrix[j, i]
    return heuristics
```
