```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    # The load factor is subtracted from the heuristic to discourage visiting heavily loaded nodes
    heuristics = norm_distances - (node_loads * norm_distances).sum(-1)
    
    # Introduce an exploration element by adding a random noise to the heuristics
    # The noise will encourage the algorithm to explore alternative paths
    noise = torch.randn_like(heuristics) * 0.1  # 0.1 is a small scaling factor for the noise
    
    # Instead of directly adding noise, we use a probabilistic approach to balance exploitation and exploration
    # The probability of including a node is based on its heuristic value
    exploration_factor = torch.rand_like(heuristics)
    exploration_factor = (exploration_factor - exploration_factor.mean()) * 2  # Center and scale the noise
    exploration_factor = torch.clamp(exploration_factor, min=-1.0, max=1.0)
    
    # Dynamically adapt the heuristics based on the node loads
    # Heavily loaded nodes receive a larger penalty to encourage the algorithm to visit them less often
    load_penalty = node_loads * (norm_distances * node_loads).sum(-1)
    heuristics = heuristics - load_penalty
    
    # Normalize the heuristics to ensure they are within a reasonable range
    heuristics = torch.clamp(heuristics, min=-2.0, max=2.0)
    
    return heuristics
```
