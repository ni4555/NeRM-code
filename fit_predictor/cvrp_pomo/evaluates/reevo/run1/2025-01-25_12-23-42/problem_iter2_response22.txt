```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An improved heuristic function for the CVRP problem that considers both local and global properties."""
    n = distance_matrix.shape[0]
    demands = demands.unsqueeze(1)  # Ensure demands is a 2D tensor for broadcasting
    distance_matrix_squared = distance_matrix ** 2
    min_distance = torch.min(distance_matrix, dim=1)[0] ** 2  # Squared distance to nearest customer
    max_demand = torch.max(demands, dim=0)[0]  # Maximum demand in the network
    
    # Calculate the cumulative sum of demands
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate a heuristic that considers both distance and demand
    heuristic = -distance_matrix_squared + min_distance * max_demand - (cumulative_demand > demands.unsqueeze(0)).float() * distance_matrix
    
    # Normalize the heuristic to ensure all values are within the range [0, 1]
    heuristic = torch.clamp(heuristic, min=0, max=1)
    
    return heuristic
```
