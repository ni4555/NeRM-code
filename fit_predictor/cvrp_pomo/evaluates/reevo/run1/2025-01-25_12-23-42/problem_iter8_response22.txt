```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_threshold = total_demand / n

    # Calculate factors
    distance_factor = 1 / (1 + distance_matrix)
    demand_factor = (demands / demand_threshold).abs()
    revisit_penalty = demands * (demands > 0).type(torch.float32)
    balance_load_factor = (torch.abs(demands - demand_threshold / 2) / (demand_threshold / 2)).pow(2)
    global_balance_factor = demands / demand_threshold

    # Combine factors to create heuristics
    heuristics = distance_factor * demand_factor * revisit_penalty * balance_load_factor * global_balance_factor
    return heuristics
```
