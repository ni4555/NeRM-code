```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic considering demand, distance, capacity, avoiding revisits, and balancing load."""
    total_demand = demands.sum()
    demand_threshold = total_demand / (len(demands) - 1)  # Adjust for the depot not being included in demand count
    capacity = 1.0  # Assuming the total vehicle capacity is 1 for normalization

    # Avoid revisiting the same node by creating a mask of valid edges
    valid_edges = torch.triu(torch.ones_like(distance_matrix), diagonal=1) + torch.tril(torch.ones_like(distance_matrix), diagonal=-1)

    # Normalize demands by capacity
    normalized_demands = demands / capacity

    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the heuristic for each edge
    for i in range(1, len(demands)):
        for j in range(i + 1, len(demands) + 1):
            if valid_edges[i, j]:
                heuristics[i, j] = (1 / (1 + distance_matrix[i, j])) * (1 - (normalized_demands[j] / demand_threshold))

    # Avoid revisiting by setting diagonal to negative infinity
    torch.fill_diagonal_(heuristics, float('-inf'))

    # Avoid exceeding capacity by setting demand exceedance edges to negative infinity
    for i in range(len(demands)):
        if demands[i] > capacity:
            heuristics[i] = float('-inf')

    return heuristics
```
