```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Calculate the potential heuristics for each edge
    potential = -distance_matrix * (cumulative_demand > total_demand).float()
    # Subtract the distance for edges with non-zero potential to ensure the vehicle doesn't revisit
    potential += distance_matrix * (cumulative_demand > total_demand).float()
    # Normalize the potential heuristics to ensure all values are within the range [0, 1]
    potential = torch.clamp(potential, min=0, max=1)
    # Convert the potential heuristics to negative values to make desirable edges more negative
    heuristics = -potential
    return heuristics
```
