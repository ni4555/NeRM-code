```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    # The load factor is subtracted from the heuristic to discourage visiting heavily loaded nodes
    heuristics = norm_distances - (node_loads * norm_distances).sum(-1)
    
    # Introduce noise for exploration, ensuring it's adaptive to node loads
    noise = torch.randn_like(heuristics) * 0.1  # Small scaling factor for the noise
    noise *= (1 + node_loads)  # Adjust noise based on node loads
    
    # Apply the noise to the heuristics
    heuristics += noise
    
    # Normalize the heuristics to ensure dynamic load balancing
    heuristics /= heuristics.max()
    
    # Limit the heuristics to ensure they are within a reasonable range
    heuristics = torch.clamp(heuristics, min=-1.0, max=1.0)
    
    return heuristics
```
