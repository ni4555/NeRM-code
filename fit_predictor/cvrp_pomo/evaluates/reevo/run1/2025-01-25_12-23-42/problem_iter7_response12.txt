```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    # We now introduce a dynamic load factor that increases with the load to encourage visiting lightly loaded nodes
    dynamic_load_factor = (1 - (node_loads * norm_distances).sum(-1)) * norm_distances
    
    # Introduce an exploration element by adding a random noise to the heuristics
    # The noise will encourage the algorithm to explore alternative paths
    noise = torch.randn_like(dynamic_load_factor) * 0.1  # 0.1 is a small scaling factor for the noise
    
    # Combine the dynamic load factor with the noise
    combined_load_factor = dynamic_load_factor + noise
    
    # Limit the heuristics to ensure they are within a reasonable range
    heuristics = torch.clamp(combined_load_factor, min=-2.0, max=2.0)
    
    return heuristics
```
