```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Create a mask where each cell is True if the cumulative demand at that node exceeds the total demand
    demand_exceeds_total = cumulative_demand > total_demand
    
    # Calculate the potential heuristics for each edge
    potential = -distance_matrix
    potential[demand_exceeds_total] = 0  # Set to zero the potential of edges where demand exceeds total demand
    
    # Normalize the potential to ensure all values are within the range [0, 1]
    potential = torch.clamp(potential, min=0, max=1)
    
    return potential
```
