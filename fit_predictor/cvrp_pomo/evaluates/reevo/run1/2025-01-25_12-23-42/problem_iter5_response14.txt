```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    # The load factor is subtracted from the heuristic to discourage visiting heavily loaded nodes
    # In addition, add a term that penalizes edges with high difference in demand
    heuristics = norm_distances - (node_loads * norm_distances).sum(-1) + \
                 torch.abs(demands.unsqueeze(1) - demands.unsqueeze(0)).sum(-1) * 0.1
    return heuristics
```
