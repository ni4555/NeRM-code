```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    
    # Initialize the heuristics matrix with zeros
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the cumulative demand
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the potential heuristics for each edge
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Check if the cumulative demand after visiting customer j is within the vehicle capacity
                if cumulative_demand[j] <= total_demand:
                    # Calculate the heuristics value as the negative distance (undesirable edges)
                    heuristics_matrix[i, j] = -distance_matrix[i, j]
    
    return heuristics_matrix
```
