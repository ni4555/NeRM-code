```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic incorporating demand, distance, normalization, and revisiting avoidance."""
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_threshold = total_demand / n
    
    # Normalize distance and demand
    normalized_distance = distance_matrix / distance_matrix.sum()
    normalized_demand = demands / demand_threshold
    
    # Initialize heuristics matrix
    heuristics = torch.zeros_like(distance_matrix)
    
    # Iterate over each customer node
    for i in range(1, n):
        # Iterate over each other customer node
        for j in range(i + 1, n):
            # Calculate the sum of demands for both nodes
            demand_sum = normalized_demand[i] + normalized_demand[j]
            # Check if adding both nodes to the same route would exceed the capacity
            if demand_sum > 1:
                heuristics[i, j] = heuristics[j, i] = -float('inf')
            else:
                # Use a weighted heuristic based on distance and demand
                weight = (1 / (1 + normalized_distance[i, j])) * (1 - demand_sum)
                heuristics[i, j] = heuristics[j, i] = weight
    
    # Adjust heuristics to encourage visiting the depot more often
    heuristics[:, 0] *= 2
    heuristics[0, :] *= 2
    return heuristics
```
