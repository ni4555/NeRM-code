```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand matrix
    cumulative_demand = torch.cumsum(demands[:, None], dim=1)
    
    # Calculate the cumulative distance matrix
    cumulative_distance = torch.cumsum(distance_matrix, dim=1)
    
    # Calculate the potential cost of visiting each edge
    potential_costs = cumulative_distance - cumulative_demand
    
    # Calculate the difference between potential costs and average potential cost
    diff_from_avg = potential_costs - potential_costs.mean()
    
    # Normalize by the maximum difference from average to scale heuristics
    max_diff = torch.max(torch.abs(diff_from_avg))
    normalized_diff = diff_from_avg / max_diff
    
    # Invert the normalized difference to get heuristics (negative values are undesirable)
    heuristics = -normalized_diff
    return heuristics
```
