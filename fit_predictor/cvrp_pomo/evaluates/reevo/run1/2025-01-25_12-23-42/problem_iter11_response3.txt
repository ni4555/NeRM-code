```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    # The load factor is subtracted from the heuristic to discourage visiting heavily loaded nodes
    heuristics = norm_distances - (node_loads * norm_distances).sum(-1)
    
    # Introduce an adaptive noise based on the node load
    adaptive_noise = node_loads * 0.05  # Noise is scaled by the node load to balance exploration and exploitation
    
    # Use a dynamic scaling factor for the noise to adapt to the problem
    dynamic_scale = torch.clamp(torch.mean(adaptive_noise), min=0.0, max=1.0) * 0.1
    
    # Add the adaptive noise to the heuristics
    heuristics += adaptive_noise * dynamic_scale
    
    # Normalize the heuristics to ensure they are within a reasonable range
    heuristics = torch.clamp(heuristics, min=-2.0, max=2.0)
    
    return heuristics
```
