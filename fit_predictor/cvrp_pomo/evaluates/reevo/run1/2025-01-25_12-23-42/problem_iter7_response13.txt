```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the load factor to discourage visiting heavily loaded nodes
    load_factor = node_loads.sum(-1) * (norm_distances.sum(-1) ** 0.5)
    
    # Calculate the heuristics by combining the normalized distance and the load factor
    # We use a non-linear scaling by squaring the distances
    heuristics = (norm_distances ** 2) - load_factor
    
    # Introduce an exploration element by blending with a random noise
    # The noise will encourage the algorithm to explore alternative paths
    noise = torch.randn_like(heuristics) * 0.1  # 0.1 is a small scaling factor for the noise
    heuristics = heuristics + noise
    
    # Adaptively balance exploration and exploitation by limiting the heuristics range
    # We adjust the range based on the standard deviation of the load factor to maintain balance
    std_load_factor = load_factor.std()
    adjusted_range = 2.0 * std_load_factor
    heuristics = torch.clamp(heuristics, min=-adjusted_range, max=adjusted_range)
    
    return heuristics
```
