```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    max_distance = distance_matrix.max()
    
    # Initialize the heuristics matrix with zeros
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Create a mask for all edges
    edges_mask = torch.ones_like(distance_matrix, dtype=torch.bool)
    edges_mask.diag().fill_(False)  # Exclude the diagonal (nodes to themselves)
    
    # Calculate heuristics for edges where the cumulative demand is within the vehicle capacity
    for i in range(1, cumulative_demand.shape[0]):
        # If the demand of the current node exceeds the vehicle capacity, mark the edge as undesirable
        if cumulative_demand[i] > total_demand:
            edges_mask[i] = False
        else:
            # Calculate the heuristic as the negative distance for desirable edges
            heuristics_matrix[i, 0] = -distance_matrix[i, 0]
    
    # For each customer, calculate the potential heuristic to return to the depot
    for i in range(1, len(demands)):
        if edges_mask[i]:
            heuristics_matrix[i, 0] = -distance_matrix[i, 0]
    
    # Add the load factor, which encourages selecting customers with low load
    load_factor = 1 / (1 + cumulative_demand)
    
    # Combine the heuristics matrix with the load factor and normalize to get the final heuristics
    heuristics_matrix = heuristics_matrix * load_factor.unsqueeze(1)
    return heuristics_matrix
```
