```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    demand_threshold = total_demand / len(demands)
    
    # Calculate the inverse of the distance matrix
    inv_distances = 1 / (distance_matrix + 1e-8)  # Add a small constant to avoid division by zero
    
    # Calculate the penalty for demand being greater than the threshold
    penalties = (demands > demand_threshold).float() * -1.0
    
    # Combine the inverse distances with the penalties
    heuristics = inv_distances + penalties
    
    return heuristics
```
