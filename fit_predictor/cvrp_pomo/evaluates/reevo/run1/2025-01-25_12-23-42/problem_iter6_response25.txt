```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_threshold = total_demand / n
    distance_factor = 1 / (1 + distance_matrix)
    demand_factor = demands / demand_threshold
    revisit_penalty = demands * (demands > 0).type(torch.float32)
    balance_load_factor = torch.where(demands < demand_threshold,
                                      demands / demand_threshold,
                                      demand_threshold / demands)
    heuristic = distance_factor * demand_factor * revisit_penalty * balance_load_factor
    return heuristic
```
