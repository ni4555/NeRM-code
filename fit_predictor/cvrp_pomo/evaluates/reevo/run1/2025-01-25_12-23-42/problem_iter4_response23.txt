```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_threshold = total_demand / (demands.size(0) - 1)
    # Use a non-linear transformation to emphasize short distances and lower demands
    heuristics = torch.log(1 + distance_matrix) * (1 - (demands / demand_threshold)) ** 2
    # Apply a dampening factor to avoid overly large heuristics values
    dampening_factor = 0.5
    heuristics = heuristics * dampening_factor
    return heuristics
```
