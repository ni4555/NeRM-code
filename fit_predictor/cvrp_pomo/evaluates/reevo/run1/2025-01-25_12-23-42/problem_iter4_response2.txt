```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    demand_threshold = total_demand / len(demands)
    # Calculate the inverse of distances
    inv_distances = 1 / (distance_matrix + 1e-8)  # Adding a small value to avoid division by zero
    # Calculate the heuristic based on demand and distance
    heuristics = (demands / demand_threshold) * inv_distances
    # Invert the heuristic value if the demand of the customer is higher than the threshold
    heuristics[torch.where(demands > demand_threshold)] *= -1
    return heuristics
```
