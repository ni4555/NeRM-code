```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands = demands.unsqueeze(1)  # Ensure demands is a 2D tensor for broadcasting
    distance_matrix_squared = distance_matrix ** 2
    min_distance_to_depot = distance_matrix_squared[:, 0]  # Squared distance to depot
    max_demand = torch.max(demands, dim=0)[0]  # Maximum demand in the network
    
    # Calculate a heuristic considering both the closest distance to the depot
    # and the demand at the nearest nodes. Use these as an upper bound.
    heuristic = -distance_matrix_squared + min_distance_to_depot * max_demand
    # Adjust heuristic to penalize edges with high demands relative to the average
    average_demand = demands.mean()
    demand_penalty = (demands - average_demand).pow(2)
    heuristic -= demand_penalty
    
    # Normalize the heuristic to be positive
    heuristic = torch.clamp(heuristic, min=0)
    
    return heuristic
```
