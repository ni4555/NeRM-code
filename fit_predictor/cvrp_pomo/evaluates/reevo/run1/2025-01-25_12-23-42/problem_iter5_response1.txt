```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Calculate the heuristic weights for each edge based on distance and load
    edge_weights = norm_distances - (node_loads * norm_distances).sum(-1)
    
    # Incorporate exploration by introducing random perturbations to the edge weights
    random_perturbations = torch.randn_like(edge_weights) * 0.01
    heuristics = edge_weights + random_perturbations
    
    # Normalize the heuristics to ensure they remain within a reasonable range
    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())
    
    return heuristics
```
