```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    potential = -distance_matrix * (cumulative_demand > total_demand).float()
    # Subtract the distance for edges with non-zero potential to avoid revisiting
    potential = torch.clamp(potential, min=0, max=1) - (cumulative_demand > total_demand).float() * distance_matrix
    # Normalize the potential to ensure all values are within the range [0, 1]
    max_potential = torch.max(potential)
    heuristics = potential / (max_potential + 1e-6)  # Add a small epsilon to avoid division by zero
    return heuristics
```
