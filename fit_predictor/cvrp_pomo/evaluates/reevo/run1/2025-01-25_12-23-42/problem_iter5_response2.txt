```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distances
    norm_distances = distance_matrix / distance_matrix.max()
    
    # Calculate the load at each node normalized by the total demand
    node_loads = demands.unsqueeze(1) / demands.sum()
    
    # Incorporate a temperature parameter for simulated annealing-like exploration
    temperature = 0.5
    
    # Calculate the heuristics with a combination of distance and load factor
    # Introduce randomness to explore new solutions
    rand_factor = torch.rand_like(norm_distances) * temperature
    heuristics = norm_distances - (node_loads * norm_distances).sum(-1) + rand_factor
    return heuristics
```
