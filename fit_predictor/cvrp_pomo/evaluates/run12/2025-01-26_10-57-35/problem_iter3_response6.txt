```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    total_demand = demands.sum()
    heuristic_matrix = torch.zeros_like(distance_matrix)

    # Calculate heuristic for edges leaving the depot
    heuristic_matrix[depot, 1:] = (1 - demands[1:]) * distance_matrix[depot, 1:]
    heuristic_matrix[depot, 0] = 0

    # Calculate heuristic for edges entering the depot
    for i in range(1, n):
        if demands[i] > 0:
            # For each customer i, calculate the potential cost if it is visited last
            # before the vehicle capacity is exceeded
            remaining_capacity = total_demand - demands[:i].sum()
            heuristic_matrix[i, depot] = remaining_capacity * distance_matrix[i, depot]

    return heuristic_matrix
```
