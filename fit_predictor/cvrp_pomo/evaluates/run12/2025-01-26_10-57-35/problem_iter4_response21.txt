```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)
    normalized_demands = demands / demands.sum()
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    cumulative_distance = torch.cumsum(distance_matrix[:, 0], dim=0)

    for i in range(n):
        for j in range(i + 1, n):
            current_demand = demands[j]
            current_distance = distance_matrix[i, j]
            if cumulative_demand[j] > 1:
                cumulative_demand[j] = current_demand
            heuristics[i, j] = (current_distance - cumulative_distance[i]) * cumulative_demand[j]

    heuristics = torch.clamp(heuristics, min=0)
    return heuristics
```
