```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Scale heuristics to [0, 1] to avoid dominance
    heuristics = torch.clamp(heuristics, min=0, max=1)
    
    # Normalize the heuristics by dividing by the maximum heuristic value
    max_heuristic = heuristics.max()
    heuristics /= max_heuristic
    
    # Add a small positive value to all heuristics to ensure they are not zero
    heuristics += 1e-8
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)
    
    # Minimize dominance by ensuring that no edge is overly dominated by another
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - torch.diag(heuristics)
    dominated_edges = dominated_edges[dominated_edges > 0]
    if dominated_edges.nelement() > 0:
        min_dominated = dominated_edges.min()
        heuristics = torch.clamp(heuristics, min=min_dominated)
    
    # Apply decay function for distant nodes
    decay_factor = 1 / (distance_matrix + 1e-8)
    heuristics = heuristics * decay_factor
    
    return heuristics
```
