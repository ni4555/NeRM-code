```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = (1 / (demands + 1e-8))  # Avoid division by zero
    
    # Calculate heuristic by combining weighted distance, demand, and capacity factor
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Apply a logarithmic scale to balance demand and distance
    heuristics = torch.log1p(heuristics)
    
    # Normalize the heuristics to avoid dominance and ensure stability
    max_heuristic = heuristics.max()
    normalized_heuristics = heuristics / max_heuristic
    
    # Integrate the reflection points directly into the calculation:
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = 0
    heuristics -= loop_heuristics
    
    # Avoid dominance by ensuring that no edge is overly dominated by another
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges > 0] = 0
    dominated_edges = dominated_edges.view(n, n, n)
    dominated_edges = dominated_edges.min(dim=2)[0]
    heuristics = torch.max(heuristics, dominated_edges)
    
    # Dampen dominance by ensuring no single edge value is too high compared to the average
    avg_heuristic = heuristics.mean()
    dominated_by_average = (heuristics > avg_heuristic).float()
    heuristics *= (1 - dominated_by_average)
    
    # Iterate dynamically, balancing capacity, distance, and demand, by repeating the dampening
    for _ in range(5):
        # Integrate capacity constraints by using the inverse of demand
        heuristics += capacity_factor * demands
    
    # Adjust for overcapacity and undercapacity by penalizing excessively high values
    overcapacity_penalty = (demands > 1).float() * -10
    undercapacity_penalty = (demands < 1).float() * 5
    heuristics += normalized_heuristics * overcapacity_penalty - undercapacity_penalty
    
    # Apply a dampening factor to all heuristic values to balance the heuristics
    dampening_factor = 0.8
    heuristics *= dampening_factor
    
    # Normalize heuristics again after dampening to ensure they are well-balanced
    max_heuristic = heuristics.max()
    normalized_heuristics = heuristics / max_heuristic
    heuristics = normalized_heuristics
    
    return heuristics
```
