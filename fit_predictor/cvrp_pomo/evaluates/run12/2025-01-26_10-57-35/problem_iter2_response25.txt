```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An improved heuristic that uses the difference in cumulative demand and distance."""
    # Calculate the cumulative demand for each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Calculate the difference in cumulative demand between the origin and destination nodes
    demand_diff = cumulative_demand[:, None] - cumulative_demand[None, :]
    # Calculate the inverse of the distance matrix
    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small value to avoid division by zero
    # Combine the demand difference and inverse distance
    heuristics = demand_diff * inverse_distance
    # Normalize the heuristics by the maximum value to ensure non-negative values
    heuristics /= heuristics.max() + 1e-8
    return heuristics
```
