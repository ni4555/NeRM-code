```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Vectorized approach to calculate the cumulative demand
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Create a boolean mask for edges that exceed the capacity
    capacity_exceeded = cumulative_demand >= 1.0
    
    # Vectorized approach to calculate the heuristic values
    # Promising edges are those that do not exceed the capacity
    # We use a large negative number to indicate undesirable edges
    undesirable_threshold = -float('inf')
    heuristics = torch.where(capacity_exceeded, undesirable_threshold, distance_matrix)
    
    # To indicate promising edges, we use the distance values
    return heuristics
```
