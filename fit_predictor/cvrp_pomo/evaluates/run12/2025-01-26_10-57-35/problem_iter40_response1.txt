```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by subtracting the inverse of demand from the weighted distance
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand, subtracting capacity factor
    heuristics = weighted_distance_matrix - demand_matrix * capacity_factor
    
    # Ensure all heuristics are non-negative
    heuristics = torch.clamp(heuristics, min=0)
    
    # Apply a decay to balance high heuristics
    dominance_decay = torch.exp(-2 * heuristics)
    
    # Apply decay to the heuristics
    heuristics *= dominance_decay
    
    # Enhance depot edges by considering their fixed cost
    depot_cost = demands[0]  # Fixed cost of visiting the depot
    heuristics[0, :] = heuristics[0, :] + depot_cost
    heuristics[:, 0] = heuristics[:, 0] + depot_cost
    
    # Avoid dominated edges by considering the minimum value from each pair of connected nodes
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges > 0] = -1e8  # Mark dominated edges with a very low value
    heuristics = heuristics + dominated_edges.min(dim=2)[0]
    
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = 0
    heuristics += loop_heuristics
    
    return heuristics
```
