```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_matrix = demands[:, None] * demands
    demand_matrix -= demand_matrix.diag()
    demand_matrix = torch.where(demand_matrix != 0, demand_matrix, torch.zeros_like(demand_matrix))
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate the weighted distance matrix based on demand
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    normalized_weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Incorporate capacity constraint by adjusting the heuristic values for edges that would exceed capacity
    vehicle_capacity = 1.0  # This would normally be set based on problem specifics
    total_demand = demands.sum()
    if total_demand > vehicle_capacity:
        demand_matrix *= -1  # Negative heuristic for high-demand nodes
    
    # Normalize demands to account for capacity constraints
    demand_matrix /= vehicle_capacity
    
    # Calculate the heuristic by combining normalized demand and normalized distance
    heuristics = normalized_weighted_distance_matrix + demand_matrix
    
    # Use a threshold to clip the negative values to zero, as they are undesirable
    threshold = 0.0
    heuristics = torch.where(heuristics < threshold, torch.zeros_like(heuristics), heuristics)
    
    return heuristics
```
