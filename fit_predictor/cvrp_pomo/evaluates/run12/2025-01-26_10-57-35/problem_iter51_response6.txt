```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = (1 / (demands + 1e-8))  # Avoid division by zero
    
    # Calculate heuristic by combining weighted distance, demand, and capacity factor
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Apply a decay function to the heuristics to reduce the impact of distant nodes
    decay_factor = torch.exp(-torch.log1p(distance_matrix))
    heuristics *= decay_factor
    
    # Normalize the heuristics to avoid dominance
    max_heuristic = heuristics.max()
    heuristics /= max_heuristic
    
    # Encourage visiting the depot more by increasing its cost
    heuristics[0, :] += demands[0]
    heuristics[:, 0] += demands[0]
    
    # Adjust heuristics based on demand balance, rewarding nodes with more balanced demands
    balance_factor = demands.abs() / demands.sum()
    heuristics *= balance_factor
    
    # Apply penalties to nodes that are at or over capacity, and rewards for under capacity
    overcapacity_penalty = (demands >= 1).float() * -10
    undercapacity_penalty = (demands < 1).float() * 5
    heuristics += overcapacity_penalty - undercapacity_penalty
    
    return heuristics
```
