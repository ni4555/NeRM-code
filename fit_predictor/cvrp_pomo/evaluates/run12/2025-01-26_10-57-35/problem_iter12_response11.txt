```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Subtract the diagonal from the demand matrix and normalize
    demand_matrix = demands[:, None] * demands
    demand_matrix -= demand_matrix.diag()
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Normalize the distance matrix by the sum of distances from the depot to all nodes
    sum_distances = distance_matrix.sum(dim=1, keepdim=True)
    distance_matrix /= sum_distances
    
    # Scale the demand and distance matrices by the same factor to balance their influence
    combined_matrix = demand_matrix * distance_matrix
    
    # Integrate capacity constraints by considering the inverse of demand
    combined_matrix *= (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Clip the negative values to zero, as they are undesirable
    heuristics = torch.clamp(combined_matrix, min=0)
    
    return heuristics
```
