```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = (1 / (demands + 1e-8))  # Avoid division by zero
    
    # Calculate heuristic by combining weighted distance, demand, and capacity factor
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Apply a logarithmic scale to balance demand and distance
    heuristics = torch.log1p(heuristics)
    
    # Normalize the heuristics to avoid dominance and ensure stability
    max_heuristic = heuristics.max()
    normalized_heuristics = heuristics / max_heuristic
    
    # Apply a dampening factor to all heuristic values
    dampening_factor = 0.8
    
    # Apply the dampening factor and adjust for capacity more than demand in the balance
    capacity_emphasis_factor = 1.05
    demand_balance_factor = (1 - capacity_emphasis_factor) * demand_balance_factor + capacity_emphasis_factor
    heuristics = dampening_factor * (weighted_distance_matrix + demand_matrix * demand_balance_factor * capacity_factor)
    
    # Avoid dominance by ensuring that no edge is overly dominated by another
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges > 0] = 0
    dominated_edges = dominated_edges.view(n, n, n)
    dominated_edges = dominated_edges.min(dim=2)[0]
    heuristics = torch.max(heuristics, dominated_edges)
    
    # Balance constraints & exploration using the adjusted heuristic values
    constraints_balance_factor = (1 - capacity_emphasis_factor) * 1.5 + capacity_emphasis_factor
    heuristics *= constraints_balance_factor
    
    # Further dampen the heuristic to prevent too aggressive a heuristic
    heuristics *= dampening_factor
    
    # Adjust penalties for overcapacity and undercapacity
    overcapacity_penalty = (demands > 1).float() * -15
    undercapacity_penalty = (demands < 1).float() * 10
    heuristics += normalized_heuristics * overcapacity_penalty - undercapacity_penalty
    
    # Apply the adjusted dampening factor to all heuristic values
    heuristics *= dampening_factor
    
    # Return the heuristics
    return heuristics
```
