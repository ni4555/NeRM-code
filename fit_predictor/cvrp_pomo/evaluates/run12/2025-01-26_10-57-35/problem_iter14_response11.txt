```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum().item()
    
    # Create a demand matrix with self-demand excluded and normalize
    demand_matrix = demands[:, None] * demands
    demand_matrix -= torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Normalize the distance matrix
    distance_matrix /= distance_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized demands and distances
    combined_matrix = demand_matrix * distance_matrix
    
    # Integrate capacity constraints by using the inverse of demand
    inverse_demand = 1 / (demands + 1e-8)  # Add a small epsilon to avoid division by zero
    
    # Final heuristic matrix
    heuristics = combined_matrix * inverse_demand
    
    # Ensure that no values are negative, as this is undesirable
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
