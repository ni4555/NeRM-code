```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum().item()
    sum_of_demands = torch.sum(demands[:, None] + demands[None, :], dim=0)
    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small value to avoid division by zero
    combined_heuristic = sum_of_demands * inverse_distance
    demand_weight = (1 - demands / total_capacity)[:, None]  # Scale demands relative to total capacity
    enhanced_heuristic = combined_heuristic * demand_weight
    return enhanced_heuristic
```
