```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)
    
    # Apply a decay factor to reduce the dominance of less promising edges
    decay_factor = 0.95
    heuristics = heuristics * decay_factor
    
    # Enhance depot edges by increasing their weight
    depot_heuristics = heuristics.clone()
    depot_heuristics[0, :] = 1.0
    depot_heuristics[:, 0] = 1.0
    
    # Dynamically adjust the heuristics to ensure that depot edges are dominant over other edges
    dominated_edges = heuristics[0, :] + heuristics[:, 0] - heuristics[0, 0]
    dominated_edges = dominated_edges[dominated_edges > 0]
    if dominated_edges.numel() > 0:
        min_dominated = dominated_edges.min()
        heuristics[0, 0] = max(depot_heuristics[0, 0], min_dominated * decay_factor)
    
    # Avoid dominance by ensuring that no edge is overly dominated by another
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges > 0] = -1e8  # Mark dominated edges with a very low value
    dominated_edges = dominated_edges.min(dim=2)[0]
    heuristics = torch.max(heuristics, dominated_edges)
    
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = 0
    heuristics += loop_heuristics
    
    return heuristics
```
