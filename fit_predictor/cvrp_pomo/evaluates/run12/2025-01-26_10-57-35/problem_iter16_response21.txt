```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Create a demand matrix for self-comparison and normalize
    demand_matrix = demands[:, None] * demands
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= torch.sum(demand_matrix, dim=1, keepdim=True)
    
    # Normalize the weighted distance matrix by the sum of demands
    normalized_weighted_distance_matrix = distance_matrix * demand_matrix
    normalized_weighted_distance_matrix /= torch.sum(normalized_weighted_distance_matrix, dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = (1 / (demands + 1e-8))
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = normalized_weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Penalize loops by adding the cumulative distance matrix
    cumulative_distance_matrix = distance_matrix.cumsum(dim=1)
    normalized_cumulative_distance_matrix = cumulative_distance_matrix / cumulative_distance_matrix.sum(dim=1, keepdim=True)
    
    # Subtract cumulative distance to penalize loops
    heuristics -= normalized_cumulative_distance_matrix
    
    # Clip negative values to zero
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
