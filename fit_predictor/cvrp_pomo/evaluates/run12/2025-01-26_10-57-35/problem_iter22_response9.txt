```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the sum of demands for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Capacity factor considering the total demand
    capacity_factor = (1 / (demands + 1e-8)) * torch.exp(-0.5 * weighted_distance_matrix)
    
    # Heuristic incorporating distance, demand, and capacity
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Apply a decay to ensure all heuristics are positive
    heuristics = heuristics * torch.exp(-heuristics)
    
    # Clip negative values to zero
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
