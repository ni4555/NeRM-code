```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    row_sums = weighted_distance_matrix.sum(dim=1, keepdim=True)
    col_sums = weighted_distance_matrix.sum(dim=0, keepdim=True)
    normalized_weighted_distance_matrix = weighted_distance_matrix / (row_sums + col_sums)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = normalized_weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Penetrize loops by adding a negative factor for the diagonal
    loop_penalty = -1e5
    heuristics = heuristics + loop_penalty * torch.eye(n)
    
    # Clip negative values to zero
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
