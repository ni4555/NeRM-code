```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance depot edges by considering distance and demand
    depot_heuristic = heuristics.sum(dim=1) + demands
    heuristics[0, :] = depot_heuristic
    heuristics[:, 0] = depot_heuristic
    
    # Apply decay to balance the influence of demands over distances
    decay_factor = 0.5
    heuristics = heuristics * decay_factor + (1 - decay_factor) * demand_matrix
    
    # Minimize dominance by ensuring that no edge is overly dominated by another
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges <= 0] = float('inf')
    heuristics = dominated_edges.min(dim=2)[0]
    
    # Balance demands by adjusting heuristics based on the average demand
    average_demand = demands.mean()
    heuristics = heuristics - (demands - average_demand) ** 2
    
    return heuristics
```
