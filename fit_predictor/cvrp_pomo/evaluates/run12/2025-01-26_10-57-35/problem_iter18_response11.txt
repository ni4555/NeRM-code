```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics *= (1 + demands)  # Enhance promising edges
    
    # Minimize dominance by ensuring that no edge is overly dominated by another
    # Calculate dominance for all pairs of edges and balance heuristics accordingly
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges = dominated_edges.clamp(min=0)
    min_dominated = dominated_edges.min(dim=2).values
    dominated_edges = dominated_edges > min_dominated.unsqueeze(1).unsqueeze(2)
    
    # If edge is dominated, lower its heuristic
    dominated_indices = dominated_edges.nonzero(as_tuple=True)
    dominated_pairs = (dominated_indices[0], dominated_indices[1])
    for i, j in zip(*dominated_pairs):
        heuristics[i, j] = min(heuristics[i, j], min_dominated[i, j])
    
    return heuristics
```
