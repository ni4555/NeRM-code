```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)  # Enhance promising edges
    
    # Prioritize the depot by setting its heuristic to the maximum possible value
    heuristics[:, 0] = heuristics.max()  # Maximize the heuristic for the depot
    
    # Minimize loops by avoiding assigning a high heuristic value to edges that form a loop
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                # Check if the edge creates a loop
                loop_heuristics = heuristics[i, :] + heuristics[:, j] - heuristics[i, j]
                # If the loop heuristic is high, decrease the heuristic value for the edge
                if loop_heuristics.max() > heuristics[i, j]:
                    heuristics[i, j] = loop_heuristics.min()
    
    # Avoid dominance by ensuring that no edge is overly dominated by another
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges > 0] = 0  # Set dominated edges to zero
    heuristics = dominated_edges.max(dim=2)[0]  # Select the non-dominated edges
    
    return heuristics
```
