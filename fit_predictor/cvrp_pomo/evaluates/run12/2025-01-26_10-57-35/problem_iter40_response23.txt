```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance edges near the depot by adding a fixed value
    depot_cost = demands[0]  # Fixed cost of visiting the depot
    heuristics[0, :] += depot_cost
    heuristics[:, 0] += depot_cost
    
    # Introduce a penalty for overcapacity edges
    overcapacity_penalty = (demands > 1).float() * -10  # Large negative value for overcapacity
    
    # Add penalty to overcapacity edges
    heuristics = heuristics + overcapacity_penalty
    
    # Normalize the heuristics to avoid dominance issues
    max_heuristic = heuristics.max()
    normalized_heuristics = torch.clamp(heuristics / max_heuristic, min=0, max=1)
    
    return normalized_heuristics  # Returning the normalized heuristics to maintain uniformity across edges
```
