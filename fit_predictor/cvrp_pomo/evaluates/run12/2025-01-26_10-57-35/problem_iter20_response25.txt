```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)  # Enhance promising edges
    
    # Minimize dominance by ensuring that no edge is overly dominated by another
    dominance_check = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominance_check[dominance_check > 0] = 1
    dominance_check[dominance_check <= 0] = 0
    dominance_check = dominance_check.sum(dim=2)
    
    # Apply dominance check
    dominated_edges = (dominance_check > 1).any(dim=0)
    for i in range(n):
        if dominated_edges[i]:
            heuristics[i, :] = 0
    
    # Clip negative values to zero
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
