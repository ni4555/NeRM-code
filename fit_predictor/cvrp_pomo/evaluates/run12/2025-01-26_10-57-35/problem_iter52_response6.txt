```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Prioritize the depot by scaling outgoing and incoming edges
    depot_priority = 2
    heuristics[:, 0] *= depot_priority
    heuristics[0, :] *= depot_priority
    
    # Minimize dominance by setting the heuristic for any edge that would be dominated
    # to the same value as the higher heuristic in its triangle
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if i != j and j != k and k != i:
                    heuristics[i, j] = min(heuristics[i, j], heuristics[j, k])
    
    # Minimize loops by subtracting the diagonal (self-heuristic)
    loop_reduction = heuristics.diagonal().to(torch.float32)
    heuristics -= loop_reduction
    
    # Apply penalties for overcapacity and ensure all heuristics are non-negative
    overcapacity_penalty = (demands > 1).float() * -10
    heuristics = torch.clamp(heuristics + overcapacity_penalty, min=0)
    
    return heuristics
```
