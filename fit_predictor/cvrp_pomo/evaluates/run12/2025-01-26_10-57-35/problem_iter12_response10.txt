```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum().item()
    normalized_demand_matrix = demands / total_capacity
    normalized_demand_matrix = torch.triu(normalized_demand_matrix, 1) + torch.triu(normalized_demand_matrix, -1)
    weighted_distance_matrix = distance_matrix * normalized_demand_matrix
    heuristics = weighted_distance_matrix / total_capacity
    heuristics = torch.clamp(heuristics, min=0)
    return heuristics
```
