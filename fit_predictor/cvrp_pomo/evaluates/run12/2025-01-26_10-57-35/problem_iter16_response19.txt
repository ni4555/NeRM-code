```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum().item()
    
    # Demand matrix calculation
    demand_matrix = demands[:, None] * demands
    demand_matrix -= demand_matrix.diag()
    
    # Normalize demand matrix by the total demand for each node
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate the weighted demand matrix
    weighted_demand_matrix = demand_matrix * distance_matrix
    
    # Normalize the weighted demand matrix by the total capacity
    heuristics = weighted_demand_matrix / total_capacity
    
    # Ensure all elements are non-negative
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
