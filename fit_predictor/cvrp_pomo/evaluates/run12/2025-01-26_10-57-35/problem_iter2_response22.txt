```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """A heuristic that uses demand differences and inverse distances."""
    # Calculate the absolute difference in demands between each pair of nodes
    demand_diff = torch.abs(demands[:, None] - demands[None, :])
    # Calculate the inverse of the distance matrix
    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small value to avoid division by zero
    # Combine demand differences and inverse distances
    heuristics = (demand_diff * inverse_distance).sum(dim=1) - demand_diff.sum(dim=1)
    # Normalize the heuristics to ensure non-negative values
    heuristics /= heuristics.max() + 1e-8
    return heuristics
```
