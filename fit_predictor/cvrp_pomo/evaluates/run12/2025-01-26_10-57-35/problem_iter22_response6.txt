```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)  # Enhance promising edges
    
    # Create a matrix of potential dominances
    dominance_matrix = torch.where(heuristics[:, :] <= heuristics[:-1, 1:], 0, 1)
    dominance_matrix = torch.where(heuristics[:, 1:] <= heuristics[:-1, :], 1, 0) * dominance_matrix
    
    # Calculate total dominance for each node
    dominance_scores = dominance_matrix.sum(dim=1)
    
    # Minimize dominance by ensuring that no edge is overly dominated by another
    heuristics[dominance_scores < 2] = -heuristics[dominance_scores < 2]
    
    # Incorporate decay function for distant nodes
    distance_decay = (1 / (distance_matrix + 1e-8)) ** 2  # Using squared inverse to decay
    heuristics = heuristics * distance_decay
    
    return heuristics
```
