```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Normalize the distance matrix
    normalized_distance_matrix = distance_matrix / distance_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = normalized_distance_matrix * demand_matrix
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = (1 / (demands + 1e-8))  # Avoid division by zero
    
    # Calculate heuristic by combining weighted distance, demand, and capacity factor
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Balance demand and distance with a non-linear scale
    heuristics = torch.sqrt(heuristics)
    
    # Prevent dominance of edges leading to the depot
    depot_penalty_factor = torch.log1p(torch.abs(distance_matrix[:, 0]))
    heuristics[:, 0] *= depot_penalty_factor
    heuristics[0, :] *= depot_penalty_factor
    
    # Normalize heuristics to ensure stability
    max_heuristic = heuristics.max()
    heuristics /= max_heuristic
    
    # Adjust the heuristics for undercapacity
    undercapacity_factor = demands < 1
    heuristics[undercapacity_factor] /= 2
    
    # Ensure the highest cost for the depot edges
    heuristics[0, :] *= demands[0]
    heuristics[:, 0] *= demands[0]
    
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = 0
    heuristics += loop_heuristics
    
    # Balance between the minimum heuristics and a constant value to prevent dominance
    base_heuristic_value = heuristics.min()
    heuristics = torch.min(heuristics, base_heuristic_value)
    
    return heuristics
```
