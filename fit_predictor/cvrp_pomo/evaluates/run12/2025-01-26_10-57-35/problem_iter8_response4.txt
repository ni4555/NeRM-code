```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the difference in cumulative demand
    demand_diff = demands[:, None] - demands[None]
    demand_diff -= demand_diff.diag()
    
    # Calculate the cost as the sum of the distance and the demand-based cost
    cost = distance_matrix + demand_diff
    
    # Clip the negative values to zero, as they are undesirable
    heuristics = torch.clamp(cost, min=0)
    
    return heuristics
```
