```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    depot_index = 0
    
    # Create a vector that represents the difference in demand for each customer node
    demand_diff = demands - total_demand / len(demands)
    
    # Create a mask where the demand difference is negative (customers with lower demand)
    lower_demand_mask = demand_diff < 0
    
    # Create a vector that represents the negative of the distance from the depot to each customer
    distance_neg = -distance_matrix[depot_index]
    
    # Create a vector where the negative distance is multiplied by the lower demand mask
    # This gives a larger negative value for edges to nodes with lower demand
    demand_favorable = distance_neg * lower_demand_mask
    
    # Return the demand-favorable edges vector
    return demand_favorable
```
