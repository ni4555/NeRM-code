```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the cumulative demand for all customers from the depot
    cumulative_demand = demands.cumsum(0)

    # For each vehicle capacity (from 0 to the total capacity)
    for capacity_index in range(demands[-1].int().item()):
        # Select nodes based on the demand for the current capacity level
        current_demand = cumulative_demand[:capacity_index + 1]

        # Initialize edge promise for the current capacity level
        edge_promise = torch.zeros_like(distance_matrix)

        # Create a mask where the edge is promising if the node's demand is reached within capacity
        for i in range(n):
            for j in range(n):
                if i != j:
                    edge_promise[i, j] = torch.where(demands[j] - demands[i] <= capacity_index, 
                                                     -distance_matrix[i, j], 
                                                     0)

        # Update edge promise based on the cumulative demand, ensuring no edge has a non-negative score
        edge_promise = torch.max(edge_promise - cumulative_demand.unsqueeze(1), edge_promise)

        # Add the current capacity level's edge promise to the total heuristic
        heuristics += edge_promise

    return heuristics
```
