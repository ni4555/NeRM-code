```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize demand and distance matrices
    total_demand = demands.sum()
    demand_normalized = demands / total_demand
    distance_normalized = distance_matrix / distance_matrix.max()
    
    # Create a matrix where the demand is added only to the customer nodes
    demand_matrix = torch.full_like(distance_normalized, fill_value=-demand_normalized)
    demand_matrix[:, 0] = 0  # Set depot's demand to zero
    
    # Vectorize cumulative sums over the demand matrix to get priority queues
    cumsum_rows = demand_matrix.cumsum(0)
    cumsum_cols = cumsum_rows.cumsum(1)
    
    # Initialize heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Iterate over each customer and update heuristics matrix
    for i in range(1, demands.size(0)):
        heuristics[0, i] = distance_normalized[0, i] + cumsum_cols[i]
        for j in range(1, demands.size(0)):
            heuristics[i, j] = min(heuristics[i, j-1], distance_normalized[i, j] + cumsum_cols[j])
    
    # Update the heuristics based on capacity constraints
    capacity = demands[0]
    for i in range(1, demands.size(0)):
        for j in range(i + 1, demands.size(0)):
            heuristics[i, j] = heuristics[i, j] + (capacity - cumsum_cols[j] - cumsum_rows[i, 0])

    return heuristics
```
