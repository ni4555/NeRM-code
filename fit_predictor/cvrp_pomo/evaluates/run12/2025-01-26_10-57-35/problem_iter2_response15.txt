```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An optimized heuristic for the CVRP that leverages vectorization."""
    # Add a small constant to avoid division by zero
    epsilon = 1e-8
    # Calculate the cumulative sum of demands
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Calculate the cumulative sum of distances from the depot
    cumulative_distance = torch.cumsum(distance_matrix[:, 0], dim=0)
    # Calculate the sum of demands for each edge
    sum_of_demands = torch.sum(demands[:, None] + demands[None, :], dim=0)
    # Calculate the inverse of the distance matrix
    inverse_distance = 1 / (distance_matrix + epsilon)
    # Calculate the heuristic values
    heuristics = (inverse_distance * sum_of_demands * (cumulative_demand[:, None] - cumulative_demand[None, :])) / (cumulative_distance[:, None] - cumulative_distance[None, :])
    # Ensure non-negative values by subtracting the minimum value
    heuristics = heuristics - heuristics.min()
    return heuristics
```
