```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Normalize the demand vector by the total demand
    demand_matrix = demands[:, None] * demands
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Combine weighted distance and normalized demand
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    normalized_weighted_distance = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint using the inverse of demand
    capacity_factor = 1 / (demands + 1e-8)
    
    # Calculate heuristic
    heuristics = normalized_weighted_distance + capacity_factor * demand_matrix
    
    # Apply logarithmic scaling to dampen dominance
    heuristics = torch.log1p(heuristics)
    
    # Apply a dampening factor to all heuristic values
    dampening_factor = 0.8
    heuristics *= dampening_factor
    
    # Apply penalties for overcapacity and undercapacity
    overcapacity_penalty = (demands > 1).float() * -10
    undercapacity_penalty = (demands < 1).float() * 5
    heuristics += overcapacity_penalty - undercapacity_penalty
    
    # Ensure the heuristic for the depot is the highest
    depot_cost = demands[0]
    heuristics[0, :] += depot_cost
    heuristics[:, 0] += depot_cost
    
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = 0
    heuristics += loop_heuristics
    
    # Ensure no edge is overly dominated by another
    dominated_edges = heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics.unsqueeze(2)
    dominated_edges[dominated_edges > 0] = 0
    dominated_edges = dominated_edges.view(n, n, n)
    dominated_edges = dominated_edges.min(dim=2)[0]
    heuristics = torch.max(heuristics, dominated_edges)
    
    # Normalize the heuristics to avoid dominance
    max_heuristic = heuristics.max()
    normalized_heuristics = heuristics / max_heuristic
    heuristics = normalized_heuristics * max_heuristic
    
    # Return the normalized heuristics matrix
    return heuristics
```
