```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    heuristics = torch.zeros_like(distance_matrix)
    
    # Initialize a visited array to keep track of visited nodes
    visited = torch.zeros(n, dtype=torch.bool)
    
    # Initialize distances from the depot to all other nodes
    distances = distance_matrix[depot]
    
    for i in range(1, n):
        if not visited[i]:
            # Find the nearest unvisited node
            nearest_node = torch.argmin(distances)
            visited[i] = True
            
            # Update the heuristics matrix
            heuristics[depot, nearest_node] = distances[nearest_node]
            heuristics[nearest_node, depot] = distances[nearest_node]
            
            # Update distances for the next iteration
            distances = distance_matrix[nearest_node]
    
    # Normalize the distances by the total demand to incorporate demand into the heuristic
    total_demand = demands.sum()
    heuristics /= total_demand
    
    return heuristics
```
