```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    cumulative_demand = torch.cumsum(demands, dim=0)
    demand_diff = cumulative_demand[:, None] - cumulative_demand[None, :]
    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small value to avoid division by zero
    heuristics = demand_diff * inverse_distance
    
    # Incorporate demand-based weighting by considering the presence of demand
    demand_weight = (demands > 0).float()
    heuristics *= demand_weight

    # Normalize the heuristics by the maximum value in the heuristics to ensure non-negative values
    max_heuristic = heuristics.max()
    normalized_heuristics = heuristics / max_heuristic
    
    # Adjust the weight dynamically to enhance the importance of edges based on their contribution to the cumulative demand
    for i in range(1, n):
        for j in range(1, n):
            normalized_heuristics[i, j] = max(normalized_heuristics[i, j], normalized_heuristics[i, j - 1] - normalized_heuristics[j - 1, j])
    
    return normalized_heuristics
```
