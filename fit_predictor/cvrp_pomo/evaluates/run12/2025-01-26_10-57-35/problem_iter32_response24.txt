```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance depot edges by doubling their heuristic value
    heuristics[0, 1:] = heuristics[0, 1:] * 2
    heuristics[1:, 0] = heuristics[1:, 0] * 2
    
    # Decay less promising edges based on their demand
    decay_factor = 1 - 0.5 * demands  # Decaying based on the demand, higher demand = less decay
    heuristics *= decay_factor
    
    # Minimize dominance by ensuring that no edge is overly dominated by another
    # Vectorized approach to minimize dominance
    dominated_mask = (heuristics[:, None] + heuristics.T - heuristics) > 0
    dominated_mask[dominated_mask] = 1
    dominated_mask[dominated_mask == 0] = float('inf')
    min_dominated = dominated_mask.min(dim=1, keepdim=True)[0]
    heuristics = torch.min(heuristics, min_dominated)
    
    # Ensure that the heuristic for the depot is always the highest to encourage visiting it
    heuristics[0, 1:] = heuristics[0, 1:].max()
    heuristics[1:, 0] = heuristics[1:, 0].max()
    
    # Normalize heuristics to maintain a consistent scale
    max_heuristic = heuristics.max()
    heuristics /= max_heuristic
    
    return heuristics
```
