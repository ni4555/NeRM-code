```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    capacity = 1.0  # Normalize by the capacity
    demand_matrix = demands[:, None] * demands
    demand_matrix -= demand_matrix.diag()
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    weighted_distance_matrix = distance_matrix * demand_matrix
    normalized_weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraints by considering the inverse of demand
    capacity_inverse = 1 / (demands + 1e-8)  # Avoid division by zero
    
    # Combine demand and distance into a single heuristic value
    combined_heuristic = normalized_weighted_distance_matrix + demand_matrix
    
    # Incorporate capacity constraints
    heuristics = combined_heuristic * capacity_inverse
    
    # Clip negative values to zero, as they are undesirable
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
