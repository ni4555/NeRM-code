```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_matrix = demands[:, None] * demands
    demand_matrix -= demand_matrix.diag()
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate the weighted distance matrix based on demand
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    normalized_weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Calculate the heuristic by combining normalized distance with inverse demand (to emphasize capacity constraints)
    heuristics = normalized_weighted_distance_matrix * (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate a penalty for nodes that are close to exceeding capacity
    capacity_penalty = torch.where(demands > 1, demands - 1, 0)
    
    # Calculate a penalty for high variability in demand
    demand_variance_penalty = torch.var(demands, dim=0)
    
    # Combine the penalties into the heuristic
    heuristics -= (capacity_penalty + demand_variance_penalty)
    
    # Cap the penalties to prevent them from dominating the heuristic values
    penalty_cap = 1e-3
    heuristics = torch.clamp(heuristics, min=-penalty_cap)
    
    return heuristics
```
