```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    n = len(demands)
    
    # Initialize the heuristics matrix with large negative values
    heuristics = torch.full_like(distance_matrix, fill_value=-1e10)
    
    # Calculate cumulative demands up to each customer
    cumulative_demands = demands.cumsum(0)
    
    # Calculate cumulative distances from the depot to each customer
    cumulative_distances = distance_matrix.cumsum(0)
    
    # Loop through each customer, starting from the second one (first is the depot)
    for i in range(1, n):
        # Update the heuristic values for the current customer
        # Negative heuristic for the current customer (except the last one)
        if i != n-1:
            heuristics[i][i+1] = (distance_matrix[i][i+1] - total_demand)
        # Positive heuristic if the current demand plus the previous cumulative demand is within the capacity
        if cumulative_demands[i-1] <= 1:
            for j in range(1, i):
                if cumulative_demands[j] + cumulative_demands[i] <= 1:
                    heuristics[j][i] = distance_matrix[j][i]
                    
    return heuristics
```
