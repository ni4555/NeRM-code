```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / (demand_matrix.sum(dim=1, keepdim=True) + 1e-8)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    row_sums = weighted_distance_matrix.sum(dim=1, keepdim=True)
    weighted_distance_matrix = weighted_distance_matrix / (row_sums + 1e-8)
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand, adjusted for capacity
    heuristics = weighted_distance_matrix + (demands[:, None] * capacity_factor) - (capacity_factor)
    
    # Scale heuristics to ensure a positive value for each edge
    heuristics = torch.clamp(heuristics, min=1e-8)
    
    # Minimize dominance by ensuring that no edge is overly dominated by another
    for i in range(n):
        dominated_edges = heuristics[i, :] + heuristics[:, i] - heuristics[i, i]
        dominated_edges = dominated_edges[dominated_edges > 0]
        if dominated_edges.numel() > 0:
            min_dominated = dominated_edges.min()
            heuristics[i, :] = torch.max(heuristics[i, :], min_dominated)
    
    # Incorporate decay function for distant nodes
    distance_decay = (1 / (distance_matrix + 1e-8)) ** 2  # Using squared inverse to decay
    heuristics = heuristics * distance_decay
    
    return heuristics
```
