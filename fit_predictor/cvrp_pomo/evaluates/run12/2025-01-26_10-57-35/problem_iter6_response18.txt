```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum().item()
    cumulative_demand = torch.cumsum(demands, dim=0)
    max_demand_index = torch.argmax(cumulative_demand)
    max_demand = cumulative_demand[max_demand_index]
    
    # Initialize the heuristics matrix
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the potential of each edge based on demand and distance
    heuristics = (1 - (cumulative_demand / max_demand) * (distance_matrix / distance_matrix.max())) * (1 - (demands / total_capacity))
    
    # Normalize the heuristics matrix to ensure non-negative values
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    return heuristics
```
