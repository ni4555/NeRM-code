```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint with a decay function for distant nodes
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    decay_factor = 1 / (1 + torch.sqrt(torch.pow(distance_matrix, 2).sum(dim=1)))
    
    # Calculate heuristic by combining normalized weighted distance, demand, and distance decay
    heuristics = weighted_distance_matrix * decay_factor + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand
    heuristics = heuristics * (1 + demands)  # Enhance promising edges
    
    # Minimize dominance by ensuring that no edge is overly dominated by another
    dominated_edges = torch.zeros_like(heuristics)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the sum of dominated edges
                dominated_edges[i, j] = heuristics[i, :] + heuristics[:, j] - heuristics[i, j]
                # Only keep edges where at least one of the heuristics is positive
                dominated_edges[i, j] = dominated_edges[i, j][dominated_edges[i, j] > 0].min()
    # Avoid dominance
    heuristics = torch.clamp(heuristics, min=dominated_edges)
    
    return heuristics
```
