```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic for CVRP using sum of demands, inverse distance, and normalization."""
    n = distance_matrix.shape[0]
    # Calculate the sum of demands for each edge
    sum_of_demands = torch.sum(demands[:, None] + demands[None, :], dim=0)
    # Calculate the inverse of the distance matrix
    inverse_distance = 1 / (distance_matrix + 1e-8)  # Adding a small value to avoid division by zero
    # Combine the sum of demands and inverse distance
    combined_heuristic = sum_of_demands * inverse_distance
    # Normalize the combined heuristic to ensure non-negative values
    heuristics = combined_heuristic / (combined_heuristic.max() + 1e-8)
    return heuristics
```
