```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance depot edges
    depot_heuristic = (1 + demands)
    heuristics[:, 0] = heuristics[0, :] = depot_heuristic
    
    # Apply decay for dominance minimization
    dominance_decay = 1 / (1 + demands)
    heuristics = heuristics * dominance_decay
    
    # Balance demand by adjusting heuristics
    balance_factor = 1 / (1 + demands)
    heuristics = heuristics * balance_factor
    
    # Optimize capacity by penalizing overcapacity edges
    overcapacity_penalty = demands[:, None] - demands
    heuristics = heuristics - overcapacity_penalty
    
    return heuristics
```
