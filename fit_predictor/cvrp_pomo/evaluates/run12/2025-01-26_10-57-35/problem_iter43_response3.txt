```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)
    
    # Normalize by a decay factor to account for distance decay effect
    decay_factor = (1 / (weighted_distance_matrix + 1e-8))
    heuristics *= decay_factor
    
    # Avoid dominance by using the average of the minima over all paths to dominated edges
    for i in range(n):
        dominated_edges = heuristics[i, :] + heuristics[:, i] - heuristics[i, i]
        dominated_edges = dominated_edges[dominated_edges > 0]
        heuristics[i, dominated_edges] = torch.min(heuristics[i, :][dominated_edges], heuristics[:, i][dominated_edges])
    
    # Prioritize the depot, as it has unique edges not shared with customers
    heuristics[:, 0] = heuristics[:, 0] * 2
    heuristics[0, :] = heuristics[0, :] * 2
    
    # Ensure loop avoidance by adjusting only the negative edges (loops)
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics < 0] = 0
    heuristics += loop_heuristics
    
    return heuristics
```
