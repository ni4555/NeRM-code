```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)  # Enhance promising edges
    
    # Minimize dominance by ensuring that no edge is overly dominated by another using vectorization
    dominance_mask = (heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - heuristics) > 0
    dominance_mask = dominance_mask.triu(diagonal=1)  # Ignore self-comparison and diagonal
    dominance_mask = dominance_mask.sum(dim=1, keepdim=True) > 0  # Any dominance found
    
    # Find the minimum non-dominant edge heuristic for each edge
    non_dominant_edges = heuristics[~dominance_mask]
    min_non_dominant = non_dominant_edges.min() if non_dominant_edges.numel() > 0 else torch.full_like(heuristics, fill_value=float('inf'))
    min_non_dominant = min_non_dominant.expand_as(heuristics)
    
    # Apply dominance minimization heuristic
    heuristics = torch.min(heuristics, min_non_dominant)
    
    return heuristics
```
