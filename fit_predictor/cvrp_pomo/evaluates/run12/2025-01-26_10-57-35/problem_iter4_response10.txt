```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Calculate the cumulative demand for each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Calculate the cumulative distance from the depot
    cumulative_distance = torch.cumsum(distance_matrix[:, 0], dim=0)
    # Calculate the heuristics value for each edge using the cumulative demand and distance
    # The heuristic value is based on the ratio of distance to demand and cumulative distance to demand
    # It promotes edges with higher ratios as they cover more distance per unit demand
    heuristics = (cumulative_distance / cumulative_demand) - (distance_matrix / demands)
    # Clip the heuristics values to avoid negative values
    heuristics = torch.clamp(heuristics, min=0)
    return heuristics
```
