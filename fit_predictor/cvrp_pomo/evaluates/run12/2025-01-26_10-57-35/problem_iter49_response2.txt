```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix = demand_matrix / demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand (addition to heuristic)
    capacity_factor = (1 / (demands + 1e-8))  # Adding a small epsilon to avoid division by zero
    
    # Calculate heuristic by combining normalized weighted distance and demand
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Enhance promising edges by considering both distance and demand, and balance with capacity
    heuristics = heuristics * (1 + demands)  # Enhance promising edges
    
    # Prioritize depot by ensuring its edges have the highest heuristic values
    heuristics[:, 0] = heuristics[:, 0] * 2  # Prioritize outgoing edges from the depot
    heuristics[0, :] = heuristics[0, :] * 2  # Prioritize incoming edges to the depot
    
    # Avoid dominance by ensuring that no edge is overly dominated by another
    dominated_mask = (heuristics.unsqueeze(1) + heuristics.unsqueeze(0) - distance_matrix > 0)
    dominated_mask = dominated_mask.triu(1).tril(-1)
    dominated_mask = dominated_mask.float() * (1 / dominated_mask.sum(dim=1, keepdim=True))
    heuristics += dominated_mask * heuristics
    
    # Minimize loops by reducing the heuristic values of edges that form a loop
    loop_mask = (distance_matrix == weighted_distance_matrix)
    loop_mask = loop_mask.triu(1).tril(-1)
    loop_mask = loop_mask.float() * (1 / loop_mask.sum(dim=1, keepdim=True))
    heuristics -= loop_mask * heuristics
    
    # Utilize decay for long-term stability by reducing the impact of distant nodes
    decay_factor = 1 / (distance_matrix.sum(dim=1) + 1e-8)
    heuristics = heuristics * decay_factor
    
    return heuristics
```
