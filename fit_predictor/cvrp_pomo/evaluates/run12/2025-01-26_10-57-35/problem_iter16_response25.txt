```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_matrix = demands[:, None] * demands
    demand_matrix -= torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Combine weighted distance with inverse demand to prioritize routes that are more central to capacity constraint
    heuristics = distance_matrix * (demand_matrix + (1 / (demands + 1e-8)))
    
    # Clip negative values to zero as they are undesirable
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
