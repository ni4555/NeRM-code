```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum().item()
    demands_matrix = demands[:, None] * demands
    demands_matrix -= demands_matrix.diag()
    demands_matrix /= demands_matrix.sum(dim=1, keepdim=True)
    distance_matrix /= distance_matrix.sum(dim=1, keepdim=True)
    combined_matrix = demands_matrix * distance_matrix
    combined_matrix *= (1 / (demands + 1e-8))
    heuristics = torch.clamp(combined_matrix, min=0)
    return heuristics
```
