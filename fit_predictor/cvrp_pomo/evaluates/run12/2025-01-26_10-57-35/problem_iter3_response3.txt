```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initialize a tensor with high negative values
    heuristics = torch.full(distance_matrix.shape, -float('inf'))
    # Set diagonal elements to zero
    torch.fill_diagonal_(heuristics, 0)
    # Vectorized approach to calculate potential heuristic values
    # considering the demand at each node
    for i in range(n):
        for j in range(1, n):
            heuristics[i, j] = -heuristics[i, j] if demands[j] > 0 else heuristics[i, j]
    return heuristics
```
