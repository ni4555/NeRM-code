```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Demand matrix for self-comparison
    demand_matrix = demands[:, None] * demands
    
    # Subtract diagonal (self-demand), normalize by the total demand for each node
    demand_matrix = demand_matrix - torch.diag(demand_matrix)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate weighted distance matrix
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    weighted_distance_matrix /= weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraint by using the inverse of demand
    capacity_factor = (1 / (demands + 1e-8))  # Avoid division by zero
    
    # Calculate heuristic by combining weighted distance, demand, and capacity factor
    heuristics = weighted_distance_matrix + demand_matrix * capacity_factor
    
    # Apply a logarithmic scale to balance demand and distance
    heuristics = torch.log1p(heuristics)
    
    # Normalize the heuristics to avoid dominance and ensure stability
    max_heuristic = heuristics.max()
    normalized_heuristics = heuristics / max_heuristic
    
    # Adjust penalties for capacity based on demand
    overcapacity_penalty = (demands > 1).float() * -10
    undercapacity_penalty = (demands < 1).float() * 5
    
    # Use the penalty that is greater based on the demand
    adjusted_penalty = torch.max(overcapacity_penalty, undercapacity_penalty)
    
    # Apply the penalties to the heuristics
    heuristics += normalized_heuristics * adjusted_penalty
    
    # Adjust heuristics to balance distance and demand directly
    demand_balance_factor = 1 + demands
    heuristics *= demand_balance_factor
    
    # Apply dampening factor to the heuristics to prevent dominance
    dampening_factor = 0.9
    heuristics *= dampening_factor
    
    # Optimize by focusing on key factors such as capacity and loop minimization
    capacity_factor = (1 / (demands + 1e-8))  # Avoid division by zero
    heuristics += (capacity_factor - 1) * demands
    
    # Apply additional adjustments for loop minimization
    loop_heuristics = heuristics + heuristics.T - torch.diag(heuristics)
    loop_heuristics[loop_heuristics > 0] = 0
    heuristics += loop_heuristics
    
    return heuristics
```
