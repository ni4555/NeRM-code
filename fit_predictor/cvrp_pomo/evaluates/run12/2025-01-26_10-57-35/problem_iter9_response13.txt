```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    demand_matrix = (demands[:, None] * demands).view(n, -1) - torch.diagflat(demands)
    demand_matrix /= demand_matrix.sum(dim=1, keepdim=True)
    
    # Calculate the weighted distance matrix based on demand
    weighted_distance_matrix = distance_matrix * demand_matrix
    
    # Normalize the weighted distance matrix
    normalized_weighted_distance_matrix = weighted_distance_matrix / weighted_distance_matrix.sum(dim=1, keepdim=True)
    
    # Integrate capacity constraints by considering the inverse of demand
    # This helps in prioritizing routes with higher demands
    demand_weight = (1 / (demands + 1e-8)).view(n, -1)
    
    # Combine normalized demand, normalized distance, and demand weight
    heuristics = normalized_weighted_distance_matrix * demand_weight
    
    # Clip the negative values to zero, as they are undesirable
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
