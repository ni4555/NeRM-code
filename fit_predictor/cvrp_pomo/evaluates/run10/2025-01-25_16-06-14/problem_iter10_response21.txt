```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Apply a non-linear transformation to both the normalized distances and scaled demands
    # to enhance the gradient-based search and account for different magnitudes
    non_linear_distance = torch.exp(normalized_distance_matrix)  # Using exponential for non-linearity
    non_linear_demand = (torch.tanh(scaled_demands) + 1) / 2  # Sigmoid-like function
    # Balance demand and distance significance by introducing a demand penalty factor
    demand_penalty_factor = torch.clamp(1 - scaled_demands, min=0.1)
    # Combine the non-linear transformations by subtracting the demand term from the distance term
    # and applying the demand penalty
    combined_heuristic = non_linear_distance - non_linear_demand * demand_penalty_factor
    # Introduce symmetry by ensuring the heuristic is the same for both directions of the edge
    combined_heuristic = (combined_heuristic + combined_heuristic.t()) / 2
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
