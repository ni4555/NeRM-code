```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate cumulative demand for each node
    cumulative_demand = demands.cumsum(0)
    # Calculate the difference between cumulative demand and vehicle capacity
    capacity = 1.0  # Assuming the vehicle capacity is 1 for normalization
    demand_diff = (cumulative_demand - capacity).clamp(min=0)
    # Normalize the demand difference to get a heuristic value
    normalized_demand_diff = (demand_diff - demand_diff.min()) / (demand_diff.max() - demand_diff.min())
    # Apply a non-linear transformation to the heuristic values, including a weight on the distance
    # The weight can be a function of the demand difference
    weight = 1 + normalized_demand_diff * 10  # Example weight function
    heuristic_values = -torch.abs(demand_diff) * torch.pow(distance_matrix, 1.5) * weight
    return heuristic_values
```
