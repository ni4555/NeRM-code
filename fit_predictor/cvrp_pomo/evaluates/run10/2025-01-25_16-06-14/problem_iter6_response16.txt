```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    
    # Normalize demands by the vehicle capacity
    normalized_demands = demands / demands.max()
    
    # Calculate cumulative normalized demand
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # Calculate the absolute difference from the normalized demand
    demand_diff = torch.abs(cumulative_demand - 1.0)
    
    # Apply a non-linear transformation to emphasize critical edges
    transformed_demand_diff = torch.pow(demand_diff, 0.5)
    
    # Incorporate distance-based adjustments
    adjusted_distance = normalized_distance_matrix * transformed_demand_diff
    
    # Avoid negative heuristic values and scale the heuristics
    positive_adjusted_distance = torch.clamp(adjusted_distance, min=0)
    
    # Dampen the heuristics to balance edge influence
    heuristics = 1.0 / (1.0 + positive_adjusted_distance)
    
    return heuristics
```
