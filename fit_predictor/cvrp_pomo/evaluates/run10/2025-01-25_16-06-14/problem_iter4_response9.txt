```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_distance_matrix = distance_matrix / total_demand
    scaled_demands = demands / demands.max()
    
    # Using non-linear transformations: exponential decay for distance and hyperbolic tangent for demand
    exp_decay_distance = torch.exp(-normalized_distance_matrix)
    tanh_demand = torch.tanh(scaled_demands)
    
    # Combine the non-linear transformations with a weight to emphasize either distance or demand
    combined_heuristic = exp_decay_distance - tanh_demand * 2.0  # Adjust the weight as needed
    
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
