```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Integrate symmetry by considering both directions of the edge
    symmetrical_distance_matrix = (normalized_distance_matrix + normalized_distance_matrix.t()) / 2
    # Balance demand and distance significance by using a weighted sum
    # The weight for demand is set to be higher than the weight for distance
    demand_weight = 0.7  # Adjusted to emphasize demand over distance
    distance_weight = 1 - demand_weight  # The remaining weight goes to distance
    # Introduce a small constant to avoid division by zero
    epsilon = 1e-8
    # Combine the demand and distance heuristics with a non-linear transformation
    combined_heuristic = demand_weight * torch.log(1 + scaled_demands) - distance_weight * torch.log(1 + symmetrical_distance_matrix)
    # Normalize the heuristic values to ensure they are between 0 and 1
    normalized_combined_heuristic = combined_heuristic / (combined_heuristic.max() + epsilon)
    # Invert the sign to get negative values for undesirable edges
    return -normalized_combined_heuristic
```
