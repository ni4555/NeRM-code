```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    # Iterate through each customer and its demand
    for i in range(1, len(demands)):
        # Calculate the cumulative demand from the customer to the end
        cumulative_demand = demands[i:].sum()
        # Normalize the cumulative demand
        cumulative_demand = cumulative_demand / total_demand
        # Subtract the cumulative demand from the distance matrix to create a heuristic
        heuristic_matrix[i] = distance_matrix[i] - cumulative_demand
    # Invert the sign to get negative values for undesirable edges
    return -heuristic_matrix
```
