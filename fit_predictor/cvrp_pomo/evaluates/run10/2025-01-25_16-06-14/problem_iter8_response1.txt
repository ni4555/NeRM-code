```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Use a non-linear transformation (e.g., exponential) to emphasize capacity constraints
    # where higher demands receive a larger weight
    demand_weight = torch.exp(scaled_demands)
    # Combine the normalized distances and the weighted demands, with a higher weight for demand
    combined_heuristic = normalized_distance_matrix - demand_weight
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
