```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """A more sophisticated heuristic that assigns higher weights to edges with shorter distances and lower demands."""
    # Normalize demand vector by total capacity for easier comparison
    normalized_demands = demands / demands.sum()
    
    # Calculate the weight of each edge as the sum of its inverse distance and normalized demand
    edge_weight = 1 / (distance_matrix + 1e-8) + normalized_demands
    
    # Use a negative sign for the weight to indicate that we want to minimize this value
    # We also want to penalize high demands, so we subtract the demand value
    return -edge_weight * (1 - demands)
```
