```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate cumulative demand up to each node
    cumulative_demand = demands.cumsum(0)
    # Calculate the difference between cumulative demand and the remaining capacity at each node
    remaining_capacity = (cumulative_demand - demands[:, None]).clamp(min=0)
    # Calculate the heuristic value as the negative product of distance and remaining capacity
    heuristic_values = -distance_matrix * remaining_capacity
    # Apply global constraints by ensuring no negative values
    heuristic_values = heuristic_values.clamp(min=0)
    return heuristic_values
```
