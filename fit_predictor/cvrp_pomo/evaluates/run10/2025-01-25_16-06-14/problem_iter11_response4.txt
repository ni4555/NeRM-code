```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Use a logarithmic transformation to normalize the distance matrix
    log_distance_matrix = torch.log(normalized_distance_matrix + 1e-8)  # Adding a small constant to avoid log(0)
    # Use a logarithmic transformation to normalize the demands
    log_demand_matrix = torch.log(scaled_demands + 1e-8)  # Adding a small constant to avoid log(0)
    # Combine the logarithmic transformations by subtracting the demand term from the distance term
    combined_heuristic = log_distance_matrix - log_demand_matrix
    # Invert the sign to get negative values for undesirable edges
    return -combined_heuristic
```
