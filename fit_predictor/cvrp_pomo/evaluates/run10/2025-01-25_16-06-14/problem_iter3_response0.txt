```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Combine the normalized distances and scaled demands in a single step
    # to create a heuristic. We use a negative logarithm to emphasize larger demands
    # and smaller distances, which are more promising.
    combined_heuristic = -torch.log(normalized_distance_matrix + scaled_demands)
    # The negative logarithm will naturally produce negative values for undesirable edges
    return combined_heuristic
```
