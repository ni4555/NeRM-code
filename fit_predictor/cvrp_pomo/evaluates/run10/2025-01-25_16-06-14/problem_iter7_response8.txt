```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Apply a non-linear transformation to both the normalized distances and scaled demands
    # to enhance the gradient-based search and account for different magnitudes
    non_linear_distance = torch.exp(normalized_distance_matrix)  # Using exponential for non-linearity
    non_linear_demand = torch.clamp(scaled_demands, min=0.1) * (2 * torch.sin(torch.acos(scaled_demands)))  # Sigmoid-like function
    # Instead of subtracting, use a weighted sum to balance the contribution of distance and demand
    # The weights are chosen based on the relative importance of distance vs. demand
    weight_distance = 0.7
    weight_demand = 0.3
    combined_heuristic = weight_distance * non_linear_distance + weight_demand * non_linear_demand
    # Normalize the combined heuristic to have a symmetric distribution around zero
    min_val = combined_heuristic.min()
    max_val = combined_heuristic.max()
    normalized_combined_heuristic = (combined_heuristic - min_val) / (max_val - min_val)
    # Invert the sign to get negative values for undesirable edges
    return -normalized_combined_heuristic
```
