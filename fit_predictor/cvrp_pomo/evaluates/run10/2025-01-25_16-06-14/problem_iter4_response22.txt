```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand for each node
    cumulative_demand = demands.cumsum(0)
    # Calculate the difference between cumulative demand and vehicle capacity
    demand_diff = (cumulative_demand - demands[:, None]).clamp(min=0)
    # Normalize the demand difference by the distance matrix to balance the influence
    normalized_demand_diff = demand_diff / (distance_matrix.clamp(min=1e-8)).pow(0.5)
    # Apply a logarithmic transformation to enhance the gradient flow
    heuristic_values = torch.log(1 + normalized_demand_diff)
    return heuristic_values
```
