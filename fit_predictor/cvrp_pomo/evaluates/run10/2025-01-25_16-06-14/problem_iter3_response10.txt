```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Use a linear combination of scaled demands and a negative logarithm of distances
    # This encourages short distances and high demands, while penalizing longer distances
    heuristic = scaled_demands * torch.log(1 + distance_matrix)
    return heuristic
```
