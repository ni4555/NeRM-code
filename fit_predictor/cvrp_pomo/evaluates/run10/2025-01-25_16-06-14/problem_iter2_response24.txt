```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic for CVRP considering both demand and distance factors."""
    total_demand = demands.sum()
    demand_factor = (demands / total_demand).unsqueeze(1)
    distance_factor = 1 / (distance_matrix + 1e-5)  # Add a small constant to avoid division by zero
    
    # Use a combination of the factors to determine the heuristic value
    heuristic_value = -demand_factor * distance_factor * distance_matrix
    
    # Normalize the heuristic values so that desirable edges have positive values
    max_value = heuristic_value.max()
    min_value = heuristic_value.min()
    normalized_value = (heuristic_value - min_value) / (max_value - min_value)
    
    return normalized_value
```
