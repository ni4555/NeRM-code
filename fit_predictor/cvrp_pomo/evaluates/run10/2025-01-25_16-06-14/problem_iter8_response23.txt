```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate cumulative demand for each node
    cumulative_demand = demands.cumsum(0)
    # Calculate the difference between cumulative demand and vehicle capacity
    capacity = 1.0  # Assuming the vehicle capacity is 1 for normalization
    demand_diff = (cumulative_demand - capacity).clamp(min=0)
    # Normalize the demand difference to get a heuristic value
    # Apply a logarithmic transformation to the demand difference to penalize large gaps
    # and a power transformation to the distance to give higher weight to edges
    # with lower distances, and penalize edges with higher distances
    heuristic_values = torch.log(1 + torch.abs(demand_diff)) * (1 - demand_diff) * torch.pow(distance_matrix, -0.5)
    return heuristic_values
```
