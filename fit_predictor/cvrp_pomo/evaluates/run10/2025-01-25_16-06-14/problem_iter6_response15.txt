```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate cumulative demand for each node
    cumulative_demand = demands.cumsum(0)
    # Calculate the difference between cumulative demand and vehicle capacity
    capacity = 1.0  # Assuming the vehicle capacity is 1 for normalization
    demand_diff = (cumulative_demand - capacity).clamp(min=0)
    # Apply a non-linear transformation to the demand difference
    non_linear_demand = torch.relu(1.5 * demand_diff)
    # Normalize distances by dividing by the max distance to ensure values are comparable
    normalized_distance = distance_matrix / torch.max(distance_matrix)
    # Combine non-linear demand and normalized distance using a weighted sum
    heuristic_values = non_linear_demand * normalized_distance
    return heuristic_values
```
