```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate cumulative demand for each node
    cumulative_demand = demands.cumsum(0)
    # Calculate the difference between cumulative demand and vehicle capacity
    capacity = 1.0  # Assuming the vehicle capacity is 1 for normalization
    demand_diff = (cumulative_demand - capacity).clamp(min=0)
    # Apply a non-linear transformation to the demand difference to enhance the heuristic
    # Use a softplus function to penalize high demand differences
    demand_diff_transformed = torch.nn.functional.softplus(-demand_diff)
    # Normalize the demand difference to get a heuristic value
    # Enhance weight on high demand differences and consider distance as a secondary factor
    heuristic_values = -demand_diff_transformed * torch.pow(distance_matrix, 0.5)
    return heuristic_values
```
