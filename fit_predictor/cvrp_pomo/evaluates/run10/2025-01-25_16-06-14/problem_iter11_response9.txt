```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the total demand
    total_demand = demands.sum()
    # Normalize the distance matrix by the total demand
    normalized_distance_matrix = distance_matrix / total_demand
    # Scale demands to the range [0, 1]
    scaled_demands = demands / demands.max()
    # Apply a non-linear transformation to both the normalized distances and scaled demands
    # using a different non-linear function to enhance the gradient-based search
    non_linear_distance = torch.tanh(normalized_distance_matrix)  # Using tanh for non-linearity
    non_linear_demand = torch.log1p(torch.exp(-2 * (scaled_demands - 0.5)))  # Sigmoid-like function
    # Combine the non-linear transformations by subtracting the demand term from the distance term
    combined_heuristic = non_linear_distance - non_linear_demand
    # Adjust the parameters for problem adaptation by adding a small constant to avoid zero values
    adjusted_heuristic = combined_heuristic + 0.01
    # Invert the sign to get negative values for undesirable edges
    return -adjusted_heuristic
```
