```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = demands.cumsum(0)
    # Calculate the difference between cumulative demand and vehicle capacity
    demand_diff = (cumulative_demand - demands[:, None]).clamp(min=0)
    # Normalize the demand difference to get a heuristic value
    # We use a soft-clamp to avoid infinite values and subtract the demand to penalize high demands
    heuristic_values = -distance_matrix * torch.sigmoid(demand_diff)
    return heuristic_values
```
