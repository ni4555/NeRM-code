```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate cumulative demand for each node
    cumulative_demand = demands.cumsum(0)
    # Calculate the difference between cumulative demand and vehicle capacity
    capacity = 1.0  # Assuming the vehicle capacity is 1 for normalization
    demand_diff = (cumulative_demand - capacity).clamp(min=0)
    # Normalize the demand difference and apply a logarithmic transformation
    heuristic_values = -torch.log1p(torch.abs(demand_diff)) * distance_matrix
    # Incorporate distance decay by applying an exponential decay function
    distance_decay = torch.exp(-distance_matrix)
    # Apply additional penalties for high cumulative demand and long distances
    high_demand_penalty = torch.max(demand_diff) * distance_decay
    long_distance_penalty = torch.max(distance_decay) * torch.exp(-torch.log(distance_decay))
    # Combine the heuristics with penalties
    heuristic = heuristic_values - high_demand_penalty - long_distance_penalty
    return heuristic
```
