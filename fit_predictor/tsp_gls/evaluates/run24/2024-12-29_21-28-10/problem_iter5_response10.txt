```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Define neighborhood sizes
    neighborhood_sizes = [1, 2, 3]

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate local edge properties
                local_edge_prop = distance_matrix[i, j]

                # Calculate global connectivity metrics
                global_connectivity = np.sum(distance_matrix[i, :]) + np.sum(distance_matrix[j, :])
                
                # Calculate the nearest neighbor distances
                nearest_neighbors_i = np.argsort(distance_matrix[i, :])[1:4]  # Get the 3 nearest neighbors excluding itself
                nearest_neighbors_j = np.argsort(distance_matrix[j, :])[1:4]
                
                # Calculate the average distance to the nearest neighbors
                avg_dist_i = np.mean(distance_matrix[i, nearest_neighbors_i])
                avg_dist_j = np.mean(distance_matrix[j, nearest_neighbors_j])

                # Adaptive weighting based on neighborhood size
                weights = [1, 0.9, 0.8, 0.7]
                weighted_local_prop = weights[0] * local_edge_prop + sum(weights[1:]) * (global_connectivity - avg_dist_i - avg_dist_j)

                # Assign heuristic value
                heuristics[i, j] = weighted_local_prop

    return heuristics
```
