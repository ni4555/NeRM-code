```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a heuristic based on the average distance of the edges connected to each node
    # We assume that if a node has shorter connected edges, it's better to keep it in the tour
    num_nodes = distance_matrix.shape[0]
    average_distances = np.sum(distance_matrix, axis=1) / (num_nodes - 1)
    # We also consider the minimum distance connected to each node as a heuristic
    min_distances = np.min(distance_matrix, axis=1)
    # Combine the two heuristics with a weighted sum, where min_distance has higher weight
    combined_heuristic = average_distances * 0.5 + min_distances * 0.5
    # Return a matrix with the same shape as the input with the new heuristic values
    return combined_heuristic
```
