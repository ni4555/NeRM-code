```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a heuristic that penalizes long edges and rewards short ones
    # Additionally, it encourages the inclusion of edges that have been
    # removed in the last few iterations, as a way to break local optima
    penalty_factor = 2
    removal_reward_factor = 0.5
    
    # Initialize the heuristic matrix with the same size as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Loop through the matrix to calculate the heuristics
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # If the edge has been removed in the last iteration, give it a small reward
                reward = removal_reward_factor if distance_matrix[i, j] == np.inf else 0
                # Calculate the heuristic as a weighted sum of the edge length and the reward
                heuristic_matrix[i, j] = distance_matrix[i, j] * penalty_factor + reward
    
    return heuristic_matrix
```
