```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance of all edges
    average_distance = np.mean(distance_matrix)
    
    # Heuristic: Use a global average distance and a threshold to identify "bad" edges
    # "Bad" edges are those that are significantly longer than the average distance
    # We use a logarithmic scale to identify very long edges more strongly
    log_threshold = np.log(average_distance * 1.5)
    bad_edges = np.log(distance_matrix) > log_threshold
    
    # Create a matrix with large values for bad edges and small values for good edges
    heuristics_matrix = np.exp(log_threshold - np.log(distance_matrix))
    
    # Normalize the matrix to ensure all values are between 0 and 1
    # This helps in maintaining diversity in the search
    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    
    return heuristics_matrix
```
