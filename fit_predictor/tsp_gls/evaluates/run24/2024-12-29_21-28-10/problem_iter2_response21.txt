```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    
    # Incorporate local information: edges are worse if they are longer than the minimum distance
    # from one of the nodes to any other node
    for i in range(n):
        for j in range(n):
            if i != j:
                if distance_matrix[i][j] > min_distances[i]:
                    heuristic_matrix[i][j] = distance_matrix[i][j] - min_distances[i]
    
    # Incorporate global information: edges are better if they connect nodes with higher overall
    # distances from the rest of the graph, considering the average minimum distances from each
    # node to any other node
    for i in range(n):
        for j in range(n):
            if i != j:
                average_min_distance = np.mean(min_distances)
                if distance_matrix[i][j] < average_min_distance:
                    heuristic_matrix[i][j] = average_min_distance - distance_matrix[i][j]
    
    # Normalize the heuristic values to ensure they are non-negative
    heuristic_matrix = np.clip(heuristic_matrix, 0, None)
    
    return heuristic_matrix
```
