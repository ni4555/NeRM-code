```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Use a weighted approach that combines the edge-specific properties
                # with a global perspective, avoiding rigid thresholds
                weight_i = 1 / (1 + min_dist_i)
                weight_j = 1 / (1 + min_dist_j)
                global_min = np.min(distance_matrix)
                heuristics[i, j] = distance_matrix[i, j] - (weight_i + weight_j) * global_min

    return heuristics
```
