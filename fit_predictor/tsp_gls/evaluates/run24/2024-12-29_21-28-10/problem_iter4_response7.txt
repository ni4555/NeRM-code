```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distances to the k-nearest neighbors for both nodes
                k = 3  # Number of nearest neighbors to consider
                sorted_distances_i = np.sort(distance_matrix[i, :])
                sorted_distances_j = np.sort(distance_matrix[j, :])
                
                # Select the k-th nearest neighbor distances
                min_dist_i = sorted_distances_i[k-1]
                min_dist_j = sorted_distances_j[k-1]
                second_min_dist_i = sorted_distances_i[k]
                second_min_dist_j = sorted_distances_j[k]
                third_min_dist_i = sorted_distances_i[k+1]
                third_min_dist_j = sorted_distances_j[k+1]
                
                # Calculate the heuristic based on the differences between the edge and the k-th nearest neighbor distances
                edge_diff_i = distance_matrix[i, j] - (min_dist_i + second_min_dist_i)
                edge_diff_j = distance_matrix[j, i] - (min_dist_j + second_min_dist_j)
                
                # Scale the heuristic with the average of the k-th nearest neighbor distances
                heuristics[i, j] = edge_diff_i / ((min_dist_i + second_min_dist_i) / 2)
                heuristics[j, i] = edge_diff_j / ((min_dist_j + second_min_dist_j) / 2)

    return heuristics
```
