```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Define a function to calculate the local connectivity of a node
    def local_connectivity(node, distance_matrix, k):
        return np.partition(distance_matrix[node], k)[:k]

    # Iterate over all nodes to calculate the heuristic for each edge
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate local connectivity metrics
                local_i = local_connectivity(i, distance_matrix, 3)
                local_j = local_connectivity(j, distance_matrix, 3)

                # Calculate a weighted sum of local connectivity metrics
                # Weights can be adjusted based on the desired balance between local and global
                weight_i = 0.5
                weight_j = 0.5
                local_i_sum = np.sum(local_i)
                local_j_sum = np.sum(local_j)
                local_diff = np.abs(local_i_sum - local_j_sum)

                # Calculate the heuristic value
                heuristics[i, j] = distance_matrix[i, j] - (weight_i * local_i_sum + weight_j * local_j_sum + local_diff)

    return heuristics
```
