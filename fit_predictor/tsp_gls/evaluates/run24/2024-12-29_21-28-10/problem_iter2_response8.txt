```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                edge_dist = distance_matrix[i, j]
                # Calculate the centrality based on the sum of edge weights from
                # a node to all other nodes minus the current edge's weight.
                # A node with more edges is considered more central.
                centrality = np.sum(distance_matrix[i, :]) - edge_dist + \
                             np.sum(distance_matrix[:, j]) - edge_dist
                # Normalize the centrality to account for nodes with a degree of 1
                # (which would otherwise have an infinite centrality value)
                centrality = np.where(centrality == 0, 1, centrality)
                # Use a balance between edge length and centrality to create heuristic
                heuristic_value = edge_dist + (1 / centrality)
                # Store the calculated heuristic value for the edge
                heuristic_matrix[i, j] = heuristic_value

    return heuristic_matrix
```
