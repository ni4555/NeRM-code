```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the local distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Calculate the global distance to the farthest neighbor for both nodes
                max_dist_i = np.max(distance_matrix[i, :])
                max_dist_j = np.max(distance_matrix[j, :])
                
                # Weigh local and global distances differently
                local_weight = 0.6
                global_weight = 0.4
                
                # Update the heuristic value
                heuristics[i, j] = distance_matrix[i, j] - (
                    local_weight * (min_dist_i + min_dist_j) +
                    global_weight * (max_dist_i + max_dist_j)
                )

    # Introduce adaptive weighting to avoid getting stuck in local optima
    adaptive_factor = np.exp(-np.sum(heuristics) / np.sum(distance_matrix))
    heuristics *= adaptive_factor

    return heuristics
```
