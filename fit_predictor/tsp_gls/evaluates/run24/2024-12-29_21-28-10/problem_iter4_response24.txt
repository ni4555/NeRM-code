```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Calculate the sum of distances from i to all other nodes and from j to all other nodes
                sum_dist_i = np.sum(distance_matrix[i, :])
                sum_dist_j = np.sum(distance_matrix[j, :])
                
                # Calculate the degree of each node
                degree_i = np.sum(distance_matrix[i, :]) - distance_matrix[i, i]
                degree_j = np.sum(distance_matrix[j, :]) - distance_matrix[j, j]
                
                # Calculate the heuristic value based on the sum of distances and degrees
                heuristics_value = (distance_matrix[i, j] - (min_dist_i + min_dist_j)) / (sum_dist_i + sum_dist_j + degree_i + degree_j)
                
                # Cap the heuristic value at 1 to avoid overflow in some algorithms
                heuristics_matrix[i, j] = np.min([heuristics_value, 1])
    
    return heuristics_matrix
```
