```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the relative distance to the nearest neighbor for each node
    relative_distances = np.inf * np.ones((num_nodes, num_nodes))
    for i in range(num_nodes):
        # Find the nearest neighbor and its distance
        nearest_neighbor = np.argmin(distance_matrix[i, :])
        nearest_neighbor_distance = distance_matrix[i, nearest_neighbor]
        relative_distances[i, nearest_neighbor] = nearest_neighbor_distance
        relative_distances[nearest_neighbor, i] = nearest_neighbor_distance

    # Prioritize edges that have smaller relative distances
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristic_matrix[i, j] = (distance_matrix[i, j] - relative_distances[i, j]) / relative_distances[i, j]

    # Reduce the heuristic value of edges that connect to only one node
    for i in range(num_nodes):
        num_neighbors = np.sum(~np.isinf(heuristic_matrix[i, :]))
        if num_neighbors < 2:
            for j in range(num_nodes):
                if heuristic_matrix[i, j] != np.inf:
                    heuristic_matrix[i, j] *= 0.5

    # Clamp the heuristic values to be non-negative
    heuristic_matrix = np.clip(heuristic_matrix, 0, None)

    return heuristic_matrix
```
