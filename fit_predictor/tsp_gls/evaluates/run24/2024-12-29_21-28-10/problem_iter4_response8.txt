```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Calculate the average distance to the nearest neighbors for both nodes
                avg_min_dist_i = np.mean(distance_matrix[i, :np.argmin(distance_matrix[i, :])])
                avg_min_dist_j = np.mean(distance_matrix[j, :np.argmin(distance_matrix[j, :])])
                
                # Use an adaptive weighting scheme that considers the average nearest neighbor distance
                weight_i = 1 / (1 + avg_min_dist_i)
                weight_j = 1 / (1 + avg_min_dist_j)
                
                # Consider the overall minimum distance in the matrix as a global factor
                global_min = np.min(distance_matrix)
                
                # Heuristic value is the edge weight adjusted by the weights of both nodes and the global minimum
                heuristics[i, j] = distance_matrix[i, j] - (weight_i + weight_j) * global_min

    return heuristics
```
