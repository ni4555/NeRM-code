```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the mean distance to all nodes
                mean_dist = np.mean(distance_matrix[i, :])
                
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Calculate the balance factor between the direct edge and the nearest neighbor distance
                balance_factor = min_dist_i + min_dist_j - 2 * mean_dist
                
                # Use the balance factor to adjust the heuristic
                heuristics[i, j] = balance_factor
                
                # Encourage larger differences between the edge and the mean distance for longer edges
                edge_diff = abs(distance_matrix[i, j] - mean_dist)
                heuristics[i, j] += edge_diff / np.mean(distance_matrix)
                
                # Penalize edges that are significantly longer than the average distance
                if distance_matrix[i, j] > mean_dist * 1.5:
                    heuristics[i, j] *= 1.2
                
                # Encourage edges that are closer to the mean distance
                heuristics[i, j] -= 0.1 * edge_diff

    return heuristics
```
