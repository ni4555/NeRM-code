```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Introduce a dynamic weight based on the edge usage and distance
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            # Calculate the dynamic weight based on edge usage and a decreasing function of distance
            weight = (1 + np.sum(distance_matrix[i] * distance_matrix[:, j])) * np.exp(-distance_matrix[i][j] / (np.sum(distance_matrix) / np.size(distance_matrix)))
            usage_matrix[i][j] = usage_matrix[j][i] = weight
    
    # Adjust the heuristic values to avoid local minima by penalizing heavily used edges
    penalty_factor = 0.5
    penalty_matrix = np.sum(distance_matrix, axis=0) ** penalty_factor
    heuristic_matrix = usage_matrix - penalty_matrix
    
    # Ensure that diagonal elements are not considered as self-loops
    np.fill_diagonal(heuristic_matrix, 0)
    
    return heuristic_matrix
```
