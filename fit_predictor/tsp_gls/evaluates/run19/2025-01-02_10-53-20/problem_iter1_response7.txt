```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a new matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the total distance of the current route
    total_distance = np.sum(distance_matrix)
    
    # Iterate over the distance matrix to adjust the heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Increase the heuristic value for edges that are part of the current route
            if i != j and i < j:  # Avoid double counting and self-loops
                heuristic_matrix[i][j] = distance_matrix[i][j] * (1 + total_distance / distance_matrix[i][j])
            else:
                # Keep the heuristic value unchanged for other edges
                heuristic_matrix[i][j] = distance_matrix[i][j]
    
    # Normalize the heuristic matrix to ensure all values are non-negative
    min_val = np.min(heuristic_matrix)
    max_val = np.max(heuristic_matrix)
    if max_val > min_val:
        heuristic_matrix -= min_val
        heuristic_matrix /= (max_val - min_val)
    
    return heuristic_matrix
```
