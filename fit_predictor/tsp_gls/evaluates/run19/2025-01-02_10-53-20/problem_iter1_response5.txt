```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic takes into account the frequency of edge usage and the distance
    # We create a matrix where each cell is the product of the edge's length and its usage count
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            usage_matrix[i][j] = usage_matrix[j][i] = distance_matrix[i][j] * (1 + np.random.rand() * 0.1)
    
    # Now, we create a heuristic matrix that also penalizes high distances
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            heuristic_matrix[i][j] = heuristic_matrix[j][i] = (1 + usage_matrix[i][j]) * distance_matrix[i][j]

    return heuristic_matrix
```
