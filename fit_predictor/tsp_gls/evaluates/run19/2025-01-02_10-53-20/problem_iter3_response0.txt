```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the usage frequency of each edge
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i, distance_matrix.shape[1]):
            usage_frequency[i, j] += distance_matrix[i, j]
            usage_frequency[j, i] += distance_matrix[i, j]
    
    # Normalize usage frequency to have a mean of 1
    mean_usage = np.mean(usage_frequency)
    normalized_usage = usage_frequency / (mean_usage + 1e-6)  # Adding a small constant to avoid division by zero
    
    # Introduce variability by using a random factor
    random_factor = np.random.rand(*normalized_usage.shape)
    
    # Adjust the distance matrix based on the normalized usage frequency and random factor
    adjusted_distances = distance_matrix / (1 + normalized_usage * random_factor)
    
    # Introduce balance adjustments to ensure that heavily used edges are not penalized too much
    balance_factor = np.maximum(1 - mean_usage, 0)
    adjusted_distances *= balance_factor
    
    # Ensure that the adjusted distances are not negative
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    return adjusted_distances
```
