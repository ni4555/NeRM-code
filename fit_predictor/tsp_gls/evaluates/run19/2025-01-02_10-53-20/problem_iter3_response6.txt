```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a heuristic that incorporates usage data, balance adjustments, and variability
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i, distance_matrix.shape[1]):
            usage_frequency[i, j] += distance_matrix[i, j]
            usage_frequency[j, i] += distance_matrix[i, j]
    
    # Normalize usage frequency to have a mean of 1
    mean_usage = np.mean(usage_frequency)
    normalized_usage = usage_frequency / mean_usage
    
    # Balance adjustments by incorporating a factor that reduces the influence of frequently used edges
    balance_factor = 1 / (1 + np.exp(normalized_usage - 1))
    
    # Introduce variability by adding Gaussian noise to the adjusted distances
    noise = np.random.normal(0, mean_usage, size=distance_matrix.shape)
    adjusted_distances = distance_matrix * (1 + balance_factor + noise)
    
    # Ensure that the adjusted distances are not negative
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    return adjusted_distances
```
