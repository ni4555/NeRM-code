```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance of the current optimal route
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
    
    # Use edge usage to adjust distances with non-linear scaling
    usage_threshold = np.percentile(edge_usage, 75) / n
    adjusted_distances = distance_matrix * (1 + 0.1 * (edge_usage > usage_threshold))
    
    # Apply a small perturbation to the distance matrix to avoid local minima
    perturbation = np.random.random((n, n)) * 0.01 - 0.005
    adjusted_distances += perturbation
    
    # Ensure the adjusted distances do not become negative
    adjusted_distances = np.clip(adjusted_distances, 0, None)
    
    return adjusted_distances
```
