```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            usage_matrix[i][j] = 1 if i != j else 0

    edge_usage_sum = np.sum(usage_matrix)
    average_usage = edge_usage_sum / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))

    # Adjust the heuristic based on the usage of the edge
    adjusted_distances = distance_matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if usage_matrix[i][j] < average_usage:
                adjusted_distances[i][j] += (average_usage - usage_matrix[i][j]) * 1.5
            elif usage_matrix[i][j] > average_usage:
                adjusted_distances[i][j] -= (usage_matrix[i][j] - average_usage) * 1.5

    # Ensure no edge cost is negative
    adjusted_distances = np.maximum(adjusted_distances, np.zeros_like(adjusted_distances))

    return adjusted_distances
```
