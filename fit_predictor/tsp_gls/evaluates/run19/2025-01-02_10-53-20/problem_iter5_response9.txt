```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
            edge_usage[j, i] += 1

    # Normalize the usage data and introduce noise
    edge_usage = (edge_usage - edge_usage.mean()) / edge_usage.std() + np.random.normal(0, 0.01, edge_usage.shape)

    # Non-linear transformation based on the distance and usage
    transformed_distances = np.exp(edge_usage * -distance_matrix) * (1 + distance_matrix / distance_matrix.mean())

    # Introduce variability in the transformation
    transformed_distances *= np.random.normal(1, 0.05, transformed_distances.shape)

    # Control variance by maintaining a balance between short and long edges
    variance_threshold = 0.1
    transformed_distances = np.clip(transformed_distances, transformed_distances.min() * (1 - variance_threshold),
                                   transformed_distances.max() * (1 + variance_threshold))

    # Maintain consistency and prevent premature convergence by ensuring non-negativity
    transformed_distances = np.clip(transformed_distances, 0, transformed_distances.max())

    return transformed_distances
```
