```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            usage_frequency[i, j] = distance_matrix[i, j]
    
    # Normalize the usage frequency to have a mean of 1
    mean_usage = np.mean(usage_frequency)
    normalized_usage = usage_frequency / mean_usage
    
    # Adjust the distance matrix based on the normalized usage frequency
    # Use a non-linear transformation to emphasize longer distances
    adjusted_distances = np.exp(-normalized_usage)
    
    # Ensure the adjusted distances are positive
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    return adjusted_distances
```
