```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    
    # Calculate the usage of each edge
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] = edge_usage[j, i] = 1
    
    # Normalize the usage to get a usage score for each edge
    normalized_usage = edge_usage / (np.sum(edge_usage, axis=1, keepdims=True) + 1e-8)
    
    # Introduce variability with a Gaussian perturbation to avoid local minima
    perturbation = np.random.normal(0, 0.01, (n, n))
    
    # Adjust the perturbation based on the normalized usage score
    perturbation *= normalized_usage
    
    # Add the perturbation to the distance matrix to get the new adjusted distances
    adjusted_distances = distance_matrix + perturbation
    
    # Ensure that the adjusted distances are not negative and cap them at a maximum value
    adjusted_distances = np.maximum(adjusted_distances, 0)
    max_distance = np.max(distance_matrix)
    adjusted_distances = np.minimum(adjusted_distances, max_distance)
    
    return adjusted_distances
```
