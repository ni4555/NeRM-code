```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    
    # Calculate the usage of each edge
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] = edge_usage[j, i] = 1
    
    # Normalize the usage to get frequency
    num_edges = 0.5 * np.sum(edge_usage)
    edge_usage /= num_edges
    
    # Adjust the distance matrix based on the normalized usage
    # Introduce variability to avoid local minima
    adjusted_distances = distance_matrix * (1 + np.random.normal(0, 0.1, n**2).reshape(n, n))
    
    # Ensure the adjusted distances are non-negative
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    # Adjust the distances based on the frequency of usage
    # The higher the frequency, the larger the distance
    adjusted_distances *= np.exp(-10 * edge_usage)
    
    return adjusted_distances
```
