```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, route: np.ndarray) -> np.ndarray:
    # Incorporate the route into the heuristic to penalize heavily used edges
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(len(route)):
        for j in range(i+1, len(route)):
            usage_frequency[route[i], route[j]] += 1
            usage_frequency[route[j], route[i]] += 1
    
    # Introduce variability by adding some noise to the usage frequency
    noise_factor = 0.1 * np.random.rand(num_edges)
    usage_frequency = usage_frequency + noise_factor
    
    # Balance adjustments by reducing the effect of usage frequency
    balance_factor = 0.5
    adjusted_distances = distance_matrix * (1 - balance_factor * usage_frequency)
    
    # Ensure that the adjusted distances are not negative
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    return adjusted_distances
```
