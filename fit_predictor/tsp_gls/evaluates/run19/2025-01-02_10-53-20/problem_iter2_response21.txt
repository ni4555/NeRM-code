```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, route: np.ndarray) -> np.ndarray:
    # Initialize a new matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the total distance of the current route
    total_distance = np.sum(distance_matrix[route[:-1], route[1:]]) + distance_matrix[route[-1], route[0]]
    
    # Create a boolean matrix to indicate which edges are in the current route
    route_edges = np.zeros_like(distance_matrix, dtype=bool)
    route_edges[np.triu_indices_from(route_edges, k=1)] = True
    route_edges[np.tril_indices_from(route_edges, k=-1)] = True
    
    # Iterate over the distance matrix to adjust the heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # If the edge is not in the current route and is not a self-loop
            if i != j and not route_edges[i, j]:
                # Increase the heuristic value for edges that are part of the current route
                heuristic_value = distance_matrix[i, j] * (1 + total_distance / distance_matrix[i, j])
            else:
                # Keep the heuristic value unchanged for other edges
                heuristic_value = distance_matrix[i, j]
            
            # Normalize the heuristic value to ensure all values are non-negative
            min_val = np.min(heuristic_value)
            if min_val < 0:
                heuristic_value -= min_val
                heuristic_value /= np.max(heuristic_value)
            else:
                # Ensure the maximum value is 1
                heuristic_value /= np.max(heuristic_value)
            
            heuristic_matrix[i, j] = heuristic_value
    
    return heuristic_matrix
```
