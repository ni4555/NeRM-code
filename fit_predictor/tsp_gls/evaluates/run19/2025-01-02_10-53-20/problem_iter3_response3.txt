```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the usage frequency as before
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i, distance_matrix.shape[1]):
            usage_frequency[i, j] += distance_matrix[i, j]
            usage_frequency[j, i] += distance_matrix[i, j]
    
    # Normalize usage frequency to have a mean of 1
    mean_usage = np.mean(usage_frequency)
    normalized_usage = usage_frequency / mean_usage
    
    # Introduce variability by adding some random noise to the adjusted distances
    # Noise is scaled with the standard deviation of the usage frequency
    std_usage = np.std(usage_frequency)
    random_noise = np.random.normal(0, std_usage / np.sqrt(num_edges), size=distance_matrix.shape)
    
    # Adjust the distance matrix based on the normalized usage frequency
    adjusted_distances = distance_matrix / (1 + normalized_usage)
    
    # Introduce balance adjustments by ensuring the minimum edge distance is not zero
    min_edge_distance = np.min(distance_matrix[distance_matrix > 0])
    adjusted_distances = np.maximum(adjusted_distances, min_edge_distance)
    
    # Apply the random noise to the adjusted distances
    final_distances = adjusted_distances + random_noise
    
    # Ensure that the final distances are not negative
    final_distances = np.maximum(final_distances, 0)
    
    return final_distances
```
