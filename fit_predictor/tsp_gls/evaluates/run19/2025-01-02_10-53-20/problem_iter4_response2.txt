```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the usage frequency of each edge
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i, distance_matrix.shape[1]):
            usage_frequency[i, j] += distance_matrix[i, j]
            usage_frequency[j, i] += distance_matrix[i, j]
    
    # Normalize usage frequency to have a mean of 1
    mean_usage = np.mean(usage_frequency)
    normalized_usage = usage_frequency / mean_usage
    
    # Inverse proportionality to usage and ensuring non-negative distances
    adjusted_distances = np.where(normalized_usage > 1, distance_matrix / normalized_usage, distance_matrix)
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    # Apply a simple weighting scheme to promote shorter edges
    adjusted_distances *= (1 + np.random.rand(*adjusted_distances.shape) * 0.1)
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    return adjusted_distances
```
