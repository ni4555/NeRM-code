```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic uses the Manhattan distance of each edge from the origin (0,0)
    # to penalize longer edges that are far from the starting point
    n = distance_matrix.shape[0]
    origin = np.zeros((n, 2))
    edge_penalties = np.zeros_like(distance_matrix)
    
    for i in range(n):
        for j in range(i + 1, n):
            # Calculate the Manhattan distance from the origin to the edge (i, j)
            manhattan_dist = abs(i - j) + abs(origin[i][0] - origin[j][0]) + abs(origin[i][1] - origin[j][1])
            edge_penalties[i, j] = edge_penalties[j, i] = manhattan_dist
    
    # Use the distance matrix to adjust penalties, making longer distances even worse
    return distance_matrix + edge_penalties
```
