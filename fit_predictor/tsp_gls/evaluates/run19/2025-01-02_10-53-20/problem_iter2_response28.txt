```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the initial total distance
    initial_total_distance = np.sum(np.sum(distance_matrix, axis=0))

    # Calculate the usage count for each edge
    usage_count = np.zeros_like(distance_matrix, dtype=int)
    route = np.arange(distance_matrix.shape[0])
    for i in range(len(route) - 1):
        usage_count[route[i], route[i+1]] += 1
        usage_count[route[i+1], route[i]] += 1

    # Adjust the edge distances based on usage and edge length
    # Longer and frequently used edges have higher heuristic values
    # Shorter and infrequently used edges have lower heuristic values
    adjusted_distances = (1 - usage_count) * distance_matrix
    adjusted_distances += (distance_matrix - initial_total_distance) * usage_count

    return adjusted_distances
```
