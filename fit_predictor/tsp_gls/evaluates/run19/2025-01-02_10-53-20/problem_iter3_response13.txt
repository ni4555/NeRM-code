```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a heuristic that combines usage data, balance adjustments, and variability
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i, distance_matrix.shape[1]):
            usage_frequency[i, j] += distance_matrix[i, j]
            usage_frequency[j, i] += distance_matrix[i, j]
    
    # Normalize usage frequency to have a mean of 1
    mean_usage = np.mean(usage_frequency)
    normalized_usage = usage_frequency / mean_usage
    
    # Introduce variability by adding Gaussian noise with mean 0 and variance 0.1
    np.random.seed(42)  # For reproducibility
    noise = np.random.normal(0, 0.1, size=normalized_usage.shape)
    noisy_usage = normalized_usage + noise
    
    # Balance adjustments by using a function that decreases weight when usage is high
    balance_factor = np.log(1 + np.exp(-5 * noisy_usage))
    
    # Adjust the distance matrix based on the balance factor
    adjusted_distances = distance_matrix * balance_factor
    
    # Ensure that the adjusted distances are not negative
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    return adjusted_distances
```
