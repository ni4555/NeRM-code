```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, current_route: np.ndarray) -> np.ndarray:
    # Initialize a new matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the total distance of the current route
    total_distance = np.sum(distance_matrix[current_route[:-1], current_route[1:]])
    
    # Track the usage frequency of each edge
    edge_usage = np.zeros_like(distance_matrix, dtype=int)
    for i in range(len(current_route) - 1):
        edge_usage[current_route[i], current_route[i + 1]] += 1
        edge_usage[current_route[i + 1], current_route[i]] += 1
    
    # Iterate over the distance matrix to adjust the heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Increase the heuristic value for frequently used edges to encourage diversity
            if edge_usage[i, j] > 0:
                heuristic_value = distance_matrix[i, j] * (1 + 0.1 * edge_usage[i, j])
            else:
                # Calculate the heuristic value for less frequently used edges
                heuristic_value = distance_matrix[i, j] * (1 + total_distance / distance_matrix[i, j])
            
            # Normalize the heuristic value to avoid dominance
            min_val = np.min(heuristic_value)
            max_val = np.max(heuristic_value)
            if max_val > min_val:
                heuristic_value -= min_val
                heuristic_value /= (max_val - min_val)
            
            heuristic_matrix[i, j] = heuristic_value
    
    return heuristic_matrix
```
