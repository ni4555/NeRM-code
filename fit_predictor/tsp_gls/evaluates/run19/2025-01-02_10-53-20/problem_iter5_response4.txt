```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
            edge_usage[j, i] += 1

    # Normalize the usage data to account for different problem sizes
    normalized_usage = edge_usage / (n * (n - 1) / 2)

    # Non-linearly transform the normalized usage data
    transformed_usage = np.exp(normalized_usage)

    # Balance short and long edges by using a sigmoid function
    sigmoid_edges = 1 / (1 + np.exp(-transformed_usage * 10))
    balance_factor = sigmoid_edges - 0.5

    # Refine penalties based on edge usage and length
    penalty_factor = (1 + 0.1 * (normalized_usage > 0.5)) * (1 + 0.1 * (distance_matrix < distance_matrix.mean()))

    # Calculate the average edge penalty
    average_penalty = np.mean(penalty_factor)

    # Apply penalties to the distance matrix
    adjusted_distances = distance_matrix * penalty_factor

    # Introduce controlled perturbations based on edge properties
    perturbation = np.random.normal(size=(n, n)) * (0.01 * (1 - transformed_usage))

    # Add the perturbation to the adjusted distances
    adjusted_distances += perturbation

    # Normalize for invariance and maintain bounds
    min_distance = 0.01
    max_distance = distance_matrix.max() * 0.9
    adjusted_distances = np.clip(adjusted_distances, min_distance, max_distance)

    # Ensure non-negativity and control variance
    adjusted_distances = np.maximum(adjusted_distances, min_distance)

    return adjusted_distances
```
