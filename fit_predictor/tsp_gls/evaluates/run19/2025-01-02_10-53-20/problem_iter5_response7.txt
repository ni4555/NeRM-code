```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
            edge_usage[j, i] += 1

    # Normalize usage density
    usage_density = edge_usage / (n * (n - 1) / 2)
    normalized_usage_density = (usage_density - np.mean(usage_density)) / np.std(usage_density)

    # Non-linear transformation to adjust distances
    adjusted_distances = distance_matrix * (1 + 0.1 * np.exp(-normalized_usage_density))

    # Introduce noise to promote exploration
    noise = np.random.normal(size=(n, n)) * 0.02
    adjusted_distances += noise

    # Control variance and avoid over-amplification
    variance_threshold = 0.2
    max_variance = np.var(distance_matrix)
    adjusted_distances = np.clip(adjusted_distances, distance_matrix - variance_threshold * max_variance, distance_matrix + variance_threshold * max_variance)

    # Ensure non-negativity and maintain bounds
    min_distance = 0.01
    max_distance = distance_matrix.max()
    adjusted_distances = np.clip(adjusted_distances, min_distance, max_distance)

    return adjusted_distances
```
