```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Adjust the edge distances based on their usage frequency and the length of the route
    usage_count = np.zeros_like(distance_matrix, dtype=int)
    route = np.arange(distance_matrix.shape[0])
    for i in range(len(route) - 1):
        usage_count[route[i], route[i+1]] += 1
        usage_count[route[i+1], route[i]] += 1

    # It's bad to include frequently used long edges in the solution
    # and good to include infrequently used short edges in the solution
    adjusted_distances = distance_matrix * usage_count + (1 - usage_count) * distance_matrix
    return adjusted_distances
```
