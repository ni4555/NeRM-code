```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
            edge_usage[j, i] += 1
    
    # Calculate the median usage to determine the threshold
    median_usage = np.median(edge_usage)
    threshold = median_usage / n
    
    # Adjust distances based on usage
    adjusted_distances = distance_matrix
    for i in range(n):
        for j in range(i+1, n):
            if edge_usage[i, j] > threshold:
                adjusted_distances[i, j] = max(distance_matrix[i, j] + 0.1 * (distance_matrix[i, j] / edge_usage[i, j]), 1)
                adjusted_distances[j, i] = max(distance_matrix[j, i] + 0.1 * (distance_matrix[j, i] / edge_usage[i, j]), 1)
    
    # Introduce randomness to avoid local minima
    perturbation = np.random.random((n, n)) * 0.02 - 0.01
    adjusted_distances += perturbation
    
    # Ensure the matrix is symmetric
    adjusted_distances = (adjusted_distances + adjusted_distances.T) / 2
    
    # Balance between the original distance and the adjusted usage-based distance
    alpha = 0.1
    final_distances = (1 - alpha) * adjusted_distances + alpha * distance_matrix
    
    return final_distances
```
