```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a modified version of the distance matrix that considers the usage frequency of each edge
    edge_usage = np.zeros_like(distance_matrix, dtype=int)
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):
            edge_usage[i][j] += 1
            edge_usage[j][i] += 1

    # Adjust the distance matrix based on the frequency of edge usage
    adjusted_distance_matrix = distance_matrix * (1 + edge_usage)
    
    # It's bad to include frequently used edges with large distances
    return adjusted_distance_matrix
```
