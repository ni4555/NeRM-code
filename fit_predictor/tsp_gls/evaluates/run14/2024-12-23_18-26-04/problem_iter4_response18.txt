```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    edge_frequency = np.zeros_like(distance_matrix, dtype=int)
    
    # Calculate the frequency of each edge
    for i in range(num_vertices):
        for j in range(i+1, num_vertices):
            edge_frequency[i][j] += 1
            edge_frequency[j][i] += 1
    
    # Calculate the mean and variance of the degrees
    mean_degree = np.mean(degrees)
    variance_degree = np.var(degrees)
    
    # Calculate the mean and variance of the edge frequencies
    mean_frequency = np.mean(edge_frequency)
    variance_frequency = np.var(edge_frequency)
    
    # Adjust the distance matrix based on the mean and variance of the degrees and edge frequencies
    adjusted_distances = distance_matrix
    for i in range(num_vertices):
        for j in range(num_vertices):
            if i != j:
                # Higher variance of degree or frequency indicates a less regular distribution
                # Use this information to adjust the edge distance
                adjustment_factor = (variance_degree + variance_frequency) / (degrees[i] + edge_frequency[i][j])
                adjusted_distances[i][j] = distance_matrix[i][j] * (1 + adjustment_factor)
    
    # Ensure that the adjusted distances do not become negative
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    # Penalize self-loops
    np.fill_diagonal(adjusted_distances, np.inf)
    
    return adjusted_distances
```
