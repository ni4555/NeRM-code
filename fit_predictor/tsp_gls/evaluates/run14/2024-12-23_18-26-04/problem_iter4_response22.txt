```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the matrix to keep track of edge usage
    edge_usage = np.zeros_like(distance_matrix, dtype=int)
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):
            edge_usage[i][j] += 1
            edge_usage[j][i] += 1

    # Calculate the total usage for each edge and normalize to get usage frequency
    total_usage = edge_usage.sum()
    usage_frequency = edge_usage / total_usage

    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)

    # Calculate the average degree of all nodes
    average_degree = np.mean(degrees)

    # Create a matrix where the edge importance is based on the inverse of the usage frequency
    # and the balance of node degrees
    importance_matrix = 1 / (1 + usage_frequency + (np.abs(degrees - average_degree) / average_degree))

    # Invert the importance matrix to create a matrix where higher values
    # indicate worse edges to include in the solution
    bad_to_include_matrix = 1 - importance_matrix

    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(bad_to_include_matrix, np.inf)

    return bad_to_include_matrix
```
