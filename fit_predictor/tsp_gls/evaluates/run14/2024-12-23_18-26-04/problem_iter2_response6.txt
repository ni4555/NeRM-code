```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Count the usage of each edge
    edge_usage_count = np.zeros((n, n), dtype=int)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage_count[i, j] += 1
            edge_usage_count[j, i] += 1
    
    # Normalize the edge usage count to get the relative importance of each edge
    edge_importance = edge_usage_count / edge_usage_count.sum()
    
    # Create a matrix where each cell represents the cumulative sum of distances
    # from that cell to the end of the matrix, to calculate the relative
    # importance of each edge.
    row_sums = np.sum(distance_matrix, axis=1)
    column_sums = np.sum(distance_matrix, axis=0)
    
    # Normalize the cumulative sums to create a matrix where the sum is 1 for
    # each row and column.
    normalized_row_sums = row_sums / row_sums.sum()
    normalized_column_sums = column_sums / column_sums.sum()
    
    # Combine the edge importance and the normalized sums to inform edge weights
    weight_matrix = distance_matrix * normalized_row_sums * normalized_column_sums * edge_importance
    
    # Invert the weights to make it "bad" to include heavier edges in the solution
    bad_to_include_matrix = 1 - weight_matrix
    
    return bad_to_include_matrix
```
