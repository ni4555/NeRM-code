```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Adjust the heuristic values based on the degree of the node
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Use the node with the higher degree as a reference point
                if degrees[i] > degrees[j]:
                    # Lower the heuristic for high degree nodes
                    heuristic_matrix[i][j] = distance_matrix[i][j] * (1 + (degrees[i] - degrees[j]) / 10)
                elif degrees[i] < degrees[j]:
                    # Increase the heuristic for low degree nodes
                    heuristic_matrix[i][j] = distance_matrix[i][j] * (1 - (degrees[j] - degrees[i]) / 10)
                else:
                    # If degrees are equal, no adjustment needed
                    heuristic_matrix[i][j] = distance_matrix[i][j]
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    # Normalize the heuristic matrix to avoid biases due to different scales
    min_val = np.min(heuristic_matrix)
    max_val = np.max(heuristic_matrix)
    heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    return heuristic_matrix
```
