```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Adjust the heuristic values based on the degree of the node
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Lower the heuristic for high degree nodes
                if degrees[i] > degrees[j]:
                    heuristic_matrix[i][j] = distance_matrix[i][j] * (1 + (degrees[i] - degrees[j]) / 10)
                # Lower the heuristic for lower degree nodes
                else:
                    heuristic_matrix[i][j] = distance_matrix[i][j] * (1 - (degrees[i] - degrees[j]) / 10)
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    # Invert the heuristic values to make it "bad" to include heavier edges in the solution
    bad_to_include_matrix = 1 - heuristic_matrix
    
    return bad_to_include_matrix
```
