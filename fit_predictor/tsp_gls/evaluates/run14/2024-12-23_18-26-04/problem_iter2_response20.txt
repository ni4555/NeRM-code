```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a matrix that represents the number of times each edge has been used
    usage_matrix = np.zeros_like(distance_matrix)
    np.fill_diagonal(usage_matrix, np.inf)  # Diagonal edges are not used in the TSP

    # Calculate the current tour usage
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            usage_matrix[i, j] = usage_matrix[j, i] = (usage_matrix[i, j] + 1) / 2

    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)

    # Normalize the influence of usage based on node degree
    normalized_usage = (1 / (1 + np.log2(degrees)) * usage_matrix)

    # Adjust edge distances based on usage, normalized influence, and length
    adjusted_distances = distance_matrix * (1 + 0.1 * (normalized_usage - 1))

    # Ensure symmetry of the heuristic matrix
    adjusted_distances = (adjusted_distances + adjusted_distances.T) / 2

    return adjusted_distances
```
