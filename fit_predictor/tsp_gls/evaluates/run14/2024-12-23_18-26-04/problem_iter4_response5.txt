```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    edge_counts = np.zeros_like(distance_matrix)
    
    # Initialize the heuristic matrix with the same values as the distance matrix
    heuristic_matrix = np.copy(distance_matrix)
    
    # Calculate the heuristic based on the degree of the nodes
    for i in range(num_vertices):
        for j in range(num_vertices):
            if i != j:
                edge_counts[i, j] = np.sum(distance_matrix[i, :]) * np.sum(distance_matrix[:, j])
                # Adjust the heuristic value based on the edge usage and degree
                heuristic_value = distance_matrix[i, j] * (1 + edge_counts[i, j] / (degrees[i] * degrees[j]))
                heuristic_matrix[i, j] = min(heuristic_value, distance_matrix[i, j] + 1)
    
    # Ensure that the adjusted distances do not exceed the original distance matrix
    heuristic_matrix = np.minimum(heuristic_matrix, distance_matrix)
    
    return heuristic_matrix
```
