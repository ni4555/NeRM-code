```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate edge usage frequency
    edge_usage = np.zeros_like(distance_matrix, dtype=int)
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):
            edge_usage[i][j] += 1
            edge_usage[j][i] += 1
    
    # Adjust the heuristic values based on the degree and edge usage
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate a heuristic based on degree and edge usage
                heuristic = distance_matrix[i][j] * (1 + (degrees[i] - degrees[j]) / 10)
                # Modify the heuristic based on edge usage frequency
                heuristic *= (1 + edge_usage[i][j] / 10)
                heuristic_matrix[i][j] = heuristic
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
