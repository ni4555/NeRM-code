```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_cities = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with the same values as the distance matrix
    heuristic_matrix = np.copy(distance_matrix)
    
    # Keep track of the total distance traveled to avoid revisiting the same city
    total_distance_traveled = 0
    
    # Keep track of the usage of each edge
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over each city to update the heuristic values
    for city in range(num_cities):
        for next_city in range(num_cities):
            if city != next_city:
                # Increment the usage of the edge between the current city and the next city
                usage_matrix[city, next_city] += 1
                
                # Calculate the heuristic value based on the usage of the edge
                heuristic_value = distance_matrix[city, next_city] / (usage_matrix[city, next_city] + 1)
                
                # Update the heuristic value in the matrix
                heuristic_matrix[city, next_city] = heuristic_value
                
                # Calculate the minimum heuristic value in the neighborhood
                neighborhood_min_value = np.min(heuristic_matrix[city, max(0, next_city-1):min(num_cities, next_city+2)])
                
                # Update the heuristic value to be just above the minimum neighborhood value
                # to avoid local minima
                if heuristic_value > neighborhood_min_value:
                    heuristic_matrix[city, next_city] = neighborhood_min_value * 1.1
                
                # Update the total distance traveled
                total_distance_traveled += distance_matrix[city, next_city]
    
    # Normalize the heuristic values based on the total distance traveled
    # to give a relative importance to each edge
    normalized_heuristic_matrix = heuristic_matrix / total_distance_traveled
    
    return normalized_heuristic_matrix
```
