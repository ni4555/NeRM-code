```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Create a matrix that represents the number of times each edge has been used
    usage_matrix = np.zeros_like(distance_matrix)
    np.fill_diagonal(usage_matrix, np.inf)  # Diagonal edges are not used in the TSP

    # Calculate the current tour usage
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            usage_matrix[i, j] = usage_matrix[j, i] = (usage_matrix[i, j] + 1) / 2

    # Calculate the cumulative sum of distances from each node to all other nodes
    row_sums = np.sum(distance_matrix, axis=1)
    column_sums = np.sum(distance_matrix, axis=0)

    # Normalize the cumulative sums to create a matrix where the sum is 1 for
    # each row and column.
    normalized_row_sums = row_sums / row_sums.sum()
    normalized_column_sums = column_sums / column_sums.sum()

    # Adjust edge distances based on usage, length, and the normalized sums
    adjusted_distances = distance_matrix
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            adjusted_distances[i, j] = adjusted_distances[j, i] = (
                distance_matrix[i, j] * (1 + 0.1 * (1 / usage_matrix[i, j] - 1))
                * normalized_row_sums[i] * normalized_column_sums[j]
            )

    return adjusted_distances
```
