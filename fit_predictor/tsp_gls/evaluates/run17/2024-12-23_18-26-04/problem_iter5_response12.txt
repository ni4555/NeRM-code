```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the usage of each edge
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Normalize the data to avoid negative adjustments
    normalized_distances = (distance_matrix - mean_distance) / std_distance
    
    # Introduce noise for exploration
    noise = np.random.normal(0, 0.01, distance_matrix.shape)
    
    # Introduce non-linear scaling for edge usage
    usage_penalty = np.exp(-edge_usage / 10)
    
    # Balance global vs. local adjustments by using a sigmoid function
    sigmoid_balance = np.tanh(degrees / 100)
    
    # Introduce a regularization term to prevent overfitting
    regularization = np.exp(-np.sum(distance_matrix ** 2) / 10000)
    
    # Adjust the heuristic values based on the factors
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Adjust based on normalized distance with noise
                distance_adjustment = -np.exp(-(normalized_distances[i][j] + noise[i][j]) ** 2 / 2)
                
                # Adjust based on node degree
                adjustment = sigmoid_balance[i] * (degrees[i] - degrees[j]) / 10
                
                # Combine the adjustments
                heuristic_matrix[i][j] = distance_adjustment * (1 + adjustment + usage_penalty[i][j] + regularization)
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
