```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the usage of each edge
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Normalize the node degree and edge usage to ensure a balanced impact
    normalized_degrees = (degrees - np.mean(degrees)) / np.std(degrees)
    normalized_usage = (edge_usage - np.mean(edge_usage)) / np.std(edge_usage)
    
    # Introduce noise for exploration
    noise = np.random.normal(0, 0.01, size=distance_matrix.shape)
    
    # Use non-linear scaling for the adjustments
    adjustment_scale = 10
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Adjust based on node degree with non-linear scaling
                adjustment = (normalized_degrees[i] - normalized_degrees[j]) * adjustment_scale
                
                # Adjust based on edge usage with non-linear scaling
                usage_penalty = (normalized_usage[i] * normalized_usage[j]) ** 0.5
                
                # Adjust based on distance with non-linear scaling and avoid local minima
                distance_adjustment = -np.exp(-(distance_matrix[i][j] - mean_distance) ** 2 / (2 * std_distance ** 2)) * adjustment_scale
                
                # Consider the interaction between nodes, encouraging diversity
                interaction = np.sum(1 / np.maximum(1e-6, distance_matrix[i, :])) + np.sum(1 / np.maximum(1e-6, distance_matrix[:, j]))
                interaction_adjustment = (interaction - 2) / 100
                
                # Combine the adjustments with noise and balance global vs. local adjustments
                heuristic_matrix[i][j] = (distance_matrix[i][j] + adjustment + usage_penalty + distance_adjustment + interaction_adjustment + noise[i][j])
    
    # Prevent overfitting by capping the heuristic values
    heuristic_matrix = np.clip(heuristic_matrix, 0, np.inf)
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
