```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the sum of the squares of the degrees
    sum_of_squares = np.sum(degrees**2)
    
    # Calculate the mean of the squares of the degrees
    mean_of_squares = sum_of_squares / num_vertices
    
    # Calculate the variance of the degrees
    variance = np.sum((degrees - mean_of_squares)**2) / num_vertices
    
    # Adjust the distance matrix based on the variance of the degrees
    # Higher variance implies a more spread out degree distribution, penalize less used edges
    adjusted_distances = distance_matrix + variance * (1 / (degrees + 1))
    
    # Ensure that the adjusted distances do not become negative
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    return adjusted_distances
```
