```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    total_weight = np.sum(distance_matrix)
    
    # Incentivize high-degree edges and penalize low-degree ones
    # Use logarithmic scaling to avoid the problem of very large numbers
    adjusted_distances = distance_matrix + (np.log(degrees + 1) - np.log(num_vertices)) * (total_weight / (num_vertices * np.sum(degrees + 1)))
    
    # Ensure that the adjusted distances do not become negative
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    return adjusted_distances
```
