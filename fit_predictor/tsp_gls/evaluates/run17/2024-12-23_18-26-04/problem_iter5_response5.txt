```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the usage of each edge
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Normalize node degrees and edge usage
    normalized_degrees = (degrees - np.min(degrees)) / (np.max(degrees) - np.min(degrees))
    normalized_usage = (edge_usage - np.min(edge_usage)) / (np.max(edge_usage) - np.min(edge_usage))
    
    # Introduce noise for exploration
    noise = np.random.normal(0, 0.1, distance_matrix.shape)
    
    # Introduce non-linear scaling for adjustments
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Avoid negative adjustments by ensuring the sum of adjustments is non-negative
                adjustment = max(0, normalized_degrees[i] - normalized_degrees[j])
                
                # Use non-linear scaling for edge usage
                usage_penalty = max(0, (normalized_usage[i] * normalized_usage[j]) ** 0.5)
                
                # Use non-linear scaling for distance adjustments
                distance_adjustment = max(0, -np.exp(-(distance_matrix[i][j] - mean_distance) ** 2 / (2 * std_distance ** 2)))
                
                # Introduce noise for exploration while balancing with the heuristic
                noise_adjustment = max(0, noise[i][j])
                
                # Combine the adjustments with a balance between global and local adjustments
                heuristic_matrix[i][j] = distance_matrix[i][j] * (1 + adjustment + usage_penalty + distance_adjustment + noise_adjustment)
    
    # Prevent overfitting by ensuring no node is favored too much
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    # Adapt heuristics dynamically based on current performance
    # Assuming `fitness` is a function that evaluates the current solution
    # and `fitness_threshold` is the target fitness value
    # fitness_threshold = 3.55741
    # while fitness(heuristic_matrix) > fitness_threshold:
    #     # Update the heuristic matrix based on the current performance
    #     pass
    
    return heuristic_matrix
```
