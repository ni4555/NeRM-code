```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the usage of each edge
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Normalize the degree and edge usage
    normalized_degrees = (degrees - np.min(degrees)) / (np.max(degrees) - np.min(degrees))
    normalized_usage = (edge_usage - np.min(edge_usage)) / (np.max(edge_usage) - np.min(edge_usage))
    
    # Use non-linear scaling for the adjustments
    def non_linear_scale(x):
        return (1 / (1 + np.exp(-x)))  # Sigmoid function
    
    # Introduce noise for exploration
    noise = np.random.normal(0, 0.01, size=distance_matrix.shape)
    
    # Balance global vs. local adjustments
    global_adjustment = -np.exp(-(distance_matrix - mean_distance) ** 2 / (2 * std_distance ** 2))
    local_adjustment = np.exp(-np.sum(distance_matrix ** 2, axis=1) / (2 * (std_distance ** 2)))
    
    # Prevent overfitting by limiting the maximum adjustment
    max_adjustment = 5
    adjustments = np.clip(
        non_linear_scale(normalized_degrees - normalized_usage) + global_adjustment + local_adjustment + noise,
        -max_adjustment,
        max_adjustment
    )
    
    # Combine the adjustments with the original distances
    heuristic_matrix = distance_matrix * adjustments
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
