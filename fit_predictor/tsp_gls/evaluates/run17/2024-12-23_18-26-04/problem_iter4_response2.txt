```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    usage_matrix = np.zeros_like(distance_matrix)
    np.fill_diagonal(usage_matrix, np.inf)  # Diagonal edges are not used in the TSP

    # Calculate the current tour usage
    for i in range(n):
        for j in range(i + 1, n):
            usage_matrix[i, j] = usage_matrix[j, i] = (usage_matrix[i, j] + 1) / 2

    # Normalize usage matrix to get a frequency of usage per edge
    max_usage = np.max(usage_matrix)
    normalized_usage_matrix = usage_matrix / max_usage

    # Normalize distances
    max_distance = np.max(distance_matrix)
    normalized_distance_matrix = distance_matrix / max_distance

    # Apply a balance factor for trade-offs
    balance_factor = 0.1

    # Adjust edge distances based on normalized usage, normalized length, and a balance factor
    adjusted_distances = normalized_distance_matrix
    for i in range(n):
        for j in range(i + 1, n):
            # Apply a global perspective by considering the usage and the balance factor
            adjusted_distances[i, j] = adjusted_distances[j, i] = (
                adjusted_distances[i, j] * (1 + balance_factor * (1 - normalized_usage_matrix[i, j]))
            )

    return adjusted_distances * max_distance  # Scale back to original distance scale
```
