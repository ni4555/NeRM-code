```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a matrix to track the usage of each edge
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Initialize the heuristic matrix with the same values as the distance matrix
    heuristic_matrix = np.copy(distance_matrix)
    
    # Function to update the heuristic based on edge usage and neighborhood
    def update_heuristic(i, j):
        # Calculate the mean distance in the neighborhood
        neighborhood_mean = np.mean(heuristic_matrix[i, max(0, j-1):min(distance_matrix.shape[1], j+2)])
        # Calculate the minimum usage in the neighborhood
        min_neighborhood_usage = np.min(usage_matrix[i, max(0, j-1):min(distance_matrix.shape[1], j+2)])
        # Update the heuristic value based on neighborhood
        heuristic_matrix[i, j] = neighborhood_mean + (1 / (min_neighborhood_usage + 1))
    
    # Iterate over the matrix to update the heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                update_heuristic(i, j)
                # Update the usage of the edge
                usage_matrix[i, j] += 1
    
    return heuristic_matrix
```
