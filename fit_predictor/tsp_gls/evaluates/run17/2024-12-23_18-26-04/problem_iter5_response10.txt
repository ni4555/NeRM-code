```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the usage of each edge
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Normalize data to avoid negative adjustments
    normalized_distances = (distance_matrix - mean_distance) / (std_distance + 1e-6)
    
    # Use non-linear scaling for heuristic values
    non_linear_scaling = 1 / (1 + np.exp(-normalized_distances))
    
    # Introduce noise for exploration
    noise = np.random.normal(0, 0.1, distance_matrix.shape)
    
    # Balance global vs. local adjustments
    global_adjustment = 0.1 * np.sum(normalized_distances, axis=1)
    local_adjustment = 0.9 * np.sum(normalized_distances, axis=0)
    
    # Prevent overfitting by limiting the maximum adjustment
    max_adjustment = 1.5
    adjusted_values = np.clip(non_linear_scaling + global_adjustment + local_adjustment + noise, None, max_adjustment)
    
    # Combine all adjustments
    heuristic_matrix = distance_matrix * adjusted_values
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
