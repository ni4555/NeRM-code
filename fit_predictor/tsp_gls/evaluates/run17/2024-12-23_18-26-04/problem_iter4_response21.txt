```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Initialize the heuristic matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over each edge
    for i in range(num_vertices):
        for j in range(i+1, num_vertices):  # To avoid self-loops
            # Calculate the heuristic based on degree, usage, and distance
            heuristic = (degrees[i] * degrees[j]) / (edge_usage[i] * edge_usage[j]) * (distance_matrix[i][j] / mean_distance)
            # Adjust the heuristic based on the standard deviation to encourage diversity
            heuristic += std_distance / (distance_matrix[i][j] + 1)
            # Normalize the heuristic to prevent it from being too large
            heuristic /= (heuristic + 1)
            # Assign the heuristic to the edge
            heuristic_matrix[i][j] = heuristic
            heuristic_matrix[j][i] = heuristic  # Since the matrix is symmetric
    
    return heuristic_matrix
```
