```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the usage of each edge
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Normalize data to avoid negative adjustments
    normalized_degrees = (degrees - np.min(degrees)) / (np.max(degrees) - np.min(degrees))
    normalized_edge_usage = (edge_usage - np.min(edge_usage)) / (np.max(edge_usage) - np.min(edge_usage))
    
    # Use non-linear scaling for more nuanced adjustments
    # Adjust based on node degree with non-linear scaling
    degree_adjustment = 1 / (1 + np.exp(-(degrees - np.mean(degrees)) / (np.std(degrees))))
    
    # Adjust based on edge usage with non-linear scaling
    usage_penalty = 1 / (1 + np.exp(-(normalized_edge_usage - 0.5) * 2))
    
    # Adjust based on distance with non-linear scaling to avoid local minima
    distance_adjustment = -np.log(1 + np.exp(-(distance_matrix - mean_distance) / (std_distance * 5)))
    
    # Introduce noise for exploration
    noise = np.random.normal(0, 0.01, distance_matrix.shape)
    
    # Introduce a balance between global and local adjustments
    global_adjustment = np.exp(-np.sum(distance_matrix ** 2, axis=1) / (2 * (np.sum(distance_matrix, axis=1) ** 2)))
    
    # Consider the interaction between nodes, encouraging diversity
    interaction = np.sum(1 / np.maximum(1e-6, distance_matrix), axis=1) + np.sum(1 / np.maximum(1e-6, distance_matrix), axis=0)
    interaction_adjustment = (np.mean(interaction) - np.min(interaction)) / (np.max(interaction) - np.min(interaction))
    
    # Combine the adjustments
    heuristic_matrix = distance_matrix * (1 + degree_adjustment + usage_penalty + distance_adjustment + noise + global_adjustment + interaction_adjustment)
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    # Prevent overfitting by limiting the maximum value of the heuristic
    max_value = np.max(heuristic_matrix)
    heuristic_matrix = np.clip(heuristic_matrix, None, max_value)
    
    return heuristic_matrix
```
