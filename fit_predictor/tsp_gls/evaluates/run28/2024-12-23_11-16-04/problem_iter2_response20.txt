```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    longest_cycle = np.sort(distance_matrix.sum(axis=0))[-2]
    
    # Create a penalty matrix based on the longest shortest path cycle
    edge_penalty = np.where(distance_matrix == longest_cycle, -np.inf, distance_matrix)
    
    # Apply additional penalties for very long and very short edges
    edge_penalty += (distance_matrix > max_distance * 0.8) * (max_distance - distance_matrix)
    edge_penalty += (distance_matrix < min_distance * 0.2) * (distance_matrix - min_distance)
    
    # Ensure that self-loops (i.e., edges that would connect the same node) are not considered
    self_loops = np.eye(num_nodes, dtype=bool)
    edge_penalty = np.where(self_loops, np.inf, edge_penalty)
    
    return edge_penalty
```
