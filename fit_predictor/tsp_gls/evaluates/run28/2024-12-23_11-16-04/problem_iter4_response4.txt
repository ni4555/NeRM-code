```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    
    # Initialize a penalty matrix with large values for self-loops
    penalty_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Set self-loops to a large value
    np.fill_diagonal(penalty_matrix, np.inf)
    
    # Define edge penalties
    # Short edges (less than 20% of the maximum distance)
    penalty_matrix[distance_matrix < min_distance * 0.2] = distance_matrix[distance_matrix < min_distance * 0.2] * 5
    
    # Long edges (more than 80% of the maximum distance)
    penalty_matrix[distance_matrix > max_distance * 0.8] = distance_matrix[distance_matrix > max_distance * 0.8] * 3
    
    # High connectivity edges (either end has a degree greater than 50% of the maximum degree)
    degrees = np.sum(distance_matrix, axis=1)
    max_degree = np.max(degrees)
    high_degree_threshold = max_degree * 0.5
    for i in range(num_nodes):
        for j in range(num_nodes):
            if degrees[i] > high_degree_threshold or degrees[j] > high_degree_threshold:
                penalty_matrix[i, j] = distance_matrix[i, j] * 2
    
    # Ensure that the penalty matrix is symmetric
    penalty_matrix = (penalty_matrix + penalty_matrix.T) / 2
    
    return penalty_matrix
```
