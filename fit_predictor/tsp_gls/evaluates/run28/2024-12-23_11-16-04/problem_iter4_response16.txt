```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    avg_distance = np.mean(distance_matrix)
    var_distance = np.var(distance_matrix)
    
    # Define penalties for different edge characteristics
    edge_penalty = distance_matrix.copy()
    
    # High penalty for very long edges
    edge_penalty[distance_matrix > max_distance * 1.5] *= 2
    
    # High penalty for very short edges
    edge_penalty[distance_matrix < avg_distance * 0.5] *= 2
    
    # High penalty for edges that contribute to a high variance
    edge_penalty[distance_matrix > avg_distance + var_distance] *= 1.5
    
    # Ensure no negative penalties and self-loops are not considered
    edge_penalty[edge_penalty < 0] = 0
    self_loops = np.eye(num_nodes, dtype=bool)
    edge_penalty = np.where(self_loops, np.inf, edge_penalty)
    
    return edge_penalty
```
