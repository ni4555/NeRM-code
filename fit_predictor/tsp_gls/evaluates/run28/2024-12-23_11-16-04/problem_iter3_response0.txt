```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance in the matrix
    avg_distance = np.mean(distance_matrix)
    
    # Determine the number of unique distances
    unique_distances = np.unique(distance_matrix)
    num_unique_distances = unique_distances.size
    
    # Initialize the penalty matrix
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Apply penalties based on relative distance
    # Penalize edges that are far from the average
    penalty_matrix += (np.abs(distance_matrix - avg_distance) * (0.5 - (num_unique_distances - 1) / 100))
    
    # Apply penalties based on connectivity
    # Penalize edges that connect to more than two unique nodes
    for i in range(num_unique_distances):
        # Create a binary matrix where each row corresponds to a unique distance
        # and a column corresponds to a node, with 1 if the distance exists and 0 otherwise
        distance_indices = np.where(distance_matrix == unique_distances[i])[0]
        if len(distance_indices) > 2:
            # Create a mask for the unique distance edges
            distance_mask = np.zeros_like(distance_matrix, dtype=bool)
            distance_mask[distance_indices[:, None], distance_indices] = True
            # Apply a penalty based on the number of connected nodes
            penalty_matrix[distance_mask] += (0.2 * (len(distance_indices) - 2))
    
    # Use conditional logic for tailored penalties
    # For example, penalize edges that cross a specific threshold
    threshold = 0.1 * max(distance_matrix)
    penalty_matrix[distance_matrix > threshold] *= 1.5
    
    return penalty_matrix
```
