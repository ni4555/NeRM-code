```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # Add a penalty that combines the length of the edge with its deviation from the minimum distance
    # Include a diversity metric that penalizes edges with similar lengths to reduce potential loops
    diversity_metric = np.std(distance_matrix, axis=1)
    penalty = distance_matrix - min_distances + 1e-6
    penalty *= (penalty > diversity_metric)
    # Add a complexity reduction metric by increasing the penalty for edges in longer paths
    complexity_reduction = np.sum(distance_matrix, axis=1)
    penalty *= (1 + complexity_reduction / np.max(complexity_reduction))
    # Balance the metrics by normalizing the penalty
    max_penalty = np.max(penalty)
    if max_penalty > 0:
        penalty /= max_penalty
    return penalty
```
