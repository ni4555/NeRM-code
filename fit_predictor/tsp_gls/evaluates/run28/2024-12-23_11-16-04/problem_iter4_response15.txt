```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the global min and max distances
    global_min_distance = np.min(distance_matrix)
    global_max_distance = np.max(distance_matrix)
    
    # Calculate the average distance in the matrix
    average_distance = np.mean(distance_matrix)
    
    # Calculate the standard deviation of distances to identify outliers
    std_distance = np.std(distance_matrix)
    
    # Define a range for short and long edges based on the average distance
    short_threshold = average_distance * 0.8
    long_threshold = average_distance * 1.2
    
    # Calculate the number of nodes
    num_nodes = distance_matrix.shape[0]
    
    # Initialize a penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Adjust penalties dynamically based on edge length and global distances
    for i in range(num_nodes):
        for j in range(num_nodes):
            if distance_matrix[i, j] < short_threshold:
                penalty_matrix[i, j] = (short_threshold - distance_matrix[i, j]) / short_threshold
            elif distance_matrix[i, j] > long_threshold:
                penalty_matrix[i, j] = (distance_matrix[i, j] - long_threshold) / long_threshold
            else:
                # Apply a penalty for outliers beyond the standard deviation range
                if distance_matrix[i, j] < global_min_distance - std_distance or \
                   distance_matrix[i, j] > global_max_distance + std_distance:
                    penalty_matrix[i, j] = (distance_matrix[i, j] - average_distance) / std_distance
                else:
                    # Add a small penalty for normal edges to encourage diversity
                    penalty_matrix[i, j] = 1 / (num_nodes * num_nodes)
    
    # Add a penalty for high connectivity to the starting node to encourage visiting other nodes first
    for i in range(num_nodes):
        penalty_matrix[i, 0] += 0.5
        penalty_matrix[0, i] += 0.5
    
    # Further encourage diversity by penalizing edges that are not connected to a subset of nodes
    for i in range(num_nodes):
        # Define a subset of nodes to which the edge should be connected
        subset_size = 0.5 * num_nodes
        subset_indices = np.argsort(distance_matrix[i, :])[:int(subset_size)]
        penalty_matrix[i, subset_indices] += 1
    
    return penalty_matrix
```
