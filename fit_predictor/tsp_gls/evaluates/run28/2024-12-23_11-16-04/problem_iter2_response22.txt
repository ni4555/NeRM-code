```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a penalty matrix
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the relative edge length, with a bonus for edges connecting to highly connected nodes
    max_degree = np.max(degrees)
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            edge_length = distance_matrix[i, j]
            # Normalize edge length relative to the maximum degree
            relative_length = edge_length / max_degree
            # Include a bonus if the edge connects to a highly connected node
            if degrees[i] > max_degree / 2 or degrees[j] > max_degree / 2:
                relative_length *= 0.5
            # Calculate the penalty based on the relative length
            penalty_matrix[i, j] = relative_length
    
    return penalty_matrix
```
