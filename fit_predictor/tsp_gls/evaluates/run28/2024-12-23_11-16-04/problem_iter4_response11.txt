```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the global min, average, and max distances
    global_min_distance = np.min(distance_matrix)
    global_average_distance = np.mean(distance_matrix)
    global_max_distance = np.max(distance_matrix)
    
    # Calculate the standard deviation of the distances
    std_deviation = np.std(distance_matrix)
    
    # Initialize a penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Define short and long edge thresholds based on the average and standard deviation
    short_threshold = global_average_distance - std_deviation
    long_threshold = global_average_distance + std_deviation
    
    # Add penalties for short and long edges relative to the average
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if distance_matrix[i, j] < short_threshold:
                penalty_matrix[i, j] = (short_threshold - distance_matrix[i, j]) / short_threshold
            elif distance_matrix[i, j] > long_threshold:
                penalty_matrix[i, j] = (distance_matrix[i, j] - long_threshold) / long_threshold
    
    # Add penalties for edges that are close to the minimum or maximum distance
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if distance_matrix[i, j] == global_min_distance or distance_matrix[i, j] == global_max_distance:
                penalty_matrix[i, j] += 0.1  # Add a significant penalty for extreme distances
    
    # Add a bonus for high connectivity to the starting node to encourage exploration
    num_nodes = distance_matrix.shape[0]
    for i in range(num_nodes):
        penalty_matrix[i, 0] += 1 if i > 0 else 0
        penalty_matrix[0, i] += 1 if i > 0 else 0
    
    return penalty_matrix
```
