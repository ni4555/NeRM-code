```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the maximum and minimum distances in the matrix
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    
    # Define a range of edge lengths that we consider "extreme" or "non-standard"
    extreme_threshold = max_distance * 0.8
    short_threshold = min_distance * 1.2
    
    # Calculate penalties for edges that are too long or too short
    long_edge_penalty = np.maximum(0, distance_matrix - extreme_threshold)
    short_edge_penalty = np.maximum(0, distance_matrix - short_threshold)
    
    # Incorporate the idea of connectivity by considering the density of the graph
    # Higher density nodes are penalized more since they have more connections
    density = np.sum(distance_matrix, axis=0) / (len(distance_matrix) * (len(distance_matrix) - 1))
    density_penalty = np.maximum(0, 1 - density)
    
    # Use conditional logic to apply different penalties for edges that are both long and short
    both_extreme_penalty = np.where((distance_matrix > extreme_threshold) & (distance_matrix < short_threshold),
                                    distance_matrix - short_threshold, 0)
    
    # Combine the penalties using a weighted average
    combined_penalty = 0.5 * long_edge_penalty + 0.3 * short_edge_penalty + 0.2 * density_penalty + 0.0 * both_extreme_penalty
    return combined_penalty
```
