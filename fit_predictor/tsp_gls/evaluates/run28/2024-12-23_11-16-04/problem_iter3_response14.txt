```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the mean and standard deviation of distances
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Use the mean and standard deviation to define penalties for outliers
    long_edge_penalty = np.where(distance_matrix > mean_distance + std_distance, distance_matrix - (mean_distance + std_distance), 0)
    short_edge_penalty = np.where(distance_matrix < mean_distance - std_distance, distance_matrix - (mean_distance - std_distance), 0)
    
    # Calculate a penalty for each edge based on the relative connectivity
    # High connectivity penalty encourages edges to be short, while low connectivity encourages them to be long
    connectivity_penalty = np.sum(distance_matrix, axis=1) - mean_distance - np.max(distance_matrix, axis=1)
    
    # Combine the penalties using a weighted average, balancing local and global characteristics
    combined_penalty = 0.3 * long_edge_penalty + 0.3 * short_edge_penalty + 0.4 * connectivity_penalty
    return combined_penalty
```
