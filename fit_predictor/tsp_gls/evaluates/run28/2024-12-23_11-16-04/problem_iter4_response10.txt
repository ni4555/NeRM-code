```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate penalties for long and short edges
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    long_edge_penalty = max_distance - distance_matrix
    short_edge_penalty = distance_matrix - min_distance
    
    # Define a range for acceptable edge lengths, avoiding dead-ends
    range_penalty = np.where((min_distance < distance_matrix) & (distance_matrix < max_distance),
                             distance_matrix, 0)
    
    # Apply a logarithmic function to penalize long edges more than short edges
    long_edge_penalty = np.log(long_edge_penalty + 1)  # Adding 1 to avoid log(0)
    short_edge_penalty = np.log(short_edge_penalty + 1)  # Adding 1 to avoid log(0)
    
    # Apply different logarithmic scales to balance the penalties
    scale_long = np.log(max_distance + 1)
    scale_short = np.log(min_distance + 1)
    
    # Combine penalties with scaled logarithmic function
    return np.maximum(long_edge_penalty * scale_long, np.maximum(short_edge_penalty * scale_short, range_penalty))
```
