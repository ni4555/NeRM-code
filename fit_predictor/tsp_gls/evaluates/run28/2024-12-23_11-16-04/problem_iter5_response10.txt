```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # Balance diverse metrics by considering not only the shortest edge but also the second shortest
    second_min_distances = np.partition(distance_matrix, 1, axis=1)[:, 1]
    # Incorporate domain knowledge: penalize longer edges but also consider the complexity of changing paths
    # The first term penalizes edges that are significantly longer than the minimum distance
    # The second term penalizes edges that are longer than the second shortest distance
    # The third term introduces a small cost for any edge to increase path complexity
    return (distance_matrix - min_distances + 1e-6) + \
           (distance_matrix - second_min_distances + 1e-6) + \
           (1e-4 * (distance_matrix > 0).astype(float))
```
