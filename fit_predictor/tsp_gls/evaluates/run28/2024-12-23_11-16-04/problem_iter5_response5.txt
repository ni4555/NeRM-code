```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # Calculate the average distance from each node to all other nodes
    avg_distances = np.mean(distance_matrix, axis=1)
    # Combine metrics with domain knowledge: prioritize short edges and balance with average
    combined_metrics = (distance_matrix - min_distances) / (avg_distances + 1e-6)
    # Add a penalty for edges that are significantly longer than the minimum distance
    penalties = np.where(distance_matrix > min_distances + 1.5 * (avg_distances + 1e-6), 1, 0)
    # Combine the metrics with the penalties to create the heuristic values
    return combined_metrics + penalties
```
