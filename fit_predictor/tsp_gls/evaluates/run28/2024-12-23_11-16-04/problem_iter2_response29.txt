```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance from each node to all other nodes
    avg_distances = np.sum(distance_matrix, axis=1) / (distance_matrix.shape[1] - 1)
    # Calculate the distance from each node to the average of all other nodes
    to_avg = np.sqrt(np.sum((np.arange(distance_matrix.shape[0])[:, None] - np.arange(distance_matrix.shape[0]))**2, axis=2))
    # Calculate the neighborhood distance, which is the distance to the average minus the distance of the edge
    neighborhood_distance = to_avg - distance_matrix
    # Combine the edge length penalty and the neighborhood context
    return distance_matrix + (avg_distances - distance_matrix)**2 + neighborhood_distance**2
```
