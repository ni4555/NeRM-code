```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic that considers both long and short edges, as well as the average distance
    average_distance = np.mean(distance_matrix)
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    
    # Define penalties for edges
    long_edge_penalty = max_distance - distance_matrix
    short_edge_penalty = distance_matrix - min_distance
    
    # Normalize penalties based on how far they are from the average distance
    normalized_long_edge_penalty = (long_edge_penalty - average_distance) ** 2
    normalized_short_edge_penalty = (short_edge_penalty - average_distance) ** 2
    
    # Combine penalties, giving higher weight to very long or very short edges
    combined_penalty = np.maximum(normalized_long_edge_penalty, normalized_short_edge_penalty)
    
    return combined_penalty
```
