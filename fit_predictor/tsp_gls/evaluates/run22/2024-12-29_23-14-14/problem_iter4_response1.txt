```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    min_distance = np.min(distance_matrix, axis=0)
    min_distance_from_row = np.min(distance_matrix, axis=1)
    
    # Calculate a bonus for edges close to the minimum distance
    bonus = np.where(distance_matrix == min_distance,
                     1,
                     np.where(distance_matrix == min_distance_from_row,
                              0.5,
                              0))
    
    # Calculate a penalty for longer edges based on their ratio to the shortest edge
    penalty = (distance_matrix / np.min(distance_matrix)) * 2
    
    # Combine the penalty and bonus to create the heuristics matrix
    heuristics_matrix = penalty + bonus
    
    # Apply additional bonuses for edges in the neighborhood of the local optimum
    for i in range(num_vertices):
        for j in range(num_vertices):
            if (i in min_distance_from_row[:5] or j in min_distance_from_row[:5] or
                i in min_distance[:5] or j in min_distance[:5]):
                heuristics_matrix[i][j] += 1.5
    
    # Ensure that no heuristics value is negative
    heuristics_matrix[heuristics_matrix < 0] = 0
    
    return heuristics_matrix
```
