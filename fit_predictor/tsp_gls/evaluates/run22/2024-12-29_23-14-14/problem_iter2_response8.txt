```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This improved heuristic considers the edge length, the average distance to all neighbors,
    # and the diversity of the neighborhood. It uses a combination of these factors to create a
    # heuristic that penalizes edges that are both long and surrounded by distant neighbors.
    
    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)
    
    # Calculate the average distance to all neighbors for each edge
    average_distance_to_neighbors = np.mean(distance_matrix, axis=1)
    
    # Calculate the number of neighbors for each edge (excluding itself)
    number_of_neighbors = np.sum(distance_matrix != np.inf, axis=1) - 1
    
    # Calculate the diversity of the neighborhood (lower is better)
    neighborhood_diversity = number_of_neighbors / (np.sum(distance_matrix != np.inf) - len(distance_matrix))
    
    # Combine the factors to create a heuristic score
    combined_weight = (distance_matrix / np.max(distance_matrix)) + \
                      (min_distance_to_neighbor / np.max(min_distance_to_neighbor)) + \
                      (average_distance_to_neighbors / np.max(average_distance_to_neighbors)) + \
                      (1 / neighborhood_diversity)
    
    # Normalize the combined weight to maintain the same scale as the original matrix
    max_combined_weight = np.max(combined_weight)
    normalized_weight = combined_weight / max_combined_weight
    
    # The heuristic returns a matrix with values indicating how bad it is to include each edge
    return normalized_weight
```
