```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Contextualize changes and penalize current route edges
    current_route_mask = np.zeros(distance_matrix.shape, dtype=bool)
    for i in range(len(distance_matrix) - 1):
        current_route_mask[i] = True
        current_route_mask[i + 1] = True
    penalty_matrix = distance_matrix.copy()
    penalty_matrix[current_route_mask] = np.inf

    # Encourage diversification and normalize measures
    # Calculate the mean distance for all edges except the penalty ones
    non_penalty_neighbors_mean = (distance_matrix[:, :-1] + distance_matrix[:, 1:] - penalty_matrix) / 2
    
    # Calculate the deviation from the mean for each edge, excluding penalty edges
    deviations = distance_matrix - non_penalty_neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Balance exploration and exploitation by adding a diversification term
    diversification_term = np.random.rand(*deviations.shape)
    # Weights the importance of diversification vs. the deviation from the mean
    diversification_factor = 0.5
    weighted_deviations = (1 - diversification_factor) * deviations + diversification_factor * diversification_term
    
    return weighted_deviations
```
