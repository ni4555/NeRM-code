```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)
    
    # Calculate the average distance to the nearest neighbor for each vertex
    average_min_distance = np.mean(min_distance_to_neighbor)
    
    # Calculate the average distance to all neighbors for each vertex
    average_all_neighbors = np.mean(distance_matrix, axis=1)
    
    # Calculate the maximum distance to the farthest neighbor for each vertex
    max_distance_to_neighbor = np.max(distance_matrix, axis=1)
    
    # Combine edge length, minimum and maximum distances to neighbors to encourage exploration of the graph
    combined_weight = distance_matrix + (0.3 * average_min_distance) - (0.1 * max_distance_to_neighbor)
    
    # Normalize the combined weight to maintain the same scale as the original matrix
    max_combined_weight = np.max(combined_weight)
    normalized_weight = combined_weight / max_combined_weight
    
    # Incorporate multi-scale neighbor information and balance edge and vertex metrics
    # This is done by combining different scales of information (min, avg, max) and normalizing
    return normalized_weight
```
