```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)
    
    # Calculate the minimum distance from each edge to the local optimum
    min_distance = np.min(distance_matrix, axis=0)
    min_distance_from_row = np.min(distance_matrix, axis=1)
    
    # Create a matrix to identify edges close to the local optimum
    is_close_to_min = (distance_matrix == min_distance_from_row) & (distance_matrix < min_distance)
    
    # Initialize the heuristic matrix with the minimum distance to the nearest neighbor
    heuristic_matrix = min_distance_to_neighbor / np.max(min_distance_to_neighbor)
    
    # Increase the heuristic value for edges close to the local optimum
    heuristic_matrix[is_close_to_min] *= 2
    
    # Apply a non-linear penalty to longer edges to balance distance and proximity
    penalty_factor = np.log(distance_matrix / np.min(distance_matrix))
    heuristic_matrix *= (1 + penalty_factor)
    
    # Return the heuristic matrix which indicates how bad it is to include each edge
    return heuristic_matrix
```
