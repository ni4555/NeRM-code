```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # It's bad to have edges that are significantly longer than their neighbors
    # Introduce a penalty factor that decreases as the edge length deviates from the mean
    penalty_factor = np.exp(-np.abs(deviations))
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    normalized_deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Combine the penalty factor with the normalized deviations to get a badness score
    badness_scores = penalty_factor * normalized_deviations
    
    # Adjust the scores to encourage diversification by penalizing edges that are too similar to each other
    for i in range(len(badness_scores)):
        for j in range(len(badness_scores)):
            if i != j:
                edge_similarity = np.linalg.norm(distance_matrix[i, j])
                badness_scores[i] += edge_similarity * 0.01
    
    # Normalize the final badness scores to ensure they are within the range of [0, 1]
    badness_scores = (badness_scores - badness_scores.min()) / (badness_scores.max() - badness_scores.min())
    
    return badness_scores
```
