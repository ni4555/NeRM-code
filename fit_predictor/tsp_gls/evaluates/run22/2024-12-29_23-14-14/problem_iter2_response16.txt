```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, local_optimum: np.ndarray) -> np.ndarray:

    # Calculate the minimum distance from each edge to the local optimum route
    min_distance = np.min(distance_matrix, axis=0)
    min_distance_from_row = np.min(distance_matrix, axis=1)
    
    # Create a heuristic based on the distance from the local optimum
    heuristic_matrix = np.where(distance_matrix == min_distance, 
                                0, 
                                np.where(distance_matrix == min_distance_from_row, 
                                         1, 
                                         np.where(distance_matrix < min_distance, 
                                                  2, 
                                                  3)))
    
    # Introduce a penalty for longer edges
    penalty_for_length = distance_matrix / np.min(distance_matrix)
    
    # Introduce a bonus for edges closer to the average neighbor distance
    average_neighbor_distance = np.mean(distance_matrix, axis=1)
    bonus_for_neighbors = np.where(distance_matrix < average_neighbor_distance,
                                   (average_neighbor_distance - distance_matrix) / (average_neighbor_distance - np.min(distance_matrix)),
                                   0)
    
    # Combine the penalties and bonuses into a single heuristic value
    combined_heuristic = heuristic_matrix * penalty_for_length + bonus_for_neighbors
    
    # Adjust the heuristic to ensure it's balanced between edge length and neighbor distances
    combined_heuristic = combined_heuristic / np.max(combined_heuristic)
    
    # Apply the local optimum heuristic
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if distance_matrix[i, j] == local_optimum[i, j]:
                combined_heuristic[i, j] += 1
    
    return combined_heuristic
```
