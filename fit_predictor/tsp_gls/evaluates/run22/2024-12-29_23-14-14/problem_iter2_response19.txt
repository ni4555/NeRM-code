```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, local_optimum_route: np.ndarray) -> np.ndarray:
    # Calculate the distance of each edge to the local optimum route
    route_edges = np.setdiff1d(np.arange(len(local_optimum_route)), local_optimum_route)
    edge_distances = distance_matrix[local_optimum_route][:, route_edges]

    # Calculate the minimum distance from each edge to the local optimum
    min_distance = np.min(edge_distances, axis=1)

    # Define a heuristic matrix that penalizes edges close to the local optimum
    # and rewards edges that are not in the local optimum
    heuristic_matrix = np.where(edge_distances == min_distance,
                                2,  # Edge is in the local optimum, penalize it
                                1   # Edge is not in the local optimum, reward it
                                )

    # Introduce a penalty for longer edges
    penalty_factor = heuristic_matrix * (distance_matrix / np.min(distance_matrix))

    # Introduce a reward for shorter edges compared to the average edge length
    row_avg = np.mean(distance_matrix, axis=1)
    col_avg = np.mean(distance_matrix, axis=0)
    reward_factor = np.where(distance_matrix < np.min(distance_matrix), -1, 0)

    # Combine the penalty and reward factors
    final_heuristic = penalty_factor + reward_factor

    return final_heuristic
```
