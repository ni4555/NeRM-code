```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)
    
    # Calculate the average distance to the nearest neighbors for each edge
    average_distance_to_neighbors = np.mean(distance_matrix, axis=1)
    
    # Calculate the total length of the local optimal route
    local_optimal_route_length = np.sum(distance_matrix[local_optimal_route][:, local_optimal_route[1:]])
    
    # Combine the edge length with the average distance to the nearest neighbors
    combined_weight = distance_matrix + (average_distance_to_neighbors / np.max(average_distance_to_neighbors))
    
    # Apply a penalty to edges that are part of the local optimal route
    penalty_factor = np.zeros(distance_matrix.shape)
    local_optimal_route = np.array([0, 1, 2, 3])  # Example local optimal route
    for i in range(len(local_optimal_route) - 1):
        penalty_factor[local_optimal_route[i], local_optimal_route[i + 1]] = (distance_matrix[local_optimal_route[i], local_optimal_route[i + 1]] / local_optimal_route_length) * 10
    
    # Adjust the combined weight with the penalty factor
    combined_weight_with_penalty = combined_weight * (1 - penalty_factor)
    
    # Normalize the combined weight to maintain the same scale as the original matrix
    max_combined_weight = np.max(combined_weight_with_penalty)
    normalized_weight = combined_weight_with_penalty / max_combined_weight
    
    # The heuristic returns a matrix with values indicating how bad it is to include each edge
    return normalized_weight
```
