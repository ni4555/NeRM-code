```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)
    
    # Calculate the average distance to the nearest neighbor for each vertex
    average_min_distance = np.mean(min_distance_to_neighbor)
    
    # Calculate the average distance to all neighbors for each vertex
    average_all_neighbors = np.mean(distance_matrix, axis=1)
    
    # Combine the edge length with the average distances to avoid local optima
    combined_weight = distance_matrix + (0.5 * average_min_distance) + (0.5 * average_all_neighbors)
    
    # Normalize the combined weight to maintain the same scale as the original matrix
    max_combined_weight = np.max(combined_weight)
    normalized_weight = combined_weight / max_combined_weight
    
    # The heuristic returns a matrix with values indicating how bad it is to include each edge
    return normalized_weight
```
