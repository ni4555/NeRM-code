```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Calculate the minimum distance for each vertex to any other vertex
    min_distance = np.min(distance_matrix, axis=1)
    
    # Calculate the second minimum distance for each vertex to any other vertex
    second_min_distance = np.partition(distance_matrix, 1, axis=1)[:, 1]
    
    # Calculate the penalty for edges based on their distance from the minimum
    penalty = np.where(distance_matrix > min_distance,
                       1 + (distance_matrix - min_distance) / (np.max(distance_matrix) - np.min(distance_matrix)),
                       0)
    
    # Calculate a diversification factor for each edge
    diversification = np.where(distance_matrix == min_distance,
                                0.8,
                                1)
    
    # Calculate the heuristics by blending the penalty and diversification
    heuristics_matrix = penalty * diversification
    
    # Normalize the heuristics matrix for consistent comparison
    normalized_heuristics_matrix = (heuristics_matrix - np.min(heuristics_matrix)) / (np.max(heuristics_matrix) - np.min(heuristics_matrix))
    
    # Apply an additional bonus for edges that are in the immediate neighborhood of the minimum distance
    for i in range(num_vertices):
        for j in range(num_vertices):
            if distance_matrix[i][j] < min_distance[i] + 1:
                normalized_heuristics_matrix[i][j] += 0.2
    
    # Ensure all values are non-negative after normalization
    heuristics_matrix = np.maximum(0, normalized_heuristics_matrix)
    
    return heuristics_matrix
```
