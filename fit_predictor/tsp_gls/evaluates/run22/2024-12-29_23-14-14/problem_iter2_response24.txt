```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the shortest path to each node from all other nodes
    num_nodes = distance_matrix.shape[0]
    shortest_paths = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        shortest_paths[i] = np.min(distance_matrix[i], axis=1)

    # Calculate the average of the shortest paths for each edge
    average_shortest_paths = (shortest_paths[:, :-1] + shortest_paths[:, 1:]) / 2

    # Calculate the deviation of each edge from the average shortest path length
    deviations = distance_matrix - average_shortest_paths

    # Normalize the deviations to be within the range [0, 1]
    deviations_min = deviations.min()
    deviations_max = deviations.max()
    deviations_normalized = (deviations - deviations_min) / (deviations_max - deviations_min)

    # Return a matrix where the value indicates how bad it is to include each edge
    return deviations_normalized
```
