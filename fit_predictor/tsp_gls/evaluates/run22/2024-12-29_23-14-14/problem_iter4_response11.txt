```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, local_optimal_route: list) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Create a binary matrix to indicate whether an edge is in the local optimal route
    route_matrix = np.zeros_like(distance_matrix, dtype=bool)
    for i, j in local_optimal_route:
        route_matrix[i][j] = route_matrix[j][i] = True
    
    # Apply a higher penalty to edges not in the local optimal route
    penalty = (1 - deviations.max()) * (1 - route_matrix).astype(float)
    deviations *= route_matrix.astype(float)
    
    # Apply a bonus to edges in the local optimal route
    bonus = (deviations.max() - deviations.min()) * route_matrix.astype(float)
    
    # Combine the penalty and bonus into the heuristic values
    heuristic_values = deviations + bonus + penalty
    
    return heuristic_values
```
