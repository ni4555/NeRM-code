```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Penalize edges that are longer than the average significantly
    badness = deviations > 1.5
    
    # Add a diversification factor that encourages exploring less visited edges
    # Assuming a simple counter for each edge visitation, not included here
    # diversification_factor = ...
    
    # Combine the badness and diversification into a single heuristic value
    heuristic_values = badness * diversification_factor
    
    return heuristic_values
```
