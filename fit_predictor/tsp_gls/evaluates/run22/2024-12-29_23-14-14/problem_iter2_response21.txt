```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the standard deviation for each edge's neighbors
    neighbors_std = (distance_matrix[:, :-1].std(axis=1) +
                     distance_matrix[:, 1:].std(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Scale the normalized deviations based on the standard deviation of the neighbors
    # This encourages exploration away from edges that have a high standard deviation
    # (i.e., edges with neighbors that are spread out, possibly indicating a local optimum)
    scaled_deviations = deviations * (1 + neighbors_std)
    
    # Return a matrix where the value indicates how bad it is to include each edge
    # The scaling factor encourages the selection of edges that are close to the mean
    # and not too far from their neighbors, thus avoiding local optima
    return scaled_deviations
```
