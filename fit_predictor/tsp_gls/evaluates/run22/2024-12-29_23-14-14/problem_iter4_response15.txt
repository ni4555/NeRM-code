```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Initialize a matrix to store the heuristic values
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Penalize current route edges more
    route_indices = np.random.choice(num_vertices, size=num_vertices // 2, replace=False)
    for i, j in zip(route_indices, route_indices[1:] + [route_indices[0]]):
        heuristic_matrix[i, j] = 1.0
    
    # Encourage diversification by considering the edge length deviation from the mean
    for i in range(num_vertices):
        for j in range(i + 1, num_vertices):
            if deviations[i, j] > 0.5:  # Define a threshold for outliers
                heuristic_matrix[i, j] = 1.0
                heuristic_matrix[j, i] = 1.0
    
    # Introduce exploration through variability by adding a bonus for longer edges
    exploration_bonus = 0.1
    for i in range(num_vertices):
        for j in range(i + 1, num_vertices):
            if distance_matrix[i, j] > neighbors_mean[i, j]:
                heuristic_matrix[i, j] += exploration_bonus
                heuristic_matrix[j, i] += exploration_bonus
    
    # Balance exploitation by introducing a small exploitation factor
    exploitation_factor = 0.2
    for i in range(num_vertices):
        for j in range(i + 1, num_vertices):
            heuristic_matrix[i, j] = (1 - exploitation_factor) * heuristic_matrix[i, j] + exploitation_factor * deviations[i, j]
            heuristic_matrix[j, i] = (1 - exploitation_factor) * heuristic_matrix[j, i] + exploitation_factor * deviations[j, i]
    
    return heuristic_matrix
```
