```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Calculate the average distance for each vertex to all other vertices
    average_distance = np.mean(distance_matrix, axis=1)
    
    # Calculate the standard deviation of distances for each vertex
    std_dev_distance = np.std(distance_matrix, axis=1)
    
    # Normalize the average and standard deviation
    normalized_average = (average_distance - np.mean(average_distance)) / np.std(average_distance)
    normalized_std_dev = (std_dev_distance - np.mean(std_dev_distance)) / np.std(std_dev_distance)
    
    # Calculate a diversity metric by combining normalized average and std dev
    diversity_metric = normalized_average * normalized_std_dev
    
    # Calculate the bonus for edges close to the shortest distance
    bonus = np.where(distance_matrix == np.min(distance_matrix, axis=1),
                     1,
                     np.where(distance_matrix == np.partition(distance_matrix, 1, axis=1)[:, 1],
                              0.5,
                              0))
    
    # Calculate the penalty for edges further from the shortest distance
    penalty = (distance_matrix / np.min(distance_matrix)) * 2
    
    # Combine the diversity metric, bonus, and penalty to create the heuristics matrix
    heuristics_matrix = penalty + bonus - diversity_metric
    
    # Normalize the heuristics matrix to ensure all values are non-negative
    heuristics_matrix = np.maximum(0, heuristics_matrix)
    
    return heuristics_matrix
```
