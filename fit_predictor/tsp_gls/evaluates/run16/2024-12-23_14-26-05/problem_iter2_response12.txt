```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Normalize the degrees to get a probability distribution
    probabilities = degrees / np.sum(degrees)
    
    # Adjust the distance matrix based on the probabilities and degrees
    adjusted_distance_matrix = distance_matrix.copy()
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # If the edge is part of the probability distribution
            if probabilities[i] * probabilities[j] > 0:
                # Increase the distance if the edge is less used
                if i != j:
                    adjusted_distance_matrix[i, j] *= (1 + 0.1 * (1 - probabilities[i] * probabilities[j]))
            else:
                # Add a small distance to ensure no division by zero
                adjusted_distance_matrix[i, j] = 1e-10
    
    # Normalize the adjusted distance matrix to maintain a consistent scale
    total_distance = np.sum(adjusted_distance_matrix)
    adjusted_distance_matrix = adjusted_distance_matrix / total_distance
    
    return adjusted_distance_matrix
```
