```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the maximum and minimum distances for each row and column
    max_distances = np.max(distance_matrix, axis=1)
    min_distances = np.min(distance_matrix, axis=1)
    
    # Create a new matrix based on the usage frequency of each edge
    usage_frequency = (max_distances + min_distances) / 2
    
    # Inverse the usage frequency to penalize edges that are more frequently used
    # which encourages the exploration of less frequently used paths
    heuristics = 1 / usage_frequency
    
    # Set the diagonal to a high value to avoid selecting an edge to return to the origin
    np.fill_diagonal(heuristics, np.inf)
    
    # Return the matrix that indicates how bad it is to include each edge in the solution
    return heuristics
```
