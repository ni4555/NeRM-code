```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the usage matrix
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the initial usage based on the frequency of edge usage
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                usage_matrix[i, j] = distance_matrix[i, j] / np.sum(distance_matrix[i, :]) + \
                                     distance_matrix[i, j] / np.sum(distance_matrix[:, j])
    
    # Introduce a non-linear penalty factor for edges that are frequently used
    penalty_factor = np.exp(-0.1 * usage_matrix)
    
    # Calculate the average distance of all used edges
    used_edges = np.sum(usage_matrix) - len(distance_matrix) + 1
    average_distance_used = np.sum(distance_matrix) / used_edges
    
    # Introduce a bonus factor for edges with higher average distance than the used edges
    bonus_factor = (distance_matrix / average_distance_used > 1).astype(float)
    
    # Adjust the bonus factor to ensure it's not dominating the penalty factor
    adjusted_bonus_factor = bonus_factor * (penalty_factor < 0.5)
    
    # Combine the penalties and bonuses into a heuristic
    heuristic_matrix = penalty_factor + adjusted_bonus_factor
    
    # Normalize the heuristic matrix to maintain the sum of distances
    total_heuristic = np.sum(heuristic_matrix)
    heuristic_matrix /= total_heuristic

    return heuristic_matrix
```
