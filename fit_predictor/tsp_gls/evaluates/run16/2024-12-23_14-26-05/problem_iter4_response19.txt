```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.size
    edge_usage_count = np.zeros_like(distance_matrix)
    
    # Calculate the edge usage count based on the TSP cycle constraint
    for i in range(num_edges):
        edge_usage_count[i % distance_matrix.shape[0], i // distance_matrix.shape[0]] += 1

    # Calculate the heuristic value based on edge usage count and distance
    heuristic_values = distance_matrix + edge_usage_count * (distance_matrix.max() / (edge_usage_count + 1e-6))

    # Introduce a penalty for high usage and a bonus for short distances
    penalty = 1 + (edge_usage_count.max() / (edge_usage_count + 1e-6)) * 0.1
    bonus = np.exp(-distance_matrix / distance_matrix.min())
    
    # Combine penalty and bonus into a heuristic matrix
    heuristic_matrix = heuristic_values * penalty * bonus
    
    return heuristic_matrix
```
