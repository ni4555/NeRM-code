```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the number of times each edge is used
    edge_usage = np.count_nonzero(distance_matrix, axis=1) + np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the average usage and add it to the distance matrix as a penalty for less frequently used edges
    average_usage = edge_usage.mean()
    adjusted_distances = distance_matrix.copy()
    adjusted_distances += (average_usage - edge_usage) * (1 - 0.5)  # 1 - 0.5 to balance the influence of the penalty
    
    return adjusted_distances
```
