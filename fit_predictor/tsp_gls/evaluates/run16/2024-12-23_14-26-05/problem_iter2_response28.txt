```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to store the heuristic values
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the usage frequency of each edge
    usage_frequency = np.sum(distance_matrix, axis=0)
    
    # Normalize the usage frequency to get a probability distribution
    probabilities = usage_frequency / np.sum(usage_frequency)
    
    # Calculate the heuristic values based on the usage frequency
    # Higher usage frequency means the edge is more likely to be part of the optimal solution
    heuristic_matrix = 1 / (1 + probabilities)
    
    # Adjust the heuristic values to avoid local minima
    # This can be done by increasing the heuristic value for edges that are frequently used
    # and decreasing the heuristic value for edges that are rarely used
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Increase the heuristic value for frequently used edges
                if usage_frequency[i] + usage_frequency[j] > 1:
                    heuristic_matrix[i, j] = min(heuristic_matrix[i, j], 1)
                # Decrease the heuristic value for rarely used edges
                else:
                    heuristic_matrix[i, j] = max(heuristic_matrix[i, j], 0.5)
    
    # Multiply the heuristic values with the original distance matrix
    new_distance_matrix = heuristic_matrix * distance_matrix
    
    return new_distance_matrix
```
