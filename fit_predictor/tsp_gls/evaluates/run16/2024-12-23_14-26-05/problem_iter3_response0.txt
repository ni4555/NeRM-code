```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the betweenness centrality for each edge
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for k in range(distance_matrix.shape[0]):
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[0]):
                if distance_matrix[i, j] != 0:
                    betweenness_centrality[i, j] += (distance_matrix[i, k] * distance_matrix[k, j]) / (np.sum(distance_matrix[k, :] != 0))
    
    # Normalize the betweenness centrality
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    # Adjust the distance matrix based on the betweenness centrality and degrees
    adjusted_distance_matrix = distance_matrix.copy()
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            # Adjust the distance based on the betweenness centrality and the degree of the nodes
            adjusted_distance_matrix[i, j] *= (1 - betweenness_centrality[i, j] - 0.01 * (degrees[i] + degrees[j]))
    
    # Introduce random fluctuations to increase diversity and help escape local minima
    np.random.seed(42)  # For reproducibility
    adjustment_factor = 0.1 * np.random.uniform(-1, 1, size=adjusted_distance_matrix.shape)
    adjusted_distance_matrix += adjustment_factor
    
    # Clipping the values to ensure they stay within the original range
    adjusted_distance_matrix = np.clip(adjusted_distance_matrix, 0, np.max(distance_matrix))
    
    return adjusted_distance_matrix
```
