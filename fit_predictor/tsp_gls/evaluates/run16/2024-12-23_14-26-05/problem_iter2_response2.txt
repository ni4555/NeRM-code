```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize an array to track the number of times each edge has been used
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    
    # Simulate the traversal of the TSP to populate the usage frequency array
    num_trips = 100  # Number of trips to simulate for better statistics
    random_routes = np.random.permutation(distance_matrix.shape[0])
    
    for _ in range(num_trips):
        current_position = np.random.randint(0, distance_matrix.shape[0])
        visited = np.zeros(distance_matrix.shape[0], dtype=bool)
        while not np.all(visited):
            visited[current_position] = True
            next_position = np.random.choice(
                np.where(~visited)[0], 
                p=distance_matrix[current_position, ~visited] / np.sum(distance_matrix[current_position, ~visited])
            )
            current_position = next_position
            usage_frequency[current_position, next_position] += 1
            usage_frequency[next_position, current_position] += 1
    
    # Normalize the usage frequency to get a probability distribution
    max_frequency = np.max(usage_frequency)
    if max_frequency == 0:
        return distance_matrix
    
    usage_frequency /= max_frequency
    
    # It's bad to include frequently used edges in the solution
    new_distance_matrix = 1 - usage_frequency
    
    # Add a small constant to avoid division by zero
    epsilon = 1e-10
    new_distance_matrix = np.where(new_distance_matrix == 0, epsilon, new_distance_matrix)
    
    # Normalize the new distance matrix to keep the sum of distances constant
    total_distance = np.sum(new_distance_matrix)
    new_distance_matrix = new_distance_matrix / total_distance
    
    return new_distance_matrix
```
