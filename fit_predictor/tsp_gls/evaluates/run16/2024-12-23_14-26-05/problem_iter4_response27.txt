```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the betweenness centrality for each edge
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for k in range(distance_matrix.shape[0]):
        numerator = np.dot(distance_matrix[k, :], np.dot(distance_matrix, distance_matrix[k, :]))
        denominator = np.sum(distance_matrix[k, :] * distance_matrix[k, :], axis=0)
        betweenness_centrality[k, :] = numerator / denominator
    
    # Normalize the betweenness centrality
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    # Adjust the distance matrix based on the betweenness centrality
    adjusted_distance_matrix = distance_matrix.copy()
    adjusted_distance_matrix *= (1 - betweenness_centrality)
    
    # Mutate the adjusted distance matrix to promote diversity
    mutation_probability = 0.05
    mutation_range = max_betweenness * 0.1  # Limit mutation range to prevent excessive distance changes
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            if np.random.rand() < mutation_probability:
                # Introduce a random distance within a limited range
                adjusted_distance_matrix[i, j] = distance_matrix[i, j] + np.random.uniform(-mutation_range, mutation_range)
                adjusted_distance_matrix[i, j] = np.clip(adjusted_distance_matrix[i, j], 1, max_betweenness)
    
    # Apply an additional heuristic to adjust based on local and global structure
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            # Promote short distances to adjacent high-degree nodes
            if degrees[i] > degrees[j]:
                adjusted_distance_matrix[i, j] = min(adjusted_distance_matrix[i, j], adjusted_distance_matrix[i, i] * 0.9)
            elif degrees[j] > degrees[i]:
                adjusted_distance_matrix[j, i] = min(adjusted_distance_matrix[j, i], adjusted_distance_matrix[j, j] * 0.9)
    
    return adjusted_distance_matrix
```
