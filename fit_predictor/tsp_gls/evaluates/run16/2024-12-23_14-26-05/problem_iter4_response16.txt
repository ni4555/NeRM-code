```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the initial usage by summing the row-wise and column-wise distances
    for i in range(distance_matrix.shape[0]):
        usage_matrix[i, :] = np.sum(distance_matrix[i, :])
        usage_matrix[:, i] = np.sum(distance_matrix[:, i])
    
    # Introduce a non-linear penalty for frequent edges based on exponential decay
    penalty_factor = np.exp(-0.1 * usage_matrix)
    
    # Introduce a bonus for edges with higher average distance in the used ones
    used_edges = usage_matrix.sum()
    bonus_factor = np.sum(distance_matrix) / used_edges
    bonus_matrix = bonus_factor * penalty_factor

    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Normalize the degree matrix
    max_degree = np.max(degrees)
    degree_matrix = degrees / max_degree
    
    # Introduce a local structure adjustment based on degrees
    local_adjustment = 1 + (0.5 * (degree_matrix - 0.5))
    
    # Combine all factors into a heuristic
    heuristic_matrix = bonus_matrix * local_adjustment

    # Mutate the heuristic matrix to promote diversity
    mutation_probability = 0.05
    for i in range(heuristic_matrix.shape[0]):
        for j in range(heuristic_matrix.shape[0]):
            if np.random.rand() < mutation_probability:
                # Introduce a random factor between 0 and 1
                heuristic_matrix[i, j] *= np.random.rand()
    
    # Apply an additional global structure adjustment based on the sum of the heuristic values
    global_adjustment = 1 + (0.1 * (np.sum(heuristic_matrix) / (heuristic_matrix.shape[0] ** 2)))
    heuristic_matrix *= global_adjustment

    return heuristic_matrix
```
