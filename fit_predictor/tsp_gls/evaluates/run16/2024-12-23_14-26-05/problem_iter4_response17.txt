```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Normalize the degrees to get a probability distribution
    probabilities = degrees / np.sum(degrees)
    
    # Create a new distance matrix based on the probabilities
    new_distance_matrix = np.outer(probabilities, probabilities) * distance_matrix
    
    # Add a small constant to avoid division by zero
    epsilon = 1e-10
    new_distance_matrix = np.where(new_distance_matrix == 0, epsilon, new_distance_matrix)
    
    # Normalize the new distance matrix to keep the sum of distances constant
    total_distance = np.sum(new_distance_matrix)
    new_distance_matrix = new_distance_matrix / total_distance
    
    # Adjust the distance matrix to penalize edges with low connectivity
    for i in range(new_distance_matrix.shape[0]):
        for j in range(new_distance_matrix.shape[1]):
            # If the edge is between a highly connected node and a lowly connected node, increase the distance
            if degrees[i] * degrees[j] < np.mean(degrees) ** 2:
                new_distance_matrix[i, j] *= 1.2  # Increase the distance by 20%
            # If the edge is between two nodes with similar connectivity, decrease the distance
            elif degrees[i] * degrees[j] > np.mean(degrees) ** 2:
                new_distance_matrix[i, j] *= 0.8  # Decrease the distance by 20%
    
    # Introduce a penalty for edges with high usage to avoid local minima
    usage_matrix = np.zeros_like(distance_matrix, dtype=int)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            usage_matrix[i, j] += np.sum(distance_matrix[i, j] < np.mean(distance_matrix))
    for i in range(new_distance_matrix.shape[0]):
        for j in range(new_distance_matrix.shape[1]):
            if usage_matrix[i, j] > np.mean(usage_matrix):
                new_distance_matrix[i, j] *= 1.1  # Increase the distance by 10%
    
    # Return the adjusted distance matrix
    return new_distance_matrix
```
