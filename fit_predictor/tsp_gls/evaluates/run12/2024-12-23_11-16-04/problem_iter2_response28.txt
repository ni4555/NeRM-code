```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance of all shortest path cycles
    total_distance = np.sum(distance_matrix)
    
    # Identify the shortest cycle by removing the minimum edge and re-summing
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                shortest_cycle = total_distance - distance_matrix[i, j]
                # Calculate the cost of the cycle without the edge (i, j)
                cycle_cost_without_edge = np.sum(distance_matrix) - distance_matrix[i, j] - distance_matrix[j, i]
                # If the cycle cost without the edge is shorter than the total distance
                if cycle_cost_without_edge < shortest_cycle:
                    # It's bad to include this edge since it's part of a shortest cycle
                    distance_matrix[i, j] = distance_matrix[j, i] = -np.inf
                    break
```
