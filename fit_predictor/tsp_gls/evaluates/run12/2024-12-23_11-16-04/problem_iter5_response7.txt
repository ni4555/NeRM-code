```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # Calculate the average distance from each node to any other node
    avg_distances = np.mean(distance_matrix, axis=1)
    # Weigh the penalties by considering both the minimum and average distances
    # This encourages a balance between shortest paths and less outlier-heavy paths
    penalty = 0.5 * (distance_matrix - min_distances + 1e-6) + 0.5 * (distance_matrix - avg_distances)
    # Adjust the penalties to balance adaptability and complexity reduction
    # A smaller lambda reduces the complexity but makes the heuristic more aggressive
    # A larger lambda encourages more cautious moves
    lambda_weight = 0.2
    return penalty + lambda_weight * np.random.rand(*distance_matrix.shape)
```
