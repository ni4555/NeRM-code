```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # Calculate the relative difference between each edge's distance and the minimum distance
    relative_differences = (distance_matrix - min_distances) / min_distances
    # Normalize the relative differences to be in the range [0, 1]
    normalized_differences = (relative_differences - np.min(relative_differences)) / (np.max(relative_differences) - np.min(relative_differences))
    # Incorporate node connectivity to penalize highly connected nodes
    node_connectivity = np.sum(distance_matrix, axis=1)
    connectivity_penalty = (node_connectivity - np.mean(node_connectivity)) ** 2
    # Combine the normalized differences and connectivity penalty using a weighted average
    combined_penalty = 0.8 * normalized_differences + 0.2 * connectivity_penalty
    return combined_penalty
```
