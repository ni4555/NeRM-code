```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    
    # Thresholds for defining extreme edge lengths
    extreme_threshold = max_distance * 0.8
    short_threshold = min_distance * 1.2
    
    # Initialize an array of the same shape as distance_matrix with zeros
    penalties = np.zeros_like(distance_matrix)
    
    # Assign a high penalty for long edges beyond the extreme threshold
    penalties[distance_matrix > extreme_threshold] = distance_matrix[distance_matrix > extreme_threshold] - extreme_threshold
    
    # Assign a high penalty for short edges beyond the short threshold
    penalties[distance_matrix < short_threshold] = short_threshold - distance_matrix[distance_matrix < short_threshold]
    
    # Return the penalties array
    return penalties
```
