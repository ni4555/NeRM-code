```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # Introduce a diversity factor to encourage different solutions
    diversity_factor = np.random.rand(distance_matrix.shape[0])
    # Use domain knowledge to adjust the penalties for edges that are almost shortest
    # or very long, to balance between local optima and diversity
    edge_type_penalty = np.where(distance_matrix == min_distances, 0.5, 1.0)
    edge_length_penalty = np.where(distance_matrix < min_distances, 0.1, 10.0)
    # Combine the factors to create the heuristic
    return distance_matrix - min_distances + 1e-6 + diversity_factor * edge_type_penalty * edge_length_penalty
```
