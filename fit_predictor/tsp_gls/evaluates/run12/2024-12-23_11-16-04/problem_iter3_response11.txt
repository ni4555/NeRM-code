```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance
    average_distance = np.mean(distance_matrix)
    
    # Calculate penalties for edges that are too long or too short
    long_edge_penalty = np.maximum(0, distance_matrix - 1.5 * average_distance)
    short_edge_penalty = np.maximum(0, average_distance - distance_matrix)
    
    # Incorporate the local connectivity by considering edges that are part of highly connected nodes
    connectivity_matrix = np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1)
    highly_connected_threshold = average_distance * 1.2
    connectivity_penalty = np.where(connectivity_matrix < highly_connected_threshold, average_distance, 0)
    
    # Combine the penalties using a weighted average
    combined_penalty = 0.4 * long_edge_penalty + 0.3 * short_edge_penalty + 0.3 * connectivity_penalty
    return combined_penalty
```
