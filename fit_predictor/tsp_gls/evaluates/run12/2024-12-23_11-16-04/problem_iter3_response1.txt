```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance and standard deviation
    average_distance = np.mean(distance_matrix)
    std_deviation = np.std(distance_matrix)
    
    # Use the average distance and standard deviation to determine penalties
    long_edge_penalty = np.maximum(0, distance_matrix - (average_distance + std_deviation))
    short_edge_penalty = np.maximum(0, distance_matrix - (average_distance - std_deviation))
    
    # Incorporate the degree of connectivity for each node
    node_connectivity = np.sum(distance_matrix, axis=1)
    connectivity_penalty = (node_connectivity - np.mean(node_connectivity)) ** 2
    
    # Combine the penalties using a weighted average with additional connectivity factor
    combined_penalty = 0.7 * long_edge_penalty + 0.3 * short_edge_penalty + connectivity_penalty
    return combined_penalty
```
