```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the shortest path for each node to every other node
    all_pairs_shortest_path = np.min(distance_matrix, axis=1)
    # Use the shortest path as a baseline for comparison
    path_penalty = distance_matrix - all_pairs_shortest_path
    
    # Incorporate neighborhood effects by considering the average shortest path
    avg_neighborhood_distance = np.mean(all_pairs_shortest_path)
    neighborhood_penalty = np.where(distance_matrix < avg_neighborhood_distance, 0, (distance_matrix - avg_neighborhood_distance) ** 2)
    
    # Avoid overly simplistic metrics by adding a penalty for high connectivity
    # Define a connectivity penalty as the sum of distances to all other nodes minus the average
    connectivity_penalty = np.sum(distance_matrix, axis=0) - avg_neighborhood_distance
    connectivity_penalty = np.clip(connectivity_penalty, 0, None)  # Ensure non-negative penalty
    
    # Balance different penalty factors by using a weighted average
    weight_path = 0.5
    weight_neighborhood = 0.3
    weight_connectivity = 0.2
    combined_penalty = weight_path * path_penalty + weight_neighborhood * neighborhood_penalty + weight_connectivity * connectivity_penalty
    
    return combined_penalty
```
