```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance, standard deviation, and variance of distances
    average_distance = np.mean(distance_matrix)
    std_deviation = np.std(distance_matrix)
    variance = np.var(distance_matrix)
    
    # Define penalties for long, short, and outlier edges
    long_edge_penalty = np.maximum(0, distance_matrix - (average_distance + std_deviation))
    short_edge_penalty = np.maximum(0, distance_matrix - (average_distance - std_deviation))
    outlier_penalty = np.maximum(0, (np.abs(distance_matrix - average_distance) > 2 * std_deviation)) * (variance / std_deviation)
    
    # Normalize penalties based on the deviation from the average distance
    normalized_long_edge_penalty = (long_edge_penalty - average_distance) ** 2
    normalized_short_edge_penalty = (short_edge_penalty - average_distance) ** 2
    
    # Combine penalties with a weighted average
    combined_penalty = 0.6 * normalized_long_edge_penalty + 0.4 * normalized_short_edge_penalty + 0.2 * outlier_penalty
    return combined_penalty
```
