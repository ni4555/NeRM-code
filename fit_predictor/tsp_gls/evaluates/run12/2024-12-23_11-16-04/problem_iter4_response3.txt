```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the global min, max, and average distances
    global_min_distance = np.min(distance_matrix)
    global_max_distance = np.max(distance_matrix)
    average_distance = np.mean(distance_matrix)
    
    # Normalize the distance matrix
    normalized_distance_matrix = (distance_matrix - global_min_distance) / (global_max_distance - global_min_distance)
    
    # Initialize a penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Add penalties for edge lengths that are too short or too long relative to the average distance
    short_threshold = average_distance * 0.8
    long_threshold = average_distance * 1.2
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if normalized_distance_matrix[i, j] < short_threshold:
                penalty_matrix[i, j] = (short_threshold - normalized_distance_matrix[i, j])**2
            elif normalized_distance_matrix[i, j] > long_threshold:
                penalty_matrix[i, j] = (normalized_distance_matrix[i, j] - long_threshold)**2
    
    # Calculate the degree of each node
    degrees = np.sum(normalized_distance_matrix, axis=1)
    
    # Normalize the degrees and add a penalty for high degrees to encourage diversity
    max_degree = np.max(degrees)
    degree_penalty_factor = max_degree / (np.mean(degrees) + 1e-10)
    for i in range(distance_matrix.shape[0]):
        penalty_matrix[i] += (degrees[i] / degree_penalty_factor)**2
    
    # Add a penalty for high connectivity to the starting node to encourage visiting other nodes first
    for i in range(distance_matrix.shape[0]):
        penalty_matrix[i, 0] += 0.5
        penalty_matrix[0, i] += 0.5
    
    return penalty_matrix
```
