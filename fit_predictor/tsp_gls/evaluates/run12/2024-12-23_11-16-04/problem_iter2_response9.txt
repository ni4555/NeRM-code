```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the shortest path for each node to every other node
    all_pairs_shortest_path = np.min(distance_matrix, axis=1)
    # Use the shortest path as a baseline for comparison
    # Add a penalty for each edge based on how much longer it is than the shortest path
    path_penalty = distance_matrix - all_pairs_shortest_path
    # Consider the neighborhood impact by adding a term that encourages paths with lower total neighborhood distance
    # Calculate the total distance for each node to its first neighbor
    neighborhood_distance = np.min(distance_matrix, axis=1)
    # Use the average neighborhood distance as a reference for the penalty
    avg_neighborhood_distance = np.mean(neighborhood_distance)
    # The penalty should be higher for paths that have a higher total neighborhood distance
    neighborhood_penalty = (neighborhood_distance - avg_neighborhood_distance) ** 2
    # Combine the penalties into the heuristic
    return path_penalty + neighborhood_penalty
```
