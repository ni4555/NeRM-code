```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    
    # Calculate penalties for long and short edges based on a more meaningful threshold
    short_threshold = np.percentile(distance_matrix, 10)
    long_threshold = np.percentile(distance_matrix, 90)
    
    # Avoid division by zero in logarithmic penalty function
    distance_matrix += 1  # Shift to avoid log(0)
    
    # Calculate penalties
    short_edge_penalty = np.log(distance_matrix / short_threshold)
    long_edge_penalty = np.log(long_threshold / distance_matrix)
    
    # Range penalty to avoid dead-ends
    range_penalty = np.where((distance_matrix > short_threshold) & (distance_matrix < long_threshold),
                             distance_matrix, 0)
    
    # Avoid large penalties for the first and last node to encourage visiting all nodes
    # Add a penalty to the diagonal elements (self-loops)
    penalty_matrix = short_edge_penalty + long_edge_penalty - range_penalty
    penalty_matrix[np.diag_indices(num_nodes)] += 1  # Large penalty for self-loops
    penalty_matrix[np.diag_indices(num_nodes, k=1)] += 1  # Large penalty for the first node
    penalty_matrix[np.diag_indices(num_nodes, k=-1)] += 1  # Large penalty for the last node
    
    # Normalize the penalty matrix to ensure all values are in a comparable range
    penalty_matrix = (penalty_matrix - np.min(penalty_matrix)) / (np.max(penalty_matrix) - np.min(penalty_matrix))
    
    return penalty_matrix
```
