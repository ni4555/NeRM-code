```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Further refine the heuristic by considering the local optimal route
    # Assuming that the local optimal route is provided as a list of edges
    local_optimal_edges = [(i, j) for i in range(num_vertices) for j in range(i+1, num_vertices) if distance_matrix[i][j] < deviations[i][j]]
    
    # Apply a higher penalty to edges not in the local optimal route
    for i, j in local_optimal_edges:
        deviations[i][j] = deviations[j][i] = 0
    
    # Apply a bonus to edges in the local optimal route
    bonus = 1 - (deviations.max() - deviations.min())
    for i, j in local_optimal_edges:
        deviations[i][j] = deviations[j][i] = bonus
    
    return deviations
```
