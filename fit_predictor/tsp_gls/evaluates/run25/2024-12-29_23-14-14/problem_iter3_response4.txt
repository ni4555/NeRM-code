```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # It's bad to include edges that are significantly longer than their neighboring edges
    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # It's more bad if the edge is significantly longer than its neighbors and if it's not part of the current route
    # Assuming the local optimal route is a binary matrix with 1s on the edges that are part of the route
    route_edges = np.where(np.sum(distance_matrix, axis=0) > 0, 1, 0)
    penalty = deviations * (1 - route_edges)
    
    # Balance exploration by encouraging edges that have low deviation but are not part of the current route
    # Normalize the penalty matrix to [0, 1]
    penalty = (penalty - penalty.min()) / (penalty.max() - penalty.min())
    
    return penalty
```
