```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Normalize the distance matrix
    min_distance = np.min(distance_matrix, axis=1)
    normalized_matrix = distance_matrix / min_distance[:, np.newaxis]
    
    # Calculate the penalty for edges far from the shortest path
    penalty = (1 + np.abs(normalized_matrix - 1))
    
    # Calculate a bonus for edges that are close to the shortest path
    bonus = 1 / (1 + np.abs(normalized_matrix - 0.5))
    
    # Integrate contextual information by adding a bonus for edges near the minimum distance
    min_distance bonus = np.where(distance_matrix < min_distance[:, np.newaxis] + 1,
                                  1.5,
                                  0)
    
    # Combine penalties and bonuses
    heuristics_matrix = penalty * bonus + min_distance_bonus
    
    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    
    return heuristics_matrix
```
