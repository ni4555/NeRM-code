```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to store the heuristic values
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Penalize current route edges more
    route_indices = np.random.choice(len(distance_matrix), size=len(distance_matrix) // 2, replace=False)
    heuristic_matrix[route_indices] = 1.0
    
    # Encourage diversification by considering the edge length deviation from the mean
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Add a diversification heuristic by penalizing edges that are outliers
    # Define a threshold for outliers
    threshold = 0.5  # This can be adjusted based on the problem context
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            if deviations[i, j] > threshold:
                heuristic_matrix[i, j] = 1.0
                heuristic_matrix[j, i] = 1.0
    
    # Balance exploration and exploitation by introducing a small exploration factor
    # This factor makes the heuristic more sensitive to longer edges
    exploration_factor = 0.1
    heuristic_matrix = (1 - exploration_factor) * heuristic_matrix + exploration_factor * deviations
    
    return heuristic_matrix
```
