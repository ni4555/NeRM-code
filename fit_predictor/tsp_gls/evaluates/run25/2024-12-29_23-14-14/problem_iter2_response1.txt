```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, local_optimal_route: np.ndarray) -> np.ndarray:
    # Calculate the distance between vertices in the local optimal route
    local_optimal_distances = np.triu(np.dot(np.ones((len(local_optimal_route), len(local_optimal_route))), 
                                           np.transpose(np.linalg.pinv(np.dot(np.ones((len(local_optimal_route), len(local_optimal_route))), 
                                                                         np.diag(local_optimal_distances)))))

    # Normalize the local optimal distances to create a penalty for each edge
    local_optimal_penalty = local_optimal_distances / np.max(local_optimal_distances)

    # Calculate the bonus for non-local optimal route edges
    non_local_optimal_bonus = 1 - local_optimal_penalty

    # Create a heuristics matrix that combines the penalty and bonus
    heuristics_matrix = np.maximum(distance_matrix + non_local_optimal_bonus, 0)

    return heuristics_matrix
```
