```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Calculate the minimum distance for each vertex to any other vertex
    min_distance = np.min(distance_matrix, axis=1)
    
    # Calculate the second minimum distance for each vertex to any other vertex
    second_min_distance = np.partition(distance_matrix, 1, axis=1)[:, 1]
    
    # Calculate the penalty for edges that are not close to the minimum distance
    penalty = np.maximum(0, (distance_matrix - second_min_distance) / (min_distance - second_min_distance))
    
    # Calculate a bonus for edges that are close to the minimum distance
    bonus = np.where(distance_matrix == min_distance, 2, 1)
    
    # Normalize the penalties and bonuses to ensure non-negative values
    penalty = np.maximum(0, penalty)
    bonus = np.maximum(0, bonus)
    
    # Calculate the heuristic value for each edge
    heuristics_matrix = penalty + bonus
    
    # Normalize the heuristics matrix to ensure all values are non-negative and balanced
    heuristics_matrix = heuristics_matrix / np.maximum(1, np.sum(heuristics_matrix, axis=0))
    
    return heuristics_matrix
```
