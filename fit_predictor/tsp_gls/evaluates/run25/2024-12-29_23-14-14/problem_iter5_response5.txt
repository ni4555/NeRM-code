```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Normalize the distance matrix to have a 0-1 scale
    normalized_distance_matrix = (distance_matrix - np.min(distance_matrix)) / (np.max(distance_matrix) - np.min(distance_matrix))
    
    # Calculate the minimum distance for each vertex to any other vertex
    min_distance = np.min(normalized_distance_matrix, axis=1)
    
    # Calculate the second minimum distance for each vertex to any other vertex
    second_min_distance = np.partition(normalized_distance_matrix, 1, axis=1)[:, 1]
    
    # Create a penalty based on how far the edge is from the shortest edge
    penalty = np.where(normalized_distance_matrix == min_distance,
                       0,
                       np.where(normalized_distance_matrix == second_min_distance,
                                0.1,
                                0.5))
    
    # Create a diversity factor that encourages edges not used in the current route
    diversity_factor = np.where(normalized_distance_matrix < 0.5,
                                0.5,
                                0)
    
    # Combine the penalty and diversity factor to create the heuristics matrix
    heuristics_matrix = penalty + diversity_factor
    
    # Integrate neighborhood information to provide context
    for i in range(num_vertices):
        for j in range(num_vertices):
            if i != j:
                if distance_matrix[i][j] < min_distance[i] + 1:
                    heuristics_matrix[i][j] *= 1.2  # Boost the heuristics for nearby edges
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristics_matrix = np.maximum(0, heuristics_matrix)
    
    return heuristics_matrix
```
