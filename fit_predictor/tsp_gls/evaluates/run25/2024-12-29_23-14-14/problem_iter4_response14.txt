```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, local_optimal_route: list) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Apply a higher penalty to edges not in the local optimal route
    penalty = 1 - (deviations.max() - deviations.min())
    bonus = deviations.max() - deviations.min()
    
    # Check if an edge is in the local optimal route
    in_local_optimal = np.vectorize(lambda x, y: (x, y) in local_optimal_route)(np.arange(num_vertices), np.arange(num_vertices))
    
    # Apply penalties and bonuses
    deviations *= ~in_local_optimal  # Multiply by False to apply penalty
    deviations *= in_local_optimal  # Multiply by True to apply bonus
    
    # Ensure the minimum value is 0 and the maximum value is 1
    deviations = np.clip(deviations, 0, 1)
    
    return deviations
```
