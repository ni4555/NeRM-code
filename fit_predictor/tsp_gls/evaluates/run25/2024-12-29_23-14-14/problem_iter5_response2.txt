```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Calculate the minimum distance for each vertex to any other vertex
    min_distance = np.min(distance_matrix, axis=1)
    
    # Calculate the second minimum distance for each vertex to any other vertex
    second_min_distance = np.partition(distance_matrix, 1, axis=1)[:, 1]
    
    # Calculate the bonus for edges that are close to the minimum distance
    bonus = np.where(distance_matrix == min_distance,
                     1,
                     np.where(distance_matrix == second_min_distance,
                              0.5,
                              0))
    
    # Calculate the penalty for longer edges based on their ratio to the shortest edge
    penalty = (distance_matrix / np.min(distance_matrix)) * 2
    
    # Calculate the normalization factor for consistent comparison
    normalization_factor = np.max(penalty) / np.max(distance_matrix)
    
    # Combine the penalty and bonus, and normalize the values
    combined_scores = (penalty + bonus) / normalization_factor
    
    # Integrate contextual information by giving a higher bonus to edges that are not part of the local optimal route
    for i in range(num_vertices):
        for j in range(num_vertices):
            if distance_matrix[i][j] < min_distance[i] + 1:
                combined_scores[i][j] += 1.5
    
    # Apply an exploration-exploitation balance by adjusting the scores
    exploration_exploitation_balance = np.random.rand(num_vertices, num_vertices)
    exploration_exploitation_balance = (exploration_exploitation_balance + combined_scores) / 2
    
    # Ensure all values are non-negative
    heuristics_matrix = np.maximum(0, exploration_exploitation_balance)
    
    return heuristics_matrix
```
