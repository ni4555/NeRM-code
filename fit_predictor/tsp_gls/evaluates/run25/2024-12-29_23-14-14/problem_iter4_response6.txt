```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)
    
    # Calculate the average distance to all neighbors for each edge
    average_distance_to_neighbors = np.mean(distance_matrix, axis=1)
    
    # Calculate the number of neighbors for each edge (excluding itself)
    number_of_neighbors = np.sum(distance_matrix != np.inf, axis=1) - 1
    
    # Calculate the diversity of the neighborhood (lower is better)
    neighborhood_diversity = number_of_neighbors / (np.sum(distance_matrix != np.inf) - len(distance_matrix))
    
    # Combine the factors to create a heuristic score
    combined_weight = distance_matrix + (min_distance_to_neighbor / np.max(min_distance_to_neighbor)) + \
                      (average_distance_to_neighbors / np.max(average_distance_to_neighbors)) + \
                      (1 / neighborhood_diversity)
    
    # Avoid excessive normalization by not scaling the combined_weight to the range [0, 1]
    # This allows the heuristic to have a wider range of values, which may be beneficial
    
    # Incorporate diversity by adding a small penalty for edges with low diversity
    diversity_penalty = 1 / (1 + neighborhood_diversity)
    
    # The heuristic returns a matrix with values indicating how bad it is to include each edge
    # We use a penalty to ensure that edges with low diversity are less favored
    final_weights = combined_weight * diversity_penalty
    
    return final_weights
```
