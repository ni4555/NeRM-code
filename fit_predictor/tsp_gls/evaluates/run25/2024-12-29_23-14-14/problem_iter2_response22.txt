```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, local_optimal_route: np.ndarray) -> np.ndarray:
    # Initialize a matrix to store penalties for each edge
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Identify edges that are part of the current local optimal route
    for i in range(len(local_optimal_route) - 1):
        penalty_matrix[local_optimal_route[i], local_optimal_route[i + 1]] += 10
    
    # Calculate the average distance of edges that are not part of the local optimal route
    non_local_edges = distance_matrix[~np.isin(np.arange(distance_matrix.shape[0]), local_optimal_route), 
                                         ~np.isin(np.arange(distance_matrix.shape[1]), local_optimal_route)]
    avg_non_local_distance = np.mean(non_local_edges)
    
    # Apply a penalty for edges that are significantly longer than the average of non-local edges
    penalty_matrix += np.where(distance_matrix > avg_non_local_distance + (avg_non_local_distance * 0.1), 1, 0)
    
    # Incorporate diversity by applying a random penalty to some edges
    np.random.seed(0)  # For reproducibility
    random_indices = np.random.choice(np.prod(distance_matrix.shape), size=np.int(np.prod(distance_matrix.shape) * 0.05), replace=False)
    penalty_matrix[random_indices // distance_matrix.shape[0], random_indices % distance_matrix.shape[1]] += np.random.choice([0, 5, 10], p=[0.1, 0.6, 0.3])
    
    return penalty_matrix
```
