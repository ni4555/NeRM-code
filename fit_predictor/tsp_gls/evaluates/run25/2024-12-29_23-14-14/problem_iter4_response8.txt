```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Incorporate local knowledge by penalizing edges in the local optimal route
    local_optimal_penalty = np.where(distance_matrix == np.min(distance_matrix), 2, 1)
    
    # Use statistical measures to capture edge characteristics
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate deviations from the mean
    deviations = distance_matrix - neighbors_mean
    
    # Normalize deviations to be within the range [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Use a logarithmic scale to penalize larger deviations more heavily
    deviations = np.log(1 + deviations)
    
    # Combine the penalties to create the badness matrix
    badness_matrix = local_optimal_penalty + deviations
    
    # Normalize the badness values to maintain a comparable scale across edges
    badness_matrix /= badness_matrix.max()
    
    return badness_matrix
```
