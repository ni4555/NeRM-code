```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # It's bad to include edges that are significantly longer than their neighboring edges
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # It's also bad to include edges that connect to vertices with high degrees
    # because these vertices are more likely to be in the middle of the route
    degree_penalty = np.sum(distance_matrix, axis=0) / (distance_matrix.shape[0] - 1)
    
    # Combine the penalties: a longer edge and a high-degree vertex are both more penalized
    combined_penalties = (distance_matrix - neighbors_mean) * degree_penalty
    
    # Normalize the combined penalties to ensure they are within the range of [0, 1]
    combined_penalties = (combined_penalties - combined_penalties.min()) / (combined_penalties.max() - combined_penalties.min())
    
    # Return a matrix where the value indicates how bad it is to include each edge
    return combined_penalties
```
