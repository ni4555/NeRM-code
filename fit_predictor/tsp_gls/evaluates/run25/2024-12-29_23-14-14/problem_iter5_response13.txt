```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Calculate the average distance for each vertex to any other vertex
    avg_distance = np.mean(distance_matrix, axis=1)
    
    # Calculate the variance for each vertex to any other vertex
    variance = np.var(distance_matrix, axis=1)
    
    # Normalize the average distance to ensure consistent comparison
    avg_distance_normalized = avg_distance / np.max(avg_distance)
    
    # Normalize the variance to ensure consistent comparison
    variance_normalized = variance / np.max(variance)
    
    # Calculate the diversity score by blending the normalized average distance and variance
    diversity_score = avg_distance_normalized + variance_normalized
    
    # Calculate the penalty for longer edges based on their ratio to the shortest edge
    penalty = (distance_matrix / np.min(distance_matrix)) * 2
    
    # Combine the diversity score and penalty to create the heuristics matrix
    heuristics_matrix = penalty + diversity_score
    
    # Apply an additional penalty for edges that are far from the average distance
    for i in range(num_vertices):
        for j in range(num_vertices):
            if distance_matrix[i][j] > avg_distance[i] + 1:
                heuristics_matrix[i][j] += 0.5
    
    # Normalize the heuristics matrix to ensure all values are non-negative
    heuristics_matrix = np.maximum(0, heuristics_matrix)
    
    return heuristics_matrix
```
