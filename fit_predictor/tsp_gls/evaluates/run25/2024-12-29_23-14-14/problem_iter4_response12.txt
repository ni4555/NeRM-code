```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the standard deviation for each edge's neighbors
    std_devs = np.std(distance_matrix, axis=1)
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Combine deviation and standard deviation into a single measure
    deviation_std_combination = deviations * std_devs
    
    # Normalize the combined measure to maintain the same scale as the original matrix
    max_combination = np.max(deviation_std_combination)
    normalized_combination = deviation_std_combination / max_combination
    
    # Add a diversity heuristic by considering the variance of the neighbors
    # The higher the variance, the more diversified the edge is
    variance_factor = np.var(distance_matrix, axis=1) / np.var(distance_matrix)
    
    # Combine the normalized deviation with the diversity factor
    combined_heuristic = normalized_combination * variance_factor
    
    # Apply a balance between exploration and exploitation by penalizing high deviation
    # and rewarding diversity. This encourages the heuristic to consider edges with
    # lower deviations and higher diversity.
    exploration_exploitation_balance = np.exp(-combined_heuristic)
    
    # Return a matrix where the value indicates how bad it is to include each edge
    return exploration_exploitation_balance
```
