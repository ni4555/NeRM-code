```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the initial usage by summing the row-wise and column-wise distances
    for i in range(distance_matrix.shape[0]):
        usage_matrix[i, :] = np.sum(distance_matrix[i, :])
        usage_matrix[:, i] = np.sum(distance_matrix[:, i])
    
    # Adjust distances based on the usage of the edges
    adjusted_distances = distance_matrix.copy()
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                adjusted_distances[i, j] += (usage_matrix[i, j] / distance_matrix.shape[0] - 0.5)
    
    # Return the adjusted distances as the heuristics indicator
    return adjusted_distances
```
