```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the betweenness centrality for each edge
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for k in range(distance_matrix.shape[0]):
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[0]):
                if distance_matrix[i, j] != 0:
                    betweenness_centrality[i, j] += (distance_matrix[i, k] * distance_matrix[k, j]) / (np.sum(distance_matrix[k, :] != 0))
    
    # Normalize the betweenness centrality
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    # Adjust the distance matrix based on the betweenness centrality
    adjusted_distance_matrix = distance_matrix.copy()
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            adjusted_distance_matrix[i, j] *= (1 - betweenness_centrality[i, j])
    
    # Introduce non-linear adjustments and diversity to escape local minima
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            # Non-linear adjustment using degrees to encourage less used edges
            adjusted_distance_matrix[i, j] += (degrees[i] * degrees[j] * 0.01)
    
    # Add random perturbations to encourage diversity
    np.random.seed(42)  # For reproducibility
    random_perturbation = np.random.normal(0, 0.01, adjusted_distance_matrix.shape)
    adjusted_distance_matrix += random_perturbation
    
    return adjusted_distance_matrix
```
