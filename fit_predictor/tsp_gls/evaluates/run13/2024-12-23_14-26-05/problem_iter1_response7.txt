```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use the usage frequency of each edge as a heuristic
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            usage_frequency[i, j] = np.sum(distance_matrix[i] * distance_matrix[:, j])
    
    # Normalize the usage frequency
    max_frequency = np.max(usage_frequency)
    if max_frequency == 0:
        return distance_matrix
    
    usage_frequency /= max_frequency
    
    # It's bad to include frequently used edges in the solution
    return 1 - usage_frequency
```
