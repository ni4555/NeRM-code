```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Introduce a penalty factor based on edge usage
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix[i])):
            if i != j:
                usage_matrix[i][j] = np.exp(-np.mean(distance_matrix[i][j]))
                usage_matrix[i][j] = np.maximum(usage_matrix[i][j], 1e-10)  # Avoid very small numbers that could cause numerical issues

    # Adjust penalties to consider how many times an edge has been used
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix[i])):
            if i != j:
                edge_usage_count = np.count_nonzero(distance_matrix[i]) + np.count_nonzero(distance_matrix[:, j])
                usage_matrix[i][j] = usage_matrix[i][j] ** edge_usage_count

    # Calculate average used distance for each edge
    average_used_distance = np.sum(distance_matrix[distance_matrix != np.inf]) / np.sum(distance_matrix != np.inf)

    # Introduce a bonus for edges with higher average distance in the used ones
    bonus_factor = average_used_distance
    bonus_matrix = bonus_factor * usage_matrix

    # Combine penalties and bonuses into a heuristic
    heuristic_matrix = 1 / (bonus_matrix + (1 - bonus_matrix))

    # Adjust the heuristic to have non-negative entries and a bounded range
    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)
    return heuristic_matrix
```
