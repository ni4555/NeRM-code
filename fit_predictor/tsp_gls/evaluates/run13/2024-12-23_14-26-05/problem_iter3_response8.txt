```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the betweenness centrality for each edge
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for k in range(distance_matrix.shape[0]):
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[0]):
                if distance_matrix[i, j] != 0:
                    betweenness_centrality[i, j] += (distance_matrix[i, k] * distance_matrix[k, j]) / (np.sum(distance_matrix[k, :] != 0))
    
    # Normalize the betweenness centrality
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    # Adjust the distance matrix based on the betweenness centrality
    adjusted_distance_matrix = distance_matrix.copy()
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            adjusted_distance_matrix[i, j] *= (1 - betweenness_centrality[i, j])
    
    # Add diversity by introducing a random walk
    random_walk_factor = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[0])
    random_walk_factor = (random_walk_factor + random_walk_factor.T) / 2
    random_walk_factor = np.maximum(random_walk_factor, 0)
    np.fill_diagonal(random_walk_factor, 0)
    
    # Introduce diversity by blending the random walk with the adjusted distances
    adjusted_distance_matrix *= (1 - np.random.rand())
    adjusted_distance_matrix += random_walk_factor * (np.random.rand() * np.max(distance_matrix))
    
    return adjusted_distance_matrix
```
