```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use edge usage as a heuristic and exploit the symmetry of the matrix
    edge_usage = np.zeros_like(distance_matrix)
    # Only iterate over unique pairs to avoid double counting
    unique_pairs = np.argwhere(np.triu(distance_matrix, k=1) < np.inf)
    
    # Calculate the usage of each edge
    for i, j in unique_pairs:
        usage_count = np.sum(np.isin([i, j], np.argwhere(distance_matrix[i] < distance_matrix).flatten()) & 
                              np.isin([i, j], np.argwhere(distance_matrix[j] < distance_matrix).flatten()))
        edge_usage[i, j] = edge_usage[j, i] = usage_count
    
    # Adjust distances based on the usage of the edges
    adjusted_distances = distance_matrix.copy()
    for i, j in unique_pairs:
        adjusted_distances[i, j] += (edge_usage[i, j] / distance_matrix.shape[0] - 0.5)
        adjusted_distances[j, i] = adjusted_distances[i, j]  # Reflect the adjustment for symmetry
    
    # Return the adjusted distances as the heuristics indicator
    return adjusted_distances
```
