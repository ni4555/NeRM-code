```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate betweenness centrality using a more efficient approach
    # Floyd-Warshall algorithm to find all pairs shortest paths first
    all_pairs_shortest_path = np.full(distance_matrix.shape, np.inf)
    all_pairs_shortest_path[np.arange(distance_matrix.shape[0]), np.arange(distance_matrix.shape[0])] = 0
    np.fill_diagonal(all_pairs_shortest_path, np.inf)
    for k in range(distance_matrix.shape[0]):
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[0]):
                all_pairs_shortest_path[i, j] = min(all_pairs_shortest_path[i, j], all_pairs_shortest_path[i, k] + all_pairs_shortest_path[k, j])
    
    # Calculate the betweenness centrality for each edge
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            betweenness_centrality[i, j] = np.sum(1 / all_pairs_shortest_path[i, k] for k in range(distance_matrix.shape[0]) if all_pairs_shortest_path[i, k] != 0 and all_pairs_shortest_path[k, j] != 0)
    
    # Normalize the betweenness centrality
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    # Adjust the distance matrix based on the betweenness centrality and node importance
    adjusted_distance_matrix = distance_matrix.copy()
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            adjusted_distance_matrix[i, j] *= (1 - betweenness_centrality[i, j]) * (1 / (degrees[i] + degrees[j]))
    
    # Normalize and balance influence metrics
    normalized_degree = degrees / np.sum(degrees)
    
    # Introduce variability through mutation
    mutation_rate = 0.1
    num_mutation = int(mutation_rate * distance_matrix.size)
    for _ in range(num_mutation):
        i, j = np.random.choice(distance_matrix.shape[0], 2, replace=False)
        if np.random.rand() < mutation_rate:
            adjusted_distance_matrix[i, j] = np.random.uniform(0, 1)
    
    return adjusted_distance_matrix
```
