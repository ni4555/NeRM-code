```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to store the heuristic values
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate edge usage
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                usage_matrix[i, j] = np.exp(-np.mean(distance_matrix[i, j]))
    
    # Calculate edge interaction
    interaction_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                # Sum of edges leading to node i and j
                sum_i = np.sum(distance_matrix[i, :])
                sum_j = np.sum(distance_matrix[:, j])
                # Interaction factor based on the sum of edges
                interaction_factor = np.mean(sum_i + sum_j)
                interaction_matrix[i, j] = np.exp(-interaction_factor)
    
    # Calculate a bonus factor for less central edges
    diversity_factor = np.sum(distance_matrix) / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Combine the usage, interaction, and diversity factors into the heuristic
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                heuristic_matrix[i, j] = usage_matrix[i, j] + interaction_matrix[i, j] + diversity_factor
    
    # Apply a non-linear adjustment to the heuristic matrix
    heuristic_matrix = np.exp(-heuristic_matrix)
    
    return heuristic_matrix
```
