```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Calculate the shortest path from each node to every other node
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                min_distances[i, j] = np.argmin(distance_matrix[i, :]) + np.argmin(distance_matrix[:, j])

    # Initialize the heuristic matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # It's bad to include long edges that are not the shortest path
    for i in range(n):
        for j in range(n):
            if i != j:
                if min_distances[i, j] != i + min_distances[i, j]:
                    heuristic_matrix[i, j] = distance_matrix[i, j] - min_distances[i, j]
    
    return heuristic_matrix
```
