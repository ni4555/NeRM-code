```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = distance_matrix[i, j] - np.min(distance_matrix[i, :]) - np.min(distance_matrix[:, j])
                
                # Additional heuristic: If there's a direct edge between i and j, penalize it
                if distance_matrix[i, j] == np.min(distance_matrix[i, :]) or distance_matrix[i, j] == np.min(distance_matrix[:, j]):
                    heuristics[i, j] += 1

                # Another heuristic: If the distance is less than the minimum distance to either i or j, penalize it
                if distance_matrix[i, j] < np.min(distance_matrix[i, :]) and distance_matrix[i, j] < np.min(distance_matrix[:, j]):
                    heuristics[i, j] += 2

    return heuristics
```
