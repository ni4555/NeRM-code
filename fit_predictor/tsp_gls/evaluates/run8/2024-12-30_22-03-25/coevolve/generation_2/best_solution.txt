Fitness: 10.822793291731537

Description:
Optimizing the Traveling Salesman Problem (TSP) through a hybrid approach that integrates a genetic algorithm with simulated annealing, guided by a sophisticated heuristic function. The algorithm aims to traverse all nodes, visiting each exactly once and returning to the origin, while minimizing the total distance traveled. This method leverages adaptive parameter tuning, multi-criteria optimization, and iterative refinement to converge towards a superior global optimum, potentially outperforming existing solutions with a fitness score better than 10.61187021517528.

Code:
import numpy as np
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Example heuristic: negative of the distance (the closer, the better)
                heuristics[i, j] = -distance_matrix[i, j]
            else:
                # No heuristic for self-loops
                heuristics[i, j] = float('inf')
    
    return heuristics