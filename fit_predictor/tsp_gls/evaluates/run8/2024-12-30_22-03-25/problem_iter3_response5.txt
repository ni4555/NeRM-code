```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])
    
    # Include an additional heuristic that considers the "worse" of the two shortest paths
    # to penalize the inclusion of edges that are not the shortest for both nodes involved.
    return distance_matrix - np.minimum(min_distances, distance_matrix.T)
```
