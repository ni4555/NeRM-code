```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])

    # Calculate the difference from the shortest paths for each edge
    difference = distance_matrix - min_distances
    
    # We want to penalize edges that deviate significantly from the shortest paths
    # Use a logarithmic transformation to avoid dealing with very high numbers
    # and to penalize deviations more heavily
    # The +1e-8 is to prevent log(0) and is similar to the v0 version
    return np.log(difference + 1e-8)
```
