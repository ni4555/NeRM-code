```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])
    
    # Calculate the degree of each node, which is a measure of its connectivity
    node_degrees = np.sum(distance_matrix > 0, axis=0)
    
    # Combine the criteria: badness of long edges, and the penalty for high degree nodes
    # The heuristic function returns the weighted sum of these measures
    # Weighing factors are chosen arbitrarily and can be tuned for different cases
    edge_badness = distance_matrix - min_distances
    degree_penalty = node_degrees / n  # Normalize the degree by the number of nodes
    weight_edge_badness = 0.7
    weight_degree_penalty = 0.3
    
    # The heuristic function is the weighted sum of the two measures
    return weight_edge_badness * edge_badness + weight_degree_penalty * degree_penalty
```
