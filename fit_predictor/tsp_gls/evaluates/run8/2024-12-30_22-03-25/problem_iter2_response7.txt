```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=0)
    relative_degrees = degrees / n
    # Combine the distance with the relative degree, giving higher weights to nodes with higher relative degree
    combined_heuristic = distance_matrix * relative_degrees
    # Incorporate the triangle inequality penalty
    triangle_inequality_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if i != j and j != k and i != k:
                    triangle_inequality = distance_matrix[i, j] + distance_matrix[j, k] + distance_matrix[i, k] - distance_matrix[i, j] - distance_matrix[j, k] - distance_matrix[i, k]
                    triangle_inequality_penalty[i, j] = abs(triangle_inequality)
    # Add the triangle inequality penalty to the combined heuristic
    combined_heuristic += triangle_inequality_penalty
    # Normalize the heuristic to ensure that the sum of all heuristic values is equal to the number of edges (n-1)
    combined_heuristic /= (n - 1)
    # Make sure that self-loops are not considered in the heuristic
    np.fill_diagonal(combined_heuristic, np.inf)
    return combined_heuristic
```
