```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a combination of distance, node degree, and a penalty for high degree nodes
    degrees = np.sum(distance_matrix, axis=0)
    relative_degrees = degrees / np.sum(degrees)
    # Weigh high degrees with a penalty factor to discourage choosing highly connected nodes
    penalty_factor = 1 + 0.5 * (relative_degrees - 1)
    # Combine the distance with the relative degree and the penalty factor
    combined_heuristic = distance_matrix * relative_degrees * penalty_factor
    # Avoid considering self-loops in the heuristic
    np.fill_diagonal(combined_heuristic, np.inf)
    return combined_heuristic
```
