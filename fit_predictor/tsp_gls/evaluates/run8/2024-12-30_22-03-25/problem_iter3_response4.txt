```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the shortest path from each node to every other node
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            # Use a priority queue to find the minimum distance
            min_distances[i, j] = min((distance_matrix[i, k] + distance_matrix[k, j] for k in range(n) if i != k and j != k), default=float('inf'))
    
    # It's bad to include long edges that are not the shortest path
    return distance_matrix - min_distances
```
