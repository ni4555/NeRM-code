```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with the same shape as the distance matrix
    heuristics = np.zeros_like(distance_matrix)
    
    # Iterate over all pairs of nodes (i, j) where i != j
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the heuristic as the inverse of the distance plus 1
                # This assumes that the distance matrix is symmetric and the greater the distance, the worse the heuristic
                heuristics[i, j] = 1.0 / (distance_matrix[i, j] + 1e-8)  # Adding a small value to avoid division by zero
    
    return heuristics
```
