```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        min_distances[i, :] = np.sort(distance_matrix[i, :])
        min_distances[i, min_distances[i] == np.inf] = np.max(distance_matrix[i, :])

    # Incorporate domain knowledge and local optimization
    # Assume that nodes with higher connectivity (more neighbors) are less likely to be excluded
    # This is a heuristic assumption and may not be applicable to all TSP instances
    connectivity = np.sum(distance_matrix > 0, axis=1)
    adjusted_distances = distance_matrix - min_distances
    adjusted_distances += connectivity / n  # Increase penalty for less connected nodes

    return adjusted_distances
```
