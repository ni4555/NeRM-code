```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Introduce penalties for edges that are part of the longest cycle
    longest_cycle = np.max(np.sum(distance_matrix, axis=1))
    cycle_penalty = longest_cycle / (n - 1)

    # Introduce penalties for edges with high variability in their weights
    for i in range(n):
        sorted_distances = np.sort(distance_matrix[i])
        variability = np.abs(np.diff(sorted_distances))
        max_deviation = np.max(variability)
        variability_penalty = max_deviation / np.sum(sorted_distances)

    # Introduce diversity factors that encourage different paths
    diversity_factor = np.random.random(size=distance_matrix.shape)

    # Combine the penalties and diversity factors to create the heuristic matrix
    for i in range(n):
        for j in range(n):
            if i != j:
                if i == 0 and j == 0:
                    # The starting and ending node should not have high penalties
                    heuristic_matrix[i, j] = 0
                else:
                    heuristic_matrix[i, j] = distance_matrix[i, j] + cycle_penalty + variability_penalty * diversity_factor[i, j]

    return heuristic_matrix
```
