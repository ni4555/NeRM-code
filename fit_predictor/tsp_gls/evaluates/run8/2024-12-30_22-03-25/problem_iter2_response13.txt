```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape to store the heuristic values
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the distance for each pair of nodes
    distances = distance_matrix.copy()
    
    # Calculate the degree of each node and normalize it
    degrees = np.sum(distance_matrix, axis=0)
    normalized_degrees = degrees / np.sum(degrees)
    
    # Calculate the heuristic value for each edge
    # This heuristic considers both the distance and the relative degree of the nodes
    # Nodes with higher relative degree have a greater influence on the heuristic value
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            if distance_matrix[i, j] > 0:  # Avoid self-loops
                heuristic_value = (distance_matrix[i, j] / np.sqrt(normalized_degrees[i] * normalized_degrees[j]))
                heuristic_matrix[i, j] = heuristic_value
                heuristic_matrix[j, i] = heuristic_value  # The matrix is symmetric
    
    # Handle the diagonal elements by setting them to infinity, as they represent self-loops
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
