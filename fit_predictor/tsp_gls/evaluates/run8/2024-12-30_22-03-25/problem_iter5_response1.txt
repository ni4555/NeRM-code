```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])
    
    # Incorporate domain knowledge by adding a penalty for edges that are not part of the shortest path
    # and by balancing the complexity by considering the average distance to other nodes
    return distance_matrix - min_distances + (distance_matrix ** 2) / (n * (n - 1))
```
