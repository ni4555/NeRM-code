```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            min_distances[i, j] = np.min([distance_matrix[i, k] + distance_matrix[k, j] for k in range(n)])
    
    relative_degrees = np.sum(distance_matrix, axis=1) / n
    min_degree = np.min(relative_degrees)
    max_degree = np.max(relative_degrees)
    degree_scale = (relative_degrees - min_degree) / (max_degree - min_degree)
    
    # Normalize the distance matrix with the degree scale
    normalized_distances = distance_matrix * degree_scale
    
    # Apply triangle inequality as a penalty
    triangle_inequality_penalty = np.zeros_like(normalized_distances)
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if i != j and j != k and i != k:
                    triangle_inequality = normalized_distances[i, j] + normalized_distances[j, k] + normalized_distances[i, k] - distance_matrix[i, j] - distance_matrix[j, k] - distance_matrix[i, k]
                    if triangle_inequality > 0:
                        triangle_inequality_penalty[i, j] = triangle_inequality
    
    # Combine the normalized distances with the triangle inequality penalty
    combined_heuristic = normalized_distances + triangle_inequality_penalty
    # Make sure that self-loops are not considered in the heuristic
    np.fill_diagonal(combined_heuristic, np.inf)
    
    return combined_heuristic
```
