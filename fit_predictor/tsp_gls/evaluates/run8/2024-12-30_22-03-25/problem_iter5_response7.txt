```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])
    
    # We introduce a penalty for long edges that are not the shortest path
    # and also consider the distance to the nearest node
    penalties = distance_matrix - min_distances
    nearest_node_distances = np.min(distance_matrix, axis=1)
    return penalties + nearest_node_distances
```
