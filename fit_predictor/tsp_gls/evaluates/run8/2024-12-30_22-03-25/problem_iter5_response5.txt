```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))

    # Calculate the shortest path from each node to every other node
    for i in range(n):
        min_distances[i, :] = np.sort(distance_matrix[i, :])[1:]  # Exclude the distance to the node itself

    # Incorporate domain knowledge: if an edge is close to the shortest path, it's considered better
    # Use the fact that the shortest distance to a node is less than or equal to the shortest path to another node
    heuristics_matrix = distance_matrix.copy()
    for i in range(n):
        for j in range(n):
            if j != i:
                heuristics_matrix[i, j] = min(heuristics_matrix[i, j], min_distances[i, j])

    return heuristics_matrix
```
