```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_edge_distances = np.min(distance_matrix, axis=1)
    max_edge_distances = np.max(distance_matrix, axis=1)
    min_edge_distances = np.reshape(min_edge_distances, (n, 1))
    max_edge_distances = np.reshape(max_edge_distances, (1, n))

    # Calculate the degree of each node
    node_degrees = np.sum(distance_matrix > 0, axis=0)

    # Combine the criteria: badness of long edges, and the penalty for high degree nodes
    edge_badness = max_edge_distances - min_edge_distances
    degree_penalty = node_degrees / n  # Normalize the degree by the number of nodes

    # Weighing factors
    weight_edge_badness = 0.6
    weight_degree_penalty = 0.4

    # Create the heuristic matrix
    heuristic_matrix = weight_edge_badness * edge_badness + weight_degree_penalty * degree_penalty

    # Add the heuristic values to the original distance matrix
    return distance_matrix + heuristic_matrix
```
