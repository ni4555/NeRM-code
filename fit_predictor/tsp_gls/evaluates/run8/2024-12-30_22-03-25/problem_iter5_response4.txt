```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            # Consider the shortest path from each node to every other node
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])
            # Consider domain knowledge, e.g., avoiding high traffic routes
            if i == j:
                min_distances[i, j] += 100  # Higher cost for revisiting the starting node
            else:
                # Apply a heuristic that discourages using long edges first
                min_distances[i, j] += np.max(distance_matrix[i, :]) + np.max(distance_matrix[:, j])

    # Create a heuristic matrix by subtracting the shortest path cost from the original matrix
    heuristic_matrix = distance_matrix - min_distances

    # Apply a local optimization heuristic to encourage the use of intermediate paths
    for i in range(n):
        for j in range(n):
            if i != j:
                # Check if using an edge between two nodes can be beneficial
                intermediate_node = np.random.randint(n)
                intermediate_cost = distance_matrix[i, intermediate_node] + distance_matrix[intermediate_node, j]
                # If the cost of using the intermediate node is lower, update the heuristic
                if intermediate_cost < min_distances[i, j]:
                    min_distances[i, j] = intermediate_cost

    # Return the adjusted heuristic matrix
    return heuristic_matrix
```
