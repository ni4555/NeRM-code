```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    
    # Calculate shortest path for each pair using Dijkstra's algorithm
    for i in range(n):
        # Create a priority queue
        priority_queue = [(0, i)]
        # Create a set to keep track of visited nodes
        visited = set()
        # Create a matrix to store the shortest distance to each node
        distances = np.full((n,), np.inf)
        distances[i] = 0
        
        while priority_queue:
            current_distance, current_node = heapq.heappop(priority_queue)
            
            if current_node in visited:
                continue
            
            visited.add(current_node)
            
            for neighbor in range(n):
                if neighbor not in visited:
                    distance = current_distance + distance_matrix[current_node, neighbor]
                    if distance < distances[neighbor]:
                        distances[neighbor] = distance
                        heapq.heappush(priority_queue, (distance, neighbor))
        
        min_distances[i, :] = distances
    
    # Incorporate domain knowledge: penalize edges that are longer than a certain threshold
    # This threshold can be based on empirical data or domain knowledge
    threshold = np.percentile(min_distances.diagonal(), 90)
    penalty = min_distances - threshold
    
    # Include local optimization: favor edges that have been visited more recently
    # Introduce a cooling factor to reduce the influence of the local optimization over time
    cooling_factor = 0.99
    recent_visits = np.zeros((n, n))
    for _ in range(100):  # Assuming 100 iterations for local optimization
        for i in range(n):
            for j in range(n):
                if i != j:
                    recent_visits[i, j] = cooling_factor * recent_visits[i, j] + 1
                    if distance_matrix[i, j] < distance_matrix[i, np.argmin(recent_visits[i, :])] and distance_matrix[i, j] < distance_matrix[np.argmin(recent_visits[:, j]), j]:
                        penalty[i, j] += 1
    
    return penalty
```
