```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            # Use the actual distance if it's the shortest among the possible paths
            # Otherwise, use a larger value (mutated) to reflect "badness"
            if distance_matrix[i, j] == np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j]):
                min_distances[i, j] = distance_matrix[i, j]
            else:
                min_distances[i, j] = distance_matrix[i, j] + np.random.rand() * (np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j]) - distance_matrix[i, j])
    
    # It's bad to include long edges that are not the shortest path
    return distance_matrix - min_distances
```
