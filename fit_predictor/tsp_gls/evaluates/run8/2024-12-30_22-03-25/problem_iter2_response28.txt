```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a combination of the distance and the centrality of the node to determine the heuristic
    # Calculate the centrality based on the sum of distances to all other nodes
    node_centralities = np.sum(distance_matrix, axis=1)
    # Normalize the centrality by the sum of all node centralities to get a relative measure
    relative_centralities = node_centralities / np.sum(node_centralities)
    # Combine the distance with the relative centrality, giving higher weights to nodes with higher relative centrality
    combined_heuristic = distance_matrix * relative_centralities
    # Make sure that self-loops (i.e., when the distance is 0) are not considered in the heuristic
    np.fill_diagonal(combined_heuristic, np.inf)
    return combined_heuristic
```
