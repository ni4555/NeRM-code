```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the maximum distance in the matrix
    max_distance = np.max(distance_matrix)
    
    # Calculate the average distance
    average_distance = np.mean(distance_matrix)
    
    # Calculate the standard deviation of distances
    std_dev = np.std(distance_matrix)
    
    # Define a heuristic matrix where lower values are preferred
    # For this heuristic, we consider the maximum distance as a bad edge,
    # the average distance as an average edge, and edges close to the average
    # or below the average as good edges.
    heuristic_matrix = np.where(distance_matrix > max_distance, max_distance,
                               np.where(distance_matrix > average_distance, 2 * std_dev,
                                        np.where(distance_matrix > average_distance - std_dev, std_dev,
                                                 np.where(distance_matrix > average_distance - 2 * std_dev, 0.5 * std_dev,
                                                          np.where(distance_matrix > 0, 1, 0)))))
    return heuristic_matrix
```
