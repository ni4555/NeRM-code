```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    
    # Calculate the shortest path from each node to every other node
    for i in range(n):
        min_distances[i, :] = np.partition(distance_matrix[i, :], 2)[:2]
        min_distances[i, :] = np.sort(min_distances[i, :])
    
    # Create the heuristic matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # For each edge, calculate the difference from the shortest path
    for i in range(n):
        for j in range(n):
            if i != j:
                # If the edge is in the shortest path from either node
                if distance_matrix[i, j] == min_distances[i, 0] or distance_matrix[i, j] == min_distances[i, 1]:
                    heuristic_matrix[i, j] = 0
                else:
                    # If not, calculate the heuristic based on how much longer this edge is
                    # compared to the shortest paths from each node
                    heuristic_value = np.abs(distance_matrix[i, j] - min_distances[i, 0])
                    heuristic_matrix[i, j] = max(heuristic_value, np.abs(distance_matrix[i, j] - min_distances[i, 1]))
    
    # If the heuristic value is 0, set it to np.inf to avoid considering this edge
    np.fill_diagonal(heuristic_matrix, np.inf)
    return heuristic_matrix
```
