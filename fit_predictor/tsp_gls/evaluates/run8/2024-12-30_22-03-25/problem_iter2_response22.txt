```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    triangle_inequality_penalty = np.zeros_like(distance_matrix)
    max_cycle_penalty = np.max(np.triu(distance_matrix, k=1) + np.tril(distance_matrix, k=-1))

    # Calculate triangle inequality penalty
    for i in range(n):
        for j in range(n):
            if i != j:
                for k in range(n):
                    if i != k and j != k:
                        triangle_inequality = distance_matrix[i, j] + distance_matrix[j, k] + distance_matrix[i, k] - distance_matrix[i, j] - distance_matrix[j, k] - distance_matrix[i, k]
                        triangle_inequality_penalty[i, j] = max(triangle_inequality_penalty[i, j], abs(triangle_inequality))

    # Calculate distance to farthest node penalty
    farthest_node_penalty = np.max(distance_matrix) * np.ones_like(distance_matrix)

    # Combine penalties with randomness to create a heuristic
    heuristic_matrix = distance_matrix + triangle_inequality_penalty + farthest_node_penalty
    heuristic_matrix = np.random.choice([ heuristic_matrix, distance_matrix + max_cycle_penalty * np.random.choice([0, 1], size=distance_matrix.shape) ], size=distance_matrix.shape)

    return heuristic_matrix
```
