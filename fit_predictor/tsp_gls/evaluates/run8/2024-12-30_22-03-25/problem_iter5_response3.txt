```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])
    
    # Incorporate domain knowledge: prefer edges that are on the shortest path
    # and also consider the density of the graph, to avoid getting trapped in local optima
    graph_density = np.sum(distance_matrix) / (n * n * np.mean(distance_matrix))
    
    return (distance_matrix - min_distances) * (1 + graph_density)
```
