```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        min_distances[i, i] = 0
        for j in range(i+1, n):
            min_distances[i, j] = np.min(distance_matrix[i, :j]) + np.min(distance_matrix[j:, i+1:])
            min_distances[j, i] = min_distances[i, j]
    
    # Calculate the heuristic as the negative difference between the actual distance and the minimum distance
    heuristic_matrix = distance_matrix - min_distances
    # To avoid negative heuristics, set any negative values to zero
    heuristic_matrix[heuristic_matrix < 0] = 0
    return heuristic_matrix
```
