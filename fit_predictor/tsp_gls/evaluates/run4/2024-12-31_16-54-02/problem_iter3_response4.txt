```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix, which is the distance to itself
    diagonal = np.diag(distance_matrix)
    
    # Loop through each pair of nodes, excluding the diagonal
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Calculate the heuristic value by considering the minimum distance to the nearest common ancestor
            # This is a local heuristic that leverages the problem's symmetry and minimizes redundant computations
            min_common_ancestor = np.argmin(np.minimum(diagonal[i], diagonal[j]))
            heuristics[i, j] = distance_matrix[i, min_common_ancestor] + distance_matrix[j, min_common_ancestor]
    
    # Since the problem is symmetric, the heuristic value for j to i is the same as for i to j
    heuristics = (heuristics + heuristics.T) / 2
    
    return heuristics
```
