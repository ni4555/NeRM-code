```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the shortest path tree for each node using a greedy approach
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                # Direct distance between nodes
                direct_distance = distance_matrix[i, j]
                # Use the greedy approach to get the shortest distance via nearest node
                nearest_neighbour = np.argmin(distance_matrix[i])
                heuristics[i, j] = direct_distance if j != nearest_neighbour else direct_distance + distance_matrix[i, nearest_neighbour]
                # Since the matrix is symmetric, update the matrix for j, i
                heuristics[j, i] = heuristics[i, j]
    
    return heuristics
```
