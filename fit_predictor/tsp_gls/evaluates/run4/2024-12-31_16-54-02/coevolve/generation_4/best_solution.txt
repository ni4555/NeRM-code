Fitness: 10.61187021517528

Description:
The Traveling Salesman Problem (TSP) is addressed using a guided local search strategy that optimizes the shortest path traversal of all given nodes, returning to the starting node. This approach leverages a combination of dynamic local search techniques and innovative heuristics for edge distance computation, while integrating Tabu Search and Variable Neighborhood Descent to explore diverse neighborhood structures. The algorithm iteratively converges on the optimal Hamiltonian cycle, surpassing a solution quality threshold of 10.611581849129063 by dynamically avoiding revisiting nodes and refining the route through adaptive strategies.

Code:
import numpy as np
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Ensure that the distance_matrix is a square matrix
    assert distance_matrix.shape[0] == distance_matrix.shape[1], "The distance matrix must be square."
    
    # Subtract the minimum distance to any node from the distance of each edge
    # This is a simple heuristic based on the minimum distance to any node
    min_row_sums = np.min(distance_matrix, axis=1)
    min_col_sums = np.min(distance_matrix, axis=0)
    # Calculate the heuristics by subtracting the minimum distance to any node
    heuristics = distance_matrix - np.minimum(min_row_sums[:, np.newaxis], min_col_sums[np.newaxis, :])
    
    return heuristics