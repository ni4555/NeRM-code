```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = len(distance_matrix)
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the center of gravity for each cluster
    centers = np.argmin(distance_matrix, axis=1)
    
    # Initialize heuristics based on the center of gravity
    for i in range(n):
        heuristics[i, centers[i]] = 0
    
    # Calculate the sum of distances from each node to its assigned center
    distances_to_centers = np.sum(distance_matrix, axis=1)
    
    # Calculate the maximum distance to a center to use as a threshold
    max_distance_to_center = np.max(distances_to_centers)
    
    # Adjust heuristics based on the threshold to encourage shorter paths
    for i in range(n):
        for j in range(n):
            if heuristics[i, j] == 0:
                heuristics[i, j] = distance_matrix[i, centers[j]]
                heuristics[j, i] = distance_matrix[j, centers[i]]
            else:
                heuristics[i, j] = min(heuristics[i, j], distance_matrix[i, centers[j]])
                heuristics[j, i] = min(heuristics[j, i], distance_matrix[j, centers[i]])
    
    # Adjust heuristics to be non-negative
    heuristics = np.maximum(0, heuristics - max_distance_to_center)
    
    return heuristics
```
