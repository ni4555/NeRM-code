```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate heuristics for each node pair by considering only the shortest path
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Direct distance if the path is direct
            direct_distance = distance_matrix[i, j]
            # Calculate the shortest path to all other nodes and then to j from i
            shortest_path_to_all = np.argmin(distance_matrix[i, :], axis=1)
            # Calculate the total distance from i to j via the shortest path to an intermediate node
            heuristics[i, j] = distance_matrix[i, shortest_path_to_all[j]]
            # The heuristic is the minimum of the direct distance and the indirect distance
            heuristics[i, j] = min(direct_distance, heuristics[i, j])
    
    # Symmetry exploit: only need to calculate once, as the matrix is symmetric
    heuristics = (heuristics + heuristics.T) / 2
    
    return heuristics
```
