```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the shortest path from each node to every other node
    shortest_paths = np.min(distance_matrix, axis=1)
    
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # For each pair of nodes (i, j) where i < j
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # The heuristic value is the sum of the shortest path from i to j and from j to i
            heuristics[i, j] = shortest_paths[i] + shortest_paths[j]
    
    # Reflect symmetry in the heuristic function
    heuristics = (heuristics + heuristics.T) / 2
    
    return heuristics
```
