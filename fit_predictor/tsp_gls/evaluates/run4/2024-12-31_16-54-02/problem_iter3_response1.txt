```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal elements for symmetry and minimize redundant computation
    for i in range(len(distance_matrix)):
        # Get the minimum distance to any other node from node i
        min_distance = np.min(distance_matrix[i, :i] + distance_matrix[i, i + 1:])
        heuristics[i, i] = min_distance
    
    # Calculate heuristics for off-diagonal elements using a combination of local and global information
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Consider the direct distance and the distance through the nearest common ancestor (symmetry)
            local_min = np.min([distance_matrix[i, j], distance_matrix[i, k] + distance_matrix[k, j] for k in range(len(distance_matrix)) if k != i and k != j])
            heuristics[i, j] = local_min
            heuristics[j, i] = local_min  # Reflecting due to symmetry
    
    return heuristics
```
