```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Use the triangle inequality principle to set initial heuristics
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # The heuristic value is the distance from node i to node j minus the shortest path to node i from any other node
            heuristics[i, j] = distance_matrix[i, j] - np.min(distance_matrix[:, i])
    
    # To balance global and local information, we also consider the sum of distances to the nearest neighbors
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Add the sum of distances from node j to its nearest neighbors as a penalty to avoid early convergence
            neighbors = np.argsort(distance_matrix[j, :])[:2]  # Get the two nearest neighbors
            heuristics[i, j] += np.sum(distance_matrix[j, neighbors])
    
    # Since we've only calculated heuristics for i to j, we need to calculate for j to i as well
    heuristics = (heuristics + distance_matrix.T) / 2
    
    return heuristics
```
