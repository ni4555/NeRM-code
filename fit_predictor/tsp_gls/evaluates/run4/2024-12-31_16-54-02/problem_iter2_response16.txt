```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = len(distance_matrix)
    heuristics = np.zeros_like(distance_matrix)
    
    # Loop through each pair of nodes
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the minimum distance to any other node via i or j
                via_i = np.min(distance_matrix[i, :]) + distance_matrix[i, j]
                via_j = np.min(distance_matrix[j, :]) + distance_matrix[j, i]
                
                # Now consider via two nodes at once
                for k in range(n):
                    if k != i and k != j:
                        via_i_k = np.min(distance_matrix[i, :]) + distance_matrix[i, k] + distance_matrix[k, j]
                        via_j_k = np.min(distance_matrix[j, :]) + distance_matrix[j, k] + distance_matrix[k, i]
                        heuristics[i, j] = min(heuristics[i, j], via_i_k, via_j_k)
    
    return heuristics
```
