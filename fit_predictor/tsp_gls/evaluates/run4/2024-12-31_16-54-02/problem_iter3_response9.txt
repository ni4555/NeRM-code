```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the total distance of the longest path from the center of the matrix
    n = distance_matrix.shape[0]
    center_node = n // 2
    longest_path = 0
    for i in range(n):
        for j in range(i + 1, n):
            if i != center_node and j != center_node:
                longest_path = max(longest_path, distance_matrix[i, j])
    
    # Loop through each pair of nodes
    for i in range(n):
        for j in range(i + 1, n):
            # Calculate the heuristic value based on the longest path and the distance between nodes
            heuristics[i, j] = longest_path - distance_matrix[i, j]
    
    # Since we've only calculated heuristics for i to j, we need to calculate for j to i as well
    heuristics = (heuristics + distance_matrix.T) / 2
    
    return heuristics
```
