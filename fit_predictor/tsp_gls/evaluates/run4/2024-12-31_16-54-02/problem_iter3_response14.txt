```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the distance from each node to the nearest neighbor for both directions
    for i in range(len(distance_matrix)):
        # Find the nearest neighbor from node i
        nearest_neighbor = np.argmin(distance_matrix[i, :])
        # Calculate the heuristic as the distance to the nearest neighbor
        heuristics[i, nearest_neighbor] = distance_matrix[i, nearest_neighbor]
        heuristics[nearest_neighbor, i] = distance_matrix[nearest_neighbor, i]
    
    # For all other pairs, use the minimum of the two possible shortest paths
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # The heuristic value is the minimum distance to a common neighbor
            common_neighbors = np.argmin(np.min(distance_matrix[[i, j], :], axis=0))
            heuristics[i, j] = distance_matrix[i, common_neighbors]
            heuristics[j, i] = distance_matrix[j, common_neighbors]
    
    return heuristics
```
