```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the shortest path for each pair of nodes using Dijkstra's algorithm approach
    for i in range(len(distance_matrix)):
        # Initialize the heuristic values to infinity
        heuristics[i] = np.full_like(distance_matrix[i], np.inf)
        # Set the distance from node i to itself to zero
        heuristics[i, i] = 0
        # Initialize a priority queue with node i
        pq = [(0, i)]
        # While the priority queue is not empty
        while pq:
            # Get the node with the smallest distance from the priority queue
            current_distance, current_node = heapq.heappop(pq)
            # Loop through each neighbor of the current node
            for neighbor in range(len(distance_matrix[current_node])):
                # If the current node is not the same as the neighbor
                if current_node != neighbor:
                    # Calculate the new distance
                    new_distance = current_distance + distance_matrix[current_node, neighbor]
                    # If the new distance is smaller than the heuristic value
                    if new_distance < heuristics[i, neighbor]:
                        # Update the heuristic value
                        heuristics[i, neighbor] = new_distance
                        # Add the neighbor to the priority queue with the new distance
                        heapq.heappush(pq, (new_distance, neighbor))
    
    # Since we've only calculated heuristics for i to j, we need to calculate for j to i as well
    heuristics = (heuristics + distance_matrix.T) / 2
    
    return heuristics
```
