```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = len(distance_matrix)
    heuristics = np.full_like(distance_matrix, np.inf)

    # Incorporate problem-specific knowledge: Use the minimum distance from each node to all other nodes as a base heuristic
    for i in range(num_nodes):
        min_distance_to_i = np.min(distance_matrix[i, :])
        heuristics[i, :] = distance_matrix[i, :] - min_distance_to_i
        heuristics[:, i] = distance_matrix[:, i] - min_distance_to_i

    # Balance global/local: Consider the shortest path through the entire graph by using the triangle inequality
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            for k in range(num_nodes):
                if k == i or k == j:
                    continue
                # Calculate the upper bound using the triangle inequality
                upper_bound = distance_matrix[i, k] + distance_matrix[k, j]
                heuristics[i, j] = min(heuristics[i, j], upper_bound)

    # Use domain heuristics: Add penalties for long detours and early convergence
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            neighbors_i = np.argsort(distance_matrix[i, :])[:2]
            neighbors_j = np.argsort(distance_matrix[j, :])[:2]
            # Calculate the sum of the distances from the current node to its nearest neighbors
            heuristics[i, j] += np.sum(distance_matrix[i, neighbors_i] + distance_matrix[j, neighbors_j])

    # Explore diversity: Add a penalty for edges that are not part of the shortest cycle
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            heuristics[i, j] += np.sum(distance_matrix[i, :] + distance_matrix[j, :]) / (num_nodes - 1)

    # Normalize the heuristics to ensure they are within the range of the distance matrix
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))

    return heuristics
```
