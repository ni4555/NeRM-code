```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # For each pair of nodes, calculate the distance through a central node
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            # If i and j are the same, set the heuristic to 0
            if i == j:
                heuristics[i, j] = 0
            else:
                # Find the central node k that minimizes the distance between i and j
                central_node = np.argmin(distance_matrix[i, :])
                # Update the heuristic value for the edge (i, j)
                heuristics[i, j] = distance_matrix[i, central_node] + distance_matrix[central_node, j]
    
    return heuristics
```
