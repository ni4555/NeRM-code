```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.full_like(distance_matrix, np.inf)

    # For each node, consider the shortest distance to all other nodes to find the heuristics
    for node in range(len(distance_matrix)):
        heuristics[node, node] = 0  # No cost to travel to itself
        for i in range(node):
            for j in range(node):
                if i != j:
                    heuristics[node, node] = min(heuristics[node, node], distance_matrix[i, j])

    # Calculate the shortest path for each pair of nodes
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            heuristics[i, j] = heuristics[j, i] = min(heuristics[i, j], distance_matrix[i, j])

    return heuristics
```
