```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Use symmetry to only calculate half of the heuristics matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):
            # Calculate the shortest path from node i to node j using Dijkstra's algorithm
            shortest_path = np.argmin(distance_matrix[i, :])
            # The heuristic value is the distance from node i to node j via the shortest path
            heuristics[i, j] = distance_matrix[i, shortest_path]
            # Use symmetry to avoid redundant calculations for the reverse path
            heuristics[j, i] = heuristics[i, j]
    
    return heuristics
```
