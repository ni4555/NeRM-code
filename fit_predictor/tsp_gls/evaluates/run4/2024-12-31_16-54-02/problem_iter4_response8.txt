```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the shortest path from each node to every other node using np.argmin
    # which effectively finds the minimum value in each row (from each node to all others)
    shortest_paths = np.argmin(distance_matrix, axis=1)
    
    # For each pair of nodes (i, j), calculate the sum of distances:
    # - from i to the node j using the shortest path
    # - from j to the node i using the shortest path
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            heuristics[i, j] = distance_matrix[i, shortest_paths[j]] + distance_matrix[j, shortest_paths[i]]
            heuristics[j, i] = distance_matrix[j, shortest_paths[i]] + distance_matrix[i, shortest_paths[j]]
    
    return heuristics
```
