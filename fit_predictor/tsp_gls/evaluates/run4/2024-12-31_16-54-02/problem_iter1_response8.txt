```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Loop through each pair of nodes
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Calculate the heuristic value as the minimum distance from node i to any other node
            # and from node j to any other node
            heuristics[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[j, :])
            # Calculate the heuristic value as the maximum distance from node i to any other node
            # and from node j to any other node
            heuristics[j, i] = np.max(distance_matrix[i, :]) + np.max(distance_matrix[j, :])
    
    return heuristics
```
