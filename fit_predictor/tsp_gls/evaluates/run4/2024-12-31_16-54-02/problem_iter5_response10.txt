```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Loop through each pair of nodes
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Use the fact that the shortest path from i to j is the same as from j to i
            # Calculate the shortest path from node i to node j and from node j to i
            shortest_path_i_to_j = np.argmin(distance_matrix[i, :])
            shortest_path_j_to_i = np.argmin(distance_matrix[j, :])
            # The heuristic value is the sum of the distances along the shortest path
            heuristics[i, j] = distance_matrix[i, shortest_path_i_to_j] + distance_matrix[j, shortest_path_j_to_i]
            # Symmetry property: the heuristic from j to i is the same
            heuristics[j, i] = heuristics[i, j]
    
    return heuristics
```
