```python
import numpy as np
from heapq import heappop, heappush

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = len(distance_matrix)
    heuristics = np.zeros_like(distance_matrix)
    
    # Create a priority queue for each node and initialize it with the distances to all other nodes
    min_heap_list = [[] for _ in range(n)]
    for i in range(n):
        for j in range(i+1, n):  # No need to add the diagonal since distances are symmetric
            heappush(min_heap_list[i], (distance_matrix[i][j], j))
    
    # Fill the heuristics matrix with the shortest path estimates
    for i in range(n):
        # Since distances are symmetric, we only need to fill half of the matrix
        for (dist, j) in min_heap_list[i]:
            heuristics[i][j] = dist
            heuristics[j][i] = dist
    
    return heuristics
```
