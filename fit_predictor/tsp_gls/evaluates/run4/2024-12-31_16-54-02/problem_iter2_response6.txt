```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Compute the median distance for each row
    median_distances = np.median(distance_matrix, axis=1)
    
    # For each edge, calculate the sum of the distances to the median and subtract the edge distance
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            heuristics[i, j] = (median_distances[i] + median_distances[j] - distance_matrix[i, j])
    
    # Return the symmetric matrix
    return heuristics + heuristics.T - np.diag(np.diag(heuristics))
```
