```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the usage of each edge
    num_trips = np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1) - len(distance_matrix) * (len(distance_matrix) - 1)
    edge_usage = 1 / (num_trips + 1e-5)  # Avoid division by zero

    # Balance the penalty between edge length and usage
    length_penalty = distance_matrix / np.max(distance_matrix)
    usage_penalty = edge_usage * (1 - length_penalty)

    # Apply a smoothing factor to avoid sharp changes in the heuristic values
    smoothing_factor = 0.5

    # Adjust the distances based on both the length of the edge and its usage
    adjusted_distances = distance_matrix * (1 - usage_penalty)

    # Calculate a penalty factor that decreases with usage to avoid overpenalizing popular edges
    penalty_factor = 1 + 0.1 * (1 - edge_usage)

    # Apply the penalty factor and smoothing factor to the adjusted distances
    final_distances = adjusted_distances * penalty_factor * smoothing_factor

    # Normalize the final distances to ensure they are non-negative
    final_distances = np.maximum(final_distances - np.min(final_distances), 0)

    return final_distances
```
