```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Normalize the degree to get the connectivity of each node
    connectivity = degrees / np.sum(degrees)
    
    # Calculate the usage of each edge
    num_trips = np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1) - len(distance_matrix) * (len(distance_matrix) - 1)
    edge_usage = 1 / (num_trips + 1e-5)  # Avoid division by zero
    
    # Create a penalty matrix based on connectivity
    penalty_matrix = 1 + 0.1 * connectivity
    
    # Calculate the shortest distance to each node from the others
    shortest_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the diversity factor for each edge
    diversity_factor = np.maximum(1 - (distance_matrix / shortest_distances), 0)
    
    # Adjust distances based on usage, connectivity, and diversity
    adjusted_distances = distance_matrix * (1 - edge_usage)
    adjusted_distances *= (1 + 0.1 * edge_usage)
    adjusted_distances *= penalty_matrix
    adjusted_distances *= diversity_factor
    
    # Ensure non-zero distances and return the adjusted matrix
    return np.maximum(adjusted_distances, 1)
```
