```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Define a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 2)
    
    # Balance factor to reward short edges and encourage diversity
    balance_factor = 0.5
    exploration_factor = 0.2  # Factor to add randomness for exploration
    exploitation_factor = 0.8  # Factor to emphasize exploitation of known paths
    
    # Normalize the adjusted distances to maintain a balance between exploration and exploitation
    min_distance = np.min(adjusted_matrix)
    max_distance = np.max(adjusted_matrix)
    normalized_matrix = (adjusted_matrix - min_distance) / (max_distance - min_distance)
    
    # Refine distances by combining exploration and exploitation factors
    refined_matrix = exploration_factor * np.random.rand(*adjusted_matrix.shape) + exploitation_factor * normalized_matrix
    
    # Encourage diversity by occasionally resetting distances to a high value
    diversity_factor = 0.1
    diversity_probability = 0.01  # Probability of resetting an edge distance
    for i in range(adjusted_matrix.shape[0]):
        for j in range(i + 1, adjusted_matrix.shape[1]):
            if np.random.rand() < diversity_probability:
                refined_matrix[i, j] = refined_matrix[j, i] = np.inf
    
    # Ensure connectivity and avoid overpenalization by resetting the shortest path to original distance
    for i in range(adjusted_matrix.shape[0]):
        for j in range(i + 1, adjusted_matrix.shape[1]):
            if refined_matrix[i, j] == np.inf:
                refined_matrix[i, j] = refined_matrix[j, i] = adjusted_matrix[i, j]
    
    # Normalize the refined distances again to ensure they are within a feasible range
    refined_matrix = np.clip(refined_matrix, np.finfo(np.float64).eps, np.max(refined_matrix))
    
    return refined_matrix
```
