```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Define a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 2)
    
    # Balance factor to reward short edges
    balance_factor = 0.5
    
    # Randomness factor to introduce variability in the heuristic
    randomness_factor = 0.2
    
    # Randomly perturb the adjusted matrix to avoid local minima
    np.random.shuffle(adjusted_matrix.flat)
    
    # Normalize the adjusted matrix to ensure connectivity
    normalized_matrix = np.clip(adjusted_matrix, np.finfo(np.float64).eps, np.inf)
    
    # Encourage diversity by ensuring no edge is too short
    for i in range(normalized_matrix.shape[0]):
        for j in range(normalized_matrix.shape[1]):
            if i != j:
                normalized_matrix[i, j] = np.maximum(normalized_matrix[i, j], 1.5 * np.finfo(np.float64).eps)
    
    # Apply balance factor to reward short edges
    for i in range(normalized_matrix.shape[0]):
        for j in range(normalized_matrix.shape[1]):
            normalized_matrix[i, j] *= (1 + balance_factor / (1 + normalized_matrix[i, j]))
    
    return normalized_matrix
```
