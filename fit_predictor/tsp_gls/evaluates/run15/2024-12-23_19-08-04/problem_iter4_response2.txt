```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Define a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 2)
    
    # Apply a balance factor to reward short edges, to avoid local minima created by long edges
    balance_factor = 0.5
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            adjusted_matrix[i, j] *= (1 + balance_factor / (1 + adjusted_matrix[i, j]))
    
    # Ensure that the distances remain positive
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    
    # Introduce a connectivity factor to encourage connections with unvisited nodes
    connectivity_factor = 0.1
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[0]):
            if adjusted_matrix[i, j] == np.finfo(np.float64).eps:
                adjusted_matrix[i, j] += connectivity_factor

    # Encourage diversity by slightly increasing the distance to all other edges if an edge is highly used
    diversity_factor = 0.05
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[0]):
            if usage_matrix[i, j] > np.mean(usage_matrix):
                adjusted_matrix[i, j] += diversity_factor

    # Encourage a balance between highly used and less used edges to promote a diverse set of solutions
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[0]):
            if usage_matrix[i, j] > np.mean(usage_matrix):
                adjusted_matrix[i, j] *= (1 - 0.05)
            else:
                adjusted_matrix[i, j] *= (1 + 0.05)
    
    # Refine the matrix to ensure a more balanced approach to the heuristic adjustments
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[0]):
            if adjusted_matrix[i, j] < np.finfo(np.float64).eps:
                adjusted_matrix[i, j] = np.finfo(np.float64).eps

    return adjusted_matrix
```
