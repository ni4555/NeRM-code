```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Define a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 2)
    
    # Apply a balance factor to reward short edges, to avoid local minima created by long edges
    balance_factor = 0.5
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            adjusted_matrix[i, j] *= (1 + balance_factor / (1 + adjusted_matrix[i, j]))
    
    # Normalize the adjusted matrix to ensure the values are within a reasonable range
    max_distance = np.max(adjusted_matrix)
    min_distance = np.min(adjusted_matrix)
    adjusted_matrix = (adjusted_matrix - min_distance) / (max_distance - min_distance)
    
    # Add a small random perturbation to encourage diversity and prevent local minima
    random_perturbation = np.random.rand(*adjusted_matrix.shape) * 0.01
    adjusted_matrix += random_perturbation
    
    # Ensure that the distances remain positive
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    
    return adjusted_matrix
```
