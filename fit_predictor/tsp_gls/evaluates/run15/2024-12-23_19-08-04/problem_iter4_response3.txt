```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Targeted penalties for common edges
    penalty_factor = 0.1
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 1.5)  # Slightly less aggressive than squaring

    # Balance factors to reward short edges and avoid local minima
    balance_factor = 0.5
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            adjusted_matrix[i, j] *= (1 + balance_factor / (1 + adjusted_matrix[i, j]))

    # Diversity with random perturbations
    perturbation_factor = 0.01
    random_perturbation = np.random.normal(0, perturbation_factor, adjusted_matrix.shape)
    adjusted_matrix += random_perturbation
    
    # Connectivity factors to explore less-traveled paths
    connectivity_factor = 0.05
    connectivity_matrix = np.sum(distance_matrix, axis=1)
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            if i != j:
                adjusted_matrix[i, j] *= (1 + connectivity_factor / (1 + np.sum(distance_matrix[i, :] + distance_matrix[j, :] - 2 * distance_matrix[i, j])))
    
    # Ensure that the distances remain positive
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    
    return adjusted_matrix
```
