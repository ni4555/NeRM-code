```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic adjusts the distance of each edge based on the number of times it is visited
    # Less visited edges are penalized, making them less desirable to include in the solution
    visited = np.zeros_like(distance_matrix, dtype=int)
    # Randomly visit edges to start the process
    i, j = np.random.randint(distance_matrix.shape[0]), np.random.randint(distance_matrix.shape[1])
    visited[i, j] = 1
    visited[j, i] = 1
    
    # Adjust distances based on number of visits
    num_edges = distance_matrix.size
    for _ in range(num_edges // 2):  # Randomly visit half of the edges
        i, j = np.random.randint(distance_matrix.shape[0]), np.random.randint(distance_matrix.shape[1])
        if visited[i, j] == 0:
            distance_matrix[i, j] += 1
            distance_matrix[j, i] += 1
            visited[i, j] = 1
            visited[j, i] = 1

    # Apply a cooling schedule to ensure convergence
    for k in range(num_edges // 4):  # Further random visitation to ensure edges are visited
        i, j = np.random.randint(distance_matrix.shape[0]), np.random.randint(distance_matrix.shape[1])
        if visited[i, j] == 0:
            distance_matrix[i, j] -= 1
            distance_matrix[j, i] -= 1
            visited[i, j] = 1
            visited[j, i] = 1

    return distance_matrix
```
