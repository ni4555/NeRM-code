```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Define a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 2)
    
    # Normalize the adjusted matrix to maintain connectivity
    max_distance = np.max(adjusted_matrix)
    min_distance = np.min(adjusted_matrix)
    adjusted_matrix = (adjusted_matrix - min_distance) / (max_distance - min_distance)
    
    # Balance exploration and exploitation by introducing a randomness factor
    randomness_factor = 0.05
    random_matrix = np.random.rand(*adjusted_matrix.shape)
    adjusted_matrix = adjusted_matrix * (1 - randomness_factor) + random_matrix * randomness_factor
    
    # Ensure that the distances remain within the original range to encourage diversity
    adjusted_matrix = adjusted_matrix * (max_distance - min_distance) + min_distance
    
    # Encourage diversity by penalizing highly similar edges
    similarity_matrix = np.sum((adjusted_matrix == distance_matrix), axis=0)
    diversity_factor = 0.1
    adjusted_matrix += diversity_factor * (1 - similarity_matrix)
    
    # Prevent local minima by adding a small random perturbation
    perturbation = np.random.rand(*adjusted_matrix.shape) * (0.01 * max_distance - 0.01 * min_distance)
    adjusted_matrix += perturbation
    
    return adjusted_matrix
```
