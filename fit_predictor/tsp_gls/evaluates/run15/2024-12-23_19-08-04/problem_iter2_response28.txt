```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the number of times each edge has been used
    num_trips = np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1) - len(distance_matrix) * (len(distance_matrix) - 1)
    
    # Calculate the usage of each edge
    edge_usage = 1 / (num_trips + 1e-5)  # Avoid division by zero

    # Calculate a penalty factor based on edge usage to avoid local minima
    penalty_factor = np.where(edge_usage > 0.5, edge_usage ** 2, 1)

    # Adjust the distance matrix by multiplying with the penalty factor
    adjusted_distances = distance_matrix * penalty_factor

    return adjusted_distances
```
