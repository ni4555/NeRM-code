```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a simple heuristic that considers the usage frequency of each edge
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Simulate some usage of the edges for the purpose of this example
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                usage_matrix[i, j] = np.random.rand()
    
    # Adjust the distance matrix by the usage frequency
    adjusted_distances = distance_matrix * (1 - usage_matrix)
    
    # It's bad to include edges with high adjusted distances
    return adjusted_distances
```
