```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.size
    visited_edges = np.zeros_like(distance_matrix, dtype=int)
    edge_usage_frequency = np.zeros_like(distance_matrix, dtype=float)

    # Simulate edge usage based on a random distribution
    for _ in range(num_edges):
        i, j = np.random.randint(distance_matrix.shape[0]), np.random.randint(distance_matrix.shape[1])
        if i != j:
            edge_usage_frequency[i, j] += 1
            edge_usage_frequency[j, i] += 1
            visited_edges[i, j] = 1
            visited_edges[j, i] = 1

    # Adjust distances based on usage frequency and visited status
    adjusted_distances = distance_matrix * (1 - edge_usage_frequency)
    adjusted_distances[visited_edges == 0] *= 0.95  # Penalize less visited edges more

    # Introduce diversity by randomly increasing distances of unvisited edges
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j and visited_edges[i, j] == 0:
                adjusted_distances[i, j] = np.random.uniform(0.9, 1.1) * adjusted_distances[i, j]

    # Cool down the process to stabilize the heuristic
    # Here we simply apply a slight random fluctuation to avoid getting stuck in a local minima
    # This is a simplified cooling down, real-world applications may require a more sophisticated approach
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                adjusted_distances[i, j] = np.clip(adjusted_distances[i, j] + np.random.normal(0, 0.01), 0.5, 1.5)

    return adjusted_distances
```
