```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    usage_matrix = (distance_matrix == distance_matrix.T).astype(int)
    np.fill_diagonal(usage_matrix, 0)  # No self-usage
    
    # Define a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 2)
    
    # Apply a balance factor to reward short edges, to avoid local minima created by long edges
    balance_factor = 0.5
    adjusted_matrix *= (1 + balance_factor / (1 + adjusted_matrix))
    
    # Ensure that the distances remain positive
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    
    # Encourage diversity by slightly increasing the distances of edges that are part of a highly connected subgraph
    connectivity_matrix = np.sum(distance_matrix != np.inf, axis=1)
    highly_connected_threshold = 2
    adjusted_matrix[connectivity_matrix > highly_connected_threshold] *= 1.1
    
    return adjusted_matrix
```
