```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of each edge's distance
    edge_sums = distance_matrix.sum(axis=1)
    # Calculate the total sum of all edge distances
    total_sum = np.sum(edge_sums)
    # Calculate the number of edges
    num_edges = distance_matrix.shape[0]
    # Calculate the total number of possible paths (n-1 choose 2)
    total_possible_paths = (num_edges - 1) * (num_edges - 2) // 2

    # Normalize edge usage by total possible paths
    normalized_usage = (edge_sums / total_sum) * (num_edges - 2)

    # Normalize edge lengths by the sum of all edge lengths
    normalized_edge_lengths = distance_matrix / edge_sums[:, np.newaxis]

    # Calculate the deviation from the shortest path
    min_distance = np.min(edge_sums)
    shortest_path_deviation = (edge_sums - min_distance) / min_distance

    # Calculate the deviation from the average path
    average_distance = total_sum / total_possible_paths
    average_path_deviation = (edge_sums - average_distance) / average_distance

    # Define a heuristic based on the deviation from the shortest and average path
    heuristic_scores = shortest_path_deviation + average_path_deviation

    # Adjust heuristic scores to avoid local minima by penalizing high usage
    exploration_penalty = np.exp(-5 * normalized_usage)
    heuristic_scores *= exploration_penalty

    # Balance local and global search by rewarding longer paths less often traversed
    long_path_reward = np.exp(-10 * (1 - normalized_usage))
    heuristic_scores *= long_path_reward

    # Encourage diversity by rewarding edges not part of the shortest path
    diversity_bonus = np.exp(-5 * (edge_sums == min_distance))
    heuristic_scores *= diversity_bonus

    return heuristic_scores
```
