```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic considering edge importance, local optima, and domain knowledge
    # Assume that edges not part of the local optimal route are initially considered to be more flexible
    penalties = np.ones_like(distance_matrix)  # Initialize penalties as equal
    
    # Add a higher penalty for edges that are part of the local optimal route
    local_optimal_route = np.random.choice(distance_matrix.shape[0], size=distance_matrix.shape[0]-1, replace=False)
    for i in range(len(local_optimal_route)):
        penalties[local_optimal_route[i]][local_optimal_route[(i+1) % len(local_optimal_route)]] = 5
        penalties[local_optimal_route[(i+1) % len(local_optimal_route)]][local_optimal_route[i]] = 5
    
    # Adjust penalties based on edge importance
    # Assume that edges with higher degrees are more important and thus should be penalized less
    degree_matrix = np.bincount(distance_matrix.flatten(), minlength=distance_matrix.shape[0]**2)
    degree_matrix = degree_matrix.reshape(distance_matrix.shape)
    important_edges_penalty = (degree_matrix ** 0.5) / np.max(degree_matrix ** 0.5)
    
    # Combine penalties
    return penalties * important_edges_penalty
```
