```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Assume the local optimal route is known and is given as an array of node indices
    local_optimal_route = np.arange(num_nodes)
    
    # Define a parameter to balance the route penalty and the distance penalty
    route_penalty_weight = 0.5
    
    # Create penalties for edges that are part of the local optimal route
    for i in range(num_nodes - 1):
        edge_penalty = route_penalty_weight
        penalty_matrix[local_optimal_route[i]][local_optimal_route[(i + 1) % num_nodes]] = edge_penalty
        penalty_matrix[local_optimal_route[(i + 1) % num_nodes]][local_optimal_route[i]] = edge_penalty
    
    # Calculate the distance penalties based on the distance between nodes
    distance_penalties = np.abs(distance_matrix) / np.max(np.abs(distance_matrix))
    
    # Combine the route penalties and distance penalties
    combined_penalties = penalty_matrix + distance_penalties
    
    # Normalize the combined penalties so that the sum of penalties for any edge is 1
    penalty_sum = np.sum(combined_penalties, axis=0)
    penalty_sum[penalty_sum == 0] = 1  # Avoid division by zero
    normalized_penalties = combined_penalties / penalty_sum[:, np.newaxis]
    
    return normalized_penalties
```
