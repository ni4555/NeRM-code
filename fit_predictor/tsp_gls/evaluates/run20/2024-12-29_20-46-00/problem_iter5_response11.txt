```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the importance of each node based on its degree and the average
    # degree of its neighbors
    importance = degrees + np.mean(distance_matrix, axis=1)
    
    # Define a function to calculate the local feature of each edge based on
    # the importance of its nodes and the distance between them
    def local_feature(i, j):
        return 1 / (importance[i] * importance[j]) * distance_matrix[i, j]
    
    # Calculate the heuristic matrix by applying the local feature function
    # to each edge
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = local_feature(i, j)
    
    # Normalize the heuristic matrix to the range [0, 1]
    max_feature = np.max(heuristic_matrix)
    if max_feature > 0:
        heuristic_matrix /= max_feature
    
    # Adapt penalties based on the diversity of the route
    # Increase penalty for edges that are already included in the local optimal route
    # Encourage exploration by increasing the heuristic value for less common edges
    diversity_factor = np.random.rand(n, n)
    diversity_factor[distance_matrix != np.inf] = np.sum(distance_matrix[distance_matrix != np.inf], axis=0)
    diversity_factor /= np.sum(diversity_factor)
    heuristic_matrix *= diversity_factor
    
    # Global feature to balance the heuristic
    # Increase heuristic value for edges that connect highly important nodes
    global_feature = np.dot(importance, importance) - np.sum(importance**2)
    heuristic_matrix += global_feature / (n * n)
    
    # Ensure the heuristic matrix is still within [0, 1]
    max_feature = np.max(heuristic_matrix)
    if max_feature > 0:
        heuristic_matrix /= max_feature
    
    return heuristic_matrix
```
