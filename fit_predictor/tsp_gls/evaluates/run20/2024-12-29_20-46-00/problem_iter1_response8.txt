```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a modified Dijkstra's algorithm to calculate shortest paths from each node
    # and use the inverse of these distances as the heuristic
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for start_node in range(num_nodes):
        # Create a queue for Dijkstra's algorithm
        queue = [(0, start_node)]
        visited = np.zeros(num_nodes, dtype=bool)
        
        # While there are still nodes to visit
        while queue:
            # Get the next node with the smallest distance
            current_distance, current_node = queue.pop(0)
            
            # Mark the current node as visited
            visited[current_node] = True
            
            # Explore each edge from the current node
            for neighbor, distance in enumerate(distance_matrix[current_node]):
                if distance > 0 and not visited[neighbor]:
                    new_distance = current_distance + distance
                    queue.append((new_distance, neighbor))
                    # Update the heuristic for the neighbor
                    heuristics[neighbor] = min(heuristics[neighbor], new_distance)
    
    # Return the heuristic values for each edge
    return heuristics
```
