```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix != np.inf, axis=1)
    
    # Calculate the heuristic value for each edge
    # We use a weighted sum of the inverse distance and a penalty for high degree nodes
    # The penalty discourages including edges that connect to highly connected nodes
    # to avoid local optima and encourage more diverse paths
    penalty_factor = 0.5  # Factor to control the penalty strength
    heuristic_values = 1 / (distance_matrix + 1e-10)  # Inverse distance
    heuristic_values += penalty_factor * degrees  # Add penalty for high degree nodes
    
    # Normalize the heuristic values to maintain a consistent scale
    max_value = np.max(heuristic_values)
    if max_value > 0:
        heuristic_values /= max_value
    
    return heuristic_values
```
