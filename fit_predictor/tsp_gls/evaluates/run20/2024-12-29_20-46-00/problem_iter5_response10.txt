```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    n = distance_matrix.shape[0]
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the importance of each node based on its degree and the average
    # degree of its neighbors
    importance = degrees + np.mean(distance_matrix, axis=1)
    
    # Adapt the penalty based on the importance of the nodes and the distance
    # between them, with a decay factor to encourage exploration
    def adaptive_penalty(i, j):
        return 1 / (importance[i] * importance[j] * (1 - distance_matrix[i, j]))
    
    # Normalize the importance to ensure that the heuristic is balanced
    importance = (importance - np.min(importance)) / (np.max(importance) - np.min(importance))
    
    # Calculate the heuristic matrix by applying the adaptive penalty function
    # to each edge, and balance it with the normalized importance
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = adaptive_penalty(i, j) * importance[i] * importance[j]
    
    # Normalize the heuristic matrix to the range [0, 1]
    max_feature = np.max(heuristic_matrix)
    if max_feature > 0:
        heuristic_matrix /= max_feature
    
    return heuristic_matrix
```
