```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Calculate the degree of each node
    num_nodes = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)

    # Calculate the median degree to avoid assigning the same cost to nodes with
    # a high degree and to those with a low degree
    median_degree = np.median(degrees)

    # Define a cost factor based on the degree and distance
    # Higher cost for edges that connect highly connected nodes and
    # those that are farther from the median distance
    cost_factor = 1 + ((degrees - median_degree) / median_degree)
    
    # Define a distance factor based on the distance from the median distance
    # Edges far from the median distance are considered more costly
    distance_factor = 2 if distance_matrix > np.median(distance_matrix) else 1

    # Calculate the cost for each edge
    cost_matrix = cost_factor * distance_factor * distance_matrix

    # Normalize the cost matrix to have a maximum value of 1
    max_cost = np.max(cost_matrix)
    if max_cost > 0:
        cost_matrix /= max_cost
    
    return cost_matrix
```
