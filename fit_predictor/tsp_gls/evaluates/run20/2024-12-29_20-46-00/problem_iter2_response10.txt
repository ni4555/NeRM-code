```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Incorporate domain knowledge: Penalize edges that are part of the local optimal route
    # but also consider the distance of the edge. The idea here is to use a combination of
    # penalties based on the distance from the local optimal route and the absolute distance
    # between nodes.
    
    # Initialize the penalty matrix
    num_nodes = distance_matrix.shape[0]
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Get the local optimal route
    local_optimal_route = np.random.choice(num_nodes, size=num_nodes-1, replace=False)
    
    # Create penalties for edges that are part of the local optimal route
    for i in range(num_nodes-1):
        penalty_matrix[local_optimal_route[i]][local_optimal_route[(i+1) % (num_nodes-1)]] += 1
        penalty_matrix[local_optimal_route[(i+1) % (num_nodes-1)]][local_optimal_route[i]] += 1
    
    # Calculate the absolute distances between all pairs of nodes
    absolute_distances = np.abs(distance_matrix)
    
    # Weigh penalties by the relevance of the edge being part of the local optimal route
    # and by its distance. The idea is to use a weighted average where the distance has
    # a lower weight than the penalty from being part of the route.
    edge_relevance = np.array([1 if np.any(penalty_matrix[i, :]) else 0 for i in range(num_nodes)])
    distance_weight = absolute_distances / np.max(absolute_distances)
    combined_penalties = edge_relevance * (penalty_matrix + distance_weight)
    
    return combined_penalties
```
