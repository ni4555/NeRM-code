```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Introduce a heuristic that combines both edge length and the distance from the current path
    # to the shortest path found so far, with additional diversification to avoid getting stuck.
    
    # Calculate the shortest path to each vertex from the current path
    n = distance_matrix.shape[0]
    shortest_paths = np.zeros_like(distance_matrix)
    for i in range(n):
        shortest_paths[i, :] = np.partition(distance_matrix[i, :], 1)[1]
    
    # Calculate the current path as a median distance from the vertices
    current_path_median = np.median(shortest_paths)
    
    # Calculate the "badness" based on the edge length and its distance from the current path
    badness_matrix = distance_matrix + np.abs(distance_matrix - current_path_median)
    
    # Introduce diversification by adding a factor that encourages exploring less traveled edges
    diversification_factor = np.exp(-badness_matrix)
    
    # Normalize the diversification factor to ensure all values are within a similar range
    max_value = np.max(diversification_factor)
    min_value = np.min(diversification_factor)
    normalized_diversification = (diversification_factor - min_value) / (max_value - min_value)
    
    return normalized_diversification
```
