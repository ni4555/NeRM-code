```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the importance of each node based on its degree and the average
    # degree of its neighbors
    importance = degrees + np.mean(distance_matrix, axis=1)
    
    # Define a function to calculate the local feature of each edge based on
    # the importance of its nodes and the distance between them
    def local_feature(i, j):
        return 1 / (importance[i] * importance[j]) * distance_matrix[i, j]
    
    # Calculate the heuristic matrix by applying the local feature function
    # to each edge
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = local_feature(i, j)
    
    # Introduce exploration by adding a random component
    random_component = np.random.rand(n, n)
    heuristic_matrix += random_component * (1 - np.abs(heuristic_matrix))
    
    # Normalize the heuristic matrix to the range [0, 1]
    max_feature = np.max(heuristic_matrix)
    if max_feature > 0:
        heuristic_matrix /= max_feature
    
    # Balance global/local by penalizing high degree nodes
    penalty = np.max(heuristic_matrix) / (1 + degrees)
    heuristic_matrix *= penalty
    
    # Adapt penalties by reducing the penalty if the heuristic value is already low
    low_values = heuristic_matrix < 0.5
    heuristic_matrix[low_values] *= (1 - np.mean(penalty[low_values]))
    
    return heuristic_matrix
```
