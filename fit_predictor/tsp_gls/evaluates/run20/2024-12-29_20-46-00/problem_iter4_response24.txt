```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    
    # Incorporate node and edge attributes
    degrees = np.sum(distance_matrix, axis=1)
    average_degree = np.mean(degrees)
    
    # Use the average degree to penalize nodes with significantly higher or lower degrees
    node_degree_penalties = np.abs(degrees - average_degree)
    
    # Calculate edge penalties proportional to the distance of the edge, with a cap to avoid overpenalization
    edge_penalties = distance_matrix / np.max(distance_matrix)
    edge_penalties = np.clip(edge_penalties, 0.1, 1)
    
    # Combine node penalties with edge penalties
    combined_node_penalties = np.exp(-node_degree_penalties / 10)
    combined_penalties = combined_node_penalties * edge_penalties
    
    # Balance local and global information
    # Calculate the density of the graph to penalize dense regions
    density = np.sum(distance_matrix) / (num_nodes * (num_nodes - 1))
    
    # Use the density to adjust the combined penalties
    combined_penalties = combined_penalties * (1 - density)
    
    # Ensure the penalties are within [0, 1]
    combined_penalties = np.clip(combined_penalties, 0, 1)
    
    return combined_penalties
```
