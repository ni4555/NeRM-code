```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This improved heuristic incorporates the local structure of the problem
    # by considering the neighborhood of each edge. It balances exploration
    # with exploitation by incorporating both the degree of the nodes and
    # the average distance to the nearest node, favoring edges that connect
    # to a diverse set of nodes or have unique neighbors.

    num_nodes = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    neighbors = np.dot(distance_matrix, np.ones(num_nodes)) - distance_matrix
    neighbors[range(num_nodes), range(num_nodes)] = 0  # Remove self-loops
    average_distances = neighbors / (num_nodes - 1)

    # Create a matrix where the cost of each edge is a weighted sum of the
    # inverse of the degree of its two nodes and the average distance to the
    # nearest node, favoring edges with lower degrees and lower average
    # distances to their nearest nodes.
    cost_matrix = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # The weight is adjusted to ensure that both components
                # have a similar impact on the heuristic.
                weight_degree = 1.0
                weight_distance = 0.5
                cost_matrix[i, j] = weight_degree / (degrees[i] * degrees[j]) + \
                                    weight_distance / (average_distances[i, j] + 1e-6)
    
    return cost_matrix
```
