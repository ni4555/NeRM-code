```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply multiple criteria for the heuristic values:
    # 1. Proximity to the shortest path to a city (as in v1)
    # 2. Edge between nodes with low total edge cost (minimize the sum of all edge costs)
    # 3. Normalize to the minimum value in the matrix to leverage symmetry
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            sum_distances_to_i = np.sum(distance_matrix[i])
            sum_distances_to_j = np.sum(distance_matrix[j])
            total_edge_cost = sum_distances_to_i + sum_distances_to_j - distance_matrix[i, j]
            shortest_sum = np.min([sum_distances_to_i, sum_distances_to_j])
            if shortest_sum > 0:
                proximity_heuristic = distance_matrix[i, j] / shortest_sum
            else:
                proximity_heuristic = 0
            
            edge_cost_heuristic = total_edge_cost / (len(distance_matrix) * (len(distance_matrix) - 1) / 2)
            
            # Combine the heuristics with normalization
            heuristic_value = min(proximity_heuristic, edge_cost_heuristic) / np.min(distance_matrix)
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
