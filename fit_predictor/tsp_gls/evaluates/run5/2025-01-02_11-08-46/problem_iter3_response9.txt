```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distance matrix
    min_distances = np.min(distance_matrix, axis=1)[:, None]
    max_distances = np.max(distance_matrix, axis=1)[:, None]
    normalized_distances = (distance_matrix - min_distances) / (max_distances - min_distances)
    
    # Calculate heuristic based on normalized distances
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                heuristic_value = normalized_distances[i, j]
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
