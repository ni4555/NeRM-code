```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Heuristic 1: Edge weight divided by the sum of the minimum distances to each node
    for i in range(len(distance_matrix)):
        sum_min_distances_to_i = np.sum(distance_matrix[i])
        for j in range(i+1, len(distance_matrix)):
            sum_min_distances_to_j = np.sum(distance_matrix[j])
            heuristic_value_1 = distance_matrix[i, j] / (sum_min_distances_to_i + sum_min_distances_to_j)
            heuristic_matrix[i, j] = heuristic_value_1
            heuristic_matrix[j, i] = heuristic_value_1  # Symmetry of the matrix
    
    # Heuristic 2: Edge weight divided by the sum of the shortest paths to each node
    for i in range(len(distance_matrix)):
        shortest_path_sum_i = np.sum(np.min(distance_matrix[i]))
        for j in range(i+1, len(distance_matrix)):
            shortest_path_sum_j = np.sum(np.min(distance_matrix[:, j]))
            heuristic_value_2 = distance_matrix[i, j] / (shortest_path_sum_i + shortest_path_sum_j)
            heuristic_matrix[i, j] += heuristic_value_2
            heuristic_matrix[j, i] += heuristic_value_2
    
    # Normalize the heuristic matrix to be between 0 and 1
    heuristic_matrix = heuristic_matrix / np.max(heuristic_matrix)
    
    return heuristic_matrix
```
