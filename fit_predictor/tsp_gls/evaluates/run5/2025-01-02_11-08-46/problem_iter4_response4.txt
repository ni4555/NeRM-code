```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distance matrix to exploit symmetry and reduce complexity
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Compute the heuristic matrix based on normalized distances
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Incorporate domain knowledge by considering the edge importance
                # For example, the more central nodes should have a higher impact on the heuristic
                # Also, we can use the reciprocal of the distance to emphasize shorter edges
                importance_factor = 1 / (i + 1)  # Assuming lower index nodes are more central
                heuristic_value = normalized_matrix[i, j] * importance_factor / distance_matrix[i, j]
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
