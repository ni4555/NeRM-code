```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the maximum distance from each point to any other point in the graph
    max_distances = np.max(distance_matrix, axis=1)[:, None]
    
    # Calculate the average distance of each edge to the average of its endpoints
    average_distances = (distance_matrix + distance_matrix.T) / 2
    
    # Combine the heuristics using a weighted average
    weights = np.ones_like(distance_matrix)
    weights[distance_matrix == 0] = 0  # Avoid division by zero
    average_weights = np.sum(weights, axis=1)[:, None]
    heuristic_matrix = (average_distances / (1 + max_distances - average_distances)) * (average_weights / (average_weights + 1))
    
    # Symmetry of the matrix
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2
    
    return heuristic_matrix
```
