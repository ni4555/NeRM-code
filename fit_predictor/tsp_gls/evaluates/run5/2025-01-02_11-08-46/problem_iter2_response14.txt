```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply an improved heuristic that uses the sum of the distances to all nodes
    # from each node and the shortest distance from the current node to the end node
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            sum_distances_to_i = np.sum(distance_matrix[i])
            # The heuristic value is based on the difference between the shortest distance to j
            # and the sum of distances to all nodes minus the distance to j itself
            heuristic_value = distance_matrix[i, j] / (sum_distances_to_i - distance_matrix[i, j])
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
