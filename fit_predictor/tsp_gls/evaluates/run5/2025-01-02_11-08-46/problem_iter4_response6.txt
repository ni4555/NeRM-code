```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate local and global feature values for each node
    local_features = np.min(distance_matrix, axis=1)
    global_features = (np.max(distance_matrix, axis=1) - local_features) / np.max(distance_matrix, axis=1)
    
    # Combine local and global feature values to create a heuristic for each edge
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            combined_heuristic = local_features[i] + global_features[i]
            heuristic_matrix[i, j] = combined_heuristic
            heuristic_matrix[j, i] = combined_heuristic  # Symmetry of the matrix
    
    return heuristic_matrix
```
