```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distances to ensure all values are between 0 and 1
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Incorporate a diversity heuristic to penalize similar edges
    # Calculate the maximum distance between each pair of normalized edges
    max_edge_similarity = np.max(normalized_matrix * normalized_matrix.T, axis=0)
    # Normalize by the square root of the number of nodes
    max_edge_similarity /= np.sqrt(normalized_matrix.shape[0])
    
    # Calculate the heuristic values based on normalized distances and diversity heuristic
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Use both the normalized distance and the diversity heuristic
                # as the basis for the heuristic value
                heuristic_value = normalized_matrix[i, j] * (1 - max_edge_similarity[i, j])
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
