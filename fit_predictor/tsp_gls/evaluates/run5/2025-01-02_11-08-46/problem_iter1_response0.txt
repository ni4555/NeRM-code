```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply the innovative heuristic to refine the distance matrix
    # This heuristic assumes a cost-based approach where the cost of an edge is inversely proportional
    # to the number of shortest paths it is part of.
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            min_distance_row = np.argmin(distance_matrix[i])
            min_distance_col = np.argmin(distance_matrix[:, j])
            shortest_path_count = (min_distance_row == i) + (min_distance_col == j)
            heuristic_value = 1 / shortest_path_count
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
