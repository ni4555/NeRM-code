```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Incorporate domain-specific knowledge:
    # Use the geometric distance between points as a heuristic
    # The Euclidean distance could be a starting point for this heuristic
    
    # Calculate Euclidean distances for all pairs of points
    n = len(distance_matrix)
    euclidean_matrix = np.sqrt(np.sum(np.square(distance_matrix), axis=1))
    
    # Consider global constraints or patterns:
    # The triangle inequality can be used to improve the heuristic matrix
    # We calculate the triangle inequality for each edge
    
    for i in range(n):
        for j in range(n):
            if i != j:
                # Focus on key elements:
                # Consider the distance to a common neighbor as a potential heuristic
                # This assumes that points with common neighbors might be closer than others
                
                # Select a common neighbor, if possible
                common_neighbors = np.where(np.isin(euclidean_matrix, euclidean_matrix[i] + euclidean_matrix[j]))[0]
                if len(common_neighbors) > 0:
                    # Select the closest common neighbor to both points
                    common_neighbor_index = np.argmin(np.abs(euclidean_matrix[i] - euclidean_matrix[common_neighbors]))
                    common_neighbor = common_neighbors[common_neighbor_index]
                    
                    # Calculate the heuristic based on the distances
                    heuristic_value = np.abs(distance_matrix[i, j] - euclidean_matrix[i] - euclidean_matrix[j] + euclidean_matrix[common_neighbor])
                else:
                    # No common neighbor, use the standard heuristic
                    heuristic_value = np.abs(distance_matrix[i, j])
                
                # Differentiate between problem aspects:
                # Include the connectivity aspect in the heuristic
                if np.any(distance_matrix[i, j] == 0):
                    # Edge doesn't exist, set heuristic to a large number
                    heuristic_value = np.inf
                
                # Differentiate between problem aspects:
                # Use the Euclidean distance as a second component of the heuristic
                heuristic_value = (heuristic_value + np.abs(euclidean_matrix[i] - euclidean_matrix[j])) / 2
                
                # Apply the heuristic to the matrix
                heuristic_matrix[i, j] = heuristic_value
                heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
