```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply a different innovative heuristic to refine the distance matrix
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            # Hypothetical heuristic: Calculate the difference in distances to a central point
            # This heuristic assumes that some points are more central than others
            central_index = np.where(distance_matrix.sum(axis=0) == distance_matrix.sum(axis=0).min())[0][0]
            heuristic_value = abs(distance_matrix[i, central_index] - distance_matrix[j, central_index])
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
