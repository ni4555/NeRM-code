```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply the improved heuristic considering symmetry and problem-specific insights
    # Example heuristic: Use the minimum distance from each point to the next point in the optimal tour
    for i in range(len(distance_matrix)):
        # Find the minimum distance to the next point in the tour for each point
        min_distances = np.partition(distance_matrix[i], 1)[:2]  # Get the smallest two distances
        for j in range(len(distance_matrix)):
            if i != j:
                # If the distance is between the point and the next point in the tour
                if distance_matrix[i, j] in min_distances:
                    # Increase the heuristic value if it's not the minimum distance
                    if distance_matrix[i, j] != min_distances[0]:
                        heuristic_value = 1.0
                    else:
                        heuristic_value = 0.0
                else:
                    # Otherwise, it's a higher cost edge
                    heuristic_value = 1.0
                heuristic_matrix[i, j] = heuristic_value
                heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
