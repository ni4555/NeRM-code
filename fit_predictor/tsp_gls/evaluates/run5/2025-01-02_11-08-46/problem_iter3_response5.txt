```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the normalized shortest paths from each node to all others
    for i in range(len(distance_matrix)):
        shortest_paths = np.argmin(distance_matrix[i, :].reshape(-1, 1), axis=0) + np.arange(len(distance_matrix))
        for j in range(len(distance_matrix)):
            if i != j:
                # Normalize the distance by the average distance to all other nodes
                average_distance = np.mean(distance_matrix[shortest_paths[:, 1], shortest_paths[:, 0]])
                # Adjust for edge length
                heuristic_value = (distance_matrix[i, j] - average_distance) / average_distance if average_distance != 0 else 0
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
