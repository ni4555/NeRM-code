```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the minimum and maximum distances for normalization
    min_distances = np.min(distance_matrix, axis=1)[:, None]
    max_distances = np.max(distance_matrix, axis=1)[:, None]
    avg_distance = np.sum(distance_matrix) / np.size(distance_matrix)
    
    # Normalize the distances
    normalized_distances = (distance_matrix - min_distances) / (max_distances - min_distances)
    
    # Incorporate a global feature that considers the average distance
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Use the normalized distance as a primary heuristic
                heuristic_value = normalized_distances[i, j]
                # Add a secondary heuristic that penalizes large deviations from the average distance
                if distance_matrix[i, j] > avg_distance:
                    heuristic_value += (distance_matrix[i, j] - avg_distance) / (2 * avg_distance)
                # Reflect the matrix symmetry in the heuristic
                heuristic_matrix[i, j] = heuristic_value
                heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
