{
  "generation": 0,
  "description": "Solving Traveling Salesman Problem (TSP) via guided local search. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.",
  "failed_solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Assuming that the edge from node i to j is 'bad' by the amount of distance it requires\n    # and 'good' by how little distance it requires.\n    # Since a distance matrix is symmetric, we will use only one of its triangles (e.g., upper triangle).\n    # This avoids computing the same heuristics twice for undirected edges.\n    \n    # Calculate the minimum distance from each node to all other nodes.\n    min_distances = np.min(distance_matrix, axis=1)\n    \n    # Create a new matrix with the same shape as the distance matrix.\n    heuristics = np.zeros_like(distance_matrix)\n    \n    # Fill the matrix with the heuristics. For the diagonal, set the value to 0 as it doesn't apply.\n    np.fill_diagonal(heuristics, 0)\n    \n    # Copy the min distance to each edge, since we assume shorter distances are preferable.\n    heuristics = np.copy(min_distances)\n    \n    return heuristics",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Traceback (most recent call last):\n  File \"E:\\Projects\\CO\\reevo-main_1/problems/tsp_gls/eval.py\", line 51, in <module>\n    obj = solve(instance)\n          ^^^^^^^^^^^^^^^\n  File \"E:\\Projects\\CO\\reevo-main_1/problems/tsp_gls/eval.py\", line 22, in solve\n    assert tuple(heu.shape) == (inst.n, inst.n)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
      "stdout_file": "coevolve\\generation_0\\stdout_7.txt",
      "code_file": "coevolve\\generation_0\\code_7.py"
    }
  ]
}