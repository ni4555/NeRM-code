Fitness: 10.60242549294038

Description:
Solving Traveling Salesman Problem (TSP) via guided local search. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.

Code:
import numpy as np
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Assuming the distance_matrix is symmetric and the diagonal elements are 0
    num_nodes = distance_matrix.shape[0]
    
    # Initialize a matrix to store heuristics values
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate heuristics for each edge
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the heuristic as the minimum of the distance to any other node plus the distance to node j
                heuristics_matrix[i][j] = np.min(distance_matrix[i] + distance_matrix[:, j])
    
    return heuristics_matrix