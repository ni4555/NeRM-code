```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the minimum distance from each point to any other point
    min_distances = np.min(distance_matrix, axis=1)[:, None]
    
    # Calculate the maximum distance from each point to any other point
    max_distances = np.max(distance_matrix, axis=1)[:, None]
    
    # Apply a heuristic that considers both the minimum and maximum distances
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Combine the minimum and maximum distances with a ratio to create a heuristic value
                heuristic_value = (min_distances[i] / distance_matrix[i, j]) + (max_distances[i] / distance_matrix[i, j])
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
