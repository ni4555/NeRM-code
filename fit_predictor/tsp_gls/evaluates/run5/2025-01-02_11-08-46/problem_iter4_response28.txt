```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the center of mass
    center_of_mass = np.average(distance_matrix, axis=0)
    
    # Calculate the heuristic values for each edge
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):  # Only need to calculate for upper triangle
            # Calculate the distance from the edge to the center of mass
            edge_to_center = np.linalg.norm(np.subtract(center_of_mass, distance_matrix[i, j]))
            # Calculate the heuristic value
            heuristic_value = edge_to_center
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
