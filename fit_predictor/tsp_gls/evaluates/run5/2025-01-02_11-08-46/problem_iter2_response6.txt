```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Improved heuristic: Use the sum of distances from the center of mass
    # to each node as an indicator of the edge importance
    center_of_mass = np.sum(distance_matrix, axis=1) / np.sum(distance_matrix, axis=0)
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            distance_to_center_i = np.linalg.norm(center_of_mass[i] - distance_matrix[i])
            distance_to_center_j = np.linalg.norm(center_of_mass[j] - distance_matrix[j])
            heuristic_value = distance_matrix[i, j] / (distance_to_center_i + distance_to_center_j)
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
