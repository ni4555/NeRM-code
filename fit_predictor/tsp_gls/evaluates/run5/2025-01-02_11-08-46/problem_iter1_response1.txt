```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply the second innovative heuristic to refine the distance matrix
    # This heuristic considers the shortest path to each city as a potential indicator of its importance.
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            # Calculate the sum of distances from all nodes to node i, then normalize by the shortest sum to node j
            sum_distances_to_i = np.sum(distance_matrix[i])
            sum_distances_to_j = np.sum(distance_matrix[j])
            shortest_sum = np.min([sum_distances_to_i, sum_distances_to_j])
            if shortest_sum > 0:
                heuristic_value = distance_matrix[i, j] / shortest_sum
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
