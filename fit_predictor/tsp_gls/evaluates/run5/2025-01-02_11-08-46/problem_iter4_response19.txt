```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Improved heuristic considering the structure of the optimal tour
    # Calculate the distance from each node to the next node in the optimal tour
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Use the minimum distance to the next node as a proxy for the heuristic
                if i < j:
                    # Use the minimum distance to the next node in the sorted order
                    next_node_index = np.argsort(distance_matrix[i])[1]
                    heuristic_value = distance_matrix[i, next_node_index]
                else:
                    # Use the minimum distance to the previous node in the sorted order
                    previous_node_index = np.argsort(distance_matrix[j])[-2]
                    heuristic_value = distance_matrix[j, previous_node_index]
                heuristic_matrix[i, j] = heuristic_value
                heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
