```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the degree of each node, which is the sum of the distances to all other nodes
    degrees = np.sum(distance_matrix, axis=1)
    
    # Normalize the distance matrix to account for the degree of the nodes
    normalized_distances = distance_matrix / (1 + degrees[:, None])
    
    # Apply a heuristic that considers the normalized distances and the symmetry of the matrix
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # If the edge is not part of a cycle, it's potentially more favorable
                if degrees[i] + degrees[j] > len(distance_matrix) - 2:
                    heuristic_value = normalized_distances[i, j]
                else:
                    heuristic_value = np.inf
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
