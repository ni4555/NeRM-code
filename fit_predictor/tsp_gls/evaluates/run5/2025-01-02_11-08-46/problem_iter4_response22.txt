```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the sum of distances from each node to all other nodes
    distance_sums = np.sum(distance_matrix, axis=1)[:, None]
    
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)[:, None]
    
    # The heuristic value for each edge is the inverse of the sum of the shortest paths
    # that include the edge, normalized by the sum of distances from each node.
    # This takes advantage of symmetry and avoids redundant calculations.
    heuristic_matrix = 1 / (1 + distance_matrix + min_distances)
    
    # Since the matrix is symmetric, we only need to compute the upper triangle
    # and then mirror it.
    np.fill_diagonal(heuristic_matrix, 0)
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2
    
    return heuristic_matrix
```
