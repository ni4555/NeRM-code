```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the shortest paths from each node to all other nodes
    shortest_paths = np.min(distance_matrix, axis=1)
    
    # For each edge, calculate the heuristic based on:
    # - The inverse of the shortest path distance between the two nodes
    # - The inverse of the sum of the shortest paths from the two nodes to all other nodes
    # - The number of shortest paths that include the edge
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            min_distance = distance_matrix[i, j]
            sum_of_shortest_paths = shortest_paths[i] + shortest_paths[j]
            count_of_shortest_paths = np.sum(distance_matrix[i] == min_distance) + np.sum(distance_matrix[:, j] == min_distance)
            heuristic_value = 1 / min_distance + 1 / sum_of_shortest_paths + 1 / count_of_shortest_paths
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
