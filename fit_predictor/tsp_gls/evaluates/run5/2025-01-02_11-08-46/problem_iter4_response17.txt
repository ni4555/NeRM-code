```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply a heuristic that considers both local and global knowledge
    # Local knowledge: the closer a node, the lower the heuristic value
    # Global knowledge: the more central a node, the lower the heuristic value
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Calculate the local heuristic as the distance from node i to node j
                local_heuristic = distance_matrix[i, j]
                # Calculate the global heuristic as the sum of distances from node i to all other nodes
                global_heuristic = np.sum(distance_matrix[i])
                # Combine local and global heuristics
                combined_heuristic = (local_heuristic / global_heuristic) + (1 - local_heuristic / global_heuristic)
                # Clamp the combined heuristic value to avoid negative values
                combined_heuristic = np.clip(combined_heuristic, 0, 1)
            else:
                combined_heuristic = 0
            heuristic_matrix[i, j] = combined_heuristic
            heuristic_matrix[j, i] = combined_heuristic  # Symmetry of the matrix
    
    return heuristic_matrix
```
