```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply an improved heuristic that considers the information content and problem-specific properties
    # The heuristic will be based on the sum of distances to all other points normalized by the maximum possible sum of distances
    for i in range(len(distance_matrix)):
        max_possible_sum = np.sum(distance_matrix[i])
        actual_sum = np.sum(distance_matrix[i])
        if max_possible_sum > 0:
            heuristic_value = actual_sum / max_possible_sum
        else:
            heuristic_value = 0
        for j in range(i+1, len(distance_matrix)):
            # Calculate the heuristic value for the edge i-j
            # It is based on the ratio of the distance i-j to the minimum of the distances to all other points
            min_distance_to_j = np.min(distance_matrix[j])
            if min_distance_to_j > 0:
                heuristic_matrix[i, j] = distance_matrix[i, j] / min_distance_to_j
                heuristic_matrix[j, i] = distance_matrix[i, j] / min_distance_to_j
            else:
                # If there are no other points, set the heuristic to 0
                heuristic_matrix[i, j] = 0
                heuristic_matrix[j, i] = 0
    
    return heuristic_matrix
```
