```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Improved heuristic considering the sum of the distances to all other nodes as a heuristic value
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            # Calculate the sum of distances from each node to node i and node j
            sum_distances_to_i = np.sum(distance_matrix[i])
            sum_distances_to_j = np.sum(distance_matrix[j])
            
            # Use the average of the sum of distances as a potential indicator of the importance of the edge
            heuristic_value = (sum_distances_to_i + sum_distances_to_j) / 2
            
            # If the average sum of distances is greater than 0, use it as the heuristic value
            # Otherwise, set the heuristic value to a very large number to avoid considering this edge
            if heuristic_value > 0:
                heuristic_matrix[i, j] = heuristic_value
                heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
            else:
                heuristic_matrix[i, j] = float('inf')
                heuristic_matrix[j, i] = float('inf')
    
    return heuristic_matrix
```
