```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with the distances
    heuristics = np.copy(distance_matrix)
    
    # Calculate the number of cities
    num_cities = distance_matrix.shape[0]
    
    # Calculate node degree matrix
    degree_matrix = np.sum(distance_matrix, axis=0)
    
    # Loop through each city
    for i in range(num_cities):
        # Loop through each edge from city i to the next cities
        for j in range(i + 1, num_cities):
            # Calculate the index of the previous city
            prev_index = (j - 1) % num_cities
            
            # Calculate the penalty for edge based on path position
            path_position_penalty = (i + 1) / num_cities
            
            # Calculate the penalty for connecting to a high degree node
            degree_penalty = degree_matrix[i] * degree_matrix[j]
            
            # Calculate the structural penalty to avoid highly connected structures
            # by considering the total distance if this edge was included
            structural_penalty = np.sum(distance_matrix[prev_index, i:j+1].sum(axis=1)) ** 2
            
            # Combine penalties and normalize to encourage exploration of longer edges later in the path
            combined_penalty = path_position_penalty + degree_penalty + structural_penalty
            
            # Update the heuristic for this edge
            heuristics[i, j] *= (1 + combined_penalty)
            heuristics[j, i] *= (1 + combined_penalty)
    
    # Normalize heuristics to maintain consistency
    heuristics /= heuristics.max()
    
    return heuristics
```
