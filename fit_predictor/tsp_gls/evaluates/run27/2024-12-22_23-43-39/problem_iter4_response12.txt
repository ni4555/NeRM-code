```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the diagonal of the distance matrix (no distance to itself)
    diag = np.diag(distance_matrix)
    
    # Calculate the distance matrix without self-loops
    distance_matrix_no_diag = np.copy(distance_matrix)
    np.fill_diagonal(distance_matrix_no_diag, np.inf)
    
    # Calculate the minimum distance for each edge (excluding self-loops)
    min_distances = np.min(distance_matrix_no_diag, axis=0)
    
    # Normalize the distance to its respective minimum distance
    normalized_distances = distance_matrix / min_distances
    
    # Calculate the degree of each node
    degree_matrix = np.sum(distance_matrix, axis=1)
    
    # Squaring the degrees to increase the penalty for high-degree nodes
    degree_penalty = degree_matrix ** 2
    
    # Calculate the penalty for edges with very low normalized distances
    low_normalized_penalty = (1 - normalized_distances) ** 2
    
    # Calculate the penalty for edges that are part of a triangle (high density of edges)
    triangle_penalty = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j and i < j:
                triangle_penalty[i, j] = np.mean(distance_matrix[i, min(i+1, j):max(i+1, j)+1])
    
    # Combine the penalties into a single heuristic value
    heuristics = normalized_distances + degree_penalty + low_normalized_penalty + triangle_penalty
    
    # Normalize the heuristic values to ensure they are within a certain range
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))
    
    return heuristics
```
