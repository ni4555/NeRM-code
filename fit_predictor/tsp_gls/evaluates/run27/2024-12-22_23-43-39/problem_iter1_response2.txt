```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a simple heuristic based on the Manhattan distance from the origin
    num_nodes = distance_matrix.shape[0]
    # Create a matrix of Manhattan distances
    manhattan_distance = np.abs(np.sum(distance_matrix, axis=1)) + np.abs(np.sum(distance_matrix, axis=0))
    # The heuristic value is the negative of the Manhattan distance (since lower values are better in minimization problems)
    return -manhattan_distance
```
