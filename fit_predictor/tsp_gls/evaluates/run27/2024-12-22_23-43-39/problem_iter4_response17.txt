```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic as the distance to the nearest neighbor for both nodes
                nearest_neighbor_i = np.argmin(distance_matrix[i, ~np.isin(np.arange(n), [i])])
                nearest_neighbor_j = np.argmin(distance_matrix[j, ~np.isin(np.arange(n), [j])])
                heuristics_matrix[i, j] = distance_matrix[i, nearest_neighbor_i] + distance_matrix[j, nearest_neighbor_j] + distance_matrix[i, j]
            else:
                # Set the heuristic value to a high number if it's the same node (self-loop)
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
