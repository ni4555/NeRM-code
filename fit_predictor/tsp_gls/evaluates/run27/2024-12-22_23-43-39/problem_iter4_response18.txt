```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Average distance to penalize edges that are too short
    avg_distance = np.mean(distance_matrix)

    # Incorporate nearest neighbor distances
    for i in range(n):
        nearest_neighbor_distances = distance_matrix[i, ~np.isin(np.arange(n), [i])]
        nearest_neighbor = np.argmin(nearest_neighbor_distances)
        nearest_neighbor_distance = nearest_neighbor_distances[nearest_neighbor]
        heuristics_matrix[i, nearest_neighbor] += nearest_neighbor_distance
        heuristics_matrix[nearest_neighbor, i] += nearest_neighbor_distance

    # Incorporate penalties for local structure and symmetry
    for i in range(n):
        for j in range(i):
            if np.count_nonzero(distance_matrix[i, :] == distance_matrix[j, :]) > 1:
                symmetry_penalty = 1
            else:
                symmetry_penalty = 0

            # Check if both edges are in the same quadrant relative to the longest edge
            longest_edge = np.max(distance_matrix)
            quadrant1 = (distance_matrix[i, :] < longest_edge / 2) & (distance_matrix[j, :] < longest_edge / 2)
            quadrant2 = (distance_matrix[i, :] > longest_edge / 2) & (distance_matrix[j, :] > longest_edge / 2)
            quadrant3 = (distance_matrix[i, :] < longest_edge / 2) & (distance_matrix[j, :] > longest_edge / 2)
            quadrant4 = (distance_matrix[i, :] > longest_edge / 2) & (distance_matrix[j, :] < longest_edge / 2)
            local_structure_penalty = 0
            if np.sum(quadrant1) > 1 or np.sum(quadrant2) > 1 or np.sum(quadrant3) > 1 or np.sum(quadrant4) > 1:
                local_structure_penalty = 1

            # Apply the penalties
            heuristics_matrix[i, j] += avg_distance / 2 * (1 + symmetry_penalty + local_structure_penalty)
            heuristics_matrix[j, i] += avg_distance / 2 * (1 + symmetry_penalty + local_structure_penalty)

    # Add randomness to avoid local minima
    random_perturbation = np.random.rand(n, n) * (1 - heuristics_matrix.max())
    heuristics_matrix += random_perturbation

    return heuristics_matrix
```
