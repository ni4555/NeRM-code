```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Introduce a local and a global penalty based on the distance matrix
                local_penalty = np.min(distance_matrix[i, distance_matrix[i] != float('inf')])
                global_penalty = np.min(distance_matrix[distance_matrix[:, i] != float('inf'), i])
                # Incorporate domain knowledge by adding a constant factor to the local and global penalties
                domain_factor = 1.2
                # Normalize the heuristics by considering the edge itself and the average distance
                heuristics_matrix[i, j] = (local_penalty + global_penalty + distance_matrix[i, j]) / (1 + domain_factor)
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
