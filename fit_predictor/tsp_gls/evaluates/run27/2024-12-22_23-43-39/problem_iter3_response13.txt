```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic as the distance to the nearest neighbor for both nodes
                # Incorporate the shortest path from i to any node and j to any node
                # Add a local structure penalty if the edge is within the same cluster
                # Use domain knowledge to add a bonus for edges that follow a certain pattern
                
                # Nearest neighbor distances
                nearest_i = np.min(distance_matrix[i, ~np.isin(np.arange(n), [i])])
                nearest_j = np.min(distance_matrix[j, ~np.isin(np.arange(n), [j])])
                
                # Local structure penalty (example: if i and j are within a distance d of each other)
                d = 5
                if np.any(distance_matrix[i] <= d) and np.any(distance_matrix[j] <= d):
                    local_penalty = 1  # Apply penalty
                else:
                    local_penalty = 0
                
                # Domain knowledge bonus (example: if the edge is part of a common route)
                bonus = 0  # Set bonus based on domain knowledge
                if np.isin(distance_matrix[i, j], [3, 4, 5]):  # Example pattern
                    bonus = 1
                
                heuristics_matrix[i, j] = (nearest_i + nearest_j + distance_matrix[i, j]) / 2
                heuristics_matrix[i, j] += local_penalty
                heuristics_matrix[i, j] += bonus
            else:
                # Set the heuristic value to a high number if it's the same node (self-loop)
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
