```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance for each edge
    avg_edge_distance = np.mean(distance_matrix)
    # Calculate the average distance from each node to all other nodes
    avg_distances_to_each_node = np.mean(distance_matrix, axis=0)
    avg_distances_from_each_node = np.mean(distance_matrix, axis=1)
    # Create a heuristic based on the deviation from the average distance
    heuristic = distance_matrix - avg_edge_distance
    # Adjust the heuristic based on the node proximity to the average distances
    heuristic = (heuristic * (avg_distances_to_each_node - avg_distances_from_each_node > 0)) * \
                (heuristic * (avg_distances_to_each_node - avg_distances_from_each_node < 0)) * \
                (heuristic > 0)
    return heuristic
```
