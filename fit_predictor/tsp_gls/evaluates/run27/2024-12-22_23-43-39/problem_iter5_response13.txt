```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Incorporate domain-specific penalties (e.g., avoiding high-cost edges)
                # and exploit local structures by considering the average distance
                # from a node to its neighbors
                local_neighbors = distance_matrix[i, distance_matrix[i] != float('inf')]
                domain_neighbors = distance_matrix[distance_matrix[:, i] != float('inf'), i]
                local_min = np.min(local_neighbors)
                domain_min = np.min(domain_neighbors)
                heuristic = (local_min + domain_min + distance_matrix[i, j]) / 2
                # Apply a penalty for high-cost edges
                if distance_matrix[i, j] > local_min + domain_min:
                    heuristic += (distance_matrix[i, j] - (local_min + domain_min)) * 0.5
                heuristics_matrix[i, j] = heuristic
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
