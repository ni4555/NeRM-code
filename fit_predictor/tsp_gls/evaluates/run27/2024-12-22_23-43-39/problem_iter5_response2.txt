```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Use the local structure by considering the minimum distance from the current node
                local_min = np.min(distance_matrix[i, distance_matrix[i] != float('inf')])

                # Use domain knowledge by considering the minimum distance to the current node from all other nodes
                domain_min = np.min(distance_matrix[distance_matrix[:, i] != float('inf'), i])

                # Incorporate diverse metrics and normalize the heuristic
                heuristics_value = (local_min + domain_min + distance_matrix[i, j]) / 3
                heuristics_matrix[i, j] = heuristics_value

                # Apply penalties based on the degree of the node
                node_degree_penalty = 1 / (1 + np.sum(distance_matrix[i, :] != float('inf')))
                heuristics_matrix[i, j] += node_degree_penalty

                # Apply a penalty for high weights to avoid choosing long edges early
                high_weight_penalty = distance_matrix[i, j] / (1 + np.max(distance_matrix))
                heuristics_matrix[i, j] -= high_weight_penalty
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
