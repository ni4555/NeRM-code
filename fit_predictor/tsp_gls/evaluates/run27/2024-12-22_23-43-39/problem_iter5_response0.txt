```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic using a combination of global penalties
                # and local structure penalties, normalized by the sum of penalties
                local_penalty = np.mean(distance_matrix[i, distance_matrix[i] != float('inf')])
                global_penalty = np.mean(distance_matrix[distance_matrix[:, i] != float('inf'), i])
                distance_diff = abs(distance_matrix[i, j] - np.mean(distance_matrix[i]))
                heuristics_matrix[i, j] = (local_penalty + global_penalty + distance_diff) / 3
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
