```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the diagonal of the distance matrix (no distance to itself)
    diag = np.diag(distance_matrix)
    
    # Calculate the distance matrix without self-loops
    distance_matrix_no_diag = np.copy(distance_matrix)
    np.fill_diagonal(distance_matrix_no_diag, np.inf)
    
    # Calculate the minimum distance for each edge (excluding self-loops)
    min_distances = np.min(distance_matrix_no_diag, axis=0)
    
    # Normalize the distance to its respective minimum distance
    normalized_distances = distance_matrix / min_distances
    
    # Incorporate node connectivity by penalizing connections to high degree nodes
    degree_matrix = np.sum(distance_matrix, axis=0)
    degree_penalty = degree_matrix ** 2
    
    # Incorporate structural penalties to avoid highly connected structures
    # Calculate the total distance if this edge was included in the path
    total_edge_distances = distance_matrix_no_diag.sum(axis=1)
    structural_penalty = total_edge_distances ** 2
    
    # Combine penalties and normalize to encourage exploration of longer edges later in the path
    combined_penalty = (normalized_distances + degree_penalty + structural_penalty) / (normalized_distances + degree_penalty + structural_penalty).max()
    
    # Heuristics should be high for edges that are bad candidates
    heuristics = 1 - combined_penalty
    
    return heuristics
```
