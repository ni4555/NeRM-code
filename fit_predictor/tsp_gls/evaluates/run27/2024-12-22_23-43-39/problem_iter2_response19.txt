```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance to each node from all other nodes
    avg_distance_to_each_node = np.mean(distance_matrix, axis=0)
    # Calculate the average distance from each node to all other nodes
    avg_distance_from_each_node = np.mean(distance_matrix, axis=1)
    # Calculate the local distances from the node to its neighbors
    local_distances = np.abs(distance_matrix - avg_distance_to_each_node)
    # Calculate the deviations of the edge costs from the average
    deviations = np.abs(distance_matrix - avg_distance_from_each_node)
    # Combine the local distances and deviations to form the heuristic
    heuristics = local_distances * deviations
    # Normalize the heuristic values to be between 0 and 1
    max_heuristic = np.max(heuristics)
    heuristics /= max_heuristic
    return heuristics
```
