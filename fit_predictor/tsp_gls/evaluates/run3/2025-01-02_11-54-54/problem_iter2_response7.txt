```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the sum of distances from each node to all other nodes
    min_distances = np.min(distance_matrix, axis=1)
    max_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the sum of distances from the origin to each node and each node to the destination
    origin_to_all = np.sum(distance_matrix, axis=0)
    all_to_destination = np.sum(distance_matrix, axis=1)
    
    # Calculate the heuristic value as the sum of min and max distances minus the current edge cost
    heuristics_matrix = origin_to_all + all_to_destination - 2 * distance_matrix
    heuristics_matrix += (min_distances + max_distances) - distance_matrix
    
    return heuristics_matrix
```
