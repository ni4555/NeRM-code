```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # Calculate the minimum distances from each node to all other nodes except itself
    min_distances = np.min(distance_matrix, axis=1)
    
    # Vectorized operation to calculate the heuristic value for each edge
    heuristics_matrix = distance_matrix - (diagonal[:, np.newaxis] + diagonal[np.newaxis, :])
    
    # Correct the diagonal values to 0 since the distance from a node to itself should not be considered
    np.fill_diagonal(heuristics_matrix, 0)
    
    return heuristics_matrix
```
