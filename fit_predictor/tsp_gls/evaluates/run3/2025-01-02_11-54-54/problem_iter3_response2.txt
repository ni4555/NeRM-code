```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # Calculate the minimum distance for each node to all other nodes
    min_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the heuristic value for each edge using vectorized operations
    heuristics_matrix = distance_matrix - diagonal[:, np.newaxis] - diagonal[np.newaxis, :]
    heuristics_matrix = heuristics_matrix - min_distances[:, np.newaxis] - min_distances[np.newaxis, :]
    
    # Replace negative heuristic values with zero since the cost cannot be negative
    heuristics_matrix[heuristics_matrix < 0] = 0
    
    return heuristics_matrix
```
