{
  "generation": 7,
  "description": "Optimizing the Traveling Salesman Problem through a hybrid evolutionary algorithm that integrates guided local search and tabu search strategies for balanced exploration and exploitation. The algorithm incorporates adaptive parameter tuning for dynamic path optimization in complex network topologies, leveraging a heuristic function that computes edge costs relative to the total graph cost and dynamically adjusts heuristics based on minimum distances per node, aiming to achieve solutions with fitness better than 10.61187021517528.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    num_nodes = distance_matrix.shape[0]\n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n    \n    # Calculate the total graph cost as a reference\n    total_graph_cost = np.sum(distance_matrix)\n    \n    # Calculate minimum distances per node\n    min_distances = np.min(distance_matrix, axis=1)\n    \n    # Compute edge costs relative to the total graph cost\n    for i in range(num_nodes):\n        for j in range(num_nodes):\n            if i != j:\n                # Dynamic adjustment of heuristics based on minimum distances\n                heuristics[i, j] = distance_matrix[i, j] / total_graph_cost + min_distances[i] / total_graph_cost\n    \n    return heuristics",
      "fitness": 10.60242549294038,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_0.txt",
      "code_file": "coevolve\\generation_7\\code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Initialize the heuristics array with zeros\n    heuristics = np.zeros_like(distance_matrix)\n    \n    # Calculate the total graph cost\n    total_cost = np.sum(distance_matrix)\n    \n    # Calculate the minimum distance for each node\n    min_distances = np.min(distance_matrix, axis=1)\n    \n    # Compute edge costs relative to the total graph cost\n    edge_costs = distance_matrix / total_cost\n    \n    # Adjust heuristics based on minimum distances per node\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            if i != j:\n                heuristics[i, j] = edge_costs[i, j] - (min_distances[i] / total_cost)\n    \n    return heuristics",
      "fitness": 10.61187021517528,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_4.txt",
      "code_file": "coevolve\\generation_7\\code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Assuming distance_matrix is a square matrix with distances between nodes\n    num_nodes = distance_matrix.shape[0]\n    # Initialize the heuristic matrix with zeros\n    heuristics_matrix = np.zeros_like(distance_matrix)\n    \n    # Compute the total graph cost\n    total_cost = np.sum(distance_matrix)\n    \n    # For each edge, compute its cost relative to the total graph cost\n    for i in range(num_nodes):\n        for j in range(i + 1, num_nodes):\n            edge_cost = distance_matrix[i, j]\n            heuristics_matrix[i, j] = edge_cost / total_cost\n            heuristics_matrix[j, i] = edge_cost / total_cost\n    \n    # Dynamically adjust heuristics based on minimum distances per node\n    for i in range(num_nodes):\n        min_distances = np.min(distance_matrix[i, :])\n        heuristics_matrix[i, :] = heuristics_matrix[i, :] * (1 - min_distances / total_cost)\n        heuristics_matrix[:, i] = heuristics_matrix[:, i] * (1 - min_distances / total_cost)\n    \n    return heuristics_matrix",
      "fitness": 10.617516362484723,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_1.txt",
      "code_file": "coevolve\\generation_7\\code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Initialize a matrix of the same shape as the distance_matrix with zeros\n    heuristics_matrix = np.zeros_like(distance_matrix)\n    \n    # Calculate the total graph cost (sum of all edges)\n    total_graph_cost = np.sum(distance_matrix)\n    \n    # Calculate the minimum distance per node (sum of distances from each node to all other nodes)\n    min_distances_per_node = np.sum(distance_matrix, axis=1)\n    \n    # Compute edge costs relative to the total graph cost\n    edge_costs = distance_matrix / total_graph_cost\n    \n    # Adjust heuristics based on minimum distances per node\n    heuristics_matrix = edge_costs - min_distances_per_node / total_graph_cost\n    \n    return heuristics_matrix",
      "fitness": 10.822793291731537,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_7\\stdout_3.txt",
      "code_file": "coevolve\\generation_7\\code_3.py"
    }
  ]
}