{
  "generation": 8,
  "description": "Enhancing the Traveling Salesman Problem resolution with a synergistic blend of guided local search and tabu search mechanisms, our algorithm adeptly navigates complex network landscapes. By integrating adaptive parameter fine-tuning, the system dynamically refines optimal paths. A sophisticated heuristic function, recalibrating edge costs against the total graph cost, ensures precision in path computation. This dynamic adjustment leverages minimum distances per node, aiming for solutions exceeding a fitness threshold of 10.60242549294038, thereby optimizing the exploration and exploitation balance for superior travel route outcomes.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Initialize a matrix of the same shape as the input distance matrix\n    heuristics_matrix = np.zeros_like(distance_matrix)\n    \n    # Calculate the diagonal of the distance matrix (distance from each node to itself)\n    diagonal = np.diag(distance_matrix)\n    \n    # For each edge in the distance matrix, calculate the heuristic value\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            if i != j:\n                # The heuristic value is the difference between the edge cost and the minimum distance\n                heuristics_matrix[i, j] = distance_matrix[i, j] - (diagonal[i] + diagonal[j])\n    \n    return heuristics_matrix",
      "fitness": 10.596621379960432,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_1.txt",
      "code_file": "coevolve\\generation_8\\code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Initialize a matrix of the same shape as the distance matrix to store heuristics\n    heuristics_matrix = np.zeros_like(distance_matrix)\n    \n    # Calculate the heuristics based on the given distance matrix\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix[i])):\n            if i != j:\n                # Recalibrate edge costs against the total graph cost\n                heuristics_matrix[i][j] = distance_matrix[i][j] / np.sum(distance_matrix[i])\n            else:\n                # No heuristic for the diagonal elements (self-loops)\n                heuristics_matrix[i][j] = 0.0\n    \n    return heuristics_matrix",
      "fitness": 10.610078466245126,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_0.txt",
      "code_file": "coevolve\\generation_8\\code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Initialize a matrix of the same shape as the distance matrix to store the heuristic values\n    heuristic_matrix = np.zeros_like(distance_matrix)\n    \n    # Calculate the total graph cost\n    total_graph_cost = np.sum(distance_matrix)\n    \n    # Iterate over each pair of nodes to calculate the heuristic value\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            if i != j:\n                # Recalibrate edge cost against the total graph cost\n                edge_cost = distance_matrix[i, j]\n                # Calculate the heuristic value\n                heuristic_value = edge_cost / total_graph_cost\n                # Assign the heuristic value to the corresponding position in the heuristic matrix\n                heuristic_matrix[i, j] = heuristic_value\n    \n    return heuristic_matrix",
      "fitness": 10.617516362484723,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_3.txt",
      "code_file": "coevolve\\generation_8\\code_3.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Initialize an array of the same shape as the distance_matrix with large values\n    heuristics = np.full(distance_matrix.shape, np.inf)\n    \n    # Calculate the diagonal elements (self-loops) as 0\n    np.fill_diagonal(heuristics, 0)\n    \n    # Recalibrate edge costs against the total graph cost\n    total_cost = np.sum(distance_matrix)\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            if i != j:\n                heuristics[i, j] = distance_matrix[i, j] / total_cost\n    \n    return heuristics",
      "fitness": 10.617516362484723,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_4.txt",
      "code_file": "coevolve\\generation_8\\code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Initialize a matrix of the same shape as the distance matrix with zeros\n    heuristics_matrix = np.zeros_like(distance_matrix)\n    \n    # Iterate over the distance matrix to calculate the heuristics\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            # Calculate the heuristic value for the edge from i to j\n            # This is a simple example, where the heuristic is the inverse of the distance\n            heuristics_matrix[i, j] = 1 / (distance_matrix[i, j] + 1e-10)  # Adding a small constant to avoid division by zero\n    \n    return heuristics_matrix",
      "fitness": 10.663056551795504,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_2.txt",
      "code_file": "coevolve\\generation_8\\code_2.py"
    }
  ]
}