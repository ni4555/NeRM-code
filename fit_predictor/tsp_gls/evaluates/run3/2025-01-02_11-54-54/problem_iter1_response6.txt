```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the total distance for each node to all other nodes
    node_to_all = np.sum(distance_matrix, axis=1)
    
    # Calculate the total distance for each node from all other nodes
    all_to_node = np.sum(distance_matrix, axis=0)
    
    # For each edge in the distance matrix, calculate the heuristic value
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # The heuristic value is the difference between the edge cost and the average distance
                heuristics_matrix[i, j] = distance_matrix[i, j] - ((node_to_all[i] + all_to_node[j]) / (distance_matrix.shape[0] - 1))
    
    return heuristics_matrix
```
