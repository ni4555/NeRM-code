```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # For each edge, calculate the heuristic value
    heuristics_matrix = distance_matrix - diagonal[:, np.newaxis] - diagonal[np.newaxis, :]
    
    # Replace negative values with 0 (since distance cannot be negative)
    heuristics_matrix[heuristics_matrix < 0] = 0
    
    # Add a large value to the diagonal elements to ensure they are not included in the heuristic
    large_value = np.inf
    np.fill_diagonal(heuristics_matrix, large_value)
    
    return heuristics_matrix
```
