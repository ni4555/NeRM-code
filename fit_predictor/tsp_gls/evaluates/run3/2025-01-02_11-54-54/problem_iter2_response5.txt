```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Precompute the sum of all distances from each node to all other nodes
    sum_distances = distance_matrix.sum(axis=1) - np.diag(distance_matrix)
    
    # For each edge in the distance matrix, calculate the heuristic value using the sum of distances
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # The heuristic value is the total distance minus twice the edge cost
                heuristics_matrix[i, j] = sum_distances[i] + sum_distances[j] - 2 * distance_matrix[i, j]
    
    return heuristics_matrix
```
