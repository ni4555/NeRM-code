```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the all-pairs shortest path matrix using the Floyd-Warshall algorithm
    warshall_matrix = np.full_like(distance_matrix, np.inf)
    np.fill_diagonal(warshall_matrix, 0)
    np.linalg.floyd_warshall(warshall_matrix, axis=0, return_predecessors=False)
    
    # For each edge in the distance matrix, calculate the heuristic value
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # The heuristic value is the difference between the edge cost and the shortest path from i to j
                heuristics_matrix[i, j] = distance_matrix[i, j] - warshall_matrix[i, j]
    
    return heuristics_matrix
```
