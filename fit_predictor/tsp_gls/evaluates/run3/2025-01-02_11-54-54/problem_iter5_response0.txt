```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # Subtract the diagonal from the distance matrix
    distance_matrix_no_diag = distance_matrix - diagonal
    
    # Vectorized operation to calculate the heuristic values
    heuristics_matrix = np.minimum.reduce(distance_matrix_no_diag, axis=0) + np.minimum.reduce(distance_matrix_no_diag, axis=1)
    
    # Adjust for self-loops (which have a distance of 0)
    heuristics_matrix += diagonal
    
    return heuristics_matrix
```
