```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # Subtract the diagonal from all elements in the distance matrix
    distance_matrix -= diagonal[:, np.newaxis]
    distance_matrix -= diagonal[np.newaxis, :]
    
    # The heuristic value is the negative of the distance since we want to minimize the cost
    heuristics_matrix = -distance_matrix
    
    # The heuristic values should be non-negative
    heuristics_matrix = np.maximum(0, heuristics_matrix)
    
    return heuristics_matrix
```
