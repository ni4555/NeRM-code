```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # Calculate the minimum distances from each node to all other nodes using vectorized operations
    min_distances = np.min(distance_matrix, axis=1)
    max_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the heuristic value for each edge using vectorized operations
    heuristics_matrix = distance_matrix - (diagonal[:, np.newaxis] + max_distances[np.newaxis, :])
    
    # Since the heuristic value should be non-negative, take the maximum of 0 and the calculated values
    heuristics_matrix = np.maximum(0, heuristics_matrix)
    
    return heuristics_matrix
```
