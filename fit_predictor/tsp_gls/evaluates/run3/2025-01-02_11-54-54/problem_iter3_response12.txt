```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # For each edge in the distance matrix, calculate the heuristic value using vectorized operations
    heuristics_matrix = distance_matrix - diagonal[:, np.newaxis] - diagonal[np.newaxis, :]
    
    # Since the diagonal elements are zero and we want the heuristic to be the cost minus the minimum distance,
    # we need to subtract the diagonal elements from the entire matrix
    heuristics_matrix -= np.diag(diagonal)
    
    return heuristics_matrix
```
