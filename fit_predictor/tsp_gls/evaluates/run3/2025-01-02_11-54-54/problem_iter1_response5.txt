```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the lower triangle of the distance matrix excluding the diagonal
    lower_triangle = np.tril(distance_matrix, k=-1)
    
    # Calculate the upper triangle of the distance matrix excluding the diagonal
    upper_triangle = np.triu(distance_matrix, k=1)
    
    # For each edge in the lower triangle, calculate the heuristic value
    for i in range(lower_triangle.shape[0]):
        for j in range(lower_triangle.shape[1]):
            heuristics_matrix[i, j] = lower_triangle[i, j] - min(distance_matrix[i, :].max(), distance_matrix[:, j].max())
    
    # For each edge in the upper triangle, calculate the heuristic value
    for i in range(upper_triangle.shape[0]):
        for j in range(upper_triangle.shape[1]):
            heuristics_matrix[i, j] = upper_triangle[i, j] - min(distance_matrix[i, :].max(), distance_matrix[:, j].max())
    
    return heuristics_matrix
```
