```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # Use numpy to compute the minimum distance from each node to all other nodes
    min_distance = np.min(distance_matrix, axis=1)
    min_distance = min_distance[:, np.newaxis]
    
    # Vectorized computation to calculate the heuristic value for all edges
    heuristics_matrix = distance_matrix - (diagonal[:, np.newaxis] + min_distance)
    
    # Set the diagonal to infinity to reflect that it's not possible to traverse from a node to itself
    np.fill_diagonal(heuristics_matrix, np.inf)
    
    return heuristics_matrix
```
