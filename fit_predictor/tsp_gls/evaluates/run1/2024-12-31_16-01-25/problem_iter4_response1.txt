```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the average distance for each edge to all other edges
    average_distances = np.mean(distance_matrix, axis=0)
    
    # Calculate the median distance for each edge
    median_distances = np.median(distance_matrix, axis=0)
    
    # Calculate the minimum distance for each edge
    min_distances = np.min(distance_matrix, axis=0)
    
    # Initialize the heuristic values using these metrics
    heuristics = 0.5 * average_distances + 0.2 * median_distances + 0.3 * min_distances
    
    # Adjust the heuristic values based on a penalty for long edges
    long_edge_penalty = 10
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j and heuristics[i, j] > distance_matrix[i, j]:
                heuristics[i, j] += long_edge_penalty * (heuristics[i, j] - distance_matrix[i, j])
    
    # Incorporate global context by considering the total distance from each node to all others
    total_distance_from_node = np.sum(distance_matrix, axis=1)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] += (total_distance_from_node[j] - distance_matrix[i, j])
    
    return heuristics
```
