```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    # Initialize the diagonal elements to a large number
    np.fill_diagonal(heuristics, np.inf)
    
    # Calculate the heuristic by considering the minimum direct distance
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                direct_distance = distance_matrix[i, j]
                heuristics[i, j] = direct_distance
    
    # Calculate the heuristic by exploiting indirect connections
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Find the node k with the minimum sum of distances to i and j
                k = np.argmin(distance_matrix[i] + distance_matrix[j])
                
                # Calculate the indirect distance
                indirect_distance = distance_matrix[i, k] + distance_matrix[k, j]
                
                # Update the heuristic with the minimum of direct and indirect distances
                heuristics[i, j] = np.min([heuristics[i, j], indirect_distance])
                
    # Penalize outliers by increasing the heuristic for very long edges
    penalty_factor = 10
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j and heuristics[i, j] > distance_matrix[i, j] * penalty_factor:
                heuristics[i, j] = distance_matrix[i, j] * penalty_factor
    
    return heuristics
```
