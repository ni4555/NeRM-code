```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Consider the cost of skipping the intermediate node and the extra distance if any
                min_path_cost = distance_matrix[i, j] + distance_matrix[j, np.argmin(distance_matrix[i, :])][np.argmin(distance_matrix[:, j])]
                heuristics[i, j] = min_path_cost - distance_matrix[i, np.argmin(distance_matrix[i, :])]
                
    return heuristics
```
