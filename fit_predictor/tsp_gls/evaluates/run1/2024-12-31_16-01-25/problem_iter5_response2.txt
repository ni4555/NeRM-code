```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Precompute the distance to the nearest node
                nearest_distance = np.min(distance_matrix[i, :])
                # Precompute the distance from the nearest node to the current node
                farthest_distance = np.max(distance_matrix[nearest_distance, :])
                # Add the distance to the farthest node, which is a part of the triangle inequality
                heuristics[i, j] = farthest_distance + distance_matrix[i, j]
                
    return heuristics
```
