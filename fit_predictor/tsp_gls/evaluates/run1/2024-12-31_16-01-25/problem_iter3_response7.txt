```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the number of nodes
    num_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with zeros
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the median distance from each node to all other nodes
    for i in range(num_nodes):
        median_distance = np.median(distance_matrix[i, :num_nodes])
        heuristics[i] = median_distance
    
    # Calculate the center of mass of the distances from each node
    center_of_mass = np.sum(distance_matrix) / num_nodes**2
    heuristics -= center_of_mass
    
    # Adjust for proximity: smaller distances have higher prior
    heuristics = np.where(distance_matrix < center_of_mass, heuristics, -np.inf)
    
    return heuristics
```
