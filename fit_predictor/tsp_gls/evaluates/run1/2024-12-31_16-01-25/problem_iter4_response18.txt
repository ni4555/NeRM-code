```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the number of nodes
    num_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with zeros
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the average distance for each edge using the mean of the respective node rows and columns
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                average_distance = np.mean(distance_matrix[i, :]) + np.mean(distance_matrix[:, j])
                heuristics[i, j] = average_distance
                
    # Incorporate a penalty for edges that are longer than the average global edge length
    global_average_edge_length = np.mean(np.mean(distance_matrix))
    penalty_factor = 10
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                if distance_matrix[i, j] > global_average_edge_length:
                    heuristics[i, j] += penalty_factor * (distance_matrix[i, j] - global_average_edge_length)
    
    # Adjust the heuristic to consider the shortest cycle avoiding long edges
    shortest_cycle = np.inf
    for start in range(num_nodes):
        for end in range(start + 1, num_nodes):
            for i in range(end + 1, num_nodes):
                for j in range(i + 1, num_nodes):
                    cycle_distance = distance_matrix[start, end] + distance_matrix[end, i] + distance_matrix[i, j] + distance_matrix[j, start]
                    if cycle_distance < shortest_cycle:
                        shortest_cycle = cycle_distance
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] = np.minimum(heuristics[i, j], shortest_cycle)
    
    # Additional improvement: penalize the longest edge
    longest_edge = np.max(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] += (longest_edge - distance_matrix[i, j]) / (longest_edge - shortest_cycle)
    
    return heuristics
```
