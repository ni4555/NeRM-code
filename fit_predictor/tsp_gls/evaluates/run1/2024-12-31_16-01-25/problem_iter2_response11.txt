```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    # Compute the Chebyshev distance for each edge only once, considering symmetry
    for i in range(num_nodes):
        for j in range(i, num_nodes):
            if i != j:
                # Compute Chebyshev distance to all other nodes and take the minimum
                heuristics[i, j] = np.min(np.maximum(distance_matrix[i, j] - distance_matrix[i], distance_matrix[i, j] - distance_matrix[j]))
                heuristics[j, i] = heuristics[i, j]  # Reflect the value considering symmetry
    
    return heuristics
```
