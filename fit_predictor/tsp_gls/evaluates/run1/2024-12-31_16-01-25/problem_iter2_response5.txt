```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    # Initialize the diagonal elements to a large number
    np.fill_diagonal(heuristics, np.inf)
    
    # Calculate the heuristic by considering the minimum direct distance and the minimum indirect distance
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the direct distance
                direct_distance = distance_matrix[i, j]
                
                # Calculate the indirect distance by considering the minimum distance to a third node
                indirect_distance = np.min(distance_matrix[i] + distance_matrix[j] + distance_matrix[:, j])
                
                # Assign the minimum of the direct and indirect distances as the heuristic
                heuristics[i, j] = np.min([direct_distance, indirect_distance])
                
    return heuristics
```
