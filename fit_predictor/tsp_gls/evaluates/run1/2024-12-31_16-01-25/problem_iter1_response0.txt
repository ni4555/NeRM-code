```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the number of nodes
    num_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with zeros
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the average distance for each edge to all other edges
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                average_distance = np.mean(distance_matrix[i] + distance_matrix[j])
                heuristics[i, j] = average_distance
    
    # Adjust the heuristic values based on a penalty for long edges
    penalty_factor = 10
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                if heuristics[i, j] > np.median(distance_matrix):
                    heuristics[i, j] += penalty_factor * (heuristics[i, j] - np.median(distance_matrix))
    
    return heuristics
```
