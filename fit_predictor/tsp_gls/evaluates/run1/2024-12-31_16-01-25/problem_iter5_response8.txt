```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Compute the shortest path from i to any node, excluding j
                min_path_from_i = np.min(distance_matrix[i, :np.array([i]).astype(int)], axis=0)
                # Compute the shortest path from j to any node, excluding i
                min_path_from_j = np.min(distance_matrix[j, :np.array([j]).astype(int)], axis=0)
                # Compute the heuristics value by summing the minimum paths and the direct distance
                heuristics[i, j] = min_path_from_i[j] + min_path_from_j[i] + distance_matrix[i, j]
                
    return heuristics
```
