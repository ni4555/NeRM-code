```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    # Pre-compute the minimum distances between all pairs of nodes
    min_distances = np.min(distance_matrix, axis=1)
    
    # For each edge, calculate the heuristic as the minimum of the direct distance and the sum of the minimum distances from the endpoints to the nearest node not in the edge
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # If i and j are directly connected, use the direct distance
                if distance_matrix[i, j] < np.inf:
                    heuristics[i, j] = distance_matrix[i, j]
                else:
                    # Otherwise, use the sum of the minimum distances
                    heuristics[i, j] = min_distances[i] + min_distances[j]
                    
    return heuristics
```
