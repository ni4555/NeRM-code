```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Consider multiple paths: the minimum direct distance,
                # the minimum distance via one intermediate node,
                # and the minimum distance via two intermediate nodes.
                direct_distance = distance_matrix[i, j]
                via_one_node = np.min(np.sum(distance_matrix[i] + distance_matrix[:, j], axis=1))
                via_two_nodes = np.min(np.sum(distance_matrix[i] + distance_matrix[:, :] + distance_matrix[:, j], axis=1))
                heuristics[i, j] = np.min([direct_distance, via_one_node, via_two_nodes])
                
    return heuristics
```
