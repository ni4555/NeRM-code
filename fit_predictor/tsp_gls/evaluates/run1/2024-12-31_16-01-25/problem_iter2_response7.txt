```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the heuristic based on the Manhattan distance, which is
                # often a good approximation for grid-like maps
                heuristics[i, j] = np.sum(np.abs(distance_matrix[i] - distance_matrix[j]))
                
    return heuristics
```
