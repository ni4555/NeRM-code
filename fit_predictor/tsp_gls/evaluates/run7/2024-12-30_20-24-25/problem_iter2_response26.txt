```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate a precision heuristic matrix using exponential decay
    exp_decay_factor = np.exp(-distance_matrix / np.max(distance_matrix))
    
    # Apply a sigmoid function to map the heuristic matrix to the range [0, 1]
    sigmoid_transformed = 1 / (1 + np.exp(-exp_decay_factor))
    
    # Adjust the heuristic matrix with a precision factor to amplify the effect of short distances
    precision_factor = np.random.uniform(0.1, 0.9)
    adjusted_heuristic_matrix = sigmoid_transformed * precision_factor
    
    # Introduce a local search guidance mechanism by penalizing edges that are not in the current best solution
    best_solution = np.argmin(np.sum(distance_matrix, axis=1))
    penalty_factor = 0.1
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j and (i, j) not in [(best_solution, j), (j, best_solution)]:
                adjusted_heuristic_matrix[i, j] += penalty_factor
    
    # Normalize the adjusted heuristic matrix to ensure that it's of the same shape as the input
    max_value = np.max(adjusted_heuristic_matrix)
    min_value = np.min(adjusted_heuristic_matrix)
    normalized_heuristic_matrix = (adjusted_heuristic_matrix - min_value) / (max_value - min_value)
    
    return normalized_heuristic_matrix
```
