```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Define the precision heuristic matrix using the Chebyshev distance
    precision_matrix = np.maximum(distance_matrix - np.min(distance_matrix, axis=0) - 
                                 np.min(distance_matrix, axis=1, keepdims=True), 0)
    
    # Initialize the heuristic matrix with a precision value for each edge
    heuristic_matrix = precision_matrix
    
    # Add a perturbation to create diversity in the heuristic values
    perturbation = np.random.normal(0, np.mean(precision_matrix) * 0.05, heuristic_matrix.shape)
    heuristic_matrix += perturbation
    
    # Normalize the heuristic matrix to ensure non-negative values
    heuristic_matrix = np.clip(heuristic_matrix, 0, np.inf)
    
    # Adjust the heuristic matrix based on the number of cities
    num_cities = distance_matrix.shape[0]
    adjustment_factor = num_cities * (1 / (num_cities - 1))
    heuristic_matrix *= adjustment_factor
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    # Further refine the heuristic matrix by considering the global distance to the centroid
    centroid = np.mean(distance_matrix, axis=1, keepdims=True)
    global_distance = np.linalg.norm(distance_matrix - centroid, axis=1, keepdims=True)
    heuristic_matrix += global_distance * 0.1
    
    # Introduce a diversity factor to prevent premature convergence
    diversity_factor = np.random.rand(*heuristic_matrix.shape) * 0.01
    heuristic_matrix += diversity_factor
    
    # Cap the values to ensure the heuristic does not suggest including very long edges
    capped_heuristic_matrix = np.clip(heuristic_matrix, 0, 1)
    
    return capped_heuristic_matrix
```
