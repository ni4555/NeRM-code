```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Define the precision heuristic matrix using the Euclidean distance
    heuristic_matrix = np.sqrt(np.sum((distance_matrix - 
                                       np.min(distance_matrix, axis=0) - 
                                       np.min(distance_matrix, axis=1, keepdims=True))**2, axis=2))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Introduce variability and perturbation to enhance exploration
    perturbation = np.random.normal(0, np.mean(heuristic_matrix) * 0.01, heuristic_matrix.shape)
    heuristic_matrix += perturbation
    
    # Normalize to ensure consistency and avoid biases
    heuristic_matrix = np.clip(heuristic_matrix, 0, np.inf)
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    # Adaptively adjust heuristics based on the problem context
    num_cities = distance_matrix.shape[0]
    adjustment_factor = num_cities * (1 / (num_cities - 1))
    heuristic_matrix *= adjustment_factor
    
    # Further refine the heuristic matrix by considering the global distance to the centroid
    centroid = np.mean(distance_matrix, axis=1, keepdims=True)
    global_distance = np.linalg.norm(distance_matrix - centroid, axis=1, keepdims=True)
    heuristic_matrix += global_distance * 0.1
    
    # Apply a threshold to the heuristic matrix to encourage short distances
    threshold = 1.1
    heuristic_matrix = np.where(heuristic_matrix > threshold * np.mean(heuristic_matrix), 
                                threshold * np.mean(heuristic_matrix), 
                                heuristic_matrix)
    
    return heuristic_matrix
```
