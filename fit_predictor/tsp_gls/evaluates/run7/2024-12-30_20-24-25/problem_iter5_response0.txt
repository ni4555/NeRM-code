```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Define the precision heuristic matrix using the Euclidean distance
    heuristic_matrix = np.sqrt(np.sum((distance_matrix - np.min(distance_matrix, axis=0) - 
                                       np.min(distance_matrix, axis=1, keepdims=True))**2, axis=2))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    heuristic_sum = np.sum(heuristic_matrix, axis=0, keepdims=True)
    precision_matrix = np.where(heuristic_sum == 0, 1, heuristic_matrix / heuristic_sum)
    
    # Introduce variability and perturbation to enhance exploration
    perturbation_factor = np.mean(precision_matrix) * 0.02
    perturbation = np.random.normal(0, perturbation_factor, precision_matrix.shape)
    precision_matrix += perturbation
    
    # Introduce penalties for the longest and shortest edges in each row to encourage diversity
    penalty_longest = np.max(distance_matrix, axis=1, keepdims=True)
    penalty_shortest = np.min(distance_matrix, axis=1, keepdims=True)
    precision_matrix = np.where(distance_matrix == penalty_longest, np.inf, precision_matrix)
    precision_matrix = np.where(distance_matrix == penalty_shortest, 0, precision_matrix)
    
    # Introduce an adaptive scaling factor to balance the precision matrix
    scaling_factor = np.mean(precision_matrix) * 0.9
    precision_matrix = np.clip(precision_matrix * scaling_factor, 0, np.inf)
    
    # Adjust the precision matrix based on the local insights of the problem
    local_insight_factor = np.sum(precision_matrix, axis=1, keepdims=True) / num_edges
    precision_matrix *= local_insight_factor
    
    return precision_matrix
```
