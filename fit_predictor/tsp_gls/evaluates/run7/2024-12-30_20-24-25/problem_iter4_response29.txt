```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Introduce a targeted penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    # Incorporate a smoothness term to the heuristic matrix
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    heuristic_matrix = heuristic_matrix * smoothness_factor
    
    # Diverse perturbations by adding noise to the heuristic matrix with fine-grained control
    noise = np.random.normal(0, 0.005, heuristic_matrix.shape)
    heuristic_matrix += noise
    
    # Dynamic mutation strategies: Adjust the mutation based on the problem scale
    mutation_factor = 0.1 * (np.max(distance_matrix) / np.mean(distance_matrix))
    mutation = mutation_factor * np.random.normal(0, mutation_factor, heuristic_matrix.shape)
    heuristic_matrix += mutation
    
    # Non-linear transformations to favor short paths, avoiding extreme values
    heuristic_matrix = np.log(1 + heuristic_matrix)
    
    # Ensure that the transformed matrix has a valid shape and values
    heuristic_matrix = np.clip(heuristic_matrix, 0, None)
    
    return heuristic_matrix
```
