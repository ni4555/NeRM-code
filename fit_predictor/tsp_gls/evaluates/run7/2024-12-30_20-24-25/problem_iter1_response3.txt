```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance between all pairs of nodes
    manhattan_distances = np.abs(np.diff(distance_matrix, axis=0, prepend=0, append=0))
    manhattan_distances = np.abs(np.diff(distance_matrix, axis=1, prepend=0, append=0))

    # Calculate the Chebyshev distance between all pairs of nodes
    chebyshev_distances = np.maximum.reduce(np.abs(np.diff(distance_matrix, axis=0, prepend=0, append=0)),
                                            axis=0)
    chebyshev_distances = np.maximum.reduce(np.abs(np.diff(distance_matrix, axis=1, prepend=0, append=0)),
                                            axis=1)

    # Combine the heuristic matrix with a precision factor
    precision_factor = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])
    precision_factor = precision_factor / np.sum(precision_factor, axis=0, keepdims=True)

    # Create a heuristic matrix by combining the Manhattan and Chebyshev distances
    heuristic_matrix = (0.5 * manhattan_distances) + (0.5 * chebyshev_distances)

    # Adjust the heuristic matrix based on the precision factor
    adjusted_heuristic_matrix = heuristic_matrix * precision_factor

    # Introduce a penalty for long edges
    for i in range(adjusted_heuristic_matrix.shape[0]):
        for j in range(adjusted_heuristic_matrix.shape[1]):
            if adjusted_heuristic_matrix[i, j] > 10:
                adjusted_heuristic_matrix[i, j] = adjusted_heuristic_matrix[i, j] * 1.2

    return adjusted_heuristic_matrix
```
