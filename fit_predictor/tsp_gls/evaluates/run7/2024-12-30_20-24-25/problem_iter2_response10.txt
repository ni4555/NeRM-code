```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Define the precision heuristic matrix based on the distance matrix
    precision_matrix = np.sqrt(np.abs(distance_matrix))
    
    # Normalize the precision matrix to ensure non-negative values
    precision_matrix = np.clip(precision_matrix, 0, np.inf)
    
    # Introduce variability to enhance exploration
    perturbation = np.random.normal(0, np.sqrt(precision_matrix.mean()), precision_matrix.shape)
    heuristic_matrix = precision_matrix + perturbation
    
    # Adjust the heuristic matrix based on the number of cities to match problem scale
    num_cities = distance_matrix.shape[0]
    adjustment_factor = num_cities * (1 / (num_cities - 1))
    heuristic_matrix *= adjustment_factor
    
    # Cap the values to prevent overestimation of edge importance
    capped_heuristic_matrix = np.clip(heuristic_matrix, 0, 1)
    
    return capped_heuristic_matrix
```
