```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the Euclidean distance between all pairs of points
    n = distance_matrix.shape[0]
    Euclidean_dist = np.sqrt(np.add.outer(np.square(range(n)), np.square(range(n))))
    
    # Normalize the Euclidean distance by the maximum distance to create a heuristic matrix
    heuristic_matrix = Euclidean_dist / Euclidean_dist.max()
    
    # Calculate the minimum distance from each point to the rest to identify nearest neighbors
    min_dist_to_all = np.min(distance_matrix, axis=1)
    
    # Adjust the heuristic matrix by considering nearest neighbors
    adjusted_heuristic_matrix = heuristic_matrix + np.subtract(1, min_dist_to_all.reshape(n, 1))
    
    # Introduce a precision heuristic to emphasize shorter edges
    precision_factor = np.exp(-0.5 * (distance_matrix - np.mean(distance_matrix))**2)
    
    # Combine the heuristic matrix with the precision heuristic
    refined_heuristic_matrix = adjusted_heuristic_matrix * precision_factor
    
    # Introduce a random noise to enhance diversity
    noise_factor = np.random.rand(*refined_heuristic_matrix.shape) * 0.1
    noisy_heuristic_matrix = refined_heuristic_matrix + noise_factor
    
    # Apply domain-specific normalization to prevent scale bias
    max_value = np.max(distance_matrix)
    min_value = np.min(distance_matrix)
    normalized_matrix = (noisy_heuristic_matrix - min_value) / (max_value - min_value)
    
    # Introduce a smoothness term to encourage visiting all points
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    smoothness_matrix = np.sum(smoothness_factor, axis=1, keepdims=True)
    normalized_matrix = normalized_matrix * smoothness_matrix
    
    # Cap the values to ensure the heuristic does not suggest including very long edges
    capped_heuristic_matrix = np.clip(normalized_matrix, 0, 1)
    
    return capped_heuristic_matrix
```
