```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Chebyshev distance between all pairs of points
    n = distance_matrix.shape[0]
    chebyshev_dist = np.maximum.reduce.outer(distance_matrix, distance_matrix)
    
    # Initialize the heuristic matrix with Chebyshev distance
    heuristic_matrix = chebyshev_dist
    
    # Introduce a perturbation to create diversity in the heuristic values
    perturbation = np.random.normal(0, 0.01, heuristic_matrix.shape)
    heuristic_matrix += perturbation
    
    # Normalize the heuristic matrix to ensure non-negative values
    heuristic_matrix = np.clip(heuristic_matrix, 0, np.inf)
    
    # Adjust the heuristic matrix based on the maximum distance in the matrix
    max_distance = np.max(distance_matrix)
    adjustment_factor = max_distance * (1 / (max_distance - 1))
    heuristic_matrix *= adjustment_factor
    
    return heuristic_matrix
```
