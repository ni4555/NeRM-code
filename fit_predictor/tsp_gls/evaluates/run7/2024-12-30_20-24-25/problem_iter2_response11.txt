```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    precision_matrix = np.where(distance_matrix == penalty, np.inf, precision_matrix)
    
    # Apply a non-linear adjustment to the precision matrix to favor shorter paths
    non_linear_adjustment = np.exp(-0.5 * (precision_matrix - np.mean(precision_matrix))**2)
    
    # Adjust the heuristic matrix with the non-linear adjustment
    adjusted_heuristic_matrix = non_linear_adjustment
    
    return adjusted_heuristic_matrix
```
