```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Use the precision heuristic matrix with a non-linear transformation
    heuristic_matrix = np.exp(-np.sum(distance_matrix, axis=1)) + np.exp(-np.sum(distance_matrix, axis=0))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    heuristic_sum = np.sum(heuristic_matrix, axis=0, keepdims=True)
    precision_matrix = np.where(heuristic_sum == 0, 1, heuristic_matrix / heuristic_sum)
    
    # Introduce a dynamic mutation strategy based on the number of iterations
    mutation_factor = np.random.rand() * 0.01
    mutation = np.random.normal(mutation_factor, 0.001, precision_matrix.shape)
    precision_matrix += mutation
    
    # Introduce penalties for edges that are too long and perturbations for variability
    long_edge_penalty = np.maximum(distance_matrix - np.median(distance_matrix, axis=0), 0)
    long_edge_penalty = np.maximum(long_edge_penalty - np.median(long_edge_penalty), 0)
    precision_matrix += long_edge_penalty
    
    perturbation = np.random.normal(0, 0.005, precision_matrix.shape)
    precision_matrix += perturbation
    
    # Introduce a local insight by adjusting the precision matrix based on a secondary heuristic
    secondary_heuristic = np.exp(-np.sqrt(np.sum((distance_matrix - np.mean(distance_matrix))**2, axis=1)))
    secondary_heuristic = np.where(secondary_heuristic == 0, 1, secondary_heuristic)
    precision_matrix *= secondary_heuristic
    
    # Ensure the precision matrix remains positive and within a reasonable range
    precision_matrix = np.clip(precision_matrix, 0.01, 10)
    
    return precision_matrix
```
