```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Define the precision heuristic matrix using the Euclidean distance
    heuristic_matrix = np.sqrt(np.sum((distance_matrix - np.min(distance_matrix, axis=0) - 
                                       np.min(distance_matrix, axis=1, keepdims=True))**2, axis=2))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    heuristic_sum = np.sum(heuristic_matrix, axis=0, keepdims=True)
    precision_matrix = np.where(heuristic_sum == 0, 1, heuristic_matrix / heuristic_sum)
    
    # Apply a non-linear transformation to enhance precision
    precision_matrix = np.log(1 + precision_matrix)
    
    # Introduce a penalty for the longest edge in each row to avoid it in the solution
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    precision_matrix = np.where(distance_matrix == penalty, np.inf, precision_matrix)
    
    # Add a perturbation to encourage exploration
    perturbation_factor = np.mean(precision_matrix) * 0.01
    perturbation = np.random.normal(0, perturbation_factor, precision_matrix.shape)
    precision_matrix += perturbation
    
    # Refine the precision matrix based on local insights, balancing exploration and exploitation
    local_insight_factor = 1 / (1 + np.sqrt(num_edges))
    precision_matrix *= (1 - local_insight_factor) + local_insight_factor * np.exp(-precision_matrix)
    
    # Ensure that the precision matrix remains positive
    precision_matrix = np.clip(precision_matrix, 0, np.inf)
    
    # Adjust the precision matrix according to the scale of the problem
    num_cities = distance_matrix.shape[0]
    adjustment_factor = num_cities * (1 / (num_cities - 1))
    precision_matrix *= adjustment_factor
    
    return precision_matrix
```
