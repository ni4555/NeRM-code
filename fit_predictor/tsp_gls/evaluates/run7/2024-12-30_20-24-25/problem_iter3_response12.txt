```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    # Incorporate a smoothness term to the heuristic matrix
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    heuristic_matrix = heuristic_matrix * smoothness_factor
    
    # Add a perturbation step with diverse changes
    perturbation = np.random.rand(*heuristic_matrix.shape)
    perturbation = (perturbation - 0.5) * 0.1  # Scale perturbation to a small effect
    heuristic_matrix += perturbation
    
    # Adjust based on context by reducing penalties on the shortest path
    min_path = np.min(distance_matrix, axis=1)
    reduction_factor = np.exp(-0.5 * min_path)
    heuristic_matrix = np.where(distance_matrix == min_path, heuristic_matrix * reduction_factor, heuristic_matrix)
    
    # Use non-linear transformations to favor short paths
    heuristic_matrix = np.log1p(heuristic_matrix)
    
    return heuristic_matrix
```
