```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate a precision heuristic matrix using exponential decay
    base = np.exp(-distance_matrix)
    
    # Amplify the effect of shorter distances and dampen longer distances
    amplified_base = base * (1 + np.random.normal(0, 0.1, base.shape))
    
    # Apply a non-linear transformation to the amplified base
    transformed = 1 / (1 + np.exp(-amplified_base))
    
    # Introduce a dynamic adjustment factor based on the minimum and average distance
    min_distance = np.min(distance_matrix)
    average_distance = np.mean(distance_matrix)
    dynamic_factor = average_distance / (min_distance + average_distance)
    
    # Apply the dynamic factor to the transformed heuristic matrix
    adjusted_heuristic_matrix = transformed * dynamic_factor
    
    # Normalize the adjusted heuristic matrix
    max_value = np.max(adjusted_heuristic_matrix)
    min_value = np.min(adjusted_heuristic_matrix)
    normalized_heuristic_matrix = (adjusted_heuristic_matrix - min_value) / (max_value - min_value)
    
    return normalized_heuristic_matrix
```
