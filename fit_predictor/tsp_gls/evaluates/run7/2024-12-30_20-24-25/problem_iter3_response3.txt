```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, max_iterations: int = 100, perturbation_factor: float = 0.1) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Initialize the precision matrix with Manhattan distance heuristic
    precision_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the precision matrix to create a precision heuristic matrix
    precision_matrix /= np.sum(precision_matrix, axis=0, keepdims=True)
    
    # Mutate the precision matrix by adding random perturbations
    for _ in range(max_iterations):
        perturbation = np.random.normal(0, perturbation_factor, size=precision_matrix.shape)
        precision_matrix += perturbation
    
    # Adjust the precision matrix to prevent scale bias by incorporating diverse perturbations
    precision_matrix /= np.linalg.norm(precision_matrix, axis=0, keepdims=True)
    
    # Introduce a smoothness term to the precision matrix
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    precision_matrix *= smoothness_factor
    
    # Apply a penalty for the longest edge in each row
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    precision_matrix = np.where(distance_matrix == penalty, np.inf, precision_matrix)
    
    return precision_matrix
```
