```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Define the precision heuristic matrix using the Manhattan distance
    precision_matrix = np.sum(np.abs(distance_matrix), axis=0) - np.sum(np.abs(distance_matrix), axis=1)
    
    # Add a targeted perturbation to enhance local diversity
    perturbation = np.random.normal(0, np.mean(precision_matrix) * 0.05, precision_matrix.shape)
    precision_matrix += perturbation
    
    # Normalize the precision matrix to ensure non-negative values
    precision_matrix = np.clip(precision_matrix, 0, np.inf)
    
    # Apply a non-linear transformation to the precision matrix to enhance the effect of shorter distances
    heuristic_matrix = np.exp(-np.square(precision_matrix) / 2)
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    # Enhance local structure by increasing the influence of nearby edges
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                local_neighbors = np.abs(distance_matrix - distance_matrix[i, j])
                local_influence = np.exp(-np.sum(local_neighbors**2, axis=1) / 2)
                heuristic_matrix[i, j] *= (1 + local_influence[i])
    
    return heuristic_matrix
```
