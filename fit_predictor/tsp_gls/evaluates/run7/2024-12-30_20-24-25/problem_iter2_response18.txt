```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the Chebyshev distance as an estimate of edge length
    max_distance = np.max(distance_matrix)
    # Create a heuristic matrix where each cell represents a relative distance
    # Normalize by the maximum distance to keep values between 0 and 1
    heuristic_matrix = distance_matrix / max_distance
    
    # Emphasize local minima by using a Gaussian-like function
    mean_distance = np.mean(distance_matrix)
    precision_factor = np.exp(-0.5 * ((distance_matrix - mean_distance)**2) / (2 * (max_distance / 5)**2))
    
    # Combine the heuristic matrix with the precision factor
    adjusted_heuristic_matrix = heuristic_matrix * precision_factor
    
    # Normalize the adjusted heuristic matrix to ensure that it's of the same shape as the input
    max_value = np.max(adjusted_heuristic_matrix)
    min_value = np.min(adjusted_heuristic_matrix)
    normalized_heuristic_matrix = (adjusted_heuristic_matrix - min_value) / (max_value - min_value)
    
    return normalized_heuristic_matrix
```
