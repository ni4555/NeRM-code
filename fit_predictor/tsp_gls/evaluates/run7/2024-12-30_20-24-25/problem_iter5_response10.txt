```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Define the precision heuristic matrix using a combination of Manhattan and Chebyshev distances
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True)) + \
                       np.max(distance_matrix, axis=0, keepdims=True) - distance_matrix
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    heuristic_sum = np.sum(heuristic_matrix, axis=0, keepdims=True)
    precision_matrix = np.where(heuristic_sum == 0, 1, heuristic_matrix / heuristic_sum)
    
    # Apply adaptive mutation strategies based on the current fitness level
    current_fitness = np.sum(precision_matrix) / num_edges
    mutation_factor = current_fitness / 10.617516362484723
    mutation_noise = np.random.normal(0, mutation_factor, precision_matrix.shape)
    precision_matrix += mutation_noise
    
    # Introduce perturbations that vary in intensity based on the distance
    perturbation_intensity = distance_matrix / np.max(distance_matrix)
    perturbation_factor = np.mean(precision_matrix) * 0.02 * perturbation_intensity
    perturbation = np.random.normal(0, perturbation_factor, precision_matrix.shape)
    precision_matrix += perturbation
    
    # Introduce a penalty for outliers by identifying the most penalized edge and increasing its cost
    penalties = np.argmin(precision_matrix)
    precision_matrix[penalties] *= 2
    
    # Adjust the precision matrix to balance exploration and exploitation
    exploration_factor = np.random.uniform(0.1, 0.5)
    precision_matrix *= (1 + exploration_factor * np.random.normal(0, 1, precision_matrix.shape))
    
    # Ensure the precision matrix remains well-behaved
    precision_matrix = np.clip(precision_matrix, 0, np.inf)
    
    return precision_matrix
```
