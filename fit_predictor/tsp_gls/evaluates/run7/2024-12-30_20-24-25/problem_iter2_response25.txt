```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix to the range [0, 1]
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Apply a precision heuristic to emphasize short distances
    precision_factor = np.exp(-0.5 * (normalized_matrix - 0.5)**2)
    
    # Combine the normalized matrix with the precision heuristic
    combined_matrix = normalized_matrix * precision_factor
    
    # Emphasize the local neighborhood by considering the Chebyshev distance
    local_neighborhood = np.maximum(combined_matrix[:-1, 1:], combined_matrix[1:, :-1])
    
    # Apply an adaptive weighting based on the average and minimum distances
    average_distance = np.mean(distance_matrix)
    weighted_neighborhood = local_neighborhood * (average_distance / (np.mean(local_neighborhood) + 1e-10))
    
    return weighted_neighborhood
```
