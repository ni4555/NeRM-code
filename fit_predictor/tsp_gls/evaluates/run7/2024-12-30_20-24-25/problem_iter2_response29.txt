```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the Euclidean distance between all pairs of points
    n = distance_matrix.shape[0]
    Euclidean_dist = np.sqrt(np.add.outer(distance_matrix**2, distance_matrix**2))
    
    # Normalize Euclidean distance by the maximum distance to create a heuristic matrix
    heuristic_matrix = Euclidean_dist / Euclidean_dist.max()
    
    # Incorporate local information by considering the nearest neighbors
    # Calculate the minimum distance between each point and its nearest neighbor
    min_dist_to_nearest_neighbor = np.min(distance_matrix, axis=1)
    # Adjust the heuristic matrix to emphasize edges closer to the minimum distance
    local_adjustment = 1 - np.exp(-min_dist_to_nearest_neighbor / (np.std(distance_matrix) * 2))
    adjusted_heuristic_matrix = heuristic_matrix * local_adjustment
    
    # Refine with a precision heuristic to emphasize short edges
    precision_factor = np.exp(-0.5 * (distance_matrix - np.mean(distance_matrix))**2)
    # Combine the heuristic matrix with the precision heuristic
    final_heuristic_matrix = adjusted_heuristic_matrix * precision_factor
    
    return final_heuristic_matrix
```
