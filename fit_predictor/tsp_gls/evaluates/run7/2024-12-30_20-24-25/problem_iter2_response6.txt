```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Invert the precision matrix to create a heuristic matrix that favors shorter edges
    heuristic_matrix = 1 / (1 + precision_matrix)
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty_threshold = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty_threshold, np.inf, heuristic_matrix)
    
    # Apply a logarithmic transformation to penalize longer distances
    log_transformed = np.log1p(heuristic_matrix)
    
    # Normalize the log-transformed heuristic matrix to ensure that it's of the same shape as the input
    max_value = np.max(log_transformed)
    min_value = np.min(log_transformed)
    normalized_heuristic_matrix = (log_transformed - min_value) / (max_value - min_value)
    
    # Dynamically adjust the weights based on the minimum and average distances
    min_distance = np.min(distance_matrix)
    average_distance = np.mean(distance_matrix)
    dynamic_weight = average_distance / (min_distance + average_distance)
    weighted_heuristic_matrix = normalized_heuristic_matrix * dynamic_weight
    
    return weighted_heuristic_matrix
```
