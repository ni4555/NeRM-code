```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the Chebyshev distance as an estimate of edge length
    max_distance = np.max(distance_matrix)
    
    # Create a heuristic matrix where each cell represents a relative distance
    # Normalize by the maximum distance to keep values between 0 and 1
    heuristic_matrix = distance_matrix / max_distance
    
    # Adjust the heuristic matrix with a precision heuristic to emphasize short edges
    precision_factor = np.exp(-0.5 * (distance_matrix - np.mean(distance_matrix))**2)
    
    # Incorporate domain-specific distance metrics by adjusting the heuristic matrix
    # For example, using a Manhattan distance as a complementary metric
    manhattan_factor = np.sum(np.abs(np.diff(distance_matrix, axis=0)), axis=1)
    adjusted_manhattan_factor = manhattan_factor / np.sum(manhattan_factor)
    
    # Combine the heuristic matrix with the precision heuristic and the Manhattan distance factor
    combined_heuristic_matrix = heuristic_matrix * precision_factor * adjusted_manhattan_factor
    
    return combined_heuristic_matrix
```
