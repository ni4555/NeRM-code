```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the Euclidean distance between all pairs of points
    n = distance_matrix.shape[0]
    euclidean_dist = np.sqrt(np.add.outer(distance_matrix**2, distance_matrix**2))
    
    # Calculate the mean distance to use as a reference for relative distances
    mean_dist = np.mean(euclidean_dist)
    
    # Create a heuristic matrix based on the Euclidean distance
    # Normalize by the mean distance to create a relative scale
    heuristic_matrix = euclidean_dist / mean_dist
    
    # Incorporate a local structure by considering the minimum distance to a neighboring city
    min_dist_to_neighbors = np.min(distance_matrix, axis=1)
    local_structure_factor = np.exp(-1 / (min_dist_to_neighbors**2))
    
    # Adjust the heuristic matrix with the local structure factor
    adjusted_heuristic_matrix = heuristic_matrix * local_structure_factor
    
    # Weight edge relevance by considering the standard deviation of the distances
    std_dist = np.std(euclidean_dist)
    relevance_factor = np.exp(-0.5 * ((euclidean_dist - mean_dist) / std_dist)**2)
    
    # Combine the heuristic matrix with the relevance factor
    combined_heuristic_matrix = adjusted_heuristic_matrix * relevance_factor
    
    return combined_heuristic_matrix
```
