```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Invert the precision matrix to create a heuristic matrix that favors shorter edges
    heuristic_matrix = 1 / precision_matrix
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    return heuristic_matrix
```
