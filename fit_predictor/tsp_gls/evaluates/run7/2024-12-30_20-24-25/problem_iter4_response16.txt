```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Chebyshev distance as an estimate of edge length
    max_distance = np.max(distance_matrix)
    # Create a heuristic matrix where each cell represents a relative distance
    # Normalize by the maximum distance to keep values between 0 and 1
    heuristic_matrix = distance_matrix / max_distance
    
    # Calculate the central tendency (mean) of the distances
    mean_distance = np.mean(distance_matrix)
    
    # Adjust the heuristic matrix with a precision heuristic to emphasize short edges
    precision_factor = np.exp(-0.5 * (distance_matrix - mean_distance)**2)
    # Combine the heuristic matrix with the precision heuristic
    adjusted_heuristic_matrix = heuristic_matrix * precision_factor
    
    # Amplify the effect of shorter distances by applying a precision factor
    precision_factor = np.exp(-np.mean(distance_matrix) * (distance_matrix - mean_distance)**2)
    amplified_adjusted_heuristic_matrix = adjusted_heuristic_matrix * precision_factor
    
    # Incorporate smoothness by penalizing large changes in distance estimates
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - mean_distance))
    smooth_heuristic_matrix = amplified_adjusted_heuristic_matrix * smoothness_factor
    
    return smooth_heuristic_matrix
```
