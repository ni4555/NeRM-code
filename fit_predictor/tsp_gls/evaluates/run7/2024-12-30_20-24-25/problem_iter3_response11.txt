```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Introduce penalties for the longest edges and for high variance in heuristic values
    for i in range(distance_matrix.shape[0]):
        penalty = np.max(distance_matrix[i, :])
        heuristic_matrix[i, distance_matrix[i, :] == penalty] = np.inf
    for j in range(distance_matrix.shape[1]):
        penalty = np.max(distance_matrix[:, j])
        heuristic_matrix[distance_matrix[:, j] == penalty, j] = np.inf
    
    # Introduce a smoothness term to the heuristic matrix
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    heuristic_matrix = heuristic_matrix * smoothness_factor
    
    # Apply domain-specific perturbations
    perturbation = np.random.uniform(0, 0.01, distance_matrix.shape)
    heuristic_matrix = np.clip(heuristic_matrix + perturbation, 0, 1)
    
    # Adjust the heuristic matrix based on the problem scale and context
    scale_factor = np.mean(distance_matrix) / np.max(distance_matrix)
    heuristic_matrix *= scale_factor
    
    return heuristic_matrix
```
