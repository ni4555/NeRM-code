```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]

    # Calculate the Manhattan distance between all pairs of points
    Manhattan_dist = np.abs(np.subtract.outer(range(n), range(n)))

    # Normalize the Manhattan distance by the maximum distance to create a heuristic matrix
    heuristic_matrix = Manhattan_dist / Manhattan_dist.max()

    # Calculate the minimum distance between each point and all other points to identify the nearest neighbors
    min_dist_to_all = np.min(distance_matrix, axis=1)
    nearest_neighbors = np.argmin(distance_matrix, axis=1)

    # Adjust the heuristic matrix by considering the nearest neighbors to avoid trivial paths
    for i in range(n):
        # Create a path that includes the nearest neighbor first
        path = [i, nearest_neighbors[i]]
        while path[-1] != i:
            next_index = nearest_neighbors[path[-1]]
            path.append(next_index)
        # Adjust the heuristic values for this path
        for j in range(len(path) - 1):
            heuristic_matrix[path[j], path[j + 1]] += (1 - min_dist_to_all[path[j]])
            heuristic_matrix[path[j + 1], path[j]] += (1 - min_dist_to_all[path[j + 1]])

    # Introduce a random noise to the heuristic matrix to prevent premature convergence
    noise_factor = np.random.rand(*heuristic_matrix.shape) * 0.1
    noisy_heuristic_matrix = heuristic_matrix + noise_factor

    # Cap the values to ensure the heuristic does not suggest including very long edges
    capped_heuristic_matrix = np.clip(noisy_heuristic_matrix, 0, 1)

    return capped_heuristic_matrix
```
