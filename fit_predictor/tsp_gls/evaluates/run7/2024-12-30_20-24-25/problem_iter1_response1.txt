```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate a precision heuristic matrix
    heuristic_matrix = 1 / (1 + distance_matrix)
    
    # Apply a sigmoid function to map the heuristic matrix to the range [0, 1]
    sigmoid_transformed = 1 / (1 + np.exp(-heuristic_matrix))
    
    # Adjust the heuristic matrix with a precision factor to amplify the effect of short distances
    precision_factor = np.random.uniform(0.1, 0.9)
    adjusted_heuristic_matrix = sigmoid_transformed * precision_factor
    
    # Apply an adaptive weighting scheme that considers the minimum and average distances
    min_distance = np.min(distance_matrix)
    average_distance = np.mean(distance_matrix)
    weighted_heuristic_matrix = adjusted_heuristic_matrix * (average_distance / (min_distance + adjusted_heuristic_matrix))
    
    # Normalize the weighted heuristic matrix to ensure that it's of the same shape as the input
    max_value = np.max(weighted_heuristic_matrix)
    min_value = np.min(weighted_heuristic_matrix)
    normalized_heuristic_matrix = (weighted_heuristic_matrix - min_value) / (max_value - min_value)
    
    return normalized_heuristic_matrix
```
