```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Incorporate a smoothness term to the precision matrix
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    precision_matrix *= smoothness_factor
    
    # Introduce a perturbation matrix to encourage diverse neighborhood exploration
    perturbation_matrix = (np.random.rand(*distance_matrix.shape) - 0.5) * 0.1
    perturbation_matrix = np.clip(perturbation_matrix, 0, 1)
    precision_matrix += perturbation_matrix
    
    # Normalize again after perturbation to maintain scale consistency
    precision_matrix /= np.sum(precision_matrix, axis=0, keepdims=True)
    
    return precision_matrix
```
