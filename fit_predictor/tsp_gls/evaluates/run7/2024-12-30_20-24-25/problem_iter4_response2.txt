```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the heuristic based on the minimum distances to any node
    min_from_first = np.min(distance_matrix, axis=1, keepdims=True)
    min_to_first = np.min(distance_matrix, axis=0, keepdims=True)
    heuristic_matrix = np.add.reduce(min_from_first, min_to_first)
    
    # Introduce a smoothness term by penalizing larger distances
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    heuristic_matrix = np.where(distance_matrix > np.mean(distance_matrix), heuristic_matrix * smoothness_factor, heuristic_matrix)
    
    # Normalize the heuristic matrix to maintain a consistent scale
    heuristic_matrix /= np.max(heuristic_matrix)
    
    # Introduce a perturbation to encourage diversity in the initial population
    perturbation = np.random.normal(0, 0.05, heuristic_matrix.shape)
    heuristic_matrix += perturbation
    
    # Ensure that the longest edge is penalized heavily
    penalty_factor = np.exp(-0.1 * np.argmax(distance_matrix, axis=1))
    for i in range(distance_matrix.shape[0]):
        heuristic_matrix[i, np.argmax(distance_matrix[i])] *= penalty_factor[i]
    
    return heuristic_matrix
```
