```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Use a more sophisticated heuristic based on a weighted combination of Manhattan and Chebyshev distances
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True)) + \
                       np.abs(distance_matrix - np.max(distance_matrix, axis=0) - 
                             np.max(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    heuristic_sum = np.sum(heuristic_matrix, axis=0, keepdims=True)
    precision_matrix = np.where(heuristic_sum == 0, 1, heuristic_matrix / heuristic_sum)
    
    # Introduce intelligent parameter adjustment based on a dynamic scaling factor
    scale_factor = np.mean(precision_matrix) * (1 + np.random.normal(0, 0.05, precision_matrix.shape))
    precision_matrix *= scale_factor
    
    # Apply an evolving neighborhood structure that focuses on high-precision edges
    for i in range(num_edges):
        neighbors = np.argsort(precision_matrix[i])[::-1][:int(num_edges * 0.1)]  # Top 10% edges
        precision_matrix[i, neighbors] *= 1.1  # Increase precision on selected neighbors
    
    # Introduce penalties for outliers based on the 95th percentile of edge lengths
    penalties = np.percentile(distance_matrix, 95, axis=0, keepdims=True)
    precision_matrix = np.where(distance_matrix > penalties, np.inf, precision_matrix)
    
    # Introduce perturbations to diversify the search space
    perturbation = np.random.normal(0, 0.02, precision_matrix.shape)
    precision_matrix += perturbation
    
    # Refine heuristics with local insights and ensure positive values
    precision_matrix = np.clip(precision_matrix, 0, np.inf)
    
    # Validate heuristics by balancing exploration and exploitation
    exploration_factor = np.random.uniform(0.5, 1.5)
    precision_matrix *= exploration_factor
    
    return precision_matrix
```
