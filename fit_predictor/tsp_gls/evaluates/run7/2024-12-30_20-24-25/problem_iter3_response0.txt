```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                              np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Introduce a penalty for the longest edge in each row
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    # Incorporate diverse perturbations to encourage exploration
    perturbation = np.random.normal(0, 0.1, heuristic_matrix.shape)
    heuristic_matrix = heuristic_matrix + perturbation
    
    # Introduce a non-linear transformation to favor short paths
    heuristic_matrix = np.log(heuristic_matrix + 1)  # Adding 1 to avoid log of zero
    
    # Adjust the heuristic matrix based on the problem scale and context
    # Here, we use a scaling factor that can be adjusted for different problem sizes
    scaling_factor = 1 / np.sqrt(np.sum(heuristic_matrix**2))
    heuristic_matrix = heuristic_matrix * scaling_factor
    
    return heuristic_matrix
```
