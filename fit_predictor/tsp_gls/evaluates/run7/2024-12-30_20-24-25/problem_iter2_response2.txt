```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]

    # Calculate the Manhattan distance between all pairs of points
    Manhattan_dist = np.abs(np.subtract.outer(range(n), range(n)))

    # Normalize Manhattan distance by the maximum distance to create a heuristic matrix
    heuristic_matrix = Manhattan_dist / Manhattan_dist.max()

    # Identify the nearest neighbors for each point to use in the heuristic adjustment
    nearest_neighbors = np.argsort(heuristic_matrix, axis=1)[:, 1:4]  # Exclude the point itself

    # Adjust the heuristic matrix by considering the nearest neighbors
    adjusted_heuristic_matrix = np.copy(heuristic_matrix)
    for i in range(n):
        # Increase the heuristic value of edges not leading to nearest neighbors
        for j in range(n):
            if j not in nearest_neighbors[i]:
                adjusted_heuristic_matrix[i, j] += 1

    # Introduce a random noise to the heuristic matrix to prevent premature convergence
    noise_factor = np.random.rand(*adjusted_heuristic_matrix.shape) * 0.1
    noisy_heuristic_matrix = adjusted_heuristic_matrix + noise_factor

    # Cap the values to ensure the heuristic does not suggest including very long edges
    capped_heuristic_matrix = np.clip(noisy_heuristic_matrix, 0, 1)

    return capped_heuristic_matrix
```
