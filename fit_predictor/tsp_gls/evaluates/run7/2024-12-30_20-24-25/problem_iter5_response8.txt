```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Initialize the precision heuristic matrix using the Manhattan distance
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    heuristic_sum = np.sum(heuristic_matrix, axis=0, keepdims=True)
    precision_matrix = np.where(heuristic_sum == 0, 1, heuristic_matrix / heuristic_sum)
    
    # Introduce variability and perturbation to enhance exploration
    perturbation_factor = np.mean(precision_matrix) * 0.01
    perturbation = np.random.normal(0, perturbation_factor, precision_matrix.shape)
    precision_matrix += perturbation
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    precision_matrix = np.where(distance_matrix == penalty, np.inf, precision_matrix)
    
    # Introduce a reward for shorter edges to encourage their inclusion
    reward = np.min(distance_matrix, axis=1, keepdims=True)
    precision_matrix = np.where(distance_matrix == reward, 0, precision_matrix)
    
    # Introduce a local heuristic refinement
    for i in range(num_edges):
        local_min_row = np.argmin(distance_matrix[i, :])
        local_min_col = np.argmin(distance_matrix[:, i])
        local_min_value = distance_matrix[local_min_row, local_min_col]
        precision_matrix[i, local_min_row] *= 0.9
        precision_matrix[local_min_row, i] *= 0.9
        precision_matrix[i, local_min_col] *= 1.1
        precision_matrix[local_min_col, i] *= 1.1
    
    # Ensure that the precision matrix remains positive and bounded
    precision_matrix = np.clip(precision_matrix, 0.1, np.inf)
    
    # Adaptive parameter adjustment based on the current fitness
    fitness_threshold = 10.617516362484723
    fitness = np.sum(precision_matrix)
    if fitness < fitness_threshold:
        adjustment_factor = (fitness_threshold - fitness) / fitness_threshold
    else:
        adjustment_factor = 1.0
    precision_matrix *= adjustment_factor
    
    return precision_matrix
```
