```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the diagonal of the distance matrix (no distance to itself)
    diag = np.diag(distance_matrix)
    
    # Calculate the distance matrix without self-loops
    distance_matrix_no_diag = np.copy(distance_matrix)
    np.fill_diagonal(distance_matrix_no_diag, np.inf)
    
    # Calculate the minimum distance for each edge (excluding self-loops)
    min_distances = np.min(distance_matrix_no_diag, axis=0)
    
    # Normalize the distance to its respective minimum distance
    normalized_distances = distance_matrix / min_distances
    
    # Calculate the maximum normalized distance for each edge
    max_normalized_distances = np.max(normalized_distances, axis=0)
    
    # It's bad to include edges with maximum normalized distances in the early part of the path
    # To encourage the search to explore longer edges later in the path
    heuristics = (1 - normalized_distances) * (max_normalized_distances / normalized_distances)
    
    # Add the local minima consideration by adding a penalty to edges with minimum normalized distances
    local_minima = np.where(normalized_distances == np.min(normalized_distances, axis=0))
    heuristics[local_minima] += 1
    
    return heuristics
```
