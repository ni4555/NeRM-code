```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic as the sum of the minimum distances
                # from the current node to all other nodes except the starting node,
                # and vice versa, while incorporating the average distance.
                min_to_all_from_i = np.min(distance_matrix[i, distance_matrix[i] != float('inf')])
                min_from_all_to_i = np.min(distance_matrix[distance_matrix[:, i] != float('inf'), i])
                average_distance = np.mean(distance_matrix[distance_matrix != float('inf')])

                # We want to penalize distances that are significantly lower than the average
                # by multiplying them with a factor, which increases as we move further away.
                heuristic_value = (min_to_all_from_i + min_from_all_to_i) / 2
                if heuristic_value < average_distance:
                    heuristic_value *= 2  # Penalty factor for distances shorter than the average

                heuristics_matrix[i, j] = heuristic_value
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
