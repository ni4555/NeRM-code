```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic as the sum of the distances from each node to the nearest neighbor
                # Add a penalty for longer edges to discourage their selection
                nearest_neighbor_i = np.argsort(distance_matrix[i])[1]  # Exclude the node itself
                nearest_neighbor_j = np.argsort(distance_matrix[j])[1]  # Exclude the node itself
                edge_length = distance_matrix[i, j]
                heuristics_value = distance_matrix[i, nearest_neighbor_i] + distance_matrix[j, nearest_neighbor_j] + edge_length
                heuristics_value += 0.1 * edge_length  # Longer edges receive a larger penalty

                # Incorporate domain knowledge by reducing the heuristic value for edges that connect high population areas
                # Example: Assuming there's a known population matrix
                population_matrix = np.random.rand(n, n)  # Placeholder for actual population matrix
                if population_matrix[i].max() > 0.5 and population_matrix[j].max() > 0.5:
                    heuristics_value *= 0.8  # Discount the heuristic for these edges

                heuristics_matrix[i, j] = heuristics_value
            else:
                # Set the heuristic value to a high number if it's the same node (self-loop)
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
