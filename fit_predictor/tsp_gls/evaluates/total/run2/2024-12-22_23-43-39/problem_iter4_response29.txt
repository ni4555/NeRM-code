```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the average distance to each node
    avg_distance_to_each_node = np.mean(distance_matrix, axis=1)
    # Calculate the average distance from each node
    avg_distance_from_each_node = np.mean(distance_matrix, axis=0)
    # Calculate the total centrality of each node
    total_centrality = avg_distance_to_each_node + avg_distance_from_each_node
    # Normalize centrality to avoid dominance
    normalized_centrality = total_centrality / total_centrality.sum()
    
    # Calculate the heuristic based on the distance variation and centrality
    heuristics_matrix = (distance_matrix - avg_distance_to_each_node.reshape(-1, 1)) * normalized_centrality
    
    # Set the diagonal to zero since the distance to itself is not considered
    np.fill_diagonal(heuristics_matrix, 0)
    
    return heuristics_matrix
```
