```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Incorporate a diversity factor based on the distance to the nearest non-adjacent node
                diversity_factor = 1 / (1 + np.min(distance_matrix[~np.isin(np.arange(n), [i, j]), :][:, ~np.isin(np.arange(n), [i, j])]))
                # Incorporate the local structure by adding the distance to the nearest neighbor
                local_factor = np.min(distance_matrix[i, ~np.isin(np.arange(n), [i])]) + np.min(distance_matrix[j, ~np.isin(np.arange(n), [j])])
                # Use domain knowledge to apply a weight to the direct distance
                direct_distance_weight = 1 - 0.5 * distance_matrix[i, j] / np.sum(distance_matrix)
                # Combine the factors to calculate the heuristic
                heuristics_matrix[i, j] = diversity_factor + local_factor + direct_distance_weight
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
