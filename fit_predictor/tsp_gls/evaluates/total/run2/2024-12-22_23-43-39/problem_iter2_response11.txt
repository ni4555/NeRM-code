```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic incorporates the concept of a "penalty" for traversing
    # certain edges based on their position in the path. Edges closer to the start
    # of the path are penalized more heavily to encourage the heuristic to favor
    # longer paths that are more optimal.
    
    # Initialize the heuristic matrix with the distances
    heuristics = np.copy(distance_matrix)
    
    # Calculate the number of cities
    num_cities = distance_matrix.shape[0]
    
    # Loop through each city (except the last one)
    for i in range(num_cities - 1):
        # Loop through each edge from city i to the next cities
        for j in range(i + 1, num_cities):
            # Calculate the index of the previous city
            prev_index = (j - 1) % num_cities
            
            # Calculate the penalty based on the position in the path
            # This is a simple linear penalty that increases with the position
            penalty = (i + 1) / num_cities
            
            # Apply the penalty to the heuristic for this edge
            heuristics[i, j] *= (1 + penalty)
            heuristics[j, i] *= (1 + penalty)
    
    return heuristics
```
