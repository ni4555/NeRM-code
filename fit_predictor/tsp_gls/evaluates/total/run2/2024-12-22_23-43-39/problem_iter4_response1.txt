```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Initialize the heuristic values based on the nearest neighbor distances
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (np.min(distance_matrix[i, ~np.isin(np.arange(n), [i])]) +
                                           np.min(distance_matrix[j, ~np.isin(np.arange(n), [j])]))

    # Add a penalty for edges that are longer than the average distance plus a threshold
    average_distance = np.mean(distance_matrix)
    threshold = 1.5
    penalty_factor = 0.5
    for i in range(n):
        for j in range(n):
            if i != j and distance_matrix[i, j] > average_distance * threshold:
                heuristics_matrix[i, j] += (distance_matrix[i, j] - average_distance * threshold) * penalty_factor

    # Incorporate domain knowledge: adjust penalties dynamically based on the current local minima
    while True:
        # Find the edge with the highest heuristic value (worst edge)
        worst_edge = np.unravel_index(np.argmax(heuristics_matrix), heuristics_matrix.shape)
        if heuristics_matrix[worst_edge] == 0:
            break

        # Remove the penalty from the worst edge
        heuristics_matrix[worst_edge] = 0

        # Find the next worst edge
        next_worst_edge = np.unravel_index(np.argmax(heuristics_matrix), heuristics_matrix.shape)

        # If the next worst edge is the same as the worst edge, we have reached a local minimum
        if next_worst_edge == worst_edge:
            break

        # Apply the penalty to the next worst edge
        heuristics_matrix[next_worst_edge] += distance_matrix[next_worst_edge]

    return heuristics_matrix
```
