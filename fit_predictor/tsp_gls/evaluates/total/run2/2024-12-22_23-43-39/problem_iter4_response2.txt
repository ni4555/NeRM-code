```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the minimum distances for each edge excluding the diagonal
    min_distances = np.min(distance_matrix, axis=0)
    
    # Normalize the distance matrix to its respective minimum distance
    normalized_distances = distance_matrix / min_distances
    
    # Introduce a penalty for edges that deviate from the shortest path tree
    penalty = np.where(normalized_distances < 1, 0, (normalized_distances - 1) ** 2)
    
    # The heuristic is the inverse of the sum of the normalized distance and penalty
    heuristics_matrix = 1 / (normalized_distances + penalty)
    
    # Set the diagonal to zero since the distance to itself is not considered
    np.fill_diagonal(heuristics_matrix, 0)
    
    return heuristics_matrix
```
