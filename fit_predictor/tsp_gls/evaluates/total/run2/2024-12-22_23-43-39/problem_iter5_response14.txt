```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Incorporate domain-specific penalties and local structure
                # Assign higher penalties for edges near the diagonal and lower for far ones
                distance_diff = abs(i - j)
                domain_min = np.min(distance_matrix[distance_matrix[:, i] != float('inf'), i])
                local_min = np.min(distance_matrix[i, distance_matrix[i] != float('inf')])
                heuristic_value = distance_matrix[i, j] + domain_min + local_min
                # Apply a penalty for edges near the diagonal
                penalty = (distance_diff > n / 2) * (distance_diff * 0.1)
                heuristics_matrix[i, j] = heuristic_value + penalty
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
