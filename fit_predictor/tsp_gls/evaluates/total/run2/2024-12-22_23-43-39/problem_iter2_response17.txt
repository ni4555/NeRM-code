```python
def heuristics_v2(distance_matrix: np.ndarray, edge_traversal_history: np.ndarray, node_visitation_status: np.ndarray) -> np.ndarray:
    # Incorporate edge traversal history by penalizing previously traversed edges
    history_penalty = (1 - edge_traversal_history) * 100

    # Incorporate node visitation status by ensuring that visited nodes are not candidates for further edges
    visitation_penalty = node_visitation_status * 100

    # Combine penalties into a single heuristic matrix
    heuristics_matrix = np.copy(distance_matrix)
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Apply the penalties to the edge if it has been traversed or if the node is not visited
                heuristics_matrix[i, j] = distance_matrix[i, j] + history_penalty[i, j] + visitation_penalty[i, j]
            else:
                # For self-loops, we still set the heuristic to a high number to avoid them
                heuristics_matrix[i, j] = float('inf')
    return heuristics_matrix
```
