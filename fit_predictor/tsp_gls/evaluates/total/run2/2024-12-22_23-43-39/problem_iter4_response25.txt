```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic based on the nearest neighbor distances for both nodes
                nearest_i = np.min(distance_matrix[i, ~np.isin(np.arange(n), [i])])
                nearest_j = np.min(distance_matrix[j, ~np.isin(np.arange(n), [j])])
                
                # Incorporate local structure by considering the shortest path that includes the current edge
                local_structure = np.min(distance_matrix[i, ~np.isin(np.arange(n), [j])] + distance_matrix[j, ~np.isin(np.arange(n), [i])])
                
                # Introduce a penalty for edges that deviate from the shortest path tree
                deviation_penalty = np.maximum(0, nearest_i + nearest_j - distance_matrix[i, j])
                
                # Introduce a bonus for edges that are part of the shortest path tree
                shortest_path_bonus = np.where(distance_matrix[i, j] == local_structure, 1, 0)
                
                # Use domain knowledge to add a penalty for longer distances and a bonus for shorter distances
                distance_bonus = -distance_matrix[i, j] if distance_matrix[i, j] < nearest_i + nearest_j else 0
                
                # Combine all factors to calculate the heuristic
                heuristics_matrix[i, j] = (nearest_i + nearest_j + local_structure + distance_bonus
                                            + deviation_penalty * 2 + shortest_path_bonus)
            else:
                # Set the heuristic value to a high number if it's the same node (self-loop)
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
