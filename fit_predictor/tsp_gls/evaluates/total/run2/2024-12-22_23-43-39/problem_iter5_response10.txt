```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Consider local minima around the node and the minimum distance to any other node
                local_min = np.min(distance_matrix[i, distance_matrix[i] != float('inf')])
                domain_min = np.min(distance_matrix[distance_matrix[:, i] != float('inf'), i])
                # Incorporate a penalty for edges that cross the optimal path found so far
                path_opt = np.sort(np.argsort(distance_matrix, axis=1))[:, 1:]  # Sort and get the second smallest distance
                penalty = np.sum(np.isin(path_opt[:, 0], np.where(distance_matrix[:, j] == domain_min)[0]))
                # Normalize the heuristic based on the minimum edge weight in the matrix
                min_edge_weight = np.min(distance_matrix)
                heuristics_matrix[i, j] = (local_min + domain_min + distance_matrix[i, j] + penalty) / (2 + min_edge_weight)
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
