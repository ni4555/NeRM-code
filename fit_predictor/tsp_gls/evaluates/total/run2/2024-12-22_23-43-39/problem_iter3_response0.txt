```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Use a combination of distance to the nearest neighbor, edge density, and a simple heuristic
                nearest_neighbor = np.min(distance_matrix[i, ~np.isin(np.arange(n), [i])])
                nearest_neighbor_for_j = np.min(distance_matrix[j, ~np.isin(np.arange(n), [j])])
                edge_density = (np.sum(distance_matrix[i, ~np.isin(np.arange(n), [i])] /
                                      np.sum(distance_matrix, axis=0)) +
                                np.sum(distance_matrix[j, ~np.isin(np.arange(n), [j])] /
                                      np.sum(distance_matrix, axis=1)))
                heuristics_matrix[i, j] = (nearest_neighbor + nearest_neighbor_for_j +
                                           distance_matrix[i, j] + edge_density) / 2
            else:
                # Set the heuristic value to a high number if it's the same node (self-loop)
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
