```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    
    # Calculate the shortest path from each node to every other node, excluding diagonal elements
    for i in range(n):
        for j in range(n):
            if i != j:
                min_distances[i, j] = np.min([distance_matrix[i, k] + distance_matrix[k, j] for k in range(n) if k != i and k != j])
    
    # Use the heuristic of adding a penalty to edges that are not part of the shortest path
    return distance_matrix - min_distances
```
