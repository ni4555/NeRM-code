```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    # Calculate the shortest path to each node from the first node
    min_edge_distances = np.min(distance_matrix, axis=1)[:, np.newaxis]
    # Calculate the shortest path from each node to the last node
    min_edge_distances_from_last = np.min(distance_matrix, axis=0)[:, np.newaxis]
    # It's bad to include edges longer than the shortest path from the start or to the end
    return np.maximum(distance_matrix, np.maximum(min_edge_distances, min_edge_distances_from_last))
```
