Fitness: 10.596621379960432

Description:
The Traveling Salesman Problem (TSP) is addressed through an enhanced guided local search algorithm that optimizes the shortest path for visiting all nodes and returning to the starting point. This approach combines a genetic algorithm with simulated annealing, guided by a sophisticated heuristic function that incorporates both the minimization of individual edge distances and the exploitation of local heuristics. The algorithm employs adaptive parameter tuning and multi-criteria optimization to iteratively refine solutions, aiming to achieve fitness scores superior to 10.61187021517528 by leveraging a hybrid optimization strategy that leverages both global and local search principles.

Code:
import numpy as np
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Assuming the distance_matrix is symmetric and the diagonal is filled with zeros
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Minimize the sum of the longest edges in each pair of nodes
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics_matrix[i, j] = distance_matrix[i, j] - np.min(distance_matrix[i, :]) - np.min(distance_matrix[:, j])
    
    return heuristics_matrix