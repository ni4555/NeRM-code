```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degrees of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Normalize the degrees to get a relative degree measure
    relative_degrees = degrees / np.sum(degrees)
    
    # Create a matrix to store the heuristic values, initializing with the inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-8)
    
    # Incorporate the node degree into the heuristic by multiplying with the relative degrees
    combined_heuristic = heuristic_matrix * relative_degrees
    
    # Handle the self-loops by setting the heuristic value to infinity
    np.fill_diagonal(combined_heuristic, np.inf)
    
    # Optionally, we could also consider the minimum distance to any node from each node to
    # further enhance the heuristic by rewarding nodes that are central in the network.
    # For this, we would calculate the minimum distance for each node and add it to the heuristic.
    min_distances = np.min(distance_matrix, axis=1)
    additional_heuristic = min_distances / np.sum(min_distances)
    enhanced_combined_heuristic = combined_heuristic + additional_heuristic
    
    # Ensure that the enhanced heuristic is also free of self-loops
    np.fill_diagonal(enhanced_combined_heuristic, np.inf)
    
    return enhanced_combined_heuristic
```
