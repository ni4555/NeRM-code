```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.min(distance_matrix, axis=1)
    max_distances = np.max(distance_matrix, axis=1)
    
    # Compute a lower bound on the path cost for each edge
    lower_bound = min_distances + max_distances
    
    # Heuristic is the difference between the actual edge cost and the lower bound
    heuristics_matrix = distance_matrix - lower_bound[:, np.newaxis]
    
    # Normalize the heuristics to be between 0 and 1
    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    return heuristics_matrix
```
