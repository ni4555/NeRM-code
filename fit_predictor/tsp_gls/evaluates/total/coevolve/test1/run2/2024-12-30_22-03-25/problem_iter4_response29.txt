```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=0)
    relative_degrees = degrees / n

    # Incorporate node influence based on degree
    node_influence = relative_degrees

    # Calculate the average distance
    average_distance = np.mean(distance_matrix)

    # Incorporate triangle inequality
    triangle_inequality_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if i != j and j != k and i != k:
                    triangle_inequality = distance_matrix[i, j] + distance_matrix[j, k] + distance_matrix[i, k] - distance_matrix[i, j] - distance_matrix[j, k] - distance_matrix[i, k]
                    triangle_inequality_penalty[i, j] = abs(triangle_inequality)

    # Define a heuristic matrix where lower values are preferred
    # Here, we consider the influence of the node, the distance from the average, and triangle inequality
    heuristic_matrix = distance_matrix * node_influence
    heuristic_matrix += (distance_matrix - average_distance) * (1 - node_influence)
    heuristic_matrix += triangle_inequality_penalty * (1 - node_influence - (distance_matrix - average_distance) * (1 - node_influence))

    # Normalize the heuristic matrix to ensure that the sum of all heuristic values is equal to the number of edges (n-1)
    heuristic_matrix /= (n - 1)

    # Make sure that self-loops are not considered in the heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)

    return heuristic_matrix
```
