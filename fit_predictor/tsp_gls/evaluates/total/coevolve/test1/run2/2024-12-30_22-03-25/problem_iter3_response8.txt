```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    # Initialize the heuristics matrix
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the heuristics based on the shortest path to each node
    for i in range(n):
        for j in range(n):
            if i != j:
                # Heuristics are the negative of the shortest path from i to j
                # because we want to minimize the heuristics value
                heuristics[i, j] = -np.min(distance_matrix[i, :]) - np.min(distance_matrix[:, j]) + distance_matrix[i, j]
            else:
                # For the diagonal, we set the heuristic to 0 as there's no path
                heuristics[i, j] = 0

    return heuristics
```
