```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])
    
    # Encourage the selection of edges that are part of the shortest path to a neighboring node
    # and discourage the selection of edges that are part of a smaller cycle.
    # We add a penalty for each edge that is part of the shortest path to a neighboring node.
    min_path_edges = np.argmin(distance_matrix, axis=1)
    for i in range(n):
        for j in range(n):
            if i != j and min_path_edges[i] == j:
                distance_matrix[i, j] += n  # Adding a large penalty for this edge

    # Include a factor to avoid including edges that are part of a smaller cycle
    # by ensuring that the sum of distances to all other nodes minus the current edge
    # is greater than or equal to the current edge distance.
    for i in range(n):
        for j in range(n):
            if i != j:
                distance_matrix[i, j] = min(distance_matrix[i, j], np.sum(distance_matrix[i, :]) + distance_matrix[j, :][i] - distance_matrix[i, j])
    
    return distance_matrix
```
