```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the shortest path from each node to every other node
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])
    
    # We want to penalize edges that are not part of the shortest path
    # The heuristic will increase with the additional distance over the shortest path
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                if min_distances[i, j] < distance_matrix[i, j]:
                    heuristic_matrix[i, j] = distance_matrix[i, j] - min_distances[i, j]
    return heuristic_matrix
```
