```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])
    
    # Include a factor to avoid including edges that are part of a smaller cycle
    # By doing this, we encourage longer edges to be avoided if they're not the shortest
    # path to a neighboring node.
    return distance_matrix - min_distances + np.where(distance_matrix == np.min(distance_matrix, axis=1), 0, 1)
```
