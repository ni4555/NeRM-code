```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])

    # Incorporate domain knowledge by penalizing edges that connect nodes in a common cluster more than once
    # Assume that clusters are known and a function to determine if two nodes are in the same cluster is provided
    # For example, using a simple threshold method:
    def are_in_same_cluster(i, j):
        # This is a placeholder for the actual cluster checking logic
        # For instance, if clusters are pre-defined as binary vectors, check for common set bits
        # Here we assume it returns False for simplicity
        return False

    cluster_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j and are_in_same_cluster(i, j):
                cluster_penalty[i, j] = 1

    # Use local optimization by adding a penalty for edges that are in the current solution
    # This is a placeholder for the actual local optimization logic
    # For example, if the current solution is stored in a list `current_solution`,
    # we could use the following approach:
    # current_solution_edges = [(i, j) for i in range(n) for j in range(n) if i != j and i in current_solution and j in current_solution]
    # for i, j in current_solution_edges:
    #     cluster_penalty[i, j] += 1

    # Combine penalties to get the heuristic
    return distance_matrix - min_distances + cluster_penalty
```
