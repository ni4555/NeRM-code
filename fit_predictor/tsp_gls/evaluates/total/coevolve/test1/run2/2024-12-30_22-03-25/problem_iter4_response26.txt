```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Precompute the shortest path to the next nearest neighbor for each pair of nodes
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    next_nearest_neighbors = np.argsort(distance_matrix[nearest_neighbors[:, 1:], nearest_neighbors[:, 1:].argmax(axis=1)], axis=1)
    
    # Initialize the heuristic values for the direct edges
    for i in range(n):
        for j in range(i+1, n):
            nearest_neighbor_i = nearest_neighbors[i, 1]
            next_nearest_neighbor_i = next_nearest_neighbors[i, 1]
            nearest_neighbor_j = nearest_neighbors[j, 1]
            next_nearest_neighbor_j = next_nearest_neighbors[j, 1]
            
            # The heuristic for the edge (i, j) is the sum of the shortest paths
            # to the next nearest neighbors minus the shortest paths to the immediate nearest neighbors
            heuristic_matrix[i, j] = distance_matrix[i, next_nearest_neighbor_i] + distance_matrix[j, next_nearest_neighbor_j] - \
                                     (distance_matrix[i, nearest_neighbor_i] + distance_matrix[j, nearest_neighbor_j])
    
    # The heuristic matrix is symmetric, so we can mirror the lower triangle to the upper triangle
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2
    
    return heuristic_matrix
```
