```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the shortest path from each node to every other node
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])
    
    # Adjust the heuristic by adding the distance from the start node to each node
    start_node = 0
    min_distances += distance_matrix[start_node, :].reshape(-1, 1)
    min_distances += distance_matrix[:, start_node].reshape(1, -1)
    
    # It's bad to include long edges that are not the shortest path
    return distance_matrix - min_distances
```
