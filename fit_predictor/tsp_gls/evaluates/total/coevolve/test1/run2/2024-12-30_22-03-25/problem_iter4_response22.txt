```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic based on the maximum possible distance that can be saved by choosing the edge
    for i in range(n):
        for j in range(i+1, n):
            min_path = np.inf
            # Explore different combinations of edges by considering a detour through the start node
            for k in range(n):
                if k != i and k != j:
                    min_path = min(min_path, distance_matrix[i, k] + distance_matrix[k, j])
            # The heuristic is the difference between the actual distance and the minimum possible path distance
            heuristic_matrix[i, j] = distance_matrix[i, j] - min_path
            heuristic_matrix[j, i] = heuristic_matrix[i, j]
    
    # Avoid negative heuristics by setting them to zero
    heuristic_matrix[heuristic_matrix < 0] = 0
    return heuristic_matrix
```
