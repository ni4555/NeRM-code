```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            # Consider the edge only if it is not the direct connection
            if i != j:
                # Use domain knowledge to adjust the heuristic
                if j > i:
                    min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:j, j])
                else:
                    min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[j:, j])
    
    # Use a local optimization heuristic to adjust the cost
    adjusted_distances = distance_matrix - min_distances
    adjusted_distances[adjusted_distances < 0] = 0  # Avoid negative values
    return adjusted_distances
```
