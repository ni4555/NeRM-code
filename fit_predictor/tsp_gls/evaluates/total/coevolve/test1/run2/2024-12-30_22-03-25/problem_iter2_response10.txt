```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Introduce a penalty for edges that are part of the longest cycle in the graph
    max_cycle = np.max(np.triu(distance_matrix, k=1) + np.tril(distance_matrix, k=-1))
    # Introduce a penalty for edges that have high variability in their weights
    variability_penalty = np.abs(np.diff(np.sort(distance_matrix, axis=0), axis=1)).max() * 0.1
    # Use a diversity factor that encourages different paths
    diversity_factor = np.random.random(distance_matrix.shape)
    # Combine these factors to create the heuristic matrix
    heuristic_matrix = distance_matrix + max_cycle * np.random.choice([0, 1], size=distance_matrix.shape) + variability_penalty * diversity_factor
    return heuristic_matrix
```
