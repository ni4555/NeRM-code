```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # For each edge, calculate the cost if it were the shortest path
    for i in range(n):
        for j in range(n):
            if i != j:
                # Exclude the current edge and find the shortest path
                sub_matrix = np.delete(np.delete(distance_matrix, [i, j], axis=0), [i, j], axis=1)
                min_path_length = np.sum(np.min(sub_matrix, axis=1))
                heuristics_matrix[i, j] = distance_matrix[i, j] - min_path_length

    # Normalize the heuristics to be between 0 and 1
    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    return heuristics_matrix
```
