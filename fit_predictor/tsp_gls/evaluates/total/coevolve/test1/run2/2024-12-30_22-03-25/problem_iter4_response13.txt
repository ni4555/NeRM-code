```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Add a small constant to avoid division by zero
    epsilon = 1e-8
    # Calculate the minimum distance for each pair of nodes from all possible paths
    min_distances = np.min(distance_matrix, axis=0) + np.min(distance_matrix, axis=1)
    # Avoid the same minimum distance value for the diagonal (same node)
    np.fill_diagonal(min_distances, np.inf)
    # The heuristic is the penalty for not taking the shortest path
    # This is calculated by subtracting the shortest path cost from the actual distance
    heuristic_matrix = distance_matrix - min_distances
    # Avoid negative values which might occur due to floating point arithmetic issues
    heuristic_matrix = np.maximum(heuristic_matrix, epsilon)
    return heuristic_matrix
```
