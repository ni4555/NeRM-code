```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Add a small constant to avoid division by zero
    epsilon = 1e-8
    # Compute the heuristic as the inverse of the distance, weighted by a diversity factor
    diversity_factor = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])
    diversity_factor = diversity_factor / np.sum(diversity_factor, axis=1, keepdims=True)
    heuristic_matrix = 1 / (distance_matrix + epsilon)
    
    # Consider the ratio of edge lengths relative to the minimum edge length
    min_distance = np.min(distance_matrix)
    edge_length_ratio = heuristic_matrix / min_distance
    
    # Combine the heuristics using a weighted sum where diversity is penalized
    combined_heuristic = heuristic_matrix * (1 - diversity_factor) + edge_length_ratio * diversity_factor
    return combined_heuristic
```
