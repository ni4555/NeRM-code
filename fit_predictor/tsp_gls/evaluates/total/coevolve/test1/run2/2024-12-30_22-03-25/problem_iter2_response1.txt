```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Introduce a penalty for edges that are part of a cycle that includes the start node
    # and has a high cost. This encourages the heuristic to avoid cycles that start and end at the same node.
    start_node = np.random.randint(0, distance_matrix.shape[0])
    cycle_penalty = np.inf
    for i in range(distance_matrix.shape[0]):
        for j in range(i+1, distance_matrix.shape[0]):
            if distance_matrix[start_node, i] + distance_matrix[i, j] + distance_matrix[j, start_node] < cycle_penalty:
                cycle_penalty = distance_matrix[start_node, i] + distance_matrix[i, j] + distance_matrix[j, start_node]
    
    # Assign the penalty only to edges that are part of the cycle with the highest cost
    penalty_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i+1, distance_matrix.shape[0]):
            if distance_matrix[start_node, i] + distance_matrix[i, j] + distance_matrix[j, start_node] == cycle_penalty:
                penalty_matrix[i, j] = penalty_matrix[j, i] = 1
    
    return distance_matrix + penalty_matrix * cycle_penalty
```
