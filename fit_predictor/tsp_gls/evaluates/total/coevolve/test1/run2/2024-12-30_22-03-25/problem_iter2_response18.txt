```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Incorporate the concept of triangle inequality
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if i != j and j != k and i != k:
                    triangle_inequality = distance_matrix[i, j] + distance_matrix[j, k] + distance_matrix[i, k] - distance_matrix[i, j] - distance_matrix[j, k] - distance_matrix[i, k]
                    # If the triangle inequality is violated, increase the heuristic for edge (i, j)
                    if triangle_inequality < 0:
                        heuristic_matrix[i, j] += abs(triangle_inequality)
    
    # Add penalties for edges that are close to violating the triangle inequality
    triangle_inequality_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if i != j and j != k and i != k:
                    triangle_inequality = distance_matrix[i, j] + distance_matrix[j, k] + distance_matrix[i, k] - distance_matrix[i, j] - distance_matrix[j, k] - distance_matrix[i, k]
                    if triangle_inequality > 0:
                        triangle_inequality_penalty[i, j] = min(triangle_inequality_penalty[i, j], triangle_inequality)
    
    # Combine triangle inequality violations and close violations
    heuristic_matrix += triangle_inequality_penalty
    
    # Normalize the heuristic matrix to ensure it's in a usable range
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)
    if max_val != 0:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    return heuristic_matrix
```
