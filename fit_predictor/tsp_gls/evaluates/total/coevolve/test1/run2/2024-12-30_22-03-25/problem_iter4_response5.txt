```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with the distance matrix
    heuristic_matrix = np.copy(distance_matrix)
    
    # Subtract the minimum distance from each edge to the nearest neighbor of both nodes
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                min_distance_i = np.min(distance_matrix[i, :]) if distance_matrix[i, j] != 0 else np.inf
                min_distance_j = np.min(distance_matrix[:, j]) if distance_matrix[i, j] != 0 else np.inf
                heuristic_matrix[i, j] -= min(min_distance_i, min_distance_j)
    
    # Adjust the heuristic to avoid self-loops by setting them to a large value
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
