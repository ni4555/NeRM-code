```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            # Calculate the shortest path excluding the direct edge
            min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j]) - distance_matrix[i, j]
    
    # Add a heuristic based on domain knowledge, such as preferring edges close to the starting node
    starting_node = 0  # Assuming node 0 is the starting node
    min_distances += np.abs(distance_matrix[starting_node, :]) * 0.1
    
    return min_distances
```
