```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    # Calculate the shortest path from each node to every other node
    min_distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            # Exclude the diagonal and the direct distance between the nodes
            neighbors = np.argwhere(distance_matrix[i, :].argsort()[1:]).flatten()
            for neighbor in neighbors:
                min_distances[i, j] = min(min_distances[i, j], distance_matrix[i, neighbor] + distance_matrix[neighbor, j])
    
    # It's bad to include long edges that are not the shortest path
    return distance_matrix - min_distances
```
