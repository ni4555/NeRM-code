```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Incorporate the concept of triangle inequality
    n = distance_matrix.shape[0]
    triangle_inequality_penalty = np.zeros_like(distance_matrix)
    
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if i != j and j != k and i != k:
                    triangle_inequality = distance_matrix[i, j] + distance_matrix[j, k] + distance_matrix[i, k] - distance_matrix[i, j] - distance_matrix[j, k] - distance_matrix[i, k]
                    triangle_inequality_penalty[i, j] = abs(triangle_inequality)
    
    # It's bad to include edges that violate the triangle inequality
    return triangle_inequality_penalty
```
