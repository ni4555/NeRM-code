```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    # Precompute shortest path from each node to all others
    min_path_from_row = np.min(distance_matrix, axis=1)
    min_path_from_col = np.min(distance_matrix, axis=0)
    
    # Calculate the heuristics using the shortest paths
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = -min_path_from_row[i] - min_path_from_col[j] + distance_matrix[i, j]
    
    # Avoid self-loops in the heuristic by setting them to a large value
    np.fill_diagonal(heuristics, np.inf)
    
    return heuristics
```
