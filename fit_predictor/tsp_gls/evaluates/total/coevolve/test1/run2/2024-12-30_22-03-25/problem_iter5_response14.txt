```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    
    # Calculate shortest paths considering only the minimum distances via intermediate nodes
    for i in range(n):
        for j in range(n):
            if i != j:
                min_distances[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[j, :])
            else:
                min_distances[i, j] = float('inf')
    
    # Introduce domain knowledge: edges that have higher traffic or are more critical might be worse to include
    traffic_factor = np.random.rand(n, n)
    traffic_factor = traffic_factor * (traffic_factor > 0.1)
    
    # Use local optimization to adjust the heuristic to favor shorter edges first
    local_optimization = np.random.rand(n, n)
    local_optimization[distance_matrix < min_distances] = 0
    local_optimization[distance_matrix >= min_distances] = 1
    local_optimization = local_optimization * (local_optimization > 0.5)
    
    # Combine heuristics
    return distance_matrix - min_distances + traffic_factor - local_optimization
```
