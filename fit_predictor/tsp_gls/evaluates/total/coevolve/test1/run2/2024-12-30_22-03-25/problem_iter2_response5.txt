```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Incorporate the distance matrix directly
    base_heuristic = distance_matrix
    
    # Calculate the degrees of the nodes
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the relative degree of each node
    relative_degrees = degrees / np.sum(degrees)
    
    # Calculate the triangle inequality violations for each edge
    n = distance_matrix.shape[0]
    triangle_inequality_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                triangle_inequality_penalty[i, j] = abs(distance_matrix[i, j] + distance_matrix[j, i] - distance_matrix[i, i] - distance_matrix[j, j])
    
    # Normalize the triangle inequality violations by the average triangle inequality violation
    avg_triangle_inequality = np.mean(triangle_inequality_penalty)
    triangle_inequality_penalty = triangle_inequality_penalty / avg_triangle_inequality
    
    # Combine the base heuristic with the relative degrees and triangle inequality penalty
    combined_heuristic = base_heuristic * relative_degrees + triangle_inequality_penalty
    
    # Avoid self-loops in the heuristic by setting them to a large value
    np.fill_diagonal(combined_heuristic, np.inf)
    
    return combined_heuristic
```
