```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a combination of the distance and the degree of the node to determine the heuristic
    # The degree of a node is the number of edges connected to it
    degrees = np.sum(distance_matrix, axis=0)
    # Normalize the degree by the number of nodes to get a relative measure
    relative_degrees = degrees / np.sum(degrees)
    # Combine the distance with the relative degree, giving higher weights to nodes with higher relative degree
    combined_heuristic = distance_matrix * relative_degrees
    # Make sure that self-loops (i.e., when the distance is 0) are not considered in the heuristic
    np.fill_diagonal(combined_heuristic, np.inf)
    return combined_heuristic
```
