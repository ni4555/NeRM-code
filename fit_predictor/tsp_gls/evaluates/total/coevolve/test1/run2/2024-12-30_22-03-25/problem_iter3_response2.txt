```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Add a penalty to long edges that are not the shortest path
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = distance_matrix[i, j] - np.min(distance_matrix[i, :]) - np.min(distance_matrix[:, j])
                # Additional heuristic: If there are direct edges between i and any k, k and j, avoid them
                if np.any(distance_matrix[i, :]) == 0 or np.any(distance_matrix[:, j]) == 0:
                    heuristics[i, j] += 1

    return heuristics
```
