```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    min_distances = np.zeros((n, n))
    node_influence = np.zeros(n)
    
    # Calculate the shortest distance to any node from each node using the first row as a heuristic
    for i in range(n):
        min_distances[i, :] = distance_matrix[i, 0] + np.min(distance_matrix[1:, :], axis=0)
    
    # Calculate the sum of distances from each node to all other nodes to estimate node influence
    for i in range(n):
        node_influence[i] = np.sum(distance_matrix[i, :])
    
    # Normalize node influence
    max_influence = np.max(node_influence)
    node_influence /= max_influence
    
    # Calculate the heuristic value for each edge considering both the distance and the relative node influence
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            if distance_matrix[i, j] > 0:  # Avoid self-loops
                heuristic_value = (distance_matrix[i, j] / (1 + np.sqrt(node_influence[i] * node_influence[j])))
                heuristic_matrix[i, j] = heuristic_value
                heuristic_matrix[j, i] = heuristic_value  # The matrix is symmetric
    
    # Handle the diagonal elements by setting them to infinity, as they represent self-loops
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
