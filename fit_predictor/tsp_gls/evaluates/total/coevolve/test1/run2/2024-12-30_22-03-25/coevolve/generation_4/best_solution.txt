Fitness: 10.642294530873503

Description:
The Traveling Salesman Problem (TSP) is tackled using a guided local search algorithm that integrates a genetic algorithm with simulated annealing and a sophisticated heuristic function. This algorithm optimizes the shortest path by minimizing edge distances and employing local heuristics. It employs adaptive parameter tuning and multi-criteria optimization to iteratively refine solutions, aiming to surpass a fitness score of 10.61187021517528 through a hybrid optimization strategy that leverages both global and local search principles, and incorporates a heuristic that not only minimizes the sum of the longest edges in each node pair but also calculates the minimum distance from each node to all others.

Code:
import numpy as np
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of the longest edges for each node pair
    max_edge_sums = np.max(distance_matrix, axis=0) + np.max(distance_matrix, axis=1)
    
    # Calculate the minimum distance from each node to all others
    min_distances = np.min(distance_matrix, axis=1)
    
    # Combine both criteria to form the heuristic values
    # The heuristic value for each edge is the sum of the maximum edge sums and the minimum distances
    heuristic_values = max_edge_sums + min_distances
    
    # Create an array with the same shape as the distance matrix
    # Filling with 1.0 assumes that the higher the heuristic value, the less favorable the edge
    heuristics = np.full(distance_matrix.shape, fill_value=1.0)
    
    # For each edge, assign the heuristic value to the corresponding indices
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if distance_matrix[i][j] != 0:  # Avoid assigning heuristics to zero diagonal elements
                heuristics[i][j] = heuristic_values[i] + heuristic_values[j]
    
    return heuristics