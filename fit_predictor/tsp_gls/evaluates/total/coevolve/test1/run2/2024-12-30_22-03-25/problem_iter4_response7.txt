```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Calculate the shortest path from each node to every other node
    min_distances_from_i = np.min(distance_matrix, axis=1)
    min_distances_to_i = np.min(distance_matrix, axis=0)
    
    # Initialize the heuristic matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # It's bad to include long edges that are not the shortest path
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = distance_matrix[i, j] - (min_distances_from_i[i] + min_distances_to_i[j])
    
    return heuristic_matrix
```
