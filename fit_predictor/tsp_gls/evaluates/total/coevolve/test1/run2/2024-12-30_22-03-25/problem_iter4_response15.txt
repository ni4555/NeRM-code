```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    # Initialize a matrix of the same shape to store the heuristic values
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the normalized degrees
    normalized_degrees = degrees / np.sum(degrees)
    
    # Use the distance between nodes and their normalized degrees to compute the heuristic
    # The heuristic is inversely proportional to the product of normalized degrees to give
    # more weight to nodes with lower relative degrees
    for i in range(n):
        for j in range(n):
            if i != j:  # Avoid self-loops
                heuristic_value = distance_matrix[i, j] / (normalized_degrees[i] * normalized_degrees[j])
                heuristic_matrix[i, j] = heuristic_value
                heuristic_matrix[j, i] = heuristic_value  # The matrix is symmetric
    
    # Fill the diagonal with infinity to represent self-loops
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
