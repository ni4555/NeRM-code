```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Define the precision heuristic matrix using the Manhattan distance
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    heuristic_sum = np.sum(heuristic_matrix, axis=0, keepdims=True)
    precision_matrix = np.where(heuristic_sum == 0, 1, heuristic_matrix / heuristic_sum)
    
    # Dynamic mutation strategies based on the number of iterations
    iterations = 0  # Placeholder for the actual number of iterations
    mutation_factor = np.sin(iterations * np.pi / 100) * 0.1
    mutation = np.random.normal(0, mutation_factor, precision_matrix.shape)
    precision_matrix += mutation
    
    # Adaptive selection criteria based on the fitness threshold
    fitness_threshold = 10.617516362484723
    penalty_factor = np.where(precision_matrix > fitness_threshold, 2, 1)
    precision_matrix *= penalty_factor
    
    # Refine heuristics with local insights using the median instead of the mean
    median_precision = np.median(precision_matrix, axis=0, keepdims=True)
    precision_matrix = np.where(precision_matrix > median_precision, median_precision, precision_matrix)
    
    # Introduce penalties for outliers using the 90th percentile
    percentile_penalty = np.percentile(precision_matrix, 90, axis=0, keepdims=True)
    precision_matrix = np.where(precision_matrix > percentile_penalty, np.inf, precision_matrix)
    
    # Ensure that the precision matrix remains positive
    precision_matrix = np.clip(precision_matrix, 0, np.inf)
    
    return precision_matrix
```
