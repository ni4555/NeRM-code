```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Define the precision heuristic matrix using the Chebyshev distance
    precision_matrix = np.max(distance_matrix, axis=0) - np.min(distance_matrix, axis=0)
    
    # Add a perturbation to create diversity in the heuristic values
    perturbation = np.random.normal(0, np.mean(precision_matrix) * 0.01, precision_matrix.shape)
    precision_matrix += perturbation
    
    # Apply a non-linear transformation to the precision matrix to enhance the effect of shorter distances
    heuristic_matrix = np.exp(-np.square(precision_matrix) / 2)
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    # This ensures that the heuristic matrix is non-negative and gives higher weight to shorter distances
    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    return heuristic_matrix
```
