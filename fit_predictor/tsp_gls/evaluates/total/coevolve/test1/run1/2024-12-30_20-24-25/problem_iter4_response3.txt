```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    # Incorporate a smoothness term to the heuristic matrix
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    heuristic_matrix = heuristic_matrix * smoothness_factor
    
    # Introduce a controlled perturbation to create diversity in the heuristic values
    perturbation = np.random.normal(0, np.min(precision_matrix) * 0.1, heuristic_matrix.shape)
    heuristic_matrix += perturbation
    
    # Normalize the heuristic matrix to ensure non-negative values and maintain scale
    heuristic_matrix = np.clip(heuristic_matrix, 0, np.inf)
    max_value = np.max(heuristic_matrix)
    min_value = np.min(heuristic_matrix)
    normalized_heuristic_matrix = (heuristic_matrix - min_value) / (max_value - min_value)
    
    # Adjust the heuristic matrix based on the average distance to create a balanced heuristic
    average_distance = np.mean(distance_matrix)
    adjustment_factor = 1 / average_distance
    heuristic_matrix *= adjustment_factor
    
    # Cap the values to ensure the heuristic does not suggest including very long edges
    capped_heuristic_matrix = np.clip(heuristic_matrix, 0, 1)
    
    return capped_heuristic_matrix
```
