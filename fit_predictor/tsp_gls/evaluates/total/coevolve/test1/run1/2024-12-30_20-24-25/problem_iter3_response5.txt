```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    # Incorporate a smoothness term to the heuristic matrix
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    heuristic_matrix = heuristic_matrix * smoothness_factor
    
    # Apply diverse perturbations
    perturbation_matrix = np.random.normal(0, 0.1, heuristic_matrix.shape)
    heuristic_matrix += perturbation_matrix
    
    # Adjust based on context and problem scale by scaling the heuristic matrix
    scale_factor = 1 / np.max(heuristic_matrix)
    heuristic_matrix *= scale_factor
    
    # Use non-linear transformations to favor short paths
    heuristic_matrix = np.log(heuristic_matrix + 1)  # Adding 1 to avoid log(0)
    
    return heuristic_matrix
```
