```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Calculate the precision heuristic matrix using the mean distance to all other cities
    precision_matrix = (n - 1) * np.sum(distance_matrix, axis=1, keepdims=True) / (n * (n - 1))
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalties = np.max(distance_matrix, axis=1, keepdims=True)
    precision_matrix = np.where(distance_matrix == penalties, np.inf, precision_matrix)
    
    # Incorporate a smoothness term to the heuristic matrix
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    precision_matrix = precision_matrix * smoothness_factor
    
    # Introduce diversity by adding a random perturbation with a bias towards the average
    perturbation = np.random.normal(0, 0.01, distance_matrix.shape)
    row_averages = np.mean(distance_matrix, axis=1)
    perturbation = np.where(row_averages > np.mean(row_averages), perturbation, -perturbation)
    precision_matrix += perturbation
    
    # Non-linear transformation to favor short paths
    precision_matrix = np.log(1 + precision_matrix)
    
    # Normalize the heuristic matrix to ensure it is non-negative
    precision_matrix = np.clip(precision_matrix, 0, np.inf)
    
    return precision_matrix
```
