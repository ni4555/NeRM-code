```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Introduce penalties for edges that contribute less to the shortest path
    shortest_path_lengths = np.min(distance_matrix, axis=1)
    penalty_factor = (np.max(distance_matrix, axis=1) - shortest_path_lengths) / shortest_path_lengths
    penalty_matrix = 1 + penalty_factor
    precision_matrix = precision_matrix * penalty_matrix
    
    # Incorporate a smoothness term to the heuristic matrix
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    heuristic_matrix = precision_matrix * smoothness_factor
    
    # Introduce random perturbations to encourage exploration
    perturbation = np.random.rand(*distance_matrix.shape) * 0.1
    perturbation_matrix = np.where(np.random.rand(*distance_matrix.shape) < 0.5, perturbation, -perturbation)
    heuristic_matrix = np.where(np.random.rand(*distance_matrix.shape) < 0.5, heuristic_matrix + perturbation_matrix, heuristic_matrix)
    
    # Normalize the final heuristic matrix to ensure that it's of the same shape as the input
    max_value = np.max(heuristic_matrix)
    min_value = np.min(heuristic_matrix)
    normalized_heuristic_matrix = (heuristic_matrix - min_value) / (max_value - min_value)
    
    return normalized_heuristic_matrix
```
