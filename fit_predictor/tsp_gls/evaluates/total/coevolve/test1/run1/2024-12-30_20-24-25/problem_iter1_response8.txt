```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate Manhattan distance as a heuristic for each edge
    Manhattan = np.abs(distance_matrix - np.tril(np.abs(distance_matrix), -1)).sum(axis=0)
    
    # Calculate diagonal distance as a heuristic for each edge
    Diagonal = np.sqrt(np.diagonal(distance_matrix, k=1) ** 2 + np.diagonal(distance_matrix, k=-1) ** 2)
    
    # Combine the two heuristics using a weighted sum, with weights adapted based on the problem domain
    precision_weight = 0.5
    diagonal_weight = 0.5
    
    # Apply the weighted sum to get the heuristic values
    heuristic_values = (precision_weight * Manhattan + diagonal_weight * Diagonal) / (precision_weight + diagonal_weight)
    
    # Invert the heuristic values to make them a cost indicator (lower is better)
    heuristic_matrix = 1 / heuristic_values
    
    return heuristic_matrix
```
