```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, mutation_rate: float = 0.05, smoothness_factor: float = 0.1) -> np.ndarray:
    # Calculate the Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Introduce a penalty for the longest edge in each row to discourage it from being included
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty, np.inf, heuristic_matrix)
    
    # Apply mutation to introduce diversity
    num_rows, num_cols = distance_matrix.shape
    to_mutate = np.random.rand(num_rows, num_cols) < mutation_rate
    to_mutate = to_mutate.astype(int)
    mutation_matrix = np.where(to_mutate, np.random.rand(num_rows, num_cols), distance_matrix)
    
    # Normalize the mutation matrix to create a precision mutation matrix
    mutation_precision_matrix = mutation_matrix / np.sum(mutation_matrix, axis=0, keepdims=True)
    
    # Incorporate a smoothness term to the heuristic matrix
    smoothness_factor = np.exp(-smoothness_factor * np.abs(distance_matrix - np.mean(distance_matrix)))
    heuristic_matrix = heuristic_matrix * smoothness_factor
    
    # Combine the heuristic and mutation precision matrices
    combined_precision_matrix = (precision_matrix + mutation_precision_matrix) / 2
    
    return combined_precision_matrix
```
