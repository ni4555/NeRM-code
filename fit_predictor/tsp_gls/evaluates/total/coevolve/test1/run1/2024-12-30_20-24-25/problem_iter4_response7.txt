```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    row_sums = np.sum(heuristic_matrix, axis=1, keepdims=True)
    row_sums[row_sums == 0] = 1  # Avoid division by zero
    precision_matrix = heuristic_matrix / row_sums
    
    # Introduce penalties for the longest edge in each row
    penalties = np.max(distance_matrix, axis=1, keepdims=True)
    precision_matrix = np.where(distance_matrix == penalties, np.inf, precision_matrix)
    
    # Incorporate a smoothness term to the heuristic matrix
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    precision_matrix = precision_matrix * smoothness_factor
    
    # Normalize to ensure the values are between 0 and 1
    min_val, max_val = np.min(precision_matrix), np.max(precision_matrix)
    normalized_matrix = (precision_matrix - min_val) / (max_val - min_val)
    
    return normalized_matrix
```
