```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the precision heuristic matrix using the Manhattan distance
    n = distance_matrix.shape[0]
    Manhattan_dist = np.abs(np.subtract.outer(range(n), range(n)))
    precision_matrix = Manhattan_dist / Manhattan_dist.max()
    
    # Introduce a noise factor to encourage exploration
    noise_factor = np.random.rand(*precision_matrix.shape) * 0.05
    
    # Create a heuristic matrix by combining the precision matrix with noise
    heuristic_matrix = precision_matrix + noise_factor
    
    # Normalize the heuristic matrix to ensure it is non-negative and bounded
    heuristic_matrix = np.clip(heuristic_matrix, 0, np.inf)
    
    # Adjust the heuristic matrix based on the number of cities
    num_cities = distance_matrix.shape[0]
    adjustment_factor = num_cities * (1 / (num_cities - 1))
    heuristic_matrix *= adjustment_factor
    
    # Introduce a local search factor to encourage the inclusion of longer edges in the initial solution
    local_search_factor = np.random.rand(*heuristic_matrix.shape) * 0.1
    heuristic_matrix -= local_search_factor
    
    # Cap the values to ensure the heuristic does not suggest including very long edges
    capped_heuristic_matrix = np.clip(heuristic_matrix, 0, 1)
    
    return capped_heuristic_matrix
```
