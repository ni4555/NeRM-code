```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Define the precision heuristic matrix using the Manhattan distance
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    heuristic_sum = np.sum(heuristic_matrix, axis=0, keepdims=True)
    precision_matrix = np.where(heuristic_sum == 0, 1, heuristic_matrix / heuristic_sum)
    
    # Employ non-linear transformations for precision
    precision_matrix = np.log1p(precision_matrix)
    
    # Introduce penalties and perturbations to diversify search
    perturbation_factor = np.mean(precision_matrix) * 0.01
    perturbation = np.random.normal(0, perturbation_factor, precision_matrix.shape)
    precision_matrix += perturbation
    
    # Introduce penalties for the longest edges in each row
    penalty = np.max(distance_matrix, axis=1, keepdims=True)
    precision_matrix = np.where(distance_matrix == penalty, np.inf, precision_matrix)
    
    # Refine heuristics with local insights and balance exploration with exploitation
    adjustment_factor = np.exp(-np.sum(precision_matrix**2, axis=0, keepdims=True) / num_edges)
    precision_matrix *= adjustment_factor
    
    # Ensure that the precision matrix remains positive
    precision_matrix = np.clip(precision_matrix, 0, np.inf)
    
    return precision_matrix
```
