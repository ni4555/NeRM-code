```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance heuristic
    heuristic_matrix = np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                             np.min(distance_matrix, axis=1, keepdims=True))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    precision_matrix = heuristic_matrix / np.sum(heuristic_matrix, axis=0, keepdims=True)
    
    # Introduce penalties for longest edge in each row and shortest edge in each column
    penalty_row = np.max(distance_matrix, axis=1, keepdims=True)
    penalty_col = np.min(distance_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(distance_matrix == penalty_row, np.inf, 
                                np.where(distance_matrix == penalty_col, np.inf, heuristic_matrix))
    
    # Incorporate a smoothness term to the heuristic matrix
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    heuristic_matrix = heuristic_matrix * smoothness_factor
    
    # Non-linear transformation to favor short paths
    heuristic_matrix = np.log(1 + heuristic_matrix)
    
    return heuristic_matrix
```
