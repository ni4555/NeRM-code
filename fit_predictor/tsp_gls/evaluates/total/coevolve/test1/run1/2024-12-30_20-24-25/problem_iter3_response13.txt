```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a precision heuristic matrix
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distance matrix to prevent scale bias
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Apply different perturbations for the heuristic matrix
    perturbation1 = np.abs(normalized_matrix - 0.5)
    perturbation2 = np.exp(-0.5 * np.abs(normalized_matrix - 0.5))
    
    # Combine perturbations to create a diverse heuristic matrix
    heuristic_matrix = perturbation1 * perturbation2
    
    # Adjust the heuristic matrix based on the problem scale
    if distance_matrix.shape[0] > 50:
        heuristic_matrix *= 0.9
    
    # Introduce a smoothness term using a non-linear transformation
    smoothness_factor = np.exp(-0.1 * np.abs(normalized_matrix - 0.5))
    heuristic_matrix = heuristic_matrix * smoothness_factor
    
    # Apply a penalty for the longest edge in each row
    penalty = np.max(normalized_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(normalized_matrix == penalty, np.inf, heuristic_matrix)
    
    return heuristic_matrix
```
