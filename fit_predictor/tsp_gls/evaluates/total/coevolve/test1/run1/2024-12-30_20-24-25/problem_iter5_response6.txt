```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Define the precision heuristic matrix using a non-linear transformation
    heuristic_matrix = np.exp(np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                                   np.min(distance_matrix, axis=1, keepdims=True)))
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    heuristic_sum = np.sum(heuristic_matrix, axis=0, keepdims=True)
    precision_matrix = np.where(heuristic_sum == 0, 1, heuristic_matrix / heuristic_sum)
    
    # Introduce variability and perturbation to enhance exploration
    perturbation_factor = np.mean(precision_matrix) * 0.01
    perturbation = np.random.normal(0, perturbation_factor, precision_matrix.shape)
    precision_matrix += perturbation
    
    # Introduce penalties for edges that are likely to lead to suboptimal solutions
    for i in range(num_edges):
        row, col = np.where(distance_matrix == distance_matrix[i])
        if len(row) > 0:
            penalty = distance_matrix[i]
            precision_matrix[row, col] += penalty
    
    # Refine heuristics with local insights and balance exploration with exploitation
    local_insight_factor = 0.1
    precision_matrix *= (1 - local_insight_factor)
    precision_matrix += np.random.rand(*precision_matrix.shape) * local_insight_factor
    
    # Ensure that the precision matrix remains positive
    precision_matrix = np.clip(precision_matrix, 0, np.inf)
    
    # Adjust the precision matrix based on the context of the problem
    num_cities = distance_matrix.shape[0]
    adjustment_factor = num_cities * (1 / (num_cities - 1))
    precision_matrix *= adjustment_factor
    
    return precision_matrix
```
