```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the Chebyshev distance as an estimate of edge length
    max_distance = np.max(distance_matrix)
    # Create a heuristic matrix where each cell represents a relative distance
    # Normalize by the maximum distance to keep values between 0 and 1
    heuristic_matrix = distance_matrix / max_distance
    
    # Calculate the mean distance to create a precision heuristic
    mean_distance = np.mean(distance_matrix)
    # Create a precision heuristic matrix
    precision_heuristic = np.exp(-0.5 * (distance_matrix - mean_distance)**2)
    
    # Combine the heuristic matrix with the precision heuristic
    # This emphasizes short edges and provides a more nuanced heuristic
    combined_heuristic = heuristic_matrix * precision_heuristic
    
    # Adjust the heuristic matrix to encourage diversity and exploration
    # by adding a small random factor
    random_factor = np.random.normal(0, 0.01, combined_heuristic.shape)
    adjusted_heuristic = combined_heuristic + random_factor
    
    # Normalize the adjusted heuristic matrix to ensure non-negative values
    # and to maintain a consistent scale
    adjusted_heuristic = np.clip(adjusted_heuristic, 0, np.inf)
    
    return adjusted_heuristic
```
