```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Calculate the Euclidean distance between all pairs of points
    Euclidean_dist = np.sqrt(np.sum((npsubtract.outer(range(n), range(n))) ** 2, axis=1))
    
    # Normalize Euclidean distance by the maximum distance to create a heuristic matrix
    heuristic_matrix = Euclidean_dist / Euclidean_dist.max()
    
    # Calculate the minimum distance between each point and all other points to identify the nearest neighbors
    min_dist_to_all = np.min(distance_matrix, axis=1)
    
    # Adjust the heuristic matrix by considering the nearest neighbors to avoid trivial paths
    adjusted_heuristic_matrix = heuristic_matrix + np.subtract(1, min_dist_to_all.reshape(n, 1))
    
    # Introduce a random noise to the heuristic matrix to prevent premature convergence
    noise_factor = np.random.rand(*adjusted_heuristic_matrix.shape) * 0.1
    noisy_heuristic_matrix = adjusted_heuristic_matrix + noise_factor
    
    # Cap the values to ensure the heuristic does not suggest including very long edges
    capped_heuristic_matrix = np.clip(noisy_heuristic_matrix, 0, 1)
    
    # Introduce a weight factor that diminishes the effect of edges that are close to the maximum distance
    max_distance = np.max(distance_matrix)
    weight_factor = (1 - (Euclidean_dist / max_distance)) ** 2
    weighted_heuristic_matrix = capped_heuristic_matrix * weight_factor
    
    return weighted_heuristic_matrix
```
