```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the Chebyshev distance as an estimate of edge length
    max_distance = np.max(distance_matrix)
    # Normalize the distance matrix by the maximum distance
    normalized_matrix = distance_matrix / max_distance
    
    # Use the mean distance as a base heuristic and the max distance as a penalty
    mean_distance = np.mean(distance_matrix)
    heuristic_matrix = np.abs(normalized_matrix - mean_distance)
    
    # Introduce a precision heuristic to emphasize short edges
    precision_factor = np.exp(-0.5 * (normalized_matrix - np.mean(normalized_matrix))**2)
    
    # Combine the base heuristic with the precision heuristic
    adjusted_heuristic_matrix = heuristic_matrix * precision_factor
    
    # Apply a penalty to edges that are significantly longer than the average to prevent them
    penalty_threshold = 1.5 * mean_distance
    penalty_matrix = np.where(normalized_matrix > penalty_threshold, 
                               np.inf, 
                               adjusted_heuristic_matrix)
    
    return penalty_matrix
```
