```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Compute the Euclidean distance between all pairs of points
    Euclidean_dist = np.sqrt(np.add.outer(np.square(range(n)), np.square(range(n))))
    
    # Normalize the Euclidean distance by the maximum distance to create a heuristic matrix
    heuristic_matrix = Euclidean_dist / Euclidean_dist.max()
    
    # Calculate the minimum distance between each point and all other points to identify the nearest neighbors
    min_dist_to_all = np.min(distance_matrix, axis=1)
    
    # Adjust the heuristic matrix by considering the nearest neighbors to avoid trivial paths
    adjusted_heuristic_matrix = heuristic_matrix + np.subtract(1, min_dist_to_all.reshape(n, 1))
    
    # Introduce a precision heuristic to emphasize shorter edges
    precision_factor = np.exp(-0.5 * (distance_matrix - np.mean(distance_matrix))**2)
    
    # Combine the heuristic matrix with the precision heuristic to get a more refined estimate
    refined_heuristic_matrix = adjusted_heuristic_matrix * precision_factor
    
    # Introduce randomness to the refined heuristic matrix to avoid local optima
    noise_factor = np.random.rand(*refined_heuristic_matrix.shape) * 0.1
    noisy_heuristic_matrix = refined_heuristic_matrix + noise_factor
    
    # Cap the values to ensure the heuristic does not suggest including very long edges
    capped_heuristic_matrix = np.clip(noisy_heuristic_matrix, 0, 1)
    
    # Adjust the matrix to reflect the relative importance of each edge
    adjusted_capped_matrix = capped_heuristic_matrix / np.sum(capped_heuristic_matrix, axis=0, keepdims=True)
    
    return adjusted_capped_matrix
```
