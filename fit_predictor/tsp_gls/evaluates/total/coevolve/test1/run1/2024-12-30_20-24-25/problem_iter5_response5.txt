```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Define the precision heuristic matrix using the Chebyshev distance
    heuristic_matrix = np.max(np.abs(distance_matrix - np.min(distance_matrix, axis=0) - 
                                    np.min(distance_matrix, axis=1, keepdims=True)), axis=2)
    
    # Normalize the heuristic matrix to create a precision heuristic matrix
    heuristic_sum = np.sum(heuristic_matrix, axis=0, keepdims=True)
    precision_matrix = np.where(heuristic_sum == 0, 1, heuristic_matrix / heuristic_sum)
    
    # Introduce variability and perturbation to enhance exploration
    perturbation_factor = np.mean(precision_matrix) * 0.01
    perturbation = np.random.normal(0, perturbation_factor, precision_matrix.shape)
    precision_matrix += perturbation
    
    # Introduce penalties for edges that are outliers based on the median distance
    median_distance = np.median(distance_matrix, axis=0)
    precision_matrix = np.where(distance_matrix > median_distance + np.std(distance_matrix, axis=0), np.inf, precision_matrix)
    
    # Adjust the precision matrix based on the context of the problem and the fitness threshold
    num_cities = distance_matrix.shape[0]
    adjustment_factor = num_cities * (1 / (num_cities - 1))
    precision_matrix *= adjustment_factor
    
    # Refine heuristics with local insights by considering edge connections within the neighborhood
    for i in range(num_edges):
        neighbors = np.argsort(distance_matrix[i])[1:5]  # Consider the next 5 neighbors
        local_insight = np.mean(precision_matrix[neighbors]) * 0.9
        precision_matrix[i] *= local_insight
    
    # Ensure that the precision matrix remains positive
    precision_matrix = np.clip(precision_matrix, 0, np.inf)
    
    return precision_matrix
```
