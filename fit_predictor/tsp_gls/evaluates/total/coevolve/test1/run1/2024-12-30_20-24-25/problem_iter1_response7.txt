```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance for each row
    row_averages = np.mean(distance_matrix, axis=1)
    
    # Calculate the average distance for each column
    col_averages = np.mean(distance_matrix, axis=0)
    
    # Calculate the variance of each row
    row_variances = np.var(distance_matrix, axis=1)
    
    # Calculate the variance of each column
    col_variances = np.var(distance_matrix, axis=0)
    
    # Combine the metrics to create a heuristic matrix
    heuristic_matrix = row_averages + col_averages + row_variances + col_variances
    
    # Scale the heuristic matrix to ensure values are between 0 and 1
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)
    heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    # Invert the heuristic matrix to make shorter edges more desirable
    return 1 - heuristic_matrix
```
