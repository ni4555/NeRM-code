```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.shape[0]
    precision_matrix = np.zeros_like(distance_matrix)
    
    # Heuristic based on the weighted average distance
    weighted_avg_matrix = distance_matrix - np.mean(distance_matrix, axis=0, keepdims=True)
    weighted_avg_matrix = np.where(weighted_avg_matrix == 0, 1, np.abs(weighted_avg_matrix))
    precision_matrix = weighted_avg_matrix / np.sum(weighted_avg_matrix, axis=1, keepdims=True)
    
    # Introduce non-linear transformations for precision
    precision_matrix = np.tanh(precision_matrix)
    
    # Dynamic mutation strategies based on the standard deviation of the distances
    std_dev_matrix = np.std(distance_matrix, axis=1, keepdims=True)
    mutation_factor = std_dev_matrix * 0.1
    mutation = np.random.normal(0, mutation_factor, precision_matrix.shape)
    precision_matrix += mutation
    
    # Adaptive selection criteria: penalize high variance
    variance = np.var(distance_matrix, axis=1, keepdims=True)
    precision_matrix = np.where(variance > np.mean(variance), precision_matrix * 0.9, precision_matrix)
    
    # Refine heuristics based on local insights: favor shorter edges
    local_insight_factor = np.min(distance_matrix, axis=1, keepdims=True)
    precision_matrix = np.where(distance_matrix > local_insight_factor, precision_matrix * 0.8, precision_matrix)
    
    # Ensure the precision matrix is within a valid range
    precision_matrix = np.clip(precision_matrix, 0, 1)
    
    return precision_matrix
```
