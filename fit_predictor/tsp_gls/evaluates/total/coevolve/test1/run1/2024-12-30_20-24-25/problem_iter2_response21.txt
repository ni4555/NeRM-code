```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance between all pairs of points
    n = distance_matrix.shape[0]
    Manhattan_dist = np.abs(np.subtract.outer(range(n), range(n)))
    
    # Normalize Manhattan distance by the maximum distance to create a heuristic matrix
    heuristic_matrix = Manhattan_dist / Manhattan_dist.max()
    
    # Calculate the minimum distance between each point and all other points to identify the nearest neighbors
    min_dist_to_all = np.min(distance_matrix, axis=1)
    
    # Adjust the heuristic matrix by considering the nearest neighbors to avoid trivial paths
    adjusted_heuristic_matrix = heuristic_matrix + np.subtract(1, min_dist_to_all.reshape(n, 1))
    
    # Introduce a random noise to the heuristic matrix to prevent premature convergence
    noise_factor = np.random.rand(*adjusted_heuristic_matrix.shape) * 0.1
    noisy_heuristic_matrix = adjusted_heuristic_matrix + noise_factor
    
    # Cap the values to ensure the heuristic does not suggest including very long edges
    capped_heuristic_matrix = np.clip(noisy_heuristic_matrix, 0, 1)
    
    # Apply a precision heuristic matrix to amplify the effect of short distances
    precision_factor = 1 / (1 + distance_matrix)
    precision_transformed = 1 / (1 + np.exp(-precision_factor))
    amplified_heuristic_matrix = capped_heuristic_matrix * precision_transformed
    
    # Normalize the amplified heuristic matrix to ensure that it's of the same shape as the input
    max_value = np.max(amplified_heuristic_matrix)
    min_value = np.min(amplified_heuristic_matrix)
    normalized_heuristic_matrix = (amplified_heuristic_matrix - min_value) / (max_value - min_value)
    
    return normalized_heuristic_matrix
```
