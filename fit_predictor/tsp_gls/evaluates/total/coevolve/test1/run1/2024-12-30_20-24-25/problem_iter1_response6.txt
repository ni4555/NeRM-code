```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a precision heuristic matrix using a simple heuristic:
    # estimate distance between cities as the maximum of their pairwise distances
    precision_heuristic_matrix = np.maximum.reduce(distance_matrix, axis=0)
    
    # Calculate the inverse of the precision heuristic matrix as a heuristic indicator
    # It's bad to include long edges, so we use a high cost for them
    heuristic_matrix = 1 / (precision_heuristic_matrix + 1e-10)  # Add a small value to avoid division by zero
    
    # Adjust the heuristic matrix to account for the fitness threshold
    # We aim to surpass a fitness threshold of 10.617516362484723
    adjusted_heuristic_matrix = heuristic_matrix * (1 / 10.617516362484723)
    
    return adjusted_heuristic_matrix
```
