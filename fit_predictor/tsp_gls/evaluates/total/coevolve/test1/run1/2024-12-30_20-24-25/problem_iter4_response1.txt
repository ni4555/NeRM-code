```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance as a precision heuristic for each edge
    heuristic_matrix = np.sum(np.abs(distance_matrix), axis=1)
    
    # Normalize the heuristic matrix by the maximum Manhattan distance to keep values between 0 and 1
    max_mannhattan_distance = np.max(heuristic_matrix)
    normalized_heuristic_matrix = heuristic_matrix / max_mannhattan_distance
    
    # Apply a non-linear transformation to emphasize local distance relationships
    # Use a power law transformation with a power close to 1 to avoid uniform scaling
    transformed_heuristic_matrix = np.power(normalized_heuristic_matrix, 1.1)
    
    # Reflect the edge weights themselves in the heuristic
    # This ensures that the heuristic reflects the actual travel cost better
    transformed_heuristic_matrix = transformed_heuristic_matrix * (1 + distance_matrix)
    
    # Introduce a smoothness term to the heuristic matrix to avoid abrupt changes
    smoothness_factor = np.exp(-0.1 * np.abs(distance_matrix - np.mean(distance_matrix)))
    transformed_heuristic_matrix = transformed_heuristic_matrix * smoothness_factor
    
    # Adjust the heuristic matrix based on the problem scale and context
    scale_factor = np.mean(distance_matrix) / np.max(distance_matrix)
    transformed_heuristic_matrix *= scale_factor
    
    # Apply a penalty for the longest edges
    max_edge_weight = np.max(distance_matrix)
    transformed_heuristic_matrix[distance_matrix == max_edge_weight] *= 1.5
    
    return transformed_heuristic_matrix
```
