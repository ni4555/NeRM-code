```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Dynamic fusion of state-of-the-art metaheuristic algorithms
    # Adaptive neighborhood strategies
    for i in range(distance_matrix.shape[0]):
        # Guided local search enhancements
        for j in range(distance_matrix.shape[1]):
            # Real-time fitness landscape adaptation
            # Heuristic based on minimum pairwise distances among nodes
            min_pairwise_distance = np.min(distance_matrix[i])
            heuristics[i, j] = distance_matrix[i, j] / (min_pairwise_distance + 1e-6)  # Avoid division by zero
    
    # Balance local and global exploration
    # This can be done by introducing a balance factor, here we use a simple linear combination
    balance_factor = 0.5
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            heuristics[i, j] = (balance_factor * heuristics[i, j]) + ((1 - balance_factor) * distance_matrix[i, j] ** 0.5)
    
    return heuristics
```
