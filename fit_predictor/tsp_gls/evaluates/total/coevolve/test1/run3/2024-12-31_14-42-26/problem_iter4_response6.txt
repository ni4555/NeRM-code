```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Define a range of scales for multi-scale analysis
    scales = np.array([1, 2, 3])
    
    # Iterate over all pairs of nodes to calculate the heuristic
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                # Base heuristic using the inverse distance
                heuristics[i, j] = 1 / distance_matrix[i, j]
                
                # Calculate minimum distance to a common neighbor
                min_common_neighbor_distance = np.min(distance_matrix[i][distance_matrix[i] != distance_matrix[i, j]] +
                                                     distance_matrix[j][distance_matrix[j] != distance_matrix[i, j]])
                heuristics[i, j] += 1 / min_common_neighbor_distance
                
                # Calculate average distance to common neighbors
                common_neighbors_distances = np.concatenate((distance_matrix[i][distance_matrix[i] != distance_matrix[i, j]],
                                                            distance_matrix[j][distance_matrix[j] != distance_matrix[i, j]]))
                avg_common_neighbor_distance = np.mean(common_neighbors_distances)
                heuristics[i, j] += 1 / avg_common_neighbor_distance
                
                # Calculate diversity of distances to common neighbors
                diversity = np.std(common_neighbors_distances)
                heuristics[i, j] += 1 / (1 + diversity)
                
                # Multi-scale analysis
                for scale in scales:
                    # Extract local structure at the current scale
                    local_structure = distance_matrix[max(0, i-scale):min(distance_matrix.shape[0], i+scale+1),
                                                       max(0, j-scale):min(distance_matrix.shape[0], j+scale+1)]
                    local_structure[local_structure == np.inf] = 0  # Replace inf with 0
                    structure_score = np.mean(local_structure)
                    heuristics[i, j] += structure_score
                
                # Normalize heuristic value
                max_val = np.max(heuristics[i, :])
                min_val = np.min(heuristics[i, :])
                heuristics[i, j] = (heuristics[i, j] - min_val) / (max_val - min_val)
    
    return heuristics
```
