```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Calculate the sum of the minimum pairwise distances for each node
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Find the node k that minimizes the distance to i and j
            k = np.argmin(np.min(np.stack((distance_matrix[i], distance_matrix[j]), axis=0), axis=0))
            # Compute the heuristic as the weighted average of the distances to k
            heuristics[i, j] = (distance_matrix[i, k] + distance_matrix[j, k]) / 2
    
    return heuristics
```
