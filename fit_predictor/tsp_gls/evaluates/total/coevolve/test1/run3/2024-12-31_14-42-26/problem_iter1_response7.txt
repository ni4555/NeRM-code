```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the heuristic values using the minimum pairwise distances
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Calculate the minimum pairwise distances from node i
            min_dist_from_i = np.partition(distance_matrix[i], 2)[:2]
            min_dist_from_i = np.sort(min_dist_from_i)[1]  # Exclude the distance to itself
            
            # Calculate the minimum pairwise distances from node j
            min_dist_from_j = np.partition(distance_matrix[j], 2)[:2]
            min_dist_from_j = np.sort(min_dist_from_j)[1]  # Exclude the distance to itself
            
            # Calculate the heuristic as the average of the two minimum distances
            heuristics[i, j] = (min_dist_from_i + min_dist_from_j) / 2.0
    
    return heuristics
```
