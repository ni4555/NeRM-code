```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the heuristic values with a combination of strategies
    # 1. Adaptive neighborhood strategies: Use a decreasing step to calculate the average distance from each node
    step = 1.0
    while step > 0:
        average_distances = np.apply_along_axis(lambda x: np.sum(x) / x.size, 1, distance_matrix)
        heuristics += step * (1 / (average_distances + 1e-8))
        step *= 0.9  # Decrease the step size exponentially
    
    # 2. Guided local search enhancements: Add the influence of the nearest neighbors
    for i in range(distance_matrix.shape[0]):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[:5]  # Top 5 nearest neighbors
        for j in nearest_neighbors:
            if i != j:
                heuristics[i, j] += 0.1
    
    # 3. Real-time fitness landscape adaptation: Introduce a fitness landscape that adapts based on the minimum pairwise distances
    min_distances = np.min(distance_matrix, axis=1)
    heuristics += 0.2 * (min_distances / (min_distances + 1e-8))
    
    # Normalize the heuristics to ensure a balanced approach
    heuristics /= np.max(heuristics)
    
    return heuristics
```
