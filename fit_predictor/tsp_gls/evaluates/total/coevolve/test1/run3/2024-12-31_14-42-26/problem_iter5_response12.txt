```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement the logic to compute the heuristic values
    # This function will include adaptive neighborhood strategies and guided local search enhancements
    # For simplicity, we will use a more sophisticated heuristic:
    # The heuristic will be a combination of the distance and the degree of connectivity of the node
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the basic heuristic value (e.g., distance)
                base_heuristic = distance_matrix[i, j] ** 0.5
                
                # Calculate the degree of connectivity as a weight
                degree_weight = (distance_matrix[i, :] != 0).sum() * (distance_matrix[:, j] != 0).sum()
                
                # Combine the base heuristic with the degree of connectivity
                heuristics[i, j] = base_heuristic * degree_weight
    
    # Introduce dynamic real-time fitness landscape adaptation
    # This is a simplified example: adjust the heuristic based on the mean distance
    mean_distance = np.mean(distance_matrix)
    heuristics *= (mean_distance / np.mean(heuristics))
    
    return heuristics
```
