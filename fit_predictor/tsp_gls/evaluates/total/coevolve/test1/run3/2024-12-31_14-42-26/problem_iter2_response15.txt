```python
import numpy as np
from scipy.spatial.distance import pdist, squareform

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute pairwise Manhattan distances
    pairwise_distances = pdist(distance_matrix, metric='cityblock')
    
    # Compute the variance of the pairwise distances to adjust the landscape
    distance_variance = np.var(pairwise_distances)
    
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Invert the preference to favor longer distances, as higher variance indicates a more rugged landscape
    heuristics = 1 / (1 + pairwise_distances) ** (1 + distance_variance)
    
    return heuristics
```
