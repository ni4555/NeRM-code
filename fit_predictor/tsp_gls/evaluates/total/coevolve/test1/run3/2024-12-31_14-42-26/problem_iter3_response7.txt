```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement a more sophisticated heuristic
    # This heuristic considers a combination of distance, a random factor, and a dynamic adjustment based on the average distance
    avg_distance = np.mean(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Random factor to encourage diversity in exploration
            random_factor = np.random.rand()
            # Dynamic adjustment based on the average distance
            dynamic_adjustment = (distance_matrix[i, j] - avg_distance) / avg_distance
            # Combine factors and square root to balance exploration and exploitation
            heuristics[i, j] = (distance_matrix[i, j] ** 0.5) * (1 + random_factor * dynamic_adjustment)
    
    return heuristics
```
