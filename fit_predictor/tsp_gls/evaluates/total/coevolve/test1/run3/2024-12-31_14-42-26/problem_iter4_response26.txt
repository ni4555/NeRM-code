```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_dev = np.std(distance_matrix)
    
    # Define a Gaussian function to represent the influence of each node
    def gaussian_influence(distance, mean, std):
        return np.exp(-((distance - mean) ** 2) / (2 * std ** 2))
    
    # Calculate the heuristics matrix using Gaussian influence
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = gaussian_influence(distance_matrix[i, j], mean_distance, std_dev)
    
    # Normalize the heuristics to ensure a better distribution
    max_val = np.max(heuristics)
    min_val = np.min(heuristics)
    heuristics = (heuristics - min_val) / (max_val - min_val)
    
    return heuristics
```
