```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement a more sophisticated heuristic: use a Gaussian distribution
    # to simulate the influence of nearby cities based on their distance
    mean_distance = np.mean(distance_matrix)
    std_dev = np.std(distance_matrix)
    
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            heuristics[i, j] = np.exp(-((distance_matrix[i, j] - mean_distance) ** 2) / (2 * std_dev ** 2))
    
    # Normalize the heuristics to ensure a better distribution
    max_val = np.max(heuristics)
    min_val = np.min(heuristics)
    heuristics = (heuristics - min_val) / (max_val - min_val)
    
    return heuristics
```
