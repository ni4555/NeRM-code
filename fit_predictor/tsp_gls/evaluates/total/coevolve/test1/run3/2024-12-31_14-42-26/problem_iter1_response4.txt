```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement a more sophisticated heuristic that incorporates
    # both the distance and the structure of the graph
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the distance
                distance = distance_matrix[i, j]
                # Calculate the minimum distance to a common neighbor
                min_common_neighbor_distance = np.min(distance_matrix[i, :][distance_matrix[i, :] != distance] +
                                                     distance_matrix[j, :][distance_matrix[j, :] != distance])
                # Incorporate the structure with the average of distances to neighbors
                avg_neighbor_distance = np.mean(distance_matrix[i, :][distance_matrix[i, :] != distance] +
                                                 distance_matrix[j, :][distance_matrix[j, :] != distance])
                # The heuristic value is a combination of the above factors
                heuristics[i, j] = distance ** 0.5 + (min_common_neighbor_distance + avg_neighbor_distance) / 2
    
    return heuristics
```
