```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Adaptively compute the heuristic values based on minimum pairwise distances
    # and incorporate an intelligent exploration-exploitation strategy
    for i in range(distance_matrix.shape[0]):
        # Find the minimum distance to each node starting from the ith node
        min_distances = np.sort(distance_matrix[i, :])
        
        # Introduce a strategy to balance exploration and exploitation
        # For example, we can use the kth smallest distance for exploration
        # and the average of the k smallest distances for exploitation
        exploration_distance = min_distances[1]  # Exploration: next smallest
        exploitation_distance = np.mean(min_distances[:3])  # Exploitation: average of top 3
        
        # Assign heuristics based on the balance between exploration and exploitation
        heuristics[i, min_distances < exploration_distance] = 1.0  # Exploration edges
        heuristics[i, min_distances < exploitation_distance] = 0.5  # Exploitation edges
    
    return heuristics
```
