```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement adaptive neighborhood strategies and guided local search enhancements
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Evaluate the minimum pairwise distances among nodes dynamically
            # This is a simplified version, using the sum of distances to neighboring nodes
            neighbors = np.where(distance_matrix[i] < np.percentile(distance_matrix[i], 25))[0]
            min_distance_to_neighbors = np.min(distance_matrix[i, neighbors])
            heuristics[i, j] = distance_matrix[i, j] / (min_distance_to_neighbors + 1)
    
    # Apply real-time fitness landscape adaptation
    # Here we use the average heuristic value as a fitness landscape adaptation factor
    average_heuristic_value = np.mean(heuristics)
    heuristics *= 1 / average_heuristic_value
    
    return heuristics
```
