```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the heuristic values using a combination of strategies
    # 1. Adaptive neighborhood strategies: Adjust neighborhood size based on iteration
    neighborhood_size = distance_matrix.shape[0] // 5
    
    # 2. Guided local search enhancements: Use the best neighboring solution to inform heuristic
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the adaptive heuristic based on the distance and the size of the neighborhood
                heuristics[i, j] = distance_matrix[i, j] ** 0.5 + neighborhood_size / (1 + np.exp(-distance_matrix[i, j]))
    
    # 3. Real-time fitness landscape adaptation: Use the best heuristic value as a bias
    best_heuristic = np.max(heuristics)
    heuristics *= 1 - best_heuristic / np.max(distance_matrix)
    
    return heuristics
```
