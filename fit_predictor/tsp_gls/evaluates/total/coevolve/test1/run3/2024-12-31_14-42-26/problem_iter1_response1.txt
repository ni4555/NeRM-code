```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Initialize a random starting point for the heuristic calculation
    random_seed = np.random.randint(0, 1000)
    np.random.seed(random_seed)
    
    # Compute the heuristic values using the Floyd-Warshall algorithm to find the shortest paths
    # and then adapt them based on a dynamic factor
    for i in range(n):
        for j in range(n):
            heuristics[i, j] = (1 - np.exp(-np.linalg.norm(np.random.rand(2) * (distance_matrix[i, :] + distance_matrix[:, j])))) * distance_matrix[i, j]
    
    # Adapt heuristics based on a dynamic factor that depends on the fitness landscape
    # For simplicity, we use the minimum pairwise distance as the fitness landscape
    min_pairwise_distance = np.min(distance_matrix)
    heuristics *= 1 + min_pairwise_distance / np.sum(distance_matrix)
    
    return heuristics
```
