```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Calculate the sum of the minimum pairwise distances for each node
    n = distance_matrix.shape[0]
    for i in range(n):
        min_distances = np.min(distance_matrix[i], axis=0)
        heuristics[i] = np.dot(min_distances, np.arange(n)) / n**2
    
    # Incorporate adaptive neighborhood strategies and guided local search enhancements
    # Introduce a penalty for edges that connect nodes in the immediate neighborhood
    for i in range(n):
        for j in range(n):
            if i != j:
                if abs(i - j) == 1 or abs(i - j) == n - 1:  # Neighbors
                    heuristics[i, j] += 0.1  # Increase penalty
    
    # Implement real-time fitness landscape adaptation by adjusting heuristics
    # based on the average shortest path from the center of the matrix to all other nodes
    center = n // 2
    average_min_distance = np.mean(np.min(distance_matrix[center], axis=0))
    heuristics += (1 / average_min_distance) * np.where(distance_matrix > average_min_distance, 1, 0)
    
    return heuristics
```
