```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement the logic to compute the heuristic values
    # The following heuristic incorporates a dynamic element based on the minimum pairwise distances
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Calculate the heuristic based on the distance to the closest neighbor
            closest_neighbor = np.argmin(distance_matrix[i, :])
            heuristics[i, j] = distance_matrix[i, j] / (distance_matrix[i, closest_neighbor] + 1e-6)
    
    # Apply adaptive neighborhood strategies
    # Here, we could implement a more complex heuristic that considers the local neighborhood
    # For simplicity, we will use a modified version of the above heuristic that considers the second closest neighbor
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            second_closest_neighbor = np.argsort(distance_matrix[i, :])[1]
            heuristics[i, j] = (distance_matrix[i, j] / (distance_matrix[i, second_closest_neighbor] + 1e-6)) * 0.8
    
    return heuristics
```
