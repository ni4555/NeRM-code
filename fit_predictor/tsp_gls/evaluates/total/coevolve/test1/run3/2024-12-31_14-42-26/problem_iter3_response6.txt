```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the heuristic values using a dynamic fusion of strategies
    # This is a conceptual example, the actual implementation would be more complex
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Example heuristic: a combination of distance and some adaptive factor
            distance = distance_matrix[i, j]
            adaptive_factor = np.random.rand() * (1 / (distance + 1))  # Random factor to simulate adaptation
            heuristics[i, j] = distance ** 0.5 + adaptive_factor
    
    # Further refine the heuristics by considering local and global aspects
    # This is a conceptual example, the actual implementation would be more complex
    # For example, we could use a guided local search to enhance the heuristics
    for k in range(distance_matrix.shape[0]):
        for l in range(distance_matrix.shape[1]):
            # Example of guided local search enhancement
            guided_factor = np.random.rand() * (1 / (distance_matrix[k, l] + 1))  # Guided factor
            heuristics[k, l] += guided_factor
    
    return heuristics
```
