```python
import numpy as np
from scipy.spatial.distance import pdist

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the pairwise Euclidean distances
    pairwise_distances = pdist(distance_matrix, metric='euclidean')
    
    # Normalize the distances to ensure they are within the range [0, 1]
    normalized_distances = (pairwise_distances - np.min(pairwise_distances)) / (np.max(pairwise_distances) - np.min(pairwise_distances))
    
    # Apply a non-linear transformation to the normalized distances to encourage exploration
    # Here we use a logarithmic transformation to further amplify the differences between short and long distances
    heuristics = np.log(1 + normalized_distances)
    
    # Adjust the heuristics matrix to match the input shape
    heuristics_matrix = squareform(heuristics)
    
    return heuristics_matrix
```
