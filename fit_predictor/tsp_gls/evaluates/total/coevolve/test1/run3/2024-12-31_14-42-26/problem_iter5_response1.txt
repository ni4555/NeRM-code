```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Improved heuristic logic
    # We use the Chebyshev distance to prioritize longer paths
    # and incorporate a decay factor for edges that are not direct neighbors
    decay_factor = 0.9
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the Chebyshev distance
                heuristics[i, j] = max(abs(i - j), distance_matrix[i, j]) * decay_factor
            else:
                # Self-loops have a very low heuristic value
                heuristics[i, j] = 1e-6
    
    return heuristics
```
