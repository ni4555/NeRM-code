```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement a sophisticated heuristic that dynamically assesses pairwise distances
    n = distance_matrix.shape[0]
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the distance between the nodes
                distance = distance_matrix[i, j]
                # Find the nearest common neighbor to both i and j
                nearest_common_neighbor = np.argmin(distance_matrix[i, distance_matrix[i] != distance] +
                                                   distance_matrix[j, distance_matrix[j] != distance])
                # Calculate the minimum distance to a common neighbor
                min_common_neighbor_distance = distance_matrix[i, nearest_common_neighbor]
                # Calculate the average distance to the neighbors of i and j
                avg_neighbor_distance_i = np.mean(distance_matrix[i, distance_matrix[i] != distance])
                avg_neighbor_distance_j = np.mean(distance_matrix[j, distance_matrix[j] != distance])
                # The heuristic value is a combination of the factors mentioned
                # Incorporating the distance, nearest common neighbor, and average distances
                heuristics[i, j] = distance ** 0.5 + (min_common_neighbor_distance + avg_neighbor_distance_i + avg_neighbor_distance_j) / 2
    
    # Adjust the heuristics to prioritize longer distances for better exploration
    heuristics = 1 / (1 + heuristics)
    
    return heuristics
```
