```python
import numpy as np
from scipy.spatial.distance import cdist

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute pairwise distances using a more sophisticated method
    pairwise_distances = cdist(distance_matrix, distance_matrix, 'cosine')
    
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(pairwise_distances, dtype=np.float64)
    
    # Compute the heuristic values based on the cosine similarity distance
    # This heuristic assumes that edges with higher cosine similarity should be preferred
    # A negative value is used to invert the preference, as we want higher heuristic values for better edges
    heuristics = 1 / (1 + pairwise_distances) ** 2
    
    return heuristics
```
