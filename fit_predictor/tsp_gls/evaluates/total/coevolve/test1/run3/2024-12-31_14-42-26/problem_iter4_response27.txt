```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Calculate the pairwise distances matrix using the Euclidean distance
    pairwise_distances = np.linalg.norm(distance_matrix[:, np.newaxis, :] - distance_matrix[np.newaxis, :, :], axis=2)
    
    # For each node pair, find the critical node that minimizes the total distance
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                k = np.argmin(pairwise_distances[i, j])
                # Compute the heuristic as the average distance to the critical node
                heuristics[i, j] = 0.5 * (pairwise_distances[i, k] + pairwise_distances[j, k])
            else:
                heuristics[i, j] = float('inf')  # No self-loop
    
    # Integrate local information by considering the best neighboring solution
    best_neighborhood_size = min(10, distance_matrix.shape[0])
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                # Calculate the local neighborhood
                local_neighborhood = np.argsort(pairwise_distances[i, j])[:best_neighborhood_size]
                # Use the best heuristic value from the neighborhood to inform heuristic computation
                best_neighborhood_heuristic = np.min(heuristics[i, local_neighborhood] + heuristics[j, local_neighborhood])
                # Adapt the heuristic value based on the local neighborhood
                heuristics[i, j] = best_neighborhood_heuristic
    
    # Adapt heuristics based on real-time performance by balancing exploration and exploitation
    exploration_weight = 0.7
    exploitation_weight = 0.3
    
    # Adjust the heuristics to reflect the balance between exploration and exploitation
    heuristics = (exploration_weight * heuristics +
                   exploitation_weight * (np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1) - heuristics))
    
    # Ensure the heuristics are in the same range as the distances
    heuristics = heuristics / np.max(distance_matrix)
    
    return heuristics
```
