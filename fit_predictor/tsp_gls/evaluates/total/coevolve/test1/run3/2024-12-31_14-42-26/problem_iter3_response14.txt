```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the heuristic values with a combination of adaptive neighborhood strategies
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Example heuristic: a combination of the distance and a dynamic factor
            # that takes into account the minimum pairwise distances among nodes
            min_pairwise_distance = np.min(distance_matrix[i, ~np.isclose(distance_matrix[i], 0)])
            heuristics[i, j] = (distance_matrix[i, j] ** 0.5) + (min_pairwise_distance ** 1.5)
    
    # Introduce an adaptive factor to balance exploration and exploitation
    exploration_factor = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])
    exploitation_factor = (1 / (1 + np.exp(-heuristics)))
    
    # Combine both factors to get the final heuristic values
    final_heuristics = exploration_factor * exploitation_factor
    
    return final_heuristics
```
