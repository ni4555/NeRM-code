```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Calculate the total distance of a simple tour (not necessarily optimal)
    n = distance_matrix.shape[0]
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (distance_matrix[i, j] + distance_matrix[i, (j + 1) % n] + distance_matrix[(j + 1) % n, i]) / n
    
    # Adjust the heuristics to favor longer distances, encouraging more exploration
    heuristics = 1 / (1 + heuristics)
    
    return heuristics
```
