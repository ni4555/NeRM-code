```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement adaptive neighborhood strategies
    neighborhood_size = distance_matrix.shape[0] // 5  # Example adaptive strategy
    
    # Implement guided local search enhancements
    for i in range(distance_matrix.shape[0]):
        # Find the edge with the highest heuristic (worst edge) within the neighborhood
        neighborhood_indices = np.argsort(heuristics[i, :])[-neighborhood_size:]
        edge_to_avoid = neighborhood_indices[np.argmax(distance_matrix[i, neighborhood_indices])]
        
        # Find the edge with the lowest heuristic within the neighborhood
        neighborhood_indices = np.argsort(heuristics[i, :])[:neighborhood_size]
        edge_to_explore = neighborhood_indices[np.argmin(distance_matrix[i, neighborhood_indices])]
        
        # Update the heuristic value based on the guided local search
        heuristics[i, edge_to_avoid] = np.inf
        heuristics[i, edge_to_explore] = -np.inf
    
    # Real-time fitness landscape adaptation
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if heuristics[i, j] == np.inf:
                heuristics[i, j] = distance_matrix[i, j]  # If infinite, use the actual distance
    
    # Balance exploration vs. exploitation
    exploration_factor = np.random.rand()
    exploitation_factor = 1 - exploration_factor
    heuristics = exploration_factor * heuristics + exploitation_factor * distance_matrix
    
    return heuristics
```
