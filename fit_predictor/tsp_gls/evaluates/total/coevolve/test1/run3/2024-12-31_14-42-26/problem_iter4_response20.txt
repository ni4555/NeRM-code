```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the pairwise Manhattan distances (as an alternative to Euclidean distances)
    pairwise_distances = pdist(distance_matrix, metric='cityblock')
    
    # Normalize the distances to ensure they are within the range [0, 1]
    normalized_distances = (pairwise_distances - np.min(pairwise_distances)) / (np.max(pairwise_distances) - np.min(pairwise_distances))
    
    # Apply a non-linear transformation using a sigmoid function to encourage exploration
    heuristics = 1 / (1 + np.exp(-normalized_distances))
    
    # Adjust the heuristics matrix to match the input shape
    heuristics_matrix = squareform(heuristics)
    
    return heuristics_matrix
```
