```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Calculate the minimum pairwise distances
    min_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the shortest path to a common neighbor for each edge
    shortest_common_neighbor_distance = np.apply_along_axis(
        lambda x: np.min(np.minimum(min_distances[x[0]], min_distances[x[1]])), 
        1, np.stack((np.arange(distance_matrix.shape[0]), np.arange(distance_matrix.shape[0])))
    )
    
    # Calculate the average distance to all other neighbors for each node
    avg_neighbor_distances = np.mean(distance_matrix, axis=1)
    
    # Use a more balanced heuristic by considering both local and global information
    n = distance_matrix.shape[0]
    for i in range(n):
        for j in range(n):
            if i != j:
                weight_local = 0.7
                weight_global = 0.3
                # The heuristic value is a combination of the shortest common neighbor distance and the average distance
                heuristics[i, j] = weight_local * shortest_common_neighbor_distance[i] + \
                                  weight_global * avg_neighbor_distances[j]
    
    return heuristics
```
