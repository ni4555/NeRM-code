```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement a dynamic heuristic that adapts based on the pairwise distances
    # Here we use a more sophisticated heuristic: the heuristic value is a weighted combination
    # of the distance and the inverse of the pairwise distance to balance exploration and exploitation
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if distance_matrix[i, j] > 0:
                # Avoid division by zero
                inv_distance = 1 / (distance_matrix[i, j] + 1e-10)
                heuristics[i, j] = (distance_matrix[i, j] + inv_distance) / 2
            else:
                heuristics[i, j] = 1  # If there is no distance, consider it as a must-have edge
    
    return heuristics
```
