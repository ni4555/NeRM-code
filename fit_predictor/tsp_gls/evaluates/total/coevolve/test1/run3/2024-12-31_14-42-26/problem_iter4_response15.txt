```python
import numpy as np
from scipy.spatial.distance import cdist
from sklearn.cluster import KMeans

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the pairwise distances
    pairwise_distances = cdist(distance_matrix.reshape(1, -1), distance_matrix.reshape(1, -1)).flatten()
    
    # Apply adaptive neighborhood strategy using k-means clustering to find local minima
    k = 3  # Number of clusters
    kmeans = KMeans(n_clusters=k, random_state=0).fit(pairwise_distances.reshape(-1, 1))
    centroids = kmeans.cluster_centers_.flatten()
    
    # Calculate the adaptive heuristic based on local minima
    adaptive_heuristic = np.mean(pairwise_distances[kmeans.labels_ == kmeans.labels_[0]], axis=0)
    heuristics -= adaptive_heuristic ** 2
    
    # Guided local search enhancements: adjust heuristics based on nearest neighbors
    for i in range(distance_matrix.shape[0]):
        nearest_neighbors_indices = np.argsort(distance_matrix[i])[1:5]  # Get the 5 nearest neighbors
        nearest_neighbors_distances = distance_matrix[i, nearest_neighbors_indices]
        min_distance = np.min(nearest_neighbors_distances)
        nearest_neighbors_heuristic = (nearest_neighbors_distances - min_distance) ** 2
        heuristics[i, nearest_neighbors_indices] -= nearest_neighbors_heuristic
    
    # Real-time fitness landscape adaptation: adjust heuristics based on current solution
    # Placeholder for the real-time adaptation logic
    # For example, we could adjust heuristics based on the current tour's fitness
    # heuristics += (current_solution_fitness - distance_matrix) ** 2
    
    # Normalize heuristics to maintain a similar scale as the distance matrix
    heuristics /= np.max(heuristics)
    
    return heuristics
```
