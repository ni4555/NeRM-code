```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Adaptive neighborhood strategy: Use the Manhattan distance to calculate heuristic values
    # This heuristic encourages paths that traverse the grid-like structure of the city
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            neighbors = np.abs(np.array([i, j]) - np.arange(distance_matrix.shape[0]))
            manhattan_distance = np.sum(neighbors, axis=1)
            heuristics[i, j] = np.mean(manhattan_distance)
    
    # Guided local search enhancement: Adjust the heuristic values based on the local minima found
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                neighbors = np.argsort(distance_matrix[i, :])[:5]  # Consider top 5 closest nodes as neighbors
                local_min = np.min(distance_matrix[i, neighbors])
                heuristics[i, j] = heuristics[i, j] + 0.1 * (local_min - distance_matrix[i, j])
    
    # Real-time fitness landscape adaptation: Adjust the heuristic values based on the global minima
    global_min = np.min(distance_matrix)
    heuristics = heuristics + 0.2 * (global_min - distance_matrix)
    
    return heuristics
```
