```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Compute the global pairwise distances and normalize
    global_distances = pdist(distance_matrix, metric='euclidean')
    normalized_distances = (global_distances - np.min(global_distances)) / (np.max(global_distances) - np.min(global_distances))
    
    # Apply a non-linear transformation to the normalized distances
    heuristics = 1 / (1 + np.exp(normalized_distances))
    
    # Adjust the heuristics matrix to match the input shape
    heuristics_matrix = squareform(heuristics)
    
    return heuristics_matrix
```
