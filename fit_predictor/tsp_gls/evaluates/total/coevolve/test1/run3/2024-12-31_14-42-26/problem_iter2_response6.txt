```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute a dynamic minimum pairwise distance
    min_distances = np.min(distance_matrix, axis=0)
    
    # Incorporate the dynamic minimum pairwise distance into the heuristic
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # The heuristic is inversely proportional to the distance
            # We use the exponential decay function to emphasize shorter distances
            # The power of 2 is used to reduce the impact of larger distances
            heuristics[i, j] = np.exp(-distance_matrix[i, j] ** 2 / (2 * (min_distances[j] + 1) ** 2))
    
    # Normalize the heuristics to ensure a better distribution
    max_val = np.max(heuristics)
    min_val = np.min(heuristics)
    heuristics = (heuristics - min_val) / (max_val - min_val)
    
    return heuristics
```
