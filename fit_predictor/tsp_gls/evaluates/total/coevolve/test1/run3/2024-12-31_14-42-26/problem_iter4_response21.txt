```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Use a Gaussian distribution to simulate the influence of nearby cities
    # with a mean and standard deviation adjusted based on the minimum and maximum distances
    mean_distance = np.mean(distance_matrix)
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    
    # Adaptive parameters for the Gaussian distribution
    # The width of the Gaussian distribution will be inversely proportional to the min_distance
    # to prevent premature convergence to very similar neighbors, and will not exceed max_distance
    adaptive_std_dev = np.minimum(max_distance, np.maximum(min_distance, 1 / (len(distance_matrix) ** (1/3))))
    
    # Compute the Gaussian heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                distance_diff = distance_matrix[i, j] - mean_distance
                heuristics[i, j] = np.exp(-((distance_diff) ** 2) / (2 * adaptive_std_dev ** 2))
    
    # Normalize the heuristics to ensure a better distribution
    max_val = np.max(heuristics)
    min_val = np.min(heuristics)
    heuristics = (heuristics - min_val) / (max_val - min_val)
    
    # Normalize the heuristics to ensure non-negative values
    heuristics = np.clip(heuristics, 0, 1)
    
    return heuristics
```
