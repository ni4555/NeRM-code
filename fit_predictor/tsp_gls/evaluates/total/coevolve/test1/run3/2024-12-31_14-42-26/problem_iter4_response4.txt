```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the pairwise distances and use them to create a distance vector
    pairwise_distances = distance_matrix.flatten()
    
    # Define a function to calculate the neighborhood size based on the distance
    def calculate_neighborhood_size(distance):
        return min(5, int(distance / np.mean(pairwise_distances)))
    
    # Apply adaptive neighborhood strategy: adjust heuristics based on neighborhood size
    for i in range(distance_matrix.shape[0]):
        neighborhood_size = calculate_neighborhood_size(distance_matrix[i, i])
        for j in range(distance_matrix.shape[1]):
            if i != j:
                distance = distance_matrix[i, j]
                neighborhood = pairwise_distances[pairwise_distances < distance]
                if j in neighborhood:
                    neighborhood_index = np.argsort(neighborhood)[neighborhood.index(distance)]
                    neighborhood_mean = np.mean(neighborhood[:neighborhood_index + neighborhood_size])
                    heuristics[i, j] = (neighborhood_mean - distance) ** 2
    
    # Guided local search enhancements: adjust heuristics based on nearest neighbors
    for i in range(distance_matrix.shape[0]):
        nearest_neighbors = np.argsort(distance_matrix[i])[1:5]  # Get the 5 nearest neighbors
        nearest_neighbors_distance = distance_matrix[i, nearest_neighbors].mean()
        for neighbor in nearest_neighbors:
            heuristics[i, neighbor] = (nearest_neighbors_distance - distance_matrix[i, neighbor]) ** 2
    
    # Real-time fitness landscape adaptation: adjust heuristics based on current solution
    best_solution_score = np.min(np.sum(distance_matrix, axis=1))  # Example score calculation
    if best_solution_score < 10.617516362484723:
        # If the best solution score is below the threshold, further increase the penalty for long edges
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[1]):
                if distance_matrix[i, j] > np.mean(distance_matrix):
                    heuristics[i, j] *= 1.2
    
    return heuristics
```
