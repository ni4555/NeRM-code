```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Calculate the sum of the minimum pairwise distances for each node
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                # Compute the heuristic as the weighted average of the distances to the closest node
                # which is the node with the minimum distance to both i and j
                heuristics[i, j] = np.mean([distance_matrix[i, np.argmin(distance_matrix[i])], 
                                            [distance_matrix[j, np.argmin(distance_matrix[j])]])
    
    # Adjust the heuristics to favor longer distances, encouraging more exploration
    heuristics = 1 / (1 + heuristics)
    
    return heuristics
```
