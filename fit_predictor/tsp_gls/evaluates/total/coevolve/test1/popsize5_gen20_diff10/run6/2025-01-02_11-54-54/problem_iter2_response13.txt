```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # For each edge in the distance matrix, calculate the heuristic value using array operations
    heuristics_matrix = distance_matrix - diagonal[:, np.newaxis] - diagonal[np.newaxis, :]
    
    # Since the heuristic matrix is symmetric, we only need the lower triangle
    return heuristics_matrix[np.tril_indices_from(heuristics_matrix)]
```
