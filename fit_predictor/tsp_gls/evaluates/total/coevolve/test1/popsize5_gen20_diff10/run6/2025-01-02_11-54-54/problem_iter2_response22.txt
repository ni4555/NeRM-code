```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # Calculate the maximum distances for each row and column
    max_row_distances = np.max(distance_matrix, axis=1)
    max_col_distances = np.max(distance_matrix, axis=0)
    
    # For each edge in the distance matrix, calculate the heuristic value
    # Only calculate for the lower triangle to avoid symmetry, and add the diagonal distance back
    heuristics_matrix[diagonal < max_row_distances] = (max_row_distances[diagonal < max_row_distances] + max_col_distances[diagonal < max_row_distances]) - diagonal[diagonal < max_row_distances]
    
    # Use the upper triangle to complete the matrix, considering symmetry
    upper_triangle = heuristics_matrix.T[diagonal < max_col_distances]
    heuristics_matrix[diagonal < max_col_distances] = upper_triangle
    
    return heuristics_matrix
```
