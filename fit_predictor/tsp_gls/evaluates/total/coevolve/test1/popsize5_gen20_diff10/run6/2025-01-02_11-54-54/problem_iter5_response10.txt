```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # Calculate the lower triangle of the distance matrix and subtract the diagonal
    lower_triangle = distance_matrix - diagonal
    
    # Vectorized operation to calculate the minimum distance for each edge
    min_distances = np.min(lower_triangle, axis=1)
    
    # Calculate the heuristic value for each edge using vectorized subtraction
    heuristics_matrix = distance_matrix - (diagonal[:, np.newaxis] + diagonal[np.newaxis, :])
    heuristics_matrix[lower_triangle < min_distances[:, np.newaxis]] = min_distances
    
    return heuristics_matrix
```
