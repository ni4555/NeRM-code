```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the sum of distances from each node to all other nodes
    min_distances = np.min(distance_matrix, axis=1)
    max_distances = np.max(distance_matrix, axis=1)
    
    # Use np.where to handle the diagonal (self-loops) by setting them to infinity
    heuristics_matrix = np.where(distance_matrix == 0, np.inf, min_distances + min_distances[:, np.newaxis] + max_distances + max_distances[np.newaxis, :] - distance_matrix)
    
    return heuristics_matrix
```
