```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the distance from each node to the furthest node
    max_distances = np.min(distance_matrix, axis=1)
    furthest_node = np.argmax(distance_matrix, axis=0)
    
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # For each edge in the distance matrix, calculate the heuristic value
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # The heuristic value is the difference between the edge cost and the distance to the furthest node
                heuristics_matrix[i, j] = distance_matrix[i, j] - (max_distances[i] + max_distances[j])
    
    return heuristics_matrix
```
