```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance of the complete cycle (sum of all edges)
    total_distance = np.sum(distance_matrix)
    
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.full_like(distance_matrix, total_distance)
    
    # Calculate the diagonal of the distance matrix (self-loops)
    diagonal = np.diag(distance_matrix)
    
    # Subtract the self-loops from the heuristic values
    np.subtract.at(heuristics_matrix, np.arange(distance_matrix.shape[0]), diagonal)
    
    return heuristics_matrix
```
