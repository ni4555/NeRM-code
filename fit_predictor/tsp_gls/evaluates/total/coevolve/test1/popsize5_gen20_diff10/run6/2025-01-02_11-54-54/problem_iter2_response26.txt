```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # Compute the minimum distances for each node to all other nodes
    min_to_row = np.min(distance_matrix, axis=1)
    min_to_col = np.min(distance_matrix, axis=0)
    
    # Calculate the heuristic value for each edge
    heuristics_matrix = distance_matrix - (diagonal[:, np.newaxis] + diagonal[np.newaxis, :]) - (min_to_row[np.newaxis, :] + min_to_col[np.newaxis, :])
    
    return heuristics_matrix
```
