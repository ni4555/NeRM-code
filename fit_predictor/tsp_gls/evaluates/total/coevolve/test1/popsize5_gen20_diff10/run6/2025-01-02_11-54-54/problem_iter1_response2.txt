```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the total distance of the complete cycle (sum of all edges)
    total_distance = np.sum(distance_matrix)
    
    # For each edge in the distance matrix, calculate the heuristic value
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # The heuristic value is the difference between the total distance and twice the edge cost
                heuristics_matrix[i, j] = total_distance - 2 * distance_matrix[i, j]
    
    return heuristics_matrix
```
