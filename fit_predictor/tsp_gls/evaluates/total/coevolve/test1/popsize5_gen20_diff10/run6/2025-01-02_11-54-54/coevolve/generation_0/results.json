{
  "generation": 0,
  "description": "Solving Traveling Salesman Problem (TSP) via guided local search. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.",
  "solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Initialize a matrix of the same shape as the distance matrix with zeros\n    heuristics_matrix = np.zeros_like(distance_matrix)\n    \n    # Calculate the heuristics by subtracting the minimum distance for each row from the row's distances\n    for i in range(distance_matrix.shape[0]):\n        heuristics_matrix[i] = distance_matrix[i] - np.min(distance_matrix[i])\n    \n    return heuristics_matrix",
      "fitness": 10.61187021517528,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_2.txt",
      "code_file": "coevolve\\generation_0\\code_2.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=np.float64)\n    \n    # Calculate the heuristic for each edge based on the sum of the minimum distances to the start and end nodes\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            if i != j:\n                # Add the distance to the nearest neighbor\n                heuristic_matrix[i, j] = np.min(distance_matrix[i, :]) + np.min(distance_matrix[:, j])\n            else:\n                # Distance to itself is zero\n                heuristic_matrix[i, j] = 0\n    \n    return heuristic_matrix",
      "fitness": 10.620375265604553,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_4.txt",
      "code_file": "coevolve\\generation_0\\code_4.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Initialize the same shape array to store heuristics\n    heuristics = np.zeros_like(distance_matrix)\n    \n    # Set the heuristic for each edge based on the minimum distance to a node\n    for i in range(len(distance_matrix)):\n        for j in range(i+1, len(distance_matrix)):\n            heuristics[i, j] = heuristics[j, i] = np.min(distance_matrix[i, :].max() + distance_matrix[:, j].min())\n    \n    return heuristics",
      "fitness": 10.629039564366826,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_0.txt",
      "code_file": "coevolve\\generation_0\\code_0.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Initialize an array of the same shape as distance_matrix with zeros\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n    \n    # Calculate the heuristic value for each edge\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            # The heuristic value for an edge can be a simple inverse of the distance\n            heuristics[i, j] = 1.0 / (distance_matrix[i, j] + 1e-8)  # Adding a small value to avoid division by zero\n    \n    return heuristics",
      "fitness": 10.665575509453985,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_1.txt",
      "code_file": "coevolve\\generation_0\\code_1.py"
    },
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # The heuristics will be the inverse of the distance matrix, since we want\n    # to minimize the total distance traveled. However, to ensure that the\n    # heuristic values are non-negative, we will subtract the smallest value in\n    # the distance matrix from all the elements in the distance matrix before\n    # taking the inverse.\n    min_distance = np.min(distance_matrix)\n    adjusted_distance_matrix = distance_matrix - min_distance\n    # Taking the inverse of the adjusted distance matrix as the heuristic.\n    heuristics = 1.0 / adjusted_distance_matrix\n    # Replace any NaNs (which occur due to division by zero) with a large negative value.\n    heuristics[np.isnan(heuristics)] = -np.inf\n    return heuristics",
      "fitness": 10.685784889634126,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_3.txt",
      "code_file": "coevolve\\generation_0\\code_3.py"
    }
  ]
}