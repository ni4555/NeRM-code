```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the sum of minimum distances from each node to all other nodes
    min_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the sum of maximum distances from each node to all other nodes
    max_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the heuristic value as the sum of min and max distances minus the current edge cost
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                heuristics_matrix[i, j] = min_distances[i] + min_distances[j] + max_distances[i] + max_distances[j] - distance_matrix[i, j]
    
    return heuristics_matrix
```
