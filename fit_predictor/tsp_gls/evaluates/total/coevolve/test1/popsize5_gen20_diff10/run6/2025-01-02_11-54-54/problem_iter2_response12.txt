```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance of the complete cycle (sum of all edges)
    total_distance = np.sum(distance_matrix)
    
    # Create a matrix of ones of the same shape as the input distance matrix
    ones_matrix = np.ones_like(distance_matrix)
    
    # The heuristic value for each edge is the difference between the total distance and twice the edge cost
    heuristics_matrix = total_distance - 2 * np.sum(distance_matrix, axis=1, keepdims=True) - 2 * np.sum(distance_matrix, axis=0, keepdims=True) + 2 * ones_matrix
    
    return heuristics_matrix
```
