```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the sum of distances from each node to all other nodes
    min_distances_from_i = np.min(distance_matrix, axis=1)
    min_distances_to_j = np.min(distance_matrix, axis=0)
    
    # The diagonal elements should be treated as infinity
    heuristics_matrix[distance_matrix == 0] = np.inf
    
    # Calculate the heuristic for each edge
    heuristics_matrix[distance_matrix != 0] = distance_matrix[distance_matrix != 0] - min_distances_from_i[distance_matrix[distance_matrix != 0] != 0] - min_distances_to_j[distance_matrix[distance_matrix != 0] != 0]
    
    return heuristics_matrix
```
