```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix of the same shape as the input distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the diagonal of the distance matrix (distance from each node to itself)
    diagonal = np.diag(distance_matrix)
    
    # Vectorized operation to calculate the minimum distance for each edge
    min_distances = np.min(distance_matrix, axis=1) + np.min(distance_matrix, axis=0)
    
    # The heuristic value is the difference between the edge cost and the minimum distance
    heuristics_matrix = distance_matrix - min_distances[:, np.newaxis]
    
    # Subtract the diagonal from the heuristic matrix to ensure no self-loops
    heuristics_matrix -= diagonal
    
    return heuristics_matrix
```
