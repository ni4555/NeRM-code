```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the maximum distance of all edges
    max_distance = np.max(distance_matrix)
    
    # Calculate the heuristic as the negative ratio of the sum of distances from a node to all others to the maximum distance
    # This heuristic encourages shorter paths by penalizing longer paths
    heuristic_matrix = -node_distances / max_distance
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
