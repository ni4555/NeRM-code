```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function will use a more informed approach to estimate the "badness" of each edge.
    # It will calculate the shortest path that would be created if each edge were to be included in the TSP solution.
    
    # Initialize a matrix to hold the heuristic values, initialized to a large number
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # For each edge, calculate the cost of the shortest path that includes this edge
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j and distance_matrix[i, j] != 0:
                # Calculate the cost of the path that includes the edge (i, j)
                # Start from node i, visit node j, and return to node i
                cost_with_edge = distance_matrix[i, j] + distance_matrix[j, 0]  # Return to the start node
                # Calculate the cost of the path without the edge (i, j)
                cost_without_edge = distance_matrix[i, 0]  # Return to the start node without visiting j
                
                # Update the heuristic value for the edge (i, j)
                heuristic_matrix[i, j] = cost_with_edge - cost_without_edge
    
    # Normalize the heuristic matrix by the sum of all rows
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    heuristic_matrix[heuristic_matrix == 0] = epsilon
    normalized_heuristic_matrix = heuristic_matrix / (row_sums[:, np.newaxis] + epsilon)
    
    return normalized_heuristic_matrix
```
