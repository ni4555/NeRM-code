```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function uses the minimum spanning tree (MST) approach to estimate the "badness" of each edge.
    # It assumes that edges not in the MST should be considered "bad". It also normalizes the heuristic
    # to account for differing scales or magnitudes and uses the edge weights directly to reflect their badness.
    
    # Compute the minimum spanning tree using Prim's algorithm
    num_nodes = distance_matrix.shape[0]
    mst = np.zeros((num_nodes, num_nodes), dtype=bool)
    if num_nodes > 1:
        mst[0, 1:] = distance_matrix[0, 1:] < distance_matrix[0, 0]
        mst[1:, 0] = distance_matrix[1:, 0] < distance_matrix[0, 0]
    for i in range(1, num_nodes):
        if not np.any(mst[i]):
            min_dist = np.min(distance_matrix[i, ~mst[i]])
            j = np.where(distance_matrix[i, ~mst[i]] == min_dist)[0][0]
            mst[i, j] = mst[j, i] = True
    
    # Create a matrix of "badness" where the MST edges are False and all others are True
    badness_matrix = ~mst
    
    # The heuristic is the sum of the badness of edges in each path, which is simply the sum of non-MST edges
    row_sums = np.sum(badness_matrix, axis=1)
    heuristic_matrix = np.sum(badness_matrix, axis=1) / (row_sums[:, np.newaxis] + 1e-10)
    
    return heuristic_matrix
```
