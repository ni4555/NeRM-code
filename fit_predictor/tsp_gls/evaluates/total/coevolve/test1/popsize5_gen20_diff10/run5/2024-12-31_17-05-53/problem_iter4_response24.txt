```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the global heuristic as the ratio of the node distance to the mean distance
    global_heuristic_matrix = (node_distances / mean_distance) * (-distance_matrix)
    
    # Calculate the nearest neighbor distance for each node
    nearest_neighbor_distance = np.min(distance_matrix, axis=1)
    
    # Calculate the local heuristic as the inverse of the nearest neighbor distance
    local_heuristic_matrix = 1 / (nearest_neighbor_distance + 1e-10)
    
    # Combine global and local heuristics
    combined_heuristic_matrix = global_heuristic_matrix + local_heuristic_matrix
    
    # Normalize the combined heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(combined_heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (combined_heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
