```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the heuristic as the ratio of the node distance to the mean distance
    # and normalize by the maximum possible ratio
    heuristic_matrix = node_distances / mean_distance
    max_ratio = np.max(heuristic_matrix)
    
    # Normalize the heuristic matrix to avoid zero values
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (max_ratio + epsilon))
    
    return normalized_heuristic_matrix
```
