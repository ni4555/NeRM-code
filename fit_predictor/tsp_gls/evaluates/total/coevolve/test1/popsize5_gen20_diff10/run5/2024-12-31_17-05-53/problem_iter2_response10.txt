```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This improved heuristic function will use a more creative approach by considering
    # the distance to the nearest non-visited node, but also incorporating the mean distance
    # to all non-visited nodes as a second heuristic to avoid getting trapped in local optima.

    # Initialize a matrix to hold the heuristic values, initialized to a large number
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # For each node, calculate the distance to the nearest non-visited node and the mean distance
    for i in range(distance_matrix.shape[0]):
        distances = distance_matrix[i, :]
        # Find indices of non-visited nodes
        unvisited = np.where(distances != 0)[0]
        if len(unvisited) > 0:
            min_distance = np.min(distances[unvisited])
            mean_distance = np.mean(distances[unvisited])
            # Set the heuristic value for the edge (i, nearest unvisited)
            heuristic_matrix[i, unvisited] = np.array([min_distance, mean_distance])
    
    # Normalize the heuristic matrix by the sum of all values in each row
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    heuristic_matrix[heuristic_matrix == 0] = epsilon
    normalized_heuristic_matrix = heuristic_matrix / (row_sums[:, np.newaxis] + epsilon)
    
    return normalized_heuristic_matrix
```
