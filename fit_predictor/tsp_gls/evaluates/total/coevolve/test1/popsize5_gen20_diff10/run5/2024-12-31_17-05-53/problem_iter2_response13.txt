```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic function using a more sophisticated approach:
    # Use the concept of a "maximal edge" as in v0, but also incorporate normalization
    # to prevent dominated edges from having zero heuristic values.
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over each city pair to calculate the heuristic value
    for i in range(distance_matrix.shape[0]):
        for j in range(i+1, distance_matrix.shape[1]):
            # Calculate the maximum distance for each edge to other cities
            max_distance = np.max(distance_matrix[j])
            # Calculate the heuristic value, considering the edge is already part of the tour
            heuristic_value = max_distance - distance_matrix[i, j]
            # Avoid dominated edges by ensuring the heuristic value is non-negative
            heuristic_value = max(heuristic_value, 0)
            # Set the heuristic value for the current edge
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # The symmetric edge has the same heuristic
    
    # Normalize the heuristic values to ensure that no edge is dominated
    total_edges = distance_matrix.size - distance_matrix.shape[0]
    min_non_zero = np.min(heuristic_matrix[heuristic_matrix > 0])
    heuristic_matrix = heuristic_matrix / (min_non_zero + 1e-10)
    
    return heuristic_matrix
```
