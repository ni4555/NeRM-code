```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function utilizes a more sophisticated approach by considering
    # the maximum distance to any other node and the mean distance of all edges,
    # and uses a logarithmic scale to normalize the heuristic values.
    
    # Calculate the maximum distance to any other node from each node
    max_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the heuristic as the logarithm of the ratio of the max distance to the mean distance
    # multiplied by the negative distance matrix to favor shorter edges
    heuristic_matrix = np.log((max_distances / mean_distance) * (-distance_matrix))
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
