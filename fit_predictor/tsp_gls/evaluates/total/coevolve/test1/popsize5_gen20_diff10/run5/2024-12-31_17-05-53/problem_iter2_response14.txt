```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function will use a more efficient approach, leveraging matrix operations
    # to calculate the distance from each node to the nearest non-visited node.

    # Initialize a matrix to hold the heuristic values, initialized to a large number
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)

    # Create a matrix where each cell is the minimum distance to any other node
    min_distances = np.min(distance_matrix, axis=1, keepdims=True)

    # Set the heuristic value for each node to the minimum distance to any other node
    heuristic_matrix = np.where(distance_matrix == min_distances, distance_matrix, np.inf)

    # Normalize the heuristic matrix by the sum of all rows
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = heuristic_matrix / (row_sums[:, np.newaxis] + epsilon)

    return normalized_heuristic_matrix
```
