```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Improved heuristic function using a combination of domain-specific knowledge, global problem insights,
    # and a more robust normalization method to enhance heuristic quality and efficiency.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the average distance of the 3 closest nodes to each node
    close_distances = np.partition(node_distances, 3)[:3]
    mean_close_distance = np.mean(close_distances)
    
    # Calculate the maximum distance to the farthest node from each node
    max_node_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the standard deviation of the distances to all other nodes
    std_distances = np.std(distance_matrix, axis=1)
    
    # Combine heuristics: relative distance to the mean of closest 3 nodes, relative distance to the farthest node,
    # and standard deviation of all distances
    epsilon = 1e-10
    heuristic_matrix = ((node_distances / mean_close_distance) + 
                        (max_node_distances / (node_distances + epsilon)) + 
                        (std_distances / (max_node_distances + epsilon))) * (-distance_matrix)
    
    # Normalize the heuristic matrix to provide a relative scale and ensure non-negative values
    row_sums = np.sum(heuristic_matrix, axis=1)
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
