```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function uses the concept of "maximal edge" as a measure of badness.
    # The idea is to identify the edge with the highest distance that would be traversed if
    # we were to add a new city to the tour, and use this distance as the heuristic value for
    # the edge.
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over each city pair to calculate the heuristic value
    for i in range(distance_matrix.shape[0]):
        for j in range(i+1, distance_matrix.shape[1]):
            # Find the maximum distance for each edge to other cities
            max_distance = np.max(distance_matrix[j])
            # The heuristic for this edge is the maximum distance minus the distance between
            # the two cities themselves, to account for the edge already being part of the tour
            heuristic_value = max_distance - distance_matrix[i, j]
            # Set the heuristic value for the current edge
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # The symmetric edge has the same heuristic
    
    return heuristic_matrix
```
