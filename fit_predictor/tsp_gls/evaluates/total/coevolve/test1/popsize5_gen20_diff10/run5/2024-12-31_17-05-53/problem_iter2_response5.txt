```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the negative distances as the primary heuristic
    primary_heuristic_matrix = -distance_matrix

    # Calculate the inverse of the distance
    inverse_distance_matrix = 1 / (distance_matrix + 1e-10)

    # Calculate the sum of distances to the closest node for each node
    # using a simple distance-to-closest heuristic
    closest_node_distances = np.min(distance_matrix, axis=1)
    secondary_heuristic_matrix = np.sum(distance_matrix, axis=1)

    # Combine the heuristics using a weighted sum
    # where the primary heuristic has the highest weight,
    # the secondary heuristic has the lowest weight, and
    # the inverse heuristic is in between
    weight_primary = 0.5
    weight_inverse = 0.3
    weight_secondary = 0.2
    combined_heuristic_matrix = (weight_primary * primary_heuristic_matrix +
                                weight_inverse * inverse_distance_matrix +
                                weight_secondary * secondary_heuristic_matrix)

    # Normalize the combined heuristic matrix
    row_sums = np.sum(combined_heuristic_matrix, axis=1)
    normalized_combined_heuristic_matrix = combined_heuristic_matrix / (row_sums[:, np.newaxis] + 1e-10)

    return normalized_combined_heuristic_matrix
```
