```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to hold the heuristic values, initialized to a large number
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # For each node, find the nearest non-visited node
    for i in range(distance_matrix.shape[0]):
        distances = distance_matrix[i, :]
        # Find indices of non-visited nodes
        unvisited = np.where(distances != 0)[0]
        # If there are unvisited nodes, find the minimum distance to one of them
        if len(unvisited) > 0:
            min_distance = np.min(distances[unvisited])
            # Set the heuristic value for the edge (i, nearest unvisited)
            heuristic_matrix[i, unvisited] = min_distance
    
    # To avoid bias, normalize the heuristic matrix by the sum of all rows
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    heuristic_matrix[heuristic_matrix == 0] = epsilon
    normalized_heuristic_matrix = heuristic_matrix / (row_sums[:, np.newaxis] + epsilon)
    
    # To explore multiple neighbors, consider the second shortest and third shortest distances as well
    for i in range(distance_matrix.shape[0]):
        second_min_indices = np.argsort(distances)[1:3]
        second_min_distances = distances[second_min_indices]
        if len(second_min_indices) > 0:
            # Add the second and third shortest distances to the heuristic matrix
            heuristic_matrix[i, second_min_indices] = second_min_distances
    
    # Normalize again to avoid bias
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    heuristic_matrix[heuristic_matrix == 0] = epsilon
    normalized_heuristic_matrix = heuristic_matrix / (row_sums[:, np.newaxis] + epsilon)
    
    return normalized_heuristic_matrix
```
