```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of the nearest neighbors of each node
    nearest_neighbors_distances = np.min(distance_matrix, axis=1)
    mean_neighbor_distance = np.mean(nearest_neighbors_distances)
    
    # Calculate the average distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Combine heuristics using the sum of distances, mean nearest neighbor distance, and average distance
    heuristic_values = (node_distances + (mean_neighbor_distance / mean_distance)) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_values, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_values / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
