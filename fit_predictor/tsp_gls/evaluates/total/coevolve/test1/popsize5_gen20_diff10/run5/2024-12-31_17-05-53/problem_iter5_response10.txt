```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function introduces diversity by considering a combination of
    # shortest path between nodes, the average distance, and the distance to the
    # farthest node from each node. It also introduces a local aspect by incorporating
    # the distance to the nearest node, aiming to strike a balance between local and
    # global insights.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the shortest path between each node and all others
    min_node_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the maximum distance from each node to all others
    max_node_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the distance to the nearest node from each node
    min_node_distances_from_others = np.min(distance_matrix, axis=0)
    distance_to_nearest = np.sum(distance_matrix, axis=1) - min_node_distances_from_others
    
    # Combine heuristics: relative distance to the shortest, average, and farthest nodes
    # plus the distance to the nearest node
    epsilon = 1e-10
    heuristic_matrix = ((min_node_distances / mean_distance) +
                        (max_node_distances / (node_distances + epsilon)) +
                        (min_node_distances / (distance_to_nearest + epsilon))) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
