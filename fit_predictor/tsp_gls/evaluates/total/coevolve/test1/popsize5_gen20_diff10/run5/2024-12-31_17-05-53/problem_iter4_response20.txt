```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to hold the heuristic values, initialized to a large number
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # For each node, calculate the sum of distances to all other nodes
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the minimum distance from each node to any other node
    min_node_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Define a balance factor to weigh the mean distance and the minimum distance
    balance_factor = 0.5
    
    # Calculate the heuristic as a combination of the mean distance and the minimum distance
    # with the balance factor
    heuristic_matrix = (balance_factor * node_distances + (1 - balance_factor) * min_node_distances)
    
    # Normalize the heuristic matrix by the mean distance to provide a consistent scale
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (mean_distance[:, np.newaxis] + epsilon))
    
    # Set the diagonal elements to zero, as they represent no cost to stay at the current node
    np.fill_diagonal(normalized_heuristic_matrix, 0)
    
    # Invert the matrix to make the shortest path more favorable
    normalized_heuristic_matrix = 1 / (normalized_heuristic_matrix + epsilon)
    
    return normalized_heuristic_matrix
```
