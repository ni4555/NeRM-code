```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function incorporates domain-specific metrics, such as the average distance,
    # the distance to the farthest node, and a balance between local and global insights by
    # considering the distance to the k-nearest neighbors and the distance to the farthest neighbor.

    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the maximum distance from each node to all others
    max_node_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the distances to the k-nearest neighbors
    num_neighbors = 3  # Number of nearest neighbors to consider
    sorted_distances = np.argsort(distance_matrix, axis=1)
    nearest_neighbors_indices = sorted_distances[:, 1:num_neighbors+1]
    nearest_neighbors_distances = distance_matrix[np.arange(distance_matrix.shape[0]), nearest_neighbors_indices]
    average_nearest_neighbors_distance = np.mean(nearest_neighbors_distances, axis=1)
    
    # Combine heuristics: relative distance to the mean, relative distance to the farthest node,
    # and balance between local (average nearest neighbors) and global (farthest node) insights
    epsilon = 1e-10
    heuristic_matrix = ((node_distances / mean_distance) +
                        (max_node_distances / (node_distances + epsilon)) +
                        (average_nearest_neighbors_distance / (max_node_distances + epsilon))) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
