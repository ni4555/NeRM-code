```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function introduces a more domain-specific approach by considering
    # the shortest path from the start node to each node and from each node to the end node.
    # It also uses the minimum distance from each node to the nearest neighbor as a heuristic.
    
    # Calculate the shortest path from the start node to all others
    start_to_all = np.min(distance_matrix, axis=1)
    
    # Calculate the shortest path from all nodes to the end node
    all_to_end = np.min(distance_matrix[:, -1], axis=0)
    
    # Calculate the minimum distance from each node to its nearest neighbor
    min_neighbors = np.min(distance_matrix, axis=1)
    
    # Combine the three components to form the heuristic matrix
    heuristic_matrix = start_to_all + all_to_end + min_neighbors
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    max_value = np.max(heuristic_matrix)
    normalized_heuristic_matrix = heuristic_matrix / max_value
    
    return normalized_heuristic_matrix
```
