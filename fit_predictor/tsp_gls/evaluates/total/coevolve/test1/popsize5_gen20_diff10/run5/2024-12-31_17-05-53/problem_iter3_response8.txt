```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function uses a combination of domain-specific knowledge (sum of distances from each node)
    # and global problem insights (difference from mean distance) to estimate the edge cost.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the heuristic as a weighted sum of the node distance and the difference from the mean distance
    # The weights are chosen to balance the two components
    weight_node_distance = 0.7
    weight_diff_from_mean = 0.3
    
    heuristic_matrix = weight_node_distance * (node_distances / mean_distance) * (-distance_matrix)
    heuristic_matrix += weight_diff_from_mean * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
