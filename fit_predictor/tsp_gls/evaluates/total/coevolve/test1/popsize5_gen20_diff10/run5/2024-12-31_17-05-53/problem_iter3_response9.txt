```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic function using both local and global information
    # Combines the sum of distances from a given node to all others
    # with the distance to the nearest neighbor as the heuristic value for each edge.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the nearest neighbor distance for each node
    nearest_neighbor_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the mean of the nearest neighbor distances
    mean_neighbor_distance = np.mean(nearest_neighbor_distances)
    
    # Combine local and global information to calculate the heuristic
    heuristic_matrix = (node_distances + 2 * nearest_neighbor_distances) / (mean_neighbor_distance + 1)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
