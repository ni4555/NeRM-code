```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the minimum distance from each node to any other node
    min_node_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the mean of minimum distances
    mean_min_distance = np.mean(min_node_distances)
    
    # Calculate the heuristic values considering min, mean, and mean of min distances
    # We also include the sum of the differences between the node distance and mean distance,
    # which adds diversity and helps to avoid getting stuck in local optima.
    heuristic_values = (
        min_node_distances / mean_distance +
        node_distances / mean_distance +
        (min_node_distances - mean_min_distance) / mean_distance
    ) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_values, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_values / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
