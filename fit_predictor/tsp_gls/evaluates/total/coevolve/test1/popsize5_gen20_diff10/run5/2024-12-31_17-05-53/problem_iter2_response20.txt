```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This improved heuristic function uses a combination of node centrality and edge distance
    # to compute the heuristic value for each edge. Node centrality is a measure of the importance
    # of a node in the network, and it's computed as the sum of the distances from the node to
    # all other nodes. The heuristic is normalized to avoid negative values and to provide a
    # relative scale.
    
    # Calculate the sum of distances from each node to all others (node centrality)
    node_centrality = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the heuristic as the weighted sum of node centrality and the negative distance
    # matrix, with the mean distance as a scaling factor
    heuristic_matrix = (node_centrality / mean_distance) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
