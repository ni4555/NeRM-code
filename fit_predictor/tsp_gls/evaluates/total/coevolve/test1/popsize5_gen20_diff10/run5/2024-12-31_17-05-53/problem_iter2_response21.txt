```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic using the concept of a Minimum Spanning Tree (MST) but considering edge "badness" more carefully.
    # Here we are not only interested in edges not in the MST, but also the distance between cities that would
    # result in a shorter path if removed from the MST.
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Compute the minimum spanning tree using Prim's algorithm
    num_nodes = distance_matrix.shape[0]
    mst = np.zeros((num_nodes, num_nodes), dtype=bool)
    if num_nodes > 0:
        mst[0, 1:] = distance_matrix[0, 1:] < distance_matrix[0, 0]
        mst[1:, 0] = distance_matrix[1:, 0] < distance_matrix[0, 0]
        for i in range(1, num_nodes):
            if not np.any(mst[i]):
                min_dist = np.min(distance_matrix[i, ~mst[i]])
                j = np.where(distance_matrix[i, ~mst[i]] == min_dist)[0][0]
                mst[i, j] = mst[j, i] = True
    
    # Create a matrix of "badness" where the MST edges are False and all others are True
    badness_matrix = ~mst
    
    # Calculate the heuristic by considering the total weight of the MST minus the weight of each non-MST edge
    # multiplied by the number of paths that would benefit from removing this edge
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j and not mst[i, j]:
                # Count the number of MST edges connected to either node i or j
                mst_edges_count = np.sum(mst[i] | mst[j])
                # The heuristic value is the negative weight of the edge since we want to minimize the heuristic
                # (hence the negative sign) and the count gives the number of potential improvements
                heuristic_matrix[i, j] = -distance_matrix[i, j] * mst_edges_count
    
    return heuristic_matrix
```
