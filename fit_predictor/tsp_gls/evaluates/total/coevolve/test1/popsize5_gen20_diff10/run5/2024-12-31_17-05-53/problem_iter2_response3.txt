```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function leverages the concept of a minimum spanning tree (MST) and also takes into account
    # the total weight of the MST to provide a more accurate estimation of the "badness" of each edge.
    
    # Compute the minimum spanning tree using Prim's algorithm
    num_nodes = distance_matrix.shape[0]
    mst = np.zeros((num_nodes, num_nodes), dtype=bool)
    mst[0, 1:] = distance_matrix[0, 1:] < distance_matrix[0, 0]
    mst[1:, 0] = distance_matrix[1:, 0] < distance_matrix[0, 0]
    for i in range(1, num_nodes):
        if not np.any(mst[i]):
            min_dist = np.min(distance_matrix[i, ~mst[i]])
            j = np.where(distance_matrix[i, ~mst[i]] == min_dist)[0][0]
            mst[i, j] = mst[j, i] = True
    
    # Calculate the total weight of the MST
    mst_weight = np.sum(distance_matrix[mst])
    
    # Create a matrix of "badness" where the MST edges are False and all others are True
    badness_matrix = ~mst
    
    # The heuristic is the product of the badness of edges in each path and the inverse of the MST weight
    # This encourages short tours relative to the MST weight
    heuristic_matrix = np.sum(badness_matrix, axis=1) * (num_nodes - 1) / (mst_weight + 1e-10)
    
    return heuristic_matrix
```
