```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function introduces a more complex structure that combines both local and global information.
    # It includes the average distance, the distance to the farthest node, and also the variance within each cluster
    # to account for the diversity of distances.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the maximum distance from each node to all others
    max_node_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the variance of distances from each node to all others
    variance = np.var(distance_matrix, axis=1)
    
    # Combine heuristics: relative distance to the mean, relative distance to the farthest node, and variance
    epsilon = 1e-10
    heuristic_matrix = ((node_distances / mean_distance) + 
                        (max_node_distances / (node_distances + epsilon)) + 
                        (variance / (max_node_distances + epsilon))) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
