```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Global heuristic based on node distances
    global_heuristic = node_distances / mean_distance
    
    # Calculate the nearest neighbor distance for each node
    nearest_neighbor_distance = np.min(distance_matrix, axis=1)
    
    # Local heuristic based on distances to the nearest neighbor
    local_heuristic = distance_matrix < nearest_neighbor_distance[:, np.newaxis]
    
    # Global importance is higher than local importance
    importance_weights = np.array([0.7, 0.3])
    
    # Combine global and local heuristics
    combined_heuristic = importance_weights[0] * global_heuristic + importance_weights[1] * local_heuristic
    
    # Normalize the combined heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(combined_heuristic, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (combined_heuristic / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
