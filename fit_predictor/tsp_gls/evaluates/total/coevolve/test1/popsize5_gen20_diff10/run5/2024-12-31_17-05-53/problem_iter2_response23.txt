```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over each city pair to calculate the heuristic value
    for i in range(distance_matrix.shape[0]):
        for j in range(i+1, distance_matrix.shape[1]):
            # Set the heuristic value as the direct distance between the two cities
            heuristic_matrix[i, j] = distance_matrix[i, j]
            heuristic_matrix[j, i] = distance_matrix[i, j]  # The symmetric edge has the same heuristic
    
    # Normalize the heuristic matrix by the sum of all rows
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    heuristic_matrix[heuristic_matrix == 0] = epsilon
    normalized_heuristic_matrix = heuristic_matrix / (row_sums[:, np.newaxis] + epsilon)
    
    # Incorporate problem structure: Add an additional penalty for revisiting cities
    penalty = 1e5
    for i in range(distance_matrix.shape[0]):
        normalized_heuristic_matrix[i, i] = np.inf
    
    return normalized_heuristic_matrix
```
