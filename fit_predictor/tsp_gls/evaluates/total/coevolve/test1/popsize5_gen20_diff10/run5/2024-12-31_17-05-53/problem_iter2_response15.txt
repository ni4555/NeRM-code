```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic function using global information and problem-specific knowledge
    # to guide the local search process for the TSP.
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros(distance_matrix.shape)
    
    # Calculate the mean distance between all pairs of nodes
    mean_distance = np.sum(distance_matrix) / np.sum(distance_matrix > 0)
    
    # Calculate the total distance of each edge from the perspective of the node that is the endpoint
    edge_contributions = np.sum(distance_matrix, axis=1) - np.sum(distance_matrix, axis=0)
    
    # Incorporate global information by considering the ratio of each edge's contribution to the mean distance
    # and favor relative distance measures by taking the negative ratio
    heuristic_matrix = (edge_contributions / mean_distance) * -1
    
    # Normalize the heuristic matrix for comparability
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
