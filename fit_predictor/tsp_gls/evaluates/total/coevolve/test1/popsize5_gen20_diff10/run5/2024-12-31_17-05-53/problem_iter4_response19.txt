```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to hold the heuristic values, initialized to zero
    heuristic_matrix = np.zeros(distance_matrix.shape)
    
    # For each node, find the nearest non-visited node
    for i in range(distance_matrix.shape[0]):
        distances = distance_matrix[i, :]
        # Find indices of non-visited nodes
        unvisited = np.where(distances != 0)[0]
        # If there are unvisited nodes, find the minimum distance to one of them
        if len(unvisited) > 0:
            min_distance = np.min(distances[unvisited])
            # Set the heuristic value for the edge (i, nearest unvisited)
            heuristic_matrix[i, unvisited] = min_distance
    
    # Calculate the sum of distances to the farthest node for each node
    farthest_node_distances = np.max(distance_matrix, axis=1)
    # Normalize the heuristic matrix by the sum of distances to the farthest node
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = heuristic_matrix / (row_sums[:, np.newaxis] + epsilon)
    
    # Add an additional step to ensure that the diagonal is zero, indicating no cost to stay at the current node
    np.fill_diagonal(normalized_heuristic_matrix, 0)
    
    return normalized_heuristic_matrix
```
