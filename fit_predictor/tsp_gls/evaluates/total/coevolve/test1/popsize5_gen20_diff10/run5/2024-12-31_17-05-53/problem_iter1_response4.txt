```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function introduces a more complex approach
    # by considering the average distance to all other nodes.
    # It assumes that a shorter average distance to other nodes is better.
    
    # Calculate the average distance from each node to all other nodes
    n = distance_matrix.shape[0]
    avg_distances = np.zeros((n, n))
    for i in range(n):
        avg_distances[i, :] = np.mean(distance_matrix[i, :])
        avg_distances[i, i] = float('inf')  # No distance to itself
    
    # Calculate the heuristic matrix based on the average distances
    heuristic_matrix = distance_matrix - avg_distances[:, np.newaxis]
    
    # Normalize the heuristic matrix so that it can be used as a heuristic
    # By dividing by the maximum value in each row
    max_values = np.max(heuristic_matrix, axis=1)
    normalized_heuristic_matrix = heuristic_matrix / (max_values[:, np.newaxis] + 1e-10)
    
    return normalized_heuristic_matrix
```
