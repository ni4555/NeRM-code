```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over each city pair to calculate the heuristic value
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[0]):
            # Calculate the sum of distances for paths that include this edge
            # considering the total distance from each node to all others minus
            # the distances that include the current edge
            path_sum_with_edge = np.sum(distance_matrix[i, :]) + np.sum(distance_matrix[:, j])
            path_sum_without_edge = np.sum(distance_matrix[i, :]) + np.sum(distance_matrix[:, j]) - distance_matrix[i, j]
            # Calculate the heuristic value by the difference in path sums
            heuristic_value = path_sum_with_edge - path_sum_without_edge
            # Normalize the heuristic value by the total distance to get a relative scale
            total_distance = np.sum(distance_matrix)
            normalized_heuristic_value = heuristic_value / (total_distance + 1e-10)
            # Set the heuristic value for the current edge
            heuristic_matrix[i, j] = normalized_heuristic_value
            heuristic_matrix[j, i] = normalized_heuristic_value  # The symmetric edge has the same heuristic
    
    return heuristic_matrix
```
