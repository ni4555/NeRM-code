```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the nearest neighbor distances for each node
    nearest_neighbor_distances = np.argmin(distance_matrix, axis=1)
    nearest_neighbor_distances = distance_matrix[np.arange(distance_matrix.shape[0]), nearest_neighbor_distances]
    
    # Calculate the sum of distances from each node to all other nodes
    all_distances = np.sum(distance_matrix, axis=1)
    
    # Combine the heuristics using a combination of average distance, nearest neighbor distance, and total distance
    heuristic_values = (1 - nearest_neighbor_distances / all_distances) * (all_distances / mean_distance)
    
    # Normalize the heuristic values
    row_sums = np.sum(heuristic_values, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_values / (row_sums[:, np.newaxis] + epsilon))
    
    # Introduce non-linear adjustments by penalizing longer edges more
    adjusted_heuristic_matrix = normalized_heuristic_matrix * (1 + 0.1 * (1 - normalized_heuristic_matrix))
    
    return adjusted_heuristic_matrix
```
