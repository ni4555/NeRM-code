```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function takes into account proximity and diversity by calculating
    # the average distance to the nearest two non-visited nodes, which should balance the trade-off
    # between selecting close nodes (proximity) and diversifying the path (diversity).
    
    # Initialize a matrix to hold the heuristic values, initialized to a large number
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # For each node, find the nearest two non-visited nodes
    for i in range(distance_matrix.shape[0]):
        distances = distance_matrix[i, :]
        # Find indices of non-visited nodes
        unvisited = np.where(distances != 0)[0]
        if len(unvisited) > 1:
            # Sort the unvisited nodes by distance
            sorted_distances = distances[unvisited]
            sorted_indices = unvisited[np.argsort(sorted_distances)]
            # Get the indices of the two nearest unvisited nodes
            nearest_indices = sorted_indices[:2]
            # Calculate the heuristic values as the average distance
            heuristic_values = np.mean(distances[nearest_indices], axis=0)
            # Set the heuristic value for the edge (i, nearest unvisited)
            heuristic_matrix[i, nearest_indices] = heuristic_values
    
    # Normalize the heuristic matrix by the sum of all rows
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    heuristic_matrix[heuristic_matrix == 0] = epsilon
    normalized_heuristic_matrix = heuristic_matrix / (row_sums[:, np.newaxis] + epsilon)
    
    return normalized_heuristic_matrix
```
