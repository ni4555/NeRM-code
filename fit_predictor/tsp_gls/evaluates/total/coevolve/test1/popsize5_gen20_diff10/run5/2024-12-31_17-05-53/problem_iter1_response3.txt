```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function uses a modified Manhattan distance approach
    # where the heuristic for an edge is calculated based on the sum of the
    # differences in their coordinates divided by a scaling factor.
    
    # Get the number of nodes
    num_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over each pair of nodes to calculate the heuristic
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the sum of the differences in their coordinates
                coord_diff = np.sum(np.abs(np.array(range(num_nodes)) - np.array([i, j])))
                # Apply a scaling factor to normalize the heuristic
                scaling_factor = 1.0 / (num_nodes + 1)
                heuristic_matrix[i, j] = coord_diff * scaling_factor
    
    return heuristic_matrix
```
