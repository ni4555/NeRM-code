```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the number of nodes
    num_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with zeros
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the median distance for each edge
    median_distances = np.median(distance_matrix, axis=0)
    median_distances = np.median(median_distances, axis=0)
    
    # Calculate the center of mass for each edge
    center_of_mass = np.sum(distance_matrix, axis=0) / num_nodes
    center_of_mass = np.sum(center_of_mass, axis=0) / num_nodes
    
    # Combine median and center of mass to create a weighted heuristic
    heuristics = 0.5 * median_distances + 0.5 * center_of_mass
    
    # Adjust the heuristics to ensure non-negative values
    heuristics = np.maximum(heuristics, 0)
    
    return heuristics
```
