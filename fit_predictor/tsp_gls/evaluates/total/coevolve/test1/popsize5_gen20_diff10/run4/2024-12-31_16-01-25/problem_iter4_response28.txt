```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the heuristic based on the sum of absolute differences
                # between the row and column vectors of distances. This is an improvement
                # over the Manhattan distance, as it considers all edges equally and
                # avoids the bias towards the center of the matrix.
                heuristics[i, j] = np.sum(np.abs(distance_matrix[i] - distance_matrix[j]))
                
    # Normalize the heuristics to a scale between 0 and 1 to improve the
    # quality of the initial solution in guided local search.
    min_heuristic = np.min(heuristics)
    max_heuristic = np.max(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    return heuristics
```
