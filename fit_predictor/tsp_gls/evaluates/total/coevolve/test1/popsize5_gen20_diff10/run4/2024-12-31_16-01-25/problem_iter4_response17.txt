```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the heuristic based on the Euclidean distance to the
                # geometric centroid of the other node's neighborhood, which
                # can help in avoiding the same pitfalls as the Manhattan distance.
                # We also adjust the heuristic to account for the number of nodes
                # in the neighborhood (degree of the node).
                centroid = np.mean(distance_matrix[j], axis=0)
                distance_to_centroid = np.sqrt(np.sum((centroid - distance_matrix[i])**2))
                degree = np.sum(distance_matrix[j] != np.inf)
                heuristics[i, j] = distance_to_centroid / degree
    
    return heuristics
```
