```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    # Compute a baseline tour using the nearest neighbor heuristic
    tour = np.zeros(num_nodes, dtype=int)
    tour[0] = 0  # Start at node 0
    for i in range(1, num_nodes):
        nearest = np.argmin(distance_matrix[tour[i-1], :])
        tour[i] = nearest
        distance_matrix[tour[i-1], nearest] = np.inf  # Set visited edges to infinity
    
    # Calculate the heuristics using the precomputed tour
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] = distance_matrix[i, j] + np.sum(distance_matrix[tour[i], tour[j]]) - np.sum(distance_matrix[tour[tour.index(j)], tour[tour.index(i)]])
                
    return heuristics
```
