```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Avoid redundant computations for the diagonal
                min_dist = np.inf
                for k in range(num_nodes):
                    # Ensure k is not the same as i or j to avoid considering the same node or the returning edge
                    if k != i and k != j:
                        # Use the sum of the minimum distances between i, j, and k
                        dist_ij = distance_matrix[i, k] + distance_matrix[k, j]
                        if dist_ij < min_dist:
                            min_dist = dist_ij
                heuristics[i, j] = min_dist
                
    return heuristics
```
