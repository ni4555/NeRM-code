```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Direct distance between nodes
                direct_distance = distance_matrix[i, j]
                # Distance considering all other nodes (multi-node proximity)
                min_distance_via_third_node = np.min(distance_matrix[i] + distance_matrix[:, j] + distance_matrix[j])
                # Path diversity by considering a third node in between
                path_diversity = np.min(distance_matrix[i] + distance_matrix[:, j] + distance_matrix[j])
                # Heuristic strength is a combination of the above factors with different weights
                heuristics[i, j] = 0.6 * direct_distance + 0.2 * min_distance_via_third_node + 0.2 * path_diversity
                
    return heuristics
```
