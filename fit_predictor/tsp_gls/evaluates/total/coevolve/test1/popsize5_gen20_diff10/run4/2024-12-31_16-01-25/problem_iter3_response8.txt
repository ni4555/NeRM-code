```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    # Use median distance for each edge as a heuristic measure
    medians = np.median(distance_matrix, axis=0)
    
    # Assign median distance to all edges
    heuristics = medians
    
    # Apply center of mass heuristic
    center_of_mass = np.sum(distance_matrix) / np.sum(np.sum(distance_matrix, axis=0))
    heuristics += center_of_mass - medians
    
    # Add proximity-based heuristic: closer to the center node, lower the heuristic
    center_node = num_nodes // 2  # Assuming nodes are indexed from 0 to num_nodes-1
    heuristics *= distance_matrix[:, center_node]
    
    # Avoid redundancy by setting the diagonal elements to a very high value
    np.fill_diagonal(heuristics, np.inf)
    
    return heuristics
```
