```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the number of nodes
    num_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with zeros
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the median distance for each edge
    medians = np.median(distance_matrix, axis=0)
    medians = np.append(medians, medians[0])  # Append the median of the first node to the end to close the loop
    
    # Calculate the center of mass for each edge
    coms = np.sum(distance_matrix, axis=0) / num_nodes
    
    # Combine the median and center of mass to create the heuristic
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] = 0.5 * (medians[i] + medians[j]) + 0.5 * (coms[i] + coms[j])
                
    return heuristics
```
