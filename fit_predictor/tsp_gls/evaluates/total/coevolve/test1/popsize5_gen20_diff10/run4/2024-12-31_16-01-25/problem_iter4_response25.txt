```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the heuristic based on the Euclidean distance for a continuous space
                # or the Manhattan distance for a grid-like map
                # Additionally, penalize edges that would require going back on the same path
                heuristics[i, j] = np.sqrt(np.sum((distance_matrix[i] - distance_matrix[j])**2))
                if i < j:  # Avoid double counting
                    # Calculate the heuristic of the reverse edge
                    reverse_heuristics[i, j] = np.sqrt(np.sum((distance_matrix[j] - distance_matrix[i])**2))
                    heuristics[i, j] += reverse_heuristics[i, j]
                    heuristics[i, j] = max(heuristics[i, j], reverse_heuristics[i, j])
    
    return heuristics
```
