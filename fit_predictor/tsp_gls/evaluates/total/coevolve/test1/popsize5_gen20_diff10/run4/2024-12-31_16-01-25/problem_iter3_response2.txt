```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the number of nodes
    num_nodes = distance_matrix.shape[0]
    
    # Calculate the median distance for each edge to leverage the central tendency
    median_distances = np.median(distance_matrix, axis=0)
    median_distances = np.append(median_distances, median_distances[0])  # Append median distance to itself for the loop closure
    
    # Initialize the heuristic matrix with the median distances
    heuristics = np.array([median_distances for _ in range(num_nodes)])
    
    # Calculate the center of mass for the distance matrix to identify the most central node
    center_of_mass = np.average(range(num_nodes), weights=distance_matrix.sum(axis=0))
    
    # Adjust the heuristics by adding the distance from the center of mass to each node
    heuristics += np.abs(center_of_mass - range(num_nodes))
    
    # Normalize the heuristics to ensure they are in a comparable range
    heuristics /= np.max(heuristics)
    
    return heuristics
```
