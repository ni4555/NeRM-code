```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Feature 1: Edge weight
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            edge_weight = distance_matrix[i, j]
            heuristic_matrix[i, j] = edge_weight
            heuristic_matrix[j, i] = edge_weight
    
    # Feature 2: Symmetry of influence
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            min_distance_from_i = np.min(distance_matrix[i, :])
            min_distance_from_j = np.min(distance_matrix[j, :])
            # Normalize the edge weight by the sum of the minimum distances from
            # the edge endpoints to all other nodes, emphasizing symmetry
            extremities_sum = min_distance_from_i + min_distance_from_j
            heuristic_matrix[i, j] /= extremities_sum
            heuristic_matrix[j, i] /= extremities_sum
    
    # Feature 3: Local and global risk balancing
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            local_risk = distance_matrix[i, j]
            global_risk = np.mean(distance_matrix)
            # Increase the heuristic for edges with higher local risk, but balanced by global risk
            heuristic_matrix[i, j] = (1 + local_risk) / (1 + global_risk)
            heuristic_matrix[j, i] = (1 + local_risk) / (1 + global_risk)
    
    # Feature 4: Node degree influence
    degree_matrix = np.sum(distance_matrix, axis=0)
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            degree_sum = degree_matrix[i] + degree_matrix[j]
            if degree_sum != 0:
                # Adjust the heuristic value based on the degree of the nodes, emphasizing
                # the importance of high degree nodes in the heuristic
                heuristic_matrix[i, j] *= (1 - degree_sum / (num_nodes - 1))
                heuristic_matrix[j, i] *= (1 - degree_sum / (num_nodes - 1))
    
    # Normalize the heuristic matrix to sum to 1 over each row
    for i in range(num_nodes):
        row_sum = np.sum(heuristic_matrix[i, :])
        heuristic_matrix[i, :] /= row_sum
    
    return heuristic_matrix
```
