```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Since the distance matrix is symmetric, calculate the mean distances only once
    mean_distances = np.mean(distance_matrix, axis=1)
    
    # Calculate the heuristic values for each edge using the pre-computed mean distances
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            average_distance = (mean_distances[i] + mean_distances[j]) / 2
            heuristic_value = distance_matrix[i, j] / average_distance
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    # Ensure the diagonal is set to infinity to indicate that no edge goes to the same node
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
