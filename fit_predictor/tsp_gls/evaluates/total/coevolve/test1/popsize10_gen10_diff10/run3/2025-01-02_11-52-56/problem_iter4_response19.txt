```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Find the nearest neighbors for both nodes
            nearest_neighbors_i = np.argsort(distance_matrix[i, :])
            nearest_neighbors_j = np.argsort(distance_matrix[j, :])
            nearest_i_to_j = nearest_neighbors_i[1]
            nearest_j_to_i = nearest_neighbors_j[1]
            
            # Calculate the average distance to all other nodes for both i and j
            avg_distance_i = np.mean(distance_matrix[i, nearest_neighbors_i[2:]])
            avg_distance_j = np.mean(distance_matrix[j, nearest_neighbors_j[2:]])
            
            # Calculate the heuristic value based on the nearest neighbor distance
            # and the average distance to all other nodes
            heuristic_value = (distance_matrix[i, j] / (avg_distance_i + avg_distance_j)) * 0.5
            
            # Assign the heuristic value to both nodes in the symmetric matrix
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
