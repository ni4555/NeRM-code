```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Feature 1: Edge weight with global influence
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            global_influence = np.sum(distance_matrix[i, :]) + np.sum(distance_matrix[j, :])
            heuristic_matrix[i, j] = distance_matrix[i, j] / global_influence
            heuristic_matrix[j, i] = distance_matrix[i, j] / global_influence
    
    # Feature 2: Symmetry and normalization by the sum of distances to all other nodes
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            distance_sum = np.sum(distance_matrix[i, :]) + np.sum(distance_matrix[j, :])
            if distance_sum != 0:
                # Normalize the edge weight by the sum of distances to all other nodes
                heuristic_matrix[i, j] = distance_matrix[i, j] / distance_sum
                heuristic_matrix[j, i] = distance_matrix[i, j] / distance_sum
    
    # Feature 3: Node degree influence with risk assessment
    degree_matrix = np.sum(distance_matrix, axis=0)
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            degree_sum = degree_matrix[i] + degree_matrix[j]
            if degree_sum != 0:
                # Increase the heuristic value for the edge if the degree sum is low, but
                # decrease it if the edge leads to a high number of repeated nodes
                risk_factor = len(set(np.where(distance_matrix[i, :] == distance_matrix[i, j])[0]))
                heuristic_matrix[i, j] = (degree_sum / (num_nodes - 2)) * (1 - risk_factor)
                heuristic_matrix[j, i] = (degree_sum / (num_nodes - 2)) * (1 - risk_factor)
    
    # Normalize the heuristic matrix to sum to 1 over each row
    for i in range(num_nodes):
        row_sum = np.sum(heuristic_matrix[i, :])
        heuristic_matrix[i, :] /= row_sum
    
    return heuristic_matrix
```
