```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Calculate the maximum possible distance from i to any node
            max_distance_from_i = np.max(distance_matrix[i, :])
            # Calculate the maximum possible distance from j to any node
            max_distance_from_j = np.max(distance_matrix[j, :])
            # Calculate the maximum possible distance from i to j
            max_distance_from_ij = np.max(distance_matrix[i, :][:, None] + distance_matrix[:, j])
            # Calculate the minimum possible distance from i to j
            min_distance_from_ij = np.min(distance_matrix[i, :][:, None] + distance_matrix[:, j])
            # Use the heuristic that bounds the total tour distance
            # This heuristic is based on the assumption that the maximum distance from
            # either node i or j to any other node, plus the direct distance between i and j,
            # is a good estimate of the tour length
            heuristic_value = max_distance_from_i + max_distance_from_j + min_distance_from_ij
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
