```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Incorporate relative distances
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            max_distance_from_i = np.max(distance_matrix[i, :])
            max_distance_from_j = np.max(distance_matrix[j, :])
            relative_distance = distance_matrix[i, j] / (max_distance_from_i + max_distance_from_j)
            
            # Incorporate neighbor influences
            influence_from_i = np.mean(distance_matrix[i, :]) / (max_distance_from_i + max_distance_from_j)
            influence_from_j = np.mean(distance_matrix[j, :]) / (max_distance_from_j + max_distance_from_i)
            neighbor_influence = (influence_from_i + influence_from_j) / 2
            
            # Combine the two metrics to form the heuristic value
            heuristic_value = relative_distance + neighbor_influence
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    # Exploit problem structure and symmetry
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2
    
    return heuristic_matrix
```
