```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Feature 1: Edge weight
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            heuristic_matrix[i, j] = distance_matrix[i, j]
            heuristic_matrix[j, i] = distance_matrix[i, j]
    
    # Feature 2: Minimum distance influence
    for i in range(num_nodes):
        min_distance_from_i = np.min(distance_matrix[i, :])
        for j in range(i + 1, num_nodes):
            min_distance_from_j = np.min(distance_matrix[j, :])
            # Normalize the edge weight with the minimum distance from the two nodes
            min_influence = min_distance_from_i + min_distance_from_j
            if min_influence != 0:
                heuristic_matrix[i, j] /= min_influence
                heuristic_matrix[j, i] /= min_influence
    
    # Feature 3: Average distance influence
    average_distances = np.mean(distance_matrix, axis=0)
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Normalize the edge weight with the average distance from the two nodes
            average_influence = average_distances[i] + average_distances[j]
            if average_influence != 0:
                heuristic_matrix[i, j] /= average_influence
                heuristic_matrix[j, i] /= average_influence
    
    # Feature 4: Node degree
    degree_matrix = np.sum(distance_matrix, axis=0)
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            degree_sum = degree_matrix[i] + degree_matrix[j]
            if degree_sum != 0:
                heuristic_matrix[i, j] *= (1 + 1 / degree_sum)
                heuristic_matrix[j, i] *= (1 + 1 / degree_sum)
    
    # Feature 5: Edge density
    total_distance = np.sum(distance_matrix)
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            density = (distance_matrix[i, j] / total_distance) * 2
            heuristic_matrix[i, j] *= density
            heuristic_matrix[j, i] *= density
    
    # Normalize the heuristic matrix to sum to 1 over each row
    for i in range(num_nodes):
        row_sum = np.sum(heuristic_matrix[i, :])
        heuristic_matrix[i, :] /= row_sum
    
    return heuristic_matrix
```
