```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Feature 1: Edge weight
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            heuristic_matrix[i, j] = distance_matrix[i, j]
            heuristic_matrix[j, i] = distance_matrix[i, j]
    
    # Feature 2: Normalization by the sum of extremities of node influence with symmetry consideration
    for i in range(num_nodes):
        min_distance_from_i = np.min(distance_matrix[i, :])
        max_distance_from_i = np.max(distance_matrix[i, :])
        extremities_sum = min_distance_from_i + max_distance_from_i
        for j in range(i + 1, num_nodes):
            min_distance_from_j = np.min(distance_matrix[j, :])
            max_distance_from_j = np.max(distance_matrix[j, :])
            extremities_sum += min_distance_from_j + max_distance_from_j
        # Normalize by the sum of extremities and ensure symmetry
        if extremities_sum != 0:
            for j in range(i + 1, num_nodes):
                heuristic_matrix[i, j] /= extremities_sum
                heuristic_matrix[j, i] /= extremities_sum
    
    # Feature 3: Node degree influence with risk balancing
    degree_matrix = np.sum(distance_matrix, axis=0)
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            degree_sum = degree_matrix[i] + degree_matrix[j]
            # Increase heuristic if degree sum is low and balance risk
            if degree_sum < num_nodes:
                heuristic_value = degree_sum / (num_nodes - degree_sum)
                heuristic_matrix[i, j] *= heuristic_value
                heuristic_matrix[j, i] *= heuristic_value
    
    # Feature 4: Local and global balance
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Add a global influence factor based on the average distance
            global_influence = np.mean(distance_matrix)
            heuristic_matrix[i, j] *= (distance_matrix[i, j] / global_influence)
            heuristic_matrix[j, i] *= (distance_matrix[i, j] / global_influence)
    
    # Normalize the heuristic matrix to sum to 1 over each row
    for i in range(num_nodes):
        row_sum = np.sum(heuristic_matrix[i, :])
        heuristic_matrix[i, :] /= row_sum
    
    return heuristic_matrix
```
