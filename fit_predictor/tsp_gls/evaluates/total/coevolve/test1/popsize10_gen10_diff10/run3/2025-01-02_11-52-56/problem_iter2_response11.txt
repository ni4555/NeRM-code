```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Improved heuristic using the Chebyshev distance
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            max_distance_i = np.max(distance_matrix[i, :])
            max_distance_j = np.max(distance_matrix[j, :])
            heuristic_value = max_distance_i - max_distance_j
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
