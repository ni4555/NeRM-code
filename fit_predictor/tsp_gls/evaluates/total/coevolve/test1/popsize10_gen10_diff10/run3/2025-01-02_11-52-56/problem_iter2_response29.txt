```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Calculate the sum of distances from i to the rest of the nodes
            sum_distances_i = np.sum(distance_matrix[i, :])
            # Calculate the sum of distances from j to the rest of the nodes
            sum_distances_j = np.sum(distance_matrix[j, :])
            # Find the minimum distance from i to any node and from j to any node
            min_distance_i = np.min(distance_matrix[i, :])
            min_distance_j = np.min(distance_matrix[j, :])
            # Calculate the heuristic value based on the sum of distances minus the minimum distance
            heuristic_value = (sum_distances_i - min_distance_i) + (sum_distances_j - min_distance_j)
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
