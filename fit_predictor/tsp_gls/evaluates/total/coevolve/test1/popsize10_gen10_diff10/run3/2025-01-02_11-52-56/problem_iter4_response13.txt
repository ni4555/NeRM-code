```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Calculate the sum of the weighted distances from each node to its neighbors
            # Weighting the distance from the node itself with 1.0 and all others with the average distance
            avg_distance = np.mean(distance_matrix[i, :])
            weighted_sum = distance_matrix[i, j] + (num_nodes - 2) * avg_distance
            
            # Calculate the heuristic value using the average distance and the weighted sum
            heuristic_value = avg_distance / weighted_sum
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
