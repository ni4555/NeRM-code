{
  "generation": 0,
  "description": "Solving Traveling Salesman Problem (TSP) via guided local search. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.",
  "failed_solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Calculate the total distance of the complete cycle (sum of all edges)\n    total_distance = np.sum(distance_matrix)\n    \n    # Calculate the minimum distance between each pair of nodes\n    min_distances = np.min(distance_matrix, axis=0)\n    \n    # Create a matrix where each entry is the difference between the total distance and the minimum distance\n    # between the current node and the starting node (which is the same for all nodes)\n    heuristics_matrix = total_distance - min_distances\n    \n    return heuristics_matrix",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Traceback (most recent call last):\n  File \"E:\\Projects\\CO\\reevo-main_1/problems/tsp_gls/eval.py\", line 51, in <module>\n    obj = solve(instance)\n          ^^^^^^^^^^^^^^^\n  File \"E:\\Projects\\CO\\reevo-main_1/problems/tsp_gls/eval.py\", line 22, in solve\n    assert tuple(heu.shape) == (inst.n, inst.n)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
      "stdout_file": "coevolve\\generation_0\\stdout_1.txt",
      "code_file": "coevolve\\generation_0\\code_1.py"
    }
  ]
}