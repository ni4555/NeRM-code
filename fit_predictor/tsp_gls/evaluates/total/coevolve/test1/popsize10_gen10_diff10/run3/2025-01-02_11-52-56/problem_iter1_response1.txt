```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values using the Chebyshev distance as a heuristic
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            heuristic_value = np.max([np.abs(distance_matrix[i, j]), np.max([distance_matrix[i, k], distance_matrix[j, k]]), k in range(num_nodes)])
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
