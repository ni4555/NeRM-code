```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate heuristic values based on relative distances
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            if distance_matrix[i, j] > 0:
                # Use the average distance to other nodes for normalization
                average_distance_to_i = np.mean(distance_matrix[i, :])
                average_distance_to_j = np.mean(distance_matrix[j, :])
                normalized_distance = distance_matrix[i, j] / (average_distance_to_i + average_distance_to_j)
                # Incorporate a penalty for longer paths
                penalty = 1 + (average_distance_to_i + average_distance_to_j - distance_matrix[i, j])
                heuristic_value = normalized_distance + penalty
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
