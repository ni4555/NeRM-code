```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Use domain knowledge to add an additional heuristic based on the average of the minimum and maximum distance
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            min_distance_from_i = np.min(distance_matrix[i, :])
            max_distance_from_i = np.max(distance_matrix[i, :])
            min_distance_from_j = np.min(distance_matrix[j, :])
            max_distance_from_j = np.max(distance_matrix[j, :])
            # Calculate the average of the minimum and maximum distances from both nodes
            average_min_distance = (min_distance_from_i + min_distance_from_j) / 2
            average_max_distance = (max_distance_from_i + max_distance_from_j) / 2
            # Normalize by the sum of the average distances
            sum_average_distances = average_min_distance + average_max_distance
            # Assign a heuristic value based on the relative influence of the edge
            if sum_average_distances != 0:
                heuristic_value = distance_matrix[i, j] / sum_average_distances
            else:
                heuristic_value = 1
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    # Apply a symmetry heuristic to balance the influence of edges in both directions
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Calculate the symmetry difference
            symmetry_diff = abs(heuristic_matrix[i, j] - heuristic_matrix[j, i])
            # Adjust the heuristic value to reflect symmetry
            if symmetry_diff != 0:
                heuristic_matrix[i, j] = (heuristic_matrix[i, j] + heuristic_matrix[j, i]) / 2 - (symmetry_diff / 2)
                heuristic_matrix[j, i] = (heuristic_matrix[i, j] + heuristic_matrix[j, i]) / 2 + (symmetry_diff / 2)
    
    return heuristic_matrix
```
