```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Calculate the sum of distances from each node to its nearest neighbor
            min_dist_i = np.min(distance_matrix[i, :])
            min_dist_j = np.min(distance_matrix[j, :])
            
            # Use these distances to calculate a heuristic value for the edge (i, j)
            heuristic_value = (min_dist_i + min_dist_j - distance_matrix[i, j]) / min_dist_i
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
