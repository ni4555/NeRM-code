```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Calculate the heuristic using the following components:
            # 1. The relative distance of the edge in relation to the average edge length
            relative_distance = distance_matrix[i, j] / np.mean(distance_matrix)
            # 2. The average distance deviation of the connected nodes
            avg_deviation = np.mean(np.abs(distance_matrix[i, :] - np.mean(distance_matrix[i, :])))
            # 3. A larger jump factor if the edge connects to a node with a high average deviation
            jump_factor = 1.5 if avg_deviation > np.mean(distance_matrix) else 1
            # Combine the above metrics to create the heuristic value
            heuristic_value = relative_distance + jump_factor * avg_deviation
            
            # Apply the heuristic value symmetrically
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
