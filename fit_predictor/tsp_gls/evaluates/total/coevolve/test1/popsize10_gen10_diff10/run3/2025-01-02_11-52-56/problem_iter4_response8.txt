```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate heuristic values using a combination of features:
    # 1. The edge's distance itself
    # 2. The relative distance to the maximum edge in the same row and column
    # 3. The edge-to-boundary ratio
    # 4. The difference in distances to the nearest and farthest neighbors
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            edge_distance = distance_matrix[i, j]
            max_row_distance = np.max(distance_matrix[i, :])
            max_col_distance = np.max(distance_matrix[:, j])
            relative_distance = edge_distance / (max_row_distance + max_col_distance)
            
            edge_to_boundary_ratio = edge_distance / (max_row_distance + max_col_distance + 1)
            
            nearest_neighbor = np.argmin(distance_matrix[i, :])
            farthest_neighbor = np.argmax(distance_matrix[i, :])
            min_distance_to_neighbor = distance_matrix[i, nearest_neighbor]
            max_distance_to_neighbor = distance_matrix[i, farthest_neighbor]
            distance_difference = abs(max_distance_to_neighbor - min_distance_to_neighbor)
            
            # Normalize by a combination of features
            normalization_factor = (max_row_distance + max_col_distance) * (1 + edge_to_boundary_ratio) + distance_difference
            if normalization_factor != 0:
                heuristic_value = (edge_distance + relative_distance + edge_to_boundary_ratio + distance_difference) / normalization_factor
            else:
                heuristic_value = 1
            
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
