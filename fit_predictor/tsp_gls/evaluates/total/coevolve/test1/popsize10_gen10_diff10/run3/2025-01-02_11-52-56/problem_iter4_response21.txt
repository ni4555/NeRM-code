```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            min_distance_to_i = np.min(distance_matrix[i, :])
            min_distance_to_j = np.min(distance_matrix[j, :])
            min_distance_to_ij = np.min(distance_matrix[i, j] + distance_matrix[:, j])
            min_distance_to_ji = np.min(distance_matrix[j, j] + distance_matrix[:, i])
            
            # Using local distance information, minima, and symmetry
            heuristic_value = (min_distance_to_ij - min_distance_to_i - min_distance_to_j +
                               min_distance_to_ji - min_distance_to_j - min_distance_to_i) / (
                                   2 * distance_matrix[i, j])
            
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
