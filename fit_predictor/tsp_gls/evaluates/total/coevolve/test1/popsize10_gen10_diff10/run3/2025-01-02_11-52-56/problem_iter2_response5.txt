```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # A more complex heuristic that considers the sum of the shortest paths from i to j
            # and from j to i, minus the direct distance between i and j
            shortest_paths_sum = np.sum(np.min(distance_matrix[[i, j], :][:, [i, j]], axis=0))
            heuristic_value = shortest_paths_sum - distance_matrix[i, j]
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
