```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Using the sum of the distances to the closest nodes as a heuristic
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            distances_i = distance_matrix[i, :]
            distances_j = distance_matrix[j, :]
            min_distance_i = np.argmin(distances_i)
            min_distance_j = np.argmin(distances_j)
            min_sum = distances_i[min_distance_i] + distances_j[min_distance_j]
            heuristic_value = min_sum - distance_matrix[i, j]
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
