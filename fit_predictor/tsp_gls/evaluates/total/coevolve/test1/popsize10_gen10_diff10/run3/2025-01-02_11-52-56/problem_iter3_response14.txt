```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Feature 1: Edge weight
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            heuristic_matrix[i, j] = distance_matrix[i, j]
            heuristic_matrix[j, i] = distance_matrix[i, j]
    
    # Feature 2: Maximum distance influence
    for i in range(num_nodes):
        max_distance_from_i = np.max(distance_matrix[i, :])
        for j in range(i + 1, num_nodes):
            max_distance_from_j = np.max(distance_matrix[j, :])
            # Normalize the edge weight with the maximum distance from the two nodes
            max_influence = max_distance_from_i + max_distance_from_j
            if max_influence != 0:
                heuristic_matrix[i, j] /= max_influence
                heuristic_matrix[j, i] /= max_influence
    
    # Feature 3: Node degree
    degree_matrix = np.sum(distance_matrix, axis=0)
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            degree_sum = degree_matrix[i] + degree_matrix[j]
            if degree_sum != 0:
                heuristic_matrix[i, j] *= (1 + 1 / degree_sum)
                heuristic_matrix[j, i] *= (1 + 1 / degree_sum)
    
    # Normalize the heuristic matrix to sum to 1 over each row
    for i in range(num_nodes):
        row_sum = np.sum(heuristic_matrix[i, :])
        heuristic_matrix[i, :] /= row_sum
    
    return heuristic_matrix
```
