```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Calculate the minimum and maximum distances from the edge endpoints to all other nodes
            min_distance_from_i = np.min(distance_matrix[i, :])
            max_distance_from_i = np.max(distance_matrix[i, :])
            min_distance_from_j = np.min(distance_matrix[j, :])
            max_distance_from_j = np.max(distance_matrix[j, :])
            
            # Calculate the average of the distances
            avg_distance_from_i = np.mean(distance_matrix[i, :])
            avg_distance_from_j = np.mean(distance_matrix[j, :])
            
            # Use the average distance to other nodes as the heuristic value
            heuristic_value = distance_matrix[i, j] / (avg_distance_from_i + avg_distance_from_j)
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
