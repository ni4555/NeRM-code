```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        # Get sorted indices of the distances from node i to all other nodes
        sorted_indices = np.argsort(distance_matrix[i])
        
        # Calculate the heuristic for the i-th node based on the distance to its nearest and second nearest neighbors
        # as well as the average distance to all other neighbors.
        nearest_neighbor_distance = distance_matrix[i, sorted_indices[1]]
        second_nearest_neighbor_distance = distance_matrix[i, sorted_indices[2]]
        average_distance = np.mean(distance_matrix[i, sorted_indices[2:]])
        
        # Use a normalized measure to combine these metrics
        heuristic_value = (2 * nearest_neighbor_distance + second_nearest_neighbor_distance - average_distance) / (2 * nearest_neighbor_distance + average_distance)
        # Assign the same heuristic value to both directions since the distance matrix is symmetric
        for j in range(sorted_indices[1], sorted_indices[2] + 1):
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
