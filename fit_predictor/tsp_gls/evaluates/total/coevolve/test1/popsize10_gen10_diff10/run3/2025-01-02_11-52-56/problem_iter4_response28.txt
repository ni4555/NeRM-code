```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate relative distances to the minimum node in each row
    relative_distances = np.abs(distance_matrix - np.min(distance_matrix, axis=1, keepdims=True))
    
    # Calculate the sum of distances from each node to its neighbors
    sum_of_distances = np.sum(distance_matrix, axis=1)
    
    # Incorporate domain knowledge: give more weight to nodes that have a higher sum of distances
    # and to edges that are shorter than the average distance
    weight_factor = sum_of_distances / np.mean(sum_of_distances)
    
    # Calculate a heuristic based on the above factors
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            combined_heuristic = (relative_distances[i, j] * weight_factor[i] +
                                  relative_distances[j, i] * weight_factor[j] +
                                  (distance_matrix[i, j] < np.mean(distance_matrix)) * (np.mean(distance_matrix) - distance_matrix[i, j]))
            heuristic_matrix[i, j] = combined_heuristic
            heuristic_matrix[j, i] = combined_heuristic
    
    return heuristic_matrix
```
