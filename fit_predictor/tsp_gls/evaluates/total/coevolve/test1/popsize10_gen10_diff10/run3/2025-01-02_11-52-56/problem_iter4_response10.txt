```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate average edge weights and total node degree
    average_edge_weights = np.mean(distance_matrix)
    node_degrees = np.sum(distance_matrix > 0, axis=1)
    
    # Calculate heuristic values based on deviation from average edge weight
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Use the absolute difference from the average edge weight as a heuristic
            heuristic_value = abs(distance_matrix[i, j] - average_edge_weights)
            # Adjust the heuristic value based on node degree
            if node_degrees[i] < num_nodes / 2 or node_degrees[j] < num_nodes / 2:
                heuristic_value *= 1.1
            # Store heuristic values, ensuring symmetry
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
