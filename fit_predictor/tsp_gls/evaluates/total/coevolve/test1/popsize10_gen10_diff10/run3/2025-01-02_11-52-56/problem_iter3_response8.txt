```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the average distance from each node to all other nodes
    avg_distances = np.mean(distance_matrix, axis=1)
    
    # Calculate the heuristic values by considering the relative distance to the average
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Normalize by the sum of average distances
            sum_avg_distances = avg_distances[i] + avg_distances[j]
            # Assign a heuristic value that reflects the relative distance to the average
            if sum_avg_distances != 0:
                heuristic_value = distance_matrix[i, j] / sum_avg_distances
            else:
                heuristic_value = 1
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
