```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate node influence by the sum of distances from each node to all others
    node_influence = np.sum(distance_matrix, axis=1)
    
    # Calculate edge importance by dividing the distance by the sum of influences
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            heuristic_value = distance_matrix[i, j] / (node_influence[i] + node_influence[j])
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
