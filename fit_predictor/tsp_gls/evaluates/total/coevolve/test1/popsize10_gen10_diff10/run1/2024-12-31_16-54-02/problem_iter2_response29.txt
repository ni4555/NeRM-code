```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Loop through each pair of nodes
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Calculate the shortest and longest paths to the next node
            shortest_path = np.argmin(distance_matrix[i, :])
            longest_path = np.argmax(distance_matrix[i, :])
            
            # Calculate the shortest and longest paths from the next node
            shortest_path_from_j = np.argmin(distance_matrix[j, :])
            longest_path_from_j = np.argmax(distance_matrix[j, :])
            
            # Calculate the heuristic based on the shortest and longest paths
            heuristics[i, j] = (distance_matrix[i, shortest_path] + distance_matrix[j, shortest_path_from_j] +
                               distance_matrix[i, longest_path] + distance_matrix[j, longest_path_from_j]) / 4
    
    # Reflect symmetry in the heuristic function
    heuristics = (heuristics + distance_matrix.T) / 2
    
    return heuristics
```
