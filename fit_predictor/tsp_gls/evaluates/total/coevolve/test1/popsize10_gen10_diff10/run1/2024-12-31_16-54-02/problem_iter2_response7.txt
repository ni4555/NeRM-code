```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the sum of distances from each node to all others
    sum_dist_from_i = np.sum(distance_matrix, axis=1)
    sum_dist_from_j = np.sum(distance_matrix, axis=0)
    
    # Find the node with the minimum and maximum sum of distances
    min_sum_distances = np.min(sum_dist_from_i)
    max_sum_distances = np.max(sum_dist_from_i)
    min_node = np.argmin(sum_dist_from_i)
    max_node = np.argmax(sum_dist_from_i)
    
    # Set heuristics for edges to the node with the minimum sum of distances
    heuristics[:, min_node] = sum_dist_from_i
    heuristics[min_node, :] = sum_dist_from_i
    
    # Set heuristics for edges to the node with the maximum sum of distances
    heuristics[:, max_node] = sum_dist_from_j - distance_matrix[:, max_node]
    heuristics[max_node, :] = sum_dist_from_j - distance_matrix[max_node, :]
    
    # Calculate the heuristics for the remaining edges
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            if i == min_node or j == min_node:
                heuristics[i, j] = min_sum_distances
            elif i == max_node or j == max_node:
                heuristics[i, j] = max_sum_distances
            else:
                heuristics[i, j] = min(distance_matrix[i, j], sum_dist_from_i[i] + sum_dist_from_j[j] - min_sum_distances - max_sum_distances)
    
    return heuristics
```
