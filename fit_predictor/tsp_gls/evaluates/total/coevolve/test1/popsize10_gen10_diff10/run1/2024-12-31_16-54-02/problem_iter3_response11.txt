```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Precompute the shortest paths between all pairs of nodes using Floyd-Warshall algorithm
    # Since we only need the shortest paths, we'll ignore the other parts of the matrix
    warshall_distance_matrix = np.linalg.matrix_power(distance_matrix, 2)
    warshall_distance_matrix = np.tril(warshall_distance_matrix) + np.tril(warshall_distance_matrix, k=1).T
    
    # Loop through each pair of nodes
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # The heuristic value is the distance from node i to node j via the shortest path
            heuristics[i, j] = warshall_distance_matrix[i, j]
            # The heuristic value in the symmetric position is also the shortest path, so we can halve it
            heuristics[j, i] = heuristics[i, j]
    
    return heuristics
```
