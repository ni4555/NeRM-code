```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = len(distance_matrix)
    heuristics = np.zeros_like(distance_matrix)
    
    # Compute the mean distance for each row and column
    mean_distances = np.mean(distance_matrix, axis=1)
    mean_distances = np.repeat(mean_distances[:, np.newaxis], n, axis=1)
    
    # Compute the mean distance of all distances minus the edge distance
    heuristics = mean_distances + mean_distances.T - distance_matrix
    
    # Apply the triangle inequality heuristic: if the sum of the distances
    # between two nodes and the distance between a third node and the sum is
    # greater than the distance between the first two nodes, the edge is
    # penalized.
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(n):
                if k != i and k != j:
                    heuristics[i, j] = min(heuristics[i, j], distance_matrix[i, k] + distance_matrix[k, j] - distance_matrix[i, j])
    
    # Return the symmetric matrix
    return heuristics + heuristics.T - np.diag(np.diag(heuristics))
```
