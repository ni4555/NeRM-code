```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = len(distance_matrix)
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the minimum distance to any other node via node i or j
                min_dist_via_i = np.min(distance_matrix[i]) + distance_matrix[i, j]
                min_dist_via_j = np.min(distance_matrix[j]) + distance_matrix[j, i]
                heuristics[i, j] = min(min_dist_via_i, min_dist_via_j)
    
    # Incorporate the shortest paths through intermediate nodes
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if i != j and k != i and k != j:
                    via_k = distance_matrix[i, k] + distance_matrix[k, j]
                    heuristics[i, j] = min(heuristics[i, j], via_k)
    
    return heuristics
```
