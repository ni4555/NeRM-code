```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the shortest path tree for each node
    for i in range(len(distance_matrix)):
        # Find the nearest node to i
        nearest_node = np.argmin(distance_matrix[i, :])
        # For all pairs of nodes, calculate the distance from i to j via the nearest node
        for j in range(len(distance_matrix)):
            # Update the heuristic value if it's a direct distance or through the nearest node
            heuristics[i, j] = np.min([distance_matrix[i, j], distance_matrix[i, nearest_node] + distance_matrix[nearest_node, j]])
    
    # Return the heuristics matrix
    return heuristics
```
