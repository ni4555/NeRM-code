```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Loop through each pair of nodes
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Calculate the shortest path from node i to node j using Dijkstra's algorithm
            # We use np.argpartition to efficiently find the k smallest elements in the column vector
            indices = np.argpartition(distance_matrix[i, :], j) # partition along column i, get index of j
            k_smallest = indices[:j+1] # get k smallest elements including j
            shortest_path = k_smallest[-1] # get the index of the last smallest element which is the shortest path
            # The heuristic value is the distance from node i to node j via the shortest path
            heuristics[i, j] = distance_matrix[i, shortest_path]
            # Calculate the heuristic in reverse direction to exploit symmetry
            heuristics[j, i] = distance_matrix[j, shortest_path]
    
    return heuristics
```
