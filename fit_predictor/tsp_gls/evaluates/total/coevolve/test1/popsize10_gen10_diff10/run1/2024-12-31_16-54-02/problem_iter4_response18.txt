```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = len(distance_matrix)
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the mean distance for each node
    mean_distances = np.mean(distance_matrix, axis=1)
    
    # For each edge, calculate the sum of the mean distances and subtract the edge distance
    for i in range(n):
        for j in range(i + 1, n):
            heuristics[i, j] = (mean_distances[i] + mean_distances[j] - distance_matrix[i, j])
    
    # Make the matrix symmetric by adding the transpose to itself and subtracting the diagonal to avoid double counting
    return heuristics + heuristics.T - np.diag(np.diag(heuristics))
```
