```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = len(distance_matrix)
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the center of gravity for each cluster
    centers = np.argmin(distance_matrix, axis=1)
    
    # Use the distance from the center of gravity to other nodes as the heuristic
    for i in range(n):
        heuristics[i, centers] = distance_matrix[i, centers]
        heuristics[centers, i] = distance_matrix[centers, i]
    
    # For edges not between nodes and their centers, use the minimum distance to a center as the heuristic
    for i in range(n):
        for j in range(n):
            if heuristics[i, j] == 0:
                heuristics[i, j] = np.min(distance_matrix[i, centers])
                heuristics[j, i] = np.min(distance_matrix[j, centers])

    return heuristics
```
