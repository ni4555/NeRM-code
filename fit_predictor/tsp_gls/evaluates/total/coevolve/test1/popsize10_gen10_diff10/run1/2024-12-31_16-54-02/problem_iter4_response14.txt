```python
import numpy as np
import heapq

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Precompute the shortest paths for all pairs using Dijkstra's algorithm
    for i in range(len(distance_matrix)):
        min_heap = [(distance_matrix[i, j], j) for j in range(len(distance_matrix[i]))]
        heapq.heapify(min_heap)
        for j in range(len(distance_matrix[i])):
            # We store the distance from node i to node j as well as node j to node i
            heuristics[i, min_heap[j][1]] = min_heap[j][0]
            heuristics[min_heap[j][1], i] = min_heap[j][0]
    
    return heuristics
```
