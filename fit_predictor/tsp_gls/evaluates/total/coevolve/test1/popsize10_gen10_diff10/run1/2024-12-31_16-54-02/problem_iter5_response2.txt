```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the shortest distance from each node to every other node
    for i in range(len(distance_matrix)):
        # For each node i, the shortest distance to j via k is the minimum of the distance from i to k and k to j
        for j in range(len(distance_matrix)):
            if i != j:
                # Calculate the shortest path from i to j via any node k
                heuristics[i, j] = np.min(distance_matrix[i, :] + distance_matrix[:, j])
    
    # Since the TSP is symmetric, the heuristic from i to j is the same as from j to i
    heuristics = (heuristics + heuristics.T) / 2
    
    return heuristics
```
