```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Use symmetry to only calculate half of the heuristics matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):
            # Use domain-specific knowledge to calculate heuristics
            # The heuristic value is the shortest distance to any other node from both i and j
            # We calculate this by adding the shortest distances from i to j and from j to i
            heuristics[i, j] = distance_matrix[i, j] + distance_matrix[j, i]
            # Use symmetry to avoid redundant calculations for the reverse path
            heuristics[j, i] = heuristics[i, j]
    
    return heuristics
```
