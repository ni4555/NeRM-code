```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate all-pairs shortest path using the Floyd-Warshall algorithm
    dist = distance_matrix.copy()
    for k in range(len(dist)):
        for i in range(len(dist)):
            for j in range(len(dist)):
                dist[i, j] = min(dist[i, j], dist[i, k] + dist[k, j])
    
    # Create a matrix to calculate the sum of distances from each node to all others
    sum_dist_from_i = np.sum(dist, axis=1)
    sum_dist_from_j = np.sum(dist, axis=0)
    
    # Calculate the heuristics for each edge (i, j)
    heuristics = np.minimum(sum_dist_from_i + sum_dist_from_j[:, np.newaxis] - 2 * dist, 0)
    
    return heuristics
```
