```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Compute the minimum distance for each node to all other nodes
    min_distances = np.min(distance_matrix, axis=1)
    
    # Calculate heuristics by adding the minimum distance to each edge
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            heuristics[i, j] = min_distances[i] + min_distances[j]
            heuristics[j, i] = heuristics[i, j]
    
    # Since we've only calculated heuristics for i to j, we need to calculate for j to i as well
    heuristics += heuristics.T - np.diag(heuristics)
    
    return heuristics
```
