```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = len(distance_matrix)
    heuristics = np.zeros_like(distance_matrix)
    centers = np.argmin(distance_matrix, axis=1)
    
    # Pre-compute the distances from each center to every other center
    center_distances = np.tril(distance_matrix[np.argsort(centers), :][:, 1:], k=-1)
    
    # Initialize the heuristics for the first node using the closest center
    for i in range(n):
        heuristics[i, centers[i]] = 0
    
    # For each remaining node, find the closest center to it
    for i in range(n):
        if heuristics[i, centers[i]] == 0:
            for j in range(n):
                if j != i and heuristics[j, centers[i]] == 0:
                    heuristics[i, j] = center_distances[i, j]
                    heuristics[j, i] = center_distances[i, j]
    
    return heuristics
```
