```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            min_shortest_path = np.argmin(distance_matrix[i, :])
            min_longest_path = np.argmax(distance_matrix[i, :])
            max_shortest_path = np.argmin(distance_matrix[j, :])
            max_longest_path = np.argmax(distance_matrix[j, :])
            
            # Consider the shortest and longest paths from node i and node j to other nodes
            shortest_path_i_to_j = distance_matrix[i, min_shortest_path] + distance_matrix[min_shortest_path, j]
            longest_path_i_to_j = distance_matrix[i, min_longest_path] + distance_matrix[min_longest_path, j]
            shortest_path_j_to_i = distance_matrix[j, max_shortest_path] + distance_matrix[max_shortest_path, i]
            longest_path_j_to_i = distance_matrix[j, max_longest_path] + distance_matrix[max_longest_path, i]
            
            # Calculate the heuristic values by averaging the shortest and longest paths
            heuristics[i, j] = 0.5 * (shortest_path_i_to_j + longest_path_i_to_j)
            heuristics[j, i] = 0.5 * (shortest_path_j_to_i + longest_path_j_to_i)
    
    return heuristics
```
