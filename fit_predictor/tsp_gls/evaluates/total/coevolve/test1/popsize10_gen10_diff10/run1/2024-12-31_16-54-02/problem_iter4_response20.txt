```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = len(distance_matrix)
    heuristics = np.zeros_like(distance_matrix)
    
    # Perform K-means clustering to identify centers
    k = 2  # Assuming we are interested in the first two clusters
    centroids = np.cluster.vq.kmeans2(distance_matrix, k, iter=10)[0]
    
    # Assign each node to the closest centroid
    for i in range(n):
        heuristics[i, centroids[i]] = 0
    
    # Calculate the minimum distances from each node to its assigned centroid
    min_distances = np.min(distance_matrix, axis=1)
    
    # Initialize the heuristics for each edge based on the minimum distances
    for i in range(n):
        for j in range(n):
            if heuristics[i, j] == 0:
                heuristics[i, j] = min_distances[i]
                heuristics[j, i] = min_distances[j]
    
    # Calculate the average distance from each node to its assigned centroid
    average_distances = np.mean(distance_matrix, axis=1)
    
    # Adjust heuristics to encourage paths that are within a certain multiple of the average distance
    threshold_multiplier = 1.5  # This can be adjusted based on the problem instance
    max_average_distance = np.max(average_distances)
    
    for i in range(n):
        for j in range(n):
            if heuristics[i, j] > threshold_multiplier * max_average_distance:
                heuristics[i, j] = threshold_multiplier * max_average_distance
    
    return heuristics
```
