```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Use Dijkstra's algorithm to precompute shortest paths for all pairs of nodes
    for i in range(len(distance_matrix)):
        # Precompute the shortest paths from node i to all other nodes
        shortest_paths = np.argsort(distance_matrix[i, :])
        # Set the heuristic value from i to j as the shortest path distance
        for j in range(len(distance_matrix[i])):
            heuristics[i, shortest_paths[j]] = distance_matrix[i, shortest_paths[j]]
    
    # Precompute the shortest paths for the transposed matrix as well to utilize symmetry
    for j in range(len(distance_matrix)):
        # Precompute the shortest paths from node j to all other nodes
        shortest_paths = np.argsort(distance_matrix[:, j])
        # Set the heuristic value from j to i as the shortest path distance
        for i in range(len(distance_matrix[j])):
            heuristics[shortest_paths[i], j] = distance_matrix[shortest_paths[i], j]
    
    # Since the heuristic is symmetric, we only need to store one half of the matrix
    # The diagonal elements are not relevant since they represent the distance from a node to itself
    half_size = (len(distance_matrix) * (len(distance_matrix) - 1)) // 2
    return heuristics[:half_size, :]
```
