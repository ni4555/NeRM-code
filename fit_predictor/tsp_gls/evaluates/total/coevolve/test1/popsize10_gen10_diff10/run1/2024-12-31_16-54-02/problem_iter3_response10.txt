```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Precompute shortest paths from each node to every other node
    shortest_paths = np.argmin(distance_matrix, axis=1)
    
    # Calculate heuristics based on the precomputed shortest paths
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Use symmetry to only calculate once for each pair of nodes
            heuristics[i, j] = distance_matrix[i, shortest_paths[j]]
    
    return heuristics
```
