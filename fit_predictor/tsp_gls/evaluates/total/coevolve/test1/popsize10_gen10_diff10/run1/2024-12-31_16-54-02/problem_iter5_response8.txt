```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the shortest path for each pair of nodes
    for i in range(len(distance_matrix)):
        # For each node i, find the node j that is closest to i
        closest_node = np.argmin(distance_matrix[i, :])
        # The heuristic value is the distance from node i to node j
        heuristics[i, closest_node] = distance_matrix[i, closest_node]
        heuristics[closest_node, i] = distance_matrix[closest_node, i]
    
    # To balance local and global information, add the sum of the distances of each node
    # to all other nodes as a secondary heuristic value
    node_sum_distances = np.sum(distance_matrix, axis=1)
    heuristics += node_sum_distances[:, np.newaxis]
    
    return heuristics
```
