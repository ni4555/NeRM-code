```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = len(distance_matrix)
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the center of gravity for each cluster
    centers = np.argmin(distance_matrix, axis=1)
    
    # Initialize heuristics based on the center of gravity
    for i in range(n):
        heuristics[i, centers[i]] = 0
    
    # Calculate the sum of distances from each node to its assigned center
    min_sum_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the sum of distances from each node to the nearest center
    for i in range(n):
        for j in range(n):
            if heuristics[i, j] == 0:
                heuristics[i, j] = distance_matrix[i, centers[j]]
                heuristics[j, i] = distance_matrix[j, centers[i]]
    
    # Calculate the maximum sum of distances to centers to use as a threshold
    max_sum_distances = np.max(min_sum_distances)
    
    # Adjust heuristics based on the threshold to encourage shorter paths
    for i in range(n):
        for j in range(n):
            if heuristics[i, j] > max_sum_distances:
                heuristics[i, j] = max_sum_distances
    
    return heuristics
```
