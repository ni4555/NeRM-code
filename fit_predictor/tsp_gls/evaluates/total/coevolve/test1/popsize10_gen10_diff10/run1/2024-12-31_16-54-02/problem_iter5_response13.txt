```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Precompute the shortest path to all nodes from each node using Dijkstra's algorithm
    # We use a priority queue (heap) to find the shortest path
    from heapq import heappop, heappush, heapify
    
    for i in range(len(distance_matrix)):
        # Priority queue for the current node i
        pq = [(0, i)]  # (cost, node)
        # Dictionary to keep track of the shortest distance to each node
        shortest_distances = {i: 0}
        # List of visited nodes
        visited = set()
        
        while pq:
            cost, node = heappop(pq)
            if node in visited:
                continue
            visited.add(node)
            
            for j in range(len(distance_matrix[node])):
                if j not in visited:
                    new_cost = cost + distance_matrix[node][j]
                    if new_cost < shortest_distances.get(j, float('inf')):
                        shortest_distances[j] = new_cost
                        heappush(pq, (new_cost, j))
        
        # Store the shortest distances from node i to all other nodes
        heuristics[i] = np.array([shortest_distances[j] for j in range(len(distance_matrix)) if j != i])
    
    # Due to symmetry, the heuristic matrix is symmetric, so we only need to compute one half and copy it
    heuristics = heuristics + heuristics.T - np.diag(heuristics.diagonal())
    
    return heuristics
```
