```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the mean distance from each node to the node with the minimum sum distance
    min_sum_distances = np.sum(distance_matrix, axis=1)
    min_node = np.argmin(min_sum_distances)
    for i in range(len(distance_matrix)):
        heuristics[i, min_node] = min_sum_distances[i]
    
    # Calculate the mean distance from each node to the node with the maximum sum distance
    max_sum_distances = np.sum(distance_matrix, axis=1)
    max_node = np.argmax(max_sum_distances)
    for i in range(len(distance_matrix)):
        heuristics[i, max_node] = max_sum_distances[i]
    
    # Fill in the rest of the heuristics based on the maximum and minimum values
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            heuristics[i, j] = max(min(distance_matrix[i, j], max_sum_distances[i] + max_sum_distances[j] - min_sum_distances[i] - min_sum_distances[j]), min(distance_matrix[i, j], min_sum_distances[i] + min_sum_distances[j] - max_sum_distances[i] - max_sum_distances[j]))
    
    return heuristics
```
