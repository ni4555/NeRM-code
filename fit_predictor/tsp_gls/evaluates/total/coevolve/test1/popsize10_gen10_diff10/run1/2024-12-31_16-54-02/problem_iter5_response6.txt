```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate heuristics for each edge using the following strategy:
    # We use the minimum of the distances from node i to node j and from node j to node i
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            heuristics[i, j] = min(distance_matrix[i, j], distance_matrix[j, i])
    
    # Fill in the upper triangle of the matrix, exploiting symmetry
    np.fill_diagonal(heuristics, distance_matrix.diagonal())
    np.fill_diagonal(heuristics.T, distance_matrix.diagonal())
    
    return heuristics
```
