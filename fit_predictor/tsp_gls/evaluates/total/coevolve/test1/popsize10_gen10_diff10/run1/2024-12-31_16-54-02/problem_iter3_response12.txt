```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the heuristics for each edge using the maximum distance from the start node to the end node
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Use the maximum distance between node i and any other node as a heuristic
            heuristics[i, j] = np.max(distance_matrix[i, :])
            heuristics[j, i] = np.max(distance_matrix[j, :])
    
    # To improve the heuristic, add the minimum distance between the two nodes
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            heuristics[i, j] += np.min(distance_matrix[i, j])
            heuristics[j, i] += np.min(distance_matrix[i, j])
    
    return heuristics
```
