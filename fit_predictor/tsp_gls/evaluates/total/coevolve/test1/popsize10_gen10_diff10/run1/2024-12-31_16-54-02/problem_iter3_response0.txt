```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance_matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the total distance for each pair of nodes
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            heuristics[i, j] = heuristics[j, i] = distance_matrix[i, j]
    
    # For each node, consider the shortest distance to all other nodes to find the heuristics
    for node in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if j != node:
                for k in range(len(distance_matrix)):
                    if k != node and k != j:
                        heuristics[node, j] = min(heuristics[node, j], heuristics[node, k] + heuristics[k, j])
    
    # Remove the symmetry by setting the diagonal to np.inf, as the cost to itself is not considered
    np.fill_diagonal(heuristics, np.inf)
    
    return heuristics
```
