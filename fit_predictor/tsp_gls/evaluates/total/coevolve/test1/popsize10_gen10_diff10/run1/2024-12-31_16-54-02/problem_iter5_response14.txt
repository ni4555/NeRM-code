```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix to store heuristics
    heuristics = np.zeros_like(distance_matrix)
    
    # Loop through each pair of nodes
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Since the TSP has symmetric costs, we calculate the heuristic by
            # taking the minimum distance between node i and j to all nodes
            min_distance_to_j = np.min(distance_matrix[i, :])
            min_distance_to_i = np.min(distance_matrix[j, :])
            # Heuristic is the sum of distances from node i to the closest node of node j
            # and from node j to the closest node of node i minus the direct distance
            heuristics[i, j] = min_distance_to_j + min_distance_to_i - distance_matrix[i, j]
    
    return heuristics
```
