```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distance matrix by the maximum distance from each point
    max_distances = np.max(distance_matrix, axis=1)[:, None]
    normalized_distances = distance_matrix / (max_distances[:, None] + 1)
    
    # Adjust the heuristic to penalize longer distances more
    # and to exploit the symmetry of the problem
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # The heuristic value is now a combination of the normalized distance
                # and a penalty factor that reduces the value of longer distances
                penalty_factor = np.exp(-normalized_distances[i, j])
                heuristic_value = normalized_distances[i, j] * penalty_factor
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
