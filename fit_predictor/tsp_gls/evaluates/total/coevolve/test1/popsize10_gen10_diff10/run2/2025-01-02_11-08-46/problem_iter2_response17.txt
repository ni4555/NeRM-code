```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply a refined heuristic based on the structure of the problem
    # This heuristic considers the average of the minimum distance to each city
    # and the distance between cities, normalized by the average minimum distance
    for i in range(len(distance_matrix)):
        min_distance_to_i = np.min(distance_matrix[i])
        for j in range(i+1, len(distance_matrix)):
            min_distance_to_j = np.min(distance_matrix[j])
            if min_distance_to_i > 0:
                heuristic_value = (min_distance_to_i + min_distance_to_j) / (2 * min_distance_to_i)
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
