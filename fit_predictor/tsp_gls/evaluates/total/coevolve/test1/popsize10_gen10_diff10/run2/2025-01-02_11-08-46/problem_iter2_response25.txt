```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the total distance of each edge in the matrix
    total_distance = np.sum(distance_matrix, axis=0)
    
    # Normalize the total distance to get the average distance from each node
    average_distance = total_distance / (len(distance_matrix) - 1)
    
    # Calculate the relative distances from each node to every other node
    relative_distances = distance_matrix / average_distance[:, None]
    
    # Adjust the relative distances to avoid negative values by taking the max between zero and the original values
    relative_distances = np.maximum(0, relative_distances)
    
    return relative_distances
```
