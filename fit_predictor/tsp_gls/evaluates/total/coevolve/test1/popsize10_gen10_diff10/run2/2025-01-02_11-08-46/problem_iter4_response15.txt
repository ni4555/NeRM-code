```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply the nearest neighbor heuristic with normalized distances
    for i in range(len(distance_matrix)):
        nearest_neighbors = np.argsort(distance_matrix[i])[1:]
        for nearest_neighbor in nearest_neighbors:
            min_distance = np.min(distance_matrix[i])
            normalized_diff = (distance_matrix[i, nearest_neighbor] - min_distance) / min_distance
            heuristic_matrix[i, nearest_neighbor] = normalized_diff
            heuristic_matrix[nearest_neighbor, i] = normalized_diff
    
    # Refine the heuristic values by considering the sum of distances
    for i in range(len(distance_matrix)):
        sum_distances_to_i = np.sum(distance_matrix[i])
        for j in range(i+1, len(distance_matrix)):
            sum_distances_to_j = np.sum(distance_matrix[j])
            shortest_sum = np.min([sum_distances_to_i, sum_distances_to_j])
            if shortest_sum > 0:
                heuristic_value = distance_matrix[i, j] / shortest_sum
                heuristic_matrix[i, j] = heuristic_value
                heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
