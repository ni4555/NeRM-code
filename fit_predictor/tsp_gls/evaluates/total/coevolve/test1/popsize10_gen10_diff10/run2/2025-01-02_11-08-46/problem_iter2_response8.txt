```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Improved heuristic: Use the maximum distance from a point to any other point as the heuristic value,
    # but modify it to account for the symmetry of the problem by using the maximum of the sum of distances
    # to all other points minus the distance to the current point for each edge.
    for i in range(len(distance_matrix)):
        # Calculate the sum of distances from point i to all other points, excluding the distance to itself
        total_distance_from_i = np.sum(distance_matrix[i]) - distance_matrix[i, i]
        for j in range(i+1, len(distance_matrix)):  # Only need to calculate for upper triangle
            # Calculate the sum of distances from point j to all other points, excluding the distance to itself
            total_distance_from_j = np.sum(distance_matrix[j]) - distance_matrix[j, j]
            # Use the maximum of the total distances as the heuristic value
            heuristic_value = max(total_distance_from_i, total_distance_from_j)
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
