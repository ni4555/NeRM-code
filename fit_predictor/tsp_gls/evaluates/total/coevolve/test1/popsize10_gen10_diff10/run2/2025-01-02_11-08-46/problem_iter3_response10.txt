```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply a more refined heuristic, considering both local and global aspects
    # Example heuristic: Use a weighted sum of local minima and global maxima
    global_max_distance = np.max(distance_matrix)
    local_minima = np.min(distance_matrix, axis=1)[:, None]
    local_maxima = np.max(distance_matrix, axis=1)[:, None]
    
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Normalize by global max and balance local minima and maxima
                heuristic_value = distance_matrix[i, j] / (global_max_distance + 0.5 * (local_minima[i] + local_maxima[j] - distance_matrix[i, j]))
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
