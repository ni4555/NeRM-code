```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distances to ensure all values are between 0 and 1
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Calculate the heuristic values based on normalized distances and the triangle inequality
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):  # Only iterate over upper triangle
            if i != j:
                # Weigh the normalized distance by the maximum of the triangle inequality
                # between node i and all other nodes, normalized to the maximum possible sum
                max_sum_distances = np.max(normalized_matrix[i, :])
                heuristic_value = normalized_matrix[i, j] * (max_sum_distances - normalized_matrix[i, j])
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
    
    # Due to symmetry, fill the lower triangle
    heuristic_matrix = heuristic_matrix + heuristic_matrix.T - np.diag(heuristic_matrix)
    
    return heuristic_matrix
```
