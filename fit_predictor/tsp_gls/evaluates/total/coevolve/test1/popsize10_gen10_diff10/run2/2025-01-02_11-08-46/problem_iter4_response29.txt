```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = len(distance_matrix)
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the minimum path length from each node to all other nodes
    min_path_lengths = np.min(distance_matrix, axis=1)[:, None]
    
    # Calculate the shortest path length that includes the edge (i, j)
    for i in range(n):
        for j in range(i+1, n):
            shortest_path_length = min_path_lengths[i] + min_path_lengths[j] - distance_matrix[i, j]
            heuristic_value = 1 / (1 + shortest_path_length)
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
