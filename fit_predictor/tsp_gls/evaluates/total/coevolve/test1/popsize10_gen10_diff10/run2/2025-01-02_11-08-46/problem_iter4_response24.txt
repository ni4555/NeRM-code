```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the average distance to all other points for each node
    average_distances = np.sum(distance_matrix, axis=1) / (len(distance_matrix) - 1)
    
    # Calculate the longest distance between any two nodes
    max_distance = np.max(distance_matrix)
    
    # Apply the heuristic: the higher the average distance, the higher the heuristic value
    # Avoiding zero heuristic values by setting a minimum based on the maximum distance
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # The heuristic is the inverse of the sum of the average distances minus the actual distance
                # Avoiding negative values and ensuring that the heuristic is not zero
                heuristic_value = 1 / (average_distances[i] + average_distances[j] - distance_matrix[i, j])
                heuristic_value = np.clip(heuristic_value, 1 / max_distance, 1)
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
