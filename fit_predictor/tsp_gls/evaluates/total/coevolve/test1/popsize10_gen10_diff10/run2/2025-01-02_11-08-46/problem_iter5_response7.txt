```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distances to ensure all values are between 0 and 1
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Calculate the heuristic values based on normalized distances
    for i in range(len(distance_matrix)):
        for j in range(i):  # Only iterate over unique edges to exploit symmetry
            # Blend heuristics by considering a weighted sum of the normalized distance
            # and the inverse of the shortest path to a third node
            third_node = (i + 1) % len(distance_matrix)
            sum_inverse_shortest_paths = np.sum(1 / (normalized_matrix[:, third_node]))
            heuristic_value = normalized_matrix[i, j] * sum_inverse_shortest_paths
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
