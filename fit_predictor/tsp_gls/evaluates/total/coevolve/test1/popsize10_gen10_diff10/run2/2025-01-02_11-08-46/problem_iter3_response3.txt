```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix
    normalized_matrix = (distance_matrix - np.min(distance_matrix)) / (np.max(distance_matrix) - np.min(distance_matrix))
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply a weighted combination of shortest path to each node and inverse distance
    for i in range(len(distance_matrix)):
        shortest_path_sum = np.sum(normalized_matrix[i])
        max_distance = np.max(distance_matrix[i])
        for j in range(len(distance_matrix)):
            if i != j:
                # Use a balance between the shortest path to each node and the inverse distance
                heuristic_value = shortest_path_sum / (1 + max_distance - distance_matrix[i, j])
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
