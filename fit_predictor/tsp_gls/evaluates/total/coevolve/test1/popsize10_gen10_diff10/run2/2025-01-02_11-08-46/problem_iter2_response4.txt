```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the minimum distance for each pair of cities
    min_distance = np.min(distance_matrix, axis=1)
    
    # Calculate the maximum distance for each city
    max_distance = np.max(distance_matrix, axis=0)
    
    # Calculate the sum of distances for each city
    sum_distances = np.sum(distance_matrix, axis=1)
    
    # For each pair of cities, compute the heuristic based on:
    # - The minimum distance between the two cities (lower is better)
    # - The ratio of the maximum distance from each city to its own sum of distances (lower is better)
    # - The difference in their total distance sums (lower is better)
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            heuristic_value = (
                min_distance[i] + min_distance[j] - distance_matrix[i, j] +
                np.abs(sum_distances[i] - sum_distances[j]) +
                np.min([sum_distances[i] / max_distance[i], sum_distances[j] / max_distance[j]])
            )
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
