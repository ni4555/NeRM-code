```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the total distance from each node to all others
    min_distances = np.min(distance_matrix, axis=1)[:, None]
    max_distances = np.max(distance_matrix, axis=1)[:, None]
    
    # Calculate the average distance in the matrix
    avg_distance = np.sum(distance_matrix) / np.size(distance_matrix)
    
    # Calculate the average edge length
    avg_edge_length = np.mean(distance_matrix)
    
    # Calculate the total distance of the longest possible Hamiltonian path
    longest_path_length = 2 * (np.trace(distance_matrix) - np.trace(np.tri(distance_matrix, k=-1)))
    
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Calculate the heuristic based on the minimum distances and average distance
                heuristic_value = (distance_matrix[i, j] / (min_distances[i] + min_distances[j])) + \
                                  (avg_distance - np.mean([distance_matrix[i, k] + distance_matrix[j, k] for k in range(len(distance_matrix))]))
                # Normalize the heuristic by the longest possible path length and the average edge length
                normalized_heuristic = (heuristic_value / longest_path_length) + (1 - heuristic_value / avg_edge_length)
            else:
                # The diagonal elements of the matrix are zero
                normalized_heuristic = 0
            
            # Assign the normalized heuristic value to the matrix
            heuristic_matrix[i, j] = normalized_heuristic
            heuristic_matrix[j, i] = normalized_heuristic  # Symmetry of the matrix
    
    return heuristic_matrix
```
