```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix to the range [0, 1]
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(normalized_matrix, axis=1)
    
    # Calculate the minimum distance from each pair of nodes to any other node
    min_pair_distances = np.min(normalized_matrix, axis=0)
    
    # Apply a heuristic that emphasizes shorter paths and considers the minimum distance from each pair
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Combine the normalized distance with the minimum distances to other nodes
                heuristic_value = normalized_matrix[i, j] / (1 + min_distances[i] + min_distances[j] + min_pair_distances[i, j])
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
