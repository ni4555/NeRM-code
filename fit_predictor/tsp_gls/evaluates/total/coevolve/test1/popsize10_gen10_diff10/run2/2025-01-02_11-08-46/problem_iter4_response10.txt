```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distance matrix
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Calculate the shortest and longest edge for each node
    min_edges = np.min(distance_matrix, axis=1)
    max_edges = np.max(distance_matrix, axis=1)
    
    # Apply a heuristic that considers both the shortest and longest edges
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                edge_weight = normalized_matrix[i, j]
                min_factor = min_edges[j] / min_edges[i] if i != j else 0
                max_factor = max_edges[j] / max_edges[i] if i != j else 0
                heuristic_value = edge_weight * min_factor + (1 - edge_weight) * max_factor
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
