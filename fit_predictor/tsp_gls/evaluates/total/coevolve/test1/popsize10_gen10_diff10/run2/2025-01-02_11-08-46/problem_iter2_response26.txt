```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply the improved heuristic that utilizes node characteristics
    # Example heuristic: Calculate the sum of the distances to the nearest neighbor
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):  # Only need to calculate for upper triangle
            # Hypothetical heuristic: Sum of distances to the nearest neighbor from both endpoints
            nearest_neighbors = np.argsort(distance_matrix[i]) + np.argsort(distance_matrix[j])
            heuristic_value = np.sum(distance_matrix[i][nearest_neighbors[:2]] + distance_matrix[j][nearest_neighbors[:2]])
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
