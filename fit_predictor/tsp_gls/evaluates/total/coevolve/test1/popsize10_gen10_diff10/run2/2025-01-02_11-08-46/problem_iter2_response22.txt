```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply a combination of nearest neighbor and central point metrics
    for i in range(len(distance_matrix)):
        # Find the nearest neighbor node to node i
        nearest_neighbor_index = np.argmin(distance_matrix[i])
        # Find the most central node based on sum of distances to all nodes
        central_index = np.where(distance_matrix.sum(axis=0) == distance_matrix.sum(axis=0).min())[0][0]
        # Calculate the heuristic as the weighted difference between nearest neighbor and central distances
        nearest_neighbor_heuristic = distance_matrix[i, nearest_neighbor_index]
        central_point_heuristic = abs(distance_matrix[i, central_index])
        heuristic_value = (1 - 0.5) * nearest_neighbor_heuristic + (0.5 * central_point_heuristic)
        # Assign the heuristic value to the matrix
        heuristic_matrix[i, nearest_neighbor_index] = heuristic_value
        heuristic_matrix[nearest_neighbor_index, i] = heuristic_value
        heuristic_matrix[i, central_index] = central_point_heuristic
        heuristic_matrix[central_index, i] = central_point_heuristic
    
    # Ensure the diagonal is not set to a heuristic value
    np.fill_diagonal(heuristic_matrix, 0)
    
    return heuristic_matrix
```
