```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Improved heuristic: Calculate a weighted combination of min and max distances to other nodes
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):  # Only need to calculate for upper triangle
            min_distance = np.min(distance_matrix[i]) + np.min(distance_matrix[j])
            max_distance = np.max(distance_matrix[i]) + np.max(distance_matrix[j])
            # Weight the maximum sum as a penalty for edges connecting nodes far from their own neighborhoods
            weight = np.exp(-len(distance_matrix) / max(min_distance, max_distance))
            # Calculate the heuristic based on weighted distances
            heuristic_value = (min_distance + weight * max_distance) / (1 + weight)
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
