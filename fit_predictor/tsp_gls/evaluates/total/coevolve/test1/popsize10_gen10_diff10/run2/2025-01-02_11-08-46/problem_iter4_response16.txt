```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distance matrix
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Improved heuristic: Consider the balance between the shortest and longest edges
    # and their normalized values, weighted by the node centrality
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                shortest_edge = np.min(distance_matrix[i])
                longest_edge = np.max(distance_matrix[i])
                # Use a simple centrality measure as the average distance to other nodes
                centrality_i = np.mean(distance_matrix[i])
                centrality_j = np.mean(distance_matrix[j])
                # Weigh the normalized edge distance by the inverse centrality to penalize
                # less central nodes with larger edges more heavily
                heuristic_value = normalized_matrix[i, j] * (longest_edge / shortest_edge) * (centrality_i + centrality_j)
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
