```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Improved heuristic: Consider the minimum distance to a destination node
    # as well as the minimum distance from a starting node. Also, use a logarithmic
    # scale to emphasize shorter paths more than longer ones.
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            # Sum of distances: the shortest path to 'j' via 'i' and the shortest path
            # from 'i' to all other nodes plus the distance 'i' to 'j'
            sum_distances = np.sum(np.minimum(distance_matrix[i], distance_matrix[:, j]))
            # Apply a logarithmic function to emphasize shorter paths
            heuristic_value = np.log(sum_distances + 1)  # Adding 1 to avoid logarithm of zero
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
