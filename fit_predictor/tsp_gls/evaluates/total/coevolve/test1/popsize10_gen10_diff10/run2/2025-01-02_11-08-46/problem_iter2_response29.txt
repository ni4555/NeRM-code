```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the center of the matrix (could be the median, mean, etc.)
    # For simplicity, using the mean in this case
    row_means = np.mean(distance_matrix, axis=1)
    col_means = np.mean(distance_matrix, axis=0)
    row_center = np.argmin(np.abs(row_means))
    col_center = np.argmin(np.abs(col_means))
    
    # Calculate the heuristic value based on the difference to the center
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            # Calculate the difference to the center from both nodes
            heuristic_value = abs(distance_matrix[i, row_center] - distance_matrix[i, col_center]) + \
                             abs(distance_matrix[j, row_center] - distance_matrix[j, col_center])
            # Update the heuristic matrix, considering symmetry
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
