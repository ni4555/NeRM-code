```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the centrality for each node based on the sum of the shortest paths to all other nodes
    centrality = np.sum(distance_matrix, axis=0)
    
    # Calculate the average distance between all pairs of nodes
    avg_distance = np.sum(distance_matrix) / (np.size(distance_matrix) * (np.size(distance_matrix) - 1))
    
    # Combine centrality and average distance to get a balanced measure
    combined Measure = centrality / degrees
    
    # Adjust the heuristic based on combined measure and normalize by the average distance
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                heuristic_value = combined_Measure[i] + combined_Measure[j] - 2 * avg_distance
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
