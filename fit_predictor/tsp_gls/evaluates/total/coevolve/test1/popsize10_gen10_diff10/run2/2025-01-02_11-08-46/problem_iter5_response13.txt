```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distances to ensure all values are between 0 and 1
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Calculate the heuristic values based on normalized distances
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Incorporate symmetry and prior knowledge of the TSP
                # The heuristic will favor shorter distances between more frequently used edges
                # Normalize the sum of the maximum distances to all other nodes for normalization
                max_distances = np.max(normalized_matrix, axis=1)[:, None]
                sum_max_distances = np.sum(max_distances)
                max_distance_from_i = np.max(normalized_matrix[i])
                max_distance_from_j = np.max(normalized_matrix[j])
                heuristic_value = (normalized_matrix[i, j] * sum_max_distances +
                                   max_distance_from_i * max_distance_from_j -
                                   max_distance_from_i - max_distance_from_j)
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
