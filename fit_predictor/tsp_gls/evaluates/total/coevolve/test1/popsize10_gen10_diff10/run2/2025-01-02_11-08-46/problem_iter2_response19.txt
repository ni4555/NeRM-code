```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Define a path length function to calculate the cumulative distance
    def path_length(path):
        return np.sum(distance_matrix[path[:-1], path[1:]])
    
    # Calculate the total length of the longest possible Hamiltonian path
    longest_path_length = np.max(np.tril(distance_matrix).sum(axis=1) + np.triu(distance_matrix).sum(axis=0))
    
    # Apply a modified version of the nearest neighbor heuristic and incorporate path length insights
    for i in range(len(distance_matrix)):
        min_distance_indices = np.argpartition(distance_matrix[i], 1)[:2]
        nearest_neighbor_index = min_distance_indices[1]  # Skip the first index to maintain diversity
        path_with_nearest_neighbor = np.array([i, nearest_neighbor_index])
        
        # Calculate the heuristic as a function of the difference in distance and the path length
        heuristic_value = distance_matrix[i, nearest_neighbor_index] - path_length(path_with_nearest_neighbor)
        # Normalize the heuristic by the longest possible path length
        normalized_heuristic = heuristic_value / longest_path_length
        
        # Assign the normalized heuristic value to the matrix
        heuristic_matrix[i, nearest_neighbor_index] = normalized_heuristic
        heuristic_matrix[nearest_neighbor_index, i] = normalized_heuristic
    
    return heuristic_matrix
```
