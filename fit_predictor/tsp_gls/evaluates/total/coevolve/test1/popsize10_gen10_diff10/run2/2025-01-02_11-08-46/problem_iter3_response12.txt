```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distance matrix by dividing each edge by the maximum distance in the same row or column
    row_maxes = np.max(distance_matrix, axis=1)[:, None]
    col_maxes = np.max(distance_matrix, axis=0)
    normalized_matrix = distance_matrix / np.maximum(row_maxes, col_maxes)
    
    # Incorporate the distance matrix symmetry
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Use the normalized distance matrix as a base
                # Add a penalty for direct connection between two nodes (1 - distance)
                heuristic_value = normalized_matrix[i, j] + (1 - distance_matrix[i, j])
            else:
                # Nodes to themselves should have a heuristic value of 0
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
