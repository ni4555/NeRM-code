```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Normalize the distances to ensure all values are between 0 and 1
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Calculate the heuristic values based on normalized distances
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Use a more complex heuristic that takes into account the average distance
                # from each node to the nearest node, weighted by the distance to the current node
                nearest_node_avg = np.mean(normalized_matrix[i] * normalized_matrix[j])
                heuristic_value = normalized_matrix[i, j] * (1 - nearest_node_avg)
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
