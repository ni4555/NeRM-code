```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply the improved heuristic by combining local and global knowledge
    for i in range(len(distance_matrix)):
        # Find the nearest neighbor node to node i
        nearest_neighbor_index = np.argmin(distance_matrix[i])
        # Find the farthest neighbor node from node i
        farthest_neighbor_index = np.argmax(distance_matrix[i])
        # Calculate local and global heuristic values
        local_heuristic = distance_matrix[i, nearest_neighbor_index]
        global_heuristic = (distance_matrix[i, farthest_neighbor_index] - distance_matrix[i].mean()) / distance_matrix[i, farthest_neighbor_index]
        # Assign combined heuristic value to the matrix
        heuristic_value = local_heuristic + global_heuristic
        heuristic_matrix[i, nearest_neighbor_index] = heuristic_value
        heuristic_matrix[nearest_neighbor_index, i] = heuristic_value
        
        # Update the rest of the heuristic values considering symmetry
        for j in range(len(distance_matrix)):
            if j != i and j != nearest_neighbor_index:
                # Calculate heuristic value considering the maximum of the two known heuristics
                combined_heuristic = max(distance_matrix[i, j] / (1 + distance_matrix[i].mean() - distance_matrix[i, j]),
                                          distance_matrix[i, j] / (1 + distance_matrix[i].mean() - distance_matrix[i, j]))
                heuristic_matrix[i, j] = combined_heuristic
                heuristic_matrix[j, i] = combined_heuristic
    
    return heuristic_matrix
```
