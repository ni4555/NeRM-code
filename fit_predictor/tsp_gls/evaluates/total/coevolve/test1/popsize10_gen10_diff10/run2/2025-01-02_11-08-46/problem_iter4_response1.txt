```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the average distance of each node
    node_distances = np.sum(distance_matrix, axis=1)
    node_distances /= (len(distance_matrix) - 1)  # Exclude the node itself

    # Calculate the heuristic value based on the average distance and normalize it
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                heuristic_value = distance_matrix[i, j] / (1 + node_distances[i] - node_distances[j])
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
