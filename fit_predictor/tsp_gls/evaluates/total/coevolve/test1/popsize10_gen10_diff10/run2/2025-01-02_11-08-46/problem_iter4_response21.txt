```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the global maximum distance
    global_max_distance = np.max(distance_matrix)
    
    # Calculate the average distance between each pair of nodes
    average_distances = (distance_matrix + distance_matrix.T) / 2
    
    # Calculate the maximum distance to any node for each node
    max_distances = np.max(distance_matrix, axis=1)[:, None]
    
    # Calculate the minimum distance to any node for each node
    min_distances = np.min(distance_matrix, axis=1)[:, None]
    
    # Combine heuristics using a weighted sum of local and global information
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Normalize the distance by the global maximum to prevent dominance of large numbers
                normalized_distance = average_distances[i, j] / global_max_distance
                
                # Adjust the heuristic with local minima and maxima
                local_min = min_distances[i]
                local_max = max_distances[j]
                
                # Use a weighted sum to balance the influence of local and global information
                heuristic_value = (normalized_distance * local_min +
                                   (1 - normalized_distance) * local_max)
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
