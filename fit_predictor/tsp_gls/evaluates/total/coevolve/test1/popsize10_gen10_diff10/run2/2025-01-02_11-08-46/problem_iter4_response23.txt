```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the maximum distance for each node from the other nodes
    max_distances = np.max(distance_matrix, axis=1)
    
    # The heuristic value is based on the ratio of the edge weight to the difference
    # between the maximum distance to the other node and the distance to the end node
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            heuristic_value = distance_matrix[i, j] / (max_distances[i] - distance_matrix[i, j])
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
