```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Example heuristic: Calculate the minimum distance from a point to all others
    min_distances = np.min(distance_matrix, axis=1)[:, None]
    # Normalize by adding the average distance in the matrix
    avg_distance = np.sum(distance_matrix) / np.size(distance_matrix)
    
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                heuristic_value = (distance_matrix[i, j] / (min_distances[i] + min_distances[j])) + \
                                  (avg_distance - np.mean([distance_matrix[i, k] + distance_matrix[j, k] for k in range(len(distance_matrix))]))
            else:
                heuristic_value = 0
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
