```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Improved heuristic: Calculate the heuristic based on the shortest path length
    # The heuristic for each edge will be the inverse of the sum of the shortest paths
    # that include the edge.
    for i in range(len(distance_matrix)):
        for j in range(i+1, len(distance_matrix)):
            shortest_path_length = np.sum(np.minimum(distance_matrix[i], distance_matrix[:, j]))
            heuristic_value = 1 / (shortest_path_length + 1)  # Adding 1 to avoid division by zero
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
