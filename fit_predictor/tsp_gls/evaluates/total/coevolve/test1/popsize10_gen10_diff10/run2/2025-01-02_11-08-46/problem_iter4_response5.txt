```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply an improved heuristic:
    # 1. Edge-weight significance by considering the inverse of the distance (smaller distance is better).
    # 2. Node centrality by using the sum of distances to all other nodes for each node (higher centrality has a lower heuristic value).
    # 3. Balance global (node centrality) and local (edge weight) insights with a weighting factor.
    weight_factor = 0.5  # This can be adjusted to favor either global or local insights
    
    for i in range(len(distance_matrix)):
        sum_distances_from_i = np.sum(distance_matrix[i])
        centrality = 1 / sum_distances_from_i if sum_distances_from_i != 0 else float('inf')
        for j in range(len(distance_matrix)):
            if i != j:
                heuristic_value = (1 / distance_matrix[i, j]) * weight_factor + (centrality * (1 - weight_factor))
                heuristic_matrix[i, j] = heuristic_value
                heuristic_matrix[j, i] = heuristic_value  # Symmetry of the matrix
    
    return heuristic_matrix
```
