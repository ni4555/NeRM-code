```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the total distance for each point to all other points
    total_distances = np.sum(distance_matrix, axis=1)[:, None]
    
    # Calculate the minimum distance from each point to any other point
    min_distances = np.min(distance_matrix, axis=1)[:, None]
    
    # Calculate the heuristic value for each edge
    heuristic_values = (distance_matrix / (1 + total_distances - distance_matrix))
    heuristic_values[distance_matrix == 0] = 0  # Avoid division by zero
    
    # Calculate the adjusted heuristic values by subtracting the minimum distance
    adjusted_heuristic_values = heuristic_values - (min_distances / (1 + total_distances - min_distances))
    
    # Symmetry of the matrix
    adjusted_heuristic_values = (adjusted_heuristic_values + adjusted_heuristic_values.T) / 2
    
    return adjusted_heuristic_values
```
