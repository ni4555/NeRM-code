```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Apply a combination of Manhattan distance and nearest neighbor heuristic
    for i in range(len(distance_matrix)):
        # Find the nearest neighbor node to node i
        nearest_neighbor_index = np.argmin(distance_matrix[i])
        # Calculate the Manhattan distance to the nearest neighbor
        manhattan_distance = np.sum(np.abs(np.subtract(distance_matrix[i], distance_matrix[nearest_neighbor_index])))
        # Use the Manhattan distance as the primary heuristic value
        heuristic_matrix[i, nearest_neighbor_index] = manhattan_distance
        heuristic_matrix[nearest_neighbor_index, i] = manhattan_distance
        
        # Find the second nearest neighbor and calculate the Manhattan distance
        second_nearest_neighbor_index = np.argsort(distance_matrix[i])[1]
        manhattan_distance_second = np.sum(np.abs(np.subtract(distance_matrix[i], distance_matrix[second_nearest_neighbor_index])))
        # Add the second nearest neighbor's Manhattan distance to improve diversity
        heuristic_matrix[i, second_nearest_neighbor_index] = manhattan_distance_second
        heuristic_matrix[second_nearest_neighbor_index, i] = manhattan_distance_second
    
    return heuristic_matrix
```
