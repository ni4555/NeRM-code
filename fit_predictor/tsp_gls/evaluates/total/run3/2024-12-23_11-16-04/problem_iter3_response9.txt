```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance
    average_distance = np.mean(distance_matrix)
    
    # Define a range for "close to average" distances
    close_threshold = average_distance * 0.8
    distant_threshold = average_distance * 1.2
    
    # Define a range for "highly connected" nodes (less than average distance)
    highly_connected_threshold = average_distance * 0.7
    
    # Initialize the penalty matrix
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Define penalties for various conditions
    def long_edge_penalty(distance):
        return max(0, distance - distant_threshold)
    
    def short_edge_penalty(distance):
        return max(0, close_threshold - distance)
    
    def highly_connected_penalty(distance):
        return max(0, distance - highly_connected_threshold)
    
    # Apply penalties based on the conditions
    np.fill_diagonal(penalty_matrix, highly_connected_penalty(distance_matrix.diagonal()))
    np.fill_lower(penalty_matrix, long_edge_penalty(distance_matrix[1:]))
    np.fill_upper(penalty_matrix, short_edge_penalty(distance_matrix[:-1]))
    
    # Use a higher weight for highly connected penalties
    penalty_matrix = penalty_matrix * 0.8 + highly_connected_penalty(distance_matrix) * 0.2
    return penalty_matrix
```
