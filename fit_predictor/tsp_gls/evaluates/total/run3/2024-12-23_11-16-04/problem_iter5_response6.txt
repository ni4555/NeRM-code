```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # Add a domain knowledge based heuristic: penalize edges that go against a natural ordering (e.g., clockwise or counter-clockwise)
    natural_ordering_penalty = np.sum(distance_matrix, axis=0) / (2 * np.prod(distance_matrix.shape) - np.sum(distance_matrix)) * (np.arange(distance_matrix.shape[0]) - np.arange(distance_matrix.shape[0])[::-1])
    # Calculate a complexity reduction heuristic: encourage edges with fewer degrees (fewer connections)
    degree heuristic = np.sum(distance_matrix, axis=1)
    # Combine the metrics with appropriate weights
    weight_min_distance = 0.6
    weight_natural_ordering = 0.2
    weight_degree = 0.2
    # Adjust the penalty by adding a small constant to avoid division by zero
    return distance_matrix - (min_distances * weight_min_distance + natural_ordering_penalty * weight_natural_ordering + degree heuristic * weight_degree) + 1e-6
```
