```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # Calculate the maximum distance from each node to any other node
    max_distances = np.max(distance_matrix, axis=1)
    # It's bad to include edges that are significantly longer than the minimum distance
    # or significantly shorter than the maximum distance
    long_edge_penalty = distance_matrix - min_distances
    short_edge_penalty = max_distances - distance_matrix
    # We can combine the penalties, for instance, by penalizing more if the edge
    # is both long and short at the same time
    combined_penalty = np.maximum(long_edge_penalty, short_edge_penalty)
    # Apply a dampening factor to prevent the heuristic from being too aggressive
    dampening_factor = 0.5
    return dampening_factor * combined_penalty
```
