```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize edge lengths to the range [0, 1]
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_distance = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Use non-linear scaling to emphasize penalties for out-of-range edge lengths
    long_edge_penalty = np.log(1 + (1 - normalized_distance))
    short_edge_penalty = np.log(1 + (normalized_distance - 1))
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Incorporate node connectivity with a function that reduces penalties for highly connected nodes
    # Using the reciprocal of the degree to reduce penalty for higher connectivity
    degree_penalty = 1 / (1 + degrees / np.mean(degrees))
    
    # Combine penalties using a weighted average
    combined_penalty = 0.5 * long_edge_penalty + 0.5 * short_edge_penalty * degree_penalty
    return combined_penalty
```
