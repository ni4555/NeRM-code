```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the global min and max distances
    global_min_distance = np.min(distance_matrix)
    global_max_distance = np.max(distance_matrix)
    
    # Calculate the average distance in the matrix
    average_distance = np.mean(distance_matrix)
    
    # Define a range for short and long edges based on the average distance
    short_threshold = average_distance * 0.8
    long_threshold = average_distance * 1.2
    
    # Calculate the number of nodes
    num_nodes = distance_matrix.shape[0]
    
    # Initialize a penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Add a penalty for edges that are too short or too long relative to the average
    for i in range(num_nodes):
        for j in range(num_nodes):
            if distance_matrix[i, j] < short_threshold:
                penalty_matrix[i, j] = (short_threshold - distance_matrix[i, j]) / short_threshold
            elif distance_matrix[i, j] > long_threshold:
                penalty_matrix[i, j] = (distance_matrix[i, j] - long_threshold) / long_threshold
            else:
                # Add a small penalty for normal edges to encourage diversity
                penalty_matrix[i, j] = 1 / (num_nodes * num_nodes)
    
    # Add a penalty for high connectivity to the starting node to encourage visiting other nodes first
    # and a larger penalty for edges leading to or from the first node
    penalty_matrix[:, 0] += 0.5
    penalty_matrix[0, :] += 0.5
    penalty_matrix[:, num_nodes - 1] += 1
    penalty_matrix[num_nodes - 1, :] += 1
    
    return penalty_matrix
```
