```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    average_distance = np.mean(distance_matrix)
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    
    # Calculate deviations from average
    deviations = distance_matrix - average_distance
    
    # Calculate penalties
    long_edge_penalty = deviations * (deviations > 0)
    short_edge_penalty = deviations * (deviations < 0)
    
    # Normalize penalties using the maximum distance
    normalized_long_edge_penalty = long_edge_penalty / max_distance
    normalized_short_edge_penalty = short_edge_penalty / min_distance
    
    # Use a non-linear function to emphasize outliers
    outlier_threshold = 3  # Example threshold
    long_edge_penalty = np.clip(normalized_long_edge_penalty, 0, 1)
    short_edge_penalty = np.clip(normalized_short_edge_penalty, 0, 1)
    long_edge_penalty = np.log1p(long_edge_penalty)
    short_edge_penalty = np.log1p(short_edge_penalty)
    
    # Combine penalties, with a weight factor for long edges
    weight_factor = 0.5  # Example weight factor
    combined_penalty = weight_factor * long_edge_penalty + (1 - weight_factor) * short_edge_penalty
    
    return combined_penalty
```
