```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the maximum, average, and minimum distances in the matrix
    max_distance = np.max(distance_matrix)
    avg_distance = np.mean(distance_matrix)
    min_distance = np.min(distance_matrix)
    
    # Calculate deviations from the mean and normalize
    deviations = distance_matrix - avg_distance
    normalized_deviations = deviations / avg_distance
    
    # Define a range for "close to mean" edges and for "close to min/max"
    close_to_mean_threshold = avg_distance * 0.1
    close_to_extremes_threshold = max_distance * 0.1
    
    # Define conditional penalties based on edge characteristics
    close_to_mean_penalty = np.where(np.abs(normalized_deviations) < 1,
                                      np.exp(1 - np.abs(normalized_deviations)), 0)
    close_to_extremes_penalty = np.where((normalized_deviations > 1) | (normalized_deviations < -1),
                                         np.exp(normalized_deviations), 0)
    
    # Combine the penalties
    combined_penalty = close_to_mean_penalty + close_to_extremes_penalty
    return combined_penalty
```
