```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic considering both long and short edges
    # Use a balance between the difference from max and min distance
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    average_distance = (max_distance + min_distance) / 2
    long_edge_penalty = np.abs(distance_matrix - max_distance)
    short_edge_penalty = np.abs(distance_matrix - min_distance)
    balanced_penalty = (long_edge_penalty + short_edge_penalty) / 2
    # Introduce a smoothness factor to prevent dead-ends
    smoothness_factor = 0.1
    return balanced_penalty + smoothness_factor * np.maximum(long_edge_penalty, short_edge_penalty)
```
