```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance between each pair of nodes
    avg_distance = np.mean(distance_matrix)
    
    # Define a range for the average distance that we consider "normal"
    # We assume that distances close to the average are "normal" and should not be penalized
    # We define two thresholds for the range: lower and upper
    lower_threshold = avg_distance * 0.8
    upper_threshold = avg_distance * 1.2
    
    # Calculate penalties for edges that are significantly longer or shorter than the average distance
    long_edge_penalty = np.maximum(0, distance_matrix - upper_threshold)
    short_edge_penalty = np.maximum(0, lower_threshold - distance_matrix)
    
    # Weigh the penalties. Short edges are penalized more heavily since they might lead to a shorter tour
    combined_penalty = 0.7 * long_edge_penalty + 0.3 * short_edge_penalty
    return combined_penalty
```
