```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the maximum and minimum distances in the matrix
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    
    # Define a range of edge lengths that we consider "extreme" or "non-standard"
    # These thresholds are chosen based on a heuristic understanding of the problem domain
    extreme_threshold = max_distance * 0.9
    short_threshold = min_distance * 1.1
    
    # Calculate penalties for edges that are too long or too short
    long_edge_penalty = np.maximum(0, distance_matrix - extreme_threshold)
    short_edge_penalty = np.maximum(0, distance_matrix - short_threshold)
    
    # Define a penalty for edges that are too close to the diagonal (dead-end avoidance)
    diagonal_distance = np.diag(distance_matrix)
    dead_end_penalty = np.where(distance_matrix < diagonal_distance + 1,
                                distance_matrix - diagonal_distance,
                                0)
    
    # Combine the penalties using a weighted average with dead-end avoidance
    # The weights can be adjusted based on the problem's characteristics
    combined_penalty = 0.6 * long_edge_penalty + 0.4 * short_edge_penalty
    combined_penalty += dead_end_penalty
    return combined_penalty
```
