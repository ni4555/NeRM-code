```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # Calculate the average distance to balance out the influence of longer edges
    average_distance = np.mean(distance_matrix, axis=1)
    # Use domain knowledge to consider the number of direct neighbors
    num_neighbors = np.count_nonzero(distance_matrix, axis=1)
    # Weigh these metrics appropriately
    weight_min_dist = 0.6
    weight_avg_dist = 0.3
    weight_neighbors = 0.1
    # Create a heuristic value by combining these metrics
    heuristic = (weight_min_dist * (distance_matrix - min_distances + 1e-6) +
                 weight_avg_dist * (distance_matrix - average_distance + 1e-6) +
                 weight_neighbors * (num_neighbors - np.ones(distance_matrix.shape[0]) * 2))
    return heuristic
```
