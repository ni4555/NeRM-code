```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance
    avg_distance = np.mean(distance_matrix)
    
    # Calculate the maximum distance
    max_distance = np.max(distance_matrix)
    
    # Define relative metrics to the average distance
    long_edge_penalty = (distance_matrix > avg_distance) * (distance_matrix - avg_distance)
    short_edge_penalty = (distance_matrix < avg_distance) * (distance_matrix - avg_distance)
    
    # Introduce a global connectivity factor: nodes that are too disconnected should be penalized
    # We use the standard deviation to capture this aspect
    connectivity_factor = np.std(distance_matrix, axis=0)
    disconnected_penalty = (connectivity_factor > 1.5 * avg_distance) * connectivity_factor
    
    # Combine the penalties using conditional logic
    combined_penalty = np.zeros_like(distance_matrix)
    combined_penalty[long_edge_penalty > 0] = long_edge_penalty[long_edge_penalty > 0]
    combined_penalty[short_edge_penalty > 0] = short_edge_penalty[short_edge_penalty > 0]
    combined_penalty[disconnected_penalty > 0] = disconnected_penalty[disconnected_penalty > 0]
    
    return combined_penalty
```
