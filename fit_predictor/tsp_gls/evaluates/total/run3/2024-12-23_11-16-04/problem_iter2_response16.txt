```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance of the longest shortest path cycle
    longest_cycle = np.sort(distance_matrix.sum(axis=0))[-2]
    
    # It's bad to include edges that are part of the longest shortest path cycle
    # Also, consider the average distance to add a penalty for being far from the average
    avg_distance = np.mean(distance_matrix)
    
    # Define a penalty factor for long edges and for being far from the average
    penalty_factor = 2
    
    # Create a matrix to store the heuristics values
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Assign penalties to edges that are part of the longest shortest path cycle
    heuristics_matrix[distance_matrix == longest_cycle] = -np.inf
    
    # Assign penalties to edges that are far from the average distance
    heuristics_matrix[np.abs(distance_matrix - avg_distance) > penalty_factor] += (np.abs(distance_matrix - avg_distance) - penalty_factor) ** 2
    
    return heuristics_matrix
```
