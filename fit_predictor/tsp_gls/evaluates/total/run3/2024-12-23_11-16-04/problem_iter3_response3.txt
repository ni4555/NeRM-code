```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average and standard deviation of the distances
    avg_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Create a penalty matrix based on how far each edge is from the average
    deviation_penalty = np.abs(distance_matrix - avg_distance) / (std_distance + 1e-8)
    
    # Adjust penalties for edges that are too far from the average in either direction
    # The adjustment factor is a relative weight to balance between over and under-traveled edges
    adjustment_factor = 1.5
    adjusted_penalty = np.where(deviation_penalty > adjustment_factor, deviation_penalty, 0)
    
    # Add a penalty for high connectivity (edges that are connected to many others)
    # This is based on the assumption that a more central edge is more likely to be part of a bad solution
    connectivity_penalty = np.sum(distance_matrix, axis=0) / np.sum(distance_matrix)
    connectivity_penalty = connectivity_penalty - np.mean(connectivity_penalty)
    
    # Combine penalties with a weighted average
    combined_penalty = 0.4 * adjusted_penalty + 0.6 * connectivity_penalty
    return combined_penalty
```
