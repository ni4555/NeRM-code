```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Balance edge length with connectivity
    # Consider long edges as bad and short edges as bad for creating dead-ends
    # Also, consider the degree of connectivity of the nodes to reduce penalties for edges connected to highly connected nodes
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    long_edge_penalty = max_distance - distance_matrix
    short_edge_penalty = distance_matrix - min_distance
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    degree_penalty = np.exp(-degrees / np.mean(degrees))  # Using exponential decay to reduce penalty for highly connected nodes
    
    # Combine penalties
    heuristics = np.maximum(long_edge_penalty, short_edge_penalty) * degree_penalty
    return heuristics
```
