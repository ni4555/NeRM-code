```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance
    average_distance = np.mean(distance_matrix)
    
    # Calculate the variance and standard deviation of distances
    variance = np.var(distance_matrix)
    standard_deviation = np.std(distance_matrix)
    
    # Define thresholds based on average, variance, and standard deviation
    variance_threshold = variance * 0.8
    std_dev_threshold = standard_deviation * 1.2
    
    # Create a penalty matrix based on these thresholds
    penalty_matrix = np.zeros_like(distance_matrix)
    penalty_matrix[distance_matrix > average_distance + variance_threshold] = 1
    penalty_matrix[distance_matrix < average_distance - variance_threshold] = 1
    penalty_matrix[distance_matrix > average_distance + std_dev_threshold] = 1
    penalty_matrix[distance_matrix < average_distance - std_dev_threshold] = 1
    
    # Add a connectivity-based penalty for isolated nodes (i.e., nodes without edges)
    connectivity_penalty = np.ones_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        connected = np.sum(distance_matrix[i]) > 0
        connectivity_penalty[connected] = 1
        connectivity_penalty[~connected] = 0.5
    
    # Combine the penalties using a weighted average
    combined_penalty = 0.4 * penalty_matrix + 0.6 * connectivity_penalty
    return combined_penalty
```
