```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic that considers edge length variance, balance between extremes, and relative weight of penalties
    
    # Calculate the average and standard deviation of the distances
    avg_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Calculate penalties for edges that are too long or too short
    long_edge_penalty = np.maximum(distance_matrix - avg_distance, 0)
    short_edge_penalty = np.maximum(avg_distance - distance_matrix, 0)
    
    # Normalize penalties to standard deviation
    long_edge_penalty /= (std_distance + 1e-8)
    short_edge_penalty /= (std_distance + 1e-8)
    
    # Define a balance factor to weigh long and short penalties equally
    balance_factor = 0.5
    
    # Combine penalties based on the balance factor
    combined_penalty = (balance_factor * long_edge_penalty) + ((1 - balance_factor) * short_edge_penalty)
    
    return combined_penalty
```
