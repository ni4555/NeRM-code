```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum and maximum distances for each node
    min_distances = np.min(distance_matrix, axis=1)
    max_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the minimum distance from each node to any other node
    min_to_all = np.min(distance_matrix, axis=0)
    
    # Define penalties for edges that are longer than the average distance to any node
    long_edge_penalty = distance_matrix - min_to_all
    
    # Define penalties for edges that are shorter than the average distance to any node
    short_edge_penalty = max_distances - distance_matrix
    
    # Combine the penalties by taking the maximum of the two
    combined_penalty = np.maximum(long_edge_penalty, short_edge_penalty)
    
    # Apply a dampening factor to avoid overly aggressive penalties
    dampening_factor = 0.5
    return dampening_factor * combined_penalty
```
