```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance
    average_distance = np.mean(distance_matrix)
    
    # Calculate the variance and standard deviation of distances
    variance = np.var(distance_matrix)
    standard_deviation = np.std(distance_matrix)
    
    # Define thresholds based on average, variance, and standard deviation
    low_threshold = average_distance - 1.5 * standard_deviation
    high_threshold = average_distance + 1.5 * standard_deviation
    
    # Create a penalty matrix based on these thresholds
    penalty_matrix = np.zeros_like(distance_matrix)
    penalty_matrix[(distance_matrix < low_threshold) | (distance_matrix > high_threshold)] = 1
    
    # Add a penalty for edges that are close to the average distance
    penalty_matrix[distance_matrix < average_distance - 0.5 * standard_deviation] = 0.5
    
    # Add a penalty for edges that are close to the average distance
    penalty_matrix[distance_matrix > average_distance + 0.5 * standard_deviation] = 0.5
    
    # Incorporate the degree of connectivity for each node
    node_connectivity = np.sum(distance_matrix, axis=1)
    min_edges = distance_matrix.shape[0] - 1
    connectivity_penalty = np.where(node_connectivity < min_edges, 1, 0)
    
    # Combine the penalties using a weighted average
    combined_penalty = 0.6 * penalty_matrix + 0.4 * connectivity_penalty
    return combined_penalty
```
