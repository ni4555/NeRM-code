```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate penalties for long and short edges
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    long_edge_penalty = max_distance - distance_matrix
    short_edge_penalty = distance_matrix - min_distance
    
    # Apply a logarithmic function to penalize long edges more than short edges
    long_edge_penalty = np.log(long_edge_penalty + 1)  # Adding 1 to avoid log(0)
    short_edge_penalty = np.log(short_edge_penalty + 1)  # Adding 1 to avoid log(0)
    
    # Define a range for acceptable edge lengths, avoiding dead-ends
    range_penalty = np.where((min_distance < distance_matrix) & (distance_matrix < max_distance),
                             distance_matrix, 0)
    
    # Calculate a penalty for each edge based on the relative connectivity
    # High connectivity penalty encourages edges to be short, while low connectivity encourages them to be long
    connectivity_penalty = np.sum(distance_matrix, axis=1) - np.mean(distance_matrix, axis=1) - np.max(distance_matrix, axis=1)
    
    # Combine the penalties with careful weighting to balance local and global objectives
    # Weighting: Long edges are penalized more than short ones, but connectivity is still considered
    combined_penalty = 0.6 * long_edge_penalty + 0.3 * short_edge_penalty + 0.1 * connectivity_penalty
    return combined_penalty
```
