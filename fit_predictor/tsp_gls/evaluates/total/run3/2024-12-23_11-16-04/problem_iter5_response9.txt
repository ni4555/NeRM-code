```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # It's bad to include edges that are significantly longer than the minimum distance
    # Adding a small constant to avoid division by zero
    
    # Introduce diversity by considering the minimum distance to a randomly selected node
    random_min_distances = np.min(distance_matrix[np.random.randint(distance_matrix.shape[0], size=distance_matrix.shape[0]), :], axis=1)
    
    # Use domain knowledge to adjust the penalty for direct edges
    direct_edge_penalty = 1.5
    
    # Apply a complexity reduction heuristic by balancing the edge weight differences
    return (distance_matrix - min_distances + 1e-6) * direct_edge_penalty + \
           (np.abs(distance_matrix - min_distances) > direct_edge_penalty) * (random_min_distances - min_distances)
```
