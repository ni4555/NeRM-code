```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic: Consider edge penalties, balance between extremes,
    # avoid negative penalties, and fine-tune factors.
    penalty_factor_long = 10
    penalty_factor_short = 1

    # Normalize the distances by the maximum distance in the matrix
    normalized_distances = distance_matrix / np.max(distance_matrix)

    # Calculate penalties for long and short edges based on the normalized distances
    long_edge_penalty = penalty_factor_long * (1 - normalized_distances)
    short_edge_penalty = penalty_factor_short * (normalized_distances - 0.5)

    # Avoid negative penalties for short edges by ensuring they are not less than zero
    short_edge_penalty[short_edge_penalty < 0] = 0

    # Combine the penalties, using the sum of both to encourage shorter and not overly long edges
    return long_edge_penalty + short_edge_penalty
```
