```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest and second-nearest neighbors for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                second_min_dist_i = np.partition(distance_matrix[i, :], 1)[1]
                min_dist_j = np.min(distance_matrix[j, :])
                second_min_dist_j = np.partition(distance_matrix[j, :], 1)[1]
                
                # Avoid the edge if it's longer than the second-nearest neighbor distance
                if distance_matrix[i, j] > second_min_dist_i or distance_matrix[j, i] > second_min_dist_j:
                    heuristics[i, j] = np.inf
                else:
                    # Use a balance factor to determine the weight of the edge
                    balance_factor = 0.5 * (min_dist_i + min_dist_j)
                    
                    # Calculate the heuristics based on the balance factor
                    heuristics[i, j] = distance_matrix[i, j] - balance_factor

    # Replace infinite values with a large number to maintain consistency
    np.fill_diagonal(heuristics, np.inf)
    
    # Normalize the heuristics matrix to ensure values are between 0 and 1
    max_value = np.max(np.where(np.isfinite(heuristics), heuristics, 0))
    if max_value > 0:
        heuristics /= max_value
    
    return heuristics
```
