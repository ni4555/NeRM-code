```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the average distance between each node
    node_distances = np.mean(distance_matrix, axis=1)

    # Calculate the deviation of each edge from the average distance
    deviation = distance_matrix - node_distances[:, np.newaxis]

    # Increase the heuristic value for edges that are significantly longer than the average distance
    heuristic_matrix[deviation > 1.5 * node_distances[:, np.newaxis]] = deviation[deviation > 1.5 * node_distances[:, np.newaxis]]

    # Consider the connectivity of each node
    connectivity_matrix = np.sum(distance_matrix != np.inf, axis=1)  # Count non-zero distances (i.e., connected edges)
    min_neighbors = 2  # Minimum number of neighbors to avoid isolating nodes
    isolated_nodes = connectivity_matrix < min_neighbors

    # For isolated nodes, decrease the heuristic value of their edges
    if np.any(isolated_nodes):
        non_isolated_edges = ~np.isinf(distance_matrix)
        isolated_edges = np.logical_and(non_isolated_edges, isolated_nodes[:, np.newaxis] & isolated_nodes)
        heuristic_matrix[isolated_edges] *= 0.8

    return heuristic_matrix
```
