```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic that considers the distance to the nearest neighbor of each vertex
    # and the difference from the second nearest neighbor as a measure of its badness.
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        # Find the two nearest neighbors to node i
        nearest_neighbors = np.argsort(distance_matrix[i, :])[:2]
        # Exclude the edge to the node itself from the distance calculation
        edge_to_self = distance_matrix[i, nearest_neighbors[0]]
        nearest_neighbor_distances = distance_matrix[i, nearest_neighbors] - edge_to_self
        
        # Find the second nearest distance (ignoring the self-loop)
        second_nearest_distance = np.min(nearest_neighbor_distances[1:])
        
        # The heuristic is a function of the difference between the nearest and the second nearest distance
        heuristics[i, nearest_neighbors] = nearest_neighbor_distances - second_nearest_distance

    # Exclude the diagonal (self-loops) and any non-existent edges
    np.fill_diagonal(heuristics, np.inf)
    heuristics[heuristics < 0] = 0

    return heuristics
```
