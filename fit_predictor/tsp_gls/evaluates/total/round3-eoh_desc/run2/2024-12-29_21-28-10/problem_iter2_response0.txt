```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the shortest path for each node to all other nodes
    shortest_paths = np.zeros((n, n))
    for i in range(n):
        shortest_paths[i] = np.sort(distance_matrix[i])[1:]  # Exclude the node itself
    
    # For each edge, calculate the heuristic based on the following criteria:
    # 1. If the edge is part of the shortest path for either of the nodes, give it a lower heuristic
    # 2. If the edge is longer than the average shortest path, give it a higher heuristic
    for i in range(n):
        for j in range(n):
            if i != j:
                # Check if the edge is part of the shortest path for either node
                edge_in_path_i = (distance_matrix[i][j] in shortest_paths[i]) or (distance_matrix[i][j] in shortest_paths[j])
                # Calculate the average shortest path length
                avg_shortest_path_length = np.mean(shortest_paths)
                
                # Set the heuristic based on the criteria
                if edge_in_path_i:
                    heuristic_matrix[i][j] = -np.inf
                else:
                    heuristic_matrix[i][j] = distance_matrix[i][j] - avg_shortest_path_length
    
    return heuristic_matrix
```
