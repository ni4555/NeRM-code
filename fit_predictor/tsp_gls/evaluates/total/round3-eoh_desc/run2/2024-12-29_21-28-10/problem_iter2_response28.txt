```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # It's bad to include long edges in the solution, but we want to avoid overly simplistic assumptions
    # by also considering the average distance of each edge to the rest of the network.
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros(distance_matrix.shape)
    
    for i in range(n):
        for j in range(n):
            if i != j:
                # Compute the average distance of edge (i, j) to the rest of the network
                average_distance = np.mean(distance_matrix[i]) + np.mean(distance_matrix[j])
                # The heuristic value is the negative average distance
                # since we want to minimize the heuristic value
                heuristic_matrix[i][j] = -average_distance
    
    return heuristic_matrix
```
