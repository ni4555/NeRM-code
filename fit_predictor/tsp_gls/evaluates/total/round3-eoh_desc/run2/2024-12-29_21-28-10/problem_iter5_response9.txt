```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Local edge property: subtract the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                local_property = distance_matrix[i, j] - (min_dist_i + min_dist_j)
                
                # Global connectivity: count the number of shortest paths to the nearest neighbor for both nodes
                count_i = np.sum(distance_matrix[i, :] == min_dist_i)
                count_j = np.sum(distance_matrix[j, :] == min_dist_j)
                global_connectivity = (count_i + count_j) / num_nodes
                
                # Adaptive weighting: combine the local property and global connectivity
                weight = 0.5  # This weight can be adjusted based on the problem domain
                heuristics[i, j] = weight * (local_property + global_connectivity)

    return heuristics
```
