```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic that focuses on relative distances and connectivity
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = distance_matrix.copy()

    # Calculate the relative distance to the nearest neighbor for each node
    relative_distances = np.inf * np.ones((num_nodes, num_nodes))
    for i in range(num_nodes):
        # Find the nearest neighbor and its distance
        nearest_neighbor = np.argmin(distance_matrix[i, :])
        nearest_neighbor_distance = distance_matrix[i, nearest_neighbor]
        relative_distances[i, nearest_neighbor] = nearest_neighbor_distance
        relative_distances[nearest_neighbor, i] = nearest_neighbor_distance

    # Minimize the edge length variance by prioritizing edges with smaller relative distances
    for i in range(num_nodes):
        for j in range(num_nodes):
            if distance_matrix[i, j] > relative_distances[i, j] * 1.1:
                heuristic_matrix[i, j] *= 1.1

    # Prioritize connectivity by reducing the heuristic value of edges that connect to only one node
    for i in range(num_nodes):
        num_neighbors = np.sum(heuristic_matrix[i, :] != np.inf)
        if num_neighbors < 2:
            for j in range(num_nodes):
                if heuristic_matrix[i, j] != np.inf:
                    heuristic_matrix[i, j] *= 0.9

    return heuristic_matrix
```
