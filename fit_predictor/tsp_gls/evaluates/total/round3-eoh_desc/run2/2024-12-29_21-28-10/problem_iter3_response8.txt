```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Subtract the minimum distance from the current edge's distance
                # Add a penalty if the edge is already part of the local optimal route
                heuristics[i, j] = distance_matrix[i, j] - (min_dist_i + min_dist_j)
                if distance_matrix[i, j] == min_dist_i + min_dist_j:
                    heuristics[i, j] -= 1  # Increase penalty if edge is already local minimum

    return heuristics
```
