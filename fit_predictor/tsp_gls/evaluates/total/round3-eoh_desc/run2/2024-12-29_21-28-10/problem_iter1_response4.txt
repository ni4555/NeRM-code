```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # It's bad to include long edges, but good to include edges that are part of the shortest path
    # between two disconnected components
    n = distance_matrix.shape[0]
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # For each pair of nodes, calculate the shortest path if they were disconnected
    for i in range(n):
        for j in range(n):
            if i != j:
                # Compute the minimum distance from i to any other node and from j to any other node
                min_i = np.min(distance_matrix[i])
                min_j = np.min(distance_matrix[j])
                
                # The heuristic value is the sum of the two minimum distances
                heuristic_matrix[i][j] = min_i + min_j
    
    # Adjust the heuristic to be negative since we want to minimize the heuristic value
    return -heuristic_matrix
```
