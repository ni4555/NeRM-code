```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the distance to the nearest neighbor for each node
    for i in range(num_nodes):
        min_distance = np.min(distance_matrix[i, :])
        for j in range(num_nodes):
            if i != j:
                # Increase the heuristic value for edges that are significantly longer than the nearest neighbor distance
                if distance_matrix[i, j] > min_distance * 1.5:
                    heuristic_matrix[i, j] = distance_matrix[i, j] - min_distance * 1.5
                # Invert heuristic for shorter edges to avoid overexploitation
                elif distance_matrix[i, j] < min_distance / 2:
                    heuristic_matrix[i, j] = min_distance / 2 - distance_matrix[i, j]
                # Normalize edges that are close to the nearest neighbor distance
                else:
                    heuristic_matrix[i, j] = 1 - (distance_matrix[i, j] - min_distance) / (min_distance * 1.5)

    # Adjust the heuristic to account for connectivity
    # If a node has only one connection, its edges should be considered less desirable
    single_connected_nodes = np.sum(distance_matrix, axis=1) == 1
    for i in range(num_nodes):
        if single_connected_nodes[i]:
            heuristic_matrix[i, :] = np.inf

    return heuristic_matrix
```
