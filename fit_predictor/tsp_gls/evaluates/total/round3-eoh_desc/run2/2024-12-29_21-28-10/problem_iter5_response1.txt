```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    # Define neighborhood sizes
    neighborhood_sizes = [1, 2, 3]  # Example: 1, 2, and 3 neighbors
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Initialize heuristic value with the basic distance heuristic
                heuristics[i, j] = distance_matrix[i, j] - (np.min(distance_matrix[i, :]) + np.min(distance_matrix[j, :]))
                
                # Add a global connectivity component based on the average of the minimum distance to a neighborhood of nodes
                for size in neighborhood_sizes:
                    min_dist_neighborhood_i = np.min(distance_matrix[i, :min(num_nodes, i-size):min(num_nodes, i+size+1)])
                    min_dist_neighborhood_j = np.min(distance_matrix[j, :min(num_nodes, j-size):min(num_nodes, j+size+1)])
                    heuristics[i, j] += (min_dist_neighborhood_i + min_dist_neighborhood_j - (min_dist_i + min_dist_j)) * 0.1 / size
                
                # Add an adaptive weighting based on the current node degree
                degree_i = np.sum(distance_matrix[i, :] != 0)
                degree_j = np.sum(distance_matrix[j, :] != 0)
                weight_i = degree_i / num_nodes
                weight_j = degree_j / num_nodes
                heuristics[i, j] *= (weight_i * weight_j)
    
    return heuristics
```
