```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the average distance between each node and all other nodes
    node_distances = np.mean(distance_matrix, axis=1)

    # Calculate the average edge length
    avg_edge_length = np.mean(np.sum(distance_matrix, axis=0))

    # Calculate the standard deviation of the distances
    std_dev = np.std(distance_matrix, axis=1)

    # Calculate the connectivity factor for each node
    connectivity_factor = np.sum(distance_matrix != np.inf, axis=1) / (num_nodes - 1)

    # For each edge, the heuristic value is determined by:
    # 1. The relative difference from the average edge length
    # 2. The relative difference from the node's average distance
    # 3. The inverse of the connectivity factor to avoid isolated nodes
    # The heuristic is adjusted so that edges longer than the average and with lower connectivity are penalized more
    for i in range(num_nodes):
        for j in range(num_nodes):
            if distance_matrix[i, j] > 0:  # Avoid division by zero
                edge_heuristic = (
                    (distance_matrix[i, j] - avg_edge_length) / avg_edge_length +
                    (abs(distance_matrix[i, j] - node_distances[i]) / node_distances[i]) +
                    (1 / connectivity_factor[i] * connectivity_factor[j])
                )
                heuristic_matrix[i, j] = edge_heuristic

    return heuristic_matrix
```
