```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the average distance between the two nodes
                avg_dist = np.mean(distance_matrix[i, j])
                
                # Calculate the minimum distance between the two nodes
                min_dist = np.min(distance_matrix[i, j])
                
                # Calculate the maximum distance between the two nodes
                max_dist = np.max(distance_matrix[i, j])
                
                # Use a combination of average, minimum, and maximum distances to compute the heuristic
                heuristics[i, j] = distance_matrix[i, j] - avg_dist
                heuristics[i, j] += (distance_matrix[i, j] - min_dist) * 0.5
                heuristics[i, j] += (max_dist - distance_matrix[i, j]) * 0.5
                
                # Consider the connectivity of the nodes
                num_neighbors_i = np.sum(distance_matrix[i, :]) != 0
                num_neighbors_j = np.sum(distance_matrix[j, :]) != 0
                connectivity_factor = (num_neighbors_i + num_neighbors_j) / (2 * num_nodes)
                heuristics[i, j] *= (1 - connectivity_factor)
                
                # Penalize edges that are significantly longer than the average distance
                if distance_matrix[i, j] > avg_dist * 1.5:
                    heuristics[i, j] *= 1.2
                    
    return heuristics
```
