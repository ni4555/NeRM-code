```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Adjust the heuristic value based on the distance matrix's structure
                # This approach avoids rigid thresholds and balances local vs global perspective
                heuristics[i, j] = distance_matrix[i, j] - (min_dist_i + min_dist_j)
                heuristics[i, j] = max(0, heuristics[i, j] - (0.5 * (distance_matrix[:, i] + distance_matrix[:, j]).min()))
                heuristics[i, j] = min(heuristics[i, j], distance_matrix[i, j] * 0.5)  # Avoiding too high values for short edges

    return heuristics
```
