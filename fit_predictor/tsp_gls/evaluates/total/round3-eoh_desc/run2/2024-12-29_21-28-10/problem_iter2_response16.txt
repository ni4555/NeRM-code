```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the average distance for each node
    avg_distances = np.mean(distance_matrix, axis=1)

    # Calculate the standard deviation of distances for each node
    std_distances = np.std(distance_matrix, axis=1)

    # Incorporate a cost metric that considers both the average and the standard deviation
    # The cost is higher for edges that are significantly longer than the average and/or have high variability
    for i in range(num_nodes):
        for j in range(num_nodes):
            edge_cost = distance_matrix[i, j] - avg_distances[i]
            # Weight the difference relative to the standard deviation
            weighted_diff = edge_cost / (std_distances[i] + 1e-8)  # Add a small value to avoid division by zero
            heuristic_matrix[i, j] = weighted_diff

    # To avoid node isolation, we lower the heuristic value for edges connecting to nodes with few neighbors
    for i in range(num_nodes):
        num_neighbors = np.sum(distance_matrix[i, :]) != 0
        if num_neighbors < 3:  # A node should have at least 3 neighbors
            # Increase the heuristic value for the edges of the node with few neighbors
            heuristic_matrix[i, :] *= (num_neighbors / 3)

    return heuristic_matrix
```
