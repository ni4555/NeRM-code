```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Heuristic based on the idea of including edges that have a high variance in
    # the distances from the two nodes they connect to the other nodes in the graph.
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                distances_from_i = np.sort(distance_matrix[i, :])
                distances_from_j = np.sort(distance_matrix[:, j])
                # Calculate the variance of distances for each node
                variance_i = np.var(distances_from_i)
                variance_j = np.var(distances_from_j)
                # Calculate the heuristic value based on the variance
                heuristics[i, j] = (variance_i + variance_j)

    return heuristics
```
