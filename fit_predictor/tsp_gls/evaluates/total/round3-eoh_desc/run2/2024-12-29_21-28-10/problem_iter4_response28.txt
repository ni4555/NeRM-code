```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Calculate local minima for each node
    local_minima = np.min(distance_matrix, axis=1)

    # Calculate global minima for the entire matrix
    global_minima = np.min(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the pairwise nearest neighbor distances
                nearest_i = np.argmin(distance_matrix[i, :])
                nearest_j = np.argmin(distance_matrix[j, :])

                # Calculate the heuristic based on local and global minima
                local_heuristic = max(distance_matrix[i, j] - local_minima[i], 0)
                global_heuristic = max(distance_matrix[i, j] - global_minima, 0)
                nearest_neighbor_heuristic = max(distance_matrix[i, j] - distance_matrix[i, nearest_j], 0)
                nearest_neighbor_heuristic += max(distance_matrix[i, j] - distance_matrix[nearest_i, j], 0)

                # Combine heuristics with a weighted sum
                heuristics[i, j] = 0.5 * local_heuristic + 0.3 * global_heuristic + 0.2 * nearest_neighbor_heuristic

    return heuristics
```
