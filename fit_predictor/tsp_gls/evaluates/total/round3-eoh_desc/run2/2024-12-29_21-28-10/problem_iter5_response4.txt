```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Calculate the average distance to the nearest neighbors for both nodes
                avg_nearest_neighbors_dist_i = np.mean(distance_matrix[i, distance_matrix[i, :] != np.inf])
                avg_nearest_neighbors_dist_j = np.mean(distance_matrix[j, distance_matrix[j, :] != np.inf])
                
                # Use the average distance to the nearest neighbors for adaptive weighting
                weight_i = avg_nearest_neighbors_dist_i / (avg_nearest_neighbors_dist_i + avg_nearest_neighbors_dist_j)
                weight_j = avg_nearest_neighbors_dist_j / (avg_nearest_neighbors_dist_i + avg_nearest_neighbors_dist_j)
                
                # Apply the weighted difference between the edge distance and the sum of nearest neighbor distances
                heuristics[i, j] = weight_i * (distance_matrix[i, j] - (min_dist_i + min_dist_j)) + \
                                   weight_j * (distance_matrix[i, j] - (min_dist_j + min_dist_i))

    return heuristics
```
