```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Use a global connectivity metric such as the sum of distances to all other nodes
                sum_dist_i = np.sum(distance_matrix[i, :])
                sum_dist_j = np.sum(distance_matrix[j, :])
                
                # Combine local and global metrics using weights
                local_component = distance_matrix[i, j] - (min_dist_i + min_dist_j)
                global_component = (sum_dist_i + sum_dist_j) / (num_nodes - 1)
                
                # Adaptive weighting based on neighborhood size
                neighborhood_size = np.random.randint(1, num_nodes + 1)
                neighbors_i = np.argsort(distance_matrix[i, :])[:neighborhood_size]
                neighbors_j = np.argsort(distance_matrix[j, :])[:neighborhood_size]
                
                # Calculate the average distance to neighbors to adapt weights
                avg_dist_i = np.mean(distance_matrix[i, neighbors_i])
                avg_dist_j = np.mean(distance_matrix[j, neighbors_j])
                
                # Update the heuristic value
                weight_i = 1 / (1 + avg_dist_i)
                weight_j = 1 / (1 + avg_dist_j)
                heuristics[i, j] = weight_i * local_component + weight_j * global_component

    return heuristics
```
