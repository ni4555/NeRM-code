```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic will try to favor edges that connect to high-degree nodes
    # The assumption is that high-degree nodes are more central to the network
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    degrees = np.maximum(degrees, 1)  # Avoid division by zero
    
    # Normalize the degrees so that they sum to 1
    degree_probabilities = degrees / np.sum(degrees)
    
    # Calculate the inverse of the probabilities as a heuristic
    heuristic = 1 / degree_probabilities
    
    # Reshape the heuristic to match the shape of the distance matrix
    return heuristic.reshape(distance_matrix.shape)
```
