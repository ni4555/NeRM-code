```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Normalize the distance matrix to ensure all values are between 0 and 1
    normalized_matrix = distance_matrix / np.max(distance_matrix)
    
    # Calculate the minimum distance for each vertex to any other vertex
    min_distance = np.min(normalized_matrix, axis=1)
    
    # Calculate the second minimum distance for each vertex to any other vertex
    second_min_distance = np.partition(normalized_matrix, 1, axis=1)[:, 1]
    
    # Calculate the bonus for edges close to the minimum distance
    bonus = np.where(normalized_matrix == min_distance,
                     1,
                     np.where(normalized_matrix == second_min_distance,
                              0.5,
                              0))
    
    # Calculate the penalty for longer edges
    penalty = (normalized_matrix / min_distance) * 2
    
    # Combine the penalty and bonus
    heuristics_matrix = penalty + bonus
    
    # Introduce an exploration factor by increasing the penalty for edges far from min_distance
    exploration_factor = np.where(normalized_matrix < 0.5,
                                  1 - normalized_matrix,
                                  0)
    heuristics_matrix *= exploration_factor
    
    # Integrate contextual information by giving a discount to edges that are close to the minimum distance
    discount = np.where(normalized_matrix < 0.5,
                         1.5,
                         1)
    heuristics_matrix *= discount
    
    # Normalize the heuristics matrix to ensure a balance between exploration and exploitation
    heuristics_matrix = (heuristics_matrix - np.min(heuristics_matrix)) / (np.max(heuristics_matrix) - np.min(heuristics_matrix))
    
    return heuristics_matrix
```
