```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Introduce a penalty for edges that are part of the local optimal route
    local_optimal_route = np.random.choice(distance_matrix.shape[0], size=np.sum(distance_matrix.shape[0])//2, replace=False)
    edge_penalties = np.zeros_like(distance_matrix)
    
    # Increase penalty for edges that are in the local optimal route
    edge_penalties[local_optimal_route, np.isin(local_optimal_route, np.arange(distance_matrix.shape[0]))] = 10
    
    # Add a penalty for edges that have the highest distance
    edge_penalties += np.sort(distance_matrix, axis=0)[:, np.arange(distance_matrix.shape[1])[::-1]]
    
    return edge_penalties
```
