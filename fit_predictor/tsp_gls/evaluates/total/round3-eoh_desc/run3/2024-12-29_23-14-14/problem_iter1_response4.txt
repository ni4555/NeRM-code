```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # It's bad to include long edges, but we can also consider the neighborhood
    # Here we create a penalty for long edges and give a bonus to edges that
    # connect vertices that are part of the local optimal route
    num_vertices = distance_matrix.shape[0]
    penalty = 100  # High penalty for long edges
    bonus = 10     # Bonus for good local route edges

    # Initialize the heuristics matrix
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Apply penalty for long edges
    heuristics_matrix[distance_matrix > 100] = penalty

    # Calculate bonus based on local optimal route (simulated by random selection here)
    # Assuming that a few vertices are part of the local optimal route
    local_optimal_vertices = np.random.choice(num_vertices, size=5, replace=False)
    for i in range(num_vertices):
        for j in range(num_vertices):
            if i in local_optimal_vertices and j in local_optimal_vertices:
                heuristics_matrix[i][j] += bonus

    return heuristics_matrix
```
