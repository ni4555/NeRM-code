```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    max_distance = np.max(distance_matrix)
    average_distance = np.mean(distance_matrix)
    penalty_threshold = 0.5 * max_distance
    penalty = 100  # High penalty for long edges
    bonus = 10     # Bonus for good local route edges
    neighborhood_size = 3  # Size of the neighborhood to consider

    # Initialize the heuristics matrix
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Apply penalty for long edges
    heuristics_matrix[distance_matrix > penalty_threshold] = penalty

    # Calculate bonus for edges that are part of the local optimal route
    local_optimal_route = np.array([0, 1, 2, 3])  # Example local optimal route
    for i in range(num_vertices):
        for j in range(num_vertices):
            if i in local_optimal_route and j in local_optimal_route:
                heuristics_matrix[i][j] += bonus

    # Consider a diverse neighborhood for inspiration
    for i in range(num_vertices):
        for j in range(num_vertices):
            # Calculate the average distance of the neighborhood
            neighborhood_distances = distance_matrix[np.maximum(0, i-neighborhood_size):np.minimum(num_vertices, i+neighborhood_size+1),
                                                      np.maximum(0, j-neighborhood_size):np.minimum(num_vertices, j+neighborhood_size+1)]
            neighborhood_average_distance = np.mean(neighborhood_distances)
            # Apply a bonus to shorter distances in the neighborhood
            heuristics_matrix[i][j] += bonus * (neighborhood_average_distance / average_distance - 1)

    return heuristics_matrix
```
