```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Calculate the average distance to all other vertices for each vertex
    avg_distance = (np.sum(distance_matrix, axis=1) - np.diag(distance_matrix)) / (num_vertices - 1)
    
    # Calculate the degree of each vertex (number of edges connected to it)
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate a penalty based on the average distance to all other vertices
    distance_penalty = (avg_distance - np.mean(avg_distance)) * (num_vertices - 1) / (avg_distance.max() - avg_distance.min())
    
    # Calculate a penalty based on the degree of the vertex
    degree_penalty = degrees / (np.mean(degrees) * (num_vertices - 1))
    
    # Combine the penalties into a single heuristic value
    heuristics_matrix = distance_penalty + degree_penalty
    
    # Normalize the heuristics matrix to ensure values are within a consistent scale
    heuristics_matrix = (heuristics_matrix - heuristics_matrix.min()) / (heuristics_matrix.max() - heuristics_matrix.min())
    
    # Create a diagonal matrix to apply a bonus for non-diagonal edges (no need to visit the same vertex twice)
    bonus_diagonal = np.eye(num_vertices)
    heuristics_matrix = heuristics_matrix - bonus_diagonal
    
    # Return a matrix where the value indicates how bad it is to include each edge
    return heuristics_matrix
```
