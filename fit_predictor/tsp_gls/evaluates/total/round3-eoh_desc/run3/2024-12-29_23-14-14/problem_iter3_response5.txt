```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    
    # Initialize the badness matrix with zeros
    badness_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the local minimum for each edge by considering the current route
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix[i])):
            if i == j or i + 1 == len(distance_matrix) and j == 0:
                continue  # Skip the starting and ending edge
            # Encourage diversification by considering edges that are not part of the local optimal route
            if (i, j) in local_optimal_route or (j, i) in local_optimal_route:
                continue
            # Use nuanced "badness" metrics to calculate the potential badness of an edge
            badness_value = calculate_badness_value(distance_matrix, i, j)
            badness_matrix[i, j] = badness_value
    
    # Normalize the badness matrix to ensure it is within the range of [0, 1]
    badness_matrix = (badness_matrix - badness_matrix.min()) / (badness_matrix.max() - badness_matrix.min())
    
    return badness_matrix

def calculate_badness_value(distance_matrix, i, j):
    # Encourage edges that diversify the route by considering their neighbors
    neighbors = [(i, k) for k in range(len(distance_matrix[i])) if k != i] + [(k, i) for k in range(len(distance_matrix[i])) if k != i]
    neighbor_distances = [distance_matrix[i, k] for _, k in neighbors]
    local_min = min(neighbor_distances)
    deviation = distance_matrix[i, j] - local_min
    
    # Balance exploration and exploitation by considering the distance to the local minimum
    badness_value = deviation / local_min if local_min != 0 else 0
    
    return badness_value
```
