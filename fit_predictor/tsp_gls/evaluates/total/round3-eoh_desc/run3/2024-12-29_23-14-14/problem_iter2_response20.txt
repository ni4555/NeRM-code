```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, local_optimal_route: np.ndarray, alpha: float = 0.1, beta: float = 0.1) -> np.ndarray:
    # Initialize the prior indicators of the edge inclusion
    edge_indicators = np.zeros_like(distance_matrix)

    # Penalize long edges based on a weight
    edge_indicators += alpha * distance_matrix

    # Penalize edges that are part of the current local optimal route
    local_optimal_penalty = beta * np.ones_like(distance_matrix)
    for i in range(len(local_optimal_route) - 1):
        local_optimal_penalty[local_optimal_route[i], local_optimal_route[i + 1]] += 1

    # Reward edges that connect vertices not in the local optimal route
    non_local_optimal_reward = beta * (1 - np.isin(np.arange(distance_matrix.shape[0]), local_optimal_route, assume_unique=True)
                                      & np.isin(np.arange(distance_matrix.shape[1]), local_optimal_route, assume_unique=True))
    edge_indicators[~np.isin(np.arange(distance_matrix.shape[0]), local_optimal_route, assume_unique=True),
                   ~np.isin(np.arange(distance_matrix.shape[1]), local_optimal_route, assume_unique=True)] += non_local_optimal_reward

    return edge_indicators
```
