```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Calculate the minimum distance for each vertex to any other vertex
    min_distance = np.min(distance_matrix, axis=1)
    
    # Calculate the second minimum distance for each vertex to any other vertex
    second_min_distance = np.partition(distance_matrix, 1, axis=1)[:, 1]
    
    # Calculate the bonus for edges that are close to the minimum distance
    bonus = np.where(distance_matrix == min_distance,
                     1,
                     np.where(distance_matrix == second_min_distance,
                              0.5,
                              0))
    
    # Calculate the penalty for longer edges based on their ratio to the shortest edge
    penalty = (distance_matrix / np.min(distance_matrix)) * 2
    
    # Combine the penalty and bonus to create the heuristics matrix
    heuristics_matrix = penalty + bonus
    
    # Normalize the heuristics matrix to ensure all values are between 0 and 1
    heuristics_matrix /= np.max(heuristics_matrix)
    
    # Introduce an additional exploration heuristic by increasing the heuristics value
    # for edges that are less than 2 standard deviations away from the mean distance
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    exploration_bonus = np.where(np.abs(distance_matrix - mean_distance) < 2 * std_distance,
                                 1.1,
                                 1)
    
    # Update the heuristics matrix with the exploration bonus
    heuristics_matrix *= exploration_bonus
    
    # Ensure the heuristics matrix has a balance between exploration and exploitation
    # by decreasing the heuristics value for edges that are on the immediate neighborhood
    # of the minimum distance
    for i in range(num_vertices):
        for j in range(num_vertices):
            if distance_matrix[i][j] < min_distance[i] + 1:
                heuristics_matrix[i][j] *= 0.9
    
    return heuristics_matrix
```
