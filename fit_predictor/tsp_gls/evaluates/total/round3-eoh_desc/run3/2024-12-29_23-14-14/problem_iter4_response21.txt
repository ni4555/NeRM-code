```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    
    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)
    
    # Calculate the average distance to the nearest neighbor for each edge
    average_distance = np.mean(distance_matrix, axis=1)
    
    # Calculate diversity score for each edge
    diversity_score = np.where(np.max(distance_matrix, axis=1) == distance_matrix, 1, 0)
    
    # Initialize the heuristics matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Apply a penalty for edges that are not in the local optimal route
    heuristics_matrix[distance_matrix > min_distance_to_neighbor] = 1
    
    # Apply a bonus for short average distance to the nearest neighbor
    bonus = np.clip((average_distance - min_distance_to_neighbor) / (min_distance_to_neighbor + 1e-6), 0, 1)
    heuristics_matrix += bonus
    
    # Apply a diversity bonus for edges with high diversity score
    heuristics_matrix *= diversity_score
    
    # Normalize the heuristics matrix to ensure it's within the range [0, 1]
    max_heuristics = np.max(heuristics_matrix)
    heuristics_matrix /= (max_heuristics + 1e-6)
    
    return heuristics_matrix
```
