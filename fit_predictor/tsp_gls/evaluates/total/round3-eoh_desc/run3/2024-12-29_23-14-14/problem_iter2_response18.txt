```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)
    
    # Define a weight factor for the minimum distance to the nearest neighbor
    neighbor_weight = 0.5
    
    # Calculate the weighted distance, combining the edge length with the nearest neighbor distance
    weighted_distance = distance_matrix + neighbor_weight * (min_distance_to_neighbor / np.max(min_distance_to_neighbor))
    
    # Normalize the weighted distance to maintain the same scale as the original matrix
    max_weighted_distance = np.max(weighted_distance)
    normalized_weighted_distance = weighted_distance / max_weighted_distance
    
    # The heuristic returns a matrix with values indicating how bad it is to include each edge
    return 1 - normalized_weighted_distance  # Invert to get a heuristic where higher values are worse
```
