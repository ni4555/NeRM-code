```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each edge to all optimal routes
    min_distance = np.min(distance_matrix, axis=0)
    min_distance_from_row = np.min(distance_matrix, axis=1)
    
    # Calculate a heuristic value based on the distance from the minimum distance
    heuristic_value = np.where(distance_matrix == min_distance, 
                               0, 
                               np.where(distance_matrix == min_distance_from_row, 
                                        1, 
                                        2))
    
    # Apply a penalty to longer edges, making them less attractive
    penalty = heuristic_value * (distance_matrix / np.min(distance_matrix))
    
    # Introduce a local information heuristic by adding the inverse of the distance to the nearest optimal route
    local_info = 1 / np.argmin(distance_matrix, axis=1)
    
    # Combine the penalties and local information to create the heuristic matrix
    combined_heuristic = penalty + local_info
    
    # Normalize the combined heuristic to ensure it is within a binary range
    normalized_heuristic = np.where(combined_heuristic > 1.5, 1, 0)
    
    return normalized_heuristic
```
