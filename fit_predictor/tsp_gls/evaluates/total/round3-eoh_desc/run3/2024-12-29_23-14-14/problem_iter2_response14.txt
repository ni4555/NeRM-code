```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic balances the edge weight importance with the potential for improvement.
    # It takes into account the actual distance and encourages edges that are shorter than the average distance.
    row_avg = np.mean(distance_matrix, axis=1)
    col_avg = np.mean(distance_matrix, axis=0)
    adjusted_matrix = distance_matrix - np.minimum(row_avg, col_avg)
    # To avoid numerical issues and encourage improvement over the current local optimum, use a soft thresholding.
    return np.where(adjusted_matrix > 0, 1 / adjusted_matrix, -np.inf)
```
