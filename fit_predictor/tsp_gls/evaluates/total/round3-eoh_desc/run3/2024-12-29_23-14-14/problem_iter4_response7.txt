```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the prior indicators matrix with zeros
    prior_indicators = np.zeros_like(distance_matrix)

    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2

    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean

    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())

    # Contextualize changes by penalizing edges in the current route more
    current_route_edges = np.ones(distance_matrix.shape, dtype=bool)
    for i in range(len(distance_matrix)):
        current_route_edges[i, i] = False
        for j in range(i + 1, len(distance_matrix)):
            current_route_edges[i, j] = False
            current_route_edges[j, i] = False
    prior_indicators[current_route_edges] *= 1.5  # Increase penalty

    # Encourage diversification by balancing exploration and exploitation
    # Explore edges with higher relative deviation from neighbors
    diversification_factor = np.argsort(-deviations, axis=1)
    for i in range(distance_matrix.shape[0]):
        # Shuffle the order of edges for diversification
        current_edges = diversification_factor[i]
        for j in range(1, len(current_edges)):
            # Swap the order of edges for exploration
            temp = current_edges[j]
            current_edges[j] = current_edges[j - 1]
            current_edges[j - 1] = temp
        diversification_factor[i] = current_edges

    # Update the prior indicators matrix with the calculated badness
    prior_indicators = deviations

    # Normalize measures by scaling the badness values
    prior_indicators = (prior_indicators - prior_indicators.min()) / (prior_indicators.max() - prior_indicators.min())

    return prior_indicators
```
