```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    local_optimal_penalty = 100
    distance_deviation_bonus = 0.1
    diversity_bonus = 5

    # Initialize the heuristics matrix
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)

    # Calculate the average distance to the nearest neighbor for each edge
    average_distance = np.mean(distance_matrix, axis=1)

    # Calculate diversity score for each edge
    diversity_score = np.where(np.max(distance_matrix, axis=1) == distance_matrix, 1, 0)

    # Calculate the penalty for edges that are part of the local optimal route
    heuristics_matrix[distance_matrix >= local_optimal_penalty] = local_optimal_penalty
    heuristics_matrix[distance_matrix < local_optimal_penalty] -= local_optimal_penalty

    # Calculate the bonus for edges that have a significant deviation from the average distance to their nearest neighbor
    heuristics_matrix += distance_deviation_bonus * np.abs(distance_matrix - min_distance_to_neighbor)

    # Add diversity bonus for edges with high diversity score
    heuristics_matrix[diversity_score == 1] += diversity_bonus

    # Normalize the heuristics matrix to maintain the same scale as the original matrix
    max_heuristics = np.max(heuristics_matrix)
    heuristics_matrix = heuristics_matrix / max_heuristics

    return heuristics_matrix
```
