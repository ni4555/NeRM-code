```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Create a matrix to store the badness metrics
    badness_matrix = np.zeros_like(distance_matrix)
    
    # Define a penalty for current route edges
    route_penalty = 10
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix[i])):
            if i != j and i in distance_matrix[j] or j in distance_matrix[i]:
                badness_matrix[i][j] = route_penalty
    
    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Apply a diversification heuristic that considers the structure of the problem
    # We encourage the selection of edges that are significantly different from their neighbors
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix[i])):
            if badness_matrix[i][j] == 0:
                # Avoid penalizing edges that are already part of the route
                diversification_score = np.abs(deviations[i, j])
            else:
                diversification_score = 1 - deviations[i, j]
            badness_matrix[i][j] = min(badness_matrix[i][j], diversification_score)
    
    # Return the updated badness matrix
    return badness_matrix
```
