```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a simple heuristic based on the sum of distances in the local optimal route
    # The idea is to penalize edges that are on the local optimal route more heavily
    local_optimal_route = np.random.choice(distance_matrix.shape[0], size=distance_matrix.shape[0]-1, replace=False)
    penalties = np.zeros_like(distance_matrix)
    for i in range(len(local_optimal_route)):
        penalties[local_optimal_route[i]][local_optimal_route[(i+1) % len(local_optimal_route)]] = 1
        penalties[local_optimal_route[(i+1) % len(local_optimal_route)]][local_optimal_route[i]] = 1
    
    # Add a penalty proportional to the distance of the edge
    edge_penalties = distance_matrix / np.max(distance_matrix)
    
    # Combine penalties
    return penalties + edge_penalties
```
