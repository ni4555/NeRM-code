```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a combination of edge length and other characteristics
    # Here, we include a diversity factor that penalizes edges that are too similar to others
    # in terms of distance.
    
    # Calculate the diversity factor by penalizing edges that are close to the median distance
    median_distance = np.median(distance_matrix)
    diversity_factor = np.exp(-np.abs(distance_matrix - median_distance))
    
    # Use a weighted sum of edge length and diversity factor
    # The weights are chosen to give more importance to the edge length initially
    # but allow the diversity factor to influence the heuristic as well.
    weight_edge_length = 0.7
    weight_diversity = 0.3
    
    # The penalty_factor still penalizes longer edges but incorporates the diversity factor
    penalty_factor = weight_edge_length * (1 / (distance_matrix + 1e-5)) + weight_diversity * diversity_factor
    
    # Normalize the penalty_factor to ensure all values are within a similar range
    max_value = np.max(penalty_factor)
    min_value = np.min(penalty_factor)
    normalized_penalty_factor = (penalty_factor - min_value) / (max_value - min_value)
    
    return normalized_penalty_factor
```
