```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    num_nodes = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)

    # Calculate the total number of edges that would be included if we connected all nodes
    total_possible_edges = num_nodes * (num_nodes - 1) / 2

    # Create a matrix where the cost of each edge is based on two factors:
    # 1. The inverse of the edge length (to favor shorter edges)
    # 2. The product of the inverse degrees (to penalize connections between nodes with high degrees)
    cost_matrix = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                cost = 1 / (distance_matrix[i, j] + 1e-10)  # Avoid division by zero
                cost *= 1 / (degrees[i] * degrees[j])
                # Normalize by the average edge cost to keep the scale consistent
                average_cost = total_possible_edges / cost_matrix.sum()
                cost /= average_cost
                cost_matrix[i, j] = cost

    return cost_matrix
```
