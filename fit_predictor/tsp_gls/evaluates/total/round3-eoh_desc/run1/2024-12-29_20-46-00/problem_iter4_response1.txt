```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Incorporate node degree into the heuristic
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = 1 / (degrees[i] + degrees[j])
    
    # Balance exploration and exploitation by considering the distance from the longest path
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                distance_from_longest_path = longest_path - distance_matrix[i, j]
                # Use a sigmoid function to balance the influence of distance from the longest path
                sigmoid = 1 / (1 + np.exp(-distance_from_longest_path))
                heuristic_matrix[i, j] *= sigmoid
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic
    
    # Add a small random perturbation to encourage exploration
    epsilon = 1e-5
    for i in range(n):
        for j in range(n):
            if i != j:
                if np.random.rand() < 0.05:
                    perturbation = np.random.normal(0, epsilon, 1)
                    heuristic_matrix[i, j] += perturbation
    
    return heuristic_matrix
```
