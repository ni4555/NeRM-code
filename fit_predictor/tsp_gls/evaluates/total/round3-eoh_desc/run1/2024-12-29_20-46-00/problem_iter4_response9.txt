```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Apply a logarithmic transformation to longer distances to give more weight to them
    log_distance_matrix = np.log(distance_matrix + 1e-5)
    
    # Introduce a problem-specific knowledge adjustment factor
    # For example, if we know that distances greater than a certain threshold are not meaningful
    # for our problem, we can adjust the transformation accordingly.
    threshold = 100  # Example threshold
    adjusted_log_distance = np.where(log_distance_matrix > np.log(threshold + 1e-5),
                                     np.log(threshold + 1e-5), log_distance_matrix)
    
    # Use an inverse transformation to penalize longer distances more heavily
    penalty_factor = 1 / adjusted_log_distance
    
    # Normalize the penalty factor to ensure all values are within a similar range
    max_value = np.max(penalty_factor)
    min_value = np.min(penalty_factor)
    normalized_penalty_factor = (penalty_factor - min_value) / (max_value - min_value)
    
    return normalized_penalty_factor
```
