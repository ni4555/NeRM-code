```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic considers that including an edge between two nodes with high
    # degrees is more costly, as it is more likely to create a tight cycle.
    # The heuristic assigns higher cost to edges where both nodes have high degrees.

    # Calculate the degree of each node
    num_nodes = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)

    # Create a matrix where the cost of each edge is inversely proportional
    # to the product of the degrees of its two nodes
    cost_matrix = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                cost_matrix[i, j] = 1 / (degrees[i] * degrees[j])
    
    # Normalize the cost matrix to have a maximum value of 1
    max_cost = np.max(cost_matrix)
    if max_cost > 0:
        cost_matrix /= max_cost
    
    return cost_matrix
```
