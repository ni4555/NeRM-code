```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Incorporate node attributes such as degrees to balance local exploration
    node_degrees = np.sum(distance_matrix, axis=1)
    
    # Use a combination of local and global heuristics
    penalty_factor = 1 / (distance_matrix + 1e-5)
    exploration_factor = np.random.rand(n, n)  # Exploration heuristic based on random values
    
    # Avoid self-loops and edges on the longest path
    for i in range(n):
        for j in range(n):
            if i != j:
                if distance_matrix[i, j] == longest_path - distance_matrix[i, j]:
                    heuristic_matrix[i, j] = 1  # High penalty for edges on the longest path
                else:
                    # Local heuristic
                    heuristic_matrix[i, j] = penalty_factor[i, j]
                    # Adjust local heuristic with node attributes to encourage diversification
                    heuristic_matrix[i, j] += 1 / (node_degrees[i] + node_degrees[j])
                    # Global heuristic to avoid the longest path
                    heuristic_matrix[i, j] += (longest_path - distance_matrix[i, j])
                    # Exploration heuristic
                    heuristic_matrix[i, j] += exploration_factor[i, j]
    
    return heuristic_matrix
```
