```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    
    # This improved heuristic considers both the distance of an edge from the longest path
    # and the degree of the nodes connected by the edge to avoid tight cycles.
    # It also considers the connectivity of the edges to the local optimal route.

    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Initialize a matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic for each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                # Avoid self-loops
                edge_length = distance_matrix[i, j]
                # Calculate the heuristic as a combination of the factors
                heuristic = longest_path - edge_length + 1 / (degrees[i] + degrees[j])
                # Normalize the heuristic to the range [0, 1]
                heuristic = (heuristic - 1) / (n - 2)
                heuristic_matrix[i, j] = heuristic
    
    return heuristic_matrix
```
