```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    n = distance_matrix.shape[0]
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the importance of each node based on its degree and the average
    # degree of its neighbors
    importance = degrees + np.mean(distance_matrix, axis=1)
    
    # Define a function to calculate the local feature of each edge based on
    # the importance of its nodes and the distance between them
    def local_feature(i, j):
        return 1 / (importance[i] * importance[j]) * distance_matrix[i, j]
    
    # Calculate the heuristic matrix by applying the local feature function
    # to each edge
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = local_feature(i, j)
    
    # Normalize the heuristic matrix to the range [0, 1]
    max_feature = np.max(heuristic_matrix)
    if max_feature > 0:
        heuristic_matrix /= max_feature
    
    # Introduce exploration by adding random perturbations to the heuristic values
    # that are likely to lead to better solutions
    exploration_factor = np.random.rand(n, n)
    heuristic_matrix *= exploration_factor
    
    # Adapt penalties based on the heuristic values
    # High heuristic values indicate less desirable edges, so we add a penalty
    # that decreases the heuristic value for these edges
    penalty_factor = 1 / (1 + heuristic_matrix)
    heuristic_matrix *= penalty_factor
    
    # Normalize the adapted heuristic matrix to the range [0, 1]
    max_adapted_feature = np.max(heuristic_matrix)
    if max_adapted_feature > 0:
        heuristic_matrix /= max_adapted_feature
    
    return heuristic_matrix
```
