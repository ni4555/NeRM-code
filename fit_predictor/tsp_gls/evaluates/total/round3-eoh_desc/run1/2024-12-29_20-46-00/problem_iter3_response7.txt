```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Use local information to penalize short edges
    penalty_factor = 1 / (distance_matrix + 1e-5)
    
    # Use global information to avoid edges on the longest path
    for i in range(n):
        for j in range(n):
            if i != j:
                # Avoid self-loops
                if distance_matrix[i, j] == longest_path - distance_matrix[i, j]:
                    heuristic_matrix[i, j] = 1  # This is a high penalty for edges on the longest path
                else:
                    # Combine local and global heuristics
                    heuristic_matrix[i, j] = penalty_factor[i, j] + (longest_path - distance_matrix[i, j])
    
    # Add exploration heuristic to encourage diversification
    for i in range(n):
        for j in range(n):
            if i != j:
                # Randomly perturb the heuristic values to encourage exploration
                if np.random.rand() < 0.05:  # Reduced chance of perturbation to balance exploitation
                    perturbation = np.random.normal(0, 0.1, 1)
                    heuristic_matrix[i, j] += perturbation
    
    # Introduce a diversity heuristic that favors edges between less frequently visited pairs
    visit_frequency = np.zeros_like(distance_matrix)
    for _ in range(10):  # Iterate a few times to estimate visit frequency
        for i in range(n):
            for j in range(n):
                if i != j:
                    # Update visit frequency based on the heuristic value
                    visit_frequency[i, j] += heuristic_matrix[i, j]
    
    diversity_factor = 1 / (visit_frequency + 1e-5)
    heuristic_matrix = (heuristic_matrix + diversity_factor) / 2
    
    return heuristic_matrix
```
