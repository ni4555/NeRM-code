```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the minimum degree of all nodes
    min_degree = np.min(degrees)
    
    # Calculate the sum of degrees squared
    degrees_squared = np.square(degrees)
    
    # Initialize a matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic for each edge
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # The heuristic will be high for edges that connect to nodes with
                # high degrees and where the degrees of the two nodes differ
                # significantly from the minimum degree.
                # Additionally, we add a penalty for edges with low degrees.
                penalty = (degrees_squared[i] + degrees_squared[j]) / (min_degree * min_degree)
                heuristic_matrix[i, j] = penalty + (degrees[i] + degrees[j] - 2 * min_degree)
    
    # Normalize the heuristic matrix to have a maximum value of 1
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic
    
    return heuristic_matrix
```
