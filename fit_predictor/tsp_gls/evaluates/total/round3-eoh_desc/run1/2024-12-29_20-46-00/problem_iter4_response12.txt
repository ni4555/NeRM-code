```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    total_distance = 2 * np.sum(np.triu(distance_matrix))

    # Initialize a matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the heuristic for each edge by considering the change in total distance
    # when the edge is included in the tour
    for i in range(n):
        for j in range(n):
            if i != j:
                edge_contribution = distance_matrix[i, j]
                # Subtract twice the edge contribution because it will be counted twice
                # in the Hamiltonian cycle
                heuristic_matrix[i, j] = -2 * edge_contribution

    # Normalize the heuristic matrix to make the values comparable
    # by dividing by the maximum possible change in distance
    max_possible_change = -2 * np.sum(distance_matrix)
    heuristic_matrix /= max_possible_change

    return heuristic_matrix
```
