```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                          (distance_matrix[:, j] == distance_matrix[i, :]))
    
    # Calculate the total number of possible edges
    num_possible_edges = (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1)) // 2
    
    # Calculate edge frequency
    edge_frequency = usage_matrix.sum() / num_possible_edges
    
    # Normalize the distance matrix based on edge frequency and edge length
    adjusted_matrix = distance_matrix * (1 + edge_frequency) / (1 + distance_matrix)
    
    # Apply a diversity factor to encourage the inclusion of less used edges
    diversity_factor = 0.02
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            adjusted_matrix[i, j] *= (1 + diversity_factor / (1 + usage_matrix[i, j]))
    
    # Ensure that the distances remain positive
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    
    return adjusted_matrix
```
