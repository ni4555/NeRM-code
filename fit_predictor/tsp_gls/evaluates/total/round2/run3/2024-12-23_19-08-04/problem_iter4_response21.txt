```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the usage of each edge
    num_trips = np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1) - len(distance_matrix) * (len(distance_matrix) - 1)
    edge_usage = 1 / (num_trips + 1e-5)  # Avoid division by zero

    # Calculate the average edge length
    average_edge_length = np.mean(distance_matrix)

    # Adjust distances based on usage and deviation from average to balance local and global search
    adjusted_distances = distance_matrix * (1 - edge_usage) + average_edge_length * np.exp(-np.abs(distance_matrix - average_edge_length) / average_edge_length)

    # Apply a penalty for edges with high usage to avoid local minima
    penalty_factor = 0.1 * edge_usage * (1 - distance_matrix / average_edge_length)
    adjusted_distances += penalty_factor

    # Ensure that the adjusted distances are not negative
    adjusted_distances = np.maximum(adjusted_distances, 0)

    return adjusted_distances
```
