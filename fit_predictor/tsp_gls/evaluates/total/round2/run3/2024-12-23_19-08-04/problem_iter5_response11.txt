```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Apply a balance factor to reward short edges and penalize highly used edges
    balance_factor = 0.5
    mutation_factor = 0.1
    adjusted_matrix = (1 - mutation_factor * usage_matrix) * distance_matrix * (1 + balance_factor / (1 + np.maximum(distance_matrix, np.finfo(np.float64).eps)))

    # Introduce randomness to prevent local minima
    random_matrix = np.random.normal(1, 0.1, adjusted_matrix.shape)
    adjusted_matrix *= random_matrix

    # Ensure that the distances remain positive and normalize to encourage diversity
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    adjusted_matrix = (adjusted_matrix - np.min(adjusted_matrix)) / (np.max(adjusted_matrix) - np.min(adjusted_matrix))

    return adjusted_matrix
```
