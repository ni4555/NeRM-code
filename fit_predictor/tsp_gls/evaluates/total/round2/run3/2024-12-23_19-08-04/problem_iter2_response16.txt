```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of each edge's distance
    edge_sums = distance_matrix.sum(axis=1)
    
    # Calculate the total sum of all edge distances
    total_edge_sum = edge_sums.sum()
    
    # Normalize the edge sums to have a maximum of 1
    normalized_edge_sums = edge_sums / total_edge_sum
    
    # Calculate the sum of all possible edges (n-1 choose 2)
    n = distance_matrix.shape[0]
    total_possible_edges = (n - 1) * (n - 2) // 2
    
    # Calculate the normalized usage of each edge
    edge_counts = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i + 1, n):
            edge_counts[i, j] = edge_counts[j, i] = 1
    edge_usage = edge_counts.sum() / (total_possible_edges * n)
    
    # Scale the normalized usage and edge sums to influence the heuristic
    scaled_usage = normalized_edge_sums * edge_usage
    
    # Calculate the heuristic score by combining the scaled usage and edge sums
    heuristic_scores = scaled_usage
    
    # Encourage exploration by increasing the score for less used edges
    for i in range(n):
        for j in range(i + 1, n):
            if scaled_usage[i, j] < 0.1:
                heuristic_scores[i, j] *= 1.1
    
    # Invert the heuristic scores to make it worse to include high scores edges
    return 1 - heuristic_scores
```
