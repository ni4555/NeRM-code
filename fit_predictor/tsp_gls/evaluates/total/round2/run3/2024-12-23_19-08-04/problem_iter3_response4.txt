```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))
    
    # Apply a connectivity penalty to encourage exploration of less connected parts of the graph
    connectivity_penalty = 0.5
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                if i > j:
                    connectivity = np.sum(distance_matrix[:, j] < distance_matrix[:, i])
                else:
                    connectivity = np.sum(distance_matrix[:, i] < distance_matrix[:, j])
                usage_matrix[i, j] += connectivity_penalty * (connectivity / (distance_matrix.shape[0] - 1))
    
    # Balance the penalty by considering the length of the edges
    length_balance = 0.2
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if distance_matrix[i, j] != 0:
                usage_matrix[i, j] *= (1 + length_balance / distance_matrix[i, j])
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + np.random.rand(*distance_matrix.shape) * 0.01  # Introduce random noise
    adjusted_matrix += usage_matrix
    
    # Avoid zero distances by setting a lower bound
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    
    return adjusted_matrix
```
