```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the usage of each edge
    num_trips = np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1) - len(distance_matrix) * (len(distance_matrix) - 1)
    edge_usage = 1 / (num_trips + 1e-5)  # Avoid division by zero

    # Calculate a penalty factor that is a function of both usage and distance
    penalty_factor = np.exp(-0.1 * distance_matrix * edge_usage)

    # Adjust distances based on the calculated penalty factor
    adjusted_distances = distance_matrix * penalty_factor
    
    return adjusted_distances
```
