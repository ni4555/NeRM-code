```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Adjust the distance matrix based on the usage of each edge
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Using the inverse of the distance as a measure of frequency, with a dampening factor
                usage_matrix[i, j] = 1 / (1 + distance_matrix[i, j]) ** 0.5
    
    # Apply a penalty to the edges that are frequently used
    # Use a more informed penalty that is a combination of the dampened frequency and a scaling factor
    return usage_matrix * (1 + 0.1 * np.sum(usage_matrix, axis=0) ** 0.5)
```
