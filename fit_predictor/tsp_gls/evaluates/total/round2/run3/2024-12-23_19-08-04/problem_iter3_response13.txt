```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Define a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 2)
    
    # Apply a balance factor to reward short edges, to avoid local minima created by long edges
    balance_factor = 0.5
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            adjusted_matrix[i, j] *= (1 + balance_factor / (1 + adjusted_matrix[i, j]))
    
    # Ensure that the distances remain positive
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    
    # Introduce a connectivity measure by ensuring that each node is connected to at least one other node
    min_connectivity_factor = 0.01
    connectivity_measure = np.sum(adjusted_matrix, axis=1) + np.sum(adjusted_matrix, axis=0)
    adjusted_matrix += min_connectivity_factor * (np.finfo(np.float64).eps - connectivity_measure[:, np.newaxis])
    
    # Encourage diversity by occasionally resetting the distance between nodes with zero usage to a higher value
    diversity_factor = 0.1
    diversity_threshold = np.mean(adjusted_matrix) * 2
    zero_usage_edges = np.where(usage_matrix == 0)
    np.random.shuffle(zero_usage_edges[0])
    np.random.shuffle(zero_usage_edges[1])
    reset_indices = zip(zero_usage_edges[0], zero_usage_edges[1])
    for i, j in reset_indices:
        if adjusted_matrix[i, j] < diversity_threshold:
            adjusted_matrix[i, j] = diversity_threshold
    
    return adjusted_matrix
```
