```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Define a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 2)
    
    # Apply a balance factor to reward short edges, to avoid local minima created by long edges
    balance_factor = 0.5
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            adjusted_matrix[i, j] *= (1 + balance_factor / (1 + adjusted_matrix[i, j]))
    
    # Avoid zero distances by adding a small epsilon value
    epsilon = np.finfo(np.float64).eps
    adjusted_matrix = np.maximum(adjusted_matrix, epsilon)
    
    # Encourage diversity by slightly increasing the distance to less connected nodes
    connectivity_factor = 0.05
    connectivity_matrix = np.sum(distance_matrix, axis=1)
    adjusted_matrix += connectivity_factor * (1 - connectivity_matrix / np.sum(distance_matrix))
    
    # Refine with domain knowledge by decreasing the penalty on edges that are part of the shortest path to all nodes
    for i in range(distance_matrix.shape[0]):
        shortest_path = np.argmin(distance_matrix[i, :])
        adjusted_matrix[shortest_path, :] += adjusted_matrix[i, shortest_path] * 0.5
    
    return adjusted_matrix
```
