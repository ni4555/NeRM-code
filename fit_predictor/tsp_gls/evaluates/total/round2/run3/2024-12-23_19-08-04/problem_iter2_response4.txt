```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Incorporate edge usage and length directly into the distance matrix
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Use a logarithmic scale to avoid zero-division and encourage exploration
                usage_matrix[i, j] = np.log(1 + distance_matrix[i, j])
    
    # Apply a penalty to the edges that are frequently used
    frequent_usage_penalty = 0.1 * np.sum(usage_matrix, axis=0)
    penalized_usage = usage_matrix - frequent_usage_penalty
    
    # Encourage exploration by adding a bonus for less used edges
    less_used_bonus = 1.1 * (penalized_usage < 0.1)
    adjusted_distance_matrix = penalized_usage * less_used_bonus
    
    # Return the matrix with adjusted distances
    return adjusted_distance_matrix
```
