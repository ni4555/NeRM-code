```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize usage metrics
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum(
                (distance_matrix[:, i] == distance_matrix[j, :]) &
                (distance_matrix[:, j] == distance_matrix[i, :]))

    # Define penalty and balance factors
    usage_penalty_factor = 0.1
    connectivity_penalty_factor = 0.05
    diversity_factor = 0.02
    balance_factor = 0.5

    # Calculate the number of non-zero edges in the distance matrix
    non_zero_edges = np.sum(distance_matrix != 0, axis=0) + np.sum(distance_matrix != 0, axis=1) - 2 * len(distance_matrix) * (len(distance_matrix) - 1)

    # Adjust the distance matrix
    adjusted_matrix = distance_matrix + usage_penalty_factor * (usage_matrix ** 2)

    # Ensure diversity by avoiding zero distances
    adjusted_matrix += connectivity_penalty_factor / (non_zero_edges + 1)

    # Balance the distances to avoid local minima
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            adjusted_matrix[i, j] *= (1 + balance_factor / (1 + adjusted_matrix[i, j]))

    # Apply diversity factor
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            adjusted_matrix[i, j] *= (1 + diversity_factor / (1 + usage_matrix[i, j]))

    # Ensure positive distances
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)

    return adjusted_matrix
```
