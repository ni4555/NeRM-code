```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of each edge's distance
    edge_sums = distance_matrix.sum(axis=1)
    edge_counts = np.ones(distance_matrix.shape[0])
    usage_matrix = edge_counts * distance_matrix
    
    # Calculate the sum of all possible paths (n-1 choose 2)
    total_possible_edges = (len(distance_matrix) - 1) * (len(distance_matrix) - 2) // 2
    
    # Normalize the edge usage by total possible edges
    normalized_usage = usage_matrix / total_possible_edges
    
    # Add a term for edge length, scaled by the sum of all edges
    scaled_edge_sums = edge_sums / total_possible_edges
    
    # Calculate a heuristic score by combining the normalized usage and scaled edge sums
    heuristic_scores = (1 - normalized_usage) + (scaled_edge_sums * 0.5)
    
    # Add a bonus for less used edges to encourage exploration
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            if normalized_usage[i, j] < 0.1:
                heuristic_scores[i, j] *= 1.1
    
    # Return the matrix of heuristic scores
    return heuristic_scores
```
