```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Define a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 2)
    
    # Apply a balance factor to reward short edges, to avoid local minima created by long edges
    balance_factor = 0.5
    adjusted_matrix = np.clip(adjusted_matrix, None, np.inf)  # Clip to positive infinity to ensure positive distances
    adjusted_matrix *= (1 + balance_factor / adjusted_matrix)
    
    # Ensure that the distances remain positive
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    
    # Encourage diversity by slightly increasing the distances of edges that are part of a highly connected subgraph
    connectivity_matrix = np.sum(distance_matrix != np.inf, axis=1)
    connectivity_threshold = 2  # Arbitrary threshold for high connectivity
    adjusted_matrix[connectivity_matrix > connectivity_threshold] *= 1.1
    
    # Refine with domain knowledge by adjusting distances based on specific constraints or known properties of the problem
    # This is a placeholder for domain-specific refinement logic
    # ...

    return adjusted_matrix
```
