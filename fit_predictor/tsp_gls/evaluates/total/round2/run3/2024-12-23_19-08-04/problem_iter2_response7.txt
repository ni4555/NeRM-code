```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Incorporate usage frequency into the heuristic
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if distance_matrix[i, j] > 0:
                usage_matrix[i, j] = 1
    usage_matrix = usage_matrix / np.sum(usage_matrix, axis=1, keepdims=True)

    # Adjust the distances based on both the length of the edge and its usage
    adjusted_distances = distance_matrix * (1 + usage_matrix)

    # Introduce a penalty for highly connected nodes
    for i in range(adjusted_distances.shape[0]):
        highly_connected_penalty = np.sum(adjusted_distances[i, :]) / adjusted_distances.shape[1]
        adjusted_distances[i, :] += highly_connected_penalty

    # Introduce a bonus for edges that are not frequently used to avoid local minima
    edge_bonus = 0.1
    for i in range(adjusted_distances.shape[0]):
        for j in range(adjusted_distances.shape[1]):
            if adjusted_distances[i, j] != 0:
                adjusted_distances[i, j] = max(adjusted_distances[i, j], edge_bonus / (1 + usage_matrix[i, j]))

    # Ensure non-zero distances and return the adjusted matrix
    return np.maximum(adjusted_distances, 1)
```
