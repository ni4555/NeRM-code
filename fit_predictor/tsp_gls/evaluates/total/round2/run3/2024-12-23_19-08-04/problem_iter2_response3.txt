```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Incorporate usage frequency into the heuristic
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if distance_matrix[i, j] > 0:
                usage_matrix[i, j] = 1
    usage_matrix = usage_matrix / np.sum(usage_matrix, axis=1, keepdims=True)

    # Adjust the distances based on both the length of the edge and its usage
    adjusted_distances = distance_matrix * (1 + usage_matrix)

    # Introduce a penalty for highly connected nodes (less likely to be included in the optimal tour)
    degree_matrix = np.sum(distance_matrix, axis=0)
    penalty_factor = np.mean(degree_matrix) / (degree_matrix + 1)
    adjusted_distances += penalty_factor * np.sum(distance_matrix, axis=0, keepdims=True)

    # Ensure non-zero distances and return the adjusted matrix
    return np.maximum(adjusted_distances, 1)
```
