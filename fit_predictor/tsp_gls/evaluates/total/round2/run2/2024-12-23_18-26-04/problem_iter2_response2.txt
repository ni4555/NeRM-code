```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    edge_counts = np.zeros_like(distance_matrix)
    edge_usage = np.sum(distance_matrix)

    # Initialize the heuristic matrix with the same values as the distance matrix
    heuristic_matrix = np.copy(distance_matrix)

    # Iterate over the matrix to calculate the heuristic values
    for i in range(num_vertices):
        for j in range(num_vertices):
            if i != j:
                edge_counts[i, j] = edge_usage / (degrees[i] * degrees[j])
                # Adjust the heuristic value based on the edge usage and degree
                heuristic_value = distance_matrix[i, j] * (1 + edge_counts[i, j] / num_vertices)
                heuristic_matrix[i, j] = heuristic_value

    # Ensure that the adjusted distances do not become negative
    heuristic_matrix = np.maximum(heuristic_matrix, 0)

    return heuristic_matrix
```
