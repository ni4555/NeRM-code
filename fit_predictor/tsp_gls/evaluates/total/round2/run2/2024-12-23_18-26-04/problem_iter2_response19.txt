```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a matrix to track the usage of each edge
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Initialize the heuristic matrix with the same values as the distance matrix
    heuristic_matrix = np.copy(distance_matrix)
    
    # Iterate over the matrix to calculate the heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Calculate the heuristic value based on the usage of the edge
            usage_matrix[i, j] = np.count_nonzero(distance_matrix) - np.count_nonzero(distance_matrix) / (i + 1)
            heuristic_value = distance_matrix[i, j] / (usage_matrix[i, j] + 1)
            heuristic_matrix[i, j] = heuristic_value
    
    # Adjust the heuristic values to avoid local minima
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Find the minimum heuristic value in the neighborhood
                min_neighborhood_value = np.min(heuristic_matrix[i, max(0, j-1):min(distance_matrix.shape[1], j+2)])
                # Adjust the heuristic value based on a more complex interaction rule
                if heuristic_matrix[i, j] > min_neighborhood_value:
                    heuristic_matrix[i, j] = min_neighborhood_value + (distance_matrix[i, j] - min_neighborhood_value) * 0.5
    
    return heuristic_matrix
```
