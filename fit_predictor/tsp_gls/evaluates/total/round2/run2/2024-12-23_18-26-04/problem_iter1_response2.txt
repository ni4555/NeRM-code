```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a matrix where the value is 1 if an edge is used, else 0
    usage_matrix = np.where(distance_matrix < np.inf, 1, 0)
    
    # Calculate the sum of usage for each row and column
    row_sum = np.sum(usage_matrix, axis=1)
    col_sum = np.sum(usage_matrix, axis=0)
    
    # Normalize the usage sums to get the average usage
    row_avg = row_sum / len(row_sum)
    col_avg = col_sum / len(col_sum)
    
    # Use a creative heuristic that increases the cost of edges that are
    # frequently used but are not the shortest path from either node
    heuristic_matrix = np.copy(distance_matrix)
    
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if usage_matrix[i, j] == 1:
                # Calculate the shortest path cost to both i and j
                shortest_to_i = np.min(distance_matrix[i, :])
                shortest_to_j = np.min(distance_matrix[:, j])
                
                # If the current edge is not the shortest path from either node
                if distance_matrix[i, j] != shortest_to_i and distance_matrix[i, j] != shortest_to_j:
                    # Increase the heuristic cost
                    heuristic_matrix[i, j] += (row_avg + col_avg) * 0.1
            else:
                # If the edge is not used, it's bad to include it, increase its cost
                heuristic_matrix[i, j] += (row_avg + col_avg) * 0.1
                
    return heuristic_matrix
```
