```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the usage of each edge
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Normalize node degrees to avoid negative adjustments
    degrees = (degrees - np.min(degrees)) / (np.max(degrees) - np.min(degrees))
    
    # Normalize edge usage to avoid extreme values
    edge_usage = (edge_usage - np.min(edge_usage)) / (np.max(edge_usage) - np.min(edge_usage))
    
    # Introduce noise for exploration and to avoid overfitting
    noise = np.random.normal(0, 0.01, distance_matrix.shape)
    
    # Apply non-linear scaling to the adjustments
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Normalize distance adjustment to avoid local minima
                normalized_distance = (distance_matrix[i][j] - mean_distance) / std_distance
                distance_adjustment = -np.exp(-normalized_distance ** 2)
                
                # Balance global vs. local adjustments by considering node degree and edge usage
                adjustment = 0.5 * degrees[i] * degrees[j] + 0.5 * edge_usage[i] * edge_usage[j]
                
                # Introduce noise for exploration
                heuristic_value = distance_matrix[i][j] * (1 + adjustment + distance_adjustment + noise[i][j])
                
                # Ensure no self-loops have a non-zero heuristic
                if i == j:
                    heuristic_value = np.inf
                
                heuristic_matrix[i][j] = heuristic_value
    
    return heuristic_matrix
```
