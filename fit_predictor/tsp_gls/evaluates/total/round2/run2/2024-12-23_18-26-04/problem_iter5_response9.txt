```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with a lower value for the diagonal
    heuristic_matrix = np.full(distance_matrix.shape, 1.0)
    np.fill_diagonal(heuristic_matrix, 0.0)
    
    # Normalize node degrees
    max_degree = np.max(np.sum(distance_matrix, axis=1))
    normalized_degrees = np.sum(distance_matrix, axis=1) / max_degree
    
    # Normalize edge usage
    max_usage = np.max(np.count_nonzero(distance_matrix, axis=0))
    normalized_usage = np.count_nonzero(distance_matrix, axis=0) / max_usage
    
    # Calculate mean and standard deviation of the distances
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Non-linear scaling factor for distances
    scaling_factor = np.clip((distance_matrix - mean_distance) / std_distance, -5, 5)
    
    # Introduce noise for exploration
    noise_level = np.random.normal(0, 0.01, distance_matrix.shape)
    
    # Dynamic balancing of global vs. local adjustments
    global_adjustment = np.exp(-np.sum(distance_matrix ** 2) / (np.sum(distance_matrix) ** 2))
    local_adjustment = 1 - global_adjustment
    
    # Prevent overfitting by adding a regularization term
    regularization_term = np.exp(-np.sum(distance_matrix) / 100)
    
    # Update the heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Heuristic based on node degree, edge usage, distance, interaction, noise, and adjustments
                heuristic_value = (normalized_degrees[i] + normalized_degrees[j]) * (normalized_usage[i] + normalized_usage[j]) * \
                                  np.exp(-scaling_factor[i][j]) + local_adjustment * distance_matrix[i][j] + \
                                  noise_level[i][j] + global_adjustment * regularization_term[i][j]
                
                # Apply non-linear scaling to the heuristic value
                heuristic_value = np.log(heuristic_value)
                
                heuristic_matrix[i][j] = heuristic_value
    
    return heuristic_matrix
```
