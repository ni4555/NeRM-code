```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the usage of each edge
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Adjust the heuristic values based on the node degree, edge usage, and distance
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Adjust based on node degree
                degree_adjustment = (degrees[i] - degrees[j]) / max(degrees[i], degrees[j])
                
                # Adjust based on edge usage
                usage_adjustment = (np.log(edge_usage[i] + 1) - np.log(edge_usage[j] + 1)) / max(np.log(edge_usage[i] + 1), np.log(edge_usage[j] + 1))
                
                # Adjust based on distance
                distance_adjustment = (distance_matrix[i][j] - mean_distance) / (std_distance if std_distance != 0 else 1)
                
                # Combine the adjustments with a dampening factor to avoid too large adjustments
                heuristic_matrix[i][j] = (1 + 0.1 * degree_adjustment + 0.1 * usage_adjustment + 0.1 * distance_adjustment) * distance_matrix[i][j]
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
