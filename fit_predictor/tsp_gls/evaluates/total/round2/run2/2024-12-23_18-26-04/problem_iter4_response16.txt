```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the usage of each edge
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Normalize the degrees and edge usage to bring them into a similar scale
    degrees_normalized = (degrees - np.min(degrees)) / (np.max(degrees) - np.min(degrees))
    edge_usage_normalized = (edge_usage - np.min(edge_usage)) / (np.max(edge_usage) - np.min(edge_usage))
    
    # Introduce non-linear adjustments using a sigmoid function
    def sigmoid(x):
        return 1 / (1 + np.exp(-x))
    
    degree_adjustment = sigmoid(degrees_normalized - 0.5)
    usage_adjustment = sigmoid(edge_usage_normalized - 0.5)
    
    # Adjust based on distance, using a threshold-based approach
    distance_adjustment = np.where(distance_matrix > mean_distance + std_distance,
                                   -1,
                                   1)
    
    # Calculate the weight based on the above adjustments
    weight = (degree_adjustment / 2 +
              usage_adjustment / 2 +
              distance_adjustment)
    
    # Apply the weight to the edge distance
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                heuristic_matrix[i][j] = distance_matrix[i][j] * (1 + weight)
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
