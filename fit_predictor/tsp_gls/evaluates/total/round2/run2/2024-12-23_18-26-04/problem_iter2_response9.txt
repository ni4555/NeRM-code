```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate cumulative sums from each row and each column
    row_sums = np.cumsum(distance_matrix, axis=1)
    column_sums = np.cumsum(distance_matrix, axis=0)
    
    # Normalize the cumulative sums to get relative importance of each edge
    row_sums_normalized = row_sums / np.sum(row_sums)
    column_sums_normalized = column_sums / np.sum(column_sums)
    
    # Use the normalized sums to create a matrix that will penalize less important edges
    importance_matrix = row_sums_normalized * column_sums_normalized
    
    # Invert the importance matrix to make it "bad" to include edges
    bad_to_include_matrix = 1 - importance_matrix
    
    return bad_to_include_matrix
```
