```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each vertex
    num_vertices = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)

    # Calculate the sum of edge weights
    total_weight = np.sum(distance_matrix)

    # Adjust the distance matrix based on the usage frequency of each edge
    # Edges with lower degree and higher total usage get penalized
    adjusted_distances = distance_matrix + (np.log(degrees) - np.log(num_vertices)) * (total_weight / (num_vertices * np.sum(degrees)))

    # Ensure that the adjusted distances do not become negative
    adjusted_distances = np.maximum(adjusted_distances, 0)

    return adjusted_distances
```
