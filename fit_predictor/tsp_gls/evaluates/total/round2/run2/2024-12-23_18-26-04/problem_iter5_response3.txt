```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Normalize the data to avoid negative adjustments
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Normalize the node degrees
    min_degree = np.min(np.sum(distance_matrix, axis=1))
    max_degree = np.max(np.sum(distance_matrix, axis=1))
    normalized_degrees = (np.sum(distance_matrix, axis=1) - min_degree) / (max_degree - min_degree)
    
    # Introduce noise for exploration
    noise = np.random.normal(0, 0.01, size=distance_matrix.shape)
    
    # Use non-linear scaling for more nuanced adjustments
    # Adjust based on node degree
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                degree_adjustment = np.tanh(normalized_degrees[i] - normalized_degrees[j])
                
                # Adjust based on edge usage
                usage_adjustment = np.tanh(normalized_matrix[i, j])
                
                # Adjust based on distance, with a more nuanced adjustment to avoid local minima
                distance_adjustment = np.tanh(normalized_matrix[i, j] - 0.5)
                
                # Consider the interaction between nodes, encouraging diversity
                interaction = (np.sum(1 / np.maximum(1e-6, normalized_matrix[i, :])) + np.sum(1 / np.maximum(1e-6, normalized_matrix[:, j])) - 2) / 100
                interaction_adjustment = np.tanh(interaction)
                
                # Combine the adjustments with noise
                heuristic_matrix[i][j] = distance_matrix[i][j] * (1 + degree_adjustment + usage_adjustment + distance_adjustment + interaction_adjustment + noise[i][j])
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    # Adapt heuristics dynamically by balancing global vs. local adjustments
    # Introduce a global adjustment based on the average heuristic value
    global_adjustment = np.mean(heuristic_matrix) / np.mean(distance_matrix)
    heuristic_matrix *= global_adjustment
    
    # Prevent overfitting by smoothing the heuristic matrix
    smoothed_matrix = np.maximum(heuristic_matrix, np.mean(distance_matrix))
    
    return smoothed_matrix
```
