```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the average degree of all nodes
    average_degree = np.mean(degrees)
    
    # Adjust the heuristic values based on the degree of the node and the average degree
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                if degrees[i] > average_degree:
                    # Reward edges leading from high degree nodes
                    heuristic_matrix[i][j] = distance_matrix[i][j] / (1 + (degrees[i] - average_degree) / 10)
                elif degrees[j] > average_degree:
                    # Reward edges leading to high degree nodes
                    heuristic_matrix[i][j] = distance_matrix[i][j] / (1 + (average_degree - degrees[j]) / 10)
                else:
                    # Penalize edges between low degree nodes
                    heuristic_matrix[i][j] = distance_matrix[i][j] * (1 + (average_degree - degrees[i]) / 10)
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
