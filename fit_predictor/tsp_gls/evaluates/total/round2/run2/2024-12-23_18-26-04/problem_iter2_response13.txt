```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with the same values as the distance matrix
    heuristic_matrix = np.copy(distance_matrix)
    
    # Track the usage of each edge
    edge_usage = np.zeros_like(distance_matrix, dtype=int)
    
    # Calculate initial usage for each edge
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):
            edge_usage[i][j] += 1
            edge_usage[j][i] += 1
    
    # Adjust distances based on usage frequency
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):
            # Increase the distance if the edge is frequently used
            if edge_usage[i][j] > 1:
                heuristic_matrix[i][j] += distance_matrix[i][j] * 0.1 * edge_usage[i][j]
    
    # Iterate to refine the heuristic matrix
    for _ in range(10):  # Number of iterations can be tuned
        for i in range(distance_matrix.shape[0]):
            for j in range(i + 1, distance_matrix.shape[1]):
                # Calculate the average distance of the neighborhood excluding the current edge
                neighborhood_distances = np.delete(
                    np.delete(distance_matrix, i, axis=0),
                    j, axis=1
                )
                average_distance = np.mean(neighborhood_distances)
                
                # If the current edge distance is lower than the average neighborhood distance,
                # increase the edge distance
                if distance_matrix[i][j] < average_distance:
                    heuristic_matrix[i][j] += distance_matrix[i][j] * 0.1
    
    return heuristic_matrix
```
