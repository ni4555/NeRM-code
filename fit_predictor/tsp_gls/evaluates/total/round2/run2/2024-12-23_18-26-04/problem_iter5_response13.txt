```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the usage of each edge
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Calculate the mean and standard deviation of the distance matrix
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    
    # Normalize the usage of each edge to avoid bias towards heavily used edges
    edge_usage_normalized = edge_usage / np.max(edge_usage)
    
    # Normalize degrees to encourage more balanced tour diversity
    degrees_normalized = (degrees - np.min(degrees)) / (np.max(degrees) - np.min(degrees))
    
    # Add noise for exploration
    noise = np.random.normal(0, 0.1, distance_matrix.shape)
    
    # Introduce non-linear scaling to make large distances more influential
    distance_adjustment = np.exp(-((distance_matrix - mean_distance) / std_distance) ** 2)
    
    # Prevent overfitting by limiting the maximum heuristic value
    max_adjustment = 10
    heuristic_adjustments = np.clip(
        (distance_adjustment + 
         degrees_normalized * 0.1 + 
         edge_usage_normalized * 0.1 + 
         (1 / np.maximum(1e-6, distance_matrix)) * 0.1 +
         noise),
        -max_adjustment,
        max_adjustment
    )
    
    # Adapt heuristics dynamically based on the interaction of the nodes
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                heuristic_matrix[i][j] = distance_matrix[i][j] + heuristic_adjustments[i][j]
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
