```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    degrees = np.sum(distance_matrix, axis=1)

    for i in range(n):
        for j in range(i+1, n):
            edge_usage_count = np.sum((distance_matrix == distance_matrix[i, j])[i:j])
            min_cycle_distance = 0
            current_node = i
            stack = [j]

            while stack:
                next_node = min(stack, key=lambda x: distance_matrix[current_node, x])
                if distance_matrix[current_node, next_node] != 0:
                    min_cycle_distance += distance_matrix[current_node, next_node]
                    current_node = next_node
                    stack.remove(next_node)
                else:
                    break

            if min_cycle_distance > 0:
                ratio = edge_usage_count * min_cycle_distance / distance_matrix[i, j]
                heuristic_matrix[i][j] = distance_matrix[i][j] * (1 + ratio / 10)
                heuristic_matrix[j][i] = distance_matrix[j][i] * (1 - ratio / 10)
    
    np.fill_diagonal(heuristic_matrix, np.inf)
    return heuristic_matrix
```
