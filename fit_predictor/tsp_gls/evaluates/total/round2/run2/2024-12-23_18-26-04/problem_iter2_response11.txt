```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    centralities = np.sum(distance_matrix ** 2, axis=1) / num_vertices
    avg_centralities = np.mean(centralities)

    # Calculate the usage score for each edge
    usage_score = 1 / (1 + centralities)
    
    # Calculate the adjustment based on vertex degree and usage score
    adjustment = np.log(1 + (num_vertices - degrees) / degrees) * usage_score

    # Adjust edge distances
    adjusted_distances = distance_matrix * (1 + adjustment)

    # Ensure that the adjusted distances do not become negative
    adjusted_distances = np.maximum(adjusted_distances, 0)

    return adjusted_distances
```
