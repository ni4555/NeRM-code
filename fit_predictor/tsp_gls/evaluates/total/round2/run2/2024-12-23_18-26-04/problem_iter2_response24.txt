```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    np.fill_diagonal(usage_matrix, np.inf)  # Diagonal edges are not used in the TSP

    # Calculate the current tour usage
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            usage_matrix[i, j] = usage_matrix[j, i] = (usage_matrix[i, j] + 1) / 2

    # Calculate the total distance of the current tour
    total_distance = np.sum(distance_matrix) / 2

    # Adjust edge distances based on usage, length, and a penalty for high total distance
    adjusted_distances = distance_matrix
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Increase the distance of the edge if it is highly used, if it is a long edge, or if the total distance is high
            adjusted_distances[i, j] = adjusted_distances[j, i] = distance_matrix[i, j] * (
                1 + 0.1 * (1 / usage_matrix[i, j] - 1) + 0.1 * (distance_matrix[i, j] / total_distance - 1))

    return adjusted_distances
```
