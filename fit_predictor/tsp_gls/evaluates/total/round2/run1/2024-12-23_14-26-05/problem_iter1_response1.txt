```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Introduce a penalty factor based on edge usage
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix[i])):
            if i != j:
                usage_matrix[i][j] = np.exp(-np.mean(distance_matrix[i][j]))

    # Introduce a bonus for edges with higher average distance in the used ones
    used_edges = usage_matrix.sum()
    bonus_factor = np.sum(distance_matrix) / used_edges
    bonus_matrix = bonus_factor * usage_matrix

    # Combine penalties and bonuses into a heuristic
    heuristic_matrix = bonus_matrix + (1 - bonus_matrix)

    return heuristic_matrix
```
