```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Introduce a penalty factor based on edge usage
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix[i])):
            if i != j:
                usage_matrix[i][j] = np.exp(-np.mean(distance_matrix[i][j]))
    
    # Introduce a bonus factor for edges not used frequently
    num_edges = distance_matrix.size
    min_usage = np.min(usage_matrix)
    bonus_matrix = np.exp((min_usage - usage_matrix) / min_usage)
    
    # Combine penalties and bonuses into a heuristic
    heuristic_matrix = usage_matrix * bonus_matrix

    # Normalize the heuristic matrix to maintain the sum of distances
    total_heuristic = np.sum(heuristic_matrix)
    heuristic_matrix = heuristic_matrix / total_heuristic

    return heuristic_matrix
```
