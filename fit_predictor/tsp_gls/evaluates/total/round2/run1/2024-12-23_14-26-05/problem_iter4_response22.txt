```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the betweenness centrality for each edge
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for k in range(distance_matrix.shape[0]):
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[0]):
                if distance_matrix[i, j] != 0:
                    betweenness_centrality[i, j] += (distance_matrix[i, k] * distance_matrix[k, j]) / (np.sum(distance_matrix[k, :] != 0))
    
    # Normalize the betweenness centrality
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    # Calculate edge usage
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                edge_usage[i, j] = np.sum(np.isin([i, j], np.argwhere(distance_matrix[i] < distance_matrix).flatten())) * betweenness_centrality[i, j]
    
    # Initialize a penalty and bonus factor
    penalty_factor = 0.1
    bonus_factor = 0.1

    # Calculate heuristic based on a weighted combination of usage and betweenness centrality
    heuristic_matrix = penalty_factor * edge_usage + (1 - penalty_factor) * (1 - betweenness_centrality)

    # Introduce mutation to maintain diversity and avoid local minima
    mutation_strength = 0.05
    mutation_indices = np.random.choice(range(distance_matrix.shape[0]), size=int(distance_matrix.shape[0] * mutation_strength), replace=False)
    mutation_indices = np.random.choice(mutation_indices, size=int(distance_matrix.shape[0] * mutation_strength / 2), replace=False)
    for i in mutation_indices:
        j = np.random.randint(0, distance_matrix.shape[0])
        heuristic_matrix[i, j] = np.random.rand()  # Mutation: randomize the distance
    
    return heuristic_matrix
```
