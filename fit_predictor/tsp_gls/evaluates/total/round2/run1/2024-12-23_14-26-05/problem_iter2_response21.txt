```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Introduce a penalty factor based on edge usage with exponential decay
    penalty_factor = np.exp(-np.mean(distance_matrix))
    
    # Initialize a matrix with the same shape as the distance matrix
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the initial usage by summing the row-wise and column-wise distances
    for i in range(distance_matrix.shape[0]):
        usage_matrix[i, :] = np.sum(distance_matrix[i, :])
        usage_matrix[:, i] = np.sum(distance_matrix[:, i])
    
    # Calculate the normalized usage for each edge
    normalized_usage = usage_matrix / np.sum(usage_matrix)
    
    # Apply the penalty factor to the normalized usage
    penalized_usage = normalized_usage * penalty_factor
    
    # Introduce a bonus for less-used edges
    bonus = 1 - penalized_usage
    
    # Combine penalties and bonuses into a heuristic
    heuristic_matrix = bonus

    return heuristic_matrix
```
