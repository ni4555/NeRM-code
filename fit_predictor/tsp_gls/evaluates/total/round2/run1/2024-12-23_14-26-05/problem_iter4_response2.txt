```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Normalize the degrees to get a probability distribution
    probabilities = degrees / np.sum(degrees)
    
    # Adjust the probabilities based on centrality to avoid local minima
    centrality_adjusted_probabilities = probabilities * (1 + 0.1 * np.log(1 + degrees))
    
    # Create a new distance matrix based on the adjusted probabilities
    new_distance_matrix = np.outer(centrality_adjusted_probabilities, centrality_adjusted_probabilities) * distance_matrix
    
    # Add a small constant to avoid zero distances
    epsilon = 1e-10
    new_distance_matrix = np.where(new_distance_matrix == 0, epsilon, new_distance_matrix)
    
    # Normalize the new distance matrix to keep the sum of distances constant
    total_distance = np.sum(new_distance_matrix)
    new_distance_matrix = new_distance_matrix / total_distance
    
    # Adjust distances to penalize frequently used edges more
    usage_frequency = np.sum(distance_matrix, axis=1)
    adjusted_probabilities = centrality_adjusted_probabilities * (1 - 0.1 * usage_frequency / np.sum(usage_frequency))
    
    # Create a final adjusted distance matrix
    final_distance_matrix = np.outer(adjusted_probabilities, adjusted_probabilities) * new_distance_matrix
    
    # Add a small constant to avoid zero distances
    final_distance_matrix = np.where(final_distance_matrix == 0, epsilon, final_distance_matrix)
    
    # Normalize the final distance matrix to keep the sum of distances constant
    final_total_distance = np.sum(final_distance_matrix)
    final_distance_matrix = final_distance_matrix / final_total_distance
    
    return final_distance_matrix
```
