```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the initial usage by summing the row-wise and column-wise distances
    for i in range(distance_matrix.shape[0]):
        usage_matrix[i, :] = np.sum(distance_matrix[i, :])
        usage_matrix[:, i] = np.sum(distance_matrix[:, i])
    
    # Calculate the average distance for each edge
    average_distance = np.sum(distance_matrix) / np.count_nonzero(distance_matrix)
    
    # Introduce a non-linear penalty for frequent edges based on exponential decay
    penalty_factor = np.exp(-0.1 * usage_matrix)
    
    # Introduce a bonus for edges with a distance higher than the average
    bonus_factor = (distance_matrix > average_distance) * penalty_factor
    
    # Adjust the bonus to ensure it does not dominate the penalty
    bonus_factor = bonus_factor / np.sum(bonus_factor)
    
    # Combine penalties and bonuses into a heuristic
    heuristic_matrix = (1 - penalty_factor) + bonus_factor

    return heuristic_matrix
```
