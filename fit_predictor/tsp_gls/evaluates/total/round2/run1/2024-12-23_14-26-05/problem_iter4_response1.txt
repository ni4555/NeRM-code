```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Introduce a non-linear penalty factor based on edge usage
    usage_matrix = np.zeros_like(distance_matrix, dtype=np.float64)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                usage_matrix[i][j] = 1 / (1 + np.exp(-np.mean(distance_matrix[i][j])))

    # Calculate the penalty for highly used edges
    usage_penalty = np.sum(usage_matrix) / (distance_matrix.shape[0] * distance_matrix.shape[1])

    # Introduce a bonus for edges with higher average distance in the used ones
    used_edges = usage_matrix.sum()
    if used_edges > 0:
        bonus_factor = np.sum(distance_matrix) / used_edges
    else:
        bonus_factor = 0
    bonus_matrix = bonus_factor * usage_matrix

    # Encourage exploration by increasing the distance of less used edges
    bonus_matrix[usage_matrix < usage_penalty] *= 2

    # Integrate penalties and bonuses into a heuristic
    heuristic_matrix = bonus_matrix + (1 - bonus_matrix)

    # Add a global exploration factor to avoid local minima
    global_exploration = 0.1
    heuristic_matrix *= (1 + global_exploration * np.random.rand(*heuristic_matrix.shape))

    # Avoid uniform scaling with distance metrics
    heuristic_matrix /= np.max(heuristic_matrix)

    return heuristic_matrix
```
