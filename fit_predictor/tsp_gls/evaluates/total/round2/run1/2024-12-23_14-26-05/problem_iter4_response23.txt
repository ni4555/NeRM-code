```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Introduce edge usage and edge interaction factors
    usage_matrix = np.zeros_like(distance_matrix)
    interaction_matrix = np.zeros_like(distance_matrix)
    
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                # Edge usage factor: more used edges are penalized
                usage_matrix[i][j] = np.exp(-np.mean(distance_matrix[i][j]))
                
                # Edge interaction factor: less used edges are more likely to be penalized if they are adjacent to highly used edges
                interaction_factor = np.mean(distance_matrix[i, :].sum() + distance_matrix[:, j].sum())
                interaction_matrix[i][j] = np.exp(-interaction_factor)
    
    # Combine usage and interaction factors
    combined_factor = usage_matrix + interaction_matrix
    
    # Introduce a bonus for edges with higher average distance in the used ones
    used_edges = combined_factor.sum()
    bonus_factor = np.sum(distance_matrix) / used_edges
    bonus_matrix = bonus_factor * combined_factor
    
    # Introduce a non-linear adjustment for edge lengths based on degrees and betweenness centrality
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for k in range(distance_matrix.shape[0]):
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[0]):
                if distance_matrix[i, j] != 0:
                    betweenness_centrality[i, j] += (distance_matrix[i, k] * distance_matrix[k, j]) / (np.sum(distance_matrix[k, :] != 0))
    
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    non_linear_adjustment = (1 + np.log(degrees + 1)) * betweenness_centrality
    
    # Combine the heuristic with non-linear adjustments
    heuristic_matrix = bonus_matrix + (1 - bonus_matrix) * non_linear_adjustment
    
    return heuristic_matrix
```
