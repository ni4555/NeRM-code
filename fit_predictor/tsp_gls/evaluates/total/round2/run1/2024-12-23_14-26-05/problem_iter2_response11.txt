```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    
    # Calculate the usage frequency of each edge
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            usage_frequency[i, j] = np.sum(distance_matrix[i] * distance_matrix[:, j])
    
    # Normalize the usage frequency
    max_frequency = np.max(usage_frequency)
    if max_frequency == 0:
        return distance_matrix
    
    usage_frequency /= max_frequency
    
    # Adjust the distance matrix based on the normalized usage frequency
    adjusted_distances = distance_matrix.copy()
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            adjusted_distances[i, j] *= (1 + 0.1 * (1 - usage_frequency[i, j]))
    
    # Return the adjusted distances as the heuristics indicator
    return adjusted_distances
```
