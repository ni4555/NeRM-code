```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to store the usage count of each edge
    usage_matrix = np.zeros_like(distance_matrix, dtype=int)
    
    # Simulate some usage of the edges
    np.random.shuffle(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):
            usage_matrix[i, j] += 1
            usage_matrix[j, i] += 1
    
    # Adjust the distance matrix based on the usage of each edge
    adjusted_distance_matrix = distance_matrix.copy()
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[1]):
            if i != j:
                # Use the usage metric as a factor to adjust the distance
                # Avoid uniform scaling by considering the standard deviation of the distances
                if usage_matrix[i, j] > 0:
                    adjusted_distance_matrix[i, j] += (adjusted_distance_matrix[i, j] * 0.1 * usage_matrix[i, j] /
                                                       np.std(distance_matrix) + 0.1 * np.random.rand())
    
    # Return the adjusted distance matrix
    return adjusted_distance_matrix
```
