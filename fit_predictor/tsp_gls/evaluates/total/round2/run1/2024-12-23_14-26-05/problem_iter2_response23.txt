```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a new distance matrix with the same shape as the input
    new_distance_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the average distance for each node
    average_distances = np.sum(distance_matrix, axis=1) / (degrees + 1e-10)
    
    # Adjust the distances based on the degree and average distance
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix[i])):
            # If the edge is not used or is a self-loop, set the distance to infinity
            if i == j or degrees[i] == 0 or degrees[j] == 0:
                new_distance_matrix[i][j] = float('inf')
            else:
                # Use a weighted average where the weight is the inverse of the degree
                new_distance_matrix[i][j] = (1 - degrees[i] / np.sum(degrees)) * average_distances[i] + \
                                            (degrees[i] / np.sum(degrees)) * average_distances[j]
    
    return new_distance_matrix
```
