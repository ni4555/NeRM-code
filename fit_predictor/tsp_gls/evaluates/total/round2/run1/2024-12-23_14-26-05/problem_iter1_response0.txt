```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use edge usage as a heuristic: more used edges are more likely to be part of the optimal path
    # Assuming that the matrix is symmetric for simplicity
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i, distance_matrix.shape[1]):
            edge_usage[i, j] += np.sum(np.isin([i, j], np.argwhere(distance_matrix[i] < distance_matrix).flatten()))
    return edge_usage
```
