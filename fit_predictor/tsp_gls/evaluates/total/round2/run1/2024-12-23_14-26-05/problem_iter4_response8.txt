```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the betweenness centrality for each edge
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for k in range(distance_matrix.shape[0]):
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[0]):
                if distance_matrix[i, j] != 0:
                    betweenness_centrality[i, j] += (distance_matrix[i, k] * distance_matrix[k, j]) / (np.sum(distance_matrix[k, :] != 0))
    
    # Normalize the betweenness centrality
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    # Introduce a penalty factor based on edge usage
    usage_matrix = np.zeros_like(distance_matrix)
    num_edges = distance_matrix.size
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix[i])):
            if i != j:
                usage_matrix[i][j] = np.exp(-np.mean(distance_matrix[i][j]))
    
    # Introduce a bonus factor for edges not used frequently
    min_usage = np.min(usage_matrix)
    bonus_matrix = np.exp((min_usage - usage_matrix) / min_usage)
    
    # Combine penalties and bonuses into a heuristic
    heuristic_matrix = usage_matrix * bonus_matrix
    
    # Adjust the distance matrix based on the heuristic
    adjusted_distance_matrix = distance_matrix.copy()
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            adjusted_distance_matrix[i, j] *= (1 - betweenness_centrality[i, j] * heuristic_matrix[i, j])
    
    # Introduce mutation to avoid local minima
    mutation_strength = 0.1
    mutation_indices = np.random.choice(range(distance_matrix.shape[0]), size=2, replace=False)
    adjusted_distance_matrix[mutation_indices[0], mutation_indices[1]] += np.random.normal(0, mutation_strength)
    adjusted_distance_matrix[mutation_indices[1], mutation_indices[0]] += np.random.normal(0, mutation_strength)
    
    # Ensure that the adjusted distances are within a valid range
    adjusted_distance_matrix = np.clip(adjusted_distance_matrix, 0, np.inf)
    
    return adjusted_distance_matrix
```
