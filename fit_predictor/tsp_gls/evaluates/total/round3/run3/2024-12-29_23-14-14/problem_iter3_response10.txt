```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a matrix to store the badness of including each edge
    badness_matrix = np.zeros_like(distance_matrix)
    
    # Add a penalty for edges that are part of the local optimal route
    local_optimal_penalty = np.where(distance_matrix == np.min(distance_matrix), 2, 1)
    badness_matrix += local_optimal_penalty
    
    # Add a diversity measure to encourage different paths
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                neighbors = distance_matrix[i]
                neighbors[i] = 0  # Exclude the edge itself
                diversity = 1 / (1 + np.linalg.norm(neighbors - distance_matrix[i, j]))
                badness_matrix[i, j] += diversity
    
    # Normalize the badness values
    badness_matrix /= badness_matrix.max()
    
    return badness_matrix
```
