```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, local_optimal_route: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    penalty_factor = np.zeros(distance_matrix.shape)
    local_optimal_edges = list(zip(local_optimal_route[:-1], local_optimal_route[1:]))
    
    # Apply a higher penalty for long edges that are not part of the local optimal route
    for i in range(num_vertices):
        for j in range(num_vertices):
            if (i, j) not in local_optimal_edges and distance_matrix[i, j] > 100:
                penalty_factor[i, j] = 100

    # Apply a bonus to edges that are part of the local optimal route
    for i, j in local_optimal_edges:
        penalty_factor[i, j] = -10  # Negative penalty to represent bonus

    return distance_matrix + penalty_factor
```
