```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the standard deviation for each edge's neighbors
    neighbors_std = (distance_matrix[:, :-1].std(axis=1) +
                     distance_matrix[:, 1:].std(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # Calculate the penalty for edges that are part of the local optimal route
    local_optimal_penalty = np.where(distance_matrix == np.min(distance_matrix), 2, 1)
    
    # Combine the deviation-based measure with the local optimal penalty
    combined_score = deviations * (1 + neighbors_std) * local_optimal_penalty
    
    # Normalize the combined scores to ensure they are within the range of [0, 1]
    combined_score = (combined_score - combined_score.min()) / (combined_score.max() - combined_score.min())
    
    return combined_score
```
