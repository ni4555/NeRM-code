```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total perimeter of the current local optimal route
    total_perimeter = np.sum(distance_matrix[local_optimal_route[:-1], local_optimal_route[1:]])
    
    # For each edge in the distance matrix, estimate its cost based on the average perimeter of the optimal route
    # If the edge cost is more than the average, it's considered a candidate for improvement
    avg_cost = total_perimeter / (len(local_optimal_route) - 1)
    heuristic_matrix = distance_matrix.copy()
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                if distance_matrix[i, j] > avg_cost:
                    heuristic_matrix[i, j] = 2 * avg_cost  # Arbitrary high cost
                else:
                    heuristic_matrix[i, j] = distance_matrix[i, j]
    
    return heuristic_matrix
```
