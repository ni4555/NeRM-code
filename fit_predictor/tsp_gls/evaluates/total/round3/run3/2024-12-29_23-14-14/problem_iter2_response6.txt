```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, local_optimal_route: np.ndarray) -> np.ndarray:
    # Introduce a penalty for edges that are close to being a local optimum
    # Calculate the minimum distance from each edge to the local optimum route
    min_distance = np.min(distance_matrix, axis=0)
    min_distance_from_row = np.min(distance_matrix, axis=1)
    
    # Calculate the distance of each edge to the local optimal route
    edge_to_route_distance = np.abs(np.sum(distance_matrix == local_optimal_route, axis=1) - 2)
    
    # Create a heuristic based on the distance from the local optimum
    heuristic_matrix = np.where(distance_matrix == min_distance, 
                                0, 
                                np.where(distance_matrix == min_distance_from_row, 
                                         1, 
                                         np.where(edge_to_route_distance < min_distance, 
                                                  2, 
                                                  3)))
    
    # Apply a penalty to longer edges, making them less attractive
    penalty = heuristic_matrix * (distance_matrix / np.min(distance_matrix))
    
    # Additional heuristic: encourage edges that connect nodes not yet in the route
    not_in_route_penalty = np.ones_like(distance_matrix)
    not_in_route_penalty[local_optimal_route] = 0
    penalty += not_in_route_penalty * (distance_matrix / np.min(distance_matrix))
    
    return penalty
```
