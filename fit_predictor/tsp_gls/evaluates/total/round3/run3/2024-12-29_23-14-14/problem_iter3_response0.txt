```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # It's bad to include edges that are significantly longer than their neighboring edges
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # To encourage diversification, add a penalty for edges that are close to their neighbors' mean
    penalties = (1 - deviations) * np.where(deviations < 0.5, 1, 0)
    
    # Normalize the penalties to ensure they are within the range of [0, 1]
    penalties = penalties / penalties.max()
    
    # Combine the deviations and penalties to create a composite "badness" measure
    badness = deviations + penalties
    
    # Return a matrix where the value indicates how bad it is to include each edge
    return badness
```
