```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the prior indicators matrix with zeros
    prior_indicators = np.zeros_like(distance_matrix)

    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the standard deviation of the distances for each edge's neighbors
    neighbors_std = (distance_matrix[:, :-1].std(axis=1) +
                      distance_matrix[:, 1:].std(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Normalize the deviations to ensure they are within the range of [0, 1]
    deviations = (deviations - deviations.min()) / (deviations.max() - deviations.min())

    # Incorporate the standard deviation to measure the spread of distances
    # Higher spread (larger std) suggests a more diverse neighborhood
    diversity_score = 1 / (1 + neighbors_std)

    # Combine deviation and diversity into a single heuristic score
    heuristic_score = deviations * diversity_score

    # Contextual info: penalize edges that are part of the current route
    current_route_edges = np.ones(distance_matrix.shape, dtype=bool)
    for i in range(len(distance_matrix)):
        current_route_edges[i, i] = False
        for j in range(i + 1, len(distance_matrix)):
            current_route_edges[i, j] = False
            current_route_edges[j, i] = False
    heuristic_score[current_route_edges] *= 1.5  # Increase penalty

    # Normalize the heuristic score to maintain the same scale as the original matrix
    max_heuristic_score = np.max(heuristic_score)
    normalized_score = heuristic_score / max_heuristic_score

    # Update the prior indicators matrix with the calculated normalized score
    prior_indicators = normalized_score

    return prior_indicators
```
