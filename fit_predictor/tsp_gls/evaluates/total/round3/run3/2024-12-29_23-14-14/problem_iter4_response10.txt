```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    local_optimal_penalty = 100
    average_distance_bonus = 10
    diversity_bonus = 5

    # Initialize the heuristics matrix
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)

    # Calculate the average distance to the nearest neighbor for each edge
    average_distance = np.mean(distance_matrix, axis=1)

    # Calculate diversity score for each edge
    diversity_score = np.where(np.max(distance_matrix, axis=1) == distance_matrix, 1, 0)

    # Apply penalties and bonuses
    heuristics_matrix[distance_matrix > local_optimal_penalty] = local_optimal_penalty
    heuristics_matrix[distance_matrix <= local_optimal_penalty] = -np.where(distance_matrix <= average_distance_bonus, average_distance_bonus - distance_matrix, local_optimal_penalty - distance_matrix)

    # Add bonus for short average distance to the nearest neighbor
    heuristics_matrix += average_distance_bonus * (min_distance_to_neighbor <= average_distance_bonus)

    # Add diversity bonus for edges with high diversity score
    heuristics_matrix += diversity_bonus * diversity_score

    # Normalize the heuristics matrix to maintain the same scale as the original matrix
    max_heuristics = np.max(heuristics_matrix)
    heuristics_matrix = heuristics_matrix / max_heuristics

    return heuristics_matrix
```
