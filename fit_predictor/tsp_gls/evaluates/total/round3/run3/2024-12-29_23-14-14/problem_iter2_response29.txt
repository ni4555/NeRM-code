```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Calculate the average distance of the distance matrix
    avg_distance = np.mean(distance_matrix)
    
    # Calculate the standard deviation of the distance matrix
    std_distance = np.std(distance_matrix)
    
    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)
    
    # Calculate the maximum distance to the nearest neighbor for each edge
    max_distance_to_neighbor = np.max(distance_matrix, axis=1)
    
    # Define a factor to balance the influence of the average and standard deviation
    balance_factor = 0.5
    
    # Combine the edge length with the average and standard deviation to the nearest neighbor distance
    combined_weight = (distance_matrix - avg_distance) + (std_distance * balance_factor) + (min_distance_to_neighbor / max_distance_to_neighbor)
    
    # Normalize the combined weight to maintain the same scale as the original matrix
    max_combined_weight = np.max(combined_weight)
    normalized_weight = combined_weight / max_combined_weight
    
    # The heuristic returns a matrix with values indicating how bad it is to include each edge
    return normalized_weight
```
