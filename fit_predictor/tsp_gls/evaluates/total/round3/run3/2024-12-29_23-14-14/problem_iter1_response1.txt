```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic penalizes longer edges and favors shorter edges, but also takes into account the
    # average distance to the nearest neighbor to avoid being trapped in local optima.
    
    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)
    
    # Combine the edge length with the nearest neighbor distance
    combined_weight = distance_matrix + (min_distance_to_neighbor / np.max(min_distance_to_neighbor))
    
    # Normalize the combined weight to maintain the same scale as the original matrix
    max_combined_weight = np.max(combined_weight)
    normalized_weight = combined_weight / max_combined_weight
    
    # The heuristic returns a matrix with values indicating how bad it is to include each edge
    return normalized_weight
```
