```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the mean distance for each edge's neighbors
    neighbors_mean = (distance_matrix[:, :-1].mean(axis=1) +
                      distance_matrix[:, 1:].mean(axis=1)) / 2
    
    # Calculate the deviation from the mean for each edge
    deviations = distance_matrix - neighbors_mean
    
    # Calculate the degrees of vertices to identify vertices with high connectivity
    degrees = np.sum(distance_matrix, axis=0)
    
    # It's bad to include edges that are significantly longer than their neighboring edges
    deviation_penalty = (deviations - deviations.min()) / (deviations.max() - deviations.min())
    
    # It's also bad to include edges connected to highly connected vertices
    degree_penalty = (degrees - degrees.min()) / (degrees.max() - degrees.min())
    
    # Add a connectivity penalty to edges that connect vertices that are already highly connected
    connectivity_penalty = np.where(degrees > np.median(degrees), 1, 0)
    
    # Combine the penalties to create a composite "badness" measure
    combined_penalties = deviation_penalty + degree_penalty * connectivity_penalty
    
    # Normalize the combined penalties to ensure they are within the range of [0, 1]
    combined_penalties = combined_penalties / combined_penalties.max()
    
    # Return a matrix where the value indicates how bad it is to include each edge
    return combined_penalties
```
