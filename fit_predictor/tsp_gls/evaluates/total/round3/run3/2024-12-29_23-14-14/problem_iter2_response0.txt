```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Incorporate local neighbor information to avoid local optima
    # Calculate the minimum distance to the nearest neighbor for each edge
    min_distance_to_neighbor = np.min(distance_matrix, axis=1)
    
    # Calculate the second minimum distance to the nearest neighbor for each edge
    # This helps to avoid choosing the edge with the nearest neighbor that leads to a local optimum
    second_min_distance_to_neighbor = np.partition(distance_matrix, 1, axis=1)[:, 1]
    
    # Combine edge length with the second minimum distance to the nearest neighbor
    combined_weight = distance_matrix + (second_min_distance_to_neighbor / np.max(second_min_distance_to_neighbor))
    
    # Normalize the combined weight to maintain the same scale as the original matrix
    max_combined_weight = np.max(combined_weight)
    normalized_weight = combined_weight / max_combined_weight
    
    # Return a matrix with values indicating how bad it is to include each edge
    return -normalized_weight
```
