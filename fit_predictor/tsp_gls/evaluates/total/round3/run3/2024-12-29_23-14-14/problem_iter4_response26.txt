```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    prior_indicators = np.zeros_like(distance_matrix)

    # Calculate the average distance to the nearest neighbors for each edge
    avg_neighbor_distances = np.mean(distance_matrix, axis=1)

    # Calculate the diversity score for each edge
    diversity_scores = np.where(np.max(distance_matrix, axis=1) == distance_matrix, 1, 0)

    # Calculate the penalty based on the distance to the nearest neighbors
    local_optimal_penalty = 100
    min_avg_neighbor_distance = np.min(avg_neighbor_distances)
    distance_penalties = np.where(avg_neighbor_distances < min_avg_neighbor_distance,
                                  local_optimal_penalty - (avg_neighbor_distances - min_avg_neighbor_distance),
                                  0)

    # Calculate bonuses for diverse edges
    diversity_bonus = 5
    diversity_bonuses = diversity_bonus * diversity_scores

    # Combine penalties and bonuses
    prior_indicators = distance_penalties + diversity_bonuses

    # Normalize the prior indicators matrix
    prior_indicators = (prior_indicators - prior_indicators.min()) / (prior_indicators.max() - prior_indicators.min())

    return prior_indicators
```
