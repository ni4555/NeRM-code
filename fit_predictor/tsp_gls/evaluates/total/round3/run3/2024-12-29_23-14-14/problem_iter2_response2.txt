```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, local_optimal_route: np.ndarray) -> np.ndarray:
    # Calculate the average distance of the adjacent vertices
    row_avg = np.mean(distance_matrix, axis=1)
    col_avg = np.mean(distance_matrix, axis=0)

    # Create a penalty factor based on the distance matrix
    penalty_factor = -distance_matrix

    # Identify edges that are part of the local optimal route and increase their penalties
    for i in range(len(local_optimal_route) - 1):
        edge = (local_optimal_route[i], local_optimal_route[i + 1])
        if edge[0] < distance_matrix.shape[0] and edge[1] < distance_matrix.shape[1]:
            penalty_factor[edge] += 10

    # Incorporate adjacency averages into the penalty factor
    penalty_factor += 0.1 * row_avg + 0.1 * col_avg

    # Ensure that penalties do not become negative
    penalty_factor = np.maximum(penalty_factor, 0)

    return penalty_factor
```
