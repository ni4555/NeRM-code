```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic uses the distance matrix to estimate the likelihood of an edge being part of the optimal tour.
    # It considers the relative distances between nodes, avoiding simplistic uniform heuristics.
    # The heuristic is based on the ratio of the current edge weight to the median edge weight in the matrix.
    median_distance = np.median(distance_matrix)
    # The heuristic value is the ratio of the edge weight to the median, scaled by a factor to make it binary.
    return np.where(distance_matrix / median_distance > 1.5, 1, 0)
```
