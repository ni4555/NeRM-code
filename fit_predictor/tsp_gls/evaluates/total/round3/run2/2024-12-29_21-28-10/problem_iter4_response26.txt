```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Calculate minimum distances to nearest and second nearest neighbors for each node
    for i in range(num_nodes):
        distances = np.sort(distance_matrix[i, :])  # Sort distances to all other nodes
        if num_nodes > 2:
            # Exclude self-loop from the second nearest calculation
            second_nearest = distances[2]
        else:
            # If there's only one other node, set the second nearest as infinity
            second_nearest = float('inf')
        
        # Calculate heuristic value based on the distance difference
        for j in range(num_nodes):
            if i != j:
                edge_distance = distance_matrix[i, j]
                if edge_distance <= second_nearest:
                    # If the edge is closer than the second nearest neighbor,
                    # it's potentially better to take this edge
                    heuristics[i, j] = second_nearest - edge_distance
                else:
                    # If the edge is not closer, the heuristic is negative (penalty)
                    heuristics[i, j] = -1 * (edge_distance - second_nearest)

    # Exclude the diagonal (self-loops) and any non-existent edges
    np.fill_diagonal(heuristics, np.inf)
    heuristics[heuristics < 0] = 0

    return heuristics
```
