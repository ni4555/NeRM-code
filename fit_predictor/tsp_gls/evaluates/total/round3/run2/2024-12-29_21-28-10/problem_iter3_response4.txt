```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Calculate the mean distance to the nearest neighbors
                mean_dist = (min_dist_i + min_dist_j) / 2
                
                # Apply a balance between the edge distance and the mean distance
                heuristics[i, j] = distance_matrix[i, j] - mean_dist
                
                # Adapt to problem structure by adding a term that encourages larger differences
                # between the current edge and the mean distance for edges that are longer than average
                edge_diff = abs(distance_matrix[i, j] - mean_dist)
                heuristics[i, j] += (edge_diff / np.mean(distance_matrix))

    return heuristics
```
