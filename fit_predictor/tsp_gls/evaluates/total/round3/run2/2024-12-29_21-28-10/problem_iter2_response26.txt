```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a diagonal matrix of node distances
    node_distances = np.diag(np.min(distance_matrix, axis=1))
    
    # Calculate the pairwise differences between the node distances
    pairwise_differences = np.abs(np.diff(node_distances))
    
    # The heuristic value for each edge is a function of the pairwise differences
    # This heuristic encourages the selection of edges that bridge significant gaps in node distances
    heuristic_values = pairwise_differences / np.sum(pairwise_differences)
    
    # Create a mask of zeros and ones where 1 indicates a larger gap than the average gap
    gap_mask = np.where(heuristic_values > 1, 1, 0)
    
    # Return the heuristic values shaped to match the input distance matrix
    return gap_mask[:, np.newaxis] * np.abs(distance_matrix)
```
