```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance of all edges
    average_distance = np.mean(distance_matrix)
    
    # Heuristic: Consider edges that are significantly longer than the average as "bad"
    # We use a threshold to avoid very long edges
    threshold = average_distance * 1.5
    bad_edges = distance_matrix > threshold
    
    # Create a matrix with a high penalty for bad edges
    heuristics_matrix = distance_matrix.copy()
    heuristics_matrix[bad_edges] = np.inf
    
    # Normalize the matrix to ensure all values are between 0 and 1
    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    
    return heuristics_matrix
```
