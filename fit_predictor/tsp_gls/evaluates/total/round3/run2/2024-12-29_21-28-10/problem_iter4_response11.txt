```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the average distance from each node to all other nodes
    average_distances = np.mean(distance_matrix, axis=1)
    
    # For each node, calculate the heuristic value as the sum of the distances to all other nodes
    # minus the average distance to the next nearest neighbors
    for i in range(num_nodes):
        distances_to_neighbors = np.argsort(distance_matrix[i, :])[:3]  # Get the top 3 distances
        distances_to_neighbors = distances_to_neighbors[distances_to_neighbors != i]  # Exclude self-loop
        next_nearest_neighbors_distances = distance_matrix[i, distances_to_neighbors] - average_distances[i]
        next_nearest_neighbors_distances = np.sort(next_nearest_neighbors_distances)
        
        # The heuristic value is the sum of the distances to the next nearest neighbors minus the average distance
        heuristics[i, distances_to_neighbors] = next_nearest_neighbors_distances[1] + next_nearest_neighbors_distances[2] - average_distances[i]
    
    # Exclude the diagonal (self-loops) and any non-existent edges
    np.fill_diagonal(heuristics, np.inf)
    heuristics[heuristics < 0] = 0

    return heuristics
```
