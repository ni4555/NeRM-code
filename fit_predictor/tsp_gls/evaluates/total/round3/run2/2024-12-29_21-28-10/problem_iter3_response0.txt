```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Calculate the average of the minimum distances
                avg_min_dist = (min_dist_i + min_dist_j) / 2
                
                # Define a threshold based on the average minimum distance
                threshold = avg_min_dist * 0.9
                
                # Assign a heuristic value based on how much the edge's distance
                # deviates from the threshold, favoring edges closer to the threshold
                heuristics[i, j] = distance_matrix[i, j] - threshold
                # Clamp the heuristic value between 0 and a positive value
                heuristics[i, j] = np.clip(heuristics[i, j], 0, threshold)

    return heuristics
```
