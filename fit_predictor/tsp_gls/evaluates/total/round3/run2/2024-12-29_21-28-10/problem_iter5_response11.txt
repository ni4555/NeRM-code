```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Use multiple neighborhood sizes
    neighborhood_sizes = [1, 2, 3]
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Base heuristic considering minimum distance to each node
                base_heuristic = distance_matrix[i, j] - (np.min(distance_matrix[i, :]) + np.min(distance_matrix[j, :]))
                
                # Calculate neighborhood metrics
                for size in neighborhood_sizes:
                    neighborhood_nodes = set(range(num_nodes)) - {i, j}
                    # Use a simple average distance as a connectivity metric
                    avg_distance = np.mean([np.min(distance_matrix[n1, n2]) for n1 in neighborhood_nodes for n2 in neighborhood_nodes])
                    
                    # Adaptive weighting based on the distance from the current edge
                    weight = distance_matrix[i, j] / avg_distance if avg_distance > 0 else 1
                    
                    # Adjust heuristic based on neighborhood size and connectivity
                    heuristics[i, j] += base_heuristic * (size / max(neighborhood_sizes)) * weight

    return heuristics
```
