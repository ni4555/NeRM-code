```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Subtract the minimum distance from the current edge's distance
                local_heuristic = distance_matrix[i, j] - (min_dist_i + min_dist_j)
                
                # Calculate the average distance to all other nodes for both nodes
                avg_dist_i = np.mean(distance_matrix[i, :])
                avg_dist_j = np.mean(distance_matrix[j, :])
                
                # Weight the local heuristic by the average distance to promote global connectivity
                weighted_heuristic = local_heuristic * (avg_dist_i + avg_dist_j) / (2 * np.mean(avg_dist_i + avg_dist_j))
                
                heuristics[i, j] = weighted_heuristic

    return heuristics
```
