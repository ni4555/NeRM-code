```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Use a more sophisticated approach that takes into account the local neighborhood
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Use the second nearest neighbor to add a global perspective
                second_min_dist_i = np.partition(distance_matrix[i, :], 1)[1]
                second_min_dist_j = np.partition(distance_matrix[j, :], 1)[1]
                
                # Calculate the difference between the edge and the minimum of nearest and second nearest distances
                edge_diff_i = distance_matrix[i, j] - (min_dist_i + second_min_dist_i)
                edge_diff_j = distance_matrix[j, i] - (min_dist_j + second_min_dist_j)
                
                # Avoid rigid thresholds by scaling the difference with the average of the nearest and second nearest distances
                heuristics[i, j] = edge_diff_i / ((min_dist_i + second_min_dist_i) / 2)
                heuristics[j, i] = edge_diff_j / ((min_dist_j + second_min_dist_j) / 2)

    return heuristics
```
