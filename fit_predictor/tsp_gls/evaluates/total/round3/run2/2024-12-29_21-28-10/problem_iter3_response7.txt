```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Use a weighted sum to balance local and global perspectives
    local_weight = 0.5
    global_weight = 0.5
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the local distance (edge-specific property)
                local_dist = distance_matrix[i, j]
                
                # Calculate the global distance (global perspective)
                global_dist = (np.min(distance_matrix[i, :]) + np.min(distance_matrix[j, :]))
                
                # Apply the heuristic with weights for better balance
                heuristics[i, j] = (1 - local_weight) * local_dist + local_weight * global_dist
                
                # Avoid rigid thresholds by limiting the maximum possible heuristic value
                heuristics[i, j] = min(heuristics[i, j], 1.5 * local_dist)
                
                # Adapt to problem structure by adding a small adjustment based on the number of nodes
                heuristics[i, j] += 0.1 * (num_nodes - 1) / num_nodes

    return heuristics
```
