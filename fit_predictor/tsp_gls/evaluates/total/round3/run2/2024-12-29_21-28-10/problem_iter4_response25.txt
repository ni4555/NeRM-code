```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Improved heuristic that considers the distance to the nearest neighbor of each vertex,
    # the distance to the farthest neighbor, and the sum of the distances to all other neighbors.
    for i in range(num_nodes):
        # Find the nearest and farthest neighbors to node i
        nearest_neighbor_index = np.argmin(distance_matrix[i, :])
        farthest_neighbor_index = np.argmax(distance_matrix[i, :])
        all_other_neighbors_index = np.setdiff1d(np.arange(num_nodes), [nearest_neighbor_index, farthest_neighbor_index])

        nearest_neighbor_distance = distance_matrix[i, nearest_neighbor_index]
        farthest_neighbor_distance = distance_matrix[i, farthest_neighbor_index]
        all_other_neighbors_distances = distance_matrix[i, all_other_neighbors_index]

        # The heuristic is a combination of the farthest neighbor distance and the sum of distances to all other neighbors
        heuristics[i, :num_nodes] = distance_matrix[i, :] + (farthest_neighbor_distance + np.sum(all_other_neighbors_distances))

    return heuristics
```
