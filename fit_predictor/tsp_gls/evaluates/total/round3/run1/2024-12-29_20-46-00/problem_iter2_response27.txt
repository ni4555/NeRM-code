```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    
    # Initialize a matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic for each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                # Avoid self-loops
                # Calculate the heuristic as the relative weight of the edge compared to the longest path
                heuristic_matrix[i, j] = longest_path - distance_matrix[i, j]
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    min_val = np.min(heuristic_matrix[heuristic_matrix > 0])
    max_val = np.max(heuristic_matrix)
    if min_val == max_val:
        # If all heuristic values are the same, set to 0 to avoid division by zero
        heuristic_matrix = np.zeros_like(distance_matrix)
    else:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    return heuristic_matrix
```
