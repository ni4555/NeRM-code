```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    median_distance = np.median(distance_matrix)
    
    # Average distance to all other nodes for each node
    average_distances = np.sum(distance_matrix, axis=1) / (num_nodes - 1)
    
    # Heuristic based on distance from the median
    heuristic_median = np.abs(distance_matrix - median_distance) / median_distance
    
    # Heuristic based on average distance to all other nodes
    heuristic_average = np.abs(distance_matrix - average_distances[:, None]) / average_distances
    
    # Non-linear scaling to emphasize longer distances and those further from the median
    heuristic_values = 1 + (heuristic_median + heuristic_average) * 2
    
    # Avoid negative heuristic values
    heuristic_values = np.clip(heuristic_values, 0, np.inf)
    
    return heuristic_values
```
