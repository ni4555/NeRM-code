```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    # Normalize the degrees to prevent high-degree nodes from dominating the heuristic
    normalized_degrees = degrees / np.sum(degrees)
    
    # Calculate the density of the graph to penalize dense regions
    density = np.sum(distance_matrix) / (num_nodes * (num_nodes - 1))
    
    # Create a cost matrix based on the normalized degree product and density
    cost_matrix = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Use the product of normalized degrees to reflect local connectivity
                # and divide by the density to penalize dense regions
                cost_matrix[i, j] = 1 / ((normalized_degrees[i] * normalized_degrees[j]) / density)
    
    # Ensure the cost matrix is symmetrical
    cost_matrix = (cost_matrix + cost_matrix.T) / 2
    
    # Normalize the cost matrix to have a maximum value of 1
    max_cost = np.max(cost_matrix)
    if max_cost > 0:
        cost_matrix /= max_cost
    
    return cost_matrix
```
