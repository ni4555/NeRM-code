```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the importance of each node based on its degree and the average
    # degree of its neighbors
    importance = degrees + np.mean(distance_matrix, axis=1)
    
    # Define a function to calculate the local feature of each edge based on
    # the importance of its nodes and the distance between them
    def local_feature(i, j):
        return 1 / (importance[i] * importance[j]) * distance_matrix[i, j]
    
    # Calculate the heuristic matrix by applying the local feature function
    # to each edge
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = local_feature(i, j)
    
    # Normalize the heuristic matrix to the range [0, 1]
    max_feature = np.max(heuristic_matrix)
    if max_feature > 0:
        heuristic_matrix /= max_feature
    
    # Mutate the heuristic matrix to encourage exploration
    mutation_rate = 0.01  # Define a mutation rate
    mutation_range = 0.1  # Define a range within which the mutation occurs
    for i in range(n):
        for j in range(n):
            if i != j:
                if np.random.rand() < mutation_rate:
                    mutation = np.random.uniform(-mutation_range, mutation_range)
                    heuristic_matrix[i, j] = max(0, min(1, heuristic_matrix[i, j] + mutation))
    
    # Introduce a balance factor to balance global and local search
    balance_factor = 0.5
    # Add a global feature to the heuristic based on the total distance of the matrix
    total_distance = np.sum(distance_matrix)
    global_feature = 1 / (1 + total_distance)
    heuristic_matrix += balance_factor * global_feature
    
    # Normalize the heuristic matrix after introducing the balance factor
    max_feature = np.max(heuristic_matrix)
    if max_feature > 0:
        heuristic_matrix /= max_feature
    
    return heuristic_matrix
```
