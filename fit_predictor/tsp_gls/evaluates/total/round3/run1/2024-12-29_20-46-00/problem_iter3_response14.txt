```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Use local information to penalize short edges
    penalty_factor = 1 / (distance_matrix + 1e-5)
    
    # Use global information to avoid edges on the longest path
    for i in range(n):
        for j in range(n):
            if i != j:
                if distance_matrix[i, j] == longest_path - distance_matrix[i, j]:
                    heuristic_matrix[i, j] = 1  # High penalty for edges on the longest path
                else:
                    # Combine local and global heuristics
                    heuristic_matrix[i, j] = penalty_factor[i, j] + (longest_path - distance_matrix[i, j])
    
    # Incorporate node attributes (if available) to refine heuristics
    # Assuming a hypothetical node_attribute_matrix where higher values indicate more desirable nodes
    node_attribute_matrix = np.random.rand(n, n)  # Placeholder for actual node attributes
    heuristic_matrix += node_attribute_matrix * 0.1  # Weighing factor for node attributes
    
    # Adapt penalties based on problem context
    # Assuming a hypothetical problem_specific_factor that adjusts the heuristic
    problem_specific_factor = np.random.rand(n, n)  # Placeholder for actual problem context
    heuristic_matrix *= problem_specific_factor
    
    # Add exploration heuristic to encourage diversification
    for i in range(n):
        for j in range(n):
            if i != j:
                # Randomly perturb the heuristic values to encourage exploration
                if np.random.rand() < 0.1:  # 10% chance of perturbation
                    perturbation = np.random.normal(0, 0.1, 1)
                    heuristic_matrix[i, j] += perturbation
    
    return heuristic_matrix
```
