```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    node_degrees = np.sum(distance_matrix > 0, axis=1)
    node_centrality = node_degrees / ((distance_matrix.shape[0] ** 2) - distance_matrix.shape[0])
    
    # Calculate average distance for each node
    num_nodes = distance_matrix.shape[0]
    distance_sums = np.sum(distance_matrix, axis=1)
    average_distances = distance_sums / (num_nodes - 1)
    
    # Calculate edge influence based on the difference from the average distance
    edge_influence = np.abs(distance_matrix - average_distances[:, None])
    
    # Calculate the distance to the longest path
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    distance_to_longest = longest_path - distance_matrix
    
    # Create a penalty for edges close to the longest path
    path_penalty = distance_to_longest / longest_path
    
    # Create a penalty for short edges based on their inverse
    short_edge_penalty = 1 / (distance_matrix + 1e-5)
    
    # Combine the penalties and node/edge centrality into a single heuristic value
    # Weights are used to balance the contributions of each component
    weights = np.array([0.3, 0.4, 0.2, 0.1])  # Adjust weights based on problem context
    combined_heuristic = weights[0] * node_centrality + weights[1] * edge_influence + \
                          weights[2] * path_penalty + weights[3] * short_edge_penalty
    
    return combined_heuristic
```
