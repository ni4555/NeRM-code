```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Adjust penalties to reflect problem-specific knowledge and distance ratios
    # We will use a more aggressive normalization for longer distances and a lighter penalty for shorter ones
    # by using a logarithmic function to avoid the zero distance issue and to penalize very long distances more heavily.
    log_distance_matrix = np.log(distance_matrix + 1e-5)  # Adding a small constant to avoid logarithm of zero
    # We use a logarithmic transformation to give more weight to longer distances
    penalty_factor = 1 / (log_distance_matrix + 1e-10)
    # Normalize the penalty factor to ensure all values are within a similar range
    max_value = np.max(penalty_factor)
    min_value = np.min(penalty_factor)
    normalized_matrix = (penalty_factor - min_value) / (max_value - min_value)
    return normalized_matrix
```
