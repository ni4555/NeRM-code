```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Use local information to penalize short edges
    penalty_factor = 1 / (distance_matrix + 1e-5)
    
    # Use global information to avoid edges on the longest path
    for i in range(n):
        for j in range(n):
            if i != j:
                if distance_matrix[i, j] == longest_path - distance_matrix[i, j]:
                    heuristic_matrix[i, j] = 1  # High penalty for edges on the longest path
                else:
                    # Combine local and global heuristics
                    heuristic_matrix[i, j] = penalty_factor[i, j] + (longest_path - distance_matrix[i, j])
    
    # Adapt penalties based on problem context
    # For example, adding more weight to edges that are on the local optimal route
    local_optimal_route = np.random.choice(n, n - 1, replace=False)  # Simulate a local optimal route
    for i in range(n - 1):
        start, end = local_optimal_route[i], local_optimal_route[i + 1]
        heuristic_matrix[start, end] += 0.5  # Increase penalty for edges in the local optimal route
    
    # Add exploration heuristic to encourage diversification
    for i in range(n):
        for j in range(n):
            if i != j:
                # Randomly perturb the heuristic values to encourage exploration
                if np.random.rand() < 0.1:  # 10% chance of perturbation
                    perturbation = np.random.normal(0, 0.1, 1)
                    heuristic_matrix[i, j] += perturbation
    
    return heuristic_matrix
```
