```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Incorporate node and edge attributes
    # Assuming we have some attributes like 'degree' of nodes and 'path_length' for edges
    node_degrees = np.random.randint(1, n, size=n)  # Random degrees for nodes
    edge_path_lengths = distance_matrix + 1e-5  # Path length is distance plus a small constant
    
    # Use local information to penalize short edges
    penalty_factor = 1 / edge_path_lengths
    
    # Use global information to avoid edges on the longest path
    for i in range(n):
        for j in range(n):
            if i != j:
                # Avoid self-loops and edges on the longest path
                if distance_matrix[i, j] == longest_path - distance_matrix[i, j]:
                    heuristic_matrix[i, j] = 1  # High penalty for edges on the longest path
                else:
                    # Combine local and global heuristics, considering node degrees
                    heuristic_matrix[i, j] = penalty_factor[i, j] + (longest_path - distance_matrix[i, j]) * node_degrees[i] * node_degrees[j]
    
    # Adapt penalties based on problem context
    # Assuming we have a function that adapts penalties based on some problem-specific metric
    def adapt_penalty(contextual_metric):
        if contextual_metric > 0.5:
            return 0.5
        else:
            return contextual_metric
    
    # Add an adaptive exploration heuristic
    contextual_metric = np.random.rand()
    exploration_factor = adapt_penalty(contextual_metric)
    
    # Add exploration heuristic to encourage diversification
    for i in range(n):
        for j in range(n):
            if i != j:
                # Randomly perturb the heuristic values to encourage exploration
                if np.random.rand() < 0.1:  # 10% chance of perturbation
                    perturbation = np.random.normal(0, 0.1, 1)
                    heuristic_matrix[i, j] += perturbation * exploration_factor
    
    return heuristic_matrix
```
