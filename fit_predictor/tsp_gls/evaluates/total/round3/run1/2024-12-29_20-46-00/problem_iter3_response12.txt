```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Use local information to penalize short edges and encourage longer edges
    local_penalty = 1 / (distance_matrix + 1e-5)
    
    # Use global information to avoid edges on the longest path
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    longest_path_penalty = longest_path - distance_matrix
    
    # Incorporate node and edge attributes, such as node degree or edge count
    edge_count = np.sum(distance_matrix, axis=0)
    node_degree = np.max(edge_count, axis=1)
    edge_degree_penalty = 1 / (edge_count + 1e-5)
    
    # Combine local and global heuristics
    heuristic_matrix = local_penalty + longest_path_penalty + edge_degree_penalty
    
    # Add exploration heuristic to encourage diversification
    exploration_penalty = np.random.normal(0, 0.1, (n, n))
    exploration_penalty = np.clip(exploration_penalty, -1, 1)  # Limit the range of perturbations
    heuristic_matrix += exploration_penalty
    
    # Adapt penalties based on problem context (e.g., favor certain paths)
    # This could be a more complex function depending on the problem details
    context_penalty = np.zeros_like(distance_matrix)
    # ... (additional context-specific logic)
    heuristic_matrix += context_penalty
    
    return heuristic_matrix
```
