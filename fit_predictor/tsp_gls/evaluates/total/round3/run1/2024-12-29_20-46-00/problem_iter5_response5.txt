```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the importance of each node based on its degree and the average
    # degree of its neighbors
    importance = degrees + np.mean(distance_matrix, axis=1)
    
    # Calculate a global feature based on the average distance to all other nodes
    def global_feature(i):
        return np.mean(distance_matrix[i])
    
    # Calculate a local feature based on the importance of the nodes and the distance between them
    def local_feature(i, j):
        return 1 / (importance[i] * importance[j]) * distance_matrix[i, j]
    
    # Calculate a balance factor that encourages exploration over exploitation
    balance_factor = np.random.rand(n, n)
    
    # Define the heuristic function by combining global, local, and balance features
    def heuristic(i, j):
        return global_feature(i) * local_feature(i, j) * balance_factor[i, j]
    
    # Calculate the heuristic matrix by applying the heuristic function to each edge
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = heuristic(i, j)
    
    # Normalize the heuristic matrix to the range [0, 1]
    max_feature = np.max(heuristic_matrix)
    if max_feature > 0:
        heuristic_matrix /= max_feature
    
    return heuristic_matrix
```
