```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the shortest path to any vertex from each vertex using Floyd-Warshall algorithm
    n = distance_matrix.shape[0]
    floyd_matrix = np.linalg.matrix_power(distance_matrix, 2)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                floyd_matrix[i][j] = min(floyd_matrix[i][j], floyd_matrix[i][k] + floyd_matrix[k][j])
    
    # Calculate the global cost function based on edge lengths and deviation from shortest paths
    global_cost = np.sum(distance_matrix) - n * np.median(floyd_matrix)
    
    # Normalize the distance matrix based on global cost and scale adaptively
    max_value = np.max(distance_matrix)
    min_value = np.min(distance_matrix)
    scaled_matrix = (distance_matrix - min_value) / (max_value - min_value)
    heuristic_matrix = scaled_matrix + (global_cost / (n * n - n))
    
    return heuristic_matrix
```
