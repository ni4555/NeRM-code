```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]

    # Calculate node centrality based on degree centrality
    node_degrees = np.sum(distance_matrix > 0, axis=1)
    node_centrality = node_degrees / ((distance_matrix.shape[0] ** 2) - distance_matrix.shape[0])

    # Calculate edge influence based on average distance to all other nodes
    distance_sums = np.sum(distance_matrix, axis=1)
    average_distances = distance_sums / (num_nodes - 1)
    edge_influence = np.abs(distance_matrix - average_distances[:, None])

    # Incorporate local knowledge by penalizing edges not on the current path
    # Assuming local_path is the array of nodes in the current local optimal route
    local_path = np.random.choice(num_nodes, size=num_nodes - 1, replace=False)
    edge_penalties = np.zeros_like(distance_matrix)
    for i in range(num_nodes - 1):
        edge_penalties[local_path[i]][local_path[(i + 1) % (num_nodes - 1)]] = 1
        edge_penalties[local_path[(i + 1) % (num_nodes - 1)]][local_path[i]] = 1

    # Normalize penalties to maintain balance between local and global information
    normalized_penalties = edge_penalties / np.sum(edge_penalties)

    # Combine all metrics to form the heuristic
    combined_heuristic = 0.3 * node_centrality + 0.5 * edge_influence + 0.2 * normalized_penalties

    # Ensure the heuristic is not negative by taking the maximum of zero and the calculated heuristic
    combined_heuristic = np.maximum(combined_heuristic, 0)

    return combined_heuristic
```
