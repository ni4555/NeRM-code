```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Incorporate local knowledge by penalizing edges not on the current path
    num_nodes = distance_matrix.shape[0]
    # Introduce a penalty for edges on the current path
    local_path = np.random.choice(num_nodes, size=num_nodes - 1, replace=False)
    edge_penalties = np.zeros_like(distance_matrix)
    for i in range(num_nodes - 1):
        edge_penalties[local_path[i]][local_path[(i + 1) % (num_nodes - 1)]] = 1
        edge_penalties[local_path[(i + 1) % (num_nodes - 1)]][local_path[i]] = 1

    # Balance edge importance with actual distances
    distance_sums = np.sum(distance_matrix, axis=1)
    average_distances = distance_sums / (num_nodes - 1)
    importance_based_penalties = np.abs(distance_matrix - average_distances[:, None])

    # Utilize the maximum distance for scaling penalties to ensure they are meaningful
    scaled_penalties = importance_based_penalties / np.max(distance_matrix)

    # Combine all penalties
    total_penalties = edge_penalties + scaled_penalties
    return total_penalties
```
