```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.max(distance_matrix)

    # Initialize a matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the heuristic for each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                # Avoid self-loops and zero-distance edges
                if distance_matrix[i, j] > 0:
                    # Calculate the heuristic value based on the difference
                    # between the longest possible path and the actual edge distance
                    # Normalize by the longest path to get a relative measure
                    heuristic_value = (longest_path - distance_matrix[i, j]) / longest_path
                    # Apply a smoothing function to avoid excessive penalties
                    heuristic_matrix[i, j] = 1 - np.tanh(heuristic_value)

    return heuristic_matrix
```
