```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the usage frequency of each edge
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i, distance_matrix.shape[1]):
            usage_frequency[i, j] += distance_matrix[i, j]
            usage_frequency[j, i] += distance_matrix[i, j]
    
    # Normalize usage frequency to have a mean of 1
    mean_usage = np.mean(usage_frequency)
    normalized_usage = usage_frequency / mean_usage
    
    # Adjust the distance matrix based on the normalized usage frequency
    # Inverse proportionality to usage and ensuring non-negative distances
    adjusted_distances = np.where(normalized_usage > 1, distance_matrix / normalized_usage, distance_matrix)
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    # Apply a weighting scheme to promote shorter edges
    # Short edges are favored when they are less frequently used
    # Longer edges are penalized if they are frequently used
    penalty_factor = 1 + 0.1 * (normalized_usage - 1) - 0.1 * (distance_matrix / np.clip(distance_matrix, a_min=1, a_max=None))
    adjusted_distances *= penalty_factor
    
    # Ensure that the adjusted distances do not exceed the original matrix values
    adjusted_distances = np.clip(adjusted_distances, 0, distance_matrix)

    return adjusted_distances
```
