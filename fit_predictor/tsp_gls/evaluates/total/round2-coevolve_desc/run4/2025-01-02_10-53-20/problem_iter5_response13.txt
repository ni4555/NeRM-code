```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
            edge_usage[j, i] += 1

    # Calculate the usage density and normalize it
    usage_density = edge_usage / (n * (n - 1) / 2)
    normalized_density = (usage_density - np.mean(usage_density)) / np.std(usage_density)

    # Apply non-linear transformation to edge usage
    non_linear_transform = np.exp(normalized_density) - 1

    # Balance between the average edge length and edge usage
    average_edge_length = np.mean(distance_matrix[distance_matrix > 0])
    balanced_distances = distance_matrix * (1 + non_linear_transform * (0.5 - np.abs(distance_matrix - average_edge_length) / average_edge_length))

    # Introduce perturbations to encourage exploration
    perturbation = np.random.normal(size=(n, n))
    balanced_distances += perturbation * 0.05

    # Ensure that the distances are within bounds
    min_distance = 0.01
    max_distance = np.max(balanced_distances)
    balanced_distances = np.clip(balanced_distances, min_distance, max_distance)

    # Incorporate edge interaction effects
    for i in range(n):
        for j in range(i+1, n):
            if balanced_distances[i, j] == 0:
                # Ensure that zero distance edges are not penalized further
                continue
            # Introduce a penalty for edges that are very close to zero distance
            if balanced_distances[i, j] < 0.1 * max_distance:
                penalty_factor = 0.1 / (balanced_distances[i, j] / max_distance)
                balanced_distances[i, j] *= penalty_factor

    return balanced_distances
```
