```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, optimal_route: np.ndarray, fitness_target: float) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] = edge_usage[j, i] = (optimal_route == i) * (optimal_route == j)
    
    # Calculate the current fitness
    current_fitness = np.sum(distance_matrix[optimal_route[:-1], optimal_route[1:]] + 
                             distance_matrix[optimal_route[-1], optimal_route[0]])
    
    # If the current fitness is already below the target, no need to adjust
    if current_fitness < fitness_target:
        return distance_matrix
    
    # Use edge usage to adjust distances
    usage_threshold = np.median(edge_usage) / n
    adjusted_distances = distance_matrix * (1 + 0.1 * (edge_usage > usage_threshold))
    
    # Apply a perturbation that depends on the deviation from the target fitness
    perturbation = np.random.random((n, n)) * 0.01 - 0.005
    perturbation *= (fitness_target - current_fitness) / fitness_target
    adjusted_distances += perturbation
    
    # Introduce randomness to diversify the search space
    diversification = np.random.random((n, n))
    diversification = np.clip(diversification, 0, 1)
    adjusted_distances *= diversification
    
    return adjusted_distances
```
