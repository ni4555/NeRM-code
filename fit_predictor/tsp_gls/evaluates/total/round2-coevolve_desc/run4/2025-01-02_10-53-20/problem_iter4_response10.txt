```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += distance_matrix[i, j]
            edge_usage[j, i] += distance_matrix[i, j]
    
    # Normalize the usage frequency to have a mean of 1
    mean_usage = np.mean(edge_usage)
    normalized_usage = edge_usage / (mean_usage + 1e-6)  # Adding a small constant to avoid division by zero
    
    # Introduce variability by using a random factor that scales with edge usage
    random_factor = np.random.rand(*normalized_usage.shape)
    random_factor *= normalized_usage * (1 + np.random.random(n) * 0.1)  # Scale by edge usage and add a bit of randomness
    
    # Adjust the distance matrix based on the normalized usage frequency and random factor
    adjusted_distances = distance_matrix / (1 + normalized_usage * random_factor)
    
    # Introduce balance adjustments to ensure that heavily used edges are not penalized too much
    balance_factor = np.maximum(1 - mean_usage, 0)
    adjusted_distances *= balance_factor
    
    # Apply a small perturbation to the distance matrix to avoid local minima
    perturbation = np.random.random((n, n)) * 0.01 - 0.005
    adjusted_distances += perturbation
    
    # Ensure the adjusted distances do not become negative
    adjusted_distances = np.clip(adjusted_distances, 0, None)
    
    return adjusted_distances
```
