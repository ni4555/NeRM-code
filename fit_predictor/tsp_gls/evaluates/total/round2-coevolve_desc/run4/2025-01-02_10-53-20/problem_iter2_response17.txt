```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, route: np.ndarray) -> np.ndarray:
    # Adjust the edge distances based on their usage frequency and the length of the route
    usage_count = np.zeros_like(distance_matrix, dtype=int)
    for i in range(len(route) - 1):
        usage_count[route[i], route[i+1]] += 1
        usage_count[route[i+1], route[i]] += 1

    # Use a weighted sum where frequently used edges with high distances are penalized
    # and infrequently used edges with low distances are favored
    penalty_factor = 0.5
    heuristic_matrix = distance_matrix * (1 - penalty_factor) + (penalty_factor * usage_count)

    # To avoid self-loops, set the diagonal elements to infinity
    np.fill_diagonal(heuristic_matrix, np.inf)

    return heuristic_matrix
```
