```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
    
    # Calculate median of edge usage
    median_usage = np.median(edge_usage)
    
    # Adjust distances based on edge usage relative to median
    adjusted_distances = distance_matrix
    for i in range(n):
        for j in range(n):
            if i != j:
                adjusted_distances[i, j] *= (1 + 0.1 * (edge_usage[i, j] > median_usage))
    
    # Apply small random perturbations to escape local minima
    perturbation = np.random.random((n, n)) * 0.01 - 0.005
    adjusted_distances += perturbation
    
    # Ensure no edge cost is negative
    adjusted_distances = np.maximum(adjusted_distances, np.zeros_like(adjusted_distances))
    
    return adjusted_distances
```
