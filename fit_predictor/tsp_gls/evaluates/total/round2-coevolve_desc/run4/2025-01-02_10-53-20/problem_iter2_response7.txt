```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to keep track of the number of times each edge is used
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i+1, distance_matrix.shape[0]):
            usage_matrix[i][j] = usage_matrix[j][i] = np.random.rand()

    # Calculate the average usage of edges
    edge_usage_sum = np.sum(usage_matrix)
    average_usage = edge_usage_sum / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))

    # Adjust the heuristic based on the usage of the edge and its distance
    adjusted_distances = distance_matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i+1, distance_matrix.shape[0]):
            # Increase the cost for under-used edges
            if usage_matrix[i][j] < average_usage:
                adjusted_distances[i][j] += 1.5
            # Decrease the cost for over-used edges
            elif usage_matrix[i][j] > average_usage:
                adjusted_distances[i][j] -= 1.5
            # Penalize high distances by increasing the cost
            adjusted_distances[i][j] += distance_matrix[i][j] * 0.1

    # Ensure no edge cost is negative
    adjusted_distances = np.maximum(adjusted_distances, np.zeros_like(adjusted_distances))

    return adjusted_distances
```
