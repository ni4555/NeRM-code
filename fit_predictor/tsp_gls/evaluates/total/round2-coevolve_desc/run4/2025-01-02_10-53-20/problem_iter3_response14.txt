```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the usage frequency of each edge
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i, distance_matrix.shape[1]):
            usage_frequency[i, j] += distance_matrix[i, j]
            usage_frequency[j, i] += distance_matrix[i, j]
    
    # Normalize usage frequency to have a mean of 1
    mean_usage = np.mean(usage_frequency)
    normalized_usage = usage_frequency / mean_usage
    
    # Adjust the distance matrix based on the normalized usage frequency
    adjusted_distances = distance_matrix / (1 + normalized_usage)
    
    # Introduce variability by adding a small random noise
    noise = np.random.rand(*distance_matrix.shape) * 0.01
    
    # Balance adjustments by subtracting the noise from the adjusted distances
    balanced_distances = adjusted_distances - noise
    
    # Ensure that the balanced distances are not negative
    balanced_distances = np.maximum(balanced_distances, 0)
    
    return balanced_distances
```
