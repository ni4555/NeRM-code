```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the frequency of edge usage
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            usage_matrix[i, j] = np.count_nonzero(distance_matrix[:, i] + distance_matrix[i, :] == distance_matrix[j, i])
    
    # Incorporate edge usage into the heuristic
    usage_factor = np.sum(usage_matrix, axis=0) / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Create a heuristic matrix that incorporates both the distance and the usage factor
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Heuristic value based on the distance and the inverse of the usage factor to avoid frequently used edges
                heuristic_matrix[i, j] = distance_matrix[i, j] / (1 + usage_factor[j])
            else:
                # No self-loop
                heuristic_matrix[i, j] = np.inf
    
    return heuristic_matrix
```
