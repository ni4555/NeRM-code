```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, route: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    usage_count = np.zeros_like(distance_matrix, dtype=int)
    
    # Count the frequency of each edge being used in the current route
    for i in range(len(route) - 1):
        usage_count[route[i], route[i+1]] += 1
        usage_count[route[i+1], route[i]] += 1
    
    # Calculate the total distance of the current route to adjust penalties
    route_distance = np.sum(distance_matrix[route[:-1], route[1:]])
    
    # Adjust the edge distances based on their usage frequency
    # Make frequently used edges more penalized by increasing their distance
    # Reduce the distance of infrequently used edges
    adjusted_distances = distance_matrix * (1 + 0.01 * usage_count) + (1 - 0.01 * usage_count) * route_distance
    
    return adjusted_distances
```
