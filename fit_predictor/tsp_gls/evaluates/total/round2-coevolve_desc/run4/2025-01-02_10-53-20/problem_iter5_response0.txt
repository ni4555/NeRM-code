```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
            edge_usage[j, i] += 1

    # Calculate the usage density, which is the ratio of the usage count to the number of possible edges
    usage_density = edge_usage / (n * (n - 1) / 2)

    # Introduce a non-linear transformation to the usage density
    non_linear_density = np.tanh(usage_density)

    # Calculate the average non-linear usage
    average_non_linear_usage = np.mean(non_linear_density)

    # Adjust distances based on non-linear usage and edge length
    adjusted_distances = distance_matrix * (1 + 0.1 * (non_linear_density > average_non_linear_usage) + 0.1 * (distance_matrix < distance_matrix.mean()))

    # Introduce controlled perturbations to the distance matrix
    perturbation = np.random.normal(size=(n, n)) * np.clip(0.01 * (1 - non_linear_density), 0, 0.1)
    adjusted_distances += perturbation

    # Ensure that the distances are within a reasonable range to avoid numerical issues
    min_distance = 0.01
    max_distance = distance_matrix.max() * 0.9
    adjusted_distances = np.clip(adjusted_distances, min_distance, max_distance)

    # Normalize the adjusted distances for consistency
    adjusted_distances = (adjusted_distances - min_distance) / (max_distance - min_distance)

    return adjusted_distances
```
