```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to hold the heuristic values
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Track the usage of each edge
    edge_usage = np.sum(distance_matrix, axis=0)
    
    # Iterate over the distance matrix to calculate the heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Calculate the base heuristic based on the average distance to all other vertices
            if i != j:
                avg_distance = np.mean(distance_matrix[i])
                # Introduce a penalty for high usage edges to encourage other routes
                usage_penalty = edge_usage[i] * edge_usage[j]
                # Introduce a reward for short paths
                short_path_reward = np.log(distance_matrix[i, j] + 1)
                # Combine both penalties and rewards to get the heuristic values
                heuristic_matrix[i, j] = avg_distance - distance_matrix[i, j] + usage_penalty - short_path_reward
            else:
                # No self-loop
                heuristic_matrix[i, j] = np.inf
    
    return heuristic_matrix
```
