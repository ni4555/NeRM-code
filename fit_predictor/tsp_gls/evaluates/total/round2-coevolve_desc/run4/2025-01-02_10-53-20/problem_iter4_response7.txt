```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a new distance matrix with the same shape as the input
    adjusted_distances = np.zeros_like(distance_matrix)
    
    # Calculate the degree of each vertex
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the average degree
    average_degree = np.mean(degrees)
    
    # Calculate the number of unique edges
    num_edges = distance_matrix.shape[0] * (distance_matrix.shape[0] - 1) // 2
    
    # Calculate the average edge usage
    edge_usage = np.sum(distance_matrix) / num_edges
    
    # Calculate the heuristic value for each edge based on degree, usage, and distance
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Introduce a penalty for high degree vertices to encourage diversity
                penalty_degree = (degrees[i] > average_degree) + (degrees[j] > average_degree)
                # Introduce a reward for short paths
                reward_distance = -np.log(distance_matrix[i][j] + 1)
                # Adjust the cost based on edge usage
                if distance_matrix[i][j] < edge_usage:
                    reward_usage = 1.5
                elif distance_matrix[i][j] > edge_usage:
                    reward_usage = -1.5
                else:
                    reward_usage = 0
                
                # Calculate the adjusted distance
                adjusted_distance = distance_matrix[i][j] + penalty_degree - reward_distance + reward_usage
                
                # Ensure no edge cost is negative
                adjusted_distance = max(adjusted_distance, 0)
                
                # Update the new distance matrix
                adjusted_distances[i][j] = adjusted_distance
    
    return adjusted_distances
```
