```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize an array to keep track of the edge weights
    adjusted_distances = np.copy(distance_matrix)
    
    # Calculate the total distance of the current route
    total_distance = np.sum(distance_matrix)
    
    # Calculate the frequency of usage for each edge
    usage_count = np.zeros_like(distance_matrix, dtype=int)
    route = np.arange(distance_matrix.shape[0])
    for i in range(len(route) - 1):
        usage_count[route[i], route[i+1]] += 1
        usage_count[route[i+1], route[i]] += 1

    # Calculate the penalty factor based on usage and edge length
    # Shorter edges are favored when they are less frequently used
    # Longer edges are penalized if they are frequently used
    penalty_factor = np.exp(-(1 - distance_matrix / total_distance) * (1 - usage_count / np.sum(usage_count)))
    
    # Adjust the edge distances based on the calculated penalty factor
    adjusted_distances *= penalty_factor
    
    # Ensure that the adjusted distances are not excessive and maintain symmetry
    adjusted_distances = np.clip(adjusted_distances, 0, distance_matrix)
    adjusted_distances += np.maximum(0, distance_matrix - adjusted_distances)
    
    return adjusted_distances
```
