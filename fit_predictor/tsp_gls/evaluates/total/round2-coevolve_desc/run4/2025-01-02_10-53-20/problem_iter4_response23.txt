```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    
    # Calculate edge usage based on the current route
    current_route = np.random.permutation(n)  # Assuming a random initial route for demonstration
    for i in range(n-1):
        edge_usage[current_route[i], current_route[i+1]] += 1
        edge_usage[current_route[i+1], current_route[i]] += 1
    edge_usage[current_route[-1], current_route[0]] += 1
    
    # Use edge usage to adjust distances with non-linear scaling
    usage_threshold = np.percentile(edge_usage, 75) / n
    adjusted_distances = distance_matrix * (1 + np.log(1 + edge_usage / usage_threshold))
    
    # Apply a small perturbation to the distance matrix to avoid local minima
    perturbation = np.random.random((n, n)) * 0.01 - 0.005
    adjusted_distances += perturbation
    
    # Ensure the adjusted distances do not become negative
    adjusted_distances = np.clip(adjusted_distances, 0, None)
    
    return adjusted_distances
```
