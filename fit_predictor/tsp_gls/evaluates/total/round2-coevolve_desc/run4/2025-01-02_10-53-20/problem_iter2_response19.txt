```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
    
    # Dynamic adjustment based on edge usage
    usage_threshold = np.percentile(edge_usage, 75) / n
    adjusted_distances = distance_matrix * (1 + 0.1 * (edge_usage > usage_threshold))
    
    # Non-linear transformation to emphasize longer distances
    adjusted_distances = np.log(adjusted_distances + 1)
    
    # Perturbation to escape local minima
    perturbation = np.random.random((n, n)) * 0.02 - 0.01
    adjusted_distances += perturbation
    
    # Ensure the adjusted distances are positive
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    return adjusted_distances
```
