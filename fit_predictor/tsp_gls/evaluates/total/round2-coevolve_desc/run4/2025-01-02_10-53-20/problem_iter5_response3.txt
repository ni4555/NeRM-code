```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
            edge_usage[j, i] += 1

    # Calculate the usage density, which is the ratio of the usage count to the number of possible edges
    usage_density = edge_usage / (n * (n - 1) / 2)

    # Calculate the average edge usage
    average_usage = np.mean(usage_density)

    # Apply non-linear transformations to the distances based on usage and length
    adjusted_distances = distance_matrix
    for i in range(n):
        for j in range(i+1, n):
            adjusted_distances[i, j] = np.exp(-0.1 * (usage_density[i, j] - average_usage))
            adjusted_distances[j, i] = adjusted_distances[i, j]

    # Introduce controlled perturbations to the distance matrix to avoid local minima
    perturbation = np.random.normal(size=(n, n)) * 0.01
    adjusted_distances += perturbation

    # Normalize the adjusted distances to maintain symmetry and invariance
    adjusted_distances = (adjusted_distances - adjusted_distances.min()) / (adjusted_distances.max() - adjusted_distances.min())

    # Ensure non-negativity and maintain bounds to avoid numerical issues
    adjusted_distances = np.clip(adjusted_distances, 0, 1)

    # Incorporate edge interaction and feedback mechanisms by refining penalties
    for i in range(n):
        for j in range(i+1, n):
            if adjusted_distances[i, j] < 0.5:
                adjusted_distances[i, j] *= 0.9
                adjusted_distances[j, i] = adjusted_distances[i, j]

    return adjusted_distances
```
