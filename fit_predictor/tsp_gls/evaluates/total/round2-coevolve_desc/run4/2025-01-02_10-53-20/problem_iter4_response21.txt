```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i, distance_matrix.shape[1]):
            usage_frequency[i, j] += distance_matrix[i, j]
            usage_frequency[j, i] += distance_matrix[i, j]
    
    # Normalize usage frequency to have a mean of 1
    mean_usage = np.mean(usage_frequency)
    normalized_usage = usage_frequency / mean_usage
    
    # Introduce variability by adding a random perturbation
    variability = np.random.rand(*distance_matrix.shape) * 0.1
    
    # Adjust the distance matrix based on the normalized usage frequency and variability
    adjusted_distances = distance_matrix * (1 + normalized_usage + variability)
    
    # Ensure that the adjusted distances are within realistic bounds
    adjusted_distances = np.clip(adjusted_distances, 0, distance_matrix)
    
    # Introduce a penalty for highly used edges to encourage exploration
    highly_used_penalty = np.where(normalized_usage > 2, 0.5, 0)
    adjusted_distances += highly_used_penalty
    
    return adjusted_distances
```
