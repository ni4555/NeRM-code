```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
            edge_usage[j, i] += 1

    # Calculate the usage density, which is the ratio of the usage count to the number of possible edges
    usage_density = edge_usage / (n * (n - 1) / 2)

    # Calculate the average edge usage
    average_usage = np.mean(usage_density)

    # Adjust distances based on usage density
    adjusted_distances = distance_matrix * (1 + 0.1 * (usage_density > average_usage))

    # Apply a Gaussian perturbation to the distance matrix to avoid local minima
    perturbation = np.random.normal(size=(n, n)) * 0.01
    adjusted_distances += perturbation

    # Ensure that the distances are not negative
    adjusted_distances = np.clip(adjusted_distances, 0, None)

    return adjusted_distances
```
