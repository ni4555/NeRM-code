```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, current_route: np.ndarray) -> np.ndarray:
    # Initialize a new matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the total distance of the current route
    total_distance = np.sum(distance_matrix[current_route[:-1], current_route[1:]])
    
    # Get the usage frequency of each edge
    edge_usage_frequency = np.zeros_like(distance_matrix, dtype=int)
    for i in range(len(current_route) - 1):
        edge_usage_frequency[current_route[i], current_route[i + 1]] += 1
        edge_usage_frequency[current_route[i + 1], current_route[i]] += 1
    
    # Iterate over the distance matrix to adjust the heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Increase the heuristic value for frequently used edges and edges with high total distance
                heuristic_value = distance_matrix[i, j] + edge_usage_frequency[i, j] * total_distance
                heuristic_matrix[i, j] = heuristic_value
            else:
                # No self-loop
                heuristic_matrix[i, j] = np.inf
    
    # Normalize the heuristic matrix to ensure all values are non-negative
    min_val = np.min(heuristic_matrix)
    max_val = np.max(heuristic_matrix)
    if max_val > min_val:
        heuristic_matrix -= min_val
        heuristic_matrix /= (max_val - min_val)
    
    return heuristic_matrix
```
