```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    
    # Calculate edge usage based on the current route
    current_route = np.random.permutation(n)  # Assuming a random initial route for demonstration
    for i in range(n-1):
        edge_usage[current_route[i], current_route[i+1]] += 1
        edge_usage[current_route[i+1], current_route[i]] += 1
    edge_usage[current_route[-1], current_route[0]] += 1
    
    # Use edge usage to adjust distances
    usage_threshold = np.median(edge_usage) / n
    adjusted_distances = distance_matrix * (1 + 0.1 * (edge_usage > usage_threshold))
    
    # Normalize the adjusted distances to ensure non-negative values
    min_val = np.min(adjusted_distances)
    max_val = np.max(adjusted_distances)
    if max_val > min_val:
        adjusted_distances -= min_val
        adjusted_distances /= (max_val - min_val)
    
    # Apply a small perturbation to the distance matrix to avoid local minima
    perturbation = np.random.random((n, n)) * 0.01 - 0.005
    final_distances = adjusted_distances + perturbation
    
    # Normalize the final distances to avoid extremely large values
    min_final_val = np.min(final_distances)
    max_final_val = np.max(final_distances)
    if max_final_val > min_final_val:
        final_distances -= min_final_val
        final_distances /= (max_final_val - min_final_val)
    
    return final_distances
```
