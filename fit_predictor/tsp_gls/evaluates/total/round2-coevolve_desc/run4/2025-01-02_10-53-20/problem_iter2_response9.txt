```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each vertex
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the average degree
    average_degree = np.mean(degrees)
    
    # Calculate the number of unique edges
    num_edges = distance_matrix.shape[0] * (distance_matrix.shape[0] - 1) / 2
    
    # Calculate the average edge usage
    edge_usage = np.sum(distance_matrix) / num_edges
    
    # Adjust the heuristic based on the degree and usage of the edge
    adjusted_distances = distance_matrix.copy()
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Introduce a penalty for high degree vertices to encourage diversity
                if degrees[i] > average_degree or degrees[j] > average_degree:
                    adjusted_distances[i][j] += 1.0
                # Introduce a reward for short paths
                adjusted_distances[i][j] -= np.log(distance_matrix[i][j] + 1)
                # Adjust the cost based on edge usage
                if distance_matrix[i][j] < edge_usage:
                    adjusted_distances[i][j] += 1.5  # Increase the cost for under-used edges
                elif distance_matrix[i][j] > edge_usage:
                    adjusted_distances[i][j] -= 1.5  # Decrease the cost for over-used edges
    
    # Ensure no edge cost is negative
    adjusted_distances = np.maximum(adjusted_distances, np.zeros_like(adjusted_distances))
    
    return adjusted_distances
```
