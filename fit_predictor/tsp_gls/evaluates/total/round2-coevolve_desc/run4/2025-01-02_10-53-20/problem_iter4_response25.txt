```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to hold the heuristic values
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Track the usage of each edge
    edge_usage = np.sum(distance_matrix, axis=0)
    
    # Calculate the average distance from each vertex to all other vertices
    avg_distances = np.mean(distance_matrix, axis=1)
    
    # Iterate over the distance matrix to calculate the heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                # Calculate the base heuristic based on the difference from the average distance
                base_heuristic = avg_distances[i] - distance_matrix[i, j]
                
                # Introduce a usage penalty for highly used edges
                usage_penalty = edge_usage[i] * edge_usage[j]
                
                # Introduce a reward for shorter paths
                short_path_reward = np.log(distance_matrix[i, j] + 1)
                
                # Introduce a balance factor to avoid local minima
                balance_factor = np.random.rand()
                balance_factor = balance_factor / np.max(balance_factor)
                
                # Combine the base heuristic, penalty, reward, and balance factor
                heuristic_matrix[i, j] = base_heuristic - usage_penalty + short_path_reward * balance_factor
            else:
                # No self-loop
                heuristic_matrix[i, j] = np.inf
    
    return heuristic_matrix
```
