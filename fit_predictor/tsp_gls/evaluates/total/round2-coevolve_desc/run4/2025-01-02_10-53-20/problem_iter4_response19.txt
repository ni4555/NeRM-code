```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, route: np.ndarray) -> np.ndarray:
    # Calculate the initial total distance
    initial_total_distance = np.sum(np.sum(distance_matrix, axis=0))

    # Calculate the usage count for each edge
    num_edges = distance_matrix.size
    usage_count = np.zeros_like(distance_matrix, dtype=int)
    for i in range(len(route) - 1):
        usage_count[route[i], route[i+1]] += 1
        usage_count[route[i+1], route[i]] += 1

    # Calculate the impact of each edge on the total distance
    edge_impact = distance_matrix - initial_total_distance

    # Balance edge frequency vs. length
    balanced_adjustment = (1 - (1 / (1 + usage_count))) * (edge_impact + 1)

    # Dynamically adjust distances based on balanced adjustment
    adjusted_distances = distance_matrix * balanced_adjustment

    # Ensure that the adjusted distances are not negative
    adjusted_distances = np.maximum(adjusted_distances, 0)

    return adjusted_distances
```
