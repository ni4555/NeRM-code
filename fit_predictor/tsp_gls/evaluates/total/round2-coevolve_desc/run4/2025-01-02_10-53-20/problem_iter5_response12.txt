```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
            edge_usage[j, i] += 1

    # Calculate the usage density, average usage, and standard deviation
    usage_density = edge_usage / (n * (n - 1) / 2)
    average_usage = np.mean(usage_density)
    std_usage = np.std(usage_density)

    # Non-linear transformation of distances to balance short and long edges
    adjusted_distances = np.sqrt(distance_matrix)

    # Introduce penalties for highly used edges and reward less used ones
    penalty_factor = 0.1
    adjusted_distances *= (1 + penalty_factor * (usage_density > average_usage) - penalty_factor * (usage_density < average_usage - std_usage))

    # Apply controlled perturbations to encourage exploration
    perturbation = np.random.normal(size=(n, n)) * 0.01
    adjusted_distances += perturbation

    # Normalize distances to maintain symmetry and invariance
    min_distance = 0.01
    max_distance = distance_matrix.max() * 0.9
    adjusted_distances = np.clip(adjusted_distances, min_distance, max_distance)

    # Adjust distances based on their position in the route to minimize loops
    route = np.random.permutation(range(n))
    for i in range(n - 1):
        for j in range(i + 1, n):
            if i < route[j]:
                adjusted_distances[route[i], route[j]] = adjusted_distances[route[i], route[j]] * (1 + 0.05)
            else:
                adjusted_distances[route[i], route[j]] = adjusted_distances[route[i], route[j]] * (1 - 0.05)

    return adjusted_distances
```
