```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Adjust the edge distances based on their usage frequency, balance long/short distances
    # and avoid overuse.
    usage_count = np.zeros_like(distance_matrix, dtype=int)
    route = np.arange(distance_matrix.shape[0])
    for i in range(len(route) - 1):
        usage_count[route[i], route[i+1]] += 1
        usage_count[route[i+1], route[i]] += 1

    # Increase the distance of frequently used edges to discourage their use
    # Decrease the distance of infrequently used edges to encourage their use
    # Balance between the original distance and the adjusted usage-based distance
    alpha = 0.1  # A hyperparameter that balances the effect of distance and usage
    adjusted_distances = (1 - alpha) * distance_matrix + alpha * (usage_count * (distance_matrix / usage_count))
    # Avoid extremely high or low distances
    adjusted_distances = np.clip(adjusted_distances, a_min=1, a_max=np.max(distance_matrix))
    return adjusted_distances
```
