```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(i+1, n):
            edge_usage[i, j] += 1
            edge_usage[j, i] += 1

    # Normalize usage to account for different sizes of the graph
    max_usage = edge_usage.max()
    normalized_usage = edge_usage / max_usage

    # Calculate the mean normalized usage
    mean_usage = np.mean(normalized_usage)

    # Introduce a non-linear penalty based on edge length and usage
    penalties = np.sqrt(distance_matrix) * (normalized_usage - mean_usage)
    penalties = np.clip(penalties, 0, 1)  # Avoid negative penalties

    # Apply penalties to the distance matrix
    adjusted_distances = distance_matrix + penalties

    # Introduce controlled randomness to avoid premature convergence
    perturbation = np.random.normal(size=(n, n)) * 0.05
    adjusted_distances += perturbation

    # Ensure non-negativity of distances
    adjusted_distances = np.maximum(adjusted_distances, 0)

    # Maintain symmetry in the distance matrix
    adjusted_distances = (adjusted_distances + adjusted_distances.T) / 2

    return adjusted_distances
```
