```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Calculate the usage frequency of each edge
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i, distance_matrix.shape[1]):
            usage_frequency[i, j] += distance_matrix[i, j]
            usage_frequency[j, i] += distance_matrix[i, j]
    
    # Normalize usage frequency to have a mean of 1
    mean_usage = np.mean(usage_frequency)
    normalized_usage = usage_frequency / mean_usage
    
    # Introduce variability by adding Gaussian noise to the normalized usage
    noise = np.random.normal(0, 0.1, normalized_usage.shape)
    noisy_normalized_usage = normalized_usage + noise
    
    # Scale the distance matrix based on the noisy normalized usage frequency
    scaled_distances = distance_matrix * (1 + noisy_normalized_usage)
    
    # Adjust the scaled distances to avoid negative values and to prevent overfitting
    scaled_distances = np.clip(scaled_distances, 0, None)
    
    # Add a diversity factor that encourages using edges with a wide range of distances
    diversity_factor = np.sum(np.abs(distance_matrix - np.mean(distance_matrix, axis=0)))
    diversity_adjustment = (diversity_factor / np.max(distance_matrix)) * 0.05
    
    # Final adjustment of distances with diversity factor
    final_distances = scaled_distances * (1 - diversity_adjustment)
    
    return final_distances
```
