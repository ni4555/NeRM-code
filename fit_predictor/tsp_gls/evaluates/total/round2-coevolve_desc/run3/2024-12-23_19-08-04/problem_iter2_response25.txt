```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total number of edges
    num_edges = distance_matrix.size
    
    # Calculate the usage of each edge
    num_trips = np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1) - num_edges
    edge_usage = 1 / (num_trips + 1e-5)  # Avoid division by zero
    
    # Calculate the historical importance of each edge
    historical_importance = num_trips / (num_edges + 1e-5)  # Avoid division by zero
    
    # Adjust distances based on usage and historical importance
    adjusted_distances = distance_matrix * (1 - edge_usage) * (1 + 0.5 * historical_importance)
    
    # Apply a penalty for edges with high historical importance to encourage diversity
    adjusted_distances *= (1 - 0.2 * np.clip(historical_importance, 0, 1))
    
    # Apply a cooling schedule to ensure convergence
    adjusted_distances *= (1 - 0.1 * np.random.rand(num_edges))
    
    return adjusted_distances
```
