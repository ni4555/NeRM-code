```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Introduce diversity by occasionally setting a high penalty for edges that have high connectivity
    diversity_factor = 0.2
    diversity = np.random.choice([0, 1], size=usage_matrix.shape, p=[1 - diversity_factor, diversity_factor])
    adjusted_usage_matrix = usage_matrix * diversity

    # Define a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (adjusted_usage_matrix ** 2)
    
    # Apply a balance factor to reward short edges, to avoid local minima created by long edges
    balance_factor = 0.5
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            adjusted_matrix[i, j] *= (1 + balance_factor / (1 + adjusted_matrix[i, j]))
    
    # Incorporate domain knowledge by avoiding zero distances to promote exploration
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    
    # Introduce a connectivity-based penalty that encourages paths through less-traveled nodes
    connectivity_penalty = 0.05
    connectivity_penalty_matrix = np.sum(distance_matrix, axis=1) * connectivity_penalty
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            if i != j:
                adjusted_matrix[i, j] += connectivity_penalty_matrix[j]
    
    return adjusted_matrix
```
