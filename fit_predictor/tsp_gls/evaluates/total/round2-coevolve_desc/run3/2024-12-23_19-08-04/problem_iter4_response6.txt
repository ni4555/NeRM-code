```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))
    
    # Define penalty factors
    usage_penalty_factor = 0.1
    diversity_factor = 0.2
    balance_factor = 0.5
    
    # Adjust the distance matrix
    adjusted_matrix = distance_matrix.copy()
    for i in range(adjusted_matrix.shape[0]):
        for j in range(adjusted_matrix.shape[1]):
            if adjusted_matrix[i, j] > 0:
                # Increase distance for highly used edges
                adjusted_matrix[i, j] *= (1 + usage_penalty_factor * (usage_matrix[i, j] / (len(distance_matrix) - 1)))
                
                # Introduce a diversity factor to encourage exploration
                adjusted_matrix[i, j] *= (1 + diversity_factor / adjusted_matrix[i, j])
                
                # Apply a balance factor to reward short edges
                adjusted_matrix[i, j] *= (1 + balance_factor / (1 + adjusted_matrix[i, j]))
    
    # Ensure that the distances remain positive
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    
    # Avoid zero distances to prevent a bias towards these edges
    adjusted_matrix[adjusted_matrix == 0] = np.finfo(np.float64).eps
    
    return adjusted_matrix
```
