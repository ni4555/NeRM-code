```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance of the longest and shortest paths
    max_distance = np.max(np.sum(distance_matrix, axis=0))
    min_distance = np.min(np.sum(distance_matrix, axis=0))
    
    # Calculate the number of edges
    num_edges = distance_matrix.shape[0]
    
    # Calculate the average edge usage frequency
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(num_edges):
        for j in range(num_edges):
            if i != j:
                usage_matrix[i, j] = np.mean(np.isin(distance_matrix, np.sort(distance_matrix)[i, :].reshape(-1, 1)))
    
    # Incorporate path diversity by considering the standard deviation of edge usage
    std_dev_usage = np.std(usage_matrix)
    
    # Adjust the distance matrix by the usage frequency and standard deviation
    adjusted_distances = distance_matrix * (1 - usage_matrix) * (std_dev_usage / np.sqrt(num_edges))
    
    # Define a heuristic based on the deviation from the shortest path
    return adjusted_distances * ((max_distance - min_distance) / max_distance + 1)
```
