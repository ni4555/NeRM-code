```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Incorporate usage frequency into the heuristic
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if distance_matrix[i, j] > 0:
                usage_matrix[i, j] = 1
    usage_matrix = usage_matrix / np.sum(usage_matrix, axis=1, keepdims=True)

    # Calculate connectivity penalty as the sum of the edge lengths for each node
    connectivity_penalty = np.sum(distance_matrix, axis=1) / distance_matrix.shape[1]

    # Adjust the distances based on both the length of the edge and its usage
    adjusted_distances = distance_matrix * (1 + usage_matrix)

    # Introduce a penalty for highly connected nodes
    adjusted_distances += connectivity_penalty

    # Normalize the adjusted distances to ensure they are non-negative
    adjusted_distances = np.maximum(adjusted_distances - np.min(adjusted_distances), 0)

    return adjusted_distances
```
