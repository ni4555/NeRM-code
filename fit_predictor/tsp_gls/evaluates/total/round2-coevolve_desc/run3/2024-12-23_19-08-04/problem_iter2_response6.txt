```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance of the longest path in the matrix
    max_distance = np.max(np.sum(distance_matrix, axis=0))
    # Calculate the total distance of the shortest path in the matrix
    min_distance = np.min(np.sum(distance_matrix, axis=0))
    # Calculate the average distance of the edges
    avg_distance = np.mean(np.sum(distance_matrix, axis=0))
    # Calculate the number of edges
    num_edges = distance_matrix.shape[0]
    
    # The heuristic adjusts the edge weights based on their deviation from the average distance
    # We want to avoid edges that are too far from the average distance, which could lead to a local optimum
    adjusted_matrix = distance_matrix * (np.clip((avg_distance - min_distance) / (max_distance - min_distance), 0, 1) + 1)
    
    return adjusted_matrix
```
