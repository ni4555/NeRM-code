```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of each edge's distance
    edge_sums = distance_matrix.sum(axis=1)
    edge_counts = np.ones(distance_matrix.shape[0])
    usage_matrix = edge_counts * distance_matrix
    
    # Calculate the sum of all possible paths (n-1 choose 2)
    total_possible_edges = (len(distance_matrix) - 1) * (len(distance_matrix) - 2) // 2
    
    # Normalize the edge usage by total possible edges
    normalized_usage = usage_matrix / total_possible_edges
    
    # Normalize edge lengths by the sum of all edge lengths
    normalized_edge_lengths = distance_matrix / edge_sums[:, np.newaxis]
    
    # Combine normalized usage and normalized edge lengths
    heuristic_scores = (1 - normalized_usage) + (normalized_edge_lengths * 0.5)
    
    # Encourage exploration by penalizing frequently used edges with a high score
    exploration_penalty = np.where(normalized_usage > 0.5, 1.2, 1)
    heuristic_scores *= exploration_penalty
    
    # Balance local and global search by rewarding longer paths less often traversed
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            if normalized_usage[i, j] < 0.1:
                heuristic_scores[i, j] *= 1.1
    
    # Include a diversity feature by rewarding unique edges
    diversity_bonus = np.where(np.sum(distance_matrix, axis=0) == 1, 1.1, 1)
    heuristic_scores *= diversity_bonus
    
    return heuristic_scores
```
