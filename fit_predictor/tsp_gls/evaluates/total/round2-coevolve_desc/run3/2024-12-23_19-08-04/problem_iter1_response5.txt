```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a heuristic based on the usage of each edge
    num_edges = distance_matrix.shape[0]
    edge_usage = np.zeros_like(distance_matrix)
    
    # Start with each edge having equal probability
    probability = np.ones_like(distance_matrix) / num_edges
    
    # Update the probability based on usage
    for _ in range(100):  # Run for 100 iterations
        visited = np.zeros_like(distance_matrix, dtype=bool)
        for i in range(num_edges):
            for j in range(num_edges):
                if i != j and not visited[i] and not visited[j]:
                    if np.random.rand() < probability[i, j]:
                        edge_usage[i, j] += 1
                        visited[i] = True
                        visited[j] = True
        
        # Normalize the probabilities
        total_usage = np.sum(edge_usage)
        probability = edge_usage / total_usage
    
    # Increase the "badness" of highly used edges
    badness = 1 - probability
    return badness
```
