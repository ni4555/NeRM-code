```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a matrix that indicates the number of times each edge has been used
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the total number of possible edges
    num_possible_edges = (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1)) // 2
    
    # For each possible edge, count how many times it has been used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[0]):  # Only count each edge once
            usage_matrix[i, j] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                        (distance_matrix[:, j] == distance_matrix[i, :]))
    
    # Calculate the number of times each edge has been used
    usage_frequency = usage_matrix.sum() / num_possible_edges
    
    # Adjust the distance matrix based on the usage frequency and the edge length
    # High usage frequency and high edge length should be avoided
    adjusted_distances = distance_matrix * (1 + usage_frequency) / (1 + distance_matrix)
    
    return adjusted_distances
```
