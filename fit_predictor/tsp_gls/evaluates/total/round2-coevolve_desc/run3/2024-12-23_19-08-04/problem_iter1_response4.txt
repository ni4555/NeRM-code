```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as distance_matrix with high values
    usage_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the number of possible edges
    num_edges = distance_matrix.size
    
    # Initialize a usage counter for each edge
    edge_usage_counter = np.zeros(num_edges)
    
    # Define a threshold for updating the edge distances
    threshold = 0.1
    
    # Update the edge distances based on their usage
    for _ in range(100):  # Iterate a fixed number of times
        for i in range(num_edges):
            edge_usage_counter[i] = 0
        for i in range(num_edges):
            for j in range(i + 1, num_edges):
                edge_usage_counter[i] += (distance_matrix[i, j] < usage_matrix[i, j]).astype(int)
                edge_usage_counter[j] += (distance_matrix[i, j] < usage_matrix[i, j]).astype(int)
        
        # Update the distance matrix based on the usage of each edge
        for i in range(num_edges):
            for j in range(i + 1, num_edges):
                if edge_usage_counter[i] > threshold and edge_usage_counter[j] > threshold:
                    usage_matrix[i, j] = distance_matrix[i, j] * 0.9  # Decrease the distance by 10%
                    usage_matrix[j, i] = distance_matrix[i, j] * 0.9  # Symmetric update
        
        # Reset the edge usage counter
        edge_usage_counter = np.zeros(num_edges)
    
    return usage_matrix
```
