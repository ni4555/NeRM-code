```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Normalize usage to avoid overpenalization
    max_usage = np.max(usage_matrix)
    normalized_usage = usage_matrix / max_usage

    # Apply a balance factor to reward short edges, to avoid local minima created by long edges
    balance_factor = 0.5
    # Encourage diversity by penalizing overused edges and rewarding underused edges
    diversity_factor = 0.5
    # Ensure connectivity by not allowing any edge weight to become zero
    min_weight = np.finfo(np.float64).eps
    adjusted_matrix = distance_matrix + balance_factor * (1 / (1 + distance_matrix)) + diversity_factor * (normalized_usage - 0.5) + min_weight

    # Normalize the adjusted matrix to ensure all weights are within a certain range
    adjusted_matrix = adjusted_matrix / np.max(adjusted_matrix)
    adjusted_matrix = adjusted_matrix * (np.max(distance_matrix) - min_weight) + min_weight
    
    return adjusted_matrix
```
