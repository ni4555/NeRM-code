```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a penalty factor array
    penalty_factor = np.zeros_like(distance_matrix)
    
    # Calculate the total distance of the longest path in the matrix
    max_distance = np.max(np.sum(distance_matrix, axis=0))
    # Calculate the total distance of the shortest path in the matrix
    min_distance = np.min(np.sum(distance_matrix, axis=0))
    
    # Calculate the average distance for all paths
    average_distance = np.mean(np.sum(distance_matrix, axis=0))
    
    # Initialize a counter for each edge
    edge_counter = np.zeros_like(distance_matrix)
    
    # Iterate over the matrix to calculate edge usage
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            edge_counter[i, j] = 1 / (1 + distance_matrix[i, j] - average_distance)
    
    # Calculate the heuristic value for each edge based on its usage and the shortest path
    penalty_factor = edge_counter * ((max_distance - min_distance) / max_distance + 1)
    
    # Adjust the distance matrix based on the heuristic values
    distance_matrix += penalty_factor
    
    # Ensure that the distances are not negative
    distance_matrix[distance_matrix < 0] = 0
    
    return distance_matrix
```
