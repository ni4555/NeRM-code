```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to store the heuristic values
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used
    edge_usage = np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1) - (len(distance_matrix) * 2)
    
    # Calculate the heuristic value based on edge usage and distance
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix[i])):
            if i != j:
                # Increase the heuristic value for high edge usage and high distance
                heuristic_matrix[i, j] = edge_usage[i, j] * distance_matrix[i, j]
    
    # Add a penalty for edges that are part of the current tour
    current_tour = np.random.randint(0, len(distance_matrix), size=2)
    for i, j in zip(current_tour, current_tour[1:] + [current_tour[0]]):
        heuristic_matrix[i, j] += 1000
    
    return heuristic_matrix
```
