```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the betweenness centrality for each edge
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for k in range(distance_matrix.shape[0]):
        row_sums = np.sum(distance_matrix[k, :] != 0)
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[0]):
                if distance_matrix[i, j] != 0:
                    betweenness_centrality[i, j] += (distance_matrix[i, k] * distance_matrix[k, j]) / row_sums
    
    # Normalize the betweenness centrality
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    # Adjust the distance matrix based on the betweenness centrality
    adjusted_distance_matrix = distance_matrix.copy()
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            adjusted_distance_matrix[i, j] *= (1 - betweenness_centrality[i, j])
    
    # Introduce mutations to promote diversity and avoid local minima
    mutation_probability = 0.05
    num_mutations = int(distance_matrix.shape[0] * distance_matrix.shape[1] * mutation_probability)
    for _ in range(num_mutations):
        i, j = np.random.choice(distance_matrix.shape[0], 2, replace=False)
        swap_i, swap_j = np.random.choice(distance_matrix.shape[0], 2, replace=False)
        adjusted_distance_matrix[[i, swap_i], [j, swap_j]] = adjusted_distance_matrix[[swap_i, i], [swap_j, j]]
    
    return adjusted_distance_matrix
```
