```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the betweenness centrality for each edge
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for k in range(distance_matrix.shape[0]):
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[0]):
                if distance_matrix[i, j] != 0:
                    betweenness_centrality[i, j] += (distance_matrix[i, k] * distance_matrix[k, j]) / (np.sum(distance_matrix[k, :] != 0))
    
    # Normalize the betweenness centrality
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    # Add a diversity factor to encourage the inclusion of less central edges
    diversity_factor = (np.sum(distance_matrix) / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1)))
    adjusted_betweenness_centrality = betweenness_centrality * diversity_factor
    
    # Apply a non-linear adjustment to the distance matrix
    adjusted_distance_matrix = distance_matrix.copy()
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            if i != j:
                adjusted_distance_matrix[i, j] = np.exp(-adjusted_betweenness_centrality[i, j])
    
    # Introduce a diversity factor to escape local minima
    diversity_factor = np.random.rand(*adjusted_distance_matrix.shape)
    diversity_factor[degrees > 0] = 0  # Avoid edges with zero degree
    
    # Combine the adjusted distances with the diversity factor
    final_distance_matrix = adjusted_distance_matrix * diversity_factor
    
    return final_distance_matrix
```
