```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Normalize the degrees to get a probability distribution
    probabilities = degrees / np.sum(degrees)
    
    # Create a new distance matrix based on the probabilities
    new_distance_matrix = np.outer(probabilities, probabilities) * distance_matrix
    
    # Add a small constant to avoid zero distances
    epsilon = 1e-10
    new_distance_matrix = np.where(new_distance_matrix == 0, epsilon, new_distance_matrix)
    
    # Normalize the new distance matrix to keep the sum of distances approximately constant
    total_distance = np.sum(new_distance_matrix)
    new_distance_matrix = new_distance_matrix / total_distance
    
    # Adjust the distances to favor less used edges
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(i, distance_matrix.shape[1]):
            edge_usage[i, j] += np.sum(np.isin([i, j], np.argwhere(distance_matrix[i] < distance_matrix).flatten()))
    new_distance_matrix = new_distance_matrix * (1 - edge_usage)
    
    return new_distance_matrix
```
