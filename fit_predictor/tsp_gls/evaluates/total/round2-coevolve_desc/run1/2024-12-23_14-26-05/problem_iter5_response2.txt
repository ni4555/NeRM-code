```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the betweenness centrality for each edge
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for k in range(distance_matrix.shape[0]):
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[0]):
                if distance_matrix[i, j] != 0:
                    betweenness_centrality[i, j] += (distance_matrix[i, k] * distance_matrix[k, j]) / (np.sum(distance_matrix[k, :] != 0))
    
    # Normalize the betweenness centrality
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    # Introduce a non-linear adjustment factor to encourage exploration
    exploration_factor = np.random.uniform(0.1, 0.5)
    
    # Adjust the distance matrix based on the betweenness centrality and exploration factor
    adjusted_distance_matrix = distance_matrix.copy()
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            adjusted_distance_matrix[i, j] = (1 - exploration_factor) * (distance_matrix[i, j] * (1 - betweenness_centrality[i, j])) + exploration_factor * np.random.rand()
    
    # Encourage diversity by swapping the distances of nodes based on the degrees
    for _ in range(5):
        i = np.random.randint(0, distance_matrix.shape[0])
        j = np.random.randint(0, distance_matrix.shape[0])
        while i == j or distance_matrix[i, j] == 0:
            j = np.random.randint(0, distance_matrix.shape[0])
        if np.random.rand() < np.min(degrees) / (np.sum(degrees)):
            adjusted_distance_matrix[[i, j], :] = adjusted_distance_matrix[[j, i], :]
            adjusted_distance_matrix[:, [i, j]] = adjusted_distance_matrix[:, [j, i]]
    
    return adjusted_distance_matrix
```
