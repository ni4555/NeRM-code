```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=0)
    
    # Calculate the betweenness centrality for each edge
    betweenness_centrality = np.zeros(distance_matrix.shape)
    for k in range(distance_matrix.shape[0]):
        for i in range(distance_matrix.shape[0]):
            for j in range(distance_matrix.shape[0]):
                if distance_matrix[i, j] != 0:
                    betweenness_centrality[i, j] += (distance_matrix[i, k] * distance_matrix[k, j]) / (np.sum(distance_matrix[k, :] != 0))
    
    # Normalize the betweenness centrality
    max_betweenness = np.max(betweenness_centrality)
    betweenness_centrality = betweenness_centrality / max_betweenness
    
    # Adjust the distance matrix based on the betweenness centrality
    adjusted_distance_matrix = distance_matrix.copy()
    for i in range(adjusted_distance_matrix.shape[0]):
        for j in range(adjusted_distance_matrix.shape[0]):
            adjusted_distance_matrix[i, j] *= (1 - betweenness_centrality[i, j])
    
    # Introduce non-linear adjustments to enhance diversity and escape local minima
    diversity_factor = np.random.normal(0, 0.05, distance_matrix.shape)
    adjusted_distance_matrix += diversity_factor
    
    # Cap the distances to avoid unrealistic high values
    adjusted_distance_matrix = np.clip(adjusted_distance_matrix, 0, 1)
    
    # Additional heuristic: penalize edges with high degree to avoid local minima
    degree_penalty = np.exp(-degrees / (degrees.max() + 1))
    adjusted_distance_matrix *= degree_penalty
    
    return adjusted_distance_matrix
```
