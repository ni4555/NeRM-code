```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic will take into account the degree of each node and
    # the average remaining distance from the current node to other nodes.
    # The idea is to consider it bad to include an edge if it leads to
    # a node with a high degree or a high average distance.
    
    # Compute the degree of each node
    degree = np.sum(distance_matrix, axis=0)
    
    # Compute the average remaining distance from each node to others
    avg_distance = distance_matrix.mean(axis=1)
    
    # Normalize the degrees and average distances to be in the same scale
    degree_normalized = degree / np.sum(degree)
    avg_distance_normalized = avg_distance / np.sum(avg_distance)
    
    # Combine the normalized metrics to get a heuristic score for each edge
    # Higher scores are considered 'bad' edges
    heuristic_scores = (degree_normalized + avg_distance_normalized)
    
    # Since we want to avoid 'bad' edges, we use 1 minus the scores
    return 1 - heuristic_scores
```
