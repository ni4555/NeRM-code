```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix with the same shape as the distance matrix
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the initial usage by summing the row-wise and column-wise distances
    for i in range(distance_matrix.shape[0]):
        usage_matrix[i, :] = np.sum(distance_matrix[i, :])
        usage_matrix[:, i] = np.sum(distance_matrix[:, i])
    
    # Introduce a non-linear penalty for frequent edges based on exponential decay
    penalty_factor = np.exp(-0.1 * usage_matrix)
    
    # Introduce a bonus for edges with higher average distance in the used ones
    used_edges = usage_matrix.sum()
    bonus_factor = np.sum(distance_matrix) / used_edges
    bonus_matrix = bonus_factor * penalty_factor

    # Combine penalties and bonuses into a heuristic
    heuristic_matrix = bonus_matrix + (1 - bonus_matrix)

    return heuristic_matrix
```
