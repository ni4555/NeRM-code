```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to store the usage count of each edge
    usage_matrix = np.zeros_like(distance_matrix, dtype=int)
    
    # Simulate some usage of the edges
    np.random.shuffle(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                usage_matrix[i, j] += 1
    
    # Calculate the average distance for each edge
    average_distance_matrix = np.mean(distance_matrix, axis=0)
    
    # Introduce a penalty factor based on edge usage
    penalty_factor = np.exp(-0.1 * usage_matrix)
    
    # Introduce a bonus for edges with higher average distance in the used ones
    bonus_factor = np.exp(-0.05 * (average_distance_matrix - np.mean(average_distance_matrix)))
    
    # Combine penalties and bonuses into a heuristic
    heuristic_matrix = penalty_factor * bonus_factor
    
    # Adjust the distance matrix based on the heuristic
    adjusted_distance_matrix = distance_matrix * heuristic_matrix
    
    # Ensure that diagonal elements are set to infinity (no self-loops)
    np.fill_diagonal(adjusted_distance_matrix, np.inf)
    
    return adjusted_distance_matrix
```
