```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance of the matrix
    total_distance = np.sum(distance_matrix)
    
    # Calculate the average distance
    average_distance = total_distance / distance_matrix.size
    
    # Calculate the usage frequency of each edge
    num_edges = distance_matrix.size
    usage_frequency = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            usage_frequency[i, j] = np.sum(distance_matrix[i] * distance_matrix[:, j])
    
    # Normalize the usage frequency
    max_frequency = np.max(usage_frequency)
    if max_frequency == 0:
        return distance_matrix
    
    usage_frequency /= max_frequency
    
    # Introduce a penalty for frequently used edges
    penalty = 1 - (1 - 0.1) * usage_frequency
    
    # Introduce a bonus for edges with a distance greater than the average
    bonus = (distance_matrix > average_distance) * (1 + 0.1 * (distance_matrix - average_distance))
    
    # Combine penalties and bonuses into a heuristic matrix
    heuristic_matrix = penalty + bonus
    
    # Normalize the heuristic matrix to ensure all values are between 0 and 1
    min_value = np.min(heuristic_matrix)
    max_value = np.max(heuristic_matrix)
    heuristic_matrix = (heuristic_matrix - min_value) / (max_value - min_value)
    
    return heuristic_matrix
```
