```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the usage of each edge
    edge_usage = np.count_nonzero(distance_matrix, axis=0)
    
    # Adjust the heuristic values based on the degree of the node and edge usage
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the heuristic factor based on the degree difference and edge usage
                heuristic_factor = (degrees[i] - degrees[j]) / max(degrees[i], degrees[j])
                if edge_usage[i] < edge_usage[j]:
                    heuristic_factor *= 0.9  # Less used edges get less penalty
                elif edge_usage[i] > edge_usage[j]:
                    heuristic_factor *= 1.1  # More used edges get more penalty
                
                # Apply the heuristic factor to the distance
                heuristic_matrix[i][j] = distance_matrix[i][j] * (1 + heuristic_factor)
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
