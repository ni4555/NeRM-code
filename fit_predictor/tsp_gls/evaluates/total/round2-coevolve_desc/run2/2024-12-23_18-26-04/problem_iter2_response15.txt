```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the frequency of each edge
    edge_frequency = np.zeros_like(distance_matrix, dtype=int)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                edge_frequency[i][j] += 1
    
    # Adjust the heuristic values based on the degree of the node and the frequency of the edge
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Adjust the heuristic for high degree nodes and frequently used edges
                if degrees[i] > degrees[j] and edge_frequency[i][j] > edge_frequency[j][i]:
                    heuristic_matrix[i][j] = distance_matrix[i][j] * (1 + (degrees[i] - degrees[j]) * (edge_frequency[i][j] - edge_frequency[j][i]) / 100)
                # Adjust the heuristic for lower degree nodes and less frequently used edges
                elif degrees[i] < degrees[j] and edge_frequency[i][j] < edge_frequency[j][i]:
                    heuristic_matrix[i][j] = distance_matrix[i][j] * (1 - (degrees[i] - degrees[j]) * (edge_frequency[i][j] - edge_frequency[j][i]) / 100)
                # Otherwise, keep the original distance
                else:
                    heuristic_matrix[i][j] = distance_matrix[i][j]
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
