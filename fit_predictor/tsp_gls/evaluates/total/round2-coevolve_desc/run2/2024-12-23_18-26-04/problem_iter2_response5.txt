```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a matrix to track the usage of each edge
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Initialize the heuristic matrix with the same values as the distance matrix
    heuristic_matrix = np.copy(distance_matrix)
    
    # Calculate the initial usage of each edge based on the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            usage_matrix[i, j] = distance_matrix[i, j] if i < j else 0
    
    # Function to update the heuristic based on edge usage and neighborhood
    def update_heuristic(i, j):
        # Get the current heuristic value
        current_heuristic = heuristic_matrix[i, j]
        # Get the minimum heuristic value in the neighborhood
        min_neighborhood_value = np.min(heuristic_matrix[i, max(0, j-1):min(distance_matrix.shape[1], j+2)])
        # Calculate the new heuristic value based on edge usage and neighborhood
        new_heuristic = (min_neighborhood_value * 0.9) + ((1 - 0.9) * (1 / (usage_matrix[i, j] + 1)))
        # Update the heuristic matrix
        heuristic_matrix[i, j] = new_heuristic
    
    # Iterate over the matrix to update the heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                update_heuristic(i, j)
                # Update the usage of the edge
                usage_matrix[i, j] += 1
    
    return heuristic_matrix
```
