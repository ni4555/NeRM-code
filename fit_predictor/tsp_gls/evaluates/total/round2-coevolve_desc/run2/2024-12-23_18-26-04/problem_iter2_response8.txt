```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a matrix that represents the number of times each edge has been used
    usage_matrix = np.zeros_like(distance_matrix)
    np.fill_diagonal(usage_matrix, np.inf)  # Diagonal edges are not used in the TSP

    # Calculate the current tour usage
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            usage_matrix[i, j] = usage_matrix[j, i] = (usage_matrix[i, j] + 1) / 2

    # Adjust edge distances based on usage and length
    adjusted_distances = distance_matrix
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            # Use a nuanced scaling factor that considers both the edge length and usage
            scaling_factor = 1 + 0.1 * (1 / np.sqrt(usage_matrix[i, j])) - 0.05 * (distance_matrix[i, j] / np.max(distance_matrix))
            adjusted_distances[i, j] = adjusted_distances[j, i] = distance_matrix[i, j] * scaling_factor

    return adjusted_distances
```
