```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with high values
    heuristic_matrix = np.full(distance_matrix.shape, np.inf)
    
    # Normalize node degrees
    max_degree = np.max(np.sum(distance_matrix, axis=1))
    normalized_degrees = np.sum(distance_matrix, axis=1) / max_degree
    
    # Normalize edge usage
    max_usage = np.max(np.count_nonzero(distance_matrix, axis=0))
    normalized_usage = np.count_nonzero(distance_matrix, axis=0) / max_usage
    
    # Normalize distances
    mean_distance = np.mean(distance_matrix)
    std_distance = np.std(distance_matrix)
    normalized_distances = (distance_matrix - mean_distance) / (std_distance + 1e-6)
    
    # Normalize interaction scores
    interaction_scores = np.sum(1 / np.maximum(1e-6, distance_matrix), axis=1) + np.sum(1 / np.maximum(1e-6, distance_matrix), axis=0)
    max_interaction = np.max(interaction_scores)
    normalized_interaction = (interaction_scores - max_interaction) / (max_interaction - min(interaction_scores) + 1e-6)
    
    # Adjust the heuristic values with normalized data and introduce noise for exploration
    noise = np.random.normal(0, 0.1, distance_matrix.shape)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Use a weighted combination of adjustments
                adjustment_weights = np.array([0.2, 0.3, 0.3, 0.2])
                heuristic_value = (distance_matrix[i][j] + 
                                   adjustment_weights[0] * normalized_degrees[i] * normalized_degrees[j] +
                                   adjustment_weights[1] * normalized_usage[i] * normalized_usage[j] +
                                   adjustment_weights[2] * normalized_distances[i][j] +
                                   adjustment_weights[3] * normalized_interaction[i] * normalized_interaction[j])
                
                # Introduce noise for exploration
                heuristic_value += noise[i][j]
                
                # Non-linear scaling to prevent overfitting
                heuristic_value = np.tanh(heuristic_value)
                
                # Avoid negative adjustments by ensuring non-negative output
                heuristic_matrix[i][j] = np.maximum(heuristic_value, 0)
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
