```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with the same values as the distance matrix
    heuristic_matrix = np.copy(distance_matrix)
    
    # Calculate edge usage
    edge_usage = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            edge_usage[i, j] += 1
            if i != j:
                edge_usage[j, i] += 1
    
    # Adjust heuristic values based on edge usage and neighborhood influence
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the average usage in the neighborhood
                neighborhood_usage = np.sum(edge_usage[i, max(0, j-1):min(distance_matrix.shape[1], j+2)])
                # Adjust the heuristic value based on the usage
                heuristic_matrix[i, j] *= (1 + neighborhood_usage / (edge_usage[i, j] + 1))
    
    # Ensure the heuristic matrix does not encourage overly large distances
    min_value = np.min(heuristic_matrix)
    if min_value > 0:
        heuristic_matrix = heuristic_matrix / min_value
    
    return heuristic_matrix
```
