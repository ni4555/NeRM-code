```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_vertices = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    total_weight = np.sum(distance_matrix)
    
    # Incentivize high-degree edges and penalize low-degree ones
    # Use logarithmic scaling to avoid the problem of very large numbers
    adjusted_distances = distance_matrix + (np.log(degrees + 1) - np.log(num_vertices)) * (total_weight / (num_vertices * np.sum(degrees + 1)))
    
    # Incentivize higher variance in distances
    distance_variance = np.var(distance_matrix)
    variance_incentive = distance_variance / np.var(adjusted_distances)
    
    # Ensure that the adjusted distances do not become negative
    adjusted_distances = np.maximum(adjusted_distances, 0)
    
    # Combine distance adjustments with variance incentive
    heuristic_matrix = adjusted_distances * variance_incentive
    
    # Ensure that no self-loops have a non-zero heuristic
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
