```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate edge usage frequency
    edge_usage = np.zeros_like(distance_matrix, dtype=int)
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):
            edge_usage[i][j] += 1
            edge_usage[j][i] += 1

    # Normalize the usage frequency to get a relative usage frequency
    relative_usage = edge_usage / edge_usage.sum()

    # Adjust the distance matrix by adding a penalty based on relative usage
    adjusted_distance_matrix = distance_matrix + relative_usage * 0.5

    # The adjusted distances now represent the "badness" of including each edge
    bad_to_include_matrix = adjusted_distance_matrix

    return bad_to_include_matrix
```
