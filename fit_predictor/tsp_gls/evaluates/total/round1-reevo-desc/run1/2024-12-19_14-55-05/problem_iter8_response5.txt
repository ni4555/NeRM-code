```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Constants for loop penalty
    loop_penalty_factor = 0.1
    # Constants for global large distance penalty
    global_large_distance_penalty = 1e6
    # Constants for structure normalization
    structure_penalty_factor = 0.01
    # Constants for diversity
    diversity_factor = 1e-3

    # Loop penalty based on relative distance
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate direct and loop distances
                loop_distance = distance_matrix[i, j] + distance_matrix[j, np.roll(i, 1)] + distance_matrix[np.roll(i, 1), j]
                direct_distance = distance_matrix[i, np.roll(i, 1)]
                # Apply loop penalty if the loop is longer than a factor of the direct distance
                heuristics[i, j] += loop_penalty_factor * (loop_distance - direct_distance)

    # Global large distance penalty relative to the minimum distance in the matrix
    min_distance = np.min(distance_matrix)
    large_distances = distance_matrix > min_distance * global_large_distance_penalty
    heuristics[large_distances] = global_large_distance_penalty - min_distance * global_large_distance_penalty

    # Normalize based on the average distance of a node to all others, excluding self
    for i in range(num_nodes):
        average_distance = np.sum(distance_matrix[i, :num_nodes]) / (num_nodes - 1)
        heuristics[i, :] += structure_penalty_factor / average_distance

    # Diversity by considering frequency of visited edges
    visited_count = np.sum(distance_matrix > 0, axis=0)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] += diversity_factor / (visited_count[j] + 1)

    return heuristics
```
