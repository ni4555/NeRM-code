```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with the distance matrix
    heuristic_matrix = np.copy(distance_matrix)
    
    # Apply a penalty to long edges
    long_edge_penalty = 1 + np.where(distance_matrix > 100, (distance_matrix - 100) / 100, 0)
    heuristic_matrix *= long_edge_penalty
    
    # Apply a penalty to edges that lead to high connectivity (more edges in the path)
    # Count the number of times each edge is present in the path
    path_counts = np.bincount(np.ravel(distance_matrix), minlength=distance_matrix.shape[0]**2)
    path_counts = path_counts.reshape(distance_matrix.shape)
    high_connectivity_penalty = np.where(path_counts > 1, 2, 1)
    heuristic_matrix *= high_connectivity_penalty
    
    # Apply a penalty to self-loops
    self_loop_penalty = np.where(np.eye(distance_matrix.shape[0]) == 1, 3, 1)
    heuristic_matrix *= self_loop_penalty
    
    # Non-linear transformation to emphasize high differences
    non_linear_transform = np.sqrt(distance_matrix)
    heuristic_matrix *= non_linear_transform
    
    return heuristic_matrix
```
