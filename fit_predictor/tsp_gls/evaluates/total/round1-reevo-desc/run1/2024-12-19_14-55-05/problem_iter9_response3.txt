```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Introduce a penalty for long loops relative to direct distances
    loop_penalty_factor = 0.1
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_distance = distance_matrix[i, j] + distance_matrix[j, np.roll(i, 1)] + distance_matrix[np.roll(i, 1), j]
                direct_distance = distance_matrix[i, np.roll(i, 1)]
                heuristics[i, j] += loop_penalty_factor * (loop_distance - direct_distance)

    # Introduce a global penalty for large distances relative to the minimum distance in the matrix
    min_distance = np.min(distance_matrix)
    heuristics[distance_matrix > min_distance] = (distance_matrix - min_distance)

    # Calculate median distance to normalize and encourage short distances
    median_distance = np.median(distance_matrix[distance_matrix > 0])
    heuristics[distance_matrix > 0] = distance_matrix[distance_matrix > 0] / median_distance

    # Encourage diversity by favoring less frequently visited nodes
    diversity_factor = 1e-3
    visited_count = np.sum(distance_matrix > 0, axis=1)
    frequency_penalty = diversity_factor / (visited_count + 1)
    heuristics[distance_matrix > 0] += frequency_penalty

    return heuristics
```
