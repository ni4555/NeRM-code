```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Loop penalty relative to direct distance
    loop_penalty_factor = 0.1
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_distance = distance_matrix[i, j] + distance_matrix[j, (i + 1) % num_nodes] + distance_matrix[(i + 1) % num_nodes, j]
                direct_distance = distance_matrix[i, (i + 1) % num_nodes]
                heuristics[i, j] += loop_penalty_factor * (loop_distance - direct_distance)

    # Normalize by reference distance
    median_distance = np.median(distance_matrix[distance_matrix > 0])
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] = heuristics[i, j] / (median_distance + 1e-8)  # Avoid division by zero

    # Promote diversity with frequency adjustments
    frequency_factor = 1e-3
    visited_count = np.sum(distance_matrix > 0, axis=0)
    visited_count[visited_count == 0] = 1  # Avoid division by zero
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] += frequency_factor * (1 / visited_count[j])

    return heuristics
```
