```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Median-based penalty to encourage selecting edges around the median
    median_distance = np.median(np.triu(distance_matrix, k=1))
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] += abs(distance_matrix[i, j] - median_distance)

    # Frequency-based diversity to avoid repeating the same edges
    edge_frequency = np.sum(distance_matrix > 0, axis=0)
    heuristics /= (1 + edge_frequency)

    # Normalize based on the domain structure
    max_distance = np.max(distance_matrix)
    heuristics /= max_distance

    return heuristics
```
