```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # It's bad to include long edges and edges that are already part of the shortest
    # path from one of the two nodes. We'll use the Floyd-Warshall algorithm to
    # find the shortest paths between all pairs of nodes and calculate the
    # heuristic.
    n = distance_matrix.shape[0]
    all_pairs_shortest_path = np.full((n, n), np.inf)
    np.fill_diagonal(all_pairs_shortest_path, 0)
    np.copyto(all_pairs_shortest_path, distance_matrix)

    for k in range(n):
        for i in range(n):
            for j in range(n):
                all_pairs_shortest_path[i][j] = min(all_pairs_shortest_path[i][j], 
                                                   all_pairs_shortest_path[i][k] + all_pairs_shortest_path[k][j])

    # Calculate the heuristic based on the shortest paths
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path_length = all_pairs_shortest_path[i][j]
                edge_length = distance_matrix[i][j]
                heuristic_matrix[i][j] = edge_length - shortest_path_length

    return heuristic_matrix
```
