```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Introduce a balanced penalty for loops, preferring direct paths
    loop_penalty_factor = 0.1
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                direct_distance = distance_matrix[i, j]
                loop_distance = distance_matrix[i, j] + distance_matrix[j, np.roll(i, 1)] + distance_matrix[np.roll(i, 1), j]
                # Apply a penalty if the loop distance is significantly larger than the direct distance
                heuristics[i, j] += loop_penalty_factor * max(0, loop_distance - direct_distance)

    # Normalize the penalties using the minimum distance in the matrix to avoid bias towards small numbers
    min_distance = np.min(distance_matrix)
    heuristics /= min_distance

    # Structure-based normalization to emphasize highly connected nodes
    structure_factor = 1.5
    for i in range(num_nodes):
        # Penalties for self-loops and for edges that connect to the least connected nodes
        heuristics[i, i] += structure_factor  # Self-loop penalty
        least_connected_indices = np.argpartition(distance_matrix[i], -2)[-2:]
        heuristics[i, least_connected_indices] *= structure_factor

    # Diversity factor to encourage sparsity in the path
    diversity_factor = 1e-3
    for i in range(num_nodes):
        for j in range(num_nodes):
            if distance_matrix[i, j] == 0:  # Unvisited edges
                # Increase penalty for edges between less frequently visited nodes
                heuristics[i, j] += diversity_factor / (np.sum(distance_matrix[i, :] > 0) * np.sum(distance_matrix[:, j] > 0))

    return heuristics
```
