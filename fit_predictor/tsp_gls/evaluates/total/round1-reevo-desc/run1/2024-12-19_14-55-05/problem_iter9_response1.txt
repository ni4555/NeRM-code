```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Introduce a penalty for long loops relative to the median direct distances
    median_distance = np.median(np.triu(distance_matrix) + np.triu(distance_matrix, k=1))
    loop_penalty_factor = 0.1
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_distance = distance_matrix[i, j] + distance_matrix[j, np.roll(i, 1)] + distance_matrix[np.roll(i, 1), j]
                direct_distance = distance_matrix[i, np.roll(i, 1)]
                heuristics[i, j] += loop_penalty_factor * (loop_distance - direct_distance)

    # Introduce a global penalty for large distances relative to the median distance
    global_large_distance_penalty = 1e6
    heuristics[distance_matrix > global_large_distance_penalty] = global_large_distance_penalty - median_distance

    # Introduce a diversity factor based on the inverse of the frequency of the edge
    frequency_factor = 1e-3
    frequency_matrix = np.sum(distance_matrix > 0, axis=0)
    heuristics += frequency_factor * frequency_matrix / (num_nodes * (num_nodes - 1) - frequency_matrix)

    return heuristics
```
