```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Consider the node that, when added to the path, would add the least additional distance to the path.
    # This heuristic assumes that we are adding a node to an existing path.
    m, n = distance_matrix.shape
    heuristics = np.zeros_like(distance_matrix)
    
    # Find the shortest edge that does not cross another edge in the path.
    for i in range(m):
        for j in range(n):
            if i != j:
                # Check if adding this edge does not form a cycle
                has_cycle = False
                for k in range(m):
                    if i != k and j != k:
                        if (i, k) in distance_matrix[k].nonzero()[0] or (k, j) in distance_matrix[i].nonzero()[0]:
                            has_cycle = True
                            break
                if not has_cycle:
                    heuristics[i, j] = distance_matrix[i, j] / (m + n)
    return heuristics
```
