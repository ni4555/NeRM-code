```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance for a full circuit
    full_circuit_distance = np.sum(distance_matrix) - np.trace(distance_matrix)
    
    # Reward for not including each edge is proportional to the savings if that edge is skipped
    # Savings is the difference between the full circuit distance and the distance including that edge
    savings = np.full_like(distance_matrix, full_circuit_distance)
    np.fill_diagonal(savings, 0)  # No savings when including the diagonal (self-loops)
    savings -= distance_matrix
    
    # Make sure we don't return negative rewards (no penalty for not including an edge)
    savings = np.maximum(savings, 0)
    
    # Normalize the savings to get a reward between 0 and 1
    max_savings = np.max(savings)
    rewards = savings / max_savings if max_savings > 0 else savings
    
    return rewards
```
