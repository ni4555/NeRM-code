```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    max_degree = np.max(np.sum(distance_matrix, axis=0))
    degree_matrix = np.bincount(distance_matrix.flatten(), minlength=distance_matrix.size) / distance_matrix.size

    long_edge_penalty = max_distance - distance_matrix
    short_edge_penalty = distance_matrix - min_distance
    high_degree_penalty = (degree_matrix > 1).astype(float)  # Nodes with degree more than 1

    combined_penalty = np.maximum(long_edge_penalty, np.maximum(short_edge_penalty, high_degree_penalty))
    return combined_penalty
```
