```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Define a penalty for edges that are part of the longest cycle
    longest_cycle = np.sort(distance_matrix.sum(axis=0))[-2]
    cycle_penalty = np.where(distance_matrix == longest_cycle, -np.inf, distance_matrix)
    
    # Define a penalty for edges that create a cycle with high average edge weight
    # which may indicate a locally optimal cycle
    for i in range(distance_matrix.shape[0]):
        cycle_candidate = distance_matrix[i]
        for j in range(i + 1, distance_matrix.shape[0]):
            cycle_candidate = np.append(cycle_candidate, distance_matrix[j])
        avg_cycle_weight = cycle_candidate.mean()
        cycle_penalty[i] += avg_cycle_weight * 100
        cycle_penalty[j] += avg_cycle_weight * 100

    return cycle_penalty
```
