```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the range of distances
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    
    # Avoid redundant computations by calculating the range only once
    distance_range = max_distance - min_distance
    
    # Apply the penalties based on the relative position of each distance within the range
    penalties = np.clip(distance_matrix - min_distance, 0, None)
    relative_length_penalty = penalties / distance_range
    
    # Incorporate the degree of connectivity for each node
    node_connectivity = np.sum(distance_matrix, axis=1)
    connectivity_penalty = (node_connectivity - np.mean(node_connectivity)) ** 2
    
    # Combine the penalties with a fixed weight for connectivity
    combined_penalty = relative_length_penalty + 0.5 * connectivity_penalty
    return combined_penalty
```
