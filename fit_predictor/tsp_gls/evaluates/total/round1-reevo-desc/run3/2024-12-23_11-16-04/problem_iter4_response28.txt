```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance between all pairs of nodes
    average_distance = distance_matrix.mean()
    
    # Initialize the heuristics matrix
    heuristics = np.zeros_like(distance_matrix)
    
    # Calculate the longest cycle in the distance matrix
    longest_cycle = np.sort(distance_matrix.sum(axis=0))[-2]
    
    # Assign a high penalty to edges that are part of the longest cycle
    heuristics[distance_matrix == longest_cycle] = -np.inf
    
    # Assign a penalty to edges that are significantly longer than the average distance
    long_edges = distance_matrix > average_distance * 1.5
    heuristics[long_edges] = np.sqrt(distance_matrix[long_edges] - average_distance)
    
    # Calculate the total distance of the shortest path cycle
    shortest_cycle = np.sort(distance_matrix.sum(axis=0))[0]
    
    # Subtract the shortest cycle distance from the penalties of long edges
    # to avoid double-penalty for edges that are part of the shortest cycle
    heuristics[long_edges] -= shortest_cycle
    
    # Calculate the total distance of the second shortest cycle
    second_shortest_cycle = np.sort(distance_matrix.sum(axis=0))[1]
    
    # Assign a penalty to edges that are part of the second shortest cycle
    heuristics[distance_matrix == second_shortest_cycle] = -np.inf
    
    return heuristics
```
