```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    mean_distance = np.mean(distance_matrix)
    
    # Define relative distances to neighbors
    relative_distances = distance_matrix - mean_distance
    
    # Define a penalty based on the distance from the mean
    distance_from_mean_penalty = np.abs(relative_distances)
    
    # Introduce a connectivity heuristic
    # Nodes that have few connections can be penalized more heavily
    connectivity = np.sum(distance_matrix, axis=1)
    connectivity_penalty = np.where(connectivity < (len(distance_matrix) / 2), connectivity, 0)
    
    # Combine the penalties using a weighted average
    # Adjust the weights based on the problem's characteristics
    combined_penalty = 0.3 * distance_from_mean_penalty + 0.4 * connectivity_penalty + 0.3 * (distance_matrix > max_distance / 2)
    return combined_penalty
```
