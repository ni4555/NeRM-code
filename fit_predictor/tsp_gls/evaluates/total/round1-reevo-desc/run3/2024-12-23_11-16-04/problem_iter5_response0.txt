```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # Calculate the average distance from each node to any other node
    avg_distances = np.mean(distance_matrix, axis=1)
    # Balance the metrics by considering both the minimum and average distances
    balanced_penalty = 0.5 * (distance_matrix - min_distances + 1e-6) + 0.5 * (distance_matrix - avg_distances + 1e-6)
    # Use domain knowledge to penalize long distance edges more heavily
    domain_factor = 2
    # Use a tuning factor to adapt the complexity of the heuristic
    tuning_factor = 0.1
    # The final heuristic includes a balance of the above metrics
    return domain_factor * tuning_factor * balanced_penalty
```
