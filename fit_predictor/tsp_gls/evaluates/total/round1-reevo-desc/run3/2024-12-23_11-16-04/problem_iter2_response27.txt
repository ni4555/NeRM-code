```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance of the longest shortest path cycle
    longest_cycle = np.sort(distance_matrix.sum(axis=0))[-2]
    
    # Calculate the average distance between all pairs of nodes
    average_distance = distance_matrix.mean()
    
    # It's bad to include edges that are part of the longest shortest path cycle
    # and it's also bad to include edges that are significantly longer than the average distance
    # This heuristic considers both the longest cycle and the average distance
    cycle_penalty = np.where(distance_matrix == longest_cycle, -np.inf, distance_matrix)
    long_edge_penalty = np.where(distance_matrix > average_distance * 1.5, distance_matrix, 0)
    return np.maximum(cycle_penalty, long_edge_penalty)
```
