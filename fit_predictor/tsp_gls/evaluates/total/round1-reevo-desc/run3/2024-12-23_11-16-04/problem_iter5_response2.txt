```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    # Calculate the average distance between all pairs of nodes
    average_distance = np.mean(distance_matrix)
    # Define a balance factor for the penalties
    balance_factor = 0.5
    
    # Use both the minimum distance and the average distance as penalties
    # Include a balance factor to weigh the two penalties
    penalties = (distance_matrix - min_distances) + (distance_matrix - average_distance)
    # Apply a penalty reduction for high-quality solutions (lower distances)
    quality_penalty = 1 - np.exp(-penalties / average_distance)
    
    # Combine penalties with the balance factor and normalize the values
    return balance_factor * (penalties + quality_penalty) + 1e-6
```
