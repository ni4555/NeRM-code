```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic: Balance the penalty for long and short edges
    # Define a penalty factor for short edges to avoid dead-ends
    # and a higher penalty factor for long edges to discourage them
    penalty_factor_long = 5
    penalty_factor_short = 1

    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    long_edge_penalty = penalty_factor_long * (max_distance - distance_matrix)
    short_edge_penalty = penalty_factor_short * (distance_matrix - min_distance)
    short_edge_penalty[short_edge_penalty <= 0] = 0  # Ensure no negative penalties

    # Combine the penalties
    return np.maximum(long_edge_penalty, short_edge_penalty)
```
