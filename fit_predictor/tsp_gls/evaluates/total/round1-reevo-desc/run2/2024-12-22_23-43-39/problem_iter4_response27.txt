```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Calculate the diagonal (self-loops) and the distance matrix without self-loops
    diag = np.diag(distance_matrix)
    distance_matrix_no_diag = np.copy(distance_matrix)
    np.fill_diagonal(distance_matrix_no_diag, np.inf)
    
    # Calculate the minimum distance for each edge
    min_distances = np.min(distance_matrix_no_diag, axis=0)
    
    # Normalize the distance matrix to its respective minimum distance
    normalized_distances = distance_matrix / min_distances
    
    # Incorporate node connectivity penalties by penalizing connections to high degree nodes
    degree_matrix = np.sum(distance_matrix, axis=0)
    degree_penalty = (degree_matrix / min_distances) ** 2  # Normalize by min distance
    
    # Incorporate structural penalties to avoid highly connected subgraphs
    edge_contributions = distance_matrix_no_diag.sum(axis=1)
    structural_penalty = (edge_contributions / min_distances) ** 2  # Normalize by min distance
    
    # Calculate the combined penalty
    combined_penalty = (normalized_distances + degree_penalty + structural_penalty) / \
                       (normalized_distances + degree_penalty + structural_penalty).max()
    
    # Encourage exploration by assigning high heuristics to bad candidate edges
    heuristics = 1 - combined_penalty
    
    # Heuristics for self-loops should be high
    heuristics[diag > 0] = 1
    
    return heuristics
```
