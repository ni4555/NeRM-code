```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic as the sum of the distance to the nearest neighbor for both nodes
                # and a penalty for the direct distance between the nodes
                heuristics_matrix[i, j] = (np.min(distance_matrix[i, ~np.isin(np.arange(n), [i])]) +
                                           np.min(distance_matrix[j, ~np.isin(np.arange(n), [j])]) +
                                           distance_matrix[i, j] * 0.1)
            else:
                # Set the heuristic value to a high number if it's the same node (self-loop)
                heuristics_matrix[i, j] = float('inf')

    # Incorporate domain knowledge: adding a penalty for long edges
    long_edge_penalty = 0.5
    long_edges = np.where(distance_matrix > 2 * np.average(distance_matrix))
    heuristics_matrix[long_edges] += distance_matrix[long_edges] * long_edge_penalty

    return heuristics_matrix
```
