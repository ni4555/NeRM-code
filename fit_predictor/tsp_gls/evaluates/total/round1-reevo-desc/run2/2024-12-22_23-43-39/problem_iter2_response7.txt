```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic using a combination of minimum distance for each edge
    # and a penalty for edges that deviate from the shortest path tree.
    
    # Calculate the diagonal of the distance matrix (no distance to itself)
    diag = np.diag(distance_matrix)
    
    # Calculate the distance matrix without self-loops
    distance_matrix_no_diag = np.copy(distance_matrix)
    np.fill_diagonal(distance_matrix_no_diag, np.inf)
    
    # Calculate the minimum distance for each edge (excluding self-loops)
    min_distances = np.min(distance_matrix_no_diag, axis=0)
    
    # Normalize the distance to its respective minimum distance
    normalized_distances = distance_matrix / min_distances
    
    # Introduce a penalty for edges that are longer than the shortest path tree
    penalty = np.where(normalized_distances < 1, 0, (normalized_distances - 1) ** 2)
    
    # Encourage the search to explore longer edges later in the path
    heuristics = 1 / (normalized_distances + penalty)
    
    return heuristics
```
