```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Balance between local and global insights
                local_min = np.min(distance_matrix[i, distance_matrix[i] != float('inf')])
                global_min = np.min(distance_matrix[:, i][distance_matrix[:, i] != float('inf')])

                # Domain-specific penalty for highly connected nodes
                domain_penalty = np.sum(distance_matrix[i, distance_matrix[i] != float('inf')]) / n

                # Normalize the heuristic value
                normalized_heuristic = (local_min + global_min + distance_matrix[i, j]) / (1 + domain_penalty)
                heuristics_matrix[i, j] = normalized_heuristic
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
