```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Consider the average distance from node i to all nodes that are not node j
                # and the distance from node j to all nodes that are not node i
                # as well as the distance between the two nodes
                local_avg = np.mean(distance_matrix[i, distance_matrix[i] != float('inf')])
                global_avg = np.mean(distance_matrix[distance_matrix[:, i] != float('inf'), i])
                domain_dist = distance_matrix[i, j]
                heuristics_matrix[i, j] = (local_avg + global_avg + domain_dist) / 3
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
