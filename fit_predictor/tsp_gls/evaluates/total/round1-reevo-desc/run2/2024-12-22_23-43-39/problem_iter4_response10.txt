```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic based on the sum of the distances to the nearest neighbors
                # for both nodes, with a bias towards including edges with a higher difference from
                # the minimum distance to the nearest neighbor
                distances_to_i = distance_matrix[i, ~np.isin(np.arange(n), [i])]
                distances_to_j = distance_matrix[j, ~np.isin(np.arange(n), [j])]
                nearest_neighbor_dist_i = np.min(distances_to_i)
                nearest_neighbor_dist_j = np.min(distances_to_j)
                edge_diff_i = np.abs(distance_matrix[i, j] - nearest_neighbor_dist_i)
                edge_diff_j = np.abs(distance_matrix[i, j] - nearest_neighbor_dist_j)
                heuristics_matrix[i, j] = (nearest_neighbor_dist_i + nearest_neighbor_dist_j +
                                           0.5 * (edge_diff_i + edge_diff_j))
            else:
                # Set the heuristic value to a high number if it's the same node (self-loop)
                heuristics_matrix[i, j] = float('inf')

    # Incorporate domain knowledge: adding a penalty for long edges
    long_edge_penalty = 0.5
    threshold = 2 * np.average(distance_matrix)
    long_edges = distance_matrix > threshold
    heuristics_matrix[long_edges] += distance_matrix[long_edges] * long_edge_penalty

    return heuristics_matrix
```
