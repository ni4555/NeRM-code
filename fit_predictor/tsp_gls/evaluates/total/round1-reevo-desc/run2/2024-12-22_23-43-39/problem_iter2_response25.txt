```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the nearest neighbor heuristic
    for i in range(n):
        # Find the indices of the two nearest neighbors
        nearest_neighbors = np.argsort(distance_matrix[i, :])
        nearest_neighbor1, nearest_neighbor2 = nearest_neighbors[1], nearest_neighbors[2]
        
        # Use the average distance to the two nearest neighbors as a heuristic
        heuristics_matrix[i, nearest_neighbor1] = distance_matrix[i, nearest_neighbor1] - np.mean([distance_matrix[i, nearest_neighbor1], distance_matrix[i, nearest_neighbor2]])
        heuristics_matrix[i, nearest_neighbor2] = distance_matrix[i, nearest_neighbor2] - np.mean([distance_matrix[i, nearest_neighbor1], distance_matrix[i, nearest_neighbor2]])
    
    # Set the diagonal to zero since the distance to itself is not considered
    np.fill_diagonal(heuristics_matrix, 0)
    
    return heuristics_matrix
```
