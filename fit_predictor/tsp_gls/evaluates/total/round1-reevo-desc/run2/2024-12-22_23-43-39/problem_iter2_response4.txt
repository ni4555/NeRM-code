```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # For each pair of nodes, calculate the heuristic as the sum of the distances
    # to the nearest neighbor and the farthest node
    for i in range(n):
        min_dist = np.min(distance_matrix[i, :])
        max_dist = np.max(distance_matrix[i, :])
        heuristics_matrix[i, :] = distance_matrix[i, :] + (max_dist - min_dist)
    
    # Normalize the heuristics to be between 0 and 1
    heuristics_matrix = (heuristics_matrix - np.min(heuristics_matrix)) / (np.max(heuristics_matrix) - np.min(heuristics_matrix))
    
    return heuristics_matrix
```
