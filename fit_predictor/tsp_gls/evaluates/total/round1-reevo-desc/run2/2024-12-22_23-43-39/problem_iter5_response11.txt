```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic by considering the shortest path that avoids the
                # edge (i, j) if possible, and uses the shortest local and domain paths
                # as a base, with additional penalties for using less popular nodes
                local_min = np.min(distance_matrix[i, distance_matrix[i] != float('inf')])
                domain_min = np.min(distance_matrix[distance_matrix[:, i] != float('inf'), i])
                penalty = 0.1 if np.any(distance_matrix[i, :] == distance_matrix[j, :]) else 0
                heuristics_matrix[i, j] = (local_min + domain_min + distance_matrix[i, j]) / 2 + penalty
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
