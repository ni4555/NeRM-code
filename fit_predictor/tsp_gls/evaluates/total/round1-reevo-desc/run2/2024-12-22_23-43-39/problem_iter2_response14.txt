```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the local distance for each node, which is the minimum distance to any other node
    local_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the relative cost by dividing the distance to each node by the local distance
    relative_costs = distance_matrix / local_distances
    
    # Adjust the relative costs by adding the local distance to encourage shorter paths
    adjusted_costs = relative_costs + local_distances
    
    # Use a small positive value to avoid division by zero
    epsilon = 1e-6
    heuristics_matrix = 1 / (adjusted_costs + epsilon)
    
    return heuristics_matrix
```
