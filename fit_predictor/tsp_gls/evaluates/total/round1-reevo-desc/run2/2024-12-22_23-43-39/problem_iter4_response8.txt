```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with the same shape as the distance matrix
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the sum of distances for each row and column
    row_sums = np.sum(distance_matrix, axis=1)
    col_sums = np.sum(distance_matrix, axis=0)
    
    # Calculate the minimum distances for each row and column
    min_row_distances = np.min(distance_matrix, axis=1)
    min_col_distances = np.min(distance_matrix, axis=0)
    
    # For each edge, calculate the heuristic value based on the sum of distances
    # and the minimum distances to guide the search
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                # Avoid the same node and self-loops
                if i == j:
                    heuristics_matrix[i, j] = float('inf')
                else:
                    # Calculate the heuristic based on the sum of distances
                    # and add a penalty for edges that are longer than the shortest path tree
                    heuristics_value = (row_sums[i] + col_sums[j] - distance_matrix[i, j])
                    heuristics_value += (distance_matrix[i, j] - np.min([min_row_distances[i], min_col_distances[j]]))
                    heuristics_matrix[i, j] = 1 / (1 + heuristics_value)
            else:
                # Set the heuristic value to a high number for self-loops
                heuristics_matrix[i, j] = float('inf')
    
    return heuristics_matrix
```
