```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Introduce a relative penalty for long loops
    loop_penalty_factor = 0.1
    median_loop_length = np.median(distance_matrix[:, :num_nodes-1] + distance_matrix[:, 1:] + distance_matrix[:, 1:2].roll(1, axis=1))
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_length = distance_matrix[i, j] + distance_matrix[j, np.roll(i, 1)] + distance_matrix[np.roll(i, 1), j]
                heuristics[i, j] += loop_penalty_factor * (loop_length - median_loop_length)

    # Introduce a penalty for large distances relative to the median distance in the matrix
    median_distance = np.median(distance_matrix[distance_matrix > 0])
    large_distance_penalty = 1e6
    heuristics[distance_matrix > median_distance * large_distance_penalty] = (large_distance_penalty - median_distance * large_distance_penalty)

    # Encourage diversity by considering the number of times each node is visited
    diversity_factor = 1e-3
    visited_count = np.sum(distance_matrix > 0, axis=1)
    for i in range(num_nodes):
        for j in range(num_nodes):
            heuristics[i, j] += diversity_factor / (visited_count[j] + 1)

    return heuristics
```
