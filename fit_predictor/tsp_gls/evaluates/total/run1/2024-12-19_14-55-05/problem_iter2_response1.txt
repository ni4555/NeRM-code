```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Introduce a base penalty based on the relative distance to the mean
    base_penalty = distance_matrix - distance_matrix.mean()
    
    # Apply a greater penalty to long edges relative to the mean
    long_edge_penalty = np.where(base_penalty > 0, base_penalty * 2, base_penalty)
    
    # Calculate the number of edges between each pair of cities
    edge_count_matrix = np.where(distance_matrix > 0, 1, 0)
    edge_count_matrix = np.sum(edge_count_matrix, axis=1) + np.sum(edge_count_matrix, axis=0) - len(distance_matrix)
    
    # Apply a penalty for creating cycles by adding the number of edges traversed
    cycle_penalty = edge_count_matrix - 1
    
    # Introduce a penalty for traveling to an already visited city
    visited_penalty = edge_count_matrix + cycle_penalty
    
    # Combine penalties to form the heuristic matrix
    heuristic_matrix = long_edge_penalty + visited_penalty
    
    # Normalize the heuristic matrix to be between 0 and 1
    min_val = np.min(heuristic_matrix[heuristic_matrix > 0])
    max_val = np.max(heuristic_matrix[heuristic_matrix > 0])
    normalized_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    # Return a negative normalized matrix to simulate the cost
    return -normalized_matrix
```
