```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance
    total_distance = np.sum(distance_matrix)
    
    # Introduce a penalty for the total distance
    distance_penalty = -total_distance
    
    # Calculate the variance of the distances
    variance = np.var(distance_matrix)
    
    # Introduce a penalty for the variance to avoid loops
    variance_penalty = -variance
    
    # Calculate the average distance to the nearest neighbor
    nearest_neighbor_avg = np.average(distance_matrix, axis=1)
    
    # Introduce a penalty for longer average distances to nearest neighbors
    nearest_neighbor_penalty = nearest_neighbor_avg - np.mean(nearest_neighbor_avg)
    
    # Introduce a diversity factor to avoid local optima
    diversity_factor = np.sum(distance_matrix) / np.prod(distance_matrix.shape)
    
    # Combine all penalties into a single heuristic matrix
    heuristic_matrix = distance_penalty + variance_penalty + nearest_neighbor_penalty + diversity_factor
    
    # Normalize the heuristic matrix to be between 0 and 1
    min_val = np.min(heuristic_matrix[heuristic_matrix > 0])
    max_val = np.max(heuristic_matrix[heuristic_matrix > 0])
    normalized_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    # Return a negative normalized matrix to simulate the cost
    return -normalized_matrix
```
