```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Heuristic based on avoiding long loops and emphasizing shorter paths
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Loop through nodes in sequence to check for long loops
                for k in range(num_nodes):
                    next_node = (j + k) % num_nodes
                    prev_node = (j - k + num_nodes) % num_nodes
                    loop_distance = distance_matrix[i, j] + distance_matrix[j, next_node] + distance_matrix[next_node, i]
                    direct_distance = distance_matrix[i, prev_node]
                    
                    # Apply a penalty for long loops and larger gaps
                    heuristics[i, j] += loop_distance - direct_distance
                    heuristics[j, i] += loop_distance - direct_distance

    # Heuristic for large distances
    large_distance_penalty = 1e6
    heuristics[distance_matrix > large_distance_penalty] = large_distance_penalty - distance_matrix[distance_matrix > large_distance_penalty]

    # Heuristic for extremely short edges
    short_edge_penalty = 1e-6
    heuristics[distance_matrix < short_edge_penalty] = distance_matrix[distance_matrix < short_edge_penalty] - short_edge_penalty

    return heuristics
```
