```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    full_circuit_distance = np.sum(distance_matrix) - np.trace(distance_matrix)
    
    # Calculate the weight of each edge as the negative savings
    # Savings is the difference between the full circuit distance and the distance including that edge
    savings = full_circuit_distance - distance_matrix
    edge_weights = -np.maximum(savings, 0)  # No penalty for not including an edge
    
    # Normalize the weights to get a value between 0 and 1
    max_weight = np.max(edge_weights)
    normalized_weights = edge_weights / max_weight if max_weight > 0 else edge_weights
    
    return normalized_weights
```
