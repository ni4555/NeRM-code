```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Introduce a context-aware penalty for edges between closely connected nodes
                context_score = np.mean(distance_matrix[np.isin(np.arange(num_nodes), [i, j, i-1, j-1, i+1, j+1])])
                
                # Balance the penalty between the "loop" and "context" criteria
                loop_distance = distance_matrix[i, j] + distance_matrix[j, (i + 1) % num_nodes] + distance_matrix[(i + 1) % num_nodes, j]
                direct_distance = distance_matrix[i, (i + 1) % num_nodes]
                balance_factor = 0.5
                
                # Apply a penalty that considers both the loop and context
                heuristics[i, j] = (loop_distance - direct_distance) + balance_factor * (context_score - direct_distance)

    # Encourage diversity by adding a penalty to highly repetitive edge patterns
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the number of nodes that share this edge
                shared_nodes = np.sum(distance_matrix[:, j] == distance_matrix[i, j])
                # Apply a diversity penalty if the edge is highly repetitive
                diversity_penalty = 10 if shared_nodes > 3 else 0
                heuristics[i, j] += diversity_penalty

    return heuristics
```
