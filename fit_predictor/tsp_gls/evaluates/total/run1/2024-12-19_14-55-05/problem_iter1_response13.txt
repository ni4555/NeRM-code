```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic uses the Manhattan distance to measure the "badness" of an edge
    # This can be creative because it ignores the actual distance and focuses on
    # the total "displacement" of the nodes if they were laid out in a grid pattern
    
    # Find the total number of cities
    num_cities = distance_matrix.shape[0]
    
    # Create a grid-like "distance" matrix based on Manhattan distance
    # This is a rough estimate of the total "displacement" for each edge
    displacement_matrix = np.zeros_like(distance_matrix)
    for i in range(num_cities):
        for j in range(num_cities):
            displacement_matrix[i, j] = abs(i - j) + abs(i // num_cities - j // num_cities)
    
    # Return the Manhattan "distance" matrix as the heuristic
    return displacement_matrix
```
