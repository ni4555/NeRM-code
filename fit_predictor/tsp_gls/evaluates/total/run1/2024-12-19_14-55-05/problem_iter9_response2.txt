```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Introduce a penalty for long loops relative to direct distances
    loop_penalty_factor = 0.1
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the loop distance and direct distance
                loop_distance = distance_matrix[i, j] + distance_matrix[j, np.roll(i, 1)] + distance_matrix[np.roll(i, 1), j]
                direct_distance = distance_matrix[i, np.roll(i, 1)]
                # Apply a relative penalty if the loop distance is larger than a certain factor of the direct distance
                heuristics[i, j] += loop_penalty_factor * (loop_distance - direct_distance)

    # Introduce a global penalty for large distances relative to the minimum distance in the matrix
    global_large_distance_penalty = 1e6
    min_distance = np.min(distance_matrix)
    heuristics[distance_matrix > min_distance * global_large_distance_penalty] = global_large_distance_penalty - min_distance * global_large_distance_penalty

    # Introduce a diversity factor that balances frequency of visits
    diversity_factor = 1e-3
    visited_count = np.sum(distance_matrix > 0, axis=1)
    frequency_normalized = (visited_count + 1) ** -0.5
    heuristics += diversity_factor * (1 - frequency_normalized)

    return heuristics
```
