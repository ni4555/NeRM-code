```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Loop penalty to discourage forming loops
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_distance = distance_matrix[i, j] + distance_matrix[j, (i + 1) % num_nodes]
                direct_distance = distance_matrix[i, (i + 1) % num_nodes]
                heuristics[i, j] += abs(loop_distance - direct_distance)

    # Large distance penalty relative to the minimum distance
    min_distance = np.min(distance_matrix)
    large_distance_threshold = min_distance * 1e6
    heuristics[distance_matrix > large_distance_threshold] += large_distance_threshold - min_distance

    # Frequency-based diversity to prevent excessive repetition of edges
    edge_frequency = np.sum(distance_matrix > 0, axis=0)
    diversity_factor = 1e-3
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] += diversity_factor / (edge_frequency[i] * edge_frequency[j])

    # Normalize the heuristic values to ensure they are non-negative
    heuristics = np.maximum(heuristics, 0)

    return heuristics
```
