```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the minimum pairwise distances for each node
    min_distances = np.min(distance_matrix, axis=0)
    
    # Compute the average edge length for penalty purposes
    average_edge_length = np.mean(np.sum(distance_matrix, axis=0))
    
    # Compute a diversity measure for the nearest neighbors
    def compute_diversity(node_indices, node):
        distances = distance_matrix[node_indices, node]
        return np.std(distances)
    
    # Loop over each node
    for i in range(distance_matrix.shape[0]):
        # Get the indices of the minimum distances to all other nodes
        nearest_neighbors = np.argsort(distance_matrix[i, :])[:5]
        diversity = compute_diversity(nearest_neighbors, i)
        
        # Update the heuristic based on the minimum pairwise distances
        for j in range(distance_matrix.shape[0]):
            if i != j:
                nearest_non_visited = np.argmin(distance_matrix[j, distance_matrix[:, j] > 0])
                # Update heuristic considering nearest non-visited node
                heuristics[i, j] = distance_matrix[i, j] + np.abs(distance_matrix[i, nearest_non_visited] - min_distances[nearest_non_visited])
                # Update heuristic considering diversity of nearest neighbors
                heuristics[i, j] += diversity
                # Apply a penalty for longer edges
                if distance_matrix[i, j] > average_edge_length:
                    heuristics[i, j] += distance_matrix[i, j] - average_edge_length
    
    # Normalize the heuristic matrix to ensure it is within the range of [0, 1]
    heuristics /= np.max(heuristics)
    
    return heuristics
```
