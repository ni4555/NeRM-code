```python
import numpy as np
from scipy.spatial.distance import pdist
from scipy.special import expit as sigmoid

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the pairwise Manhattan distances
    pairwise_distances = pdist(distance_matrix, metric='cityblock')
    
    # Normalize the distances to ensure they are within the range [0, 1]
    min_distance = np.min(pairwise_distances)
    max_distance = np.max(pairwise_distances)
    normalized_distances = (pairwise_distances - min_distance) / (max_distance - min_distance)
    
    # Apply a non-linear transformation to the normalized distances using a sigmoid function
    # to encourage exploration in the lower range and exploitation in the higher range
    heuristics = 1 / (1 + sigmoid(normalized_distances))
    
    # Adjust the heuristics matrix to match the input shape
    heuristics_matrix = squareform(heuristics)
    
    return heuristics_matrix
```
