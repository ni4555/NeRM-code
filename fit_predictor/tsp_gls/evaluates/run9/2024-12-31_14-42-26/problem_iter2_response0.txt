```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement a more sophisticated heuristic that incorporates
    # both the distance and the structure of the graph
    # while balancing local and global information
    n = distance_matrix.shape[0]
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the distance
                distance = distance_matrix[i, j]
                # Calculate the shortest distance to a common neighbor
                min_common_neighbor_distance = np.min(np.minimum(distance_matrix[i, :][distance_matrix[i, :] != distance],
                                                                distance_matrix[j, :][distance_matrix[j, :] != distance]))
                # Incorporate the graph structure by considering the shortest path to a common neighbor
                # and the average distance to all other neighbors
                avg_neighbor_distance = np.mean(distance_matrix[i, :][distance_matrix[i, :] != distance] +
                                                 distance_matrix[j, :][distance_matrix[j, :] != distance])
                # Adjust the weights for local and global information
                weight_local = 0.5
                weight_global = 0.5
                # The heuristic value is a combination of the above factors
                heuristics[i, j] = weight_local * (distance ** 0.5 + min_common_neighbor_distance) + \
                                  weight_global * avg_neighbor_distance
    
    return heuristics
```
