```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Calculate the sum of the minimum pairwise distances for each node
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Find the node k that minimizes the distance to i and j
            k = np.argmin(np.min(np.stack((distance_matrix[i], distance_matrix[j]), axis=0), axis=0))
            # Compute the heuristic as the weighted average of the distances to k
            # where the weight is the inverse of the distance from the node to k
            weight_i = 1 / distance_matrix[i, k] if distance_matrix[i, k] != 0 else 0
            weight_j = 1 / distance_matrix[j, k] if distance_matrix[j, k] != 0 else 0
            heuristics[i, j] = (weight_i * distance_matrix[i, k] + weight_j * distance_matrix[j, k]) / (weight_i + weight_j)
    
    # Normalize the heuristics to ensure a better distribution
    max_val = np.max(heuristics)
    min_val = np.min(heuristics)
    heuristics = (heuristics - min_val) / (max_val - min_val)
    
    # Apply a dampening factor to prevent too high values
    dampening_factor = 0.9
    heuristics = np.power(heuristics, dampening_factor)
    
    # Incorporate adaptive factors based on the structural properties of the graph
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Calculate the density of the neighborhood of node i
            neighborhood_density = np.sum(distance_matrix[i]) / (distance_matrix.shape[0] - 1)
            # Adjust the heuristic based on the neighborhood density
            if neighborhood_density > 0.5:
                heuristics[i, j] *= 0.8
    
    return heuristics
```
