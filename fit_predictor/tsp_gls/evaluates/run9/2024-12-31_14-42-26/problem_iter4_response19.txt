```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Define the number of nearest neighbors to consider
    num_neighbors = 3
    
    # Precompute the minimum pairwise distances among nodes
    min_distances = np.min(distance_matrix, axis=1)
    
    # Define a function to compute a weighted sum of features
    def compute_weighted_feature(edge_distance, avg_neighbor_min_distance, weight_factor):
        return weight_factor * edge_distance + (1 - weight_factor) * avg_neighbor_min_distance
    
    # For each edge, assess its potential contribution to the tour
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the distance between the current nodes
                edge_distance = distance_matrix[i, j]
                
                # Find the nearest neighbors to node j
                nearest_neighbors = np.argsort(distance_matrix[j, :])[1:num_neighbors+1]
                
                # Calculate the average minimum distance of the nearest neighbors
                avg_neighbor_min_distance = np.mean(min_distances[nearest_neighbors])
                
                # The heuristic value is a combination of the edge distance and the average minimum distance
                # The weight factor is used to balance the influence of the edge distance and the neighbors' distances
                weight_factor = 0.5
                
                # Apply the adaptive weight factor considering the heuristic value
                adaptive_weight = 1 / (1 + np.exp(-heuristics[i, j]))
                final_weight_factor = adaptive_weight * weight_factor + (1 - adaptive_weight) * (1 - weight_factor)
                
                # Compute the heuristic value
                heuristics[i, j] = compute_weighted_feature(edge_distance, avg_neighbor_min_distance, final_weight_factor)
    
    # Normalize the heuristics to ensure a better distribution
    max_val = np.max(heuristics)
    min_val = np.min(heuristics)
    heuristics = (heuristics - min_val) / (max_val - min_val)
    
    return heuristics
```
