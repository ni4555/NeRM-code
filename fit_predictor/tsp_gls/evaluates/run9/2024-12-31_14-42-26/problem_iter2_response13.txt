```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the heuristic values using a more sophisticated approach
    # For each edge, we use the average of the distances from each node to its nearest neighbors
    for i in range(distance_matrix.shape[0]):
        # Get the indices of the two nearest neighbors to node i
        neighbors_i = np.argsort(distance_matrix[i])[:2]
        # Get the indices of the two nearest neighbors to node j
        neighbors_j = np.argsort(distance_matrix[:, j])[:2]
        # Calculate the average distance from i to its neighbors and j to its neighbors
        avg_dist_i = np.mean(distance_matrix[i, neighbors_i])
        avg_dist_j = np.mean(distance_matrix[:, j, neighbors_j])
        # The heuristic value is the weighted sum of these averages, weighted by the edge weights
        heuristics[i, j] = (avg_dist_i + avg_dist_j) / 2.0
    
    return heuristics
```
