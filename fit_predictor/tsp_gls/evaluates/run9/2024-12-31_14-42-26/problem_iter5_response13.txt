```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement the logic to compute the heuristic values with adaptive strategies
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Adaptive heuristic that considers both distance and node characteristics
            heuristics[i, j] = (distance_matrix[i, j] ** 0.5 +
                                (1 - (i + j) % 10) * 0.1)  # Adjusts based on distance and a periodic function
    
    # Apply guided local search enhancements to the heuristic values
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Guided local search logic (simplified)
            if i != j:
                neighbors = [(k, distance_matrix[i, k] ** 0.5) for k in range(distance_matrix.shape[0]) if k != i]
                best_neighbor = min(neighbors, key=lambda x: x[1])
                heuristics[i, j] += best_neighbor[1] * 0.2  # Update heuristic based on best neighbor
    
    # Real-time fitness landscape adaptation
    # This could be a more complex adaptation logic, depending on the context
    heuristics *= 0.9  # Example adaptation: slightly reduce heuristic values to simulate adaptation
    
    return heuristics
```
