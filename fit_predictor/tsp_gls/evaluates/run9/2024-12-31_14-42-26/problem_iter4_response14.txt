```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Multi-scale analysis for structure score
    def calculate_structure_score(i, j, distance_matrix):
        max_scale = 4
        structure_score = 0
        for scale in range(1, max_scale):
            local_structure = distance_matrix[max(0, i-scale):min(distance_matrix.shape[0], i+scale+1),
                                              max(0, j-scale):min(distance_matrix.shape[0], j+scale+1)]
            structure_score += np.mean(local_structure[local_structure != np.inf])
        return structure_score
    
    # Calculate the minimum pairwise distances among nodes
    min_pairwise_distances = np.min(distance_matrix, axis=0)
    
    # Incorporate the dynamic fusion of state-of-the-art metaheuristic algorithms
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the minimum distance to a common neighbor
                min_common_neighbor_distance = np.min(distance_matrix[i, :][distance_matrix[i, :] != distance_matrix[i, j]] +
                                                     distance_matrix[j, :][distance_matrix[j, :] != distance_matrix[i, j]])
                
                # Calculate the average distance to common neighbors
                common_neighbors_distances = distance_matrix[i, :][distance_matrix[i, :] != distance_matrix[i, j]] + \
                                             distance_matrix[j, :][distance_matrix[j, :] != distance_matrix[i, j]]
                avg_common_neighbor_distance = np.mean(common_neighbors_distances)
                
                # Calculate the diversity of distances to common neighbors
                diversity = np.std(common_neighbors_distances)
                
                # Calculate the structure score based on multi-scale analysis
                structure_score = calculate_structure_score(i, j, distance_matrix)
                
                # Combine all factors into a heuristic value
                heuristics[i, j] = distance_matrix[i, j] / (min_pairwise_distances[j] + 1e-6)  # Avoid division by zero
                heuristics[i, j] += (min_common_neighbor_distance + avg_common_neighbor_distance) / 2
                heuristics[i, j] += diversity * 0.1  # Scale diversity contribution
                heuristics[i, j] += structure_score * 0.2  # Scale structure score contribution
    
    # Balance local and global exploration
    balance_factor = 0.5
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            heuristics[i, j] = (balance_factor * heuristics[i, j]) + ((1 - balance_factor) * distance_matrix[i, j] ** 0.5)
    
    return heuristics
```
