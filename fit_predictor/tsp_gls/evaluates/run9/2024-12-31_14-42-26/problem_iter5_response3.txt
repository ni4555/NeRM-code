```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with a simple heuristic
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Implement the logic to compute the heuristic values
    # This function will combine a global strategy with local insights
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Example heuristic: square root of distance
            # Add a local insight: penalize edges that are near the ends of the path more
            distance = distance_matrix[i, j]
            heuristic_value = distance ** 0.5
            if i == 0 or i == distance_matrix.shape[0] - 1 or j == 0 or j == distance_matrix.shape[1] - 1:
                heuristic_value *= 1.2  # Increase penalty for edges near the ends
            heuristics[i, j] = heuristic_value
    
    # Adapt dynamically based on the fitness landscape
    # Placeholder for real-time adaptation logic
    # This could involve adjusting the penalty based on the current path
    # and the quality of solutions found
    
    return heuristics
```
