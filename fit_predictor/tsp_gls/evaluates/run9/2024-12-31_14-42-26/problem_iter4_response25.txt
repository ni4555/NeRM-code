```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the all-pairs shortest paths using the Floyd-Warshall algorithm
    num_cities = distance_matrix.shape[0]
    shortest_paths = np.full((num_cities, num_cities), np.inf)
    for k in range(num_cities):
        shortest_paths[k, k] = 0
        for i in range(num_cities):
            for j in range(num_cities):
                shortest_paths[i, j] = min(shortest_paths[i, j], distance_matrix[i, k] + distance_matrix[k, j])
    
    # Incorporate multiple perspectives:
    # - Distance from each node to the closest neighbor
    # - Average distance to all neighbors
    # - Shortest path distance
    for i in range(num_cities):
        for j in range(num_cities):
            if i != j:
                min_distance = shortest_paths[i, j]
                closest_neighbor_distance = min(shortest_paths[i])
                average_distance = np.mean(shortest_paths[i]) + np.mean(shortest_paths[j])
                
                # Combine the heuristics using a weighted sum to balance exploration and exploitation
                heuristics[i, j] = min_distance + (closest_neighbor_distance + average_distance) / 2
    
    # Normalize the heuristics to ensure a better distribution
    max_val = np.max(heuristics)
    min_val = np.min(heuristics)
    heuristics = (heuristics - min_val) / (max_val - min_val)
    
    return heuristics
```
