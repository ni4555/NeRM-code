```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Precompute minimum distances from each node to all other nodes
    min_distances = np.min(distance_matrix, axis=1)
    
    # Incorporate adaptive neighborhood strategies by adjusting the heuristic
    # based on the distance to the nearest non-visited node
    for i in range(distance_matrix.shape[0]):
        # Compute the heuristic value for each edge
        heuristics[i, :] = distance_matrix[i, :] + np.abs(distance_matrix[i, :] - min_distances)
    
    # Apply guided local search enhancements by considering the sum of distances
    # to all unvisited nodes from the starting node
    # Assuming the starting node is 0 for simplicity
    all_unvisited = np.where(distance_matrix[:, 0] > 0)[0]
    starting_node_distance = distance_matrix[0, all_unvisited].sum()
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                heuristics[i, j] += starting_node_distance - distance_matrix[i, all_unvisited].sum()
    
    # Adapt the fitness landscape in real-time by considering the diversity of
    # the nearest neighbors
    for i in range(distance_matrix.shape[0]):
        # Compute the diversity of the nearest neighbors
        nearest_neighbors = np.argsort(distance_matrix[i, distance_matrix[i] > 0])[1:5]  # Get the 4 nearest neighbors
        diversity = np.std(distance_matrix[nearest_neighbors, i])
        # Update the heuristic based on the diversity
        heuristics[i, :] += diversity
    
    return heuristics
```
