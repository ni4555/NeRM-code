```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute heuristic values that incorporate the graph structure
    n = distance_matrix.shape[0]
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the direct distance
                direct_distance = distance_matrix[i, j]
                
                # Calculate the minimum distance to a common neighbor
                common_neighbors_indices = np.intersect1d(np.where(distance_matrix[i, :] != direct_distance)[0],
                                                         np.where(distance_matrix[j, :] != direct_distance)[0])
                if common_neighbors_indices.size > 0:
                    min_common_neighbor_distance = np.min(distance_matrix[i, common_neighbors_indices] +
                                                         distance_matrix[j, common_neighbors_indices])
                else:
                    min_common_neighbor_distance = direct_distance
                
                # Calculate the average distance to the neighbors
                avg_neighbor_distance = np.mean(distance_matrix[i, :][distance_matrix[i, :] != direct_distance] +
                                                 distance_matrix[j, :][distance_matrix[j, :] != direct_distance])
                
                # Calculate the average distance to the common neighbors
                avg_common_neighbor_distance = np.mean(distance_matrix[i, common_neighbors_indices] +
                                                       distance_matrix[j, common_neighbors_indices])
                
                # The heuristic value is a combination of the above factors
                # Here we weigh the direct distance, the minimum common neighbor distance,
                # and the average neighbor distance to balance exploration and exploitation
                weight_direct = 0.3
                weight_common = 0.5
                weight_neighbor = 0.2
                
                heuristics[i, j] = weight_direct * direct_distance + \
                                   weight_common * min_common_neighbor_distance + \
                                   weight_neighbor * avg_neighbor_distance
                
                # Add a small penalty for edges that are close to being a cycle
                cycle_penalty_factor = 0.1
                cycle_penalty = cycle_penalty_factor * np.sum(np.isin(distance_matrix[:, i], distance_matrix[:, j], assume_unique=True))
                heuristics[i, j] += cycle_penalty
    
    return heuristics
```
