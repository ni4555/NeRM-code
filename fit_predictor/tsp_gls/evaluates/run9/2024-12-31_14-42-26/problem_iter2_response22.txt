```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the heuristic values using a combination of methods
    # 1. Use the minimum pairwise distances
    min_distances = np.min(distance_matrix, axis=0)
    
    # 2. Incorporate adaptive neighborhood strategies by adjusting the heuristic
    # based on the distance to the nearest non-visited node
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                nearest_non_visited = np.argmin(distance_matrix[i, distance_matrix[:, i] > 0])
                heuristics[i, j] = distance_matrix[i, j] + np.abs(distance_matrix[i, nearest_non_visited] - min_distances[nearest_non_visited])
    
    # 3. Apply guided local search enhancements by considering the sum of distances
    # to all unvisited nodes from the starting node
    all_unvisited = np.where(distance_matrix[:, 0] > 0)[0]
    starting_node_distance = distance_matrix[0, all_unvisited].sum()
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                heuristics[i, j] += starting_node_distance - distance_matrix[i, all_unvisited].sum()
    
    # 4. Adapt the fitness landscape in real-time by considering the diversity of
    # the nearest neighbors
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                nearest_neighbors = np.argsort(distance_matrix[i, distance_matrix[i] > 0])[1:5]  # Get the 4 nearest neighbors
                diversity = np.std(distance_matrix[nearest_neighbors, j])
                heuristics[i, j] += diversity
    
    # Normalize the heuristic matrix to ensure it is within the range of [0, 1]
    heuristics /= np.max(heuristics)
    
    return heuristics
```
