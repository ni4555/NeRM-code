```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the direct distance
                distance = distance_matrix[i, j]

                # Calculate the minimum distance to a common neighbor
                min_common_neighbor_distance = np.min(np.delete(np.delete(distance_matrix[i, :], i, axis=0),
                                                                j, axis=1) + np.delete(np.delete(distance_matrix[j, :], j, axis=0),
                                                                                       i, axis=1))

                # Calculate the average distance to common neighbors
                common_neighbors_distances = np.delete(np.delete(distance_matrix[i, :], i, axis=0) +
                                                       np.delete(distance_matrix[j, :], j, axis=0),
                                                       np.s_[[i, j]], axis=0)
                avg_common_neighbor_distance = np.mean(common_neighbors_distances)

                # Calculate the diversity of distances to common neighbors
                diversity = np.std(common_neighbors_distances)

                # Calculate the structure score based on multi-scale analysis
                structure_score = np.zeros(num_nodes)
                for k in range(1, 4):  # Analyze at multiple scales
                    local_structure = distance_matrix[max(0, i-k):min(num_nodes, i+k+1),
                                                      max(0, j-k):min(num_nodes, j+k+1)]
                    structure_score += np.mean(local_structure[local_structure != np.inf])

                # Combine all factors into a heuristic value
                heuristic_value = distance ** 0.5
                heuristic_value += (min_common_neighbor_distance + avg_common_neighbor_distance) / 2
                heuristic_value += diversity * 0.1  # Scale diversity contribution
                heuristic_value += structure_score * 0.2  # Scale structure score contribution

                heuristics[i, j] = heuristics[j, i] = heuristic_value

    return heuristics
```
