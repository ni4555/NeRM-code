```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Adaptive neighborhood strategy: use the average distance from the center node
    # Guided local search enhancements: use the minimum pairwise distances to guide the heuristic
    # Real-time fitness landscape adaptation: adjust the heuristic based on the current solution quality
    
    # Assume center node is at index 0 (or could be any node depending on the problem context)
    center_node = 0
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the heuristic value based on the distance from the center node
                # and the minimum pairwise distance from this node to all other nodes
                min_pairwise_distance = np.min(distance_matrix[i])
                heuristic_value = distance_matrix[i, j] ** 0.5 + (min_pairwise_distance / distance_matrix[i, j])
                # Adjust the heuristic value based on the current solution quality
                # This is a placeholder for the real-time adaptation logic
                heuristics[i, j] = heuristic_value
    
    return heuristics
```
