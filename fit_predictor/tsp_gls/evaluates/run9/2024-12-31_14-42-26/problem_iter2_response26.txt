```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Calculate the sum of the minimum pairwise distances for each node
    n = distance_matrix.shape[0]
    for i in range(n):
        for j in range(n):
            if i != j:
                # Compute the heuristic using the minimum distance to k for both i and j
                k = np.argmin(np.min(distance_matrix[[i, j]], axis=0))
                heuristics[i, j] = distance_matrix[i, k] + distance_matrix[j, k]
    
    # Adjust the heuristics to favor longer distances, encouraging more exploration
    heuristics = 1 / (1 + heuristics)
    
    return heuristics
```
