```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Define a dynamic heuristic that considers the minimum pairwise distances
    for i in range(distance_matrix.shape[0]):
        # Find the minimum distance to any other node
        min_distance = np.min(distance_matrix[i, :])
        # Find the maximum distance to any other node
        max_distance = np.max(distance_matrix[i, :])
        # Calculate the heuristic value based on the ratio of min to max distance
        heuristics[i, i] = 1  # The start and end node have a trivial heuristic of 1
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the heuristic value as the inverse of the ratio
                heuristics[i, j] = max_distance / (min_distance + distance_matrix[i, j])
    
    return heuristics
```
