```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Incorporate the distance, local structure, multi-scale analysis, diversity, and commonality metrics
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                # Calculate the distance
                distance = distance_matrix[i, j]
                
                # Calculate the minimum distance to a common neighbor
                min_common_neighbor_distance = np.min(distance_matrix[i, :][distance_matrix[i, :] != distance] +
                                                     distance_matrix[j, :][distance_matrix[j, :] != distance])
                
                # Calculate the average distance to common neighbors
                common_neighbors_distances = distance_matrix[i, :][distance_matrix[i, :] != distance] + \
                                             distance_matrix[j, :][distance_matrix[j, :] != distance]
                avg_common_neighbor_distance = np.mean(common_neighbors_distances)
                
                # Calculate the diversity of distances to common neighbors
                diversity = np.std(common_neighbors_distances)
                
                # Calculate the structure score based on multi-scale analysis
                structure_score = 0
                for k in range(1, 4):  # Analyze at multiple scales
                    local_structure = distance_matrix[max(0, i-k):min(distance_matrix.shape[0], i+k+1),
                                                      max(0, j-k):min(distance_matrix.shape[0], j+k+1)]
                    structure_score += np.mean(local_structure[local_structure != np.inf])
                
                # Combine all factors into a heuristic value
                heuristics[i, j] = distance ** 0.5 + (min_common_neighbor_distance + avg_common_neighbor_distance) / 2
                heuristics[i, j] += diversity * 0.1  # Scale diversity contribution
                heuristics[i, j] += structure_score * 0.2  # Scale structure score contribution
    
    return heuristics
```
