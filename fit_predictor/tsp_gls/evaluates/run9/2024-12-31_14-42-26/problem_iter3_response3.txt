```python
import numpy as np
from scipy.spatial.distance import pdist, squareform

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute the pairwise distances using pdist and squareform to convert to a distance matrix
    pairwise_distances = squareform(pdist(distance_matrix, 'cityblock'))
    
    # Adaptively adjust the heuristic by considering the minimum pairwise distances
    min_distances = np.min(pairwise_distances, axis=1)
    max_distance = np.max(min_distances)
    
    # Introduce a dynamic factor that increases with the minimum distance to encourage exploration
    dynamic_factor = 1 + (max_distance - min_distances) / max_distance
    
    # Adjust the heuristic by the dynamic factor and a dampening factor to prevent too high values
    dampening_factor = 0.9
    heuristics = (dynamic_factor * distance_matrix) ** dampening_factor
    
    # Ensure that the heuristic is not worse than the initial threshold
    initial_threshold = 10.617516362484723
    heuristics = np.maximum(heuristics, initial_threshold)
    
    return heuristics
```
