```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Compute a dynamic minimum pairwise distance for each node
    for i in range(distance_matrix.shape[0]):
        min_distances = np.min(distance_matrix[i], axis=0)
        # Use a weighted sum of pairwise distances to neighboring nodes
        # This encourages paths that visit nodes with shorter local connections
        neighbors = np.where(distance_matrix[i] < np.percentile(distance_matrix[i], 25))[0]
        local_min_distances = np.min(distance_matrix[i, neighbors], axis=0)
        weight = np.sum(local_min_distances) / len(local_min_distances)
        heuristics[i, neighbors] = weight
        heuristics[i, i] = float('inf')  # Ignore the distance to the node itself
    
    # Apply guided local search enhancements by adding the shortest distance to non-visited nodes
    visited = np.zeros(distance_matrix.shape[0], dtype=bool)
    for i in range(distance_matrix.shape[0]):
        unvisited = np.where(~visited)[0]
        if unvisited.size == 0:
            break
        min_distance = np.min(distance_matrix[visited, unvisited])
        for j in range(distance_matrix.shape[0]):
            if not visited[j] and distance_matrix[j, unvisited] == min_distance:
                heuristics[j, unvisited] += min_distance
    
    # Normalize the heuristics to improve the distribution
    max_val = np.max(heuristics)
    min_val = np.min(heuristics)
    heuristics = (heuristics - min_val) / (max_val - min_val)
    
    # Adapt heuristics dynamically using a landscape adaptation factor
    average_heuristic_value = np.mean(heuristics)
    heuristics *= 1 / average_heuristic_value
    
    return heuristics
```
