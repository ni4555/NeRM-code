```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Adaptive neighborhood strategy
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Guided local search enhancements
                neighbors = np.argsort(distance_matrix[i, :])
                nearest = neighbors[1]  # Assume at least two neighbors
                
                # Real-time fitness landscape adaptation
                # Calculate the heuristic based on the current and nearest neighbors
                # Adjusting the heuristic value by considering the local structure
                heuristics[i, j] = (distance_matrix[i, j] + distance_matrix[i, nearest] / 2) ** 0.5
    
    return heuristics
```
