```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Calculate the pairwise distances matrix
    pairwise_distances = np.linalg.norm(distance_matrix[:, np.newaxis, :] - distance_matrix[np.newaxis, :, :], axis=2)
    
    # Compute the heuristic based on the minimum pairwise distances
    heuristics = np.min(pairwise_distances, axis=2)
    
    # Adaptive neighborhood strategies: increase penalty for neighbors
    n = distance_matrix.shape[0]
    for i in range(n):
        for j in range(n):
            if abs(i - j) == 1:  # Immediate neighbors
                heuristics[i, j] *= 1.1
    
    # Guided local search enhancements: incorporate an adaptive weight based on local structure
    for i in range(n):
        local_neighbors = np.where(np.abs(pairwise_distances[i]) < np.mean(pairwise_distances[i]))[0]
        local_weight = np.sum(pairwise_distances[i, local_neighbors]) / len(local_neighbors)
        heuristics[i, :][local_neighbors] += local_weight
    
    # Real-time fitness landscape adaptation: adjust heuristics based on the average distance
    average_distance = np.mean(np.mean(pairwise_distances, axis=1))
    heuristics = heuristics + (average_distance - heuristics) * np.where(heuristics < average_distance, 1, 0)
    
    # Balance exploration and exploitation by adjusting heuristics for all edges
    exploration_weight = 0.7
    exploitation_weight = 0.3
    heuristics *= exploration_weight + exploitation_weight * np.ones_like(heuristics)
    
    return heuristics
```
