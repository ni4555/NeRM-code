```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix, dtype=np.float64)
    
    # Use a Gaussian distribution to simulate the influence of nearby cities
    mean_distance = np.mean(distance_matrix)
    std_dev = np.std(distance_matrix)
    
    # Adjust the Gaussian function to emphasize shorter distances
    # by using a lower standard deviation
    std_dev *= 0.5
    
    # Compute the Gaussian heuristic directly
    heuristics = np.exp(-((distance_matrix - mean_distance) ** 2) / (2 * std_dev ** 2))
    
    # Normalize the heuristics to ensure they are within a meaningful range
    max_val = np.max(heuristics)
    min_val = np.min(heuristics)
    heuristics = (heuristics - min_val) / (max_val - min_val)
    
    # Apply a scaling factor to adjust the range of the heuristics
    scaling_factor = 10
    heuristics *= scaling_factor
    
    # Introduce an adaptive element based on local structure
    for i in range(distance_matrix.shape[0]):
        local_neighbors = np.where(distance_matrix[i, :] < mean_distance)[0]
        if local_neighbors.size > 0:
            local_mean = np.mean(distance_matrix[local_neighbors, :])
            heuristics[i, :] = np.exp(-((distance_matrix[i, :] - local_mean) ** 2) / (2 * std_dev ** 2))
    
    return heuristics
```
