```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic as the average distance to the nearest neighbor
                # considering both the local structure and domain knowledge
                nearest_neighbor_i = np.argsort(distance_matrix[i, ~np.isin(np.arange(n), [i])))[1]  # Exclude self
                nearest_neighbor_j = np.argsort(distance_matrix[j, ~np.isin(np.arange(n), [j])))[1]  # Exclude self
                local_distance_i = distance_matrix[i, nearest_neighbor_i]
                local_distance_j = distance_matrix[j, nearest_neighbor_j]
                domain_weight = 1 if i == 0 or j == 0 else 0.9  # Example domain knowledge: heavier weight for start nodes
                heuristics_matrix[i, j] = (local_distance_i + local_distance_j + distance_matrix[i, j]) / 2 * domain_weight
            else:
                # Set the heuristic value to a high number if it's the same node (self-loop)
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
