```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Use a more sophisticated heuristic by considering the Manhattan distance
    # and incorporating a penalty factor for longer distances.
    penalty_factor = 2.0
    # Calculate Manhattan distance for each edge
    manhattan_distance = np.abs(distance_matrix - np.tril(np.triu(distance_matrix), k=-1))
    # Apply the penalty factor to longer distances
    return np.where(manhattan_distance > 0, penalty_factor * manhattan_distance, 0)
```
