```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Incorporate diverse distance metrics
                nearest_neighbor_i = np.argmin(distance_matrix[i, ~np.isin(np.arange(n), [i])])
                nearest_neighbor_j = np.argmin(distance_matrix[j, ~np.isin(np.arange(n), [j])])
                nearest_neighbor_distance = distance_matrix[i, nearest_neighbor_i] + distance_matrix[j, nearest_neighbor_j]

                # Local structure: add a penalty for edges that are close to the longest edge in the tour
                longest_edge = np.max(distance_matrix)
                local_structure_penalty = 0
                for k in range(n):
                    if k != i and k != j:
                        if distance_matrix[i, k] > longest_edge / 2 and distance_matrix[j, k] > longest_edge / 2:
                            local_structure_penalty += 1

                # Domain knowledge: add a penalty for edges that connect nodes with high symmetry
                symmetry_penalty = 0
                if np.count_nonzero(distance_matrix[i, :] == distance_matrix[j, :]) > 2:
                    symmetry_penalty = 1

                # Combine metrics into heuristic
                heuristics_matrix[i, j] = (nearest_neighbor_distance + distance_matrix[i, j]) / 2 + local_structure_penalty + symmetry_penalty
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
