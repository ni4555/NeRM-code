```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Diversity factor by minimizing the sum of distances to the nearest non-adjacent nodes
                diversity_factor = 1 / (1 + np.sum(distance_matrix[~np.isin(np.arange(n), [i, j]), :][:, ~np.isin(np.arange(n), [i, j])]) / n)
                
                # Local structure factor by adding the sum of distances to the closest non-adjacent neighbors
                local_factor = np.sum(distance_matrix[~np.isin(np.arange(n), [i]), ~np.isin(np.arange(n), [j])]) + \
                               np.sum(distance_matrix[~np.isin(np.arange(n), [j]), ~np.isin(np.arange(n), [i])])

                # Domain knowledge factor by adjusting the direct distance weight
                direct_distance_weight = 1 - 0.5 * distance_matrix[i, j] / np.sum(distance_matrix)
                
                # Apply a penalty for long distances and a reward for short distances
                distance_penalty = 1 / (1 + distance_matrix[i, j])

                # Combine all factors to calculate the heuristic value
                heuristics_matrix[i, j] = diversity_factor + local_factor + direct_distance_weight - distance_penalty
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
