```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance from each node to the others
    avg_distance_from_node = np.mean(distance_matrix, axis=0)
    avg_distance_to_node = np.mean(distance_matrix, axis=1)
    
    # Calculate the standard deviation from each node to the others
    std_dev_from_node = np.std(distance_matrix, axis=0)
    std_dev_to_node = np.std(distance_matrix, axis=1)
    
    # Combine the average and standard deviation to form a heuristic
    heuristics = (avg_distance_from_node - distance_matrix) * (avg_distance_to_node - distance_matrix)
    heuristics *= (std_dev_from_node + std_dev_to_node) / (std_dev_from_node * std_dev_to_node)
    
    # Apply a threshold to reduce the influence of outliers
    threshold = 0.1
    heuristics[distance_matrix < threshold] = 0
    
    return heuristics
```
