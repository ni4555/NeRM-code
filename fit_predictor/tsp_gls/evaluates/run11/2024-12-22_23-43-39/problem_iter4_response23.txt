```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = len(distance_matrix)
    inv_distance_matrix = np.linalg.inv(distance_matrix)
    min_distances = np.min(distance_matrix, axis=0)
    penalty_factor = 0.1
    constant = 0.01
    
    # Calculate the heuristic value for each edge
    heuristics_matrix = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Apply the heuristic factors to the inverse distance
                heuristics_matrix[i, j] = 1 / (penalty_factor * (min_distances[i] + constant) +
                                               penalty_factor * (min_distances[j] + constant) +
                                               inv_distance_matrix[i, j])
    
    return heuristics_matrix
```
