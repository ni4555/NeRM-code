```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the maximum distance in the matrix to use as a penalty
    max_distance = np.max(distance_matrix)
    # Initialize the heuristics matrix with zeros
    heuristics = np.zeros_like(distance_matrix)
    # Calculate node degrees
    degree_matrix = np.sum(distance_matrix, axis=0)
    # Assign penalties to long edges, increased by the square of the degree of the nodes
    heuristics[distance_matrix > max_distance / 2] = (distance_matrix[distance_matrix > max_distance / 2] / max_distance) ** 2 + degree_matrix[distance_matrix > max_distance / 2] ** 2
    return heuristics
```
