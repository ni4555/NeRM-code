```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the diagonal of the distance matrix (no distance to itself)
    diag = np.diag(distance_matrix)
    
    # Calculate the distance matrix without self-loops
    distance_matrix_no_diag = np.copy(distance_matrix)
    np.fill_diagonal(distance_matrix_no_diag, np.inf)
    
    # Calculate the minimum distance for each edge (excluding self-loops)
    min_distances = np.min(distance_matrix_no_diag, axis=0)
    
    # Normalize the distance to its respective minimum distance
    normalized_distances = distance_matrix / min_distances
    
    # Incorporate local information and diverse penalties
    # We add a penalty for long edges, but also a small penalty for short edges
    # to prevent early convergence on suboptimal paths.
    penalty_factor = 1.5
    small_penalty_factor = 0.5
    small_distance_threshold = np.percentile(normalized_distances, 10)  # Use the 10th percentile for the threshold
    
    # Apply different penalties based on the normalized distance
    heuristics = np.where(normalized_distances > small_distance_threshold,
                          penalty_factor / normalized_distances + small_penalty_factor,
                          1 / normalized_distances)
    
    return heuristics
```
