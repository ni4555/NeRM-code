```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Initialize the visited nodes array with False
    visited = np.zeros(num_nodes, dtype=bool)
    
    # Loop through each edge to calculate the heuristic value
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j and not visited[i] and not visited[j]:
                # Calculate the heuristic value based on the ratio of the edge distance to the minimum distance
                # from the current node to any other node that has not been visited yet
                min_dist = np.min(distance_matrix[i] * (1 - visited), where=visited)
                heuristics_matrix[i, j] = distance_matrix[i, j] / min_dist
                # Mark the current node as visited
                visited[i] = True
    
    # Set the heuristic value for self-loops to infinity
    np.fill_diagonal(heuristics_matrix, float('inf'))
    
    return heuristics_matrix
```
