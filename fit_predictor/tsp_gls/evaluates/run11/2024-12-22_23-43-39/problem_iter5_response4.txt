```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic considering both local and global minima
                local_min = np.min(distance_matrix[i, distance_matrix[i] != float('inf')])
                global_min = np.min(distance_matrix[distance_matrix[:, i] != float('inf'), i])
                # Incorporate a domain-specific penalty for long edges
                domain_penalty = np.mean(distance_matrix[i, distance_matrix[i] > local_min])
                # Normalize the heuristics by the total distance to ensure consistency
                total_distance = np.sum(distance_matrix[i, distance_matrix[i] != float('inf')]) + np.sum(distance_matrix[:, i][distance_matrix[:, i] != float('inf')])
                heuristics_matrix[i, j] = (local_min + global_min + domain_penalty) / total_distance
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
