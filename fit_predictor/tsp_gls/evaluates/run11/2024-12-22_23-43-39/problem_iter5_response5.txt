```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic using a weighted sum of local and global minima
                local_min = np.min(distance_matrix[i, distance_matrix[i] != float('inf')])
                global_min = np.min(distance_matrix[distance_matrix[:, i] != float('inf'), i])
                edge_weight = distance_matrix[i, j]
                weight_local = 0.6  # Weight for local minima
                weight_global = 0.4  # Weight for global minima
                heuristics_matrix[i, j] = (weight_local * local_min + weight_global * global_min) + edge_weight
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
