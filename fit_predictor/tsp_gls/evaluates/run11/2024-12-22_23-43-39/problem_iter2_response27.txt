```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic that incorporates a combination of factors:
    # 1. Use the inverse of the distance matrix to encourage short paths.
    # 2. Add a small constant to avoid division by zero.
    # 3. Incorporate the minimum distance from each node to all other nodes as a penalty factor.
    # 4. Use a penalty for long distances to discourage exploration of those paths initially.
    inv_distance_matrix = np.linalg.inv(distance_matrix)
    min_distances = np.min(distance_matrix, axis=0)
    penalty_factor = 0.1
    constant = 0.01
    heuristics = 1 / (penalty_factor * (min_distances + constant) + inv_distance_matrix)
    return heuristics
```
