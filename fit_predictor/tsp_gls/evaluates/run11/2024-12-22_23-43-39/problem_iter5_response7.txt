```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the heuristic by considering both local and global structure
                # Local structure: sum of the minimum distances from the current node
                local_min = np.sum(np.min(distance_matrix[i][distance_matrix[i] != float('inf')], axis=0))
                
                # Global structure: sum of the minimum distances from all other nodes to the current node
                global_min = np.sum(np.min(distance_matrix[:, i][distance_matrix[:, i] != float('inf')], axis=1))
                
                # Combine local and global insights with a domain-specific weight factor
                weight_factor = 0.7  # This factor can be adjusted for different instances
                heuristics_matrix[i, j] = (weight_factor * local_min + (1 - weight_factor) * global_min + distance_matrix[i, j]) / 2
            else:
                heuristics_matrix[i, j] = float('inf')

    return heuristics_matrix
```
