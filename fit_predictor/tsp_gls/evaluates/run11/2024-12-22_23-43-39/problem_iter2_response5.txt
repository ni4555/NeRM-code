```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic considers the current shortest path that visits the nodes in the order they are visited.
    # The heuristic value is inversely proportional to the current shortest path length from the starting node.
    num_nodes = len(distance_matrix)
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Initialize the heuristic value for the first node as 0 (start node has no distance to travel)
    heuristics_matrix[0] = 0
    
    # Calculate the shortest path to each node from the starting node
    for i in range(1, num_nodes):
        min_distance = float('inf')
        for j in range(num_nodes):
            if j != i:
                min_distance = min(min_distance, distance_matrix[0, j] + distance_matrix[j, i])
        heuristics_matrix[0, i] = 1 / min_distance
    
    # The heuristic value for each edge is the sum of the heuristics for the two nodes it connects
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics_matrix[i, j] = heuristics_matrix[0, i] + heuristics_matrix[0, j]
    
    return heuristics_matrix
```
