```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Normalize usage to avoid overpenalization
    max_usage = np.max(usage_matrix)
    usage_matrix = usage_matrix / max_usage

    # Introduce randomness to encourage diversity
    np.random.shuffle(usage_matrix)

    # Adjust the distance matrix by increasing the distance for highly used edges
    penalty_factor = 0.1
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 2)

    # Apply a balance factor to reward short edges, to avoid local minima
    balance_factor = 0.5
    adjusted_matrix = np.maximum(adjusted_matrix, np.finfo(np.float64).eps)
    adjusted_matrix = adjusted_matrix * (1 + balance_factor / (1 + adjusted_matrix))

    # Ensure connectivity by setting diagonal to a large number
    np.fill_diagonal(adjusted_matrix, np.inf)

    return adjusted_matrix
```
