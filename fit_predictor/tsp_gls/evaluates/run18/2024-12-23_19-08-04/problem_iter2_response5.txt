```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the usage of each edge
    num_trips = np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1) - len(distance_matrix) * (len(distance_matrix) - 1)
    edge_usage = 1 / (num_trips + 1e-5)  # Avoid division by zero

    # Adjust distances based on usage
    adjusted_distances = distance_matrix * (1 - edge_usage)

    # Add a penalty for edges with high usage to encourage the algorithm to try alternative paths
    # Additionally, penalize longer edges to encourage the algorithm to find shorter paths
    adjusted_distances *= (1 + 0.1 * edge_usage + 0.01 * np.maximum(0, distance_matrix - np.mean(distance_matrix)))

    return adjusted_distances
```
