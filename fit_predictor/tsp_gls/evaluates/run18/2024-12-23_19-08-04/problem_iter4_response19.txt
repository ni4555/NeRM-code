```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the usage of each edge
    num_trips = np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1) - len(distance_matrix) * (len(distance_matrix) - 1)
    edge_usage = 1 / (num_trips + 1e-5)  # Avoid division by zero

    # Calculate a penalty factor that is a function of both usage and distance
    penalty_factor = np.exp(-0.1 * distance_matrix * edge_usage)

    # Apply the penalty factor to the distance matrix
    adjusted_distances = distance_matrix * (1 + penalty_factor)

    # Ensure that the distances remain positive and within a feasible range
    adjusted_distances = np.clip(adjusted_distances, np.finfo(np.float64).eps, None)

    # Encourage diversity by occasionally resetting the distance between nodes with zero usage
    diversity_threshold = np.mean(adjusted_distances) * 2
    zero_usage_edges = np.where(edge_usage == 0)
    reset_indices = zip(zero_usage_edges[0], zero_usage_edges[1])
    for i, j in reset_indices:
        if adjusted_distances[i, j] < diversity_threshold:
            adjusted_distances[i, j] = diversity_threshold

    return adjusted_distances
```
