```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance of the edges
    avg_distance = np.mean(np.sum(distance_matrix, axis=0))
    # Calculate the standard deviation of the edge distances
    std_distance = np.std(np.sum(distance_matrix, axis=0))
    # Calculate the number of edges
    num_edges = distance_matrix.shape[0]
    
    # Calculate the deviation of each edge from the average distance
    deviations = np.abs(np.sum(distance_matrix, axis=0) - avg_distance)
    
    # Normalize deviations to the range [0, 1]
    normalized_deviations = (deviations - np.min(deviations)) / (np.max(deviations) - np.min(deviations))
    
    # Introduce a penalty for edges that are too far from the average distance
    # The penalty decreases with decreasing deviation, rewarding edges closer to the average
    penalty = 1 + 0.1 * (1 - normalized_deviations)
    
    # Create a matrix of adjusted distances with the penalty applied
    adjusted_distances = distance_matrix * penalty
    
    # Ensure non-zero distances and return the adjusted matrix
    return np.maximum(adjusted_distances, 1)
```
