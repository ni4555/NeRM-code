```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Incorporate usage frequency into the heuristic
    usage_matrix = np.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if distance_matrix[i, j] > 0:
                usage_matrix[i, j] = 1
    usage_matrix = usage_matrix / np.sum(usage_matrix, axis=1, keepdims=True)

    # Calculate the number of edges
    num_edges = distance_matrix.shape[0]

    # Introduce a penalty for highly connected nodes
    highly_connected_penalty = np.sum(distance_matrix, axis=1) / num_edges

    # Adjust the distances based on both the length of the edge and its usage
    adjusted_distances = distance_matrix * (1 + usage_matrix)

    # Introduce a balance between local and global penalties
    local_penalty = (adjusted_distances - np.mean(adjusted_distances)) ** 2
    global_penalty = highly_connected_penalty

    # Apply the penalties
    adjusted_distances += local_penalty + global_penalty

    # Ensure non-zero distances and return the adjusted matrix
    return np.maximum(adjusted_distances, 1)
```
