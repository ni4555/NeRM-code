```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the total distance of the longest and shortest paths in the matrix
    max_distance = np.max(np.sum(distance_matrix, axis=0))
    min_distance = np.min(np.sum(distance_matrix, axis=0))
    
    # Calculate the global average distance
    global_avg_distance = np.mean(np.sum(distance_matrix, axis=0))
    
    # Define a heuristic based on the deviation from the global average distance
    # This will penalize edges that are significantly longer than the average
    adjusted_distances = distance_matrix * (1 + (max_distance - global_avg_distance) / (global_avg_distance + 1e-5))
    
    # To avoid uniform adjustments, scale the distances so that the shortest path remains the shortest
    shortest_path_scale = min_distance / np.min(adjusted_distances)
    adjusted_distances *= shortest_path_scale
    
    return adjusted_distances
```
