```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the usage of each edge
    num_trips = np.sum(distance_matrix, axis=0) + np.sum(distance_matrix, axis=1) - len(distance_matrix) * (len(distance_matrix) - 1)
    edge_usage = 1 / (num_trips + 1e-5)  # Avoid division by zero

    # Calculate the average edge length
    average_edge_length = np.mean(distance_matrix)

    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Normalize the degree to get the connectivity of each node
    connectivity = degrees / np.sum(degrees)
    
    # Introduce a penalty for high connectivity to avoid high-degree nodes
    connectivity_penalty = 1 + 0.1 * connectivity
    
    # Adjust distances based on usage and length to avoid local minima
    adjusted_distances = distance_matrix * (1 - edge_usage + (1 - edge_usage) * average_edge_length)

    # Apply penalties to the adjusted distances
    adjusted_distances *= (1 + 0.1 * edge_usage)
    adjusted_distances *= connectivity_penalty
    
    # Ensure that the adjusted distances are not negative
    adjusted_distances = np.maximum(adjusted_distances, 0)

    return adjusted_distances
```
