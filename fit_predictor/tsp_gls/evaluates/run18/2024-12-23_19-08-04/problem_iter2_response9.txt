```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a matrix to store edge usage frequency
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate edge usage frequency
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            usage_matrix[i, j] = np.sum(distance_matrix[:, i] == distance_matrix[j, :])
    
    # Normalize usage to get a probability of usage
    usage_probability = usage_matrix / np.sum(usage_matrix)
    
    # Calculate edge length penalties based on the sum of all edges
    total_edge_length = np.sum(distance_matrix)
    edge_length_penalties = distance_matrix / total_edge_length
    
    # Combine usage probability and edge length penalties
    heuristic_scores = usage_probability + edge_length_penalties
    
    # Introduce a diversity factor to encourage exploration of less frequently used edges
    diversity_factor = 1 / (1 + usage_probability)
    
    # Combine the diversity factor with the heuristic scores
    combined_heuristic_scores = heuristic_scores * diversity_factor
    
    # Scale the heuristic scores to ensure positive weights
    max_score = np.max(combined_heuristic_scores)
    if max_score > 0:
        combined_heuristic_scores /= max_score
    
    return combined_heuristic_scores
```
