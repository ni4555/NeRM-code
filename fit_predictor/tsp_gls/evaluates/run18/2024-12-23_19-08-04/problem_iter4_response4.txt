```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Define a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 2)
    
    # Normalize the distance matrix to scale problem features consistently
    edge_sums = adjusted_matrix.sum(axis=1)
    normalized_edge_lengths = adjusted_matrix / edge_sums[:, np.newaxis]
    
    # Apply a balance factor to reward short edges, to avoid local minima created by long edges
    balance_factor = 0.5
    for i in range(normalized_edge_lengths.shape[0]):
        for j in range(normalized_edge_lengths.shape[1]):
            normalized_edge_lengths[i, j] *= (1 + balance_factor / (1 + normalized_edge_lengths[i, j]))
    
    # Ensure that the distances remain positive
    normalized_edge_lengths = np.maximum(normalized_edge_lengths, np.finfo(np.float64).eps)
    
    # Incentivize diversity by rewarding unique edges
    diversity_bonus = np.where(np.sum(distance_matrix, axis=0) == 1, 1.1, 1)
    normalized_edge_lengths *= diversity_bonus
    
    return normalized_edge_lengths
```
