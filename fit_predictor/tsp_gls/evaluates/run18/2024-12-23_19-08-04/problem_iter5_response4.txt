```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Initialize a usage matrix with zeros
    usage_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the number of times each edge is used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(i + 1, distance_matrix.shape[1]):  # Only calculate for one direction to avoid double counting
            usage_matrix[i, j] = usage_matrix[j, i] = np.sum((distance_matrix[:, i] == distance_matrix[j, :]) & 
                                                          (distance_matrix[:, j] == distance_matrix[i, :]))

    # Apply a penalty factor for highly used edges
    penalty_factor = 0.1
    
    # Adjust the distance matrix by increasing the distance for highly used edges
    adjusted_matrix = distance_matrix + penalty_factor * (usage_matrix ** 0.5)
    
    # Normalize the adjusted distances to maintain a balanced exploration/exploitation
    min_val = np.min(adjusted_matrix)
    max_val = np.max(adjusted_matrix)
    normalized_matrix = 2 * ((adjusted_matrix - min_val) / (max_val - min_val)) - 1
    
    # Introduce randomness to encourage diversity and avoid local minima
    random_factor = np.random.rand(*normalized_matrix.shape)
    randomized_matrix = normalized_matrix + random_factor * np.random.normal(0, 0.01, normalized_matrix.shape)
    
    # Normalize the randomized matrix to avoid large deviations
    min_val = np.min(randomized_matrix)
    max_val = np.max(randomized_matrix)
    randomized_matrix = 2 * ((randomized_matrix - min_val) / (max_val - min_val)) - 1
    
    # Ensure connectivity by preventing any distance from becoming zero
    randomized_matrix = np.maximum(randomized_matrix, np.finfo(np.float64).eps)
    
    return randomized_matrix
```
