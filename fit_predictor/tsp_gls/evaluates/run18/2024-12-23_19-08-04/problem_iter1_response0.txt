```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Create a matrix that indicates the number of times each edge has been used
    usage_matrix = np.zeros_like(distance_matrix)
    
    # For each possible edge, count how many times it has been used in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            usage_matrix[i, j] = np.sum(distance_matrix[:, i] == distance_matrix[j, :])
    
    # It's bad to include highly used edges and also long edges
    # The heuristic adjusts the badness by reducing the weight of highly used edges
    adjusted_matrix = distance_matrix + (1 / (1 + usage_matrix))
    
    return adjusted_matrix
```
