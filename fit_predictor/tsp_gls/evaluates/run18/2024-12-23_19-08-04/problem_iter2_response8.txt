```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of each edge's distance
    edge_sums = distance_matrix.sum(axis=1)
    edge_counts = np.ones(distance_matrix.shape[0])
    usage_matrix = edge_counts * distance_matrix
    
    # Calculate the total distance of the longest path in the matrix
    max_distance = np.max(np.sum(distance_matrix, axis=0))
    # Calculate the total distance of the shortest path in the matrix
    min_distance = np.min(np.sum(distance_matrix, axis=0))
    
    # Calculate the number of edges
    num_edges = distance_matrix.shape[0]
    # Calculate the sum of all possible paths (n-1 choose 2)
    total_possible_edges = (num_edges - 1) * (num_edges - 2) // 2
    
    # Normalize the edge usage by total possible edges
    normalized_usage = usage_matrix / total_possible_edges
    
    # Define a heuristic based on the deviation from the shortest path
    path_deviation = (edge_sums - min_distance) / max_distance
    
    # Combine the normalized usage, path deviation, and scale heuristics based on path length extremes
    heuristic_scores = (1 - normalized_usage) + path_deviation * 0.5
    
    # Add a bonus for less used edges to encourage exploration
    bonus_factor = 1.1
    for i in range(len(distance_matrix)):
        for j in range(i + 1, len(distance_matrix)):
            if normalized_usage[i, j] < 0.1:
                heuristic_scores[i, j] *= bonus_factor
    
    # Return the matrix of heuristic scores
    return heuristic_scores
```
