```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function uses the concept of the maximum edge distance
    # relative to the minimum edge distance from a given node as the heuristic value for each edge.
    
    # Calculate the maximum and minimum distances from each node to all others
    max_distances = np.max(distance_matrix, axis=1)
    min_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the heuristic as the ratio of the maximum distance to the minimum distance
    # multiplied by the negative distance matrix to favor shorter edges
    heuristic_matrix = (max_distances / min_distances) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
