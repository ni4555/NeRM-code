```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function modifies the v1 heuristic by considering not only the mean distance
    # but also the minimum distance from each node to any other node to prevent the heuristic
    # from being overly optimistic.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the minimum distance from each node to any other node
    min_node_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the heuristic as the sum of the ratio of the node distance to the mean distance
    # and the ratio of the minimum distance to the mean distance, multiplied by the negative
    # distance matrix to favor shorter edges
    heuristic_matrix = (node_distances / mean_distance + min_node_distances / mean_distance) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
