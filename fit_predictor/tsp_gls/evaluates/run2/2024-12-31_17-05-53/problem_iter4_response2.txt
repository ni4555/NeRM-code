```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the mean distance between all pairs of nodes
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / ((distance_matrix.shape[0] * (distance_matrix.shape[0] - 1)) / 2)
    
    # Calculate the standard deviation of distances from the mean
    variance = np.sum(((distance_matrix - mean_distance) ** 2)) / ((distance_matrix.shape[0] * (distance_matrix.shape[0] - 1)) / 2)
    std_dev = np.sqrt(variance)
    
    # Calculate the heuristic as the sum of the differences from the mean and the standard deviation
    # The differences are scaled by a factor to emphasize shorter edges and to de-emphasize longer edges
    heuristic_matrix = (distance_matrix - mean_distance) / std_dev
    
    # Normalize the heuristic matrix to ensure non-negative values and for comparison purposes
    # Here, we divide by the mean to ensure that the values are comparable and to reduce the impact of large edge weights
    normalized_heuristic_matrix = (heuristic_matrix / (np.mean(heuristic_matrix) + 1e-10))
    
    return normalized_heuristic_matrix
```
