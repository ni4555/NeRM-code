```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)

    # For each node, calculate the sum of the distances to all other nodes and the mean of the nearest neighbors' distances
    node_distances = np.sum(distance_matrix, axis=1)
    nearest_neighbors_distances = np.min(distance_matrix, axis=1)
    mean_neighbor_distance = np.mean(nearest_neighbors_distances)

    # Compute a local characteristic heuristic that considers the distance of each edge as a weighted function
    # of the node's average distance and the mean distance of its nearest neighbors.
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[0]):
            if i != j:
                # The weight of the edge (i, j) is influenced by the ratio of the average distance of node i to its nearest neighbors
                # compared to the mean distance of all nodes to their nearest neighbors, favoring edges that are shorter
                # in relation to the typical neighborhood distance.
                edge_weight = node_distances[i] / mean_neighbor_distance
                # The heuristic value is the weight times the distance matrix, to favor shorter edges.
                # Also, we negate the distance to make it easier to minimize during the local search.
                heuristic_matrix[i, j] = -edge_weight * distance_matrix[i, j]

    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
