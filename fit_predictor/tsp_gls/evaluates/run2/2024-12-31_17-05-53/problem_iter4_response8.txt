```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the negative distances as a primary heuristic
    primary_heuristic_matrix = -distance_matrix

    # Calculate the inverse of the distance
    inverse_distance_matrix = 1 / (distance_matrix + 1e-10)

    # Calculate the sum of distances to the farthest node for each node
    farthest_node_distances = np.max(distance_matrix, axis=1)
    secondary_heuristic_matrix = np.sum(distance_matrix, axis=1)

    # Calculate the sum of distances to the closest node for each node
    closest_node_distances = np.min(distance_matrix, axis=1)
    tertiary_heuristic_matrix = np.sum(distance_matrix, axis=1)

    # Combine the heuristics using a weighted sum
    # where the primary heuristic has the highest weight, the inverse of the distance has the middle weight,
    # and the sum of distances to the closest node has the lowest weight
    weight_primary = 0.6
    weight_inverse = 0.3
    weight_closest = 0.1
    combined_heuristic_matrix = (weight_primary * primary_heuristic_matrix +
                                weight_inverse * inverse_distance_matrix +
                                weight_closest * tertiary_heuristic_matrix)

    # Normalize the combined heuristic matrix
    row_sums = np.sum(combined_heuristic_matrix, axis=1)
    normalized_combined_heuristic_matrix = combined_heuristic_matrix / (row_sums[:, np.newaxis] + 1e-10)

    return normalized_combined_heuristic_matrix
```
