```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the direct measure of edge quality based on the difference from the average edge length
    row_sums = np.sum(distance_matrix, axis=1)
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # For each edge, compute the difference from the mean distance, adjusted by the average edge length
    heuristic_matrix = np.abs(distance_matrix - mean_distance) * (distance_matrix.shape[0] - 1)
    
    # Normalize the heuristic matrix to ensure non-negative values and for comparison purposes
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + 1e-10))
    
    return normalized_heuristic_matrix
```
