```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function uses a weighted sum of edge lengths and their
    # inverse to reflect the trade-off between including longer edges
    # and having edges with very high inverse weights.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the heuristic as a weighted sum of the edge lengths and their inverses
    # Weights are adjusted to balance the influence of edge lengths and their inverses
    weight_edge_length = 0.6
    weight_inverse = 0.4
    
    # Create a matrix of inverse distances
    inverse_distance_matrix = 1 / (distance_matrix + 1e-10)  # Adding a small constant to avoid division by zero
    
    # Calculate the heuristic using the weighted sum
    heuristic_matrix = (weight_edge_length * distance_matrix) + (weight_inverse * inverse_distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
