```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # This heuristic function introduces diversity by considering a combination of the following:
    # 1. Average distance to all other nodes (to capture the typical distance a node is from the rest)
    # 2. Distance to the farthest node (to emphasize nodes that are particularly distant)
    # 3. Edge betweenness centrality (to include the influence of edges in the network)
    # 4. Normalization to maintain a balanced scale and to avoid dominance of a single metric
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the maximum distance from each node to all others
    max_node_distances = np.max(distance_matrix, axis=1)
    
    # Calculate edge betweenness centrality
    edge_betweenness = np.sum(distance_matrix ** 2, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Combine heuristics: relative distance to the mean, distance to the farthest node, and edge betweenness
    epsilon = 1e-10
    heuristic_matrix = ((node_distances / mean_distance) +
                        (max_node_distances / (node_distances + epsilon)) +
                        (edge_betweenness / total_edge_distance)) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
