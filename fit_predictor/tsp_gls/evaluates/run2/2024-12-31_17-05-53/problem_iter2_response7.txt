```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function considers the following aspects:
    # - The direct distance between nodes (negative to favor shorter edges)
    # - The distance to the nearest neighbor (larger values are worse)
    # - The relative distance to the mean distance of all edges (to balance the impact of individual edges)

    # Calculate the negative distance matrix to favor shorter edges
    negative_distance_matrix = -distance_matrix

    # Calculate the distance to the nearest neighbor for each node
    nearest_neighbor_distances = np.apply_along_axis(lambda x: np.partition(x, 1)[1], axis=1, arr=distance_matrix)

    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))

    # Calculate the heuristic as a combination of the three factors
    # The sum of distances to the nearest neighbor is larger, so it is subtracted to make it a heuristic
    # The relative distance is divided by the mean distance to normalize it
    heuristic_matrix = negative_distance_matrix - (nearest_neighbor_distances - mean_distance)

    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))

    return normalized_heuristic_matrix
```
