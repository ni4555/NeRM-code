```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # This heuristic function is a mutated version of the previous one, focusing on a combination
    # of local and global features, along with a more robust normalization technique.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the maximum distance from each node to all others
    max_node_distances = np.max(distance_matrix, axis=1)
    
    # Incorporate local information: the distance to the nearest and farthest node
    min_node_distances = np.min(distance_matrix, axis=1)
    local_feature = (min_node_distances / node_distances) + (max_node_distances / node_distances)
    
    # Combine local and global features
    combined_feature = local_feature + ((node_distances / mean_distance) * 0.5)
    
    # Robust normalization using a min-max scale
    min_feature = np.min(combined_feature)
    max_feature = np.max(combined_feature)
    normalized_feature = (combined_feature - min_feature) / (max_feature - min_feature)
    
    # Create the heuristic matrix by scaling the normalized feature back to original range
    # and multiplying by the distance matrix to ensure it has the same sign
    epsilon = 1e-10
    heuristic_matrix = normalized_feature[:, np.newaxis] * distance_matrix
    
    # Normalize the heuristic matrix to avoid negative values
    row_sums = np.sum(heuristic_matrix, axis=1)
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
