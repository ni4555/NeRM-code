```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Improved heuristic function incorporating diversity of metrics and balancing local and global insights
    # Using both local and global features: local = distance to the closest node, global = distance to the farthest node
    # Also considering the diversity in the distances of each node to the entire graph
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the average distance of each node to the entire graph
    total_edge_distance = np.sum(distance_matrix)
    average_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the minimum distance from each node to all others
    min_node_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the diversity in distances for each node
    diversity = (np.abs(node_distances - average_distance))
    
    # Combine heuristics: local (closest node) and global (farthest node) features, along with diversity
    # We add a small constant to avoid division by zero
    epsilon = 1e-10
    heuristic_matrix = ((min_node_distances / average_distance) + 
                        (max(node_distances) / (node_distances + epsilon)) + 
                        (diversity / (diversity + epsilon))) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
