```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function incorporates diversity by considering both local and global
    # heuristics. It uses the relative distance to the closest node and the average distance
    # to balance between local optima and a global perspective.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the average distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    average_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the minimum distance from each node to all others
    min_node_distances = np.min(distance_matrix, axis=1)
    
    # Calculate the closest node to each node
    closest_node_indices = np.argmin(distance_matrix, axis=1)
    closest_node_distances = np.take_along_axis(distance_matrix, np.array([closest_node_indices]), axis=1)
    
    # Combine heuristics: relative distance to the closest node and relative distance to the average
    epsilon = 1e-10
    heuristic_matrix = ((node_distances - min_node_distances) / (average_distance + epsilon)) * \
                       ((node_distances - closest_node_distances) / (average_distance + epsilon)) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
