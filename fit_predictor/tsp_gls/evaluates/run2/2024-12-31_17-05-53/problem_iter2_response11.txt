```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function uses a combination of Prim's algorithm for the MST and the "maximal edge" concept.
    # The heuristic value for an edge is determined by the longest edge in the MST that would be affected
    # if the edge is removed, minus the edge's own length.
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Compute the minimum spanning tree using Prim's algorithm
    num_nodes = distance_matrix.shape[0]
    mst = np.zeros((num_nodes, num_nodes), dtype=bool)
    mst[0, 1:] = distance_matrix[0, 1:] < distance_matrix[0, 0]
    mst[1:, 0] = distance_matrix[1:, 0] < distance_matrix[0, 0]
    for i in range(1, num_nodes):
        if not np.any(mst[i]):
            min_dist = np.min(distance_matrix[i, ~mst[i]])
            j = np.where(distance_matrix[i, ~mst[i]] == min_dist)[0][0]
            mst[i, j] = mst[j, i] = True
    
    # Find the longest edge in the MST that would be affected if the edge is removed
    for i in range(num_nodes):
        for j in range(i+1, num_nodes):
            if mst[i, j]:
                # Find the maximum distance edge that connects to either node i or j and is not part of the MST
                max_edge = np.max(np.minimum(distance_matrix[i, ~mst[i]], distance_matrix[j, ~mst[j]]))
                # The heuristic value is the maximum edge minus the current edge
                heuristic_value = max_edge - distance_matrix[i, j]
                # Set the heuristic value for the current edge
                heuristic_matrix[i, j] = heuristic_value
                heuristic_matrix[j, i] = heuristic_value  # The symmetric edge has the same heuristic
    
    return heuristic_matrix
```
