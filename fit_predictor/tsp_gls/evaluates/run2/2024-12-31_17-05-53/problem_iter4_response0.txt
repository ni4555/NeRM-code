```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This improved heuristic function uses a combination of multiple distance metrics:
    # the sum of distances from each node to all others, the distance to the nearest and farthest neighbors.
    # It also introduces a balance factor to weigh the importance of these metrics.

    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the nearest and farthest neighbor distances for each node
    min_distances = np.min(distance_matrix, axis=1)
    max_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Combine the distance metrics with a balance factor
    balance_factor = 0.5
    combined_metrics = (balance_factor * min_distances) + ((1 - balance_factor) * max_distances) + node_distances
    
    # Normalize the combined metrics to provide a relative scale
    epsilon = 1e-10
    normalized_combined_metrics = (combined_metrics / (np.sum(combined_metrics) + epsilon))
    
    # Create a matrix of heuristics where each entry is the normalized combined metric value
    # of the corresponding edge in the distance matrix
    heuristic_matrix = np.outer(normalized_combined_metrics, normalized_combined_metrics)
    
    return heuristic_matrix
```
