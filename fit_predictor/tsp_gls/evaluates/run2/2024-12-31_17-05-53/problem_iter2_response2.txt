```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function calculates the relative cost of each edge based on
    # the sum of distances from its endpoints to all other nodes and normalizes it
    # by the mean of these sums. It uses the negative distances to ensure that shorter
    # edges have higher heuristic values.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean of these sums
    mean_node_distance = np.mean(node_distances)
    
    # Calculate the heuristic as the sum of the distances from the endpoints minus
    # the mean node distance, multiplied by the negative distance matrix
    heuristic_matrix = np.dot(node_distances[:, np.newaxis], node_distances) - 2 * np.sum(distance_matrix)
    
    # The heuristic is based on the sum of the distances, so we normalize it by the mean
    # node distance to provide a relative scale
    normalized_heuristic_matrix = heuristic_matrix / (mean_node_distance * (distance_matrix.shape[0] - 1))
    
    # Ensure the heuristic values are non-negative
    normalized_heuristic_matrix = np.maximum(normalized_heuristic_matrix, 0)
    
    return normalized_heuristic_matrix
```
