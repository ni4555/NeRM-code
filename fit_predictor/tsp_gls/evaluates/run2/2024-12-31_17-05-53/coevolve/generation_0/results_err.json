{
  "generation": 0,
  "description": "Solving Traveling Salesman Problem (TSP) via guided local search. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.",
  "failed_solutions": [
    {
      "code": "import numpy as np\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    # Calculate the maximum distance in the matrix\n    max_distance = np.max(distance_matrix)\n    \n    # Generate a matrix of the same shape as the input with values from 0 to max_distance\n    heuristics_matrix = np.arange(max_distance + 1)\n    \n    # For each edge in the distance matrix, subtract the distance from the corresponding\n    # value in the heuristics matrix to indicate how bad it is to include that edge\n    for i in range(distance_matrix.shape[0]):\n        for j in range(distance_matrix.shape[1]):\n            if i != j:\n                heuristics_matrix[i, j] -= distance_matrix[i, j]\n    \n    return heuristics_matrix",
      "fitness": Infinity,
      "execution_success": false,
      "error": "Traceback (most recent call last):\n  File \"D:\\ProgramLanguages\\Programs\\Python\\code-gen\\reevo/problems/tsp_gls/eval.py\", line 51, in <module>\n    obj = solve(instance)\n          ^^^^^^^^^^^^^^^\n  File \"D:\\ProgramLanguages\\Programs\\Python\\code-gen\\reevo/problems/tsp_gls/eval.py\", line 21, in solve\n    heu = heuristics(inst.distmat.copy())\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\ProgramLanguages\\Programs\\Python\\code-gen\\reevo\\problems\\tsp_gls\\gpt.py\", line 16, in heuristics_v2\n    return heuristics_matrix\n                ^^^^^^^^^^^^^\nIndexError: too many indices for array: array is 1-dimensional, but 2 were indexed\n",
      "stdout_file": "coevolve\\generation_0\\stdout_3.txt",
      "code_file": "coevolve\\generation_0\\code_3.py"
    }
  ]
}