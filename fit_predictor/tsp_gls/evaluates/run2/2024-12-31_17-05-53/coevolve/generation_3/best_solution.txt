Fitness: 10.669009335499872

Description:
Employ a synergistic evolutionary algorithm for the Traveling Salesman Problem, harmoniously integrating advanced adaptive neighborhood exploration with intelligent guided local search mechanisms. This comprehensive approach prioritizes the refinement of candidate solutions through adaptive neighborhood techniques, while concurrently harnessing the strategic insights of local search to navigate the fitness landscape effectively. By capitalizing on the strengths of both methods, this algorithm seeks to surpass the benchmark solution of 10.617516362484723, delivering enhanced optimization capabilities and surpassing traditional evolutionary strategies.

Code:
import numpy as np
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the Manhattan distance between each pair of nodes
    # Since the distance matrix is symmetric, we only need to calculate half of it
    rows, cols = distance_matrix.shape
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    for i in range(rows):
        for j in range(i + 1, cols):
            # Calculate the Manhattan distance for the edge between nodes i and j
            heuristics_matrix[i, j] = heuristics_matrix[j, i] = np.abs(i - j).sum()
    
    return heuristics_matrix