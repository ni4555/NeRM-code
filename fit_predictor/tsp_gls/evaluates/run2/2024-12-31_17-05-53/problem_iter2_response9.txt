```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function considers the contribution of each edge by calculating the difference
    # between the path that includes the edge and the shortest path not including the edge.
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over each edge to calculate the heuristic value
    for i in range(distance_matrix.shape[0]):
        for j in range(i+1, distance_matrix.shape[1]):
            # Calculate the total distance if the edge is included
            total_distance_including = distance_matrix[i, j]
            # Calculate the total distance if the edge is excluded by considering the next edge
            total_distance_excluding = distance_matrix[i, j-1] + distance_matrix[j-1, j]
            # The heuristic for this edge is the difference between the included and excluded path
            heuristic_value = total_distance_including - total_distance_excluding
            # Set the heuristic value for the current edge
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # The symmetric edge has the same heuristic
    
    return heuristic_matrix
```
