```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # For each edge, compute the heuristic as the ratio of the edge weight to the shortest path from one of its endpoints
    # to any other node.
    for i in range(distance_matrix.shape[0]):
        for j in range(i+1, distance_matrix.shape[0]):
            # Exclude the self-loop
            if i == j:
                continue
            
            # Find the shortest path from either node i or j to all other nodes
            shortest_path_i = np.partition(distance_matrix[i], distance_matrix[i].argmin())
            shortest_path_j = np.partition(distance_matrix[j], distance_matrix[j].argmin())
            
            # Find the smallest edge weight not on the shortest path for both i and j
            max_non_mst_edge_i = np.max(shortest_path_i[1:])
            max_non_mst_edge_j = np.max(shortest_path_j[1:])
            
            # The heuristic value is the ratio of the current edge weight to the maximum non-MST edge
            # weight, which is an indicator of how far away from the shortest path the current edge is.
            heuristic_matrix[i, j] = distance_matrix[i, j] / max_non_mst_edge_i
            heuristic_matrix[j, i] = distance_matrix[j, i] / max_non_mst_edge_j
    
    return heuristic_matrix
```
