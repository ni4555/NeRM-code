```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function incorporates domain-specific knowledge by considering both
    # the average distance and the distance to the farthest node from each node, while
    # also balancing local and global insights using a clustering approach to identify
    # dense subgraphs which might be part of the optimal solution.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the maximum distance from each node to all others
    max_node_distances = np.max(distance_matrix, axis=1)
    
    # Perform a simple clustering to identify dense subgraphs
    # Here we use k-means clustering with a small number of clusters (k)
    k = 3
    centroids, _ = kmeans(distance_matrix, k)
    cluster_distances = np.zeros((distance_matrix.shape[0], k))
    for i, centroid in enumerate(centroids):
        cluster_distances[:, i] = np.linalg.norm(distance_matrix[:, centroid] - centroid, axis=1)
    
    # Calculate the mean distance within each cluster
    cluster_means = np.mean(cluster_distances, axis=1)
    
    # Combine heuristics: relative distance to the mean, relative distance to the farthest node,
    # and relative distance to the cluster mean
    epsilon = 1e-10
    heuristic_matrix = ((node_distances / mean_distance) + 
                        (max_node_distances / (node_distances + epsilon)) + 
                        (cluster_means / (max_node_distances + epsilon))) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
