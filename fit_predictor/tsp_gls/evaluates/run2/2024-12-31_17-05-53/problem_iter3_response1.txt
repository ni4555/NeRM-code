```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function considers the distance to the nearest neighbor and the
    # distance to the farthest neighbor for each node as a way to evaluate edges.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the nearest and farthest neighbor distances for each node
    min_distances = np.min(distance_matrix, axis=1)
    max_distances = np.max(distance_matrix, axis=1)
    
    # Combine the nearest and farthest neighbor distances with the node distances
    # to create a weighted heuristic
    heuristic_values = (min_distances + max_distances + node_distances) / 3
    
    # Normalize the heuristic values to provide a relative scale
    epsilon = 1e-10
    normalized_heuristic_values = (heuristic_values / (np.sum(heuristic_values) + epsilon))
    
    # Create a matrix of heuristics where each entry is the normalized heuristic value
    # of the corresponding edge in the distance matrix
    heuristic_matrix = np.outer(normalized_heuristic_values, normalized_heuristic_values)
    
    return heuristic_matrix
```
