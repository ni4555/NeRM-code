```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # This heuristic function incorporates a mix of domain-specific metrics and global problem insights.
    # It uses both the mean distance and the maximum distance as metrics, but also introduces a balance
    # factor to consider the overall structure of the graph.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the maximum distance from each node to all others
    max_node_distances = np.max(distance_matrix, axis=1)
    
    # Introduce a balance factor based on the ratio of the maximum distance to the mean distance
    balance_factor = max_node_distances / mean_distance
    
    # Combine heuristics: relative distance to the mean, relative distance to the farthest node,
    # and the balance factor
    epsilon = 1e-10
    heuristic_matrix = ((node_distances / mean_distance) +
                        (max_node_distances / (node_distances + epsilon)) +
                        (balance_factor / (balance_factor + epsilon))) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
