```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This improved heuristic function takes into account a combination of metrics and properties.
    # It considers:
    # - The direct distance between nodes (negative to favor shorter edges)
    # - The distance to the nearest neighbor (larger values are worse)
    # - The relative distance to the mean distance of all edges (to balance the impact of individual edges)
    # - The number of MST edges connected to either node to estimate the "badness" of an edge
    
    # Calculate the negative distance matrix to favor shorter edges
    negative_distance_matrix = -distance_matrix
    
    # Calculate the distance to the nearest neighbor for each node
    nearest_neighbor_distances = np.apply_along_axis(lambda x: np.partition(x, 1)[1], axis=1, arr=distance_matrix)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Compute the minimum spanning tree using Prim's algorithm
    num_nodes = distance_matrix.shape[0]
    mst = np.zeros((num_nodes, num_nodes), dtype=bool)
    if num_nodes > 0:
        mst[0, 1:] = distance_matrix[0, 1:] < distance_matrix[0, 0]
        mst[1:, 0] = distance_matrix[1:, 0] < distance_matrix[0, 0]
        for i in range(1, num_nodes):
            if not np.any(mst[i]):
                min_dist = np.min(distance_matrix[i, ~mst[i]])
                j = np.where(distance_matrix[i, ~mst[i]] == min_dist)[0][0]
                mst[i, j] = mst[j, i] = True
    
    # Count the number of MST edges connected to either node i or j
    mst_edges_count = np.sum(mst, axis=1)
    
    # Calculate the heuristic as a combination of the factors
    heuristic_matrix = (
        negative_distance_matrix - (nearest_neighbor_distances - mean_distance) +
        distance_matrix * mst_edges_count  # Larger values here are worse
    )
    
    # Normalize the heuristic matrix to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
