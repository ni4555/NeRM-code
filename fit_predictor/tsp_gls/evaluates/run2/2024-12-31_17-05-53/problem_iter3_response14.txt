```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function uses a combination of domain-specific knowledge and global problem insights.
    # It considers the difference in distances between the minimum and maximum edges connected to each node
    # as a measure of edge importance, while also incorporating the mean distance to normalize the values.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Find the minimum and maximum distances connected to each node
    min_distances = np.min(distance_matrix, axis=1)
    max_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the mean distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the heuristic as a combination of the difference in min and max distances
    # and the normalized node distance, favoring edges with significant differences and shorter distances
    heuristic_matrix = (max_distances - min_distances) * ((node_distances / mean_distance) - 1)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
