```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function uses a guided local search approach.
    # It will attempt to identify edges that are more likely to be swapped out
    # to improve the tour by considering the sum of the distances of paths
    # that include each edge.
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over each city pair to calculate the heuristic value
    for i in range(distance_matrix.shape[0]):
        for j in range(i+1, distance_matrix.shape[1]):
            # Calculate the sum of distances for paths that include this edge
            path_sum = np.sum(distance_matrix[i, :]) + np.sum(distance_matrix[:, j])
            # Normalize by the total number of edges to get the heuristic value
            num_edges = (distance_matrix.shape[0] - 1) * (distance_matrix.shape[0] - 2) / 2
            heuristic_value = path_sum / (num_edges + 1e-10)
            # Set the heuristic value for the current edge
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # The symmetric edge has the same heuristic
    
    return heuristic_matrix
```
