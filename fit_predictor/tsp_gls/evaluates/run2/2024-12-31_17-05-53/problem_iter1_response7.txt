```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function uses a combination of the following ideas:
    # - The edge weight as the primary heuristic
    # - The inverse of the distance (smaller is better)
    # - The sum of distances to the closest node in the matrix (larger is better)

    # Calculate the negative distances as a primary heuristic
    primary_heuristic_matrix = -distance_matrix

    # Calculate the inverse of the distance
    inverse_distance_matrix = 1 / (distance_matrix + 1e-10)

    # Calculate the sum of distances to the closest node for each node
    # using a simple distance-to-closest heuristic
    closest_node_distances = np.min(distance_matrix, axis=1)
    secondary_heuristic_matrix = np.sum(distance_matrix, axis=1)

    # Combine the three heuristics using a weighted sum
    # where primary heuristic has the highest weight, inverse has the middle, and sum has the lowest
    weight_primary = 0.7
    weight_inverse = 0.2
    weight_sum = 0.1
    combined_heuristic_matrix = (weight_primary * primary_heuristic_matrix +
                                weight_inverse * inverse_distance_matrix +
                                weight_sum * secondary_heuristic_matrix)

    # Normalize the combined heuristic matrix
    row_sums = np.sum(combined_heuristic_matrix, axis=1)
    normalized_combined_heuristic_matrix = combined_heuristic_matrix / (row_sums[:, np.newaxis] + 1e-10)

    return normalized_combined_heuristic_matrix
```
