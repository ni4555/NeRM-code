```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function introduces a more complex approach by considering
    # the geometric distance between nodes and the average distance to all other nodes.
    
    # Calculate the Manhattan distance for each edge as a feature
    manhattan_distance = np.abs(np.subtract.outer(distance_matrix, distance_matrix))
    
    # Calculate the average distance from each node to all other nodes
    average_distances = np.apply_along_axis(lambda x: np.mean(distance_matrix[x > 0]), axis=0, arr=distance_matrix)
    
    # Combine the features: Manhattan distance and average distance
    combined_features = manhattan_distance + average_distances
    
    # Normalize the combined features so that they can be used as a heuristic
    row_sums = np.sum(combined_features, axis=1)
    normalized_combined_features = combined_features / (row_sums[:, np.newaxis] + 1e-10)
    
    return normalized_combined_features
```
