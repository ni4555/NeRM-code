```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the heuristic matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the minimum spanning tree (MST) edges
    num_nodes = distance_matrix.shape[0]
    mst = np.zeros((num_nodes, num_nodes), dtype=bool)
    if num_nodes > 1:
        mst[0, 1:] = distance_matrix[0, 1:] < distance_matrix[0, 0]
        mst[1:, 0] = distance_matrix[1:, 0] < distance_matrix[0, 0]
    for i in range(1, num_nodes):
        if not np.any(mst[i]):
            min_dist = np.min(distance_matrix[i, ~mst[i]])
            j = np.where(distance_matrix[i, ~mst[i]] == min_dist)[0][0]
            mst[i, j] = mst[j, i] = True
    
    # Compute the number of non-MST edges in each row
    non_mst_edges_count = np.sum(~mst, axis=1)
    
    # Normalize the count to create the heuristic matrix
    row_sums = np.sum(non_mst_edges_count)
    if row_sums > 0:
        heuristic_matrix = non_mst_edges_count / row_sums
    else:
        heuristic_matrix = np.ones_like(distance_matrix)
    
    return heuristic_matrix
```
