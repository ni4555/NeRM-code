```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function uses the sum of the distances from a given node to all others
    # and the mean distance of the nearest neighbors of each node as the heuristic value for each edge.
    
    # Calculate the sum of distances from each node to all others
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the mean distance of the nearest neighbors of each node
    nearest_neighbors_distances = np.min(distance_matrix, axis=1)
    mean_neighbor_distance = np.mean(nearest_neighbors_distances)
    
    # Calculate the heuristic as the ratio of the node distance to the mean nearest neighbor distance
    # multiplied by the negative distance matrix to favor shorter edges
    heuristic_matrix = (node_distances / mean_neighbor_distance) * (-distance_matrix)
    
    # Normalize the heuristic matrix to avoid negative values and to provide a relative scale
    row_sums = np.sum(heuristic_matrix, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_matrix / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
