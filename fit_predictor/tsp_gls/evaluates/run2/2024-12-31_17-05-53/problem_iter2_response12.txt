```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function leverages the problem structure of the TSP by using a combination of
    # - The edge weight (smaller is better)
    # - The distance to the farthest node (larger is better)
    # - The inverse of the distance (smaller is better)
    
    # Calculate the negative distances as the primary heuristic
    primary_heuristic_matrix = -distance_matrix
    
    # Calculate the sum of distances to the farthest node for each node
    farthest_node_distances = np.max(distance_matrix, axis=1)
    secondary_heuristic_matrix = np.sum(distance_matrix, axis=1)
    
    # Calculate the inverse of the distance
    inverse_distance_matrix = 1 / (distance_matrix + 1e-10)
    
    # Combine the three heuristics using a weighted sum
    # where the primary heuristic has the highest weight, the farthest distance has the middle weight,
    # and the inverse distance has the lowest weight
    weight_primary = 0.5
    weight_farthest = 0.3
    weight_inverse = 0.2
    combined_heuristic_matrix = (weight_primary * primary_heuristic_matrix +
                                weight_farthest * secondary_heuristic_matrix +
                                weight_inverse * inverse_distance_matrix)
    
    # Normalize the combined heuristic matrix
    row_sums = np.sum(combined_heuristic_matrix, axis=1)
    normalized_combined_heuristic_matrix = combined_heuristic_matrix / (row_sums[:, np.newaxis] + 1e-10)
    
    return normalized_combined_heuristic_matrix
```
