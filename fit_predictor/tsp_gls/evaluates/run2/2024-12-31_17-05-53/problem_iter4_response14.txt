```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic function incorporates multiple factors to improve the quality of the TSP solution.
    # It uses the maximum distance from each node, the average distance, the distance to the nearest neighbor,
    # and the global average distance as part of the heuristic value for each edge.
    
    # Calculate the maximum distance from each node to all others
    max_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the nearest neighbor distances for each node
    nearest_neighbor_distances = np.argmin(distance_matrix, axis=1)
    nearest_neighbor_distances = distance_matrix[np.arange(distance_matrix.shape[0]), nearest_neighbor_distances]
    
    # Calculate the average distance of all edges
    total_edge_distance = np.sum(distance_matrix)
    mean_distance = total_edge_distance / (distance_matrix.shape[0] * (distance_matrix.shape[0] - 1))
    
    # Calculate the global average distance
    global_mean_distance = mean_distance
    
    # Combine the heuristics using a weighted sum
    # The weights are chosen to emphasize the global average distance and the nearest neighbor distance
    weights = np.array([0.3, 0.5, 0.2])  # Adjust these weights as needed
    heuristic_values = (
        weights[0] * (max_distances / global_mean_distance) +
        weights[1] * (nearest_neighbor_distances / mean_distance) +
        weights[2] * (-distance_matrix)
    )
    
    # Normalize the heuristic matrix
    row_sums = np.sum(heuristic_values, axis=1)
    epsilon = 1e-10
    normalized_heuristic_matrix = (heuristic_values / (row_sums[:, np.newaxis] + epsilon))
    
    return normalized_heuristic_matrix
```
