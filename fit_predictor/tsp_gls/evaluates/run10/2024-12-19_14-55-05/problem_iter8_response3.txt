```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Introduce a penalty for long loops relative to direct distances
    loop_penalty_factor = 0.1
    median_distance = np.median(distance_matrix[distance_matrix > 0])
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_distance = distance_matrix[i, j] + distance_matrix[j, (i + 1) % num_nodes] + distance_matrix[(i + 1) % num_nodes, i]
                direct_distance = distance_matrix[i, (i + 1) % num_nodes]
                heuristics[i, j] += loop_penalty_factor * (loop_distance - direct_distance)

    # Introduce a global penalty for large distances relative to the median distance in the matrix
    large_distance_penalty = 1e6
    heuristics[distance_matrix > median_distance * large_distance_penalty] = large_distance_penalty - median_distance * large_distance_penalty

    # Introduce a diversity factor to encourage visiting less frequently visited nodes
    diversity_factor = 1e-3
    visited_count = np.sum(distance_matrix > 0, axis=0)
    visited_count[visited_count == 0] = 1  # Avoid division by zero
    heuristics += diversity_factor / (visited_count + 1)

    return heuristics
```
