```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Initialize parameters for different penalties
    direct_penalty_weight = 1.0
    loop_penalty_weight = 2.0
    frequency_penalty_weight = 1.5
    diversity_penalty_weight = 1.0
    distance_threshold = 1e6

    # Calculate direct distance penalties
    direct_distances = np.triu(distance_matrix, 1)
    direct_penalties = np.maximum(0, direct_distance_penalty_weight - direct_distances)

    # Calculate loop penalties
    loop_distances = direct_distances + distance_matrix.diagonal() + np.tril(distance_matrix, -1)
    loop_penalties = np.maximum(0, loop_penalty_weight - loop_distances)

    # Calculate frequency penalties
    frequency_penalties = np.sum(distance_matrix, axis=1)[:, np.newaxis] * np.sum(distance_matrix, axis=0)
    frequency_penalties = np.maximum(0, frequency_penalty_weight - frequency_penalties)

    # Calculate diversity penalties
    diversity_penalties = (np.sum(distance_matrix != np.inf, axis=0) - 2) * (np.sum(distance_matrix != np.inf, axis=1) - 2)
    diversity_penalties = diversity_penalty_weight * diversity_penalties

    # Combine all penalties into a single matrix
    combined_penalties = direct_penalties + loop_penalties + frequency_penalties + diversity_penalties

    # Apply large distance threshold penalty
    heuristics[distance_matrix > distance_threshold] = distance_threshold - distance_matrix[distance_matrix > distance_threshold]

    return heuristics
```
