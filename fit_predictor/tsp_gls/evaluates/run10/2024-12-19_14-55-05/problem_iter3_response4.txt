```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Introduce a balanced penalty that considers both long loops and direct distances
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Balance the penalty between the sum of the current edge and two neighbors (loop penalty)
                # and the direct distance between the current node and its immediate neighbor (direct distance penalty)
                loop_penalty = distance_matrix[i, j] + distance_matrix[j, np.roll(i, 1)] + distance_matrix[np.roll(i, 1), j]
                direct_distance_penalty = distance_matrix[i, np.roll(i, 1)]
                balance_factor = 0.5  # Factor to balance the penalties
                
                # Apply a penalty based on the loop distance being greater than the direct distance
                loop_diff = loop_penalty - (balance_factor * direct_distance_penalty)
                if loop_diff > 0:
                    heuristics[i, j] = loop_diff

    # Use context-aware metrics by giving higher penalties to edges close to the center of the map
    center = num_nodes // 2
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate a context-aware penalty based on proximity to the center
                distance_to_center = np.abs(center - i) + np.abs(center - j)
                context_penalty = distance_to_center * 1e-3  # Small multiplier for the penalty
                heuristics[i, j] += context_penalty

    # Encourage diversity by applying a penalty to edges that are highly connected (e.g., cross-roads)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Count the number of edges connected to node i and node j
                edges_connected_to_i = np.sum(distance_matrix[i, :] != np.inf)
                edges_connected_to_j = np.sum(distance_matrix[j, :] != np.inf)
                # Higher penalty for highly connected nodes
                connectivity_penalty = max(edges_connected_to_i, edges_connected_to_j) * 1e-2
                heuristics[i, j] += connectivity_penalty

    return heuristics
```
