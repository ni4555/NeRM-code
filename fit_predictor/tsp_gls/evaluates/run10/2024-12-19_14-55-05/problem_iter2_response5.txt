```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the minimum and maximum distances for each node to any other node
    min_distances = np.min(distance_matrix, axis=1)
    max_distances = np.max(distance_matrix, axis=1)
    
    # Calculate the average of the max and min distances for each node
    average_max_min = (max_distances + min_distances) / 2
    
    # Define a metric that considers both min and max distances to capture diversity
    # Higher values indicate a less desirable edge
    diversity_metric = distance_matrix * (1 + np.where(distance_matrix > average_max_min, distance_matrix / average_max_min - 1, 0))
    
    # Calculate a relative cost metric based on the total distance minus the minimum distance
    # Higher values indicate a less desirable edge
    relative_cost_metric = distance_matrix - min_distances
    
    # Combine both metrics to get a heuristic value for each edge
    # Weights are used to balance the influence of each metric
    alpha = 0.6
    beta = 0.4
    heuristic_matrix = alpha * diversity_metric + beta * relative_cost_metric
    
    # Apply penalties for very high heuristic values that would indicate a very undesirable edge
    # Here, a simple linear scaling is used as the penalty function
    penalty_threshold = 10
    penalty_function = np.where(heuristic_matrix > penalty_threshold, 1 + (heuristic_matrix - penalty_threshold) / penalty_threshold, 1)
    
    # Cap the heuristic values to prevent extreme influence
    heuristic_matrix[heuristic_matrix < 0] = 0
    heuristic_matrix = penalty_function * heuristic_matrix
    
    return heuristic_matrix
```
