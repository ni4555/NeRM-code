```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the distance from each city to the furthest city
    max_distances = np.max(distance_matrix, axis=1)
    
    # Create a matrix where the value at [i, j] indicates the shortest path
    # from city i to city j avoiding the city with the furthest distance from i
    heuristic_matrix = np.copy(distance_matrix)
    for i in range(len(heuristic_matrix)):
        for j in range(len(heuristic_matrix)):
            if i != j:
                # Subtract the distance to the furthest city from the distance matrix
                heuristic_matrix[i, j] -= max_distances[i]
    
    # Normalize the heuristic matrix to be between 0 and 1
    min_val = np.min(heuristic_matrix[heuristic_matrix > 0])
    max_val = np.max(heuristic_matrix[heuristic_matrix > 0])
    normalized_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    # Return a negative normalized matrix to simulate the cost
    return -normalized_matrix
```
