```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    max_possible_loop = num_nodes * np.max(distance_matrix)
    large_weight_penalty = 1e6

    heuristics = np.full_like(distance_matrix, np.inf)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_distance = distance_matrix[i, j] + distance_matrix[j, i]
                # Direct distance penalty
                direct_penalty = loop_distance - distance_matrix[i, i]
                # Apply additional penalty for large loop distances
                if loop_distance > max_possible_loop:
                    direct_penalty += max_possible_loop - loop_distance
                # Apply penalty for common structures
                common_structure_penalty = 0
                for k in range(num_nodes):
                    if k != i and k != j and distance_matrix[i, k] + distance_matrix[k, j] < distance_matrix[i, j]:
                        common_structure_penalty += 1
                direct_penalty += common_structure_penalty
                # Normalize the penalty to a range [0, 1)
                if max_possible_loop > 0:
                    direct_penalty /= max_possible_loop
                # Apply large penalty to large weight edges
                if loop_distance > large_weight_penalty:
                    direct_penalty += large_weight_penalty - loop_distance
                # Avoid self-loops
                if i == j:
                    direct_penalty = 0
                heuristics[i, j] = min(heuristics[i, j], direct_penalty)

    # Normalize to a uniform scale
    min_heuristics = np.min(heuristics)
    max_heuristics = np.max(heuristics)
    heuristics -= min_heuristics
    heuristics /= (max_heuristics - min_heuristics)

    return heuristics
```
