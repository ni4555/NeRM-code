```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the minimum distance from each node to any other node
    min_distances = np.min(distance_matrix, axis=1)

    # Incorporate local information: edges are worse if they are longer than the minimum distance
    # from one of the nodes to any other node
    local_heuristic = np.maximum(0, distance_matrix - min_distances[:, np.newaxis])
    
    # Incorporate global information: edges are better if they connect nodes with higher overall
    # distances from the rest of the graph, considering the average minimum distances from each
    # node to any other node
    average_min_distance = np.mean(min_distances)
    global_heuristic = np.where(distance_matrix < average_min_distance,
                                average_min_distance - distance_matrix,
                                0)
    
    # Combine local and global heuristics
    heuristic_matrix = local_heuristic + global_heuristic
    
    # Normalize the heuristic values to ensure they are non-negative
    heuristic_matrix = np.clip(heuristic_matrix, 0, None)
    
    return heuristic_matrix
```
