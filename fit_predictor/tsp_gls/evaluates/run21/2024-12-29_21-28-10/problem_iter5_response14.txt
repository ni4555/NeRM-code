```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Subtract the minimum distance from the current edge's distance
                local heuristic = distance_matrix[i, j] - (min_dist_i + min_dist_j)
                
                # Calculate the global connectivity using the average minimum distance to all other nodes
                global_connectivity = np.mean([np.min(distance_matrix[node, :]) for node in range(num_nodes) if node not in (i, j)])
                
                # Combine local and global heuristics with adaptive weighting
                weight = 0.5  # This could be adjusted dynamically based on the problem characteristics
                heuristics[i, j] = weight * local heuristic + (1 - weight) * (distance_matrix[i, j] - global_connectivity)

    return heuristics
```
