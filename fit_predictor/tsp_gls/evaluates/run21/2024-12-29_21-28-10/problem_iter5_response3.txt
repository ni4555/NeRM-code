```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Calculate the average minimum distance among all nodes
                avg_min_dist = np.mean(np.min(distance_matrix, axis=0))
                
                # Apply adaptive weighting based on the global connectivity
                # A higher weight is applied if the edge distance is significantly higher than the average minimum distance
                weight = 1 if distance_matrix[i, j] < 1.5 * avg_min_dist else 2
                
                # Subtract the minimum distance from the current edge's distance and apply the weight
                heuristics[i, j] = distance_matrix[i, j] - (min_dist_i + min_dist_j) * weight

    return heuristics
```
