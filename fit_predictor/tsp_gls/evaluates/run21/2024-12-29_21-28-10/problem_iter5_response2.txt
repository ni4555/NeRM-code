```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Calculate the global connectivity based on the minimum sum of distances to all other nodes
                global_connectivity = np.min(distance_matrix)
                
                # Weights for local edge properties and global connectivity
                local_weight = 0.7
                global_weight = 0.3
                
                # Calculate heuristic using weighted sum of local and global metrics
                heuristics[i, j] = (distance_matrix[i, j] - (min_dist_i + min_dist_j)) * local_weight + \
                                   (global_connectivity - distance_matrix[i, j]) * global_weight

    return heuristics
```
