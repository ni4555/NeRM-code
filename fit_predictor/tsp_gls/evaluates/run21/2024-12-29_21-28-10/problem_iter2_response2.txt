```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic that takes into account both the distance to the nearest neighbor and the degree of each vertex
    # A lower distance to the nearest neighbor and a lower degree make an edge less "bad"
    num_vertices = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_vertices):
        # Set the distance to self-loops to a large value
        heuristics_matrix[i, i] = np.inf
        
        # Find the minimum distance to a neighboring vertex
        min_distance = np.min(distance_matrix[i, :])
        
        # Calculate the degree of the vertex
        degree = np.sum(distance_matrix[i, :]) - distance_matrix[i, i]
        
        # Assign a heuristic value to the edge based on the minimum distance and the degree
        heuristics_matrix[i, :] = (distance_matrix[i, :] - min_distance) / (degree + 1)
    
    return heuristics_matrix
```
