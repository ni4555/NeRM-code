```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Define a variable for the neighborhood size, which can be adjusted based on the problem context
    neighborhood_size = 3
    
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the average distance to the nearest neighbors for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                avg_dist_i = np.mean(distance_matrix[i, :neighborhood_size])
                avg_dist_j = np.mean(distance_matrix[j, :neighborhood_size])
                
                # Incorporate a global connectivity measure by considering the average distances
                heuristics[i, j] = distance_matrix[i, j] - (min_dist_i + min_dist_j) + (avg_dist_i + avg_dist_j) / 2
                
                # Adaptive weighting can be implemented by adjusting the importance of local and global metrics
                # Here, we are using a simple weighting factor
                weight_local = 0.5
                weight_global = 0.5
                
                # Apply the weight to the heuristics
                heuristics[i, j] *= weight_local + weight_global

    return heuristics
```
