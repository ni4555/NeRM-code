```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Calculate the average distance to all other nodes
                avg_dist_i = np.mean(distance_matrix[i, :])
                avg_dist_j = np.mean(distance_matrix[j, :])
                
                # Calculate the standard deviation of distances for local connectivity
                std_dist_i = np.std(distance_matrix[i, :])
                std_dist_j = np.std(distance_matrix[j, :])
                
                # Weigh the local edge properties and global connectivity
                heuristics[i, j] = distance_matrix[i, j] - (0.5 * (min_dist_i + min_dist_j) + 0.5 * (avg_dist_i + avg_dist_j) - 0.2 * (std_dist_i + std_dist_j))

    return heuristics
```
