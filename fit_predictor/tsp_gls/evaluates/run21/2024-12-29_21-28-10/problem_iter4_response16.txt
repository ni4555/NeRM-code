```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Multi-resolution analysis
    resolution_factors = [1.0, 0.9, 0.8, 0.7]
    for factor in resolution_factors:
        # Smoothing to detect longer edges
        smoothed_matrix = np.zeros_like(distance_matrix)
        for i in range(n):
            for j in range(n):
                smoothed_matrix[i][j] = np.mean(distance_matrix[max(0, i - int(factor)):i + int(factor) + 1,
                                                                max(0, j - int(factor)):j + int(factor) + 1])
        
        # Local features: Shortest path heuristics
        for i in range(n):
            for j in range(n):
                if i != j:
                    min_i = np.min(smoothed_matrix[i])
                    min_j = np.min(smoothed_matrix[j])
                    min_path_length = min_i + min_j
                    if min_path_length < smoothed_matrix[i][j]:
                        heuristic_matrix[i][j] += (smoothed_matrix[i][j] - min_path_length) / min_path_length
        
        # Detect edges that are significantly longer than the average
        average_distance = np.mean(smoothed_matrix)
        bad_edges = smoothed_matrix > average_distance * 1.5
        
        # Adjust the heuristic for bad edges
        for i in range(n):
            for j in range(n):
                if bad_edges[i][j]:
                    heuristic_matrix[i][j] *= 1.2
    
    # Normalize the matrix to ensure all values are between 0 and 1
    max_val = np.max(heuristic_matrix)
    heuristic_matrix = heuristic_matrix / max_val
    
    return heuristic_matrix
```
