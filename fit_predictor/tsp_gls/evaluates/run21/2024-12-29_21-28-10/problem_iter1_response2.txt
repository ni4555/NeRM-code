```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Heuristic based on the idea of including edges that would potentially
    # lead to shorter paths in the final tour by considering the mean distance
    # to all other nodes for each edge.
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                edge_dist = distance_matrix[i, j]
                # Calculate the mean distance from node i to all other nodes
                # and node j to all other nodes, and use it as the heuristic value
                heuristics[i, j] = (np.mean(distance_matrix[i, :]) +
                                    np.mean(distance_matrix[:, j]) -
                                    2 * edge_dist)

    return heuristics
```
