```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the average distance to the nearest neighbors for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Subtract the average minimum distance from the current edge's distance
                avg_min_dist = (min_dist_i + min_dist_j) / 2
                heuristics[i, j] = distance_matrix[i, j] - avg_min_dist

    # Introduce a small random factor to encourage exploration of alternative edges
    random_factor = np.random.normal(0, 0.01, size=heuristics.shape)
    heuristics += random_factor

    return heuristics
```
