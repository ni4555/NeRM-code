```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the distance to the nearest neighbor for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                
                # Calculate the distance to the second nearest neighbor for both nodes
                second_min_dist_i = np.partition(distance_matrix[i, :], 1)[1]
                second_min_dist_j = np.partition(distance_matrix[j, :], 1)[1]
                
                # Use a weighted sum to balance between the smallest and second smallest distances
                heuristics[i, j] = distance_matrix[i, j] - (min_dist_i + min_dist_j) + \
                                   0.5 * (second_min_dist_i + second_min_dist_j - min_dist_i - min_dist_j)

    return heuristics
```
