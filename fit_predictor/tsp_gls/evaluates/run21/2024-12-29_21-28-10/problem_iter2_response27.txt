```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = -distance_matrix.copy()

    # Calculate the average distance from each node to all other nodes
    avg_distances = np.mean(distance_matrix, axis=1)

    # Adjust the heuristic based on the average distance
    # Lower the value of the edge if it's significantly longer than the average distance
    for i in range(num_nodes):
        for j in range(num_nodes):
            if distance_matrix[i, j] > avg_distances[i] * 1.5:
                heuristic_matrix[i, j] *= 1.2  # Increase the "badness" of this edge

    # Consider the degree of each node (number of connections)
    # It's better to have edges connected to high-degree nodes
    degrees = np.sum(distance_matrix, axis=0)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if degrees[i] < num_nodes / 2 or degrees[j] < num_nodes / 2:
                # If either node has a low degree, increase the "badness" of the edge
                heuristic_matrix[i, j] *= 1.1

    # Avoid highly connected nodes, as they may not offer good paths out of the current neighborhood
    for i in range(num_nodes):
        for j in range(num_nodes):
            if degrees[i] > num_nodes / 2 and degrees[j] > num_nodes / 2:
                # If both nodes are highly connected, increase the "badness" of the edge
                heuristic_matrix[i, j] *= 1.1

    return heuristic_matrix
```
