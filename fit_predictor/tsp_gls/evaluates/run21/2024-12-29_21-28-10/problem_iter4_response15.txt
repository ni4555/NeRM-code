```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Calculate the average distance to the nearest neighbors for both nodes
                min_dist_i = np.min(distance_matrix[i, :])
                min_dist_j = np.min(distance_matrix[j, :])
                avg_min_dist = (min_dist_i + min_dist_j) / 2
                
                # Calculate the average distance of the entire row and column excluding the current edge
                row_avg = np.mean(distance_matrix[i, :]) - distance_matrix[i, j]
                col_avg = np.mean(distance_matrix[:, j]) - distance_matrix[i, j]
                avg_of_avg = (row_avg + col_avg) / 2
                
                # Determine the heuristic value based on these averages
                heuristic_value = distance_matrix[i, j] - avg_of_avg
                
                # Introduce a randomness factor to encourage exploration
                randomness_factor = np.random.normal(0, 0.01)
                
                # Combine the heuristic value with the randomness
                heuristics[i, j] = heuristic_value + randomness_factor

    return heuristics
```
