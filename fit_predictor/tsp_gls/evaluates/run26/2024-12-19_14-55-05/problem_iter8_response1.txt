```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Loop and direct distance considerations
    loop_penalty_factor = 0.2
    min_distance = np.min(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_distance = distance_matrix[i, j] + distance_matrix[j, i]
                direct_distance = distance_matrix[i, i] + distance_matrix[j, j]
                heuristics[i, j] += loop_penalty_factor * (loop_distance - direct_distance)

    # Common structure consideration
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                common_structure_penalty = 0
                for k in range(num_nodes):
                    if k != i and k != j and distance_matrix[i, k] + distance_matrix[k, j] < distance_matrix[i, j]:
                        common_structure_penalty += 1
                heuristics[i, j] += common_structure_penalty * loop_penalty_factor

    # Diversity consideration
    diversity_factor = 1e-3
    visited_count = np.sum(distance_matrix > 0, axis=0)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if distance_matrix[i, j] == 0:  # Unvisited edges
                heuristics[i, j] += diversity_factor / (visited_count[i] * visited_count[j])

    # Normalize to a uniform scale
    min_heuristics = np.min(heuristics)
    max_heuristics = np.max(heuristics)
    heuristics = (heuristics - min_heuristics) / (max_heuristics - min_heuristics)

    # Add a self-loop penalty for each node
    self_loop_penalty = 1e5
    heuristics = np.where(np.eye(num_nodes), self_loop_penalty, heuristics)

    return heuristics
```
