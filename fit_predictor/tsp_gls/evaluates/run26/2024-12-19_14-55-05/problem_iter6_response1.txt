```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    max_possible_loop = num_nodes * np.max(distance_matrix)
    large_weight_penalty = 1e6

    # Apply a penalty based on the loop distance
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_distance = distance_matrix[i, j] + distance_matrix[j, i]
                heuristics[i, j] = loop_distance - distance_matrix[i, i]

                # Discourage large loop distances
                if loop_distance > max_possible_loop:
                    heuristics[i, j] += large_weight_penalty

    # Normalize the penalties to a range where larger values represent worse edges
    min_penalty = np.min(heuristics)
    max_penalty = np.max(heuristics)
    heuristics = (heuristics - min_penalty) / (max_penalty - min_penalty)

    # Apply a global diversity heuristic that penalizes edges that are part of common structures (like cycles)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                common_structure_penalty = 0
                for k in range(num_nodes):
                    if k != i and k != j and distance_matrix[i, k] + distance_matrix[k, j] < distance_matrix[i, j]:
                        common_structure_penalty += 1
                heuristics[i, j] *= (1 + common_structure_penalty)

    # Ensure that self-loops are not penalized
    heuristics[distance_matrix == 0] = 0

    return heuristics
```
