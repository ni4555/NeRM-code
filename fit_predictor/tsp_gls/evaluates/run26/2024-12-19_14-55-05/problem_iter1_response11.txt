```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Heuristic that increases the 'badness' of edges that cross each other
    # in the optimal solution, as it is likely to be suboptimal in that case.
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                for k in range(num_nodes):
                    if k != i and k != j:
                        # If edge (i, j) and edge (i, k) or (j, k) are in conflict
                        if (k < j and distance_matrix[i, j] < distance_matrix[i, k] and distance_matrix[j, k] < distance_matrix[i, k]) or \
                           (k > j and distance_matrix[i, j] < distance_matrix[i, k] and distance_matrix[i, k] < distance_matrix[j, k]):
                            heuristic_matrix[i, j] += 1
    return heuristic_matrix
```
