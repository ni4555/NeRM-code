```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    max_possible_loop = num_nodes * np.max(distance_matrix)

    # Calculate the penalty for each edge based on the loop distance
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_distance = distance_matrix[i, j] + distance_matrix[j, i]
                heuristics[i, j] = loop_distance - distance_matrix[i, i]  # Exclude self-loop penalty

                # Calculate the penalty for the edge forming a long loop
                if loop_distance > max_possible_loop:
                    heuristics[i, j] = max_possible_loop - loop_distance

    # Add a penalty for edges with large weights to encourage the exploration of shorter paths
    large_weight_penalty = 1e6
    heuristics[distance_matrix > large_weight_penalty] = large_weight_penalty - distance_matrix[distance_matrix > large_weight_penalty]

    return heuristics
```
