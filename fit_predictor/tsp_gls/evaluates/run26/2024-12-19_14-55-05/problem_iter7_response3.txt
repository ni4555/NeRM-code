```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Apply direct distance penalties
    direct_distance_penalty = 0.1
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] = direct_distance_penalty * distance_matrix[i, j]

    # Fostering diversity through a diversity factor
    diversity_factor = 1e-3
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] += diversity_factor / (num_nodes - 1)

    # Apply structure-based normalization
    min_distance = np.min(distance_matrix)
    heuristics = heuristics / min_distance

    return heuristics
```
