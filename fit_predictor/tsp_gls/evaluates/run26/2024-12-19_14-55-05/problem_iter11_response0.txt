```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Median penalty
    median_distance = np.median(np.flatnonzero(distance_matrix))
    for i in range(num_nodes):
        for j in range(num_nodes):
            heuristics[i, j] = median_distance - distance_matrix[i, j]

    # Structural incentives
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                for k in range(num_nodes):
                    heuristics[i, j] += distance_matrix[i, j] - distance_matrix[i, k] - distance_matrix[j, k]

    # Frequency diversity
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics[i, j] += 1e-3 / (np.sum(distance_matrix[i, :] > 0) * np.sum(distance_matrix[:, j] > 0))

    # Normalization
    heuristics = heuristics / np.max(heuristics)

    return heuristics
```
