```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Apply a direct penalty that increases with the distance
                heuristics[i, j] = distance_matrix[i, j]
                
                # Apply a loop penalty based on the sum of distances in the loop minus the direct distance
                loop_distance = distance_matrix[i, j] + distance_matrix[j, np.roll(i, 1)] + distance_matrix[np.roll(i, 1), j]
                direct_distance = distance_matrix[i, np.roll(i, 1)]
                loop_penalty = loop_distance - direct_distance
                heuristics[i, j] += loop_penalty

                # Apply a diversity penalty for frequently visited edges to escape local optima
                if np.sum(distance_matrix[:, j]) > num_nodes:
                    diversity_penalty = 1e-4
                    heuristics[i, j] += diversity_penalty

    # Normalize the heuristics to keep them within a manageable range
    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())

    return heuristics
```
