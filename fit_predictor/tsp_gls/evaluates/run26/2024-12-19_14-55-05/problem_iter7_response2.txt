```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Introduce a balanced penalty that combines loop and direct distances
    loop_penalty_factor = 0.1
    min_distance = np.min(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_distance = distance_matrix[i, j] + distance_matrix[j, np.roll(i, 1)] + distance_matrix[np.roll(i, 1), j]
                direct_distance = distance_matrix[i, np.roll(i, 1)]
                # A balanced penalty that takes into account both the loop and direct distances
                heuristics[i, j] += loop_penalty_factor * max(0, loop_distance - direct_distance)

    # Normalize penalties using the minimum distance to prevent bias towards small numbers
    heuristics /= min_distance

    # Introduce a structure-based normalization to ensure that highly connected nodes have higher penalties
    structure_factor = 1.5
    for i in range(num_nodes):
        heuristics[i, i] += structure_factor  # Self-loop penalty
        heuristics[i, np.where(distance_matrix[i, :] == min(distance_matrix[i]))] *= structure_factor

    # Encourage diversity by increasing the penalty for edges that connect frequently visited nodes
    diversity_factor = 1e-3
    visited_count = np.sum(distance_matrix > 0, axis=0)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if distance_matrix[i, j] == 0:  # Unvisited edges
                heuristics[i, j] += diversity_factor / (visited_count[i] * visited_count[j])

    return heuristics
```
