```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Introduce a penalty for edges that form "long loops"
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                loop_distance = distance_matrix[i, j] + distance_matrix[j, np.roll(i, 1)] + distance_matrix[np.roll(i, 1), j]
                direct_distance = distance_matrix[i, np.roll(i, 1)]
                heuristics[i, j] = loop_distance - direct_distance

    # Incorporate a balance of penalties for both long loops and large direct distances
    long_loop_penalty = 1e2
    large_distance_penalty = 1e6
    heuristics[distance_matrix > large_distance_penalty] = large_distance_penalty - distance_matrix[distance_matrix > large_distance_penalty]
    heuristics[loop_distance > direct_distance] += long_loop_penalty

    # Context-aware metric: lower penalty for edges that connect highly connected nodes
    for i in range(num_nodes):
        connections = np.sum(distance_matrix[i] < large_distance_penalty) - 1  # Exclude self-loops
        if connections > 1:
            highly_connected_penalty = 1e-2
            heuristics[i, np.isin(distance_matrix[i], distance_matrix < large_distance_penalty)[np.isin(distance_matrix[i], distance_matrix < large_distance_penalty)]] *= (1 - highly_connected_penalty)

    # Favor diversity by adding a slight penalty to similar edges
    for i in range(num_nodes):
        for j in range(num_nodes):
            for k in range(num_nodes):
                if i != j and j != k and i != k:
                    similarity_penalty = 1e-3 * (distance_matrix[i, j] + distance_matrix[j, k] + distance_matrix[i, k] - distance_matrix[i, k])
                    heuristics[i, j] += similarity_penalty
                    heuristics[i, k] += similarity_penalty
                    heuristics[j, k] += similarity_penalty

    return heuristics
```
