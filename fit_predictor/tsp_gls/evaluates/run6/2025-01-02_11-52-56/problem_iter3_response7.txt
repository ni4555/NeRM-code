```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Assuming distance_matrix is symmetric and the diagonal elements are zeros
    num_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge using a combination of metrics
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Use the relative distance from the average distance to the max node distance
            relative_distance = distance_matrix[i, j] / (np.mean(distance_matrix[i, :]) + np.mean(distance_matrix[j, :]))
            # Add a term that emphasizes larger jumps (i.e., long distances in relation to the average)
            jump_distance = distance_matrix[i, j] / np.mean(distance_matrix)
            # Combine these two into the heuristic value
            heuristic_value = (relative_distance + jump_distance) * 0.5
            # Use a penalty for edges that connect to nodes with large distance deviations
            if np.abs(np.mean(distance_matrix[i, :]) - np.mean(distance_matrix[j, :])) > np.mean(distance_matrix):
                heuristic_value *= 1.1
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
