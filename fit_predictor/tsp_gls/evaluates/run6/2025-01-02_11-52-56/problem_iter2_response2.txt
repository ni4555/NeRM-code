```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Improved heuristic that balances distance and connectivity:
            # Distance-based term: direct distance
            # Connectivity-based term: sum of distances from i to all other nodes plus from j to all other nodes
            distance_based = distance_matrix[i, j]
            connectivity_based = np.sum(distance_matrix[i, :]) + np.sum(distance_matrix[j, :])
            # Normalize the heuristic by the connectivity to avoid simplistic averages
            heuristic_value = distance_based + connectivity_based
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
