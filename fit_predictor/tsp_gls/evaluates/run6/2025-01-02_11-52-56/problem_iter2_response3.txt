```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Initialize the heuristic matrix with the distance matrix
    heuristic_matrix = np.copy(distance_matrix)
    
    # For each edge, subtract the sum of the shortest paths from the edge endpoints to all other nodes
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            shortest_paths_to_i = np.sort(distance_matrix[i, :])[:num_nodes-1]
            shortest_paths_to_j = np.sort(distance_matrix[j, :])[:num_nodes-1]
            heuristic_value = heuristic_matrix[i, j] - (np.sum(shortest_paths_to_i) + np.sum(shortest_paths_to_j))
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    # Ensure the diagonal is set to infinity to indicate that no edge goes to the same node
    np.fill_diagonal(heuristic_matrix, np.inf)
    
    return heuristic_matrix
```
