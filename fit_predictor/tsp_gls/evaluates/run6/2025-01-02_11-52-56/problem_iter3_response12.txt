```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate relative distances and neighbor influences
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            min_distance_to_i = np.min(distance_matrix[:, i])
            min_distance_to_j = np.min(distance_matrix[:, j])
            # Use a combination of the minimum distances to neighbors
            heuristic_value = (min_distance_to_i + min_distance_to_j) / (distance_matrix[i, j] + 1)
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    # Introduce problem-specific features by considering the symmetry of the problem
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Use the average of the heuristic values from both perspectives
            heuristic_value = (heuristic_matrix[i, j] + heuristic_matrix[j, i]) / 2
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
