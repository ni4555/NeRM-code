```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Feature 1: Edge weight
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            heuristic_matrix[i, j] = distance_matrix[i, j]
            heuristic_matrix[j, i] = distance_matrix[i, j]
    
    # Feature 2: Influence of maximum distances
    max_distances = np.max(distance_matrix, axis=1)
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            heuristic_matrix[i, j] += (max_distances[i] + max_distances[j] - distance_matrix[i, j])
            heuristic_matrix[j, i] += (max_distances[i] + max_distances[j] - distance_matrix[i, j])
    
    # Feature 3: Node degree
    degree_matrix = np.sum(distance_matrix, axis=0)
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            degree_sum = degree_matrix[i] + degree_matrix[j]
            if degree_sum > 0:
                heuristic_matrix[i, j] *= (degree_sum / (degree_sum + 1))
                heuristic_matrix[j, i] *= (degree_sum / (degree_sum + 1))
    
    # Normalize the heuristic matrix
    row_sums = np.sum(heuristic_matrix, axis=1)
    for i in range(num_nodes):
        if row_sums[i] > 0:
            heuristic_matrix[i, :] /= row_sums[i]
    
    return heuristic_matrix
```
