```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Improved heuristic using the triangle inequality principle
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # For each edge (i, j), find the minimum distance from either i or j to any other node
            # This reflects the fact that the shortest path to the other nodes is at least as short as
            # the direct distance between i and j
            min_distance_i = np.min(distance_matrix[i, :])
            min_distance_j = np.min(distance_matrix[j, :])
            heuristic_value = min(min_distance_i, min_distance_j)
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
