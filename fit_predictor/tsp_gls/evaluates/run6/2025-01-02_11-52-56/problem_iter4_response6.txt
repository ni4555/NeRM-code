```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Calculate the distance from i to the closest node (excluding itself)
            min_distance_to_i = np.min(distance_matrix[i, :i])
            # Calculate the distance from j to the closest node (excluding itself)
            min_distance_to_j = np.min(distance_matrix[j, :j])
            # Combine the two distances using a simple average to create the heuristic value
            heuristic_value = (min_distance_to_i + min_distance_to_j) / 2
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
