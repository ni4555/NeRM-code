```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            min_distance_from_i = np.min(distance_matrix[i, :])
            max_distance_from_i = np.max(distance_matrix[i, :])
            min_distance_from_j = np.min(distance_matrix[j, :])
            max_distance_from_j = np.max(distance_matrix[j, :])
            average_min_distance = (min_distance_from_i + min_distance_from_j) / 2
            average_max_distance = (max_distance_from_i + max_distance_from_j) / 2
            sum_average_distances = average_min_distance + average_max_distance
            if sum_average_distances != 0:
                heuristic_value = distance_matrix[i, j] / sum_average_distances
            else:
                heuristic_value = 1
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    symmetry_difference = heuristic_matrix.sum() / (2 * num_nodes * (num_nodes - 1))
    symmetry_diff_adjustment = symmetry_difference - (1 / (num_nodes - 1))
    if symmetry_diff_adjustment != 0:
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                heuristic_matrix[i, j] -= symmetry_diff_adjustment
                heuristic_matrix[j, i] += symmetry_diff_adjustment
    
    return heuristic_matrix
```
