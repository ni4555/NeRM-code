```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Improved heuristic that considers the distance of i to j and the distances
            # of i and j to their nearest neighbors to avoid large loops
            distances_to_i = distance_matrix[i, :]
            distances_to_j = distance_matrix[j, :]
            
            # Find the indices of the nearest neighbors
            nearest_neighbor_i = np.argmin(distances_to_i)
            nearest_neighbor_j = np.argmin(distances_to_j)
            
            # Calculate the sum of distances to the nearest neighbors
            nearest_neighbor_distance_sum = distances_to_i[nearest_neighbor_i] + distances_to_j[nearest_neighbor_j]
            
            # Calculate the heuristic value
            heuristic_value = nearest_neighbor_distance_sum - distance_matrix[i, j]
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
