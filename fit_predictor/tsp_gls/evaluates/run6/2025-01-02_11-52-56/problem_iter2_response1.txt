```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Calculate the total distance from i to all other nodes and j to all other nodes
            total_distance_i = np.sum(distance_matrix[i, :])
            total_distance_j = np.sum(distance_matrix[j, :])
            
            # Calculate the distance from i to j and j to i
            distance_ij = distance_matrix[i, j]
            distance_ji = distance_matrix[j, i]
            
            # Heuristic considering the average distance from i and j to all other nodes
            # Subtracting the edge distance to approximate the reduced distance
            heuristic_value = (total_distance_i + total_distance_j - distance_ij - distance_ji) / (total_distance_i + total_distance_j)
            
            # Incorporate the edge distance in the denominator to weight the importance of the edge
            heuristic_value /= (distance_ij + distance_ji)
            
            # Reflect symmetry in the heuristic function
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
