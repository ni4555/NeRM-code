```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Assuming distance_matrix is symmetric and the diagonal elements are zeros
    num_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge using the direct distance
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            heuristic_value = distance_matrix[i, j]
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    # Normalize the heuristic values to ensure they are between 0 and 1
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    if max_distance != min_distance:
        heuristic_matrix = (heuristic_matrix - min_distance) / (max_distance - min_distance)
    
    return heuristic_matrix
```
