```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Feature 1: Edge weight with emphasis on shorter edges
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            heuristic_matrix[i, j] = 1 / (1 + distance_matrix[i, j])
            heuristic_matrix[j, i] = 1 / (1 + distance_matrix[i, j])
    
    # Feature 2: Symmetry-based normalization
    # Normalize the edge weight based on the sum of the minimum distances from the endpoints to all other nodes
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            min_distance_from_i = np.min(distance_matrix[i, :])
            min_distance_from_j = np.min(distance_matrix[j, :])
            extremities_sum = min_distance_from_i + min_distance_from_j
            heuristic_matrix[i, j] /= extremities_sum
            heuristic_matrix[j, i] /= extremities_sum
    
    # Feature 3: Local influence with a global perspective
    # Increase the heuristic value for less visited nodes
    degree_matrix = np.sum(distance_matrix, axis=0)
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # If both nodes are of low degree, increase the heuristic value
            if degree_matrix[i] + degree_matrix[j] < num_nodes:
                heuristic_matrix[i, j] *= (num_nodes - (degree_matrix[i] + degree_matrix[j]))
                heuristic_matrix[j, i] *= (num_nodes - (degree_matrix[i] + degree_matrix[j]))
    
    # Normalize the heuristic matrix to sum to 1 over each row
    for i in range(num_nodes):
        row_sum = np.sum(heuristic_matrix[i, :])
        if row_sum > 0:
            heuristic_matrix[i, :] /= row_sum
    
    return heuristic_matrix
```
