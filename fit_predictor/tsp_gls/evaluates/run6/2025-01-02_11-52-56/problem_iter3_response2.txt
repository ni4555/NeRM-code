```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate relative distances between each pair of nodes
    relative_distances = distance_matrix / np.mean(distance_matrix[distance_matrix > 0], axis=0)
    
    # Incorporate local metrics: the minimum distance to any other node
    local_metrics = np.min(distance_matrix, axis=1)
    
    # Combine relative distances and local metrics
    combined_metrics = relative_distances + (1 - local_metrics)
    
    # Normalize combined metrics by the maximum possible value to ensure non-negative heuristics
    max_combined_metric = np.max(combined_metrics)
    if max_combined_metric > 0:
        combined_metrics /= max_combined_metric
    
    # Use combined metrics as the heuristic values
    heuristic_matrix = combined_metrics
    
    return heuristic_matrix
```
