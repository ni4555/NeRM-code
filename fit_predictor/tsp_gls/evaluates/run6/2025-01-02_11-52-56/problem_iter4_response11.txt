```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the degree of each node
    node_degrees = np.sum(distance_matrix > 0, axis=1)
    
    # Initialize the matrix for minimum edge weights from each node to all others
    min_edges = np.zeros(num_nodes)
    for i in range(num_nodes):
        min_edges[i] = np.min(distance_matrix[i, node_degrees > 0])
    
    # Iterate through each edge and calculate the heuristic
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Calculate the heuristic using a weighted average of the distance and the minimum edge
            avg_distance = np.mean(distance_matrix[i, :]) + np.mean(distance_matrix[j, :])
            heuristic_value = (distance_matrix[i, j] + min_edges[i] + min_edges[j] - 2 * avg_distance) / 2
            # Adjust the heuristic based on node degrees
            if node_degrees[i] < num_nodes / 2 or node_degrees[j] < num_nodes / 2:
                heuristic_value *= 1.1
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric

    return heuristic_matrix
```
