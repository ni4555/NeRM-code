```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Improved heuristic that considers the minimum distance from i to any node
            # and from j to any node, along with the average distance from i to all other nodes
            # and from j to all other nodes, and the symmetry of the distance matrix
            min_distance_i = np.min(distance_matrix[i, :])
            min_distance_j = np.min(distance_matrix[j, :])
            avg_distance_i = np.mean(distance_matrix[i, :])
            avg_distance_j = np.mean(distance_matrix[j, :])
            heuristic_value = min_distance_i + min_distance_j + avg_distance_i + avg_distance_j
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
