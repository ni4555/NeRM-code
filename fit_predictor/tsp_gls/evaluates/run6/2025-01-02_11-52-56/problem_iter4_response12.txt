```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Proximity to the median distance
            median_distance = np.median(np.sort(distance_matrix[i, :]) + np.sort(distance_matrix[j, :]))
            proximity = 1 / (np.abs(distance_matrix[i, j] - median_distance) + 1e-6)
            
            # Diversity of the nearest neighbors
            nearest_neighbors_i = np.argsort(distance_matrix[i, :])
            nearest_neighbors_j = np.argsort(distance_matrix[j, :])
            diversity = np.linalg.norm(nearest_neighbors_i[1:3] - nearest_neighbors_j[1:3])
            
            # Weight of the edge itself
            edge_weight = distance_matrix[i, j]
            
            # Combine the metrics into a heuristic value
            heuristic_value = proximity * diversity * edge_weight
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
