```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # A heuristic that considers the sum of the minimum distances from i to any node
            # and from j to any node, as well as the sum of the maximum distances from i to any node
            # and from j to any node, providing a bound on the total distance
            min_distance_from_i = np.min(distance_matrix[i, :])
            min_distance_from_j = np.min(distance_matrix[j, :])
            max_distance_from_i = np.max(distance_matrix[i, :])
            max_distance_from_j = np.max(distance_matrix[j, :])
            heuristic_value = (min_distance_from_i + min_distance_from_j) + (max_distance_from_i + max_distance_from_j)
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
