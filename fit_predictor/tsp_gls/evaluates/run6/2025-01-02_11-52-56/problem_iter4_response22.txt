```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Assuming distance_matrix is symmetric and the diagonal elements are zeros
    num_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # A simple heuristic based on the inverse of the edge weight itself
            # The rationale is that a shorter edge is preferred
            heuristic_value = 1 / distance_matrix[i, j]
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
