```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values based on the relative distance to the nearest neighbor
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            nearest_neighbors_i = np.argsort(distance_matrix[i, :])
            nearest_neighbors_j = np.argsort(distance_matrix[j, :])
            nearest_i_to_j = nearest_neighbors_i[1]  # Skip the node itself
            nearest_j_to_i = nearest_neighbors_j[1]  # Skip the node itself
            nearest_nearest_i_to_j = nearest_neighbors_i[2]  # Third nearest to i
            nearest_nearest_j_to_i = nearest_neighbors_j[2]  # Third nearest to j
            # Use the relative distance of the edge to the average distance of the nearest neighbors
            relative_distance = distance_matrix[i, j] / (distance_matrix[i, nearest_i_to_j] + distance_matrix[j, nearest_j_to_i])
            # Balance with the global structure by considering the distance to the second nearest neighbor
            global_balance = (distance_matrix[i, nearest_nearest_i_to_j] + distance_matrix[j, nearest_nearest_j_to_i]) / (distance_matrix[i, nearest_i_to_j] + distance_matrix[j, nearest_j_to_i])
            heuristic_value = relative_distance * global_balance
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
