```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Feature 1: Edge weight (as in v1)
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            min_distance_from_i = np.min(distance_matrix[i, :])
            min_distance_from_j = np.min(distance_matrix[j, :])
            # Use the minimum distance to a node from both endpoints as a base heuristic
            heuristic_matrix[i, j] = distance_matrix[i, j] / (min_distance_from_i + min_distance_from_j)
            heuristic_matrix[j, i] = distance_matrix[i, j] / (min_distance_from_i + min_distance_from_j)
    
    # Feature 2: Incorporate global metrics
    total_min_distance = np.sum(np.min(distance_matrix, axis=1))
    total_max_distance = np.sum(np.max(distance_matrix, axis=1))
    average_distance = np.mean(distance_matrix)
    
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Add a global metric based on the difference from the average and total min/max distances
            global_influence = abs(average_distance - distance_matrix[i, j])
            heuristic_matrix[i, j] += (global_influence / (total_min_distance + total_max_distance))
            heuristic_matrix[j, i] += (global_influence / (total_min_distance + total_max_distance))
    
    # Feature 3: Symmetry optimization
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Balance the influence considering symmetry
            symmetry_factor = (heuristic_matrix[i, j] + heuristic_matrix[j, i]) / 2
            heuristic_matrix[i, j] = symmetry_factor
            heuristic_matrix[j, i] = symmetry_factor
    
    # Feature 4: Problem-specific weighing
    # Weigh the global influence more if the edge is close to the average
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            distance_diff = abs(average_distance - distance_matrix[i, j])
            influence_weight = distance_diff / average_distance
            heuristic_matrix[i, j] *= influence_weight
            heuristic_matrix[j, i] *= influence_weight
    
    return heuristic_matrix
```
