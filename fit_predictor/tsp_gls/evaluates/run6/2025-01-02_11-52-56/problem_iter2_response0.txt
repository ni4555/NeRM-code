```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Assuming distance_matrix is symmetric and the diagonal elements are zeros
    num_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Improved heuristic that considers the following:
            # - Distance between the two nodes
            # - Proximity to the median of the distances of each node to all others
            # - The diversity of the nearest neighbors
            distances_from_i = np.sort(distance_matrix[i, :])
            distances_from_j = np.sort(distance_matrix[j, :])
            
            # Proximity to the median of distances
            median_distance_i = distances_from_i[len(distances_from_i) // 2]
            median_distance_j = distances_from_j[len(distances_from_j) // 2]
            median_proximity = 1 / (np.abs(distance_matrix[i, j] - median_distance_i) + np.abs(distance_matrix[i, j] - median_distance_j))
            
            # Diversity of nearest neighbors
            nearest_neighbors_i = np.argsort(distance_matrix[i, :])
            nearest_neighbors_j = np.argsort(distance_matrix[j, :])
            diversity = np.linalg.norm(nearest_neighbors_i[1:3] - nearest_neighbors_j[1:3])
            
            # Combine the heuristics
            heuristic_value = (distance_matrix[i, j] / (median_distance_i + median_distance_j)) * median_proximity * diversity
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
