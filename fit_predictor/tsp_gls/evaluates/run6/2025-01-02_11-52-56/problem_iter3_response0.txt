```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate a base heuristic based on the shortest path from any node to any other
    base_heuristics = np.apply_along_axis(lambda x: np.min(x), axis=0, arr=distance_matrix)
    
    # Adjust heuristic based on the shortest path back to the starting node
    for i in range(num_nodes):
        for j in range(num_nodes):
            # Calculate the influence of including edge (i, j)
            # This is based on the relative difference of the shortest path through this edge versus
            # not taking it, compared to the base shortest path
            heuristic_value = (base_heuristics[i] + base_heuristics[j] - distance_matrix[i, j]) / (2 * base_heuristics[i])
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
