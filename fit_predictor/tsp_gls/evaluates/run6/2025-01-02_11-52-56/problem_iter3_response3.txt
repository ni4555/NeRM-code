```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate relative distances and neighbor influences
    relative_distances = np.abs(distance_matrix - np.min(distance_matrix, axis=0))
    # Incorporate domain knowledge by giving more weight to direct neighbors
    neighbor_influences = np.max(distance_matrix, axis=0) * 0.5
    
    # Calculate a heuristic that balances both
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            combined_heuristic = relative_distances[i, j] * neighbor_influences[j]
            heuristic_matrix[i, j] = combined_heuristic
            heuristic_matrix[j, i] = combined_heuristic
    
    return heuristic_matrix
```
