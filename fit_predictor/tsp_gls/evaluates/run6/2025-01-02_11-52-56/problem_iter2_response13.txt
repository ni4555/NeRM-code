```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic values for each edge
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Consider the influence of each node on its neighbors
            # by summing the distances from i to all nodes and from j to all nodes
            # and then subtracting the distance between i and j
            influence_i = np.sum(distance_matrix[i, :])
            influence_j = np.sum(distance_matrix[j, :])
            heuristic_value = influence_i + influence_j - distance_matrix[i, j]
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value  # Since the matrix is symmetric
    
    return heuristic_matrix
```
