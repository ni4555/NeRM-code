```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Improved heuristic using the longest path to a node for each node as a proxy for the "badness" of an edge
    for i in range(num_nodes):
        longest_path_i = np.max(distance_matrix[i, :])
        for j in range(i + 1, num_nodes):
            longest_path_j = np.max(distance_matrix[j, :])
            # The heuristic value is the product of the longest paths to the two nodes minus the distance between them
            heuristic_value = (longest_path_i + longest_path_j - distance_matrix[i, j])
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
