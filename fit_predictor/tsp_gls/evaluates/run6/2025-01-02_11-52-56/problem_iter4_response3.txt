```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Feature 1: Relative distance
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            relative_distance = distance_matrix[i, j] / np.min(distance_matrix[i, :])
            heuristic_matrix[i, j] = relative_distance
            heuristic_matrix[j, i] = relative_distance
    
    # Feature 2: Edge weight difference
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            edge_weight_diff = abs(distance_matrix[i, j] - np.mean(distance_matrix[i, :]))
            heuristic_matrix[i, j] = edge_weight_diff
            heuristic_matrix[j, i] = edge_weight_diff
    
    # Feature 3: Symmetry exploitation
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2
    
    return heuristic_matrix
```
