```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Use a mix of absolute and relative distance metrics
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            # Absolute distance
            abs_distance = distance_matrix[i, j]
            # Relative distance to other nodes
            rel_distance_to_i = np.min(distance_matrix[i, :])
            rel_distance_to_j = np.min(distance_matrix[j, :])
            # Use the maximum relative distance as a feature
            max_rel_distance = np.max([rel_distance_to_i, rel_distance_to_j])
            # Normalize the absolute distance by the maximum relative distance
            normalized_abs_distance = abs_distance / max_rel_distance if max_rel_distance != 0 else 1
            heuristic_matrix[i, j] = normalized_abs_distance
            heuristic_matrix[j, i] = normalized_abs_distance
    
    # Introduce diversity by considering the sum of maximum distances for each node
    for i in range(num_nodes):
        max_distances = np.max(distance_matrix[i, :], axis=0)
        sum_max_distances = np.sum(max_distances)
        for j in range(i + 1, num_nodes):
            if sum_max_distances != 0:
                heuristic_matrix[i, j] = max_distances[j] / sum_max_distances
                heuristic_matrix[j, i] = max_distances[j] / sum_max_distances
            else:
                heuristic_matrix[i, j] = 1
                heuristic_matrix[j, i] = 1
    
    return heuristic_matrix
```
