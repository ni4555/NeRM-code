```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    num_nodes = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    
    # Calculate the local density of each node, which is the sum of distances
    # to all other nodes
    local_densities = np.sum(distance_matrix, axis=0)
    
    # The heuristic value for each edge is a combination of the node degree
    # and local density. We can use a weighted sum or a product depending on
    # how we want to balance these two factors. Here, we use a product to
    # emphasize the effect of both factors.
    heuristic_values = (degrees * local_densities) / (num_nodes - 1)
    
    # The heuristic values are then normalized by the maximum heuristic value
    # to ensure that the range of values is manageable.
    max_heuristic = np.max(heuristic_values)
    if max_heuristic > 0:
        heuristic_values /= max_heuristic
    
    return heuristic_values
```
