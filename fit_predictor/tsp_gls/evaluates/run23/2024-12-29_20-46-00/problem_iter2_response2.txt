```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    # Calculate the total distance for a Hamiltonian cycle (each edge is counted twice)
    total_distance = 2 * np.sum(np.triu(distance_matrix))
    
    # Initialize a matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic for each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the contribution of edge (i, j) to the total distance
                edge_contribution = distance_matrix[i, j]
                # Calculate the heuristic as the reduction in total distance if this edge is included
                heuristic_matrix[i, j] = total_distance - edge_contribution
    
    # Normalize the heuristic matrix to make the values comparable
    # by dividing by the maximum possible edge contribution
    max_edge_contribution = total_distance - n
    heuristic_matrix /= max_edge_contribution
    
    return heuristic_matrix
```
