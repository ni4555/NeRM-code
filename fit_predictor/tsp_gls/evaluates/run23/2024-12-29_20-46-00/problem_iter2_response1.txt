```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic considers the degree of each node and the influence of each edge
    # based on the connectivity of its endpoints. The cost of an edge is determined
    # by the inverse of the sum of the degrees of its two endpoints, which
    # penalizes high-degree nodes more. Additionally, we normalize the values
    # to ensure the cost is between 0 and 1.

    # Calculate the degree of each node
    num_nodes = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)

    # Create a matrix where the cost of each edge is inversely proportional
    # to the sum of the degrees of its two nodes
    cost_matrix = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                cost_matrix[i, j] = 1 / (degrees[i] + degrees[j])

    # Normalize the cost matrix to have a maximum value of 1
    max_cost = np.max(cost_matrix)
    if max_cost > 0:
        cost_matrix /= max_cost

    # Avoid zero distances by adding a small epsilon
    cost_matrix = np.maximum(cost_matrix, 1e-10)

    return cost_matrix
```
