```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, local_path: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    
    # Calculate the degree of each node
    degrees = np.sum(distance_matrix, axis=1)
    
    # Invert the distance to make smaller distances "better"
    cost_matrix = 1 / (distance_matrix + 1e-10)
    
    # penalize edges where both nodes have high degrees
    penalty_high_degree = 1 / (degrees[:, None] + degrees[None, :] + 1e-10)
    
    # Incorporate local knowledge by penalizing edges not on the current path
    edge_penalties = np.zeros_like(distance_matrix)
    for i in range(num_nodes - 1):
        edge_penalties[local_path[i]][local_path[(i + 1) % (num_nodes - 1)]] = 1
        edge_penalties[local_path[(i + 1) % (num_nodes - 1)]][local_path[i]] = 1
    
    # Introduce a penalty for high importance edges (deviation from average distance)
    distance_sums = np.sum(distance_matrix, axis=1)
    average_distances = distance_sums / (num_nodes - 1)
    importance_based_penalties = np.abs(distance_matrix - average_distances[:, None])
    max_importance = np.max(importance_based_penalties)
    importance_based_penalties /= (max_importance + 1e-10)
    
    # Combine all penalties
    total_penalties = cost_matrix * penalty_high_degree * (1 - edge_penalties) * importance_based_penalties
    total_penalties = np.clip(total_penalties, 0, 1)  # Ensure penalties are within [0, 1]
    
    return total_penalties
```
