```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    
    # Initialize a matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate the heuristic for each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                # Avoid self-loops and zero-distance edges
                if distance_matrix[i, j] > 0:
                    # Calculate the heuristic value based on the difference
                    # between the longest possible path and the actual edge distance
                    heuristic = longest_path - distance_matrix[i, j]
                    
                    # Consider local optimal route penalties
                    if i in np.arange(n) and j in np.arange(n):
                        heuristic += 1  # This is a simple penalty for being on the local optimal route
                    
                    # Adjust the heuristic value to avoid overpenalization
                    heuristic = np.clip(heuristic, 0, longest_path)
                    
                    # Assign the heuristic value to the matrix
                    heuristic_matrix[i, j] = heuristic

    return heuristic_matrix
```
