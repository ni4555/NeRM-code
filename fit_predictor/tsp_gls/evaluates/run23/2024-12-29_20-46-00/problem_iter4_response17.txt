```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    normalized_degrees = degrees / np.sum(degrees)
    
    density = np.sum(distance_matrix) / (num_nodes * (num_nodes - 1))
    
    # Define a function to calculate the cost based on connectivity and density
    def cost_function(x, y):
        if x == y:
            return 0
        else:
            return 1 / ((normalized_degrees[x] * normalized_degrees[y]) / density)
    
    # Calculate the heuristic for each edge
    cost_matrix = np.vectorize(cost_function)(np.arange(num_nodes), np.arange(num_nodes))
    
    # To avoid the matrix being singular when all nodes are connected,
    # add a small constant to the diagonal elements
    small_constant = 1e-6
    np.fill_diagonal(cost_matrix, cost_matrix.diagonal() + small_constant)
    
    # Normalize the cost matrix to have a maximum value of 1
    max_cost = np.max(cost_matrix)
    if max_cost > 0:
        cost_matrix /= max_cost
    
    return cost_matrix
```
