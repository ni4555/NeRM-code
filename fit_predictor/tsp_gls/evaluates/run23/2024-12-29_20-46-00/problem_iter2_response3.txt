```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the edge penalties based on their length
    edge_length_penalties = distance_matrix / np.max(distance_matrix)
    
    # Calculate the median distance from any vertex
    median_distance = np.median(distance_matrix)
    
    # Enhance penalties for edges that are further from the median distance
    distance_from_median = np.abs(distance_matrix - median_distance)
    distance_from_median_penalties = distance_from_median / np.max(distance_from_median)
    
    # Combine penalties
    combined_penalties = edge_length_penalties + distance_from_median_penalties
    
    # Apply a threshold to ensure that penalties do not exceed a certain factor of the original distance
    max_penalty_factor = 1.5
    combined_penalties = np.clip(combined_penalties, a_min=1, a_max=max_penalty_factor)
    
    return combined_penalties
```
