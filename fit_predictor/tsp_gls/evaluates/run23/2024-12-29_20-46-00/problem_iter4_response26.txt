```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Local information: penalize short edges
    local_penalty = 1 / (distance_matrix + 1e-5)
    
    # Global information: avoid edges on the longest path
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j and distance_matrix[i, j] == longest_path - distance_matrix[i, j]:
                heuristic_matrix[i, j] = np.inf  # High penalty for self-loops
    
    # Adapt penalties based on the shortest paths found so far
    shortest_paths = np.partition(distance_matrix.sum(axis=1), 1)[:, 1]
    average_shortest_path = np.mean(shortest_paths)
    for i in range(n):
        for j in range(n):
            if i != j:
                edge_length = distance_matrix[i, j]
                if edge_length < average_shortest_path:
                    heuristic_matrix[i, j] *= 0.9  # Reduce the penalty factor by 10%
    
    # Introduce diversification by perturbing the heuristic values
    perturbation_std = 0.1
    for i in range(n):
        for j in range(n):
            if i != j:
                if np.random.rand() < 0.1:  # 10% chance of perturbation
                    perturbation = np.random.normal(0, perturbation_std, 1)
                    heuristic_matrix[i, j] += perturbation
    
    return heuristic_matrix
```
