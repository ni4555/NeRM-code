```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Use local information to penalize short edges
    penalty_factor = 1 / (distance_matrix + 1e-5)
    
    # Use global information to avoid edges on the longest path
    for i in range(n):
        for j in range(n):
            if i != j:
                # Avoid self-loops
                if distance_matrix[i, j] == longest_path - distance_matrix[i, j]:
                    heuristic_matrix[i, j] = 1  # This is a high penalty for edges on the longest path
                else:
                    # Combine local and global heuristics
                    heuristic_matrix[i, j] = penalty_factor[i, j] + (longest_path - distance_matrix[i, j])
    
    # Adapt penalties based on the shortest paths found so far
    # Assuming that the shortest path information is available in a list of length n
    shortest_paths = np.array([1, 2, 3, 4, 5])  # Placeholder for actual shortest path information
    for i in range(n):
        for j in range(n):
            if i != j:
                # Reduce penalty if the edge is part of a shorter path than the average shortest path
                edge_length = distance_matrix[i, j]
                if edge_length < shortest_paths.mean():
                    heuristic_matrix[i, j] *= 0.9  # Reduce the penalty factor by 10%
    
    # Add exploration heuristic to encourage diversification
    for i in range(n):
        for j in range(n):
            if i != j:
                # Randomly perturb the heuristic values to encourage exploration
                if np.random.rand() < 0.1:  # 10% chance of perturbation
                    perturbation = np.random.normal(0, 0.1, 1)
                    heuristic_matrix[i, j] += perturbation
    
    return heuristic_matrix
```
