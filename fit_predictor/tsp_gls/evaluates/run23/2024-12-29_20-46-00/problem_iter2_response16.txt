```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Calculate node centrality based on degree centrality
    node_degrees = np.sum(distance_matrix > 0, axis=1)
    # Normalize by total number of edges in the graph (n^2 - n) to get relative importance
    node_centrality = node_degrees / ((distance_matrix.shape[0] ** 2) - distance_matrix.shape[0])

    # Calculate edge influence based on average distance to all other nodes
    num_nodes = distance_matrix.shape[0]
    distance_sums = np.sum(distance_matrix, axis=1)
    average_distances = distance_sums / (num_nodes - 1)
    edge_influence = np.abs(distance_matrix - average_distances[:, None])

    # Combine node centrality and edge influence to get a heuristic value
    # Averaging the two might give a balanced view of both node and edge importance
    combined_heuristic = 0.5 * node_centrality + 0.5 * edge_influence
    return combined_heuristic
```
