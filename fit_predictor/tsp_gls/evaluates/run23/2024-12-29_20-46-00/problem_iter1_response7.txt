```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # This heuristic tries to favor edges that are not part of the longest path
    # by calculating the distance from each edge to the longest possible path
    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    
    # Initialize a matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic for each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                # Avoid self-loops
                heuristic_matrix[i, j] = longest_path - distance_matrix[i, j]
    
    return heuristic_matrix
```
