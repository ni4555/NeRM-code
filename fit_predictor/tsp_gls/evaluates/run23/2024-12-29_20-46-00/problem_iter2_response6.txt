```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the degree of each node
    num_nodes = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)

    # Calculate the adjacency matrix which indicates the presence of an edge
    adjacency_matrix = np.eye(num_nodes) - np.ones((num_nodes, num_nodes))
    adjacency_matrix = np.where(adjacency_matrix, 0, 1)

    # Calculate the matrix of sums of distances to all other nodes for each node
    distance_sums = np.sum(distance_matrix * adjacency_matrix, axis=1)
    # Calculate the average distance for each node
    average_distances = distance_sums / (num_nodes - 1)

    # Calculate the matrix where the cost is inversely proportional to the product
    # of the degrees of its two nodes and is zero if an edge already exists
    cost_matrix = np.zeros_like(distance_matrix)
    cost_matrix[adjacency_matrix == 1] = 1 / (degrees[:, None] * degrees[None, :])

    # Calculate the heuristic value for each edge as the average distance minus
    # the existing edge distance, which is also normalized by the average distance
    heuristic_values = (average_distances[:, None] - distance_matrix) / average_distances

    return heuristic_values
```
