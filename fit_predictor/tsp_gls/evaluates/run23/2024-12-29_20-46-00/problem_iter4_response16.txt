```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Incorporate local information to penalize short edges
    local_penalty_factor = 1 / (distance_matrix + 1e-5)
    
    # Incorporate global information to avoid edges on the longest path
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                if distance_matrix[i, j] == longest_path - distance_matrix[i, j]:
                    heuristic_matrix[i, j] = np.inf  # Penalize edges on the longest path
                else:
                    heuristic_matrix[i, j] = local_penalty_factor[i, j]
    
    # Introduce exploration through random perturbations
    exploration_perturbation = np.random.normal(0, 0.1, (n, n))  # Random perturbations for exploration
    heuristic_matrix += exploration_perturbation
    
    # Adapt penalties based on the problem context
    for i in range(n):
        for j in range(n):
            if i != j:
                # Increase penalty for edges close to the longest path
                if distance_matrix[i, j] < longest_path / 4:
                    heuristic_matrix[i, j] *= 1.5
    
    # Normalize the heuristic matrix to ensure non-negative values and to avoid dominance of certain edges
    min_val = np.min(heuristic_matrix[heuristic_matrix > 0])
    if min_val > 0:
        heuristic_matrix = heuristic_matrix - min_val
    norm_factor = np.max(heuristic_matrix)
    if norm_factor > 0:
        heuristic_matrix = heuristic_matrix / norm_factor
    
    return heuristic_matrix
```
