```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    longest_path = 2 * (n - 1) * np.amax(distance_matrix)
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Local heuristic: penalize short edges more
    penalty_factor = 1 / (distance_matrix + 1e-5)
    
    # Global heuristic: avoid edges on the longest path
    for i in range(n):
        for j in range(n):
            if i != j:
                if distance_matrix[i, j] == longest_path - distance_matrix[i, j]:
                    heuristic_matrix[i, j] = np.inf  # High penalty for edges on the longest path
                else:
                    heuristic_matrix[i, j] = penalty_factor[i, j]
    
    # Dynamic penalty adaptation: increase penalty for edges not in the local optimal route
    local_optimal_route = np.random.permutation(n)  # Example local optimal route
    for k in range(1, n):
        i, j = local_optimal_route[k-1], local_optimal_route[k]
        if i != j:
            if distance_matrix[i, j] != 0:
                heuristic_matrix[i, j] *= 1.2  # Increase penalty for non-local optimal route edges
    
    # Exploration heuristic: encourage diversification
    for i in range(n):
        for j in range(n):
            if i != j:
                if np.random.rand() < 0.1:  # 10% chance of perturbation
                    perturbation = np.random.normal(0, 0.05, 1)  # Smaller perturbation range
                    heuristic_matrix[i, j] += perturbation
    
    return heuristic_matrix
```
