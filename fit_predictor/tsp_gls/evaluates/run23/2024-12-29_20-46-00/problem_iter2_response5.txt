```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Improved heuristic that combines the original distance-based heuristic with
    # a heuristic that penalizes edges that connect highly connected nodes.
    
    # Calculate the degree of each node
    num_nodes = distance_matrix.shape[0]
    degrees = np.sum(distance_matrix, axis=1)
    
    # Create a matrix where the cost of each edge is inversely proportional
    # to the distance and also penalizes highly connected nodes
    cost_matrix = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Invert the distance to make smaller distances "better"
                cost = 1 / (distance_matrix[i, j] + 1e-10)
                # Penalize edges where both nodes have high degrees
                penalty = 1 / (degrees[i] + degrees[j])
                cost_matrix[i, j] = cost * penalty
    
    # Normalize the cost matrix to have a maximum value of 1
    max_cost = np.max(cost_matrix)
    if max_cost > 0:
        cost_matrix /= max_cost
    
    return cost_matrix
```
