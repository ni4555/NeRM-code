```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Calculate the median distance from any vertex
    median_distance = np.median(distance_matrix)
    
    # Calculate the average distance from any vertex
    average_distance = np.mean(distance_matrix)
    
    # Initialize a matrix with the same shape as the distance matrix
    heuristic_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the heuristic for each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                # Avoid self-loops
                # Calculate the heuristic based on the median and average distance
                distance = distance_matrix[i, j]
                heuristic = np.abs(distance - median_distance) + np.abs(distance - average_distance)
                
                # Normalize the heuristic to be between 0 and 1
                max_heuristic = np.max(heuristic_matrix[heuristic_matrix > 0])
                if max_heuristic == 0:
                    max_heuristic = 1
                heuristic_matrix[i, j] = heuristic / max_heuristic
    
    # Apply a threshold to ensure that penalties do not exceed a certain factor of the original distance
    max_penalty_factor = 1.5
    heuristic_matrix = np.clip(heuristic_matrix, a_min=0, a_max=max_penalty_factor)
    
    return heuristic_matrix
```
