```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, path_history: np.ndarray) -> np.ndarray:

    num_nodes = distance_matrix.shape[0]
    edge_penalties = np.zeros_like(distance_matrix)

    # Incorporate path history
    path_history_edges = np.reshape(path_history, (num_nodes - 1, 2))
    for i in range(num_nodes - 1):
        edge_index = (path_history_edges[i, 0], path_history_edges[i, 1])
        edge_penalties[edge_index] = 1

    # Introduce diversity factor
    median_distance = np.median(distance_matrix)
    diversity_factor = np.exp(-np.abs(distance_matrix - median_distance))

    # Calculate importance based on the path
    distance_sums = np.sum(distance_matrix, axis=1)
    average_distances = distance_sums / (num_nodes - 1)
    importance_based_penalties = np.abs(distance_matrix - average_distances[:, None])

    # Scale penalties
    scaled_penalties = importance_based_penalties / np.max(distance_matrix)

    # Combine all penalties
    total_penalties = edge_penalties + diversity_factor + scaled_penalties

    # Normalize the penalties to ensure all values are within a similar range
    max_value = np.max(total_penalties)
    min_value = np.min(total_penalties)
    normalized_penalty_factor = (total_penalties - min_value) / (max_value - min_value)

    return normalized_penalty_factor
```
