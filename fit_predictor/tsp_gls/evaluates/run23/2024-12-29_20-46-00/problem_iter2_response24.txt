```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    # Create a matrix of sums of distances to all other nodes for each node
    distance_sums = np.sum(distance_matrix, axis=1)
    # Calculate the average distance for each node
    average_distances = distance_sums / (num_nodes - 1)
    
    # Calculate the degree of each node (number of connections)
    degrees = np.sum(distance_matrix != np.inf, axis=1)
    
    # Calculate the heuristic value for each edge
    # The heuristic takes into account both the average distance and the node connectivity
    # as a measure of importance
    heuristic_values = np.abs(distance_matrix - average_distances[:, None]) * degrees[None, :]
    
    # Optionally, you could add a penalty for high degree nodes to prevent selecting nodes with too many connections
    # as they may lead to less diverse paths
    penalty = (degrees > num_nodes / 2) * 10  # Arbitrary penalty value
    heuristic_values += penalty
    
    return heuristic_values
```
