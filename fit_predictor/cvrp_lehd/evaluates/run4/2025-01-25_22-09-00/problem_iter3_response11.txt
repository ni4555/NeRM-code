```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the distance from the depot to all other nodes
    depot_distance = distance_matrix[:, 0]
    
    # Calculate the sum of demands from all nodes
    total_demand = demands.sum()
    
    # Calculate the sum of demands for each possible route from the depot to a node and back
    for i in range(1, n):
        # Calculate the demand for the route from the depot to node i and back
        route_demand = demands[i] + (total_demand - demands[i])
        # Calculate the heuristics value as the negative of the distance multiplied by the demand
        heuristics[0, i] = -route_demand * depot_distance[i]
        heuristics[i, 0] = heuristics[0, i]
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristics = heuristics.clamp(min=0)
    
    return heuristics
```
