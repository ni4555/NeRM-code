```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    max_demand = torch.max(demands)
    max_distance = torch.max(torch.abs(distance_matrix))
    
    # Demand factor: increase the value of edges leading to high demand nodes
    demand_factor = (1 - demands / max_demand) * (max_demand / total_capacity)
    
    # Local balance factor: reduce the value of short edges with low demand
    local_balance_factor = torch.where(
        torch.abs(distance_matrix) < max_distance,
        -demands / max_demand * torch.abs(distance_matrix) * (max_demand / total_capacity),
        0
    )
    
    # Global balance factor: balance the effect of distant edges
    global_balance_factor = demands / (max_demand + max_distance)
    
    # Refine distance scaling: decrease the weight of distant edges
    distance_scaling = 1 / (1 + torch.exp(-distance_matrix / max_distance))
    
    # Combine the factors into the heuristics matrix
    heuristic_matrix = demand_factor + local_balance_factor + global_balance_factor + distance_scaling
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristic_matrix = heuristic_matrix.clamp(min=0)
    
    # Adjust the heuristics for the depot to all other nodes
    depot_distance = distance_matrix[:, 0]
    for i in range(1, n):
        route_demand = demands[i] + (total_capacity - demands[i])
        heuristic_matrix[0, i] = -route_demand * depot_distance[i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    return heuristic_matrix
```
