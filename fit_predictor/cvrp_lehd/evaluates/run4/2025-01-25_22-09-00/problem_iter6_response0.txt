```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    
    # Calculate the attractiveness based on demand
    attractiveness = 1 / (1 + demands)  # More attractive if demand is less
    
    # Incorporate distance into attractiveness
    distance_weight = distance_matrix * attractiveness
    
    # Scale by the cumulative demand
    scaled_demand = (torch.cumsum(demands, dim=0) / total_demand).unsqueeze(1)
    demand_scaled = attractiveness * scaled_demand * scaled_demand
    
    # Combine the weights and dampen the influence of longer distances
    combined_weight = distance_weight + demand_scaled
    dampening_factor = torch.exp(-distance_matrix / 10)
    final_weight = combined_weight * dampening_factor
    
    # Ensure that the weight is negative for less attractive edges
    min_weight = final_weight.min()
    final_weight = final_weight - (min_weight / 2)
    
    return final_weight
```
