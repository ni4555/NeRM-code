```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    total_demand = demands.sum()
    
    # Demand factor with normalization to prevent dominance
    demand_factor = (demands / total_capacity) ** 2
    
    # Local balance factor with dampening for distance, focusing on local balance
    local_balance_factor = torch.where(
        torch.abs(distance_matrix) < torch.mean(torch.abs(distance_matrix)),
        -torch.abs(distance_matrix) / (torch.mean(torch.abs(distance_matrix)) ** 2),
        0
    )
    
    # Global balance factor with dampening for distance, focusing on global balance
    global_balance_factor = demands / (total_capacity + torch.mean(torch.abs(distance_matrix)) ** 2)
    
    # Refine distance scaling with non-linear dampening
    distance_scaling = 1 / (1 + torch.exp(-distance_matrix / torch.mean(torch.abs(distance_matrix))))
    
    # Normalize factors for non-negative weights
    demand_normalized = demand_factor / (torch.max(demand_factor) if torch.max(demand_factor) > 0 else 1)
    distance_normalized = distance_scaling / (torch.max(distance_scaling) if torch.max(distance_scaling) > 0 else 1)
    
    # Combine the factors into the heuristics matrix
    heuristic_matrix = demand_normalized + local_balance_factor + global_balance_factor + distance_normalized
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristic_matrix = heuristic_matrix.clamp(min=0)
    
    # Exclude depot from local factors and scale demand for problem invariance
    depot_distance = distance_matrix[:, 0]
    demand_adjusted = demands / (total_demand / demands.sum())
    for i in range(1, n):
        route_demand = demand_adjusted[i] + (total_demand - demand_adjusted[i])
        heuristic_matrix[0, i] = -route_demand * depot_distance[i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    return heuristic_matrix
```
