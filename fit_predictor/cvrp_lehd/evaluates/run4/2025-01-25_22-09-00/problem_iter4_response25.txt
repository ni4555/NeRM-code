```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demand_normalized = demands / total_capacity

    # Incorporate demand factors
    demand_factor = (1 + demand_normalized) * (1 - demand_normalized)

    # Non-linear distance scaling
    distance_scaled = torch.exp(-distance_matrix)

    # Global balance by considering the distance matrix itself
    global_balance = torch.sum(distance_scaled, dim=1, keepdim=True)

    # Final heuristic values
    heuristic_values = demand_factor * distance_scaled / global_balance

    return heuristic_values
```
