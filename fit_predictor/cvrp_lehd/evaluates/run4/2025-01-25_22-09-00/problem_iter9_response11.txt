```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    total_demand = demands.sum()
    
    # Demand factor: scale demand to total capacity
    demand_factor = demands / total_capacity
    
    # Distance dampening factor: non-linear dampening of distance
    distance_dampening_factor = 1 / (1 + torch.exp(distance_matrix / torch.mean(torch.abs(distance_matrix))))
    
    # Local balance factor: dampen short distances with low demand
    local_balance_factor = torch.where(
        torch.abs(distance_matrix) < torch.mean(torch.abs(distance_matrix)),
        -torch.min(demand_factor) * distance_dampening_factor,
        0
    )
    
    # Global balance factor: scale demand with the average distance
    global_balance_factor = demand_factor / (torch.mean(torch.abs(distance_matrix)) + 1)
    
    # Normalize factors to prevent dominance
    demand_normalized = demand_factor / (torch.max(demand_factor) if torch.max(demand_factor) > 0 else 1)
    distance_normalized = distance_dampening_factor / (torch.max(distance_dampening_factor) if torch.max(distance_dampening_factor) > 0 else 1)
    
    # Combine the factors into the heuristics matrix
    heuristic_matrix = demand_normalized + local_balance_factor + global_balance_factor + distance_normalized
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristic_matrix = heuristic_matrix.clamp(min=0)
    
    # Exclude depot from local factors and adjust the heuristics matrix
    for i in range(1, n):
        route_demand = demands[i]
        heuristic_matrix[0, i] = -route_demand * distance_matrix[0, i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    return heuristic_matrix
```
