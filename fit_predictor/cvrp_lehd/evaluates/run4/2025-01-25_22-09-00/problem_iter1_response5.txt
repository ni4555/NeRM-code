```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch
    from scipy.spatial.distance import cdist

    # Calculate Euclidean distances between all pairs of points
    pairwise_distances = cdist(demands[1:], demands[1:], metric='euclidean') * 1000  # Scale to make it more sparse

    # Calculate total demand for each potential route
    total_demand = demands[1:].cumsum(0) * pairwise_distances

    # Calculate the cumulative distance for each potential route
    cumulative_distance = torch.cat((torch.zeros_like(pairwise_distances), pairwise_distances.cumsum(0)))

    # Combine demand and distance to create a heuristic value
    heuristic_values = cumulative_distance - total_demand

    # Initialize the heuristics matrix with zeros
    heuristics_matrix = torch.zeros_like(distance_matrix)

    # Update the heuristics matrix for edges that are within the vehicle capacity
    for i in range(1, len(demands)):
        for j in range(1, len(demands)):
            if demands[i] + demands[j] <= 1:  # Check if total demand is within vehicle capacity
                heuristics_matrix[i, j] = heuristic_values[i - 1, j - 1]
            else:
                heuristics_matrix[i, j] = -float('inf')

    return heuristics_matrix
```
