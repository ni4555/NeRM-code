```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    total_demand = demands.sum()
    
    # Demand factor: increase the value of edges leading to high demand nodes
    demand_factor = 1 - demands / total_capacity
    
    # Exclude depot from local factors: reduce the weight of short edges for high demand
    local_balance_factor = -demands / total_capacity * torch.abs(distance_matrix)
    local_balance_factor[0] = 0  # Exclude depot
    
    # Non-linear dampening for distance: focus on local/global balance
    distance_dampening = 1 / (1 + torch.exp(distance_matrix / torch.mean(torch.abs(distance_matrix))))
    
    # Global balance factor: balance the effect of distant edges
    global_balance_factor = demands / (total_capacity + torch.mean(torch.abs(distance_matrix)))
    
    # Dampen distance to counteract long-path bias
    distance_dampening_scaled = distance_dampening / (torch.max(distance_dampening) if torch.max(distance_dampening) > 0 else 1)
    
    # Combine the factors into the heuristics matrix
    heuristic_matrix = demand_factor + local_balance_factor + global_balance_factor + distance_dampening_scaled
    
    # Normalize for non-negative weights: adjust demand to capacity ratios
    heuristic_matrix = heuristic_matrix / (torch.max(heuristic_matrix) if torch.max(heuristic_matrix) > 0 else 1)
    
    # Adjust the heuristics for the depot to all other nodes
    depot_distance = distance_matrix[:, 0]
    for i in range(1, n):
        route_demand = demands[i] + (total_demand - demands[i])
        heuristic_matrix[0, i] = -route_demand * depot_distance[i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    return heuristic_matrix
```
