```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demand_scaled = demands / total_capacity

    # Demand factor with non-linear dampening
    demand_factor = torch.exp(-torch.abs(demand_scaled) / (demands.max() / total_capacity))

    # Distance factor with dampening
    mean_distance = torch.mean(torch.abs(distance_matrix))
    distance_factor = torch.exp(-distance_matrix / mean_distance)

    # Local balance factor
    local_balance_factor = demand_scaled * torch.abs(distance_matrix)

    # Exclude depot from local factors
    local_balance_factor[0, :] = 0
    local_balance_factor[:, 0] = 0

    # Combine factors into heuristics matrix
    heuristic_matrix = demand_factor + distance_factor + local_balance_factor

    # Normalize the heuristics matrix
    heuristic_matrix = heuristic_matrix.clamp(min=0)

    # Adjust heuristics for the depot to all other nodes
    depot_distance = distance_matrix[0, :]
    for i in range(1, n):
        route_demand = demands[i]
        heuristic_matrix[0, i] = -route_demand * depot_distance[i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]

    return heuristic_matrix
```
