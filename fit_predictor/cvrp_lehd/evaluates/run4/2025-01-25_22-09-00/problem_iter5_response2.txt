```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    total_demand = demands.sum()
    
    # Demand factor: increase the value of edges leading to high demand nodes
    demand_factor = 1 - demands / total_capacity
    
    # Distance factor: normalize distance based on a scaling parameter
    distance_factor = torch.exp(-distance_matrix / (torch.mean(torch.abs(distance_matrix)) + 1))
    
    # Loop penalty: avoid loops by penalizing edges that form a loop
    loop_penalty = (distance_matrix * torch.triu(torch.ones_like(distance_matrix), k=1)).abs()
    
    # Dampening factor: apply dampening to smooth out the heuristics
    dampening_factor = torch.ones_like(distance_matrix)
    dampening_factor = dampening_factor * (1 - torch.exp(-distance_matrix / torch.mean(torch.abs(distance_matrix))))
    
    # Combine factors into heuristics matrix
    heuristic_matrix = (demand_factor + distance_factor - loop_penalty + dampening_factor) - 1
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristic_matrix = heuristic_matrix.clamp(min=0)
    
    # Adjust the heuristics for the depot to all other nodes
    for i in range(1, n):
        route_demand = demands[i] + (total_demand - demands[i])
        heuristic_matrix[0, i] = -route_demand * torch.exp(-distance_matrix[0, i] / (torch.mean(torch.abs(distance_matrix)) + 1))
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    return heuristic_matrix
```
