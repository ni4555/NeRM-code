```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    
    # Normalize demands by the total vehicle capacity to get relative demands
    relative_demands = demands / total_capacity
    
    # Incorporate demand factors into the heuristic
    demand_factor = torch.outer(relative_demands, relative_demands)
    
    # Scale distances to balance local and global factors
    distance_scale = 1.0 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero
    
    # Compute the heuristic value based on both demand and distance
    heuristic_values = -demand_factor * distance_scale
    
    # Refine the heuristic by incorporating the sum of demands
    total_demand_factor = torch.sum(demand_factor, dim=1, keepdim=True)
    refined_heuristic_values = heuristic_values - total_demand_factor
    
    # Normalize the heuristics to have a range between -1 and 1
    min_val = refined_heuristic_values.min()
    max_val = refined_heuristic_values.max()
    normalized_heuristics = 2 * (refined_heuristic_values - min_val) / (max_val - min_val) - 1
    
    # Adjust the heuristics for the depot to all other nodes
    depot_adjustment = (total_capacity - demands[1:]) * (1.0 / (distance_matrix[0, 1:] + 1e-6))
    normalized_heuristics[0, 1:] = normalized_heuristics[0, 1:] + depot_adjustment
    normalized_heuristics[1:, 0] = normalized_heuristics[0, 1:]
    
    return normalized_heuristics
```
