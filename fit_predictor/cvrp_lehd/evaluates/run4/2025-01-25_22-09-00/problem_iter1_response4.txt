```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """A heuristic function that assigns a weight to each edge based on the potential cost savings if
    taken early in the route."""
    total_demand = demands.sum()
    num_nodes = demands.size(0)
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge, calculate the ratio of the distance from the current node to the total demand
    # multiplied by the inverse of the distance to the next node. This ratio is higher for nodes that
    # are further from the depot and have a high demand.
    for i in range(num_nodes):
        for j in range(1, num_nodes):
            # If the edge from node i to node j is valid (i.e., not the same node or the depot)
            if i != j and i != 0 and j != 0:
                heuristic_matrix[i][j] = distance_matrix[i][j] * (demands[j] / total_demand)
                
    return heuristic_matrix
```
