```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    demand_sum = demands.sum()
    
    # Incorporate demand factors
    demand_factor = (demands / demand_sum).unsqueeze(1)
    
    # Scale distances relative to the depot
    distance_scaled = distance_matrix / distance_matrix[depot, :].unsqueeze(1)
    
    # Combine demand factors and scaled distances
    base_heuristics = demand_factor * distance_scaled
    
    # Incorporate local balance factor by considering the sum of distances
    local_balance_factor = -distance_matrix.sum(dim=1)
    
    # Incorporate global balance factor by considering the distance to the depot
    global_balance_factor = distance_matrix.sum(dim=0) / demand_sum
    
    # Combine local and global balance factors
    balance_factor = local_balance_factor + global_balance_factor
    
    # Combine all factors into the heuristics
    heuristics = base_heuristics + balance_factor
    
    # Avoid loops by penalizing revisiting nodes
    loop_avoidance_factor = torch.eye(n) * 1e9
    heuristics += loop_avoidance_factor
    
    # Discard negative values
    heuristics = heuristics.clamp(min=0)
    
    # Adjust the heuristics for the depot to all other nodes
    depot_adjustment = -demands.unsqueeze(1) * distance_matrix[depot, :]
    heuristics[depot, :] = depot_adjustment
    heuristics[:, depot] = depot_adjustment
    
    return heuristics
```
