```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic function for the Capacitated Vehicle Routing Problem."""
    total_demand = demands.sum()
    num_nodes = demands.size(0)
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the potential contribution of each edge
    potential = demands / total_demand * distance_matrix
    
    # Dampen penalties for longer distances
    dampen = torch.exp(-distance_matrix / 10)
    
    # Combine potential and dampening to create the heuristic values
    heuristic_matrix = potential * dampen
    
    # Normalize the heuristics to have a range between -1 and 1
    min_val = heuristic_matrix.min()
    max_val = heuristic_matrix.max()
    heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    return heuristic_matrix
```
