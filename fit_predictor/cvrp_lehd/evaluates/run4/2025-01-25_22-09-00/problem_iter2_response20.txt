```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Enhance edge attractiveness with demand relevance, distance decay, and dynamic normalization."""
    total_demand = demands.sum()
    # Normalize demands by total demand
    normalized_demands = demands / total_demand
    # Calculate the potential contribution of each edge
    potential = -distance_matrix * normalized_demands
    # Apply a dampening factor to penalize longer distances
    dampen = torch.exp(-distance_matrix / 10)
    # Normalize the distance matrix to have a range between 0 and 1
    normalized_distance = distance_matrix / distance_matrix.max()
    # Combine potential, dampening, and normalized distance
    heuristics = potential * dampen * normalized_distance
    # Normalize the heuristics to have a range between -1 and 1
    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())
    return heuristics
```
