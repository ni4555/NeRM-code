```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    
    # Integrate diverse demand factors with a weighted sum
    weight_demand = demands / total_capacity
    weight_distance = 1 / (1 + torch.exp(-distance_matrix / torch.mean(torch.abs(distance_matrix))))
    
    # Normalize for demand and distance
    normalized_demand = weight_demand / torch.mean(weight_demand)
    normalized_distance = weight_distance / torch.mean(weight_distance)
    
    # Local balance factor: dampen locally
    local_balance_factor = -torch.abs(distance_matrix) * normalized_demand
    
    # Global balance factor: consider global trends
    global_balance_factor = normalized_demand / (total_capacity + torch.mean(torch.abs(distance_matrix)))
    
    # Avoid loops: ensure no node is visited twice
    loop_avoidance_factor = torch.eye(n) * 1e9
    
    # Combine the factors into the heuristics matrix
    heuristic_matrix = (normalized_demand + local_balance_factor + global_balance_factor + loop_avoidance_factor) - 1
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristic_matrix = heuristic_matrix.clamp(min=0)
    
    # Adjust the heuristics for the depot to all other nodes
    for i in range(1, n):
        route_demand = demands[i]
        if i == 0:  # Depot case
            route_demand = demands.sum() - route_demand
        heuristic_matrix[0, i] = -route_demand * distance_matrix[0, i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    return heuristic_matrix
```
