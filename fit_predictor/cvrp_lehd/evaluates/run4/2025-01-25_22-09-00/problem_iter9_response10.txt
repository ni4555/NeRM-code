```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    
    # Demand factor: focus on high demand nodes
    demand_factor = -normalized_demands
    
    # Distance dampening: use exponential dampening for distance
    distance_dampening = 1 / (1 + torch.exp(distance_matrix / torch.mean(torch.abs(distance_matrix))))
    
    # Exclude depot from local factors: scale demand without depot
    local_demand = normalized_demands[1:]
    local_balance_factor = torch.where(
        torch.abs(distance_matrix[1:, 1:]) < torch.mean(torch.abs(distance_matrix[1:, 1:])),
        -local_demand * torch.abs(distance_matrix[1:, 1:]),
        0
    )
    
    # Adjust demand to capacity ratios: scale demand to capacity
    demand_to_capacity_ratio = normalized_demands * (total_capacity / demands.sum())
    
    # Combine factors into the heuristics matrix
    heuristic_matrix = demand_factor + distance_dampening + local_balance_factor + demand_to_capacity_ratio
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristic_matrix = heuristic_matrix.clamp(min=0)
    
    # Adjust the heuristics for the depot to all other nodes
    depot_distance = distance_matrix[:, 0]
    for i in range(1, n):
        route_demand = demands[i]
        heuristic_matrix[0, i] = -route_demand * depot_distance[i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    return heuristic_matrix
```
