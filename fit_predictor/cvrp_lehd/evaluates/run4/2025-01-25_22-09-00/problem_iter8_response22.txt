```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    
    # Demand factor: emphasize high demand nodes
    demand_factor = 1 - demands / total_capacity
    
    # Distance factor: penalize longer distances
    distance_factor = torch.exp(-distance_matrix / torch.mean(torch.abs(distance_matrix)))
    
    # Demand and distance balance: combine demand and distance factors
    demand_distance_balance = demand_factor * distance_factor
    
    # Local balance factor: encourage visiting nodes that are close to the others
    local_balance_factor = -torch.abs(distance_matrix) * (demands / total_capacity)
    
    # Global balance factor: prevent distant edges from being overvalued
    global_balance_factor = demands / (total_capacity + torch.mean(torch.abs(distance_matrix)))
    
    # Combine all factors into the heuristics matrix
    heuristic_matrix = demand_distance_balance + local_balance_factor + global_balance_factor
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristic_matrix = heuristic_matrix.clamp(min=0)
    
    # Adjust the heuristics for the depot to all other nodes
    depot_distance = distance_matrix[:, 0]
    for i in range(1, n):
        route_demand = demands[i] + (total_capacity - demands[i])
        heuristic_matrix[0, i] = -route_demand * depot_distance[i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    return heuristic_matrix
```
