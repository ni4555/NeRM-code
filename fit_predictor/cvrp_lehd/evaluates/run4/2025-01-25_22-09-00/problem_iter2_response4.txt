```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor, vehicle_capacity: float) -> torch.Tensor:
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    potential = -distance_matrix * normalized_demands
    dampen = torch.exp(-distance_matrix / 10)
    heuristics = potential * dampen
    # Adjust heuristics to take into account vehicle capacity
    capacity_normalized = torch.clamp(1 - normalized_demands / vehicle_capacity, min=0)
    heuristics *= capacity_normalized
    # Normalize the heuristics to have a range between -1 and 1
    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())
    return heuristics
```
