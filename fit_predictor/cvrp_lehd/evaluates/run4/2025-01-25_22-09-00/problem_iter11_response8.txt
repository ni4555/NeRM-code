```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    total_demand = demands.sum()
    
    # Demand factor with dampening: apply a non-linear dampening to the demand factor
    demand_factor = torch.exp(-demands / (total_capacity * torch.mean(torch.abs(distance_matrix))))
    
    # Local balance factor: apply a dampening to the reduction of weight for short edges with low demand
    local_balance_factor = torch.where(
        torch.abs(distance_matrix) < torch.mean(torch.abs(distance_matrix)),
        -demand_factor * demands / total_capacity * torch.abs(distance_matrix),
        0
    )
    
    # Global balance factor: balance the effect of distant edges using a dampened factor
    global_balance_factor = demand_factor * demands / (total_capacity + torch.mean(torch.abs(distance_matrix)))
    
    # Refine distance scaling: decrease the weight of distant edges, using a dampening effect
    distance_scaling = 1 / (1 + torch.exp(-distance_matrix / (torch.mean(torch.abs(distance_matrix)) * 2)))
    
    # Normalize for demand and distance, ensuring non-negative normalized values
    demand_normalized = demand_factor / (torch.max(demand_factor) if torch.max(demand_factor) > 0 else 1)
    distance_normalized = distance_scaling / (torch.max(distance_scaling) if torch.max(distance_scaling) > 0 else 1)
    
    # Combine the factors into the heuristics matrix
    heuristic_matrix = demand_normalized + local_balance_factor + global_balance_factor + distance_normalized
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristic_matrix = heuristic_matrix.clamp(min=0)
    
    # Adjust the heuristics for the depot to all other nodes with a non-linear dampening
    depot_distance = distance_matrix[:, 0]
    for i in range(1, n):
        route_demand = demands[i] + (total_demand - demands[i])
        heuristic_matrix[0, i] = -route_demand * depot_distance[i] * demand_factor[i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    return heuristic_matrix
```
