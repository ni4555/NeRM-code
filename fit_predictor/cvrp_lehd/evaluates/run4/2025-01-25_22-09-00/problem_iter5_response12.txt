```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    total_demand = demands.sum()
    
    # Demand factor
    demand_factor = 1 - demands / total_capacity
    
    # Local balance factor
    local_balance_factor = demands / (total_capacity + torch.mean(torch.abs(distance_matrix)))
    
    # Global balance factor
    global_balance_factor = 1 / (1 + torch.exp(-distance_matrix / torch.mean(torch.abs(distance_matrix))))
    
    # Normalization factor
    normalization_factor = torch.abs(distance_matrix) / torch.mean(torch.abs(distance_matrix))
    
    # Refine distance scaling: decrease the weight of distant edges
    distance_scaling = torch.exp(-distance_matrix / torch.mean(torch.abs(distance_matrix)))
    
    # Combine the factors into the heuristics matrix
    heuristic_matrix = (demand_factor + local_balance_factor + distance_scaling) - (global_balance_factor + normalization_factor)
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristic_matrix = heuristic_matrix.clamp(min=0)
    
    # Adjust the heuristics for the depot to all other nodes
    for i in range(1, n):
        route_demand = demands[i] + (total_demand - demands[i])
        heuristic_matrix[0, i] = -route_demand * torch.exp(-distance_matrix[0, i] / torch.mean(torch.abs(distance_matrix)))
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    return heuristic_matrix
```
