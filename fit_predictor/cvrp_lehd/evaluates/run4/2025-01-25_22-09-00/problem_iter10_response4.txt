```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()

    # Demand factor: increase the value of edges leading to high demand nodes
    demand_factor = (demands / total_capacity) ** 2

    # Distance factor: balance the influence of distance with demand
    distance_factor = torch.exp(-torch.abs(distance_matrix) / torch.mean(torch.abs(distance_matrix)))

    # Local balance factor: selectively reduce the value of short edges with low demand
    local_balance_factor = torch.where(
        torch.abs(distance_matrix) < torch.mean(torch.abs(distance_matrix)) and demands < demands.mean(),
        -torch.abs(distance_matrix),
        0
    )

    # Global balance factor: balance the effect of distant edges with demand
    global_balance_factor = (demands / (total_capacity + torch.mean(torch.abs(distance_matrix)))) ** 2

    # Combine the factors into the heuristics matrix
    heuristic_matrix = (demand_factor * distance_factor + local_balance_factor + global_balance_factor) - 1

    # Normalize the heuristics matrix to ensure non-negative values
    heuristic_matrix = heuristic_matrix.clamp(min=0)

    # Adjust the heuristics for the depot to all other nodes
    depot_distance = distance_matrix[:, 0]
    for i in range(1, n):
        route_demand = demands[i] + (total_capacity - demands[i])
        heuristic_matrix[0, i] = -route_demand * depot_distance[i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]

    return heuristic_matrix
```
