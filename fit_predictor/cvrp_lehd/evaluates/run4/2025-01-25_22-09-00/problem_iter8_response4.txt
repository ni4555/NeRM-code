```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    total_demand = demands.sum()
    
    # Demand factor: increase the value of edges leading to high demand nodes
    demand_factor = 1 - demands / total_capacity
    
    # Local balance factor: reduce the value of short edges with low demand
    local_balance_factor = -demands / total_capacity * torch.abs(distance_matrix) * (torch.abs(distance_matrix) < torch.mean(torch.abs(distance_matrix)))
    
    # Global balance factor: balance the effect of distant edges
    global_balance_factor = demands / (total_capacity + torch.mean(torch.abs(distance_matrix)))
    
    # Distance scaling: decrease the weight of distant edges
    distance_scaling = 1 / (1 + torch.exp(-distance_matrix / torch.mean(torch.abs(distance_matrix))))
    
    # Combine factors using vectorized operations
    heuristics = demand_factor + local_balance_factor + global_balance_factor + distance_scaling - 1
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristics = heuristics.clamp(min=0)
    
    # Adjust the heuristics for the depot to all other nodes
    depot_distance = distance_matrix[:, 0]
    for i in range(1, n):
        route_demand = demands[i] + (total_demand - demands[i])
        heuristics[0, i] = -route_demand * depot_distance[i]
        heuristics[i, 0] = heuristics[0, i]
    
    # Integrate diverse demand factors, balance local & global, and fine-tune dampening
    dampening_factor = torch.exp(-torch.abs(demand_factor + local_balance_factor + global_balance_factor))
    
    # Normalize effectively, focus on relative values, and optimize computationally
    heuristics /= (torch.max(heuristics) + 1e-6)
    
    return heuristics
```
