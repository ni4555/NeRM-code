```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    total_demand = demands.sum()
    
    # Demand factor: increase the value of edges leading to high demand nodes
    demand_factor = 1 - demands / total_capacity
    
    # Local balance factor: reduce the value of short edges with low demand
    local_balance_factor = torch.where(
        torch.abs(distance_matrix) < torch.mean(torch.abs(distance_matrix)),
        -demands / total_capacity * torch.abs(distance_matrix),
        0
    )
    
    # Global balance factor: balance the effect of distant edges
    global_balance_factor = demands / (total_capacity + torch.mean(torch.abs(distance_matrix)))
    
    # Refine distance scaling: decrease the weight of distant edges
    distance_scaling = 1 / (1 + torch.exp(-distance_matrix / torch.mean(torch.abs(distance_matrix))))
    
    # Calculate the distance from the depot to all other nodes
    depot_distance = distance_matrix[:, 0]
    
    # Combine the factors into the heuristics matrix
    heuristic_matrix = (demand_factor + local_balance_factor + global_balance_factor + distance_scaling) - 1
    
    # Normalize the heuristics matrix to ensure non-negative values
    heuristic_matrix = heuristic_matrix.clamp(min=0)
    
    # Adjust the heuristics for the depot to all other nodes
    for i in range(1, n):
        route_demand = demands[i] + (total_demand - demands[i])
        heuristic_matrix[0, i] = -route_demand * depot_distance[i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    # Integrate diverse demand factors, balance local & global, and fine-tune dampening
    demand_factor = demand_factor * torch.exp(-torch.abs(demand_factor))
    local_balance_factor = local_balance_factor * torch.exp(-torch.abs(local_balance_factor))
    global_balance_factor = global_balance_factor * torch.exp(-torch.abs(global_balance_factor))
    
    # Normalize effectively, focus on relative values, and optimize computationally
    heuristic_matrix /= (torch.max(heuristic_matrix) + 1e-6)
    
    return heuristic_matrix
```
