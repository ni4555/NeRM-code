```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()

    # Demand factor: increase the value of edges leading to high demand nodes
    demand_factor = 1 - demands / total_capacity

    # Local balance factor: reduce the value of short edges with low demand
    local_balance_factor = torch.abs(distance_matrix) * (demands / total_capacity)

    # Global balance factor: balance the effect of distant edges
    global_balance_factor = demands / (total_capacity + torch.mean(torch.abs(distance_matrix)))

    # Distance scaling: decrease the weight of distant edges
    distance_scaling = 1 / (1 + torch.exp(-distance_matrix / torch.mean(torch.abs(distance_matrix))))

    # Combine factors
    heuristics = demand_factor * local_balance_factor * global_balance_factor * distance_scaling

    # Normalize the heuristics matrix to ensure non-negative values
    heuristics = heuristics.clamp(min=0)

    # Adjust the heuristics for the depot to all other nodes
    for i in range(1, n):
        # Calculate the heuristics for the depot to the i-th node
        heuristics[0, i] = -demands[i] * torch.exp(-distance_matrix[0, i] / torch.mean(torch.abs(distance_matrix)))
        # Calculate the heuristics for the i-th node to the depot
        heuristics[i, 0] = heuristics[0, i]

    return heuristics
```
