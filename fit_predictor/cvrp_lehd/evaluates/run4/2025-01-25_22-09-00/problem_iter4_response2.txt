```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    demand_sum = demands.sum()
    
    # Incorporate demand factors based on relative demand
    demand_factor = (demands / demand_sum).unsqueeze(1)
    
    # Avoid negative weights by adding a small constant to the distance matrix
    distance_matrix += 1e-8
    
    # Local factor based on distance
    local_factor = -distance_matrix
    
    # Global factor based on the sum of distances from each node to the depot
    global_factor = torch.sum(local_factor, dim=1)
    
    # Refine distance scaling by considering distance to depot
    distance_to_depot = distance_matrix[depot]
    distance_scaled = distance_to_depot / torch.sum(distance_to_depot)
    
    # Combine factors and normalize to ensure non-negative weights
    heuristics = demand_factor * (local_factor + global_factor) * distance_scaled
    heuristics = torch.clamp(heuristics, min=0)  # Ensure non-negative weights
    
    return heuristics
```
