```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demand_normalized = demands / total_capacity

    # Non-linear demand scaling
    demand_non_linear = torch.clamp(demand_normalized, min=0.1, max=0.9) ** 2

    # Non-linear distance scaling
    distance_non_linear = torch.exp(-torch.log1p(distance_matrix / distance_matrix.mean()))

    # Local balance by considering the distance matrix itself
    local_balance = torch.exp(-distance_matrix)

    # Global balance by considering the distance matrix itself
    global_balance = torch.sum(local_balance, dim=1, keepdim=True)

    # Adjust demand factors for non-linear scaling and balance
    balance_adjusted_demand = demand_non_linear * (distance_non_linear / global_balance)

    # Final heuristic values
    heuristic_values = balance_adjusted_demand

    # Normalize the heuristic values to ensure non-negative values
    heuristic_values = heuristic_values.clamp(min=0)

    # Adjust the heuristics for the depot to all other nodes
    depot_distance = distance_matrix[:, 0]
    for i in range(1, n):
        route_demand = demands[i] + (total_capacity - demands[i])
        heuristic_values[0, i] = -route_demand * depot_distance[i]
        heuristic_values[i, 0] = heuristic_values[0, i]

    return heuristic_values
```
