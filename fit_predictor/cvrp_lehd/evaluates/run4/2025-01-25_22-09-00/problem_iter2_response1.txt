```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor, vehicle_capacity: float) -> torch.Tensor:
    """An improved heuristic for CVRP that considers demand, distance, and vehicle capacity."""
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the maximum possible demand a single vehicle can carry
    max_demand_per_vehicle = vehicle_capacity
    
    # Iterate through all edges
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j:
                # Calculate the demand on the edge
                edge_demand = demands[j]
                # If the demand on the edge exceeds the capacity, it's not promising
                if edge_demand > max_demand_per_vehicle:
                    heuristics[i, j] = -float('inf')
                else:
                    # Calculate the heuristic value based on distance and demand
                    heuristics[i, j] = max_demand_per_vehicle - edge_demand - distance_matrix[i, j]
    return heuristics
```
