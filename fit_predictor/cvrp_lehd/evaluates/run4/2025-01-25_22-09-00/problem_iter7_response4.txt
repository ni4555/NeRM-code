```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    max_demand = demands.max()
    min_demand = demands.min()
    avg_demand = demands.mean()
    
    # Demand factor: emphasize high demand nodes, de-emphasize low demand nodes
    demand_factor = torch.exp(-demands / max_demand)
    
    # Local balance factor: enhance short edges with high demand
    local_balance_factor = torch.exp(-torch.abs(distance_matrix) / torch.mean(torch.abs(distance_matrix)))
    local_balance_factor = torch.where(
        demands > avg_demand,
        demand_factor * local_balance_factor,
        local_balance_factor
    )
    
    # Global balance factor: de-emphasize distant edges, balance demand
    global_balance_factor = torch.exp(-demands / (total_capacity + torch.mean(torch.abs(distance_matrix))))
    
    # Refine distance scaling: amplify near edges, de-amplify distant edges
    distance_scaling = torch.exp(-distance_matrix / torch.mean(torch.abs(distance_matrix)))
    
    # Normalize factors for better balance
    demand_normalized = demand_factor / torch.max(demand_factor)
    distance_normalized = distance_scaling / torch.max(distance_scaling)
    
    # Combine the factors into the heuristics matrix
    heuristic_matrix = demand_normalized + local_balance_factor + global_balance_factor + distance_normalized
    
    # Adjust the heuristics for the depot to all other nodes
    depot_distance = distance_matrix[:, 0]
    for i in range(1, n):
        if demands[i] > total_capacity:
            demand_excess = demands[i] - total_capacity
            route_demand = demands[i] - demand_excess
        else:
            route_demand = demands[i]
        heuristic_matrix[0, i] = -route_demand * depot_distance[i]
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]
    
    return heuristic_matrix
```
