```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Calculate the edge demand excess for each edge
    edge_demand_excess = (cumulative_demand[:, None] > cumulative_capacity).float() * -1000
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity, adjusted
    # for any demand excess
    heuristics_matrix[0, nearest_customer] = -distance_matrix[0, nearest_customer] + edge_demand_excess[0, nearest_customer]
    
    # For each edge from a customer to the depot, assign a heuristic value (positive distance)
    # adjusted for any demand excess in the opposite direction
    heuristics_matrix[nearest_customer, 0] = distance_matrix[nearest_customer, 0] + edge_demand_excess[nearest_customer, 0]
    
    return heuristics_matrix
```
