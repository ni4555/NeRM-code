```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the index of the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Create a mask for edges that can be served without exceeding vehicle capacity
    capacity_mask = (cumulative_demand < cumulative_capacity[:, None]).float()
    
    # Calculate the distance to the nearest customer for each edge, weighted by capacity constraints
    heuristics_matrix = -distance_matrix * capacity_mask
    
    # Ensure that the heuristic values for edges that exceed capacity are set to a large negative value
    heuristics_matrix[capacity_mask == 0] = -float('inf')
    
    return heuristics_matrix
```
