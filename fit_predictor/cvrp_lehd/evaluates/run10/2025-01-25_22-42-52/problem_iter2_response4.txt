```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the demand difference between consecutive nodes
    demand_diff = torch.abs(cumulative_demand[1:] - cumulative_demand[:-1])
    
    # Calculate the heuristic value as the sum of demand differences on each edge
    heuristics = torch.zeros_like(distance_matrix)
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if distance_matrix[i, j] != 0:
                heuristics[i, j] = torch.sum(demand_diff[i:j+1]) + torch.sum(demand_diff[j:i+1])
    
    return heuristics
```
