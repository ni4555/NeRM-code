```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Calculate the cumulative sum of distances to the nearest customer up to each node
    cumulative_distance = torch.cumsum(distance_matrix[:, nearest_customer], dim=0)
    
    # Initialize the heuristics matrix with the negative of the cumulative distance
    heuristics_matrix = -cumulative_distance
    
    # For each edge, check if the demand at the destination can be served without exceeding capacity
    # and adjust the heuristic value accordingly
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i != j and demands[j] > 0 and (cumulative_demand[i] - cumulative_demand[j]) <= vehicle_capacity[i]:
                heuristics_matrix[i, j] = -distance_matrix[i, j]
    
    return heuristics_matrix
```
