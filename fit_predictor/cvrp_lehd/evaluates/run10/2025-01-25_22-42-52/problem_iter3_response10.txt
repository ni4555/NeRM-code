```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate cumulative demand and cumulative capacity
    cumulative_demand = torch.cumsum(demands, dim=0)
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Identify the first customer for each vehicle that would not exceed capacity
    feasible_customers = (cumulative_capacity[:, None] - cumulative_demand) >= 0
    feasible_customers[0] = False  # The depot doesn't need to be considered
    first_feasible_customer = torch.argmax(feasible_customers, dim=1)
    
    # Initialize the heuristics matrix with large negative values
    heuristics_matrix = torch.full_like(distance_matrix, fill_value=-1e9)
    
    # Set the heuristics for the nearest feasible customers from the depot
    heuristics_matrix[torch.arange(n), first_feasible_customer] = 0
    
    # Set the heuristics for the rest of the customers
    for i in range(n):
        if i != 0:  # Skip the depot
            # Find the nearest feasible customer from the previous node
            prev_customer = first_feasible_customer[i-1]
            distance_to_prev_customer = distance_matrix[i, prev_customer]
            distance_to_next_customer = distance_matrix[i, first_feasible_customer[i]]
            heuristics_matrix[i, first_feasible_customer[i]] = distance_to_next_customer - distance_to_prev_customer
    
    return heuristics_matrix
```
