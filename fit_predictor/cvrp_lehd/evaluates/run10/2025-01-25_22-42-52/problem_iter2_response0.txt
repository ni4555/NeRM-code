```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the combined demand for each edge
    combined_demand = demands.cumsum(dim=0) + demands.cumsum(dim=1)
    
    # Generate a matrix of 1s for edges where the distance is non-zero
    non_zero_edges = distance_matrix != 0
    
    # Calculate the overcapacity penalty for each edge
    overcapacity_penalty = (combined_demand - 1.0) * distance_matrix[non_zero_edges]
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Assign heuristic values to non-zero edges based on the overcapacity penalty
    heuristics_matrix[non_zero_edges] = overcapacity_penalty
    
    return heuristics_matrix
```
