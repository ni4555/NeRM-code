```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative vehicle capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the potential overcapacity as a heuristic penalty
    overcapacity_penalty = torch.abs(cumulative_demand - cumulative_capacity)
    
    # Find the nearest feasible customer for each node, excluding the depot (0-indexed)
    nearest_customer_indices = torch.argmin(distance_matrix[:, 1:], dim=1)
    
    # Assign negative heuristic values for the distance to the nearest customer
    heuristics_matrix = -torch.full_like(distance_matrix, fill_value=torch.inf)
    heuristics_matrix[:, 1:] = distance_matrix[:, nearest_customer_indices]
    
    # Add overcapacity penalty to the heuristics for edges where demand exceeds capacity
    heuristics_matrix[torch.abs(demands - vehicle_capacity[None, :]) > 0] += overcapacity_penalty[1:]
    
    return heuristics_matrix
```
