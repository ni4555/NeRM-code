```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    heuristics_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer] = -distance_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer]
    
    # Calculate the remaining capacity for each node
    remaining_capacity = vehicle_capacity - cumulative_capacity
    
    # Add a penalty for edges that lead to overcapacity
    # Only consider the edge if the next customer would exceed the capacity
    overcapacity_penalty = (cumulative_demand[1:] - cumulative_capacity[:-1]) > demands[1:]
    heuristics_matrix[torch.arange(distance_matrix.shape[0]), overcapacity_penalty] -= 1000
    
    return heuristics_matrix
```
