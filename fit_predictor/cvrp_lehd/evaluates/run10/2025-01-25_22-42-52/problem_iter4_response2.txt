```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the difference in cumulative demand between consecutive nodes
    cumulative_demand_diff = (cumulative_demand[1:] - cumulative_demand[:-1]).abs()
    
    # Find indices where the cumulative demand exceeds the vehicle capacity
    exceeding_demand_indices = torch.where(cumulative_demand > cumulative_capacity)[0]
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # If there are no indices where the cumulative demand exceeds the capacity, return the negative
    # sum of the cumulative demand difference as a heuristic
    if len(exceeding_demand_indices) == 0:
        heuristics_matrix = -torch.sum(cumulative_demand_diff) * (distance_matrix != 0)
    else:
        # For each edge, if the cumulative demand at the destination node is less than or equal to
        # the vehicle capacity, assign a heuristic value based on the distance to the nearest
        # customer that can be served without exceeding vehicle capacity
        for i in range(1, len(cumulative_demand)):
            if i not in exceeding_demand_indices:
                nearest_customer = torch.argmin(torch.abs(cumulative_demand[i:] - cumulative_capacity[i:][:, None]), dim=1) + i
                heuristics_matrix[i, nearest_customer] = -distance_matrix[i, nearest_customer]
    
    return heuristics_matrix
```
