```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Initialize a matrix with high negative values for undesirable edges
    heuristics_matrix = -torch.ones_like(distance_matrix)
    
    # Calculate incentives for edges that lead to better load balance
    load_balance_incentive = torch.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if cumulative_demand[j - 1] + demands[j] <= demands[0]:  # Check if adding demand j doesn't exceed capacity
                additional_demand = demands[j] - (cumulative_demand[j - 1] if j > 0 else 0)
                load_balance_incentive[i, j] = (demands[i] + additional_demand) / demands[0]
    
    # Add incentives based on load balance
    heuristics_matrix += load_balance_incentive * distance_matrix
    
    # Calculate penalties for edges that lead to overcapacity
    overcapacity_penalty = torch.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if j != 0 and cumulative_demand[j - 1] + demands[j] > demands[0]:
                overcapacity_penalty[i, j] = -1000
    
    # Apply overcapacity penalties
    heuristics_matrix[overcapacity_penalty != 0] = overcapacity_penalty[overcapacity_penalty != 0]
    
    return heuristics_matrix
```
