```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the difference in cumulative demand between consecutive nodes
    cumulative_demand_diff = (cumulative_demand[1:] - cumulative_demand[:-1]).abs()
    
    # Initialize the heuristics matrix
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the initial heuristic based on the cumulative demand difference
    heuristics_matrix = heuristics_matrix - cumulative_demand_diff * 0.5
    
    # Identify the overcapacity events and penalize accordingly
    overcapacity_mask = (cumulative_demand + cumulative_demand[:, None]) > 1.0
    heuristics_matrix[overcapacity_mask] -= 1000
    
    # Penalize longer distances by adding a distance-based penalty
    heuristics_matrix += distance_matrix * 0.1
    
    return heuristics_matrix
```
