```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative vehicle capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the potential overcapacity as a heuristic penalty
    overcapacity_penalty = torch.abs(cumulative_demand - cumulative_capacity)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    # without exceeding vehicle capacity
    valid_demand_indices = (cumulative_demand < cumulative_capacity).float()
    min_distances = torch.argmin(distance_matrix[valid_demand_indices], dim=1)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the
    # distance to the nearest valid customer and a penalty for overcapacity
    heuristics_matrix[:, min_distances] = -distance_matrix[:, min_distances] - overcapacity_penalty
    heuristics_matrix[0, :] = heuristics_matrix[0, :] + overcapacity_penalty[0]
    
    return heuristics_matrix
```
