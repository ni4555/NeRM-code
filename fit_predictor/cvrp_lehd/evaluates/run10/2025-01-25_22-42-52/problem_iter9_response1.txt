```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    # Use torch.where to handle cases where the nearest customer index is equal to the number of nodes
    nearest_customer = torch.where(cumulative_demand < cumulative_capacity[:, None], torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1), None)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    # Use torch.masked_select to efficiently handle None values in nearest_customer
    if nearest_customer is not None:
        indices = torch.arange(distance_matrix.shape[0])
        mask = indices != nearest_customer
        heuristics_matrix[mask, nearest_customer[mask]] = -distance_matrix[mask, nearest_customer[mask]]
    
    return heuristics_matrix
```
