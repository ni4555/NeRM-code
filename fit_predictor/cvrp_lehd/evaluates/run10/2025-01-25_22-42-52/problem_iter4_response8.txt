```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the maximum demand at each node
    max_demand = torch.max(demands)
    
    # Create a matrix of 1s for edges where the distance is non-zero
    non_zero_edges = distance_matrix != 0
    
    # Initialize the heuristics matrix with the maximum demand difference
    heuristics_matrix = (cumulative_demand[:, None] - cumulative_demand) * non_zero_edges
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * max_demand
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Use vectorized operations to find edges that would lead to overcapacity
    overcapacity_mask = (cumulative_demand[:, None] > cumulative_capacity).float()
    
    # Update the heuristics matrix to penalize overcapacity
    heuristics_matrix[overcapacity_mask] = -1000.0
    
    return heuristics_matrix
```
