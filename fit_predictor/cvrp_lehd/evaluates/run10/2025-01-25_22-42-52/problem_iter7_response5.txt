```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Find the indices of the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    heuristics_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer] = -distance_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer]
    
    # To balance the heuristic, we introduce a penalty for high demand nodes and high distance
    # The penalty factor can be adjusted to control the impact of these penalties
    penalty_factor = 0.1
    
    # Apply penalties to high demand nodes and high distance edges
    high_demand_penalty = (demands > demands.mean()).float() * penalty_factor
    high_distance_penalty = (distance_matrix > distance_matrix.mean()).float() * penalty_factor
    
    # Add penalties to the heuristic values
    heuristics_matrix = heuristics_matrix + high_demand_penalty[nearest_customer] + high_distance_penalty[nearest_customer]
    
    return heuristics_matrix
```
