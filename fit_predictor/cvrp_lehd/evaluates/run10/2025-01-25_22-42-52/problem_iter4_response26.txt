```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Initialize a matrix with high negative values for undesirable edges
    heuristics_matrix = -torch.ones_like(distance_matrix)
    
    # Assign a heuristic value based on the negative distance to the nearest feasible customer
    heuristics_matrix[torch.arange(n), nearest_customer] = -distance_matrix[torch.arange(n), nearest_customer]
    
    # Add incentives for edges that lead to better load balance
    for i in range(n):
        for j in range(n):
            if j != 0 and j in nearest_customer:
                # Calculate the additional demand that would remain if we were to serve this customer
                additional_demand = demands[j] - (cumulative_demand[j - 1] if j > 0 else 0)
                # If the vehicle can carry the remaining demand, add an incentive to the heuristic value
                if additional_demand <= demands[i]:
                    # Calculate the load balance factor, encouraging routes that balance the vehicle load
                    load_balance_factor = (demands[i] + additional_demand) / vehicle_capacity[0]
                    heuristics_matrix[i, j] += load_balance_factor * distance_matrix[i, j]
            
            # Add a penalty for edges that lead to overcapacity
            if cumulative_demand[j - 1] + demands[j] > vehicle_capacity[0]:
                heuristics_matrix[i, j] -= 1000
    
    return heuristics_matrix
```
