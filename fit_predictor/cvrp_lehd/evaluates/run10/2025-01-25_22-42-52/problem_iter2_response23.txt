```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the maximum demand at each node
    max_demand = torch.max(demands)
    
    # Calculate the heuristic value for each edge based on the maximum demand
    max_demand_diff = max_demand
    
    # Generate a matrix of 1s for edges where the distance is non-zero
    non_zero_edges = distance_matrix != 0
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each non-zero edge, assign a heuristic value based on the maximum demand
    heuristics_matrix[non_zero_edges] = max_demand_diff
    
    return heuristics_matrix
```
