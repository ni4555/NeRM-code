```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    heuristics_matrix[0, nearest_customer] = -distance_matrix[0, nearest_customer]
    
    # For each edge from customer to customer, assign a heuristic value that takes into account the demand
    # and the distance to the nearest feasible customer
    feasible_edges = (cumulative_demand[:, None] <= cumulative_capacity[None, :])
    edge_penalties = torch.where(feasible_edges, -distance_matrix, 0)
    heuristics_matrix[:, 1:] = torch.where(demands[1:] > 0, edge_penalties, -torch.inf)
    
    # Apply a capacity-based penalty for edges leading to nodes that exceed the vehicle capacity
    capacity_penalties = torch.where(cumulative_demand[:, None] > cumulative_capacity[None, :], 
                                    -torch.inf, 0)
    heuristics_matrix[:, 1:] += capacity_penalties
    
    return heuristics_matrix
```
