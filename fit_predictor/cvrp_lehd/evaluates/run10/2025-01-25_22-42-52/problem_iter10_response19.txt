```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Find the nearest customer with positive demand that can be served without exceeding vehicle capacity
    nearest_customer = torch.argmin(torch.abs(cumulative_demand[:, None] - cumulative_capacity), dim=1)
    
    # Initialize heuristics matrix with zero values
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the edge demand excess
    edge_demand_excess = (cumulative_demand[:, None] > cumulative_capacity).float() * -1000
    
    # For each edge, assign a heuristic value
    # Positive for edges that lead to the nearest customer without exceeding capacity
    heuristics_matrix[0, nearest_customer] = -distance_matrix[0, nearest_customer] + edge_demand_excess[0, nearest_customer]
    heuristics_matrix[nearest_customer, 0] = distance_matrix[nearest_customer, 0] + edge_demand_excess[nearest_customer, 0]
    
    # For edges to/from customers that are not the nearest, add a penalty
    heuristics_matrix[:, nearest_customer] -= distance_matrix[:, nearest_customer] + edge_demand_excess[:, nearest_customer]
    heuristics_matrix[nearest_customer, :] += distance_matrix[nearest_customer, :] - edge_demand_excess[nearest_customer, :]
    
    # For edges between non-nearest customers, assign a very negative value to discourage them
    non_nearest_mask = (nearest_customer != torch.arange(n)[None, :]).float()
    penalty = -1000 * non_nearest_mask
    heuristics_matrix -= penalty
    
    return heuristics_matrix
```
