```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Initialize vehicle capacities to the maximum demand found
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    
    # Create a matrix for the heuristics, initializing it with large negative values
    heuristics_matrix = torch.full_like(distance_matrix, fill_value=-float('inf'))
    
    # Iterate through each node to update heuristics based on the nearest feasible customer
    for i in range(1, distance_matrix.shape[0]):
        # Find the index of the nearest customer with positive demand that can be served
        nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_demand[i] + vehicle_capacity[i]))
        
        # If the demand does not exceed the capacity, update the heuristic matrix
        if demands[nearest_customer] + cumulative_demand[i] <= vehicle_capacity[i]:
            heuristics_matrix[i, nearest_customer] = distance_matrix[i, nearest_customer]
    
    # Set the heuristics from the depot to itself to 0
    heuristics_matrix[0, :] = 0
    heuristics_matrix[:, 0] = 0
    
    return heuristics_matrix
```
