```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the difference in cumulative demand between consecutive nodes
    cumulative_demand_diff = (cumulative_demand[1:] - cumulative_demand[:-1]).abs()
    
    # Initialize the heuristics matrix with penalties for overcapacity
    heuristics_matrix = -torch.ones_like(distance_matrix) * 1000
    
    # Calculate the load balance factor and heuristic value
    load_balance_factor = (cumulative_demand_diff + demands) / demands
    heuristics_matrix = heuristics_matrix - distance_matrix + load_balance_factor
    
    # Penalize longer distances
    heuristics_matrix += distance_matrix * 0.1
    
    # Avoid overcapacity by ensuring that the heuristic does not increase when it's not feasible
    overcapacity_penalty = (cumulative_demand + cumulative_demand[:, None]) > 1.0
    heuristics_matrix[overcapacity_penalty] += 1000
    
    return heuristics_matrix
```
