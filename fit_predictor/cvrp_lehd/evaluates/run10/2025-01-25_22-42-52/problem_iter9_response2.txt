```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    # without exceeding vehicle capacity
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    heuristics_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer] = -distance_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer]
    
    # In addition to the original heuristic, include a penalty for edges that exceed vehicle capacity
    # This penalty is calculated by the distance to the next feasible node (which would require a return to the depot)
    next_feasible_node = torch.where(torch.cumsum(demands) <= cumulative_capacity[:, None], nearest_customer, torch.full_like(nearest_customer, float('inf')))
    feasible_edges = nearest_customer != next_feasible_node
    penalty = distance_matrix[nearest_customer[feasible_edges], next_feasible_node[feasible_edges]]
    heuristics_matrix[nearest_customer[feasible_edges], next_feasible_node[feasible_edges]] -= penalty
    
    return heuristics_matrix
```
