```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    # We create a mask for nodes that have not reached their capacity and use it to index into cumulative_demand
    mask = cumulative_capacity < vehicle_capacity[:, None]
    nearest_customer = torch.argmin(torch.abs(cumulative_demand[mask] - cumulative_capacity[:, None][mask]), dim=1)
    
    # Initialize the heuristics matrix
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    for i in range(distance_matrix.shape[0]):
        if i == 0:  # The depot itself cannot be a customer
            continue
        nearest = nearest_customer[i]
        if nearest != 0:  # There is a customer that can be served
            heuristics_matrix[i, nearest] = -distance_matrix[i, nearest]
    
    return heuristics_matrix
```
