```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = len(demands)
    
    # Initialize the cumulative demand and vehicle capacity vectors
    cumulative_demand = torch.cumsum(demands, dim=0)
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    
    # Calculate the heuristics matrix with zeros initialized
    heuristics_matrix = torch.zeros((n, n), dtype=torch.float)
    
    # Assign positive heuristic values based on the minimum distance to a feasible customer
    for i in range(1, n):
        feasible_customer_mask = cumulative_demand[:i] <= vehicle_capacity[i]
        feasible_customer = torch.argmin(distance_matrix[i, feasible_customer_mask], dim=0)
        heuristics_matrix[i, feasible_customer] = distance_matrix[i, feasible_customer]
    
    # Introduce a distance-based penalty for the edges
    distance_penalty = torch.max(distance_matrix, dim=0)[0][:, None]
    
    # Calculate overcapacity penalties and apply them to the heuristic matrix
    overcapacity_penalty = torch.abs(cumulative_demand[:, None] - vehicle_capacity[None, :])
    overcapacity_mask = overcapacity_penalty > 0
    heuristics_matrix[overcapacity_mask] = -1000.0
    
    # Add a distance-based penalty to the heuristics
    heuristics_matrix += distance_penalty
    
    # Normalize the heuristics matrix
    max_val = torch.max(heuristics_matrix)
    min_val = torch.min(heuristics_matrix)
    heuristics_matrix = (heuristics_matrix - min_val) / (max_val - min_val)
    
    return heuristics_matrix
```
