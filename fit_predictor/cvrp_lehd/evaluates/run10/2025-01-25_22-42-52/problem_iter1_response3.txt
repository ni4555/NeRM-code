```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands up to each customer
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the potential savings if the edge was included
    potential_savings = (cumulative_demand[1:] - demands[:-1]) * (distance_matrix[1:, :-1] - distance_matrix[:-1, 1:])
    
    # Generate a matrix of 1s for edges where the distance is non-zero
    non_zero_edges = distance_matrix != 0
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each non-zero edge, assign a heuristic value based on the potential savings
    heuristics_matrix[non_zero_edges] = potential_savings[non_zero_edges]
    
    return heuristics_matrix
```
