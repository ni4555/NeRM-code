```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the index of the nearest customer that can be served without exceeding vehicle capacity
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    heuristics_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer] = -distance_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer]
    
    # Introduce explicit penalties for overcapacity
    overcapacity_penalty = torch.abs(cumulative_demand[:, None] - cumulative_capacity[None, :])
    heuristics_matrix += overcapacity_penalty * -1000
    
    # Introduce a distance-based penalty to discourage longer paths
    distance_penalty = distance_matrix * 0.1
    heuristics_matrix += distance_penalty
    
    # Normalize the heuristics to have a range of [0, 1]
    min_heuristic = heuristics_matrix.min()
    max_heuristic = heuristics_matrix.max()
    heuristics_matrix = (heuristics_matrix - min_heuristic) / (max_heuristic - min_heuristic)
    
    return heuristics_matrix
```
