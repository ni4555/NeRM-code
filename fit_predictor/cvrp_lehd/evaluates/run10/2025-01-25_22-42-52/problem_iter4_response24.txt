```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Initialize the heuristics matrix with positive infinity for all edges except for the depot
    heuristics_matrix = torch.full_like(distance_matrix, fill_value=float('inf'))
    heuristics_matrix[0, :] = 0
    
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Find the indices where the cumulative capacity matches the cumulative demand
    indices = torch.where(cumulative_demand == cumulative_capacity)[0]
    
    # Update the heuristics matrix for edges that satisfy the vehicle capacity constraint
    heuristics_matrix[indices[:, None], indices] = -distance_matrix[indices[:, None], indices]
    
    return heuristics_matrix
```
