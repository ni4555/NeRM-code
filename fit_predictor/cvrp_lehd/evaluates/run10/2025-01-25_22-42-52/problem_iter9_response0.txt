```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the indices of the nodes where the cumulative demand equals the cumulative capacity
    demand_capacity_eq_indices = torch.where(cumulative_demand == cumulative_capacity, cumulative_demand, torch.tensor(float('inf')))
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    # This considers the nearest demand capacity equal node if it exists
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - demand_capacity_eq_indices[:, None]), dim=1)
    
    # Initialize heuristics matrix with negative infinity
    heuristics_matrix = torch.full_like(distance_matrix, float('-inf'))
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    # Exclude edges where the nearest customer is the same as the node
    heuristics_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer] = distance_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer] - distance_matrix[torch.arange(distance_matrix.shape[0]), torch.arange(distance_matrix.shape[0])]
    
    return heuristics_matrix
```
