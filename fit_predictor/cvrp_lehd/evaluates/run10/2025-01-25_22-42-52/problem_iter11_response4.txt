```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the index of the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Use advanced indexing to assign heuristic values directly without creating a separate matrix
    return -distance_matrix[:, nearest_customer]
```
