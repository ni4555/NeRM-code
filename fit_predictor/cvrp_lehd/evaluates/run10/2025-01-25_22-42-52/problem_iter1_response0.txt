```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the difference in cumulative demand between consecutive nodes
    cumulative_demand_diff = (cumulative_demand[1:] - cumulative_demand[:-1]).abs()
    
    # Calculate the negative sum of the cumulative demand differences as a heuristic penalty
    penalty = -torch.sum(cumulative_demand_diff)
    
    # Calculate the heuristic based on the cumulative demand difference
    heuristics_matrix = penalty * (distance_matrix != 0)
    
    return heuristics_matrix
```
