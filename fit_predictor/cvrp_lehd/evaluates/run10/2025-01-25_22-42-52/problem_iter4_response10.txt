```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand and capacity at each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    vehicle_capacity = torch.max(demands)
    
    # Initialize a matrix for heuristics with zeros
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Iterate through each edge to calculate the heuristic
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Calculate the potential overcapacity
            overcapacity = max(0, cumulative_demand[j] - vehicle_capacity)
            # Assign heuristic value
            heuristics_matrix[i, j] = -distance_matrix[i, j] - overcapacity

    return heuristics_matrix
```
