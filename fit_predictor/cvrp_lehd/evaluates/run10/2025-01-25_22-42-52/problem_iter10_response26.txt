```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Introduce a penalty for edges that exceed the vehicle capacity
    # Vectorized way to identify if a customer demand exceeds vehicle capacity
    over_capacity_mask = demands > vehicle_capacity[:, None]
    
    # Calculate penalties for edges leading to overcapacity
    penalties = distance_matrix[over_capacity_mask] * -1000
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    heuristics_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer] = -distance_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer]
    
    # Apply the penalties to the heuristics matrix
    heuristics_matrix[over_capacity_mask] += penalties
    
    # Normalize the heuristics matrix to ensure it has negative values for undesirable edges
    # and positive values for promising ones
    min_val = heuristics_matrix.min()
    max_val = heuristics_matrix.max()
    heuristics_matrix = (heuristics_matrix - min_val) / (max_val - min_val)
    
    return heuristics_matrix
```
