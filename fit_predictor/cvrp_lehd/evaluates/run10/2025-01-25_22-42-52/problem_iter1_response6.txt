```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the difference in distance between consecutive customers
    distance_diff = (distance_matrix[1:] - distance_matrix[:-1]).abs()
    
    # Calculate the ratio of demand to distance difference as a heuristic indicator
    demand_to_distance_ratio = demands / distance_diff
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each non-zero edge, assign a heuristic value based on the demand to distance ratio
    heuristics_matrix[distance_diff != 0] = demand_to_distance_ratio[distance_diff != 0]
    
    return heuristics_matrix
```
