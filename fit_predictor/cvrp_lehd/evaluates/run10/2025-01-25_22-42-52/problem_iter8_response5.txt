```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Assign a heuristic value based on the distance to the nearest customer that can be served
    heuristics_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer] = -distance_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer]
    
    # Calculate the remaining capacity for each vehicle
    remaining_capacity = vehicle_capacity - cumulative_demand
    
    # Calculate the penalty for exceeding vehicle capacity
    penalties = torch.clamp(demands - remaining_capacity, min=0)
    
    # Normalize the heuristics to have negative values for undesirable edges
    min_val = heuristics_matrix.min()
    max_val = heuristics_matrix.max()
    heuristics_matrix = (heuristics_matrix - min_val) / (max_val - min_val)
    heuristics_matrix += penalties
    
    return heuristics_matrix
```
