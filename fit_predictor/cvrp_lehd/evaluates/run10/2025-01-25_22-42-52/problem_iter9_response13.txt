```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Find the maximum cumulative demand that does not exceed vehicle capacity
    feasible_demand = torch.max(torch.where(cumulative_capacity <= cumulative_demand, cumulative_demand, cumulative_capacity), dim=0)[0]
    
    # Calculate the distance to the nearest feasible customer from the depot
    nearest_customer = torch.argmin(torch.abs(cumulative_demand[1:] - feasible_demand[:, None]), dim=1) + 1
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest feasible customer that can be served
    heuristics_matrix[0, nearest_customer] = -distance_matrix[0, nearest_customer]
    
    return heuristics_matrix
```
