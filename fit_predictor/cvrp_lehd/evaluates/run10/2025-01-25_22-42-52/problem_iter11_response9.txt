```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    # without exceeding vehicle capacity. Use binary search to find the appropriate index.
    with torch.no_grad():
        lower_bound = 0
        upper_bound = cumulative_demand.shape[0] - 1
        while upper_bound - lower_bound > 1:
            mid = (upper_bound + lower_bound) // 2
            if cumulative_demand[mid] < cumulative_capacity[mid]:
                lower_bound = mid
            else:
                upper_bound = mid
        nearest_customer = lower_bound
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    heuristics_matrix[0, nearest_customer] = -distance_matrix[0, nearest_customer]
    
    return heuristics_matrix
```
