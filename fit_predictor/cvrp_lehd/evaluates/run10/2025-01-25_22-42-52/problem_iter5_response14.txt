```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the demand difference for each edge
    demand_diff = demands[:, None] - demands[None, :]
    
    # Calculate the overcapacity for each edge
    overcapacity = (cumulative_demand[nearest_customer[:, None]] - cumulative_demand[None, :]) > vehicle_capacity[None, :]
    
    # Calculate distance penalties
    distance_penalty = -distance_matrix
    
    # Assign heuristic values based on the distance penalty and overcapacity
    heuristics_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer] = distance_penalty[torch.arange(distance_matrix.shape[0]), nearest_customer]
    heuristics_matrix[overcapacity] = -float('inf')  # Assign negative infinity to overcapacity edges
    
    return heuristics_matrix
```
