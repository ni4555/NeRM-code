```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - cumulative_capacity[:, None]), dim=1)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the minimum distance from the depot to each customer
    min_distance_to_customer = torch.min(distance_matrix[:, 1:], dim=1).values
    
    # Calculate the minimum distance from each customer to the nearest customer that can be served
    min_distance_to_serveable_customer = torch.min(distance_matrix[nearest_customer[:, None], 1:], dim=1).values
    
    # Assign a heuristic value based on the difference between the two minimum distances
    heuristics_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer] = min_distance_to_serveable_customer - min_distance_to_customer
    
    return heuristics_matrix
```
