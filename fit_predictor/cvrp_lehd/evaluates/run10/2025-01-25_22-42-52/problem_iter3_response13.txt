```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - 1.0), dim=1)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    heuristics_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer] = -distance_matrix[torch.arange(distance_matrix.shape[0]), nearest_customer]
    
    # Penalize overcapacity
    overcapacity_penalty = (cumulative_demand[:, None] > 1.0).float() * -1000
    heuristics_matrix = heuristics_matrix + overcapacity_penalty
    
    return heuristics_matrix
```
