```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # Initialize heuristics matrix with zeros
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate cumulative demand and capacity
    cumulative_demand = torch.cumsum(demands, dim=0)
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Calculate penalties for exceeding vehicle capacity
    capacity_excess = torch.clamp(cumulative_demand - cumulative_capacity, min=0)
    
    # Calculate the distance to the nearest customer with a positive demand that can be served
    nearest_customer = torch.argmin(torch.abs(cumulative_demand - (cumulative_capacity[:, None] + capacity_excess)), dim=1)
    
    # Assign heuristic values based on the distance to the nearest customer that can be served
    heuristics_matrix[torch.arange(n), nearest_customer] = -distance_matrix[torch.arange(n), nearest_customer]
    
    # Normalize the heuristics matrix to have negative values for undesirable edges
    min_val = heuristics_matrix.min()
    max_val = heuristics_matrix.max()
    heuristics_matrix = (heuristics_matrix - min_val) / (max_val - min_val)
    
    # Add the penalty values to the normalized heuristics
    heuristics_matrix += capacity_excess
    
    return heuristics_matrix
```
