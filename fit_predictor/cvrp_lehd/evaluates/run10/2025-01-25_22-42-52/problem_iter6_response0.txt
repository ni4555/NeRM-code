```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Identify the first customer that can be served without exceeding capacity
    feasible_customers = cumulative_capacity < cumulative_demand[:, None]
    first_feasible_customer = torch.where(feasible_customers, cumulative_demand, torch.full_like(cumulative_demand, float('inf')))
    
    # Calculate the distance to the nearest feasible customer for each node
    nearest_feasible_distance = torch.argmin(distance_matrix, dim=1) * (first_feasible_customer != float('inf'))
    nearest_feasible_customer = torch.argmin(distance_matrix + first_feasible_customer[:, None], dim=1)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    heuristics_matrix[0, nearest_feasible_customer] = -distance_matrix[0, nearest_feasible_customer]
    
    # Penalize overcapacity by subtracting the excess demand from the heuristic
    excess_demand = cumulative_demand[:, None] - cumulative_capacity[None, :]
    heuristics_matrix[excess_demand > 0] -= torch.abs(excess_demand[excess_demand > 0])
    
    return heuristics_matrix
```
