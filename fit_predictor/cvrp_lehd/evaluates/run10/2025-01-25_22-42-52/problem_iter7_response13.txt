```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand up to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative capacity up to each node
    vehicle_capacity = torch.ones_like(demands) * torch.max(demands)
    cumulative_capacity = torch.cumsum(vehicle_capacity, dim=0)
    
    # Find the maximum demand to normalize the vehicle capacity
    max_demand = torch.max(demands)
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each edge from the depot to a customer, assign a heuristic value based on the distance
    # to the nearest customer that can be served without exceeding vehicle capacity
    for i in range(distance_matrix.shape[0]):
        if i != 0:  # Skip the depot
            # Find the nearest customer that can be served without exceeding vehicle capacity
            feasible_customers = cumulative_demand < (cumulative_capacity[i] + max_demand)
            nearest_customer = torch.argmin(torch.abs(distance_matrix[i, feasible_customers]), dim=1)
            # If there are feasible customers, assign a positive heuristic value
            if torch.any(feasible_customers):
                heuristics_matrix[i, nearest_customer] = distance_matrix[i, nearest_customer]
    
    return heuristics_matrix
```
