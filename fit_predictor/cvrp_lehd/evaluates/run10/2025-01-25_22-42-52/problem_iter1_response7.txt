```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the sum of distances from the depot to each customer
    depot_distances = distance_matrix[0, 1:]
    
    # Calculate the sum of distances from each customer to the last customer
    last_customer_distances = distance_matrix[:, -1][1:]
    
    # Calculate the sum of demands for each customer
    total_demand = torch.sum(demands[1:])
    
    # Calculate the heuristic value based on the sum of distances and total demand
    heuristic_value = (depot_distances + last_customer_distances) * (1 / total_demand)
    
    # Generate a matrix of the heuristic values for all edges
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each non-zero edge, assign the calculated heuristic value
    heuristics_matrix[distance_matrix != 0] = heuristic_value
    
    return heuristics_matrix
```
