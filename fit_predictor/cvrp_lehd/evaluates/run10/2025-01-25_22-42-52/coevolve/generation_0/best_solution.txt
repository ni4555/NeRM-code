Fitness: 21.410755157470703

Description:
Assisting in solving Capacitated Vehicle Routing Problem (CVRP) with some prior heuristics. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the difference in demand between consecutive customers
    demand_diff = (demands[1:] - demands[:-1]).abs()
    
    # Calculate the negative sum of the demand differences as a heuristic penalty
    penalty = -torch.sum(demand_diff)
    
    # Generate a matrix of 1s for edges where the distance is non-zero
    non_zero_edges = distance_matrix != 0
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each non-zero edge, assign a heuristic value based on the penalty
    heuristics_matrix[non_zero_edges] = penalty
    
    return heuristics_matrix