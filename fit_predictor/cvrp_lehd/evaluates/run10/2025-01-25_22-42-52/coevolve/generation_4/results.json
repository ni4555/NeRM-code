{
  "generation": 4,
  "description": "Innovative approaches to CVRP resolution are achieved through the fusion of state-of-the-art heuristic algorithms and sophisticated routing methodologies. This solution leverages advanced dynamic and adaptive algorithms to ensure optimal coverage and adhere to stringent capacity limits. The core of the strategy involves incorporating cutting-edge evolutionary algorithms, coupled with simulation-based optimization for deep exploration of complex solution spaces and precise navigation of neighborhood structures. A pivotal feature is the integration of adaptive genetic algorithms with dynamic mutation and crossover mechanisms, enhanced by an adaptive simulated annealing process for robust exploration of diverse solution landscapes. Additionally, intelligent capacity management and multi-objective optimization techniques are employed to strike a strategic equilibrium between cost minimization and service quality enhancement.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands to the range [0, 1]\n    demands_normalized = demands / demands.sum()\n    \n    # Calculate the difference in demand between each customer and the average demand\n    demand_diff = demands_normalized - demands_normalized.mean()\n    \n    # Use the difference in demand as a heuristic\n    heuristics = demand_diff * distance_matrix\n    \n    # Ensure the heuristic values are negative for undesirable edges and positive for promising ones\n    heuristics[distance_matrix == 0] = 0  # Set the diagonal to zero, as the depot should not be included in the solution\n    heuristics[heuristics < 0] = 0  # Set negative values to zero\n    \n    return heuristics",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_1.txt",
      "code_file": "coevolve\\generation_4\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / total_capacity\n    \n    # Compute the heuristic values as the product of the distance and the normalized demand\n    # This encourages visiting nodes with higher demand (normalized demand) at shorter distances\n    heuristics = distance_matrix * normalized_demands\n    \n    # We add a small constant to avoid division by zero when taking the reciprocal\n    epsilon = 1e-8\n    heuristics = heuristics / (heuristics + epsilon)\n    \n    # Apply a penalty to undesirable edges by setting their heuristics to a negative value\n    # For example, we can use a very large negative number to represent an edge that should not be taken\n    penalty = -1e9\n    heuristics[distance_matrix == 0] = penalty  # Avoid division by zero with depot edges\n    \n    return heuristics",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_2.txt",
      "code_file": "coevolve\\generation_4\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the demand ratio for each customer\n    demand_ratio = demands / demands.sum()\n    \n    # Calculate the cost of serving each customer (negative for better, positive for worse)\n    cost_matrix = -distance_matrix\n    \n    # Use the demand ratio to weight the cost matrix\n    weighted_cost_matrix = cost_matrix * demand_ratio\n    \n    # Normalize by the maximum demand ratio to ensure all values are between 0 and 1\n    normalized_weighted_cost_matrix = weighted_cost_matrix / (demand_ratio.max().item() + 1e-6)\n    \n    # Ensure that the heuristics matrix is not dominated by the largest value\n    heuristics_matrix = normalized_weighted_cost_matrix - (normalized_weighted_cost_matrix.max().item() + 1e-6)\n    \n    return heuristics_matrix",
      "fitness": 21.7178897857666,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_6.txt",
      "code_file": "coevolve\\generation_4\\code_6.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    \n    # Assuming demand is already normalized to be within the vehicle capacity.\n    vehicle_capacity = demands.sum()\n    \n    # Initialize a heuristics matrix with zeros.\n    heuristics_matrix = torch.zeros((n, n), dtype=torch.float32)\n    \n    # Calculate the score for each edge.\n    for i in range(n):\n        for j in range(n):\n            # If i is the depot (0), ignore the first row\n            if i == 0:\n                continue\n            \n            # Calculate the current edge score\n            score = 0\n            \n            # Check if there's a demand for this customer and add a score if true\n            if demands[j] > 0:\n                score += 1  # Assuming 1 is a positive score for promising edges\n            \n            # Apply a penalty for longer distances\n            # This is an arbitrary choice of 10 as the penalty, but it can be tuned\n            if j > 0:  # Avoiding the depot node (0) as it has no distance\n                score -= distance_matrix[i, j] * 10  # 10 is the penalty factor for distance\n            \n            # Store the score in the heuristics matrix\n            heuristics_matrix[i, j] = score\n            \n    return heuristics_matrix",
      "fitness": 21.953683853149414,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_4.txt",
      "code_file": "coevolve\\generation_4\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the distance matrix\n    max_distance = distance_matrix.max()\n    min_distance = distance_matrix.min()\n    normalized_distance_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)\n    \n    # Calculate the sum of demands along the diagonal\n    diagonal_demand_sum = demands.sum()\n    \n    # Create a tensor of all ones for the same shape as the demands vector\n    ones = torch.ones_like(demands)\n    \n    # Calculate the heuristic value for each edge\n    heuristic_matrix = -torch.abs(normalized_distance_matrix - demands.unsqueeze(0) - demands.unsqueeze(1)) - diagonal_demand_sum * ones\n    \n    return heuristic_matrix",
      "fitness": 22.86265754699707,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_5.txt",
      "code_file": "coevolve\\generation_4\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Assuming demands are normalized by the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Calculate the normalized distance matrix\n    normalized_distance_matrix = distance_matrix / total_capacity\n    \n    # Calculate the heuristic value as the negative of the normalized distance plus demand\n    # Negative values for undesirable edges, positive values for promising ones\n    heuristics = -normalized_distance_matrix + demands\n    \n    return heuristics",
      "fitness": 22.90056610107422,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_11.txt",
      "code_file": "coevolve\\generation_4\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    # Calculate the cumulative sum of demands to create a demand-based heuristic\n    cumulative_demand = torch.cumsum(demands, dim=0)\n    # Normalize the cumulative demand to create a demand-based heuristic\n    demand_heuristic = cumulative_demand / cumulative_demand[-1]\n    # Calculate the distance-based heuristic\n    distance_heuristic = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero\n    # Combine the two heuristics, giving more weight to demand-based heuristic\n    combined_heuristic = demand_heuristic * 0.5 + distance_heuristic * 0.5\n    return combined_heuristic",
      "fitness": 23.188444137573242,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_3.txt",
      "code_file": "coevolve\\generation_4\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity (sum of customer demands)\n    total_capacity = demands.sum().item()\n    \n    # Normalize customer demands by the total vehicle capacity\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the \"promise\" of including each edge in a solution\n    # A simple heuristic could be the product of the distance and the normalized demand\n    promise_matrix = distance_matrix * normalized_demands.unsqueeze(1)\n    \n    # We want negative values for undesirable edges and positive values for promising ones.\n    # To ensure this, we add a large positive number to the undesirable edges.\n    # In this example, we consider edges that are not from the depot to be undesirable.\n    undesirable_mask = (distance_matrix != 0) & (distance_matrix != distance_matrix[:, 0][:, None])\n    promise_matrix[undesirable_mask] += torch.finfo(torch.float32).max\n    \n    return promise_matrix",
      "fitness": 110.7269058227539,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_4\\stdout_10.txt",
      "code_file": "coevolve\\generation_4\\code_10.py"
    }
  ]
}