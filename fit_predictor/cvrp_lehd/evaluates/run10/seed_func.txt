import torch
import torch

def heuristics_v1(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the difference in demand between consecutive customers
    demand_diff = (demands[1:] - demands[:-1]).abs()
    
    # Calculate the negative sum of the demand differences as a heuristic penalty
    penalty = -torch.sum(demand_diff)
    
    # Generate a matrix of 1s for edges where the distance is non-zero
    non_zero_edges = distance_matrix != 0
    
    # Create a matrix to store the heuristics
    heuristics_matrix = torch.zeros_like(distance_matrix)
    
    # For each non-zero edge, assign a heuristic value based on the penalty
    heuristics_matrix[non_zero_edges] = penalty
    
    return heuristics_matrix