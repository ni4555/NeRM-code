```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch
    num_nodes = distance_matrix.shape[0]
    # Initialize the heuristics matrix with negative values
    heuristics = -torch.ones_like(distance_matrix)
    # Get the cumulative sum of demands
    demand_cumsum = torch.cumsum(demands, dim=0)
    # Demand-driven selection: prioritize high-demand nodes
    high_demand_mask = demands > 0.1 * demands.max()
    # Local neighborhood exploration: consider the nearest feasible nodes
    for i in range(num_nodes):
        if high_demand_mask[i]:
            # Find the nearest node that can be added without exceeding capacity
            for j in range(num_nodes):
                if j != i and (demand_cumsum[i] - demands[j]) <= demands[i]:
                    distance = distance_matrix[i, j]
                    # Update heuristics if the edge is shorter than the current
                    if distance > 0 and distance < heuristics[i, j]:
                        heuristics[i, j] = distance
    return heuristics
```
