```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch
    # Calculate the cumulative sum of demands to determine the demand threshold for each node
    demand_cumsum = torch.cumsum(demands, dim=0)
    # Initialize the heuristics matrix with negative values
    heuristics = -torch.ones_like(distance_matrix)
    # Calculate the total demand
    total_demand = demands.sum()
    # Iterate over all nodes as potential starting points
    for start_node in range(distance_matrix.shape[0]):
        # Calculate the remaining capacity for the vehicle starting at the current node
        remaining_capacity = total_demand - demands[start_node]
        # Calculate the cumulative demand for each edge from the start node
        cumulative_demand = torch.cumsum(demands, dim=0)
        # Calculate the feasible edges based on the remaining capacity
        feasible_edges = (distance_matrix[start_node, :] < remaining_capacity)
        # Update the heuristics for feasible edges
        heuristics[start_node, feasible_edges] = 1 - distance_matrix[start_node, feasible_edges]
        # If the remaining capacity is zero, return to the depot
        if remaining_capacity <= 0:
            heuristics[start_node, 0] = 1 - distance_matrix[start_node, 0]
    return heuristics
```
