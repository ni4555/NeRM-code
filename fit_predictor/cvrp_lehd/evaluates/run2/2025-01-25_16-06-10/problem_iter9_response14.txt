```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = -torch.ones_like(distance_matrix)
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:]  # Exclude the depot node from capacity calculation
    
    # Vectorized implementation to balance demands and break symmetry
    for start_node in range(1, n_nodes):
        feasible_nodes = (demand_cumsum[start_node:] <= remaining_capacity[start_node]).nonzero(as_tuple=False).squeeze()
        feasible_edges = torch.cat((torch.arange(start_node), feasible_nodes), dim=0)
        distances = distance_matrix[feasible_edges[:, 0], feasible_edges[:, 1]]
        heuristics[feasible_edges[:, 0], feasible_edges[:, 1]] = distances
        remaining_capacity[start_node:] -= demand_cumsum[feasible_edges[:, 1]] - demand_cumsum[start_node]
        remaining_capacity[start_node] -= (demand_cumsum[feasible_edges[:, 1]] - demand_cumsum[start_node]).max()
        # Update the heuristic for the return to the depot
        heuristics[feasible_edges[:, 0], 0] = distances.min()
        # Vectorized check for capacity exhaustion
        capacity_exhausted_mask = (remaining_capacity <= 0).nonzero(as_tuple=False).squeeze()
        if capacity_exhausted_mask.numel() > 0:
            break
    
    # Exploit symmetry and normalize by total distance to depot
    total_distance_to_depot = torch.sum(distance_matrix[:, 0])
    heuristics = heuristics + heuristics.t()
    heuristics = heuristics / total_distance_to_depot
    return heuristics
```
