```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    # Initialize the heuristics matrix with negative values
    heuristics = -torch.ones_like(distance_matrix)
    # Create a vector of all node indices except the depot
    node_indices = torch.arange(1, n_nodes)
    # Calculate the cumulative sum of demands for each node
    demand_cumsum = torch.cumsum(demands, dim=0)
    # Calculate the cumulative sum of demands for each pair of nodes
    cumulative_demand = torch.matmul(demand_cumsum, torch.ones(n_nodes, 1)) - demand_cumsum
    # Calculate the cumulative sum of demands for the entire route
    total_demand_cumsum = demand_cumsum + demands

    for start_node in node_indices:
        # Find the next node that can be visited without exceeding capacity
        next_node = node_indices[torch.where(cumulative_demand[start_node] <= demands[start_node])[0]]
        for destination_node in next_node:
            # Calculate the heuristics value for the edge
            heuristics[start_node, destination_node] = 1 - distance_matrix[start_node, destination_node]
            # Update the cumulative demand
            cumulative_demand[start_node, destination_node] = total_demand_cumsum[destination_node] - demands[destination_node]
            # Mark the destination node as visited
            heuristics[destination_node, start_node] = heuristics[start_node, destination_node]
            break  # Only visit the next node that can be visited without exceeding capacity

    return heuristics
```
