```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An improved heuristic for the CVRP that balances distance penalties and incorporates demand-awareness."""
    # Normalize the distance matrix to ensure the scale of distance and demand are comparable
    normalized_distance_matrix = distance_matrix / torch.max(distance_matrix)
    
    # Calculate the absolute difference in demand between each node and the depot
    demand_diff = torch.abs(demands - demands[0])
    
    # Introduce a demand-awareness factor that penalizes edges with higher demand difference
    demand_penalty = demand_diff * 2
    
    # Combine distance and demand penalty into a single heuristic value
    heuristic_values = -normalized_distance_matrix + demand_penalty
    
    # Normalize the heuristic values to be between 0 and 1
    heuristic_values = (heuristic_values - heuristic_values.min()) / (heuristic_values.max() - heuristic_values.min())
    
    return heuristic_values
```
