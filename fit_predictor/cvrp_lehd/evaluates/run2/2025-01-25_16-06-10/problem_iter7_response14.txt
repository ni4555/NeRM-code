```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = -torch.ones_like(distance_matrix)
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:]  # Exclude the depot node from capacity calculation

    # Vectorized approach to calculate the total demand and check capacity constraints
    total_demand = demand_cumsum[:, None] - demand_cumsum
    capacity_check = total_demand <= remaining_capacity

    # Use the symmetry of the distance matrix to reduce computations
    distance_matrix = distance_matrix + distance_matrix.t()

    # Assign positive values to promising edges and negative values to undesirable ones
    heuristics[capacity_check] = distance_matrix[capacity_check]
    heuristics[~capacity_check] = -torch.inf

    # Handle the return to the depot for nodes that exceed capacity
    for start_node in range(1, n_nodes):
        if remaining_capacity[start_node] <= 0:
            heuristics[start_node, 0] = distance_matrix[start_node, 0]

    return heuristics
```
