```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:]  # Exclude the depot node from capacity calculation

    # Calculate the cumulative sum of demands minus the capacity of the depot node
    cumulative_demand = demand_cumsum - demands[0]

    # Loop over each node except the depot node
    for current_node in range(1, n_nodes):
        # Loop over each possible destination node
        for destination_node in range(current_node + 1, n_nodes):
            # Calculate the total demand between the current and destination nodes
            total_demand = cumulative_demand[destination_node] - cumulative_demand[current_node]
            # Check if the destination node can be added without exceeding the vehicle capacity
            if total_demand <= remaining_capacity[current_node]:
                # Calculate the heuristic based on the distance and the difference in demand
                heuristics[current_node, destination_node] = distance_matrix[current_node, destination_node]
                # Update the remaining capacity for the current node
                remaining_capacity[current_node] -= total_demand
                # Break if the capacity for the current node is exhausted
                if remaining_capacity[current_node] <= 0:
                    break
        else:
            # If the loop wasn't broken, set the heuristic for returning to the depot
            heuristics[current_node, 0] = distance_matrix[current_node, 0]

    # Make sure the heuristics matrix is symmetric
    heuristics = (heuristics + heuristics.t()) / 2

    return heuristics
```
