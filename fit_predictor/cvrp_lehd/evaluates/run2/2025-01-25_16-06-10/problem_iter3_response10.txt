```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch
    
    # Calculate the sum of distances for each edge, normalized by the total vehicle capacity
    distance_sum = distance_matrix.sum(dim=0) / demands.sum()
    
    # Calculate the sum of demands for each edge, normalized by the total vehicle capacity
    demand_sum = (distance_matrix * demands).sum(dim=0) / demands.sum()
    
    # Calculate the potential heuristic value for each edge
    # The heuristic is a balance between the distance and the demand per unit of capacity
    heuristic_values = distance_sum - demand_sum
    
    # Apply a small constant to avoid zero heuristic values
    epsilon = 1e-6
    heuristic_values = torch.clamp(heuristic_values, min=epsilon)
    
    return heuristic_values
```
