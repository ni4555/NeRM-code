```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = torch.zeros_like(distance_matrix)
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:]  # Exclude the depot node from capacity calculation
    total_distance_to_depot = torch.sum(distance_matrix[:, 0])
    
    # Normalize demands and distances to the depot
    normalized_demands = demands / demands.sum()
    normalized_distances = distance_matrix[:, 0] / total_distance_to_depot
    
    # Vectorized loop for all non-diagonal edges
    for start_node in range(1, n_nodes):
        for destination_node in range(start_node + 1, n_nodes):
            if remaining_capacity[start_node] > 0:
                total_demand = demand_cumsum[destination_node] - demand_cumsum[start_node]
                if total_demand <= remaining_capacity[start_node]:
                    distance = distance_matrix[start_node, destination_node]
                    heuristics[start_node, destination_node] = distance
                    remaining_capacity[start_node] -= total_demand
                    # Update the heuristic for the return to the depot
                    heuristics[start_node, 0] = distance_matrix[start_node, 0]
                    # Update the symmetric edge
                    heuristics[destination_node, start_node] = distance
    # Exploit symmetry
    heuristics = heuristics + heuristics.t() - heuristics.diag()
    # Incorporate normalized demand and distance
    heuristics = heuristics * (normalized_demands[None, :] * normalized_distances[:, None])
    return heuristics
```
