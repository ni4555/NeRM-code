```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    demand_cumsum = torch.cumsum(demands, dim=0)
    return_values = distance_matrix[:, 0]
    
    heuristics = torch.zeros_like(distance_matrix)
    
    for i in range(distance_matrix.shape[0]):
        for j in range(1, distance_matrix.shape[1]):
            if demands[i] + demands[j] > total_demand:
                heuristics[i, j] = -float('inf')
            else:
                heuristic_value = distance_matrix[i, j] - demand_cumsum[i]
                heuristics[i, j] = heuristic_value
                return_value = distance_matrix[j, 0] - (demand_cumsum[j] - demand_cumsum[i])
                heuristics[i, j] = max(heuristics[i, j], return_value)
    
    # Add the return-to-depot heuristic values
    heuristics[:, 0] = return_values
    
    return heuristics
```
