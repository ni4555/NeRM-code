```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = -torch.ones_like(distance_matrix)
    total_capacity = demands.sum()
    demand_cumsum = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative demand for each node to every other node
    cumulative_demand_diff = demand_cumsum[:, None] - demand_cumsum
    
    # Create a mask where the edge is feasible (demand difference is less than or equal to total capacity)
    feasible_mask = cumulative_demand_diff <= total_capacity
    
    # Calculate the feasible cost by multiplying the distance matrix with the mask
    feasible_cost = distance_matrix * feasible_mask
    
    # Average the feasible cost for each edge
    heuristics = feasible_cost.mean(dim=0)
    
    # Balance the heuristics by adding the average cost in the reverse direction
    heuristics = heuristics + feasible_cost.mean(dim=1)
    
    # Ensure that the heuristics are non-negative
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
