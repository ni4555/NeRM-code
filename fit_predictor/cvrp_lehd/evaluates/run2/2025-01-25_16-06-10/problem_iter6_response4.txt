```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    # Normalize the distance matrix to ensure the scale of distance and demand are comparable
    normalized_distance_matrix = distance_matrix / torch.max(distance_matrix)
    
    # Calculate the difference in demand between each node and the depot
    demand_diff = demands - demands[0]
    
    # Normalize the demand difference to the total demand
    total_demand = torch.sum(demands)
    normalized_demand_diff = demand_diff / total_demand
    
    # Calculate the imbalance factor as the difference between each node's demand and the average demand
    average_demand = total_demand / n_nodes
    imbalance_factor = (demands - average_demand).abs()
    
    # Use a smooth function to avoid sharp changes at the boundaries of the imbalance factor
    smooth_imbalance_factor = torch.sin(imbalance_factor * torch.pi / 2)
    
    # Calculate the cumulative demand for each node
    demand_cumsum = torch.cumsum(demands, dim=0)
    
    # Initialize the heuristics matrix with negative values
    heuristics = -torch.ones_like(distance_matrix)
    
    # Vectorized implementation of the heuristic calculation
    for start_node in range(1, n_nodes):
        remaining_capacity = demands[start_node]
        for destination_node in range(start_node + 1, n_nodes):
            total_demand = demand_cumsum[destination_node]
            if total_demand <= remaining_capacity:
                distance = normalized_distance_matrix[start_node, destination_node]
                heuristics[start_node, destination_node] = -distance + normalized_demand_diff[start_node]
                remaining_capacity -= total_demand
    
    # Update heuristics for return to depot
    heuristics[1:, 0] = heuristics[1:, 0].clamp(min=0)
    
    # Add a penalty for exceeding capacity by adding negative values to the heuristics
    for start_node in range(1, n_nodes):
        for destination_node in range(start_node + 1, n_nodes):
            if demands[start_node] + demands[destination_node] > demands[0]:
                heuristics[start_node, destination_node] -= float('inf')
    
    return heuristics
```
