```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    depot = 0
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:]
    edge_scores = -torch.ones_like(distance_matrix)

    # Iterate over all possible starting nodes
    for start_node in range(1, n_nodes):
        for destination_node in range(start_node + 1, n_nodes):
            # Calculate the demand if the vehicle went to destination_node from start_node
            total_demand = demand_cumsum[destination_node] - demand_cumsum[start_node]
            # If the demand fits within the vehicle's capacity
            if total_demand <= remaining_capacity[start_node]:
                edge_scores[start_node, destination_node] = distance_matrix[start_node, destination_node]

    # Update edge scores to account for return to the depot
    for start_node in range(1, n_nodes):
        edge_scores[start_node, depot] = edge_scores[start_node, :].sum()
    
    # Normalize edge scores by total distance to the depot
    total_distance_to_depot = distance_matrix[:, depot].sum()
    edge_scores = edge_scores / (total_distance_to_depot + 1e-8)

    return edge_scores
```
