```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = -torch.ones_like(distance_matrix)
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:]  # Exclude the depot node from capacity calculation
    
    # Vectorized approach to calculate total demand between nodes
    total_demand = demand_cumsum[:, None] - demand_cumsum[None, :]
    total_demand[total_demand < 0] = 0
    
    # Vectorized approach to check capacity constraint
    capacity_condition = total_demand <= remaining_capacity[:, None]
    
    # Calculate the distance between nodes
    distances = torch.abs(distance_matrix)
    
    # Vectorized assignment of heuristics
    heuristics = torch.where(capacity_condition, distances, heuristics)
    
    # Update the heuristic for the return to the depot
    heuristics = heuristics + heuristics.t()
    
    # Normalize by the total distance to the depot
    total_distance_to_depot = torch.sum(distance_matrix[:, 0])
    heuristics = heuristics / total_distance_to_depot
    
    return heuristics
```
