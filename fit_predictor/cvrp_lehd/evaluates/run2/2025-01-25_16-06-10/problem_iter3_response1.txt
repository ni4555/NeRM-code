```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    heuristic_matrix = torch.zeros_like(distance_matrix)

    # Calculate distance-weighted demand for each edge
    distance_weighted_demand = distance_matrix * demands

    # Normalize by total capacity
    distance_weighted_demand /= total_capacity

    # Incorporate the inverse of the distance to encourage close nodes
    heuristic_matrix = distance_weighted_demand * (1 / distance_matrix)

    # Encourage starting at the depot with no cost
    heuristic_matrix[0, 1:] = 0
    heuristic_matrix[1:, 0] = 0

    return heuristic_matrix
```
