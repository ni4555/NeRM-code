```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = -torch.ones_like(distance_matrix)
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:] - demands[0]
    
    # Calculate the cumulative capacity remaining from the depot to each node
    remaining_capacity = torch.cat([torch.tensor(0.), remaining_capacity])

    # Vectorized mask to identify feasible edges based on capacity constraint
    feasible_mask = (demand_cumsum <= remaining_capacity.unsqueeze(0)).all(dim=1)

    # Update heuristics for feasible edges
    heuristics[feasible_mask] = distance_matrix[feasible_mask]

    # Normalize the distance matrix to ensure the scale of distance and demand are comparable
    normalized_distance_matrix = distance_matrix / torch.max(distance_matrix)
    heuristics *= normalized_distance_matrix

    return heuristics
```
