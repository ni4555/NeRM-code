```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand excluding the depot
    total_demand = demands.sum()
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Iterate through all possible edges
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if i == j:
                continue
            
            # Calculate the current total demand if this edge is taken
            current_demand = demands[i] + demands[j]
            
            # If the current demand is less than the vehicle capacity, consider it
            if current_demand <= total_demand:
                # Calculate the heuristic value
                heuristic_value = -distance_matrix[i, j] + distance_matrix[i, 0] + distance_matrix[0, j]
                heuristic_matrix[i, j] = heuristic_value
            else:
                # If the current demand exceeds the capacity, make the edge undesirable
                heuristic_matrix[i, j] = -float('inf')
    
    return heuristic_matrix
```
