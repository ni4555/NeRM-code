```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = -torch.ones_like(distance_matrix)
    # Calculate the cumulative sum of demands from the start node to the current node
    demand_cumsum = torch.cumsum(demands, dim=0)
    # The demand for each node after it has been visited
    remaining_capacity = demands[1:]  # Exclude the depot node
    
    # Use broadcasting to calculate the total demand for each edge
    total_demand = demand_cumsum.unsqueeze(1) - demand_cumsum.unsqueeze(0)
    
    # Use where to apply the heuristic only for feasible edges
    feasible_edges = (total_demand <= remaining_capacity.unsqueeze(0))
    heuristics[feasible_edges] = distance_matrix[feasible_edges]
    
    # Normalize by the total distance to the depot
    total_distance_to_depot = torch.sum(distance_matrix[:, 0])
    heuristics = heuristics / total_distance_to_depot
    
    # Since the problem is symmetric, we don't need to mirror the heuristics matrix
    return heuristics
```
