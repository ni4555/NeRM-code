```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = -torch.ones_like(distance_matrix)
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:]  # Exclude the depot node from capacity calculation

    for start_node in range(1, n_nodes):
        visited_mask = torch.zeros(n_nodes, dtype=torch.bool)
        visited_mask[start_node] = True
        total_demand = demands[start_node]
        remaining_capacity[start_node] -= total_demand
        visited_mask[start_node] = False

        for destination_node in range(start_node + 1, n_nodes):
            if not visited_mask[destination_node] and demands[destination_node] <= remaining_capacity[start_node]:
                total_demand += demands[destination_node]
                remaining_capacity[start_node] -= demands[destination_node]
                visited_mask[destination_node] = True
                distance = distance_matrix[start_node, destination_node]
                heuristics[start_node, destination_node] = distance
                heuristics[destination_node, start_node] = distance  # Exploit symmetry
                if remaining_capacity[start_node] <= 0:
                    break  # No need to continue to other destination nodes

        if remaining_capacity[start_node] <= 0:
            distance_to_depot = distance_matrix[start_node, 0]
            heuristics[start_node, 0] = distance_to_depot
            heuristics[0, start_node] = distance_to_depot  # Exploit symmetry
        else:
            for destination_node in range(1, n_nodes):
                if not visited_mask[destination_node]:
                    distance = distance_matrix[start_node, destination_node]
                    heuristics[start_node, destination_node] = distance
                    heuristics[destination_node, start_node] = distance  # Exploit symmetry
                    break  # Return to the depot is the only feasible option
```
