```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the negative distance heuristic as a baseline
    neg_distance_heuristic = -distance_matrix
    
    # Calculate the demand heuristic
    demand_heuristic = demands - demands.mean()
    
    # Normalize demand heuristic to have zero mean
    demand_heuristic = (demand_heuristic - demand_heuristic.mean()) / demand_heuristic.std()
    
    # Combine the heuristics using a weighted sum
    # Here, we are balancing exploration (demand) and exploitation (distance)
    alpha = 0.5
    combined_heuristic = alpha * neg_distance_heuristic + (1 - alpha) * demand_heuristic
    
    # Normalize combined heuristic to have zero mean and unit variance
    combined_heuristic = (combined_heuristic - combined_heuristic.mean()) / combined_heuristic.std()
    
    return combined_heuristic
```
