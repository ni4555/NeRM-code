```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    # Initialize heuristics matrix with high negative values
    heuristics = -torch.ones_like(distance_matrix)
    total_demand = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:]
    
    # Normalize the distance matrix
    normalized_distance = distance_matrix / torch.max(distance_matrix)
    
    for start_node in range(1, n_nodes):
        for destination_node in range(start_node + 1, n_nodes):
            # Calculate the potential demand of the route
            route_demand = total_demand[destination_node] - total_demand[start_node]
            # Check if the route is feasible within the vehicle capacity
            if route_demand <= remaining_capacity[start_node]:
                # Calculate the potential heuristic value
                distance = normalized_distance[start_node, destination_node]
                heuristics[start_node, destination_node] = distance
                # Update the remaining capacity
                remaining_capacity[start_node] -= route_demand
                # Update the heuristic for the return to the depot
                heuristics[start_node, 0] = distance
                # Break if no capacity left for further nodes
                if remaining_capacity[start_node] <= 0:
                    break
    
    # Exploit symmetry by adding the transpose of the heuristics matrix
    heuristics = heuristics + heuristics.t()
    
    # Normalize heuristics by the maximum heuristic value to balance criteria
    max_heuristic = torch.max(torch.abs(heuristics))
    heuristics = heuristics / max_heuristic
    
    return heuristics
```
