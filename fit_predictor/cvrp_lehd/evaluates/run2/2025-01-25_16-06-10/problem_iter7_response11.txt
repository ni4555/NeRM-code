```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = torch.full(distance_matrix.shape, float('-inf'))
    cumulative_demand = torch.cumsum(demands, dim=0)
    available_capacity = demands[1:] - cumulative_demand[:-1]

    for i in range(1, n_nodes):
        for j in range(i + 1, n_nodes):
            total_demand = cumulative_demand[j] - cumulative_demand[i]
            if total_demand <= available_capacity[i]:
                distance = distance_matrix[i, j]
                heuristics[i, j] = distance
                available_capacity[i] -= total_demand
                if available_capacity[i] <= 0:
                    break  # No more capacity for this vehicle

    heuristics += torch.max(heuristics, dim=1, keepdim=True)[0]
    heuristics[heuristics < 0] = float('-inf')
    return heuristics
```
