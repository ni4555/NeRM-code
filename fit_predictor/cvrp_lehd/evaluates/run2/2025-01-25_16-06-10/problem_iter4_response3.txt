```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the sum of the demands of all nodes
    total_demand = demands.sum()
    
    # Calculate the negative distance heuristic
    negative_distance_heuristic = -distance_matrix
    
    # Calculate the demand heuristic
    demand_heuristic = demands[:, None] * demands
    
    # Calculate the capacity heuristic, where a vehicle should not be loaded beyond its capacity
    # We assume a vehicle has a capacity of 1 for simplicity
    capacity_heuristic = torch.clamp(demands, max=1) * torch.clamp(demands, max=1)
    
    # Calculate the cumulative sum of demands to use as a tiebreaker
    demand_cumsum = torch.cumsum(demands, dim=0)
    
    # Incorporate the tiebreaker by adding the cumulative demand to the demand heuristic
    tiebreaker_heuristic = demand_cumsum[:, None] - demand_cumsum
    
    # Calculate exploration and exploitation factors
    exploration_factor = 0.5 * (torch.rand_like(distance_matrix) - 0.5)
    exploitation_factor = 0.5 * (torch.ones_like(distance_matrix) - exploration_factor)
    
    # Combine all heuristics
    combined_heuristic = negative_distance_heuristic + demand_heuristic + capacity_heuristic + tiebreaker_heuristic + exploration_factor + exploitation_factor
    
    # Normalize the heuristics to ensure they are in the same scale
    # We also add a small constant to avoid division by zero
    normalized_combined_heuristic = combined_heuristic / (combined_heuristic.sum(1, keepdim=True) + 1e-8)
    
    return normalized_combined_heuristic
```
