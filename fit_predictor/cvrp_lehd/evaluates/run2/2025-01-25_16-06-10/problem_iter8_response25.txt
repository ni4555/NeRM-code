```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    total_demand = demands.sum()
    negative_distance_heuristic = -distance_matrix
    demand_heuristic = demands[:, None] * demands
    capacity_heuristic = torch.clamp(demands, max=1) * torch.clamp(demands, max=1)
    demand_cumsum = torch.cumsum(demands, dim=0)
    tiebreaker_heuristic = demand_cumsum[:, None] - demand_cumsum
    
    # Create a mask for the demand heuristic that returns -infinity for invalid routes
    mask = demands <= 1
    capacity_mask = torch.clamp(mask, min=1)
    
    # Apply the mask to the heuristics
    demand_heuristic[~mask] = -torch.inf
    capacity_heuristic[~capacity_mask] = -torch.inf
    tiebreaker_heuristic[~mask] = -torch.inf
    
    # Combine all heuristics
    combined_heuristic = (
        negative_distance_heuristic +
        demand_heuristic +
        capacity_heuristic +
        tiebreaker_heuristic
    )
    
    # Normalize the heuristics to ensure consistent scale
    max_combined_heuristic = combined_heuristic.max(dim=1, keepdim=True)[0]
    min_combined_heuristic = combined_heuristic.min(dim=1, keepdim=True)[0]
    normalized_combined_heuristic = (
        combined_heuristic - min_combined_heuristic +
        1e-8  # Add a small constant to avoid division by zero
    ) / (max_combined_heuristic - min_combined_heuristic + 1e-8)
    
    return normalized_combined_heuristic
```
