```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = -torch.ones_like(distance_matrix)
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:]  # Exclude the depot node from capacity calculation
    
    # Vectorized approach to calculate the distance and capacity constraints
    distance_matrix_cumsum = distance_matrix.cumsum(dim=1)
    feasible_edges = (distance_matrix + distance_matrix_cumsum.t()) <= remaining_capacity.unsqueeze(1)
    
    # Apply capacity constraints to determine feasible edges
    feasible_edges = feasible_edges & (distance_matrix_cumsum <= remaining_capacity.unsqueeze(0))
    feasible_edges[0, :] = 0  # Exclude the depot node from the first row
    feasible_edges[:, 0] = 0  # Exclude the depot node from the first column
    
    # Calculate heuristics based on feasible edges
    heuristics[feasible_edges] = distance_matrix[feasible_edges]
    
    # Normalize by total distance to depot
    total_distance_to_depot = torch.sum(distance_matrix[:, 0])
    heuristics = heuristics / total_distance_to_depot
    return heuristics
```
