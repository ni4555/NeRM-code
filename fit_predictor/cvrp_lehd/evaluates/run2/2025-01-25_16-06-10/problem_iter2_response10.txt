```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands to determine the demand threshold for each node
    demand_cumsum = torch.cumsum(demands, dim=0)
    # Calculate the total capacity
    total_capacity = demands[0].sum()
    # Normalize the distance matrix to ensure the scale of distance and demand are comparable
    normalized_distance_matrix = distance_matrix / torch.max(distance_matrix)
    # Initialize the heuristics matrix with zero values
    heuristics = torch.zeros_like(distance_matrix)
    
    # For each node as a potential starting point
    for start_node in range(distance_matrix.shape[0]):
        # Calculate the cumulative sum of demands from the start node
        cumsum_from_start = demand_cumsum[start_node:]
        # Find the nodes that can be visited before the capacity is exceeded
        feasible_end_nodes = cumsum_from_start <= total_capacity
        # Calculate the cumulative sum of feasible end nodes from the start node
        cumsum_feasible = torch.cumsum(feasible_end_nodes, dim=0)
        # For each feasible end node, update the heuristics value
        heuristics[start_node, cumsum_feasible] = -normalized_distance_matrix[start_node, cumsum_feasible]
    
    return heuristics
```
