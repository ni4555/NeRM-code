```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = torch.full_like(distance_matrix, fill_value=-float('inf'))
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:]  # Exclude the depot node from capacity calculation
    
    # Precompute the maximum total demand for each node
    max_demand = torch.max(demand_cumsum[1:] - demand_cumsum[:-1], dim=0).values
    
    # Vectorized loop to compute heuristics
    for start_node in range(1, n_nodes):
        for destination_node in range(start_node + 1, n_nodes):
            if remaining_capacity[start_node] > max_demand[destination_node]:
                distance = distance_matrix[start_node, destination_node]
                heuristics[start_node, destination_node] = distance
                remaining_capacity[start_node] -= (demand_cumsum[destination_node] - demand_cumsum[start_node])
    
    # Exploit symmetry
    heuristics = heuristics + heuristics.t()
    
    # Normalize by total distance to depot
    total_distance_to_depot = torch.sum(distance_matrix[:, 0])
    heuristics = heuristics / total_distance_to_depot
    
    # Replace negative infinities with zeros for non-promising edges
    heuristics[heuristics == -float('inf')] = 0
    
    return heuristics
```
