```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    # Initialize the heuristics matrix with negative values
    heuristics = -torch.ones_like(distance_matrix)
    # Create a vector of all node indices
    node_indices = torch.arange(n_nodes)
    # Calculate the cumulative sum of demands to determine the demand threshold for each node
    demand_cumsum = torch.cumsum(demands, dim=0)
    # Calculate the initial remaining capacity for the vehicle starting at the depot
    remaining_capacity = demands[0]
    # Use a binary mask to track which nodes have been visited
    visited_mask = torch.zeros(n_nodes, dtype=torch.bool)
    visited_mask[0] = True

    for start_node in node_indices[1:]:  # Start from node 1 to avoid revisiting the depot
        remaining_capacity = demands[start_node]
        for destination_node in node_indices[1:]:
            if not visited_mask[destination_node]:  # Check if the node has not been visited
                total_demand = demand_cumsum[destination_node]
                if total_demand <= remaining_capacity:
                    distance = distance_matrix[start_node, destination_node]
                    heuristics[start_node, destination_node] = 1 - distance
                    remaining_capacity -= total_demand
                    visited_mask[destination_node] = True
                    if remaining_capacity <= 0:
                        heuristics[start_node, 0] = 1 - distance_matrix[start_node, 0]
                        break
                else:
                    # Add a penalty for edges that cannot be included due to capacity constraints
                    heuristics[start_node, destination_node] = -distance
        if remaining_capacity <= 0:
            # If capacity is exhausted, reset for the next vehicle
            remaining_capacity = demands[0]
            visited_mask = torch.zeros(n_nodes, dtype=torch.bool)
            visited_mask[0] = True

    return heuristics
```
