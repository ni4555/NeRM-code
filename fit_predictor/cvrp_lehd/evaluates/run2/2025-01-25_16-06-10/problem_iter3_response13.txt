```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = len(distance_matrix)
    # Calculate the total capacity
    total_capacity = torch.sum(demands)
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    # Calculate the demand-to-distance ratio
    demand_to_distance = (demands / distance_matrix)
    # Incorporate the total capacity into the heuristics
    heuristics = demand_to_distance - total_capacity
    # Normalize the heuristics to ensure a balanced exploration and exploitation
    max_heuristic = torch.max(heuristics)
    min_heuristic = torch.min(heuristics)
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    return heuristics
```
