```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = -torch.ones_like(distance_matrix)
    remaining_capacity = demands[1:]  # Exclude the depot node from capacity calculation
    cumulative_demand = torch.cumsum(demands, dim=0)

    # Vectorized approach to calculate the difference in cumulative demand
    demand_diffs = cumulative_demand[:, None] - cumulative_demand[None, :]
    demand_diffs[demand_diffs < 0] = 0
    demand_diffs[demand_diffs == demands[0]] = 0  # Avoid considering the depot as a destination

    # Calculate the initial heuristic values based on capacity constraints
    valid_edges = (demand_diffs <= remaining_capacity[:, None])
    initial_heuristics = torch.where(valid_edges, distance_matrix, 0)

    # Normalize by the total distance to the depot
    total_distance_to_depot = torch.sum(distance_matrix[:, 0])
    heuristics = initial_heuristics / total_distance_to_depot

    # Exploit symmetry and add the transposed matrix
    heuristics = heuristics + heuristics.t()

    return heuristics
```
