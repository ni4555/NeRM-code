```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Normalize demands to the total vehicle capacity (assumed to be 1 for simplicity)
    normalized_d demands = demands / demands.sum()
    # Calculate the initial heuristic based on demand potential
    potential_heuristic = -demands.unsqueeze(1) * demands.unsqueeze(0)
    # Adjust potential heuristic by distance
    potential_heuristic += distance_matrix
    # Introduce a penalty for large demands per vehicle
    capacity_penalty = (demands.cumsum(0) > 1).float() * -1000
    # Combine heuristics
    final_heuristic = potential_heuristic + capacity_penalty
    return final_heuristic
```
