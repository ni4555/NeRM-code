```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    # Initialize the heuristic matrix with large negative values
    heuristics = -torch.ones_like(distance_matrix) * 1e9
    
    # Create a matrix of total demands excluding the depot
    total_demand_matrix = torch.cumsum(demands, dim=0)
    
    # Calculate the maximum remaining capacity for each node excluding the depot
    remaining_capacity = total_demand_matrix[1:] - total_demand_matrix[0]
    
    # Iterate over each edge, considering only non-depot nodes
    for start_node in range(1, n_nodes):
        for destination_node in range(start_node + 1, n_nodes):
            # Calculate the total demand between the current node and the destination
            total_demand = total_demand_matrix[destination_node] - total_demand_matrix[start_node]
            
            # Check if the edge can be added to the route without exceeding capacity
            if total_demand <= remaining_capacity[start_node]:
                # Calculate the distance cost for the edge
                distance = distance_matrix[start_node, destination_node]
                
                # Update the heuristic for the edge if it's lower than the current heuristic
                heuristics[start_node, destination_node] = distance
                heuristics[destination_node, start_node] = distance  # Exploit symmetry
                
                # Update the remaining capacity for the start node
                remaining_capacity[start_node] -= total_demand
                
                # Break if the start node has no more capacity left
                if remaining_capacity[start_node] <= 0:
                    break
    
    return heuristics
```
