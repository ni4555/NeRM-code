```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = -torch.ones_like(distance_matrix)
    demand_cumsum = torch.cumsum(demands, dim=0)
    capacity = demands.sum()
    
    for start_node in range(1, n_nodes):
        remaining_capacity = demands[start_node]
        for destination_node in range(1, n_nodes):
            total_demand = demand_cumsum[destination_node]
            if total_demand <= remaining_capacity:
                distance = distance_matrix[start_node, destination_node]
                heuristics[start_node, destination_node] = distance
                remaining_capacity -= total_demand
            if remaining_capacity <= 0:
                heuristics[start_node, 0] = distance_matrix[start_node, 0]
                break
    
    # Ensure that the heuristic matrix is not negative (as we want it to be positive)
    heuristics = torch.clamp(heuristics, min=0)
    return heuristics
```
