```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = (demands > 0).float() * (demands / demands.sum())
    
    return_distance = distance_matrix[:, 0] + distance_matrix[None, :, 0]

    heuristics = -torch.ones_like(distance_matrix)
    for start_node in range(1, n_nodes):
        for destination_node in range(start_node + 1, n_nodes):
            total_demand = demand_cumsum[destination_node] - demand_cumsum[start_node]
            if total_demand <= remaining_capacity[start_node]:
                distance = distance_matrix[start_node, destination_node]
                heuristics[start_node, destination_node] = distance
                remaining_capacity[start_node] -= total_demand

    # Exploit symmetry and cumulative sum of remaining capacities
    for i in range(1, n_nodes):
        heuristics[i, i-1] = heuristics[i-1, i]

    return heuristics
```
