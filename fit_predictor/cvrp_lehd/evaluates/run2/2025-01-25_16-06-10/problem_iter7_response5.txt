```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = torch.full_like(distance_matrix, -float('inf'))
    demand_cumsum = torch.cumsum(demands, dim=0)
    
    # Loop through each customer and calculate the heuristic
    for i in range(1, n_nodes):
        for j in range(i+1, n_nodes):
            total_demand = demand_cumsum[j] - demand_cumsum[i]
            if total_demand <= demands[i]:
                distance = distance_matrix[i, j]
                heuristics[i, j] = distance
            else:
                heuristics[i, j] = -float('inf')
                
    # Normalize the heuristics matrix based on the maximum distance
    max_distance = torch.max(torch.diag(heuristics))
    heuristics = (heuristics + max_distance) / (2 * max_distance)
    
    return heuristics
```
