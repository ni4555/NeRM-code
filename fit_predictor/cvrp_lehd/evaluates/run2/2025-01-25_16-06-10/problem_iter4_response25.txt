```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An improved heuristic for CVRP, focusing on demand contribution and capacity constraints."""
    total_capacity = demands.sum()
    demand_ratio = demands / total_capacity
    # Normalize the distance matrix to ensure the scale of distance and demand are comparable
    normalized_distance_matrix = distance_matrix / torch.max(distance_matrix)
    # Calculate the potential cost considering both distance and demand contribution
    cost = -demand_ratio * normalized_distance_matrix
    # Apply a penalty for edges where the cumulative demand exceeds the capacity
    for i in range(len(demands)):
        for j in range(len(demands)):
            if i != j:
                cumulative_demand = torch.cat([demands[:i+1], demands[i+1:][j+1:], demands[j+1:]])
                if cumulative_demand.sum() > total_capacity:
                    cost[i, j] += 1000  # This is an arbitrary large penalty
    return cost
```
