```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n_nodes = distance_matrix.shape[0]
    heuristics = -torch.ones_like(distance_matrix)
    demand_cumsum = torch.cumsum(demands, dim=0)
    remaining_capacity = demands[1:]  # Exclude the depot node from capacity calculation
    
    # Vectorized approach to calculate potential edge costs
    cumulative_differences = demand_cumsum[1:] - demand_cumsum[:-1]
    edge_costs = distance_matrix + 0.5 * cumulative_differences
    
    # Create mask for valid edges based on capacity constraints
    valid_edges = remaining_capacity[1:] > cumulative_differences[:-1]
    
    # Assign costs to valid edges
    heuristics.index_fill_(0, torch.arange(1, n_nodes), edge_costs[valid_edges])
    
    # Handle edges that might require returning to the depot
    heuristics.index_fill_(0, torch.arange(n_nodes), distance_matrix[1:, 0])
    heuristics[1:, 0] = distance_matrix[1:, 0]
    
    # Ensure the heuristic values are negative for undesirable edges
    heuristics = -heuristics
    
    return heuristics
```
