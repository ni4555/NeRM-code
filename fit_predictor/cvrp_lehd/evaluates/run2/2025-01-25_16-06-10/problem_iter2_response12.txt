```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch
    # Calculate the cumulative sum of demands to determine the demand threshold for each node
    demand_cumsum = torch.cumsum(demands, dim=0)
    # Initialize the heuristics matrix with negative values
    heuristics = -torch.ones_like(distance_matrix)
    # For each node as a potential starting point
    for start_node in range(distance_matrix.shape[0]):
        # Create a mask for feasible edges based on demand
        feasible_edges = (distance_matrix[start_node, :] < demand_cumsum[start_node])
        # Update the heuristics for feasible edges
        heuristics[start_node, feasible_edges] = 1 - distance_matrix[start_node, feasible_edges]
    return heuristics
```
