```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic considering relative scales, demand imbalance, and smooth interactions."""
    # Normalize the distance matrix to ensure the scale of distance and demand are comparable
    normalized_distance_matrix = distance_matrix / torch.max(distance_matrix)
    
    # Calculate the difference in demand between each node and the depot
    demand_diff = demands - demands[0]
    
    # Calculate the total demand to normalize the demand difference
    total_demand = torch.sum(demands)
    
    # Normalize the demand difference to the total demand
    normalized_demand_diff = demand_diff / total_demand
    
    # Calculate the imbalance factor as the difference between each node's demand and the average demand
    imbalance_factor = (demands - total_demand / len(demands)).abs()
    
    # Use a smooth function to avoid sharp changes at the boundaries of the imbalance factor
    smooth_imbalance_factor = torch.sin(imbalance_factor * torch.pi / 2)
    
    # Create a heuristic value that combines distance, normalized demand difference, and interaction effects
    heuristic_values = -normalized_distance_matrix + normalized_demand_diff.abs() + torch.sin(normalized_demand_diff) + smooth_imbalance_factor
    
    return heuristic_values
```
