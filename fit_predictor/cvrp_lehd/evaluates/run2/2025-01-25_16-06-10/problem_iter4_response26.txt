```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Normalize cumulative demand by the vehicle capacity
    normalized_demand = cumulative_demand / demands.sum()
    
    # Normalize the distance matrix to ensure the scale of distance and demand are comparable
    normalized_distance_matrix = distance_matrix / torch.max(distance_matrix)
    
    # Combine normalized demand and distance in a heuristic value
    heuristic_values = normalized_demand - normalized_distance_matrix
    
    # Cap the heuristic values to ensure negative values for undesirable edges
    heuristic_values[heuristic_values >= 0] = -torch.inf
    
    return heuristic_values
```
