```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the Manhattan distance between each pair of nodes
    manhattan_distance = torch.abs(distance_matrix - torch.transpose(distance_matrix, 0, 1))
    
    # Calculate the cumulative sum of demands from the depot
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the potential cost of each edge
    potential_cost = (cumulative_demand.unsqueeze(1) * distance_matrix).sum(dim=0)
    
    # Calculate the negative of the potential cost for the heuristic
    heuristic_values = -potential_cost
    
    # Normalize the heuristic values
    heuristic_values = (heuristic_values - heuristic_values.min()) / (heuristic_values.max() - heuristic_values.min())
    
    # Add the Manhattan distance to the heuristic values
    heuristic_values += manhattan_distance
    
    return heuristic_values
```
