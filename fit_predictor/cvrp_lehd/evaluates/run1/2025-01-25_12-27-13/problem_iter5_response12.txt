```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum().item()
    heuristics = torch.zeros_like(distance_matrix)

    # Create a mask for nodes with positive demand
    demand_mask = (demands > 0).float()

    # Calculate the distance-weighted demands
    weighted_demands = demands * distance_matrix

    # Calculate the relative weights for each edge
    relative_weights = (weighted_demands[:, None] - weighted_demands[None, :]) / (total_demand + 1e-6)

    # Apply the mask and the demand-based heuristic
    heuristics = relative_weights * demand_mask

    return heuristics
```
