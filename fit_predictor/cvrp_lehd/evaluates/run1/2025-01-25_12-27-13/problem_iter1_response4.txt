```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improve upon heuristics_v1 by considering the total demand of the path and the distance to the depot."""
    n = distance_matrix.shape[0]
    # Calculate the total demand for each path
    path_demand = torch.cumsum(demands[:, None], dim=0).squeeze()
    # Calculate the distance to the depot for each path
    distance_to_depot = torch.ones_like(distance_matrix) * distance_matrix[0, :]
    # Calculate the heuristic as the negative of the total demand and positive distance to the depot
    heuristic = -path_demand * distance_to_depot
    return heuristic
```
