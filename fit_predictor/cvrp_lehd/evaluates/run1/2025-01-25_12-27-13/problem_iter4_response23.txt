```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch

    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    demand_heuristic = normalized_demands[:, None] * normalized_demands[None, :]
    distance_heuristic = -distance_matrix

    # Incorporate the demand-aware heuristic with a higher weight
    combined_heuristic = demand_heuristic * 0.7 + distance_heuristic * 0.3

    # Apply the capacity constraint by reducing the heuristic value for edges that exceed the capacity
    for i in range(1, n):
        for j in range(1, n):
            if demands[j] > demands[i]:  # Assuming that the demand of the destination node is considered
                combined_heuristic[i][j] -= (demands[j] - demands[i])

    # Normalize the heuristic matrix to ensure it has both positive and negative values
    min_val, max_val = combined_heuristic.min(), combined_heuristic.max()
    heuristic_matrix = (combined_heuristic - min_val) / (max_val - min_val)
    return heuristic_matrix
```
