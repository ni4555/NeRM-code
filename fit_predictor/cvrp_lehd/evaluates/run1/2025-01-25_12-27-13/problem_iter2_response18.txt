```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)

    # Sort customers by their demand in descending order
    sorted_indices = torch.argsort(demands[1:], descending=True)
    demands_sorted = demands[1:][sorted_indices]

    # Initialize a vector to keep track of the demand already included in the solution
    included_demand = torch.zeros_like(demands)
    for i in range(1, n):
        included_demand[sorted_indices[i-1]] += demands_sorted[i-1]

    # Update the heuristic values
    for i in range(1, n):
        remaining_capacity = total_demand - included_demand[sorted_indices[i-1]]
        for j in range(1, n):
            if demands[j] > 0:
                edge_heuristic = demands[j] - remaining_capacity
                heuristics[sorted_indices[i-1]][j] = edge_heuristic

    return heuristics
```
