```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An improved heuristic for the CVRP that incorporates demand-aware and distance-based criteria,
    with further enhancements for balance and normalization."""
    n = distance_matrix.shape[0]
    # Normalize demands by total demand to account for vehicle capacity
    normalized_demands = demands / demands.sum()
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    # Calculate the distance-based heuristic: shorter distances are more promising
    distance_heuristic = -distance_matrix
    # Calculate the demand-based heuristic: edges with high demand and low distance are more promising
    demand_heuristic = (normalized_demands[:, None] * normalized_demands[None, :]) * distance_heuristic
    # Calculate the capacity-based heuristic: edges with lower load on capacity are more promising
    capacity_heuristic = (1 - normalized_demands.sum(axis=1, keepdim=True)) * distance_heuristic
    # Combine heuristics with a weighted sum, balancing demand awareness and capacity considerations
    combined_heuristic = 0.5 * demand_heuristic + 0.5 * capacity_heuristic
    # Normalize the heuristic matrix to ensure it has both positive and negative values
    min_val, max_val = combined_heuristic.min(), combined_heuristic.max()
    heuristic_matrix = (combined_heuristic - min_val) / (max_val - min_val)
    return heuristic_matrix
```
