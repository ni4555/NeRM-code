```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch
    import numpy as np

    n = distance_matrix.shape[0]
    total_demand = demands.sum().item()
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the distance-based penalty
    distance_penalty = torch.log(distance_matrix + 1)  # Adding 1 to avoid log(0)

    # Calculate the demand-based heuristic
    demand_heuristic = demands * (1 / (demands + 1))  # Normalize demand and add a small constant to avoid division by zero

    # Combine the heuristics
    heuristics = (demand_heuristic - distance_penalty) * (demands > 0).float()

    return heuristics
```
