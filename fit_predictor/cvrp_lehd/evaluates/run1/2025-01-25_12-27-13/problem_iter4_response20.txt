```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    total_demand = demands[1:].sum()
    vehicle_capacity = 1.0 / (1.0 / total_demand + 1.0 / demands[depot])

    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the distance from the depot to all other nodes
    depot_distances = distance_matrix[depot]

    # Iterate over each node pair (i, j)
    for i in range(n):
        for j in range(n):
            if i != j:
                cost = distance_matrix[i][j]
                if i != depot and demands[j] > 0:
                    # Calculate the load after adding customer j to the route starting from i
                    load_after_adding_j = demands[i] + demands[j]
                    if load_after_adding_j <= vehicle_capacity:
                        # Calculate the heuristic value based on the difference in demands
                        edge_heuristic = (demands[j] - demands[i]) / (demands[i] + 1e-6)
                        # Scale the heuristic by the inverse of the demand for normalization
                        edge_heuristic /= (1 / demands[i] + 1 / demands[j])
                        # Adjust the heuristic by the distance
                        edge_heuristic *= cost
                        heuristics[i][j] = edge_heuristic
                elif j == depot:
                    # Calculate the load after returning to the depot from i
                    load_after_returning = demands[i]
                    if load_after_returning <= vehicle_capacity:
                        heuristics[i][j] = cost * (vehicle_capacity / load_after_returning)

    return heuristics
```
