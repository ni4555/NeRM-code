```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch
    import numpy as np

    n = distance_matrix.shape[0]
    total_demand = demands.sum().item()
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the inverse of demand to normalize the heuristic values
    inverse_demand = 1.0 / (demands + 1e-10)  # Adding a small constant to avoid division by zero

    # Use torch.dot for vectorized dot product to calculate the heuristic
    heuristics = torch.dot(inverse_demand, demands.unsqueeze(1)) * distance_matrix

    # Ensure that the heuristics are positive
    heuristics = torch.clamp(heuristics, min=0)

    return heuristics
```
