```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch
    import numpy as np

    # Calculate the total demand for each vehicle
    total_demand = demands.sum()

    # Initialize the heuristics matrix with negative values
    heuristics = -torch.ones_like(distance_matrix)

    # For each customer node, calculate the potential benefit of visiting it
    for i in range(1, len(demands)):
        for j in range(1, len(demands)):
            if demands[j] > 0:  # Only consider nodes with positive demand
                # Calculate the remaining capacity of each vehicle
                remaining_capacity = total_demand - demands[i]
                # Calculate the potential heuristics for this edge
                edge_heuristic = demands[j] - remaining_capacity
                # Set the heuristics value for this edge
                heuristics[i][j] = edge_heuristic

    return heuristics
```
