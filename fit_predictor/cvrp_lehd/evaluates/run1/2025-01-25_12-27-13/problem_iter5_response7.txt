```python
import torch
import numpy as np

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum().item()
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the distance-weighted demands
    weighted_demands = demands * distance_matrix

    # Use the inverse of the demand for normalization and a non-linear transformation (e.g., exp)
    demand_factors = torch.exp(1 / demands)

    # Create a mask for nodes with positive demand
    demand_mask = (demands > 0).float()

    # Calculate the heuristics for each edge, balancing demand and distance
    edge_heuristics = (weighted_demands / demand_factors) - (distance_matrix * demand_factors)
    edge_heuristics = torch.clamp(edge_heuristics, min=-torch.inf, max=0)

    # Apply the mask to keep only positive heuristics
    heuristics += torch.where(demand_mask[:, None] & demand_mask, edge_heuristics, 0)

    return heuristics
```
