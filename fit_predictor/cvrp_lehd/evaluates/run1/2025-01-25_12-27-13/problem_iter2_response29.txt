```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0

    # Calculate the total demand excluding the depot
    total_demand = demands[1:].sum()

    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the maximum possible load a single vehicle can carry
    vehicle_capacity = 1.0 / (1.0 / total_demand + 1.0 / demands[depot])

    # Calculate the distance to the depot for all nodes
    distance_to_depot = distance_matrix[:, depot]

    # Iterate over each customer node (excluding the depot)
    for i in range(1, n):
        if demands[i] > 0:
            # Calculate the potential load after visiting customer i from the depot
            potential_load = vehicle_capacity + demands[i]
            # If the load does not exceed capacity, it is a promising edge
            if potential_load <= vehicle_capacity:
                heuristics[depot, i] = distance_to_depot[i] * (vehicle_capacity / potential_load)

            # Iterate over each customer node j after customer i
            for j in range(i + 1, n):
                if demands[j] > 0:
                    # Calculate the potential load after visiting customer j from customer i
                    potential_load = vehicle_capacity - (demands[i] / demands[j]) * demands[j]
                    # If the load does not exceed capacity, it is a promising edge
                    if potential_load >= demands[j]:
                        cost = distance_matrix[i, j]
                        heuristics[i, j] = cost * (potential_load / demands[j])

    return heuristics
```
