```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch

    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    heuristic_matrix = torch.zeros_like(distance_matrix)

    # Demand-aware heuristic: higher demand contributes positively
    demand_heuristic = (normalized_demands[:, None] + normalized_demands[None, :]) / 2

    # Distance-based heuristic: shorter distances contribute positively
    distance_heuristic = -torch.sqrt(distance_matrix)

    # Combine both heuristics with a weighted sum, where demand-aware heuristic has a higher weight
    combined_heuristic = demand_heuristic * 0.7 + distance_heuristic * 0.3

    # Normalize the heuristic matrix to ensure it has both positive and negative values
    min_val, max_val = combined_heuristic.min(), combined_heuristic.max()
    heuristic_matrix = (combined_heuristic - min_val) / (max_val - min_val)

    # Adding a bonus to return to the depot
    diagonal = torch.arange(n)
    heuristic_matrix[diagonal, diagonal] += 1

    # Adjust the matrix to ensure the sum of heuristic values for any node equals the vehicle capacity
    heuristic_matrix /= (total_demand * torch.ones_like(heuristic_matrix))

    return heuristic_matrix
```
