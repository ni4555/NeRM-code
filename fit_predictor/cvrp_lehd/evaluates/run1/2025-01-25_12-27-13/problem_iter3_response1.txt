```python
import torch
import numpy as np

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum().item()
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate a demand-based weight that penalizes edges leading to nodes with higher demand
    demand_weight = 1 / (demands + 1e-5)  # Add a small constant to avoid division by zero

    # Create a distance-based weight that favors shorter distances
    distance_weight = 1 / (distance_matrix + 1e-5)

    # Combine the weights using a non-linear transformation (e.g., sigmoid)
    combined_weight = torch.sigmoid(demand_weight * distance_weight)

    # Apply the combined weight to the heuristics
    heuristics = combined_weight * demands

    return heuristics
```
