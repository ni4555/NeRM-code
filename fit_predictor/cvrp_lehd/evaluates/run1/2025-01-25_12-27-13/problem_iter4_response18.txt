```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0

    # Calculate the total demand excluding the depot
    total_demand = demands[1:].sum()

    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the maximum possible load a single vehicle can carry
    vehicle_capacity = 1.0 / (1.0 / total_demand + 1.0 / demands[depot])

    # Compute the distance to the nearest customer for each node
    distances = torch.sqrt(torch.sum(distance_matrix**2, dim=1))

    # Sort customers by their distance from the depot
    sorted_indices = torch.argsort(distances)

    # Iterate over customers in the order of their distance from the depot
    for i in range(1, n):
        if demands[i] > 0:  # Only consider nodes with positive demand
            # For each customer, calculate the heuristics for all other customers
            for j in range(1, n):
                if demands[j] > 0:
                    # Calculate the cost of visiting node j from node i
                    cost = distance_matrix[i][j]
                    
                    # Calculate the potential load after visiting j
                    potential_load = vehicle_capacity - (demands[i] / demands[j]) * demands[j]
                    
                    # If the load does not exceed capacity, it is a promising edge
                    if potential_load >= demands[j]:
                        heuristics[i][j] = cost * (potential_load / demands[j])

    # Calculate the heuristics for returning to the depot
    for i in range(1, n):
        if demands[i] > 0:
            cost = distance_matrix[i][depot]
            potential_load = vehicle_capacity + demands[i]
            if potential_load <= vehicle_capacity:
                heuristics[i][depot] = cost * (vehicle_capacity / potential_load)

    return heuristics
```
