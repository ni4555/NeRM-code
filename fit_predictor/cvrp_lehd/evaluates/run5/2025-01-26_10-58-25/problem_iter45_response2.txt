```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the distance matrix to a range of [0, 1]
    normalized_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Create a potential matrix using a Gaussian function centered at each node's demand
    potential_matrix = torch.exp(-torch.sum(torch.pow(demands[:, None] - demands, 2), dim=1) / 2)
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = F.softmax(potential_matrix, dim=1)
    
    # Combine the normalized potential matrix with the normalized distance matrix
    combined_matrix = normalized_potential_matrix * normalized_distance_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the penalty matrix to balance the scales
    combined_matrix = (1 - 0.3) * normalized_emphasized_matrix + 0.3 * penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
