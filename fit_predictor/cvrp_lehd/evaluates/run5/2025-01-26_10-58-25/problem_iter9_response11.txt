```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the distance matrix to account for the vehicle capacity
    normalized_distance_matrix = distance_matrix / vehicle_capacity
    
    # Apply a non-linear transformation to the normalized distance matrix to emphasize shorter distances
    non_linear_distance_matrix = torch.pow(normalized_distance_matrix, 3)
    
    # Combine demand and non-linear distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + non_linear_distance_matrix
    
    # Normalize the potential matrix to ensure all values are within a certain range
    max_potential = torch.max(potential_matrix)
    min_potential = torch.min(potential_matrix)
    normalized_potential_matrix = (potential_matrix - min_potential) / (max_potential - min_potential)
    
    # Apply softmax to normalize and transform the potential matrix
    softmax_matrix = F.softmax(normalized_potential_matrix, dim=1)
    
    # Adjust the softmax matrix to ensure that the values are not too close to zero
    adjusted_softmax_matrix = softmax_matrix - torch.min(softmax_matrix)
    
    # Transform the adjusted softmax matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_softmax_matrix
    
    return heuristics_matrix
```
