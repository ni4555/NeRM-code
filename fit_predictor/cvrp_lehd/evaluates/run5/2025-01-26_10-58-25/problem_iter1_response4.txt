```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    
    # Normalize the distance matrix to account for the total vehicle capacity
    normalized_distance_matrix = distance_matrix / total_demand
    
    # Calculate the demand per unit distance for each edge
    demand_per_unit_distance = demands / distance_matrix
    
    # Calculate the negative demand per unit distance for each edge to penalize long distances
    negative_demand_per_unit_distance = -demand_per_unit_distance
    
    # Combine the normalized distances with the negative demand per unit distance
    # to prioritize edges with lower distances and higher demand per unit distance
    combined_score = normalized_distance_matrix + negative_demand_per_unit_distance
    
    # Return the combined score matrix which represents the heuristic for each edge
    return combined_score
```
