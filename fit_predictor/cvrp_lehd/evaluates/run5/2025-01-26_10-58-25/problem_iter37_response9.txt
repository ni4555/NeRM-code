```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the distance matrix early to reduce the impact of larger distances
    normalized_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = -torch.log(normalized_distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Avoid redundant steps by directly using a non-linear transformation on the potential matrix
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Scale the potential matrix before combining to ensure that the two terms are on a similar scale
    scaled_potential_matrix = emphasized_matrix * 0.5
    
    # Combine the scaled potential matrix with the distance penalty matrix
    combined_matrix = scaled_potential_matrix + (1 - 0.5) * distance_penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
