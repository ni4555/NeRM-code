```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Apply nuanced penalties that scale with demand magnitude and distance
    scaled_demand_penalty = penalty_matrix * demands
    scaled_distance_penalty = distance_penalty_matrix * distance_matrix
    
    # Combine scaled demand and distance penalties into a single potential matrix
    potential_matrix = scaled_demand_penalty + scaled_distance_penalty
    
    # Normalize the potential matrix to ensure non-negativity
    normalized_potential_matrix = F.softmax(potential_matrix, dim=1)
    
    # Apply selective scaling to the normalized potential matrix to maintain a balance
    selectively_scaled_matrix = normalized_potential_matrix * (1 + torch.clamp(distance_matrix, 0, 1))
    
    # Transform the selectively scaled matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -selectively_scaled_matrix
    
    return heuristics_matrix
```
