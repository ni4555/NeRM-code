```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate penalties directly without non-linear transformation
    penalty_matrix = torch.abs(demands - vehicle_capacity)
    
    # Create distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine penalties into potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Normalize potential matrix to range between 0 and 1
    normalized_potential_matrix = F.log_softmax(potential_matrix, dim=1)
    
    # Convert the log probabilities to the actual probabilities
    probabilities_matrix = torch.exp(normalized_potential_matrix)
    
    # Normalize within the vehicle capacity to balance heuristics
    heuristics_matrix = probabilities_matrix / probabilities_matrix.sum(dim=1, keepdim=True)
    heuristics_matrix = heuristics_matrix * vehicle_capacity
    
    # Convert probabilities to a heuristics matrix where high values indicate promising edges
    heuristics_matrix = -heuristics_matrix
    
    return heuristics_matrix
```
