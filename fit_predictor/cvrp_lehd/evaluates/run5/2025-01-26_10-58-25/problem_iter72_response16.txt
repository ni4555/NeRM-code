```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = potential_matrix / potential_matrix.sum(dim=1, keepdim=True)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(normalized_potential_matrix))
    
    # Ensure that the values are not too close to zero
    min_value = torch.min(emphasized_matrix)
    emphasized_matrix = emphasized_matrix - min_value
    
    # Introduce diversity by adding a small amount of randomness
    random_matrix = torch.rand_like(emphasized_matrix)
    diversified_matrix = emphasized_matrix * 0.9 + random_matrix * 0.1
    
    # Scale the matrix to maintain non-zero values
    scale_factor = 1.0 / (diversified_matrix.sum(dim=1, keepdim=True) + 1e-6)
    scaled_matrix = diversified_matrix * scale_factor
    
    # Transform the scaled matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_matrix
    
    return heuristics_matrix
```
