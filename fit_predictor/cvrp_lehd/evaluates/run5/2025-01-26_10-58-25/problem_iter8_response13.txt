```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    vehicle_capacity = demands.sum() / demands.numel()

    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the distance from the depot to each customer and vice versa
    min_distance_to_customer = torch.min(distance_matrix[0, 1:], dim=0).values
    min_distance_from_customer = torch.min(distance_matrix[1:, 0], dim=0).values

    # Calculate the total distance to travel all customers and return to the depot
    total_distance = distance_matrix[0, 1:].sum() + distance_matrix[1:, 0].sum()

    # Calculate the demand-based heuristic value for each edge
    for i in range(1, n):
        demand_diff = demands[i] - demands[0]
        heuristics[0, i] = (demand_diff + total_distance)
        heuristics[i, 0] = (demand_diff + total_distance)

    # Calculate the distance-based heuristic value for each edge
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                heuristics[i, j] = (distance_matrix[i, j] + distance_matrix[j, 0])

    # Normalize the heuristics matrix
    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())

    return heuristics
```
