```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a demand penalty matrix that is higher for nodes closer to exceeding capacity
    demand_penalty_matrix = -torch.exp(torch.abs(demands - vehicle_capacity))
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Normalize the potential matrix to emphasize constraints while maintaining a range
    normalized_potential_matrix = F.normalize(potential_matrix, p=1, dim=1)
    
    # Apply a non-linear transformation to further emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(normalized_potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the original demand penalty to balance scales
    combined_matrix = normalized_emphasized_matrix * demand_penalty_matrix
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
