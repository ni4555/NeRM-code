```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Introduce a small penalty for nodes that exceed the vehicle capacity
    capacity_penalty = -torch.abs(demands - vehicle_capacity)
    
    # Incorporate a normalized distance penalty to balance with the capacity penalty
    distance_penalty = -torch.log(distance_matrix + 1e-6)
    
    # Combine the capacity and distance penalties into a single potential matrix
    potential_matrix = capacity_penalty + distance_penalty
    
    # Add Gaussian noise to introduce randomness and balance diversity
    noise_matrix = torch.randn_like(potential_matrix) * 1e-2
    
    # Control randomness by scaling the noise appropriately
    scaled_noise_matrix = noise_matrix / (torch.sqrt(potential_matrix + 1e-6))
    
    # Combine the original potential matrix with the scaled noise
    combined_potential_matrix = potential_matrix + scaled_noise_matrix
    
    # Emphasize constraints by applying a non-linear transformation
    emphasized_matrix = torch.exp(-torch.abs(combined_potential_matrix))
    
    # Normalize the emphasized matrix to maintain scale balance and encourage diversity
    normalized_emphasized_matrix = emphasized_matrix / (emphasized_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Introduce a second noise term to further control randomness
    second_noise_matrix = torch.randn_like(normalized_emphasized_matrix) * 1e-2
    
    # Control the influence of the second noise term
    second_noise_control = torch.rand_like(second_noise_matrix)
    controlled_second_noise_matrix = second_noise_matrix * second_noise_control
    
    # Combine the normalized emphasized matrix with the controlled second noise
    combined_matrix = normalized_emphasized_matrix + controlled_second_noise_matrix
    
    # Apply mutation by adding a small random perturbation
    mutation_factor = torch.rand_like(combined_matrix)
    mutated_combined_matrix = combined_matrix + mutation_factor * torch.randn_like(combined_matrix) * 1e-3
    
    # Final transformation to ensure negative values represent undesirable edges and positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
