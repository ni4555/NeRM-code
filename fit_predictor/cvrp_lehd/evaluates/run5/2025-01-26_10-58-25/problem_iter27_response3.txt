```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.pow(potential_matrix, 1.5)  # Exponentiate to increase the effect of penalties
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Introduce a demand-based scaling factor to penalize vehicles that exceed capacity
    demand_scale = (1 / (1 + torch.abs(penalty_matrix)))
    
    # Combine the normalized emphasized matrix with the demand scaling factor to balance the scales
    combined_matrix = (1 - 0.4) * normalized_emphasized_matrix + 0.4 * demand_scale
    
    # Introduce a distance-based scaling factor to penalize longer distances
    distance_scale = 1 / (distance_matrix + 1e-6)
    
    # Combine the demand and distance scaling factors to balance the scales
    balanced_scale = (1 - 0.6) * combined_matrix + 0.6 * distance_scale
    
    # Transform the balanced scale matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -balanced_scale
    
    return heuristics_matrix
```
