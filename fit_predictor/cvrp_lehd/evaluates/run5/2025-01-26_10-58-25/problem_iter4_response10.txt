```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]

    # Calculate the total demand sum
    total_demand = demands.sum()

    # Calculate the minimum distance from the depot to each customer
    min_distance_to_customer = torch.min(distance_matrix[0, 1:], dim=0).values

    # Calculate the minimum distance from each customer to the depot
    min_distance_from_customer = torch.min(distance_matrix[1:, 0], dim=0).values

    # Calculate the total distance if a vehicle starts at the depot, visits all customers, and returns to the depot
    total_distance = (distance_matrix[0, 1:].sum() + distance_matrix[1:, 0].sum() + (n - 1) * total_demand)

    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the heuristic values for the edges from the depot to customers
    heuristics[0, 1:] = total_distance - min_distance_to_customer

    # Calculate the heuristic values for the edges from customers to the depot
    heuristics[1:, 0] = total_distance - min_distance_from_customer

    # Calculate the heuristic values for the edges between customers
    heuristics[1:, 1:] = heuristics[1:, 0] - distance_matrix[1:, 1:]

    # Normalize the heuristics values to ensure they are in the range [0, 1]
    max_value = heuristics.max()
    min_value = heuristics.min()
    heuristics = (heuristics - min_value) / (max_value - min_value)

    return heuristics
```
