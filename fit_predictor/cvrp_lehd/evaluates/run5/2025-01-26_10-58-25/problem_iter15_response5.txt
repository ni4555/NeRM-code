```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity) ** 2  # Squaring for non-linear transformation
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply log-softmax normalization for non-negativity and scale balance
    log_softmax_matrix = F.log_softmax(potential_matrix, dim=1)
    
    # Convert log-softmax matrix to probabilities and normalize within vehicle capacity
    softmax_matrix = torch.exp(log_softmax_matrix)
    normalized_softmax_matrix = softmax_matrix / softmax_matrix.sum(dim=1, keepdim=True)
    
    # Transform the normalized softmax matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_softmax_matrix
    
    return heuristics_matrix
```
