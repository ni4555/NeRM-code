```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the demand excess for each node
    demand_excess = torch.abs(demands - vehicle_capacity)
    
    # Create a penalty matrix for demand excess
    penalty_matrix = -torch.pow(demand_excess, 2)
    
    # Normalize the distances to account for the vehicle capacity
    normalized_distances = distance_matrix / vehicle_capacity
    
    # Apply a non-linear transformation to emphasize large demand excesses and small distances
    transformed_matrix = torch.log(1 + torch.exp(-0.1 * (normalized_distances + 10 * penalty_matrix)))
    
    # Normalize the transformed matrix to maintain consistency and avoid dominance
    normalized_transformed_matrix = transformed_matrix / transformed_matrix.sum(dim=1, keepdim=True)
    
    # Apply a linear transformation to balance the scales between transformed and original distances
    balanced_matrix = (0.7 * transformed_matrix) + (0.3 * normalized_distances)
    
    # Ensure non-negativity and scale balance using a logarithmic transformation
    balanced_matrix = torch.log(1 + torch.exp(balanced_matrix))
    
    # Transform the balanced matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -balanced_matrix
    
    return heuristics_matrix
```
