```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the penalty for exceeding the vehicle capacity
    demand_penalty = -torch.log(torch.abs(demands - vehicle_capacity) + 1e-6)
    
    # Calculate the penalty based on the distance to balance demand and distance concerns
    distance_penalty = -torch.log(distance_matrix + 1e-6)
    
    # Combine both penalties to form a combined potential matrix
    combined_potential_matrix = demand_penalty + distance_penalty
    
    # Introduce noise to prevent premature convergence
    noise_matrix = torch.randn_like(combined_potential_matrix) * 1e-2
    
    # Combine the original potential matrix with noise
    combined_potential_matrix_with_noise = combined_potential_matrix + noise_matrix
    
    # Apply a non-linear transformation using an exponential function to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_potential_matrix_with_noise))
    
    # Normalize the emphasized matrix to maintain a balance across edges
    normalized_emphasized_matrix = emphasized_matrix / (emphasized_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Introduce mutation to promote exploration
    mutation_factor = torch.rand_like(normalized_emphasized_matrix)
    mutated_combined_matrix = normalized_emphasized_matrix + torch.randn_like(normalized_emphasized_matrix) * 1e-3 * mutation_factor
    
    # Final transformation into a heuristics matrix, negative values are for undesirable edges, positive values are for promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
