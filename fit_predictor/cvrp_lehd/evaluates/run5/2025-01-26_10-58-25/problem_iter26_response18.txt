```python
import torch

def softmax(tensor: torch.Tensor, dim: int) -> torch.Tensor:
    """Softmax implementation using exponential and log."""
    exp_tensor = torch.exp(tensor)
    return exp_tensor / torch.sum(exp_tensor, dim=dim, keepdim=True)

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply selective scaling to the potential matrix
    selective_scaling = torch.clamp(potential_matrix, min=1e-6, max=1)
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = softmax(selective_scaling, dim=1)
    
    # Adjust the normalized potential matrix to ensure that the values are not too close to zero
    adjusted_normalized_matrix = normalized_potential_matrix - torch.min(normalized_potential_matrix)
    
    # Transform the adjusted normalized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_normalized_matrix
    
    return heuristics_matrix
```
