```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Apply softmax to normalize and transform the potential matrix
    softmax_matrix = F.softmax(potential_matrix, dim=1)
    
    # Ensure that the smallest probability is non-zero by adding a small constant
    softmax_matrix = softmax_matrix + 1e-6
    
    # Invert the probabilities to get negative values for undesirable edges
    heuristics_matrix = -softmax_matrix
    
    return heuristics_matrix
```
