```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the penalty matrix to balance the importance of demand and distance
    normalized_penalty_matrix = penalty_matrix / (penalty_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Introduce randomness to escape local optima
    random_matrix = torch.rand_like(distance_matrix)
    randomized_matrix = normalized_penalty_matrix * random_matrix
    
    # Normalize the distance penalty matrix to ensure non-negativity and scale balance
    normalized_distance_matrix = distance_penalty_matrix / (distance_penalty_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Combine the normalized penalty matrix with the normalized distance penalty matrix
    combined_matrix = randomized_matrix + 0.5 * normalized_distance_matrix
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
