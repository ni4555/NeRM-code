```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Normalize the demand penalty matrix to ensure non-negativity
    normalized_demand_penalty_matrix = F.softmax(penalty_matrix, dim=1)
    
    # Non-linearly transform the distance penalty matrix to emphasize closer nodes
    emphasized_distance_penalty_matrix = torch.exp(-distance_penalty_matrix)
    
    # Combine the normalized demand penalty and the emphasized distance penalty
    combined_matrix = normalized_demand_penalty_matrix * emphasized_distance_penalty_matrix
    
    # Normalize the combined matrix to ensure non-negativity and balance scales
    normalized_combined_matrix = F.softmax(combined_matrix, dim=1)
    
    # Adjust the normalized combined matrix to ensure values are not too close to zero
    adjusted_combined_matrix = normalized_combined_matrix - torch.min(normalized_combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
