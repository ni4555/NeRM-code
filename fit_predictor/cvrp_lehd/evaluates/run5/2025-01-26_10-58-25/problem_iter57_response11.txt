```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Apply a non-linear transformation to the demand vector to emphasize high demands
    demand_emphasis = torch.log1p(torch.abs(demands))
    
    # Create a normalized distance matrix to highlight shorter paths
    normalized_distance = distance_matrix / distance_matrix.max()
    
    # Combine the demand emphasis and normalized distance into a potential matrix
    potential_matrix = demand_emphasis + normalized_distance
    
    # Use blend ratios to control the impact of demand emphasis and distance normalization
    blend_ratio_demand = 0.6
    blend_ratio_distance = 0.4
    
    # Blend the potential matrix with the demand emphasis and normalized distance
    blended_potential = blend_ratio_demand * demand_emphasis + blend_ratio_distance * normalized_distance
    
    # Normalize the blended potential matrix to ensure non-negativity and scale balance
    normalized_blended_potential = blended_potential / (blended_potential.sum(dim=1, keepdim=True) + 1e-6)
    
    # Adjust the normalized blended potential matrix to ensure that the values are not too close to zero
    adjusted_potential = normalized_blended_potential - torch.min(normalized_blended_potential)
    
    # Transform the adjusted potential matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_potential
    
    return heuristics_matrix
```
