```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate penalty for exceeding the vehicle capacity
    penalty_matrix = -torch.clamp(demands - vehicle_capacity, min=0)
    
    # Introduce randomness to prevent early convergence
    random_matrix = torch.randn_like(penalty_matrix)
    
    # Calculate distance-based penalty using log scale
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine the demand and distance penalties into a single matrix
    combined_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize the penalties
    emphasized_matrix = torch.sigmoid(combined_matrix + random_matrix)
    
    # Normalize the emphasized matrix to balance scale and introduce diversity
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine normalized emphasized matrix with a small portion of original distances
    # to ensure distance information is still relevant
    combined_matrix_with_distance = normalized_emphasized_matrix * 0.9 + distance_penalty_matrix * 0.1
    
    # Add Gaussian noise for further diversification
    noise_matrix = torch.randn_like(combined_matrix_with_distance) * 1e-2
    
    # Apply mutation by adding a small random perturbation to the matrix
    mutation_factor = torch.rand_like(combined_matrix_with_distance)
    mutated_combined_matrix = combined_matrix_with_distance + noise_matrix * mutation_factor
    
    # Final transformation to convert to a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
