```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a logarithmic scaling to the potential matrix
    scaled_potential_matrix = torch.log(potential_matrix + 1e-6)
    
    # Normalize the scaled potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = scaled_potential_matrix / (scaled_potential_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Transform the normalized potential matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_potential_matrix
    
    return heuristics_matrix
```
