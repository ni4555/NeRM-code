```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the relative demand per customer
    relative_demand = demands / demands.sum()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(relative_demand - 1 / demands.numel())
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.clamp(potential_matrix, min=-10)  # Clipping to emphasize negative values
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = normalized_emphasized_matrix + (1 - normalized_emphasized_matrix) * distance_penalty_matrix
    
    # Apply a threshold to ensure that some edges have a higher priority over others
    thresholded_combined_matrix = torch.clamp(combined_matrix, min=0.1)
    
    # Transform the thresholded combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -thresholded_combined_matrix
    
    return heuristics_matrix
```
