```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce diversity by adding a small random perturbation to the potential matrix
    random_matrix = torch.rand_like(potential_matrix)
    diversified_matrix = potential_matrix + random_matrix * 0.01
    
    # Adjust the diversified matrix to ensure that the values are not too close to zero
    adjusted_diversified_matrix = diversified_matrix - torch.min(diversified_matrix)
    
    # Normalize the adjusted diversified matrix to ensure non-negativity and scale balance
    normalized_diversified_matrix = adjusted_diversified_matrix / adjusted_diversified_matrix.sum(dim=1, keepdim=True)
    
    # Introduce a scaling factor for the distance penalty matrix
    distance_scale = 0.5
    
    # Combine the normalized diversified matrix with the scaled distance penalty matrix
    combined_matrix = normalized_diversified_matrix + distance_scale * distance_penalty_matrix
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
