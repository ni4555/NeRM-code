```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize feasible and low-cost edges
    non_linear_matrix = torch.exp(potential_matrix)
    
    # Introduce a dynamic weight to balance the influence of demand and distance
    # The weight is inversely proportional to the vehicle capacity to ensure that demand constraints are respected
    weight = 1 / (vehicle_capacity / demands.sum())
    weighted_matrix = non_linear_matrix * weight
    
    # Transform the weighted matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = 2 * (1 - weighted_matrix)  # Saturating function to create binary-like heuristics
    
    return heuristics_matrix
```
