```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = (1 - 0.5) * normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Apply a blending of penalties to enhance heuristic diversity and stability
    diversity_penalty = -torch.mean(torch.abs(adjusted_combined_matrix))
    stability_penalty = torch.mean(adjusted_combined_matrix)
    
    # Introduce a non-linear penalty for high demand to further emphasize capacity constraints
    high_demand_penalty = torch.exp(-torch.abs(demands - vehicle_capacity) * 2)
    
    # Combine all penalties into the final heuristics matrix
    heuristics_matrix = adjusted_combined_matrix + diversity_penalty + stability_penalty + high_demand_penalty
    
    return heuristics_matrix
```
