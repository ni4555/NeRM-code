```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Explicit demand constraint penalty matrix
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize distance penalties to maintain balance
    distance_penalty_matrix = (distance_penalty_matrix - distance_penalty_matrix.min()) / (distance_penalty_matrix.max() - distance_penalty_matrix.min())
    
    # Combine penalties into potential matrix
    potential_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Scale the potential matrix
    scaled_potential_matrix = potential_matrix / (potential_matrix.abs().max() + 1e-6)
    
    # Add Gaussian noise for randomness
    noise_matrix = torch.randn_like(scaled_potential_matrix) * 1e-2
    
    # Combine the scaled potential with noise
    combined_potential_matrix = scaled_potential_matrix + noise_matrix
    
    # Normalize to ensure non-negativity and balance
    normalized_combined_matrix = combined_potential_matrix / combined_potential_matrix.sum(dim=1, keepdim=True)
    
    # Introduce perturbations for diversity
    perturbation_matrix = torch.randn_like(normalized_combined_matrix) * 1e-3
    mutated_combined_matrix = normalized_combined_matrix + perturbation_matrix
    
    # Final transformation to a heuristics matrix
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
