```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the penalty matrix for diversity
    normalized_penalty_matrix = (penalty_matrix - penalty_matrix.mean()) / penalty_matrix.std()
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = normalized_penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.tanh(potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Blend the normalized emphasized matrix with the original distance penalty matrix
    combined_matrix = normalized_emphasized_matrix + 0.3 * distance_penalty_matrix
    
    # Use a logarithmic transformation to prevent large values from dominating
    log_combined_matrix = torch.log(combined_matrix + 1e-6)
    
    # Transform the log combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -log_combined_matrix
    
    return heuristics_matrix
```
