```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Blend demand and distance penalties with a non-linear transformation
    blend_weight = torch.sigmoid(2 * (distance_penalty_matrix - penalty_matrix))
    
    # Apply a random perturbation to encourage exploration and escape local optima
    random_noise = torch.rand_like(penalty_matrix)
    random_perturbation = (torch.rand_like(penalty_matrix) * 2 - 1) * random_noise
    
    # Combine demand, distance, and random penalties into a single potential matrix
    potential_matrix = blend_weight * penalty_matrix + (1 - blend_weight) * distance_penalty_matrix + random_perturbation
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = potential_matrix / potential_matrix.sum(dim=1, keepdim=True)
    
    # Apply another non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(normalized_potential_matrix))
    
    # Transform the emphasized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -emphasized_matrix
    
    return heuristics_matrix
```
