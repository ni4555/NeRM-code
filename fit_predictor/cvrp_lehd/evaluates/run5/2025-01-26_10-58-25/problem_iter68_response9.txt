```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty for demand violations
    demand_penalty_matrix = torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties with a weighted factor
    combined_potential = 0.6 * demand_penalty_matrix + 0.4 * distance_penalty_matrix
    
    # Non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_potential))
    
    # Normalize the matrix to maintain scale consistency
    normalized_emphasized_matrix = emphasized_matrix / (emphasized_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Introduce diversity by occasionally flipping signs of the penalties
    diversity_matrix = torch.where(torch.rand_like(distance_matrix) < 0.05, -normalized_emphasized_matrix, normalized_emphasized_matrix)
    
    # Combine normalized emphasized matrix with distance penalty matrix
    combined_matrix = diversity_matrix + 0.5 * distance_penalty_matrix
    
    # Adjust the combined matrix to ensure non-zero values
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Final transformation into a heuristics matrix
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
