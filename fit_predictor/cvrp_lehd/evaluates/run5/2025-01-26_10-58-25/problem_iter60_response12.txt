```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate penalties for edges that exceed vehicle capacity
    capacity_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Calculate distance-based penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine capacity and distance penalties
    combined_penalty_matrix = capacity_penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize penalties
    emphasized_penalty_matrix = torch.exp(-torch.abs(combined_penalty_matrix))
    
    # Normalize the emphasized penalties to ensure non-negativity
    normalized_penalty_matrix = normalize(emphasized_penalty_matrix, p=1, dim=1)
    
    # Create a heuristic matrix by transforming the normalized penalties
    heuristics_matrix = torch.clamp(normalized_penalty_matrix, min=0)
    
    return heuristics_matrix

def normalize(tensor: torch.Tensor, p: int, dim: int) -> torch.Tensor:
    norm = tensor.norm(p, dim=dim, keepdim=True)
    return tensor / norm
```
