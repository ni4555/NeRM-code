```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = torch.abs(demands - vehicle_capacity)
    
    # Normalize the penalty matrix for scale parity
    normalized_penalty_matrix = penalty_matrix / penalty_matrix.sum(dim=1, keepdim=True)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Blend demand and distance penalties for diversity
    blended_penalty_matrix = normalized_penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize the blended penalties
    emphasized_matrix = torch.exp(-torch.abs(blended_penalty_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Use a blending factor to balance the emphasis on penalties and distance
    balanced_combined_matrix = combined_matrix * 0.75 + distance_penalty_matrix * 0.25
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = balanced_combined_matrix - torch.min(balanced_combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
