```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity) * demands  # Use demand as a scaling factor
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints, considering a softer penalty
    emphasized_matrix = torch.exp(-0.5 * potential_matrix) * torch.log(torch.exp(potential_matrix) + 1)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Adjust the scale of distance penalty to make it competitive with demand penalty
    scaled_distance_penalty_matrix = distance_penalty_matrix * normalized_emphasized_matrix
    
    # Combine the normalized emphasized matrix with the scaled distance penalty matrix
    combined_matrix = (1 - 0.2) * normalized_emphasized_matrix + 0.2 * scaled_distance_penalty_matrix
    
    # Apply a final transformation to make the values distinct from each other
    transformed_matrix = combined_matrix ** 1.2
    
    # Ensure the heuristics matrix contains positive values by subtracting the smallest value
    heuristics_matrix = transformed_matrix - torch.min(transformed_matrix)
    
    return heuristics_matrix
```
