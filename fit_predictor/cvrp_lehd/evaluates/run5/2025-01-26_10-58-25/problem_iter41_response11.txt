```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the penalty for each edge based on the difference between demand and vehicle capacity
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Calculate the penalty for each edge based on the distance
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints and avoid redundancy
    emphasized_matrix = torch.exp(-torch.pow(potential_matrix, 2))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Balance the scales between the normalized emphasized matrix and the distance penalty matrix
    combined_matrix = (1 - 0.5) * normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Scale the combined matrix to ensure values are not too small
    scaled_combined_matrix = combined_matrix / combined_matrix.max()
    
    # Create the heuristics matrix, with negative values representing undesirable edges
    heuristics_matrix = -scaled_combined_matrix
    
    return heuristics_matrix
```
