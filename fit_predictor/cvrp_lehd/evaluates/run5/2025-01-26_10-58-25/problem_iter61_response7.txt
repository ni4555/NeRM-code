```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize distances to a range [0, 1] and scale based on vehicle capacity
    normalized_distances = distance_matrix / (torch.max(distance_matrix) + 1e-6)
    scaled_distances = normalized_distances * (vehicle_capacity * 0.1)
    
    # Create a blended potential matrix combining demand and distance penalties
    blended_potential_matrix = (penalty_matrix + scaled_distances) / 2
    
    # Apply a non-linear transformation to emphasize the blend
    emphasized_matrix = torch.sqrt(blended_potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Use the original distance matrix as a weight for the normalized emphasized matrix
    weighted_matrix = normalized_emphasized_matrix * (1 - distance_matrix)
    
    # Transform the weighted matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = weighted_matrix - torch.min(weighted_matrix)
    
    return heuristics_matrix
```
