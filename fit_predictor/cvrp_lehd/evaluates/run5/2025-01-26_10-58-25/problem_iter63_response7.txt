```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the distance matrix to balance it with the demand matrix
    normalized_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + normalized_distance_matrix
    
    # Use a weighted sum to emphasize demand constraints
    demand_weight = 2.0
    combined_potential_matrix = (demand_weight * potential_matrix + normalized_distance_matrix) / (demand_weight + 1)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the demand penalty matrix
    combined_matrix = normalized_emphasized_matrix + 0.5 * penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
