```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the penalties to enhance heuristic diversity and stability
    penalty_matrix_normalized = penalty_matrix / penalty_matrix.max()
    distance_penalty_matrix_normalized = distance_penalty_matrix / distance_penalty_matrix.max()
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix_normalized + distance_penalty_matrix_normalized
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.relu(potential_matrix)
    
    # Blend the potential matrix with the distance matrix to maintain a balance between demand and distance
    combined_matrix = (0.8 * emphasized_matrix) + (0.2 * distance_matrix)
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - combined_matrix.min()
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
