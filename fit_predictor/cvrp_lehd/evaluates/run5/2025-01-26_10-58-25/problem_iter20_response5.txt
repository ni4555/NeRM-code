```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Apply a more aggressive normalization to increase the distinctiveness of edge selection
    aggressive_normalized_matrix = F.softmax(combined_matrix, dim=1)
    
    # Adjust the aggressive normalized matrix to ensure non-negativity
    adjusted_aggressive_normalized_matrix = aggressive_normalized_matrix - torch.min(aggressive_normalized_matrix)
    
    # Scale the matrix to ensure values are not too close to zero, but keep the original distribution
    heuristics_matrix = adjusted_aggressive_normalized_matrix * (1 / torch.max(adjusted_aggressive_normalized_matrix))
    
    # Transform the scaled matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -heuristics_matrix
    
    return heuristics_matrix
```
