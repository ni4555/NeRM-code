```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = 1.0
    
    # Create a matrix with large positive value for edges where demand is greater than vehicle capacity
    infeasible_demand_penalty = distance_matrix.max() * 2
    demand_matrix = torch.where(demands <= vehicle_capacity, 0.0, infeasible_demand_penalty)
    
    # Adjust the matrix for edges where the demand is exactly zero by setting their penalty to 0
    demand_matrix[torch.where(demands == 0)] = 0.0
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = demand_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize feasible and low-cost edges
    transformed_potential_matrix = torch.exp(potential_matrix)
    
    # Normalize the transformed potential matrix
    normalized_matrix = transformed_potential_matrix / transformed_potential_matrix.sum(dim=1, keepdim=True)
    
    # Subtract from 1 to reverse the potential, making lower values (better paths) more likely
    heuristics_matrix = 1 - normalized_matrix
    
    return heuristics_matrix
```
