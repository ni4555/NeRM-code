```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Normalize the demands and distances to avoid bias towards larger values
    normalized_d demands = demands / demands.max()
    normalized_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(normalized_d demands - 1.0)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(normalized_distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = (1 - 0.5) * normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Scale the combined matrix to a suitable range
    scaled_combined_matrix = combined_matrix * (combined_matrix.max() / combined_matrix.abs().max())
    
    # Transform the scaled combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_combined_matrix
    
    return heuristics_matrix
```
