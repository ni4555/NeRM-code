```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    min_distance_to_customer = torch.min(distance_matrix[0, 1:], dim=0).values
    min_distance_from_customer = torch.min(distance_matrix[1:, 0], dim=0).values
    total_distance = (distance_matrix[0, 1:].sum() + distance_matrix[1:, 0].sum() + (len(demands) - 1) * total_demand)
    
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)

    # Assign heuristics for edges to the depot
    heuristics[0, 1:] = total_distance - min_distance_to_customer
    heuristics[1:, 0] = total_distance - min_distance_from_customer

    # Calculate and assign heuristics for other edges
    heuristics[1:, 1:] = heuristics[1:, 0] - distance_matrix[1:, 1:]

    # Calculate the cumulative demand and adjust heuristics
    cumulative_demand = torch.cumsum(demands[1:], dim=0)
    for i in range(len(demands)):
        heuristics[1:, 1:] = torch.where(cumulative_demand.unsqueeze(1) <= total_demand,
                                        heuristics[1:, 1:], heuristics[1:, 1:] - (total_demand - cumulative_demand.unsqueeze(1)))

    return heuristics
```
