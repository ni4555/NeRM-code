```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.relu(vehicle_capacity - demands)
    
    # Normalize the distance matrix to account for the vehicle's capacity
    distance_normalized_matrix = distance_matrix / vehicle_capacity
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_normalized_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Use a non-linear scaling to emphasize the constraint violation
    emphasized_matrix = torch.relu(-potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = (1 - 0.5) * normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Invert the combined matrix to convert penalties into heuristic values
    heuristics_matrix = 1 / (combined_matrix + 1e-6) - 1
    
    return heuristics_matrix
```
