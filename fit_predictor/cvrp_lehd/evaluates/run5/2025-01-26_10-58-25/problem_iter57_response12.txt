```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Normalize demands and distances to blend factors
    normalized_demands = (demands - demands.min()) / (demands.max() - demands.min())
    normalized_distances = (distance_matrix - distance_matrix.min()) / (distance_matrix.max() - distance_matrix.min())
    
    # Calculate penalties for exceeding vehicle capacity
    capacity_penalty = -torch.abs(demands - vehicle_capacity)
    
    # Calculate a distance-based penalty
    distance_penalty = -torch.log(normalized_distances + 1e-6)
    
    # Blend the penalties using a ratio that emphasizes constraints
    blend_ratio = 0.5
    blended_penalties = blend_ratio * capacity_penalty + (1 - blend_ratio) * distance_penalty
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_penalties = torch.exp(-torch.abs(blended_penalties))
    
    # Normalize the emphasized penalties
    normalized_emphasized_penalties = emphasized_penalties / emphasized_penalties.sum(dim=1, keepdim=True)
    
    # Combine the normalized penalties with the distance-based penalty
    combined_penalties = normalized_emphasized_penalties + 0.5 * distance_penalty
    
    # Adjust the combined penalties to ensure non-zero values
    adjusted_combined_penalties = combined_penalties - torch.min(combined_penalties)
    
    # Convert the adjusted penalties into heuristics
    heuristics_matrix = -adjusted_combined_penalties
    
    return heuristics_matrix
```
