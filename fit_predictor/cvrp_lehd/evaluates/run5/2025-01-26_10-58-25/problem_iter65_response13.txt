```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # To emphasize diversity, introduce a random factor that is less significant than the penalties
    random_factor = torch.rand_like(potential_matrix) * 0.1
    
    # Combine the potential matrix with the random factor
    combined_matrix = potential_matrix + random_factor
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Introduce a diversity promoting term by considering the average of all possible edges
    diversity_term = normalized_emphasized_matrix.mean(dim=0, keepdim=True)
    
    # Combine the normalized emphasized matrix with the diversity term
    combined_matrix_with_diversity = normalized_emphasized_matrix + diversity_term
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix_with_diversity - torch.min(combined_matrix_with_diversity)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
