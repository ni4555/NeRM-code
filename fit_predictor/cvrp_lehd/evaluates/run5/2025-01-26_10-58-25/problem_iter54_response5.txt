```python
import torch
from torch.nn.functional import softmax

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix using linear combination
    potential_matrix = 0.5 * penalty_matrix + 0.5 * distance_penalty_matrix
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = softmax(potential_matrix, dim=1)
    
    # Normalize the distance penalty matrix to balance the scales
    normalized_distance_matrix = softmax(distance_penalty_matrix, dim=1)
    
    # Combine the normalized potential matrix with the normalized distance penalty matrix to balance the scales
    combined_matrix = normalized_potential_matrix + normalized_distance_matrix
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
