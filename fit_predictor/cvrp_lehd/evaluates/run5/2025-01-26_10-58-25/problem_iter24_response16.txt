```python
import torch
from torch.nn.functional import log_softmax, exp

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Non-linearly transform demand penalties based on the ratio of demand to vehicle capacity
    demand_penalty_matrix = -torch.abs((demands / vehicle_capacity) - 1)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine the transformed demand and distance penalties
    potential_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Use log-softmax normalization for non-negativity and scale balance
    log_softmax_matrix = log_softmax(potential_matrix, dim=1)
    
    # Normalize within vehicle capacity to balance heuristic values
    softmax_matrix = exp(log_softmax_matrix)
    normalized_matrix = softmax_matrix / (softmax_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Ensure non-negativity and distinguish between promising and undesirable edges
    min_value = torch.min(normalized_matrix)
    adjusted_matrix = normalized_matrix - min_value
    
    # Convert the normalized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_matrix
    
    return heuristics_matrix
```
