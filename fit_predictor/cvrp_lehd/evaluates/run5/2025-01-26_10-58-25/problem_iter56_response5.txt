```python
import torch

def softmax(tensor: torch.Tensor, dim: int) -> torch.Tensor:
    e_tensor = torch.exp(tensor)
    sum_e_tensor = e_tensor.sum(dim=dim, keepdim=True)
    return e_tensor / sum_e_tensor

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Use a logarithmic transformation to emphasize the importance of the penalties
    emphasized_matrix = torch.log(torch.exp(potential_matrix) + 1e-6)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = softmax(emphasized_matrix, dim=1)
    
    # Introduce a balancing factor to balance the influence of distance and demand
    balancing_factor = torch.max(normalized_emphasized_matrix, dim=1)[0]
    balanced_normalized_matrix = normalized_emphasized_matrix / (balancing_factor[:, None] + 1e-6)
    
    # Scale the balanced normalized matrix with the distance penalties
    scaled_balanced_matrix = balanced_normalized_matrix * distance_penalty_matrix
    
    # Transform the scaled balanced matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_balanced_matrix
    
    return heuristics_matrix
```
