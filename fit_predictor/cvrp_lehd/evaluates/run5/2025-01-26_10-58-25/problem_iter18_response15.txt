```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Emphasize nearness in distance matrix by applying a non-linear transformation to the distance matrix
    distance_matrix = torch.relu(distance_matrix)
    
    # Normalize the distance matrix by the sum of the demands
    normalized_distance_matrix = distance_matrix / demands.sum()
    
    # Normalize the demand penalty matrix by the maximum possible sum of demands to equalize scales
    normalized_penalty_matrix = penalty_matrix / vehicle_capacity
    
    # Combine normalized demand and distance penalties into a single potential matrix
    potential_matrix = normalized_penalty_matrix + normalized_distance_matrix
    
    # Apply exponential transformation to the potential matrix to further emphasize promising edges
    transformed_potential_matrix = torch.exp(potential_matrix)
    
    # Aggregate the transformed potential matrix to get a single value per row, which represents the heuristic value for each node
    row_sums = transformed_potential_matrix.sum(dim=1, keepdim=True)
    
    # Normalize the aggregated potential matrix to get the final heuristics matrix
    heuristics_matrix = transformed_potential_matrix / row_sums
    
    # Invert the heuristics matrix to ensure that negative values represent undesirable edges and positive values represent promising ones
    heuristics_matrix = -heuristics_matrix
    
    return heuristics_matrix
```
