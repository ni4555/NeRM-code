```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the demand penalty matrix to ensure consistency with distance scale
    normalized_demand_penalty = (demand_penalty_matrix - demand_penalty_matrix.min()) / (demand_penalty_matrix.max() - demand_penalty_matrix.min())
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Avoiding log(0)
    
    # Combine demand and distance penalties using a weighted sum, with more emphasis on demand
    combined_penalty_matrix = (0.7 * normalized_demand_penalty) + (0.3 * distance_penalty_matrix)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_penalty_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Scale the normalized matrix with the distance penalty matrix to balance the scales
    scaled_combined_matrix = (normalized_emphasized_matrix * 0.5) + (distance_penalty_matrix * 0.5)
    
    # Ensure that the heuristics matrix values are not too close to zero
    heuristics_matrix = scaled_combined_matrix - scaled_combined_matrix.min()
    
    return heuristics_matrix
```
