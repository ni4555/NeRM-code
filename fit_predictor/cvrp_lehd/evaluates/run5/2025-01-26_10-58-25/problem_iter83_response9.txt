```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the demand penalty matrix to ensure it's balanced with the distance penalty
    normalized_demand_penalty = penalty_matrix / penalty_matrix.sum(dim=1, keepdim=True)
    
    # Normalize the distance penalty matrix to ensure it's balanced with the demand penalty
    normalized_distance_penalty = distance_penalty_matrix / distance_penalty_matrix.sum(dim=1, keepdim=True)
    
    # Combine normalized demand and distance penalties into a single potential matrix
    potential_matrix = normalized_demand_penalty + normalized_distance_penalty
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(potential_matrix) * 1e-2
    
    # Combine the original potential matrix with noise
    combined_potential_matrix = potential_matrix + noise_matrix
    
    # Normalize the combined potential matrix to control randomness and balance diversity
    normalized_combined_potential = combined_potential_matrix / combined_potential_matrix.sum(dim=1, keepdim=True)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(normalized_combined_potential))
    
    # Introduce a secondary noise term for further randomness and diversity
    secondary_noise_matrix = torch.randn_like(emphasized_matrix) * 1e-2
    
    # Combine the emphasized matrix with secondary noise
    combined_emphasized_matrix = emphasized_matrix + secondary_noise_matrix
    
    # Introduce mutation by adding a small random perturbation to the matrix
    mutation_factor = torch.rand_like(combined_emphasized_matrix)
    mutated_combined_matrix = combined_emphasized_matrix + torch.randn_like(combined_emphasized_matrix) * 1e-3 * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
