```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce a dynamic balance factor to control the influence of demand and distance penalties
    balance_factor = torch.nn.Parameter(torch.tensor(0.5, dtype=torch.float32))
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = F.softmax(potential_matrix / balance_factor, dim=1)
    
    # Combine the normalized potential matrix with the distance penalty matrix
    combined_matrix = balance_factor * normalized_potential_matrix + (1 - balance_factor) * distance_penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Apply a linear scaling to the adjusted combined matrix
    scaled_combined_matrix = adjusted_combined_matrix / adjusted_combined_matrix.max()
    
    # Transform the scaled combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = 2 * scaled_combined_matrix - 1
    
    return heuristics_matrix
```
