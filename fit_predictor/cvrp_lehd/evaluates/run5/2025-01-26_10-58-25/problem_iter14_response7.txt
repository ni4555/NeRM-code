```python
import torch
from torch.nn.functional import softmax

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the distance matrix based on vehicle capacity and apply a non-linear transformation
    normalized_distance_matrix = distance_matrix / vehicle_capacity
    non_linear_distance_matrix = torch.pow(normalized_distance_matrix, 3)
    
    # Combine demand and non-linear distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + non_linear_distance_matrix
    
    # Normalize the potential matrix to ensure all values are within a certain range
    max_potential = torch.max(potential_matrix)
    min_potential = torch.min(potential_matrix)
    normalized_potential_matrix = (potential_matrix - min_potential) / (max_potential - min_potential)
    
    # Apply softmax to normalize and transform the potential matrix
    softmax_matrix = softmax(normalized_potential_matrix, dim=0)
    
    # Ensure the sum of probabilities for each row is 1, which might be a requirement for certain heuristic approaches
    softmax_matrix = softmax_matrix / softmax_matrix.sum(dim=0, keepdim=True)
    
    # Transform the softmax matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -softmax_matrix
    
    return heuristics_matrix
```
