```python
import torch

def softmax(tensor, dim):
    e_tensor = torch.exp(tensor - torch.max(tensor, dim=dim, keepdim=True)[0])
    return e_tensor / e_tensor.sum(dim=dim, keepdim=True)

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Emphasize penalties using exponential to ensure all values are positive
    emphasized_matrix = torch.exp(potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and balance scale
    normalized_emphasized_matrix = emphasized_matrix / (emphasized_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Balance the normalized matrix by considering the maximum in each row to avoid overflow
    balancing_factor = torch.max(normalized_emphasized_matrix, dim=1)[0]
    balanced_normalized_matrix = normalized_emphasized_matrix / (balancing_factor[:, None] + 1e-6)
    
    # Introduce a balancing factor to scale the distance penalties with the demand
    scaling_factor = 1 / (vehicle_capacity + 1e-6)
    scaled_balanced_matrix = balanced_normalized_matrix * scaling_factor * distance_penalty_matrix
    
    # The resulting heuristics matrix represents the preference for edges
    heuristics_matrix = scaled_balanced_matrix
    
    return heuristics_matrix
```
