```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Normalize the penalties to ensure they are on the same scale
    normalized_penalty_matrix = penalty_matrix / (torch.max(penalty_matrix) + 1e-6)
    
    # Normalize the distance penalty matrix to balance it with the demand penalty
    normalized_distance_penalty_matrix = distance_penalty_matrix / (torch.max(distance_penalty_matrix) + 1e-6)
    
    # Combine the normalized demand and distance penalties into a single potential matrix
    potential_matrix = normalized_penalty_matrix + normalized_distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.clamp(potential_matrix, min=0)  # Ensure non-negative values
    
    # Scale the emphasized matrix to ensure a good range of values
    scaled_emphasized_matrix = emphasized_matrix * (1 / (torch.max(emphasized_matrix) + 1e-6))
    
    # Transform the scaled emphasized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_emphasized_matrix
    
    return heuristics_matrix
```
