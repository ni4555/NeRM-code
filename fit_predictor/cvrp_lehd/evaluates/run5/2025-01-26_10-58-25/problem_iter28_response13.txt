```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Emphasize constraints by applying a logarithmic transformation
    emphasized_matrix = torch.log1p(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix using softmax to ensure non-negativity
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Balance the normalized emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = (1 - 0.5) * normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # The final heuristics matrix should have positive values for promising edges
    heuristics_matrix = combined_matrix
    
    return heuristics_matrix
```
