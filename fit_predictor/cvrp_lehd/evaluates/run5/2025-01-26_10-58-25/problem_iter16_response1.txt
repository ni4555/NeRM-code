```python
import torch

def softmax(matrix: torch.Tensor, dim: int) -> torch.Tensor:
    exp_matrix = torch.exp(matrix - matrix.max(dim=dim, keepdim=True)[0])
    return exp_matrix / exp_matrix.sum(dim=dim, keepdim=True)

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = 1.0
    demand_excess_penalty = distance_matrix.max() * 2
    
    # Create a penalty matrix where the penalty is high for edges with demand exceeding vehicle capacity
    penalty_matrix = torch.where(demands <= vehicle_capacity, 0.0, demand_excess_penalty)
    
    # Combine distance and demand penalties
    potential_matrix = distance_matrix + penalty_matrix
    
    # Normalize the potential matrix using softmax to convert it into a probability matrix
    probabilities = softmax(potential_matrix, dim=1)
    
    # Invert the probabilities to make lower values (representing better paths) more likely
    heuristics_matrix = 1 - probabilities
    
    # Ensure the matrix contains only non-negative values
    heuristics_matrix = torch.clamp(heuristics_matrix, min=0.0)
    
    return heuristics_matrix
```
