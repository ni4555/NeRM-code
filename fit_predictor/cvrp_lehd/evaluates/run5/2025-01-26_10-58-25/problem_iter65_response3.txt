```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Introduce diversity by incorporating a secondary penalty that is a function of the sum of distances
    secondary_penalty_matrix = -torch.log(distance_matrix + 1e-6).sum(dim=1)
    
    # Combine the penalties to balance the importance of constraints
    combined_penalty_matrix = penalty_matrix + secondary_penalty_matrix
    
    # Emphasize constraints using a non-linear transformation
    emphasized_matrix = torch.exp(-torch.abs(combined_penalty_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Blend the normalized emphasized matrix with the original distance-based penalty matrix
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_matrix
    
    # Scale and adjust the combined matrix to ensure diversity and constraint satisfaction
    scaled_combined_matrix = combined_matrix * (torch.max(combined_matrix) / combined_matrix.sum(dim=1, keepdim=True))
    
    # Transform the scaled combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_combined_matrix
    
    return heuristics_matrix
```
