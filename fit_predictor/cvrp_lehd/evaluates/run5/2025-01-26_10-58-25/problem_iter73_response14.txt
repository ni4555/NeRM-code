```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Introduce a diversity factor based on the difference in demands
    diversity_factor = -torch.abs(demands - vehicle_capacity)
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Incorporate a non-linear distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(normalized_emphasized_matrix) * 1e-2
    
    # Combine the normalized emphasized matrix with noise
    combined_potential_matrix = normalized_emphasized_matrix + noise_matrix
    
    # Limit noise to maintain some level of structure
    limited_noise_matrix = torch.clamp(combined_potential_matrix, min=-1e-5, max=1e-5)
    
    # Normalize the limited noise matrix to ensure non-negativity and scale balance
    normalized_limited_noise_matrix = limited_noise_matrix / limited_noise_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized limited noise matrix with the diversity factor
    combined_diversity_matrix = normalized_limited_noise_matrix + diversity_factor
    
    # Introduce a second noise term for further randomness
    second_noise_matrix = torch.randn_like(combined_diversity_matrix) * 1e-2
    
    # Adjust the combined matrix to account for additional randomness
    adjusted_combined_matrix = combined_diversity_matrix + second_noise_matrix
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
