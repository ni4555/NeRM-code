```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the distance matrix to emphasize closer nodes
    normalized_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Combine distance normalization with demand penalties using a non-linear transformation
    combined_potential = torch.exp(-torch.abs(normalized_distance_matrix + penalty_matrix))
    
    # Introduce randomness by adding Gaussian noise scaled with the normalized distance
    noise_matrix = torch.randn_like(combined_potential) * (normalized_distance_matrix * 1e-1)
    
    # Add noise to the combined potential matrix
    with_noise_potential = combined_potential + noise_matrix
    
    # Normalize the potential matrix to ensure all values are non-negative and scale balanced
    normalized_with_noise_potential = with_noise_potential / (with_noise_potential.sum(dim=1, keepdim=True) + 1e-6)
    
    # Introduce diversity using a random shuffle matrix
    diversity_matrix = torch.rand_like(distance_matrix)
    
    # Incorporate diversity by multiplying the normalized potential with the diversity matrix
    final_potential = normalized_with_noise_potential * diversity_matrix
    
    # Transform the final potential into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = final_potential - final_potential.mean(dim=1, keepdim=True)
    
    return heuristics_matrix
```
