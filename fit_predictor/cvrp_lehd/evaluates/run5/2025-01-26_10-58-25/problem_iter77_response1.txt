```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(potential_matrix) * 1e-2
    
    # Apply a non-linear transformation to emphasize constraints effectively
    emphasized_matrix = torch.relu(potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / (emphasized_matrix + 1e-6).sum(dim=1, keepdim=True)
    
    # Introduce diversity by adding a weighted sum of distance penalty and the normalized emphasized matrix
    combined_matrix = 0.5 * distance_penalty_matrix + 0.5 * normalized_emphasized_matrix
    
    # Introduce a small random perturbation for further diversity and balance
    perturbation_matrix = torch.randn_like(combined_matrix) * 1e-2
    
    # Apply mutation by blending the original combined matrix with the perturbed one
    mutation_factor = torch.rand_like(combined_matrix)
    mutated_combined_matrix = combined_matrix * (1 - mutation_factor) + perturbation_matrix * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
