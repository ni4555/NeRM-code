```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity) * (demands > 0)  # Exclude penalties for depot node
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Apply non-linear transformation to both matrices to emphasize significant changes
    # Squaring the penalties to give higher penalties for over-demands
    non_linear_demand_penalty = penalty_matrix ** 2
    non_linear_distance_penalty = distance_penalty_matrix ** 2
    
    # Combine non-linearized demand and distance penalties into a single potential matrix
    potential_matrix = non_linear_demand_penalty + non_linear_distance_penalty
    
    # Normalize the potential matrix to maintain a scale that reflects importance
    # The use of log ensures that small penalties are still influential
    log_scaled_potential_matrix = torch.log(1 + torch.exp(potential_matrix))
    
    # Apply softmax to normalize and transform the log-scaled potential matrix
    # This will help in balancing edge selection based on potential and distance
    softmax_matrix = F.softmax(log_scaled_potential_matrix, dim=1)
    
    # Adjust the softmax matrix to ensure that the values are not too close to zero
    # This helps in distinguishing between promising and undesirable edges
    adjusted_softmax_matrix = softmax_matrix - torch.min(softmax_matrix)
    
    # Transform the adjusted softmax matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_softmax_matrix
    
    return heuristics_matrix
```
