```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create penalty matrices for demand and distance constraints
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Introduce randomness early by adding Gaussian noise to the distance penalties
    noise_matrix = torch.randn_like(distance_penalty_matrix) * 1e-2
    combined_potential_matrix = distance_penalty_matrix + noise_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Ensure diversity by adding a minimum threshold
    diversity_threshold = torch.min(normalized_emphasized_matrix)
    normalized_emphasized_matrix = torch.where(normalized_emphasized_matrix < diversity_threshold,
                                              normalized_emphasized_matrix + diversity_threshold,
                                              normalized_emphasized_matrix)
    
    # Combine demand penalty with normalized emphasized matrix
    combined_matrix = demand_penalty_matrix + normalized_emphasized_matrix
    
    # Control noise and perturbations by limiting the amount of noise
    noise_limit = torch.clamp(1 - combined_matrix.sum(dim=1, keepdim=True), min=0)
    limited_noise_matrix = noise_matrix * noise_limit
    combined_matrix = combined_matrix + limited_noise_matrix
    
    # Apply a second noise term for further randomness
    second_noise_matrix = torch.randn_like(combined_matrix) * 1e-2
    combined_matrix = combined_matrix + second_noise_matrix
    
    # Final transformation into a heuristics matrix
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
