```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the relative difference between demand and vehicle capacity
    demand_diff = (demands - vehicle_capacity) / vehicle_capacity
    
    # Introduce a penalty for demand difference, where larger deviations are penalized more
    penalty_matrix = -torch.abs(demand_diff) * demand_diff
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Normalize the combined potential matrix to balance the scales
    normalized_potential_matrix = F.softmax(potential_matrix, dim=1)
    
    # Introduce a scaling factor to adjust the balance between demand and distance penalties
    scaled_potential_matrix = normalized_potential_matrix * 0.1
    
    # Combine the scaled potential matrix with the distance penalty matrix
    combined_matrix = scaled_potential_matrix + distance_penalty_matrix
    
    # Introduce a threshold to ensure that only promising edges contribute to the heuristic
    threshold_matrix = torch.clamp(combined_matrix, min=0.0)
    
    # Transform the threshold matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -threshold_matrix
    
    return heuristics_matrix
```
