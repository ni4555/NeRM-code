```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    # Use softmax to normalize the potential matrix
    normalized_potential_matrix = torch.nn.functional.softmax(potential_matrix, dim=1)
    
    # Apply a penalty to the edges leading back to the depot to discourage them
    depot_penalty_matrix = -torch.ones_like(distance_matrix) * 1000
    adjusted_normalized_matrix = torch.min(normalized_potential_matrix, depot_penalty_matrix)
    
    # Transform the adjusted normalized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_normalized_matrix
    
    return heuristics_matrix
```
