```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Instead of using softmax, which assumes all dimensions are independent, 
    # we apply a more balanced non-linear transformation that is dimension-specific
    heuristics_matrix = -torch.abs(potential_matrix) * emphasized_matrix
    
    # Normalize the heuristics matrix to ensure non-negativity and scale balance
    min_val = heuristics_matrix.min()
    max_val = heuristics_matrix.max()
    normalized_heuristics_matrix = (heuristics_matrix - min_val) / (max_val - min_val)
    
    # Multiply by the distance penalty matrix to balance scales
    combined_matrix = normalized_heuristics_matrix * distance_penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    return adjusted_combined_matrix
```
