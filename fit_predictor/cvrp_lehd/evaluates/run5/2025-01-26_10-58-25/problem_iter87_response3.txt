```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Introduce randomness early to allow for diversification
    random_matrix = torch.randn_like(penalty_matrix) * 0.1
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand, distance penalties and randomness into a potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix + random_matrix
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = potential_matrix / potential_matrix.sum(dim=1, keepdim=True)
    
    # Introduce controlled mutation by adding a small random perturbation to the matrix
    mutation_factor = torch.rand_like(normalized_potential_matrix)
    mutated_potential_matrix = normalized_potential_matrix + torch.randn_like(normalized_potential_matrix) * 0.01 * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_potential_matrix
    
    return heuristics_matrix
```
