```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply exponential decay for emphasis
    emphasized_matrix = torch.exp(-potential_matrix)
    
    # Normalize the emphasized matrix with row-wise sums for better balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = (1 - 0.5) * normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Introduce diversity by considering the inverse of the distance as a bonus
    distance_bonus_matrix = (1 / (distance_matrix + 1e-6)) * combined_matrix
    
    # Normalize the distance bonus matrix to maintain scale consistency
    distance_bonus_matrix = distance_bonus_matrix / distance_bonus_matrix.sum(dim=1, keepdim=True)
    
    # Combine the combined matrix and distance bonus matrix
    final_matrix = adjusted_combined_matrix + distance_bonus_matrix
    
    # Transform the final matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -final_matrix
    
    return heuristics_matrix
```
