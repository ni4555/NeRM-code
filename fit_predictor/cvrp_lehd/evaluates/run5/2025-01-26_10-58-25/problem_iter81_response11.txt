```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Define a function to introduce noise
    def introduce_noise(tensor, std_dev):
        return tensor + torch.randn_like(tensor) * std_dev
    
    # Define a function to normalize and scale the matrix
    def normalize_and_scale(tensor):
        max_val = tensor.max()
        min_val = tensor.min()
        return (tensor - min_val) / (max_val - min_val)
    
    # Define a function to apply a non-linear transformation
    def non_linear_transform(tensor):
        return torch.exp(-torch.abs(tensor))
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = introduce_noise(potential_matrix, 1e-2)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = non_linear_transform(noise_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = normalize_and_scale(emphasized_matrix)
    
    # Control randomness by introducing a controlled noise factor
    controlled_noise_matrix = introduce_noise(normalized_emphasized_matrix, 1e-4)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix
    combined_matrix = normalized_emphasized_matrix + controlled_noise_matrix
    
    # Apply a second non-linear transformation to further emphasize constraints
    further_emphasized_matrix = non_linear_transform(combined_matrix)
    
    # Introduce mutation by adding a small random perturbation to the matrix
    mutation_factor = torch.rand_like(further_emphasized_matrix)
    mutated_combined_matrix = further_emphasized_matrix + mutation_factor * torch.randn_like(further_emphasized_matrix) * 1e-3
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
