```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the penalty matrix
    normalized_penalty_matrix = penalty_matrix / penalty_matrix.max()
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the distance penalty matrix
    normalized_distance_penalty_matrix = distance_penalty_matrix / distance_penalty_matrix.max()
    
    # Combine the normalized penalties and distance penalties
    combined_potential_matrix = normalized_penalty_matrix + normalized_distance_penalty_matrix
    
    # Introduce randomness with Gaussian noise
    noise_matrix = torch.randn_like(combined_potential_matrix) * 1e-2
    
    # Add noise to the potential matrix
    combined_potential_matrix += noise_matrix
    
    # Apply a non-linear transformation
    emphasized_matrix = torch.relu(combined_potential_matrix)
    
    # Normalize the emphasized matrix
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Final adjustment of the potential matrix with an emphasis on constraints
    final_potential_matrix = normalized_emphasized_matrix * 0.7 + 0.3 * normalized_distance_penalty_matrix
    
    # Introduce additional randomness
    additional_noise_matrix = torch.randn_like(final_potential_matrix) * 1e-2
    
    # Final adjustment with the additional noise
    final_combined_matrix = final_potential_matrix + additional_noise_matrix
    
    # Mutation with random perturbations
    mutation_factor = torch.rand_like(final_combined_matrix)
    mutated_combined_matrix = final_combined_matrix + torch.randn_like(final_combined_matrix) * 1e-3 * mutation_factor
    
    # Convert the potential matrix into a heuristics matrix
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
