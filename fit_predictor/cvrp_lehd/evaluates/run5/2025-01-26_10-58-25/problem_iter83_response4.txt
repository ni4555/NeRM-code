```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Introduce noise at the beginning to prevent early convergence
    noise_matrix = torch.randn_like(distance_matrix) * 1e-2
    
    # Normalize demands to balance penalties and emphasize constraints
    normalized_demands = (demands - demands.min()) / (demands.max() - demands.min())
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(normalized_demands - 1)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce randomness by adding Gaussian noise with a controlled standard deviation
    combined_potential_matrix = potential_matrix + noise_matrix
    
    # Emphasize constraints by scaling the potential matrix
    emphasized_matrix = combined_potential_matrix * (1 / (1 + torch.exp(-combined_potential_matrix)))
    
    # Normalize the emphasized matrix to ensure non-negativity and balance diversity
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Introduce additional randomness by adding a second noise term
    second_noise_matrix = torch.randn_like(normalized_emphasized_matrix) * 1e-2
    
    # Combine the original potential matrix with the second noise term
    combined_matrix = normalized_emphasized_matrix + second_noise_matrix
    
    # Apply mutation by adding a small random perturbation to the matrix
    mutation_factor = torch.rand_like(combined_matrix)
    mutated_combined_matrix = combined_matrix + torch.randn_like(combined_matrix) * 1e-3 * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
