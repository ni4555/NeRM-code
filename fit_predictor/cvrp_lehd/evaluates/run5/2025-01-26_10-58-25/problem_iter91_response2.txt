```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate a penalty based on the deviation from the vehicle capacity
    penalty_matrix = torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine the demand and distance penalties into a potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints and normalize
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix) * 10)
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Introduce a random component with Gaussian noise
    noise_matrix = torch.randn_like(normalized_emphasized_matrix) * 1e-2
    combined_matrix = normalized_emphasized_matrix + noise_matrix
    
    # Use a second noise term for further randomness
    second_noise_matrix = torch.randn_like(combined_matrix) * 1e-2
    adjusted_combined_matrix = combined_matrix + second_noise_matrix
    
    # Mutate the matrix with a small random perturbation
    mutation_factor = torch.rand_like(adjusted_combined_matrix)
    mutated_combined_matrix = adjusted_combined_matrix + torch.randn_like(adjusted_combined_matrix) * 1e-3 * mutation_factor
    
    # Final transformation into a heuristics matrix
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
