```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Calculate the balance between demand and distance penalties
    balance_matrix = demand_penalty_matrix * 0.5 + distance_penalty_matrix * 0.5
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(balance_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Blend the normalized emphasized matrix with the original distance matrix
    blended_matrix = normalized_emphasized_matrix * 0.5 + distance_matrix * 0.5
    
    # Adjust the blended matrix to ensure that the values are not too close to zero
    adjusted_blended_matrix = blended_matrix - torch.min(blended_matrix)
    
    # Transform the adjusted blended matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_blended_matrix
    
    return heuristics_matrix
```
