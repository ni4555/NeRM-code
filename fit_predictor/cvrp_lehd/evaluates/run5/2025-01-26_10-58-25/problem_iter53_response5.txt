```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Instead of using a fixed combination, use a soft thresholding approach
    # to adjust the balance between demand and distance penalties
    soft_threshold = torch.max(penalty_matrix, distance_penalty_matrix)
    balanced_potential_matrix = soft_threshold + (emphasized_matrix - soft_threshold) * 0.5
    
    # Normalize the balanced potential matrix to ensure non-negativity and scale balance
    normalized_balanced_matrix = F.softmax(balanced_potential_matrix, dim=1)
    
    # Transform the normalized balanced matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_balanced_matrix
    
    return heuristics_matrix
```
