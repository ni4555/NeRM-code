```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(penalty_matrix) * 1e-2
    
    # Normalize the penalties and noise to ensure non-negativity and scale balance
    normalized_penalty_matrix = (penalty_matrix + noise_matrix) / (penalty_matrix + noise_matrix).sum(dim=1, keepdim=True)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the distance penalty matrix
    normalized_distance_penalty_matrix = distance_penalty_matrix / distance_penalty_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized penalties with the normalized distance penalties
    combined_potential_matrix = normalized_penalty_matrix + normalized_distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_potential_matrix))
    
    # Introduce diversity noise for further randomness
    diversity_noise = torch.randn_like(emphasized_matrix) * 1e-3
    
    # Integrate the additional randomness to ensure heuristic variability
    final_combined_matrix = emphasized_matrix + diversity_noise
    
    # Normalize the final combined matrix to ensure non-negativity and scale balance
    normalized_final_combined_matrix = final_combined_matrix / final_combined_matrix.sum(dim=1, keepdim=True)
    
    # Transform the normalized combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_final_combined_matrix
    
    return heuristics_matrix
```
