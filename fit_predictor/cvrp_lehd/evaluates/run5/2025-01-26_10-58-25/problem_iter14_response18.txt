```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to the potential matrix
    transformed_potential_matrix = torch.relu(potential_matrix)
    
    # Normalize the transformed potential matrix to ensure that the values are balanced
    normalized_matrix = transformed_potential_matrix / transformed_potential_matrix.sum()
    
    # Balance the normalization by adding a constant to avoid zero values
    balanced_normalized_matrix = normalized_matrix + 1e-6
    
    # Apply a non-linear transformation to further differentiate promising and undesirable edges
    heuristics_matrix = torch.sigmoid(balanced_normalized_matrix)
    
    # Transform the heuristics matrix to have negative values for undesirable edges
    heuristics_matrix = -heuristics_matrix
    
    return heuristics_matrix
```
