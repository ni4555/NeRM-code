```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Apply exponential decay for emphasis on constraint violations
    emphasized_matrix = torch.exp(-torch.abs(penalty_matrix))
    
    # Normalize the emphasized matrix with row-wise sums for better balance
    emphasized_matrix /= emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Normalize the distance-based penalty matrix to balance with the emphasized matrix
    distance_penalty_matrix /= distance_penalty_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the normalized distance penalty matrix
    combined_matrix = emphasized_matrix + distance_penalty_matrix
    
    # Ensure non-zero values by adding a small constant
    combined_matrix += 1e-6
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
