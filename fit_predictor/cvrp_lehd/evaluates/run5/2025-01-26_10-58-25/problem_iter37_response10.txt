```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Normalize demands by vehicle capacity and clip to avoid non-positive values
    normalized_demands = torch.clamp((demands / vehicle_capacity), min=0.01)
    
    # Create a distance-based penalty matrix with a non-linear transformation
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Calculate the demand-based penalty matrix
    demand_penalty_matrix = -torch.abs(normalized_demands - 1.0)
    
    # Combine the demand and distance penalties using a weighted sum
    combined_penalty_matrix = 0.5 * demand_penalty_matrix + 0.5 * distance_penalty_matrix
    
    # Avoid redundant steps by directly using the combined penalty matrix as potential
    potential_matrix = combined_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Avoid redundant steps by directly using the normalized emphasized matrix as heuristics
    heuristics_matrix = normalized_emphasized_matrix
    
    return heuristics_matrix
```
