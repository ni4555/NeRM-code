```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = 1.0
    
    # Create a matrix with negative infinity for edges where demand is greater than vehicle capacity
    demand_matrix = torch.clamp(-torch.cumsum(demands, dim=0) / vehicle_capacity, min=float('-inf'))
    
    # Adjust the matrix for edges where the demand is exactly zero
    demand_matrix[torch.where(demands == 0)] = float('-inf')
    
    # Non-linear transformation to balance distance and demand
    transformed_matrix = torch.log1p(distance_matrix) - demand_matrix
    
    # Normalize the transformed matrix to ensure the sum of each row is 1
    # This will result in a probability distribution where higher values are more promising
    normalized_matrix = transformed_matrix / transformed_matrix.sum(dim=1, keepdim=True)
    
    # Incorporate capacity constraints by penalizing high demand edges
    capacity_penalty = torch.clamp(-demands / vehicle_capacity, min=float('-inf'))
    
    # Combine the normalized matrix with capacity penalty
    combined_matrix = normalized_matrix + capacity_penalty
    
    # Softmax over each row to ensure the sum of each row is 1 (probability distribution)
    softmax_matrix = F.softmax(combined_matrix, dim=1)
    
    # Subtract from 1 to promote the selection of edges with lower potential and higher distances
    heuristics_matrix = 1 - softmax_matrix
    
    return heuristics_matrix
```
