```python
import torch

def softmax(tensor: torch.Tensor, dim: int) -> torch.Tensor:
    exp_tensor = torch.exp(tensor)
    sum_exp_tensor = torch.sum(exp_tensor, dim=dim, keepdim=True)
    return exp_tensor / sum_exp_tensor

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a logarithmic transformation to emphasize constraints while ensuring non-negativity
    emphasized_matrix = torch.log(torch.exp(potential_matrix) + 1e-6)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = softmax(emphasized_matrix, dim=1)
    
    # Apply a soft constraint approach by scaling the normalized matrix with the distance penalties
    scaled_normalized_matrix = normalized_emphasized_matrix * distance_penalty_matrix
    
    # Introduce a balancing factor to avoid dominance of one penalty over the other
    balancing_factor = torch.max(scaled_normalized_matrix) / distance_penalty_matrix
    balanced_scaled_normalized_matrix = scaled_normalized_matrix / balancing_factor
    
    # Introduce a diversity and stability factor to encourage a wide range of edge choices
    diversity_factor = torch.mean(balanced_scaled_normalized_matrix, dim=1, keepdim=True)
    stability_factor = torch.std(balanced_scaled_normalized_matrix, dim=1, keepdim=True)
    balanced_scaled_normalized_matrix -= diversity_factor
    balanced_scaled_normalized_matrix /= stability_factor
    
    # Adjust the balanced matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = balanced_scaled_normalized_matrix - torch.min(balanced_scaled_normalized_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
