```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a demand penalty matrix
    demand_penalty_matrix = torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties with soft thresholds
    combined_penalty_matrix = (0.2 * demand_penalty_matrix) + (0.8 * distance_penalty_matrix)
    
    # Non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-combined_penalty_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Transform the normalized matrix to balance the scales and avoid dominance
    balanced_matrix = 1 / (1 + torch.exp(-normalized_emphasized_matrix))
    
    # Adjust the balanced matrix to ensure that the values are within a reasonable range
    adjusted_balanced_matrix = (balanced_matrix - torch.min(balanced_matrix)) / (torch.max(balanced_matrix) - torch.min(balanced_matrix))
    
    # Transform the adjusted matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_balanced_matrix
    
    return heuristics_matrix
```
