```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = (1 - 0.4) * normalized_emphasized_matrix + 0.4 * distance_penalty_matrix
    
    # Introduce dominance avoidance by adding a small constant to the combined matrix
    dominance_avoidance_matrix = combined_matrix + 1e-4
    
    # Normalize the dominance-avoided combined matrix to ensure that the values are non-negative and scale is balanced
    normalized_dominance_avoidance_matrix = F.normalize(dominance_avoidance_matrix, p=1, dim=1)
    
    # Adjust the normalized dominance-avoided combined matrix to ensure that the values are not too close to zero
    adjusted_normalized_dominance_avoidance_matrix = normalized_dominance_avoidance_matrix - torch.min(normalized_dominance_avoidance_matrix)
    
    # Transform the adjusted normalized dominance-avoided combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_normalized_dominance_avoidance_matrix
    
    return heuristics_matrix
```
