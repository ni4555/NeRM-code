```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = 1.0
    
    # Calculate cumulative demand from the depot to each customer
    cumulative_demand = torch.cumsum(demands, dim=0) / vehicle_capacity
    
    # Create a matrix with negative infinity for edges where the cumulative demand exceeds vehicle capacity
    demand_matrix = torch.clamp(-cumulative_demand, min=float('-inf'))
    
    # Adjust the matrix for edges where the demand is exactly zero
    demand_matrix[torch.where(demands == 0)] = float('-inf')
    
    # Calculate the potential matrix by adding the distance matrix to the demand matrix
    potential_matrix = distance_matrix + demand_matrix
    
    # Softmax over each row to normalize the potential matrix as a probability distribution
    softmax_matrix = torch.nn.functional.softmax(potential_matrix, dim=1)
    
    # Subtract from 1 to promote the selection of edges with lower potential and higher distances
    heuristics_matrix = 1 - softmax_matrix
    
    return heuristics_matrix
```
