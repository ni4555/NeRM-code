```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate a penalty based on distance
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Create a penalty matrix for demand constraint violations
    demand_penalty_matrix = torch.abs(demands - vehicle_capacity)
    
    # Normalize demand penalties to balance with distance penalties
    normalized_demand_penalty_matrix = (demand_penalty_matrix / demand_penalty_matrix.sum()) * 100
    
    # Combine the normalized demand penalties with the distance penalties
    combined_potential_matrix = normalized_demand_penalty_matrix + distance_penalty_matrix
    
    # Apply a smoothing step to reduce sharp changes in potential
    smoothed_matrix = F.smooth_l1_loss(combined_potential_matrix, combined_potential_matrix)
    
    # Scale the smoothed matrix to maintain the potential to select edges
    scaled_matrix = smoothed_matrix * 0.1
    
    # Transform the scaled matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_matrix
    
    return heuristics_matrix
```
