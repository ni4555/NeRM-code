```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Use a sigmoid transformation to convert penalties into heuristic values
    heuristic_values = 1 / (1 + torch.exp(-potential_matrix))
    
    # Normalize the heuristic values to ensure non-negativity and scale balance
    normalized_heuristic_values = F.softmax(heuristic_values, dim=1)
    
    # Combine the normalized heuristic values with the distance penalty matrix to balance the scales
    combined_matrix = (1 - 0.5) * normalized_heuristic_values + 0.5 * distance_penalty_matrix
    
    # Apply a soft-clamp to avoid negative values
    combined_matrix = torch.clamp(combined_matrix, min=0)
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
