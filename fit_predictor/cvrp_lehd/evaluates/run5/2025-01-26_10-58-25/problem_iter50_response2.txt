```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints and ensure non-negativity
    emphasized_matrix = torch.relu(potential_matrix)
    
    # Scale the emphasized matrix to ensure a good range of values
    max_emphasized = torch.max(emphasized_matrix)
    scaled_emphasized_matrix = emphasized_matrix / (max_emphasized + 1e-6)
    
    # Transform the scaled emphasized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_emphasized_matrix
    
    return heuristics_matrix
```
