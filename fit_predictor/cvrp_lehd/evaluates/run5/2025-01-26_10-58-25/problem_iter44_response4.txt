```python
import torch
from torch.nn.functional import softmax

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Normalize the demand vector by the vehicle capacity
    normalized_demands = demands / vehicle_capacity
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(normalized_demands - 1.0)
    
    # Normalize the distance matrix to avoid dominance of larger distances
    normalized_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Combine normalized distances and demand penalties
    combined_matrix = normalized_distance_matrix + penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_matrix))
    
    # Scale the emphasized matrix to emphasize constraints while keeping it balanced
    scale_factor = 1000
    scaled_emphasized_matrix = emphasized_matrix * scale_factor
    
    # Normalize the scaled emphasized matrix to ensure non-negativity and scale balance
    normalized_scaled_emphasized_matrix = softmax(scaled_emphasized_matrix, dim=1)
    
    # Balance the combined penalties with the normalized distances
    balanced_matrix = normalized_scaled_emphasized_matrix + (1 - normalized_scaled_emphasized_matrix) * penalty_matrix
    
    # Transform the balanced matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -balanced_matrix
    
    return heuristics_matrix
```
