```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the penalty matrix to ensure non-negative values
    normalized_penalty_matrix = F.relu(penalty_matrix)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Normalize the distance penalty matrix to ensure non-negative values
    normalized_distance_penalty_matrix = F.relu(distance_penalty_matrix)
    
    # Combine the normalized demand and distance penalties into a single potential matrix
    potential_matrix = normalized_penalty_matrix + normalized_distance_penalty_matrix
    
    # Use a non-linear scaling function to convert penalties into heuristic values
    heuristics_matrix = torch.sigmoid(potential_matrix)
    
    # Adjust the heuristics matrix to ensure that the values are balanced
    adjusted_heuristics_matrix = (heuristics_matrix - torch.min(heuristics_matrix)) / (torch.max(heuristics_matrix) - torch.min(heuristics_matrix))
    
    # Invert the adjusted heuristics matrix to convert penalties into heuristic values
    heuristics_matrix = 1 - adjusted_heuristics_matrix
    
    return heuristics_matrix
```
