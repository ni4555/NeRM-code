```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the penalty for the difference between demand and vehicle capacity
    penalty = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty + distance_penalty_matrix
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = torch.nn.functional.normalize(potential_matrix, p=1, dim=1)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(normalized_potential_matrix))
    
    # Scale the emphasized matrix to ensure proper balance between demand and distance
    scaled_matrix = emphasized_matrix * (1 - 0.5) + distance_penalty_matrix * 0.5
    
    # Adjust the scaled matrix to ensure that the values are not too close to zero
    adjusted_scaled_matrix = scaled_matrix - torch.min(scaled_matrix)
    
    # Transform the adjusted scaled matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_scaled_matrix
    
    return heuristics_matrix
```
