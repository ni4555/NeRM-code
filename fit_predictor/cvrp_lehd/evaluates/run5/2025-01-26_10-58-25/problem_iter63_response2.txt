```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Introduce a diversity factor by considering the distance to the closest unvisited node
    diversity_factor = -torch.log(1 + torch.exp(torch.clamp(-distance_matrix, -10, 0)))
    
    # Introduce a density factor based on the inverse of the demands to prioritize high-density areas
    density_factor = 1 / (demands + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = -torch.abs(demands - vehicle_capacity) + distance_matrix
    
    # Emphasize the diversity and density factors in the potential matrix
    emphasized_potential_matrix = potential_matrix * (1 + diversity_factor) * density_factor
    
    # Normalize the emphasized potential matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_potential_matrix / emphasized_potential_matrix.sum(dim=1, keepdim=True)
    
    # Adjust the normalized emphasized matrix to ensure that the values are not too close to zero
    adjusted_normalized_matrix = normalized_emphasized_matrix - torch.min(normalized_emphasized_matrix)
    
    # Combine the adjusted normalized matrix with the diversity and density factors
    combined_matrix = adjusted_normalized_matrix * (1 + diversity_factor) * density_factor
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
