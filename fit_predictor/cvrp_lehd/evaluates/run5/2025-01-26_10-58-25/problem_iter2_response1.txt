```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()

    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the minimum distance from the depot to each customer
    min_distance_to_customer = torch.min(distance_matrix[0, 1:], dim=0).values

    # Calculate the minimum distance from each customer to the depot
    min_distance_from_customer = torch.min(distance_matrix[1:, 0], dim=0).values

    # Calculate the initial route cost without considering demands
    initial_route_cost = (distance_matrix[0, 1:].sum() + distance_matrix[1:, 0].sum())

    # Calculate the minimum additional cost for a vehicle to start at the depot, visit all customers, and return to the depot
    min_additional_cost = (len(demands) - 1) * total_demand

    # Calculate the heuristics values
    heuristics[0, 1:] = initial_route_cost - min_distance_to_customer
    heuristics[1:, 0] = initial_route_cost - min_distance_from_customer
    heuristics[1:, 1:] = heuristics[1:, 0] - distance_matrix[1:, 1:]

    # Adjust the heuristics based on capacity constraints
    for i in range(1, n):
        for j in range(1, n):
            if demands[i] <= total_demand - demands[:i].sum():
                heuristics[i, j] -= demands[i]

    return heuristics
```
