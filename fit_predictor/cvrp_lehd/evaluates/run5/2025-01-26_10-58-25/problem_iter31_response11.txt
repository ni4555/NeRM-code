```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.clamp(demands / vehicle_capacity, min=0, max=1)  # Clamp to avoid negative values
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.pow(potential_matrix, 0.5)  # Square root for a non-linear transformation
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix using a weighted sum
    combined_matrix = (0.8 * normalized_emphasized_matrix + 0.2 * distance_penalty_matrix)
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = torch.clamp(combined_matrix, min=1e-6)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = 1 - adjusted_combined_matrix
    
    return heuristics_matrix
```
