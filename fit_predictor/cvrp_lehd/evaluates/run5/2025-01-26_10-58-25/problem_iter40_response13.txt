```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Normalize the demands to the vehicle capacity
    normalized_demands = demands / vehicle_capacity
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(normalized_demands - 1)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Normalize the distance penalty matrix to balance with the demand penalties
    distance_penalty_matrix /= vehicle_capacity
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    log_sum_exp = torch.log(emphasized_matrix.exp().sum(dim=1, keepdim=True))
    normalized_emphasized_matrix = emphasized_matrix - log_sum_exp
    
    # Scale the normalized emphasized matrix to ensure it is not dominating the distance penalties
    scaled_emphasized_matrix = normalized_emphasized_matrix * 0.1
    
    # Combine the scaled emphasized matrix with the normalized distance penalty matrix to balance the scales
    combined_matrix = scaled_emphasized_matrix + distance_penalty_matrix
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
