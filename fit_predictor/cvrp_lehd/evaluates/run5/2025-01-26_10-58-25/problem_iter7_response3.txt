```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -distance_matrix
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply exponential to transform the potential matrix into a logarithmic scale
    # This helps in giving higher preference to edges with lower potential
    log_potential_matrix = torch.log(1 + torch.exp(potential_matrix))
    
    # Normalize the log potential matrix to ensure it has a consistent scale
    max_log_potential = log_potential_matrix.max()
    normalized_log_potential_matrix = log_potential_matrix - max_log_potential
    
    # Transform the normalized log potential matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_log_potential_matrix
    
    return heuristics_matrix
```
