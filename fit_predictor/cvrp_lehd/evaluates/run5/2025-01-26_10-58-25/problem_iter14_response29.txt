```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = 1.0
    
    # Calculate the difference between each pair of demands and the vehicle capacity
    demand_diff = (demands[:, None] - demands[None, :]).abs()
    
    # Create a penalty matrix where the penalty is the difference if it exceeds the vehicle capacity
    penalty_matrix = torch.clamp(demand_diff, max=vehicle_capacity)
    
    # Add the penalty matrix to the distance matrix to create a potential matrix
    potential_matrix = distance_matrix + penalty_matrix
    
    # Normalize the potential matrix into a probability distribution using softmax
    softmax_matrix = F.softmax(potential_matrix, dim=1)
    
    # Convert the probabilities into heuristics with negative values for undesirable edges
    heuristics_matrix = -(1 - softmax_matrix)
    
    return heuristics_matrix
```
