```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Initialize penalty matrices
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the potential matrix
    normalized_potential_matrix = (penalty_matrix + distance_penalty_matrix) / (penalty_matrix + distance_penalty_matrix).sum(dim=1, keepdim=True)
    
    # Introduce controlled randomness
    random_matrix = torch.randn_like(normalized_potential_matrix) * 0.1
    
    # Introduce mutation by adding random perturbations to the potential matrix
    mutation_matrix = torch.randn_like(normalized_potential_matrix) * 0.01
    
    # Update potential matrix with randomness and mutation
    updated_potential_matrix = normalized_potential_matrix + random_matrix + mutation_matrix
    
    # Apply non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(updated_potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the original distance penalty matrix
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
