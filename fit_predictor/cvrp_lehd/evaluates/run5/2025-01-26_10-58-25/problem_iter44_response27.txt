```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Normalize the demand vector by the vehicle capacity
    normalized_demands = demands / vehicle_capacity
    
    # Normalize the distance matrix to avoid dominance of larger distances
    normalized_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Create a potential matrix combining normalized distances and demand penalties
    demand_penalty_matrix = -torch.abs(normalized_demands - 1.0)
    potential_matrix = normalized_distance_matrix + demand_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the demand penalty matrix to balance the scales
    combined_matrix = normalized_emphasized_matrix + demand_penalty_matrix
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
