```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    
    # Precompute minimum distances from the depot to each customer and vice versa
    min_distance_to_customer = torch.min(distance_matrix[0, 1:], dim=0).values
    min_distance_from_customer = torch.min(distance_matrix[1:, 0], dim=0).values
    
    # Calculate the total distance for the complete route (depot -> customers -> depot)
    total_distance = (distance_matrix[0, 1:].sum() + distance_matrix[1:, 0].sum() + (n - 1) * total_demand)
    
    # Initialize heuristics matrix with negative infinity
    heuristics = torch.full((n, n), float('-inf'))
    
    # Set heuristics for the route from the depot to each customer and back
    heuristics[0, 1:] = total_distance - min_distance_to_customer
    heuristics[1:, 0] = total_distance - min_distance_from_customer
    
    # Set heuristics for edges between customers
    heuristics[1:, 1:] = heuristics[1:, 0] - distance_matrix[1:, 1:]
    
    # Normalize heuristics for consistency
    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())
    
    return heuristics
```
