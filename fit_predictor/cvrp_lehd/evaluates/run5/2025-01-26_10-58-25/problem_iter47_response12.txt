```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Use a non-linear transformation to emphasize constraints, such as Huber loss
    huber_loss = torch.clamp(penalty_matrix, min=0) ** 2 / 2
    emphasized_matrix = huber_loss + distance_penalty_matrix
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = (1 - 0.3) * normalized_emphasized_matrix + 0.3 * distance_penalty_matrix
    
    # Apply a threshold to filter out edges with low potential
    threshold_matrix = combined_matrix >= 0.1
    
    # Create a heuristics matrix where desirable edges are high and undesirable edges are low
    heuristics_matrix = torch.where(threshold_matrix, combined_matrix, -torch.inf)
    
    return heuristics_matrix
```
