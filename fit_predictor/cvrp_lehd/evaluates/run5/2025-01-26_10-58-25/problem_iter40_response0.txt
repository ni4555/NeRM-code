```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(penalty_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Use the softplus function to ensure that all values are positive
    positive_scaled_emphasized_matrix = F.softplus(normalized_emphasized_matrix)
    
    # Combine the positive scaled emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = positive_scaled_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Normalize the combined matrix to ensure it sums to 1 over each row
    heuristics_matrix = combined_matrix / combined_matrix.sum(dim=1, keepdim=True)
    
    return heuristics_matrix
```
