```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Use a weighted sum of penalty and distance matrices to blend metrics
    combined_potential = 0.3 * penalty_matrix + 0.7 * distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_potential))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Ensure diversity by occasionally flipping signs of the penalties to avoid local optima
    diversity_matrix = torch.where(torch.rand_like(distance_matrix) < 0.1, -normalized_emphasized_matrix, normalized_emphasized_matrix)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix
    combined_matrix = diversity_matrix + 0.5 * distance_penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
