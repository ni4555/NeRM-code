```python
import torch
from torch.nn.functional import sigmoid

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = 1.0
    
    # Create a matrix with negative infinity for edges where demand is greater than vehicle capacity
    demand_matrix = torch.clamp(-torch.cumsum(demands, dim=0) / vehicle_capacity, min=float('-inf'))
    
    # Adjust the matrix for edges where the demand is exactly zero
    demand_matrix[torch.where(demands == 0)] = 0
    
    # Combine the distance matrix and the adjusted demand matrix to create a potential function
    potential_matrix = distance_matrix + demand_matrix
    
    # Normalize the potential matrix using a sigmoid function to ensure values are between 0 and 1
    transformed_potential_matrix = sigmoid(potential_matrix)
    
    # Subtract from 1 to promote the selection of edges with lower potential and higher distances
    # This will result in negative values for undesirable edges and positive values for promising ones
    heuristics_matrix = 1 - transformed_potential_matrix
    
    return heuristics_matrix
```
