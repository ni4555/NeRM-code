```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Introduce a small noise to the demand vector to balance randomness
    noise_demand = torch.randn_like(demands) * 1e-4
    
    # Calculate penalties based on the deviation from the vehicle capacity
    penalty_matrix = -torch.abs(demands + noise_demand - vehicle_capacity)
    
    # Use a non-linear transformation for distance to emphasize closer nodes
    distance_penalty_matrix = -torch.sqrt(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Normalize potential matrix to control scale and ensure non-negativity
    normalized_potential_matrix = potential_matrix / potential_matrix.sum(dim=1, keepdim=True)
    
    # Add a Gaussian noise to the normalized potential matrix
    noise_matrix = torch.randn_like(normalized_potential_matrix) * 1e-2
    
    # Introduce a second noise term for further randomness
    second_noise_matrix = torch.randn_like(normalized_potential_matrix) * 1e-2
    
    # Add both noise terms to the normalized potential matrix
    combined_potential_matrix = normalized_potential_matrix + noise_matrix + second_noise_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.log(1 + combined_potential_matrix)
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -emphasized_matrix
    
    return heuristics_matrix
```
