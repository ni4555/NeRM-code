```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Introduce a non-linear scaling factor to further emphasize constraints
    non_linear_factor = torch.log1p(torch.abs(penalty_matrix + distance_penalty_matrix))
    
    # Normalize the non-linear factor to ensure non-negativity and scale balance
    normalized_non_linear_factor = F.softmax(non_linear_factor, dim=1)
    
    # Balance the weights of the penalties to favor constraints over distance
    combined_matrix = (0.6 * normalized_non_linear_factor + 0.4 * distance_penalty_matrix)
    
    # Apply a threshold to penalize edges that are both far and demand-constrained
    threshold = torch.max(penalty_matrix, distance_penalty_matrix)
    combined_matrix = torch.where(combined_matrix > threshold, combined_matrix, -combined_matrix)
    
    # Normalize the combined matrix to ensure non-negativity and scale balance
    normalized_combined_matrix = F.softmax(combined_matrix, dim=1)
    
    # Convert the normalized combined matrix to a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_combined_matrix
    
    return heuristics_matrix
```
