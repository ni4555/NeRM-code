```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Use a non-linear transformation on the distance matrix to emphasize closer distances
    distance_matrix_non_linear = torch.sqrt(distance_matrix + 1e-6)  # Adding a small constant to avoid sqrt(0)
    
    # Normalize the distance matrix to ensure all values are within a certain range
    distance_matrix_normalized = (distance_matrix_non_linear - distance_matrix_non_linear.min()) / (distance_matrix_non_linear.max() - distance_matrix_non_linear.min())
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_matrix_normalized
    
    # Use exponential transformation to further emphasize lower potential values
    potential_matrix_exp = torch.exp(potential_matrix)
    
    # Apply softmax to normalize and transform the potential matrix
    softmax_matrix = F.softmax(potential_matrix_exp, dim=1)
    
    # Adjust the softmax matrix to ensure that the values are not too close to zero
    adjusted_softmax_matrix = softmax_matrix - torch.min(softmax_matrix)
    
    # Transform the adjusted softmax matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_softmax_matrix
    
    return heuristics_matrix
```
