```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Emphasize the importance of the constraints by using a logarithmic transformation
    emphasized_matrix = torch.log(torch.exp(potential_matrix) + 1e-6)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Introduce a balancing factor to avoid dominance of one penalty over the other
    balancing_factor = torch.max(normalized_emphasized_matrix) / torch.max(distance_penalty_matrix)
    balanced_normalized_matrix = normalized_emphasized_matrix / balancing_factor
    
    # Scale the balanced matrix with the distance penalties
    scaled_balanced_matrix = balanced_normalized_matrix * distance_penalty_matrix
    
    # Adjust the scaled matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = scaled_balanced_matrix - torch.min(scaled_balanced_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
