```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the penalty matrix to avoid redundancy in the final heuristics matrix
    normalized_penalty_matrix = F.softmax(penalty_matrix, dim=1)
    
    # Calculate the log of the distance matrix with a small constant to avoid log(0)
    distance_log_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine the normalized penalty and distance log into a potential matrix
    potential_matrix = normalized_penalty_matrix * distance_log_matrix
    
    # Apply a non-linear transformation to emphasize constraints and balance the scale
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Scale the normalized emphasized matrix and the distance log matrix to balance the scales
    scaled_combined_matrix = (0.7 * normalized_emphasized_matrix) + (0.3 * distance_log_matrix)
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = scaled_combined_matrix - torch.min(scaled_combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
