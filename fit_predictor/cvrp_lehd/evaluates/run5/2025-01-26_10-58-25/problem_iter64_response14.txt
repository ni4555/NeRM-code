```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix using logarithmic scaling
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Introduce diversity metric by considering the average distance to the depot
    diversity_metric = distance_matrix[:, 0] / distance_matrix.sum(dim=1, keepdim=True)
    
    # Combine the penalty matrix, distance penalty matrix, and diversity metric into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix + diversity_metric
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Adjust the normalized emphasized matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = normalized_emphasized_matrix - torch.min(normalized_emphasized_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
