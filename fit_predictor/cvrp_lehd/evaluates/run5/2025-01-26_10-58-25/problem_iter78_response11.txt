```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a combined penalty matrix for demand constraint violations and distance
    combined_penalty_matrix = torch.exp(-torch.abs(torch.abs(demands) - vehicle_capacity))
    
    # Normalize the combined penalty matrix to ensure consistency with the distance matrix
    normalized_combined_penalty_matrix = combined_penalty_matrix / (combined_penalty_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Add Gaussian noise to the normalized combined penalty matrix for diversity
    noise_matrix = torch.randn_like(normalized_combined_penalty_matrix) * 1e-2
    
    # Combine the normalized penalty matrix with the distance matrix
    combined_matrix = normalized_combined_penalty_matrix + (distance_matrix + 1e-6) * torch.log(1 + 1e-6)
    
    # Introduce further diversity by adding noise to the combined matrix
    additional_noise_matrix = torch.randn_like(combined_matrix) * 1e-2
    
    # Adjust the combined matrix to account for additional randomness
    adjusted_combined_matrix = combined_matrix + additional_noise_matrix
    
    # Normalize the adjusted combined matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = adjusted_combined_matrix / (adjusted_combined_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Transform the normalized emphasized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_emphasized_matrix
    
    return heuristics_matrix
```
