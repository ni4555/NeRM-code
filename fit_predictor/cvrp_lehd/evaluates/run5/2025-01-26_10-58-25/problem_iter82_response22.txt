```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = potential_matrix / (potential_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(normalized_potential_matrix) * 1e-2
    
    # Introduce diversity by ensuring a minimum threshold for the potential values
    min_value = torch.min(normalized_potential_matrix)
    normalized_potential_matrix = torch.where(normalized_potential_matrix < min_value, 
                                              normalized_potential_matrix + min_value, 
                                              normalized_potential_matrix)
    
    # Limit noise to avoid overly random solutions
    noise_limit = torch.clamp(1 - normalized_potential_matrix.sum(dim=1, keepdim=True), min=0)
    limited_noise_matrix = noise_matrix * noise_limit
    
    # Combine the normalized potential matrix with limited noise
    combined_matrix = normalized_potential_matrix + limited_noise_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_matrix))
    
    # Introduce a second noise term for further randomness without overwhelming the constraints
    second_noise_matrix = torch.randn_like(emphasized_matrix) * 1e-3
    adjusted_second_noise_matrix = second_noise_matrix * noise_limit
    
    # Adjust the emphasized matrix to account for additional randomness
    adjusted_emphasized_matrix = emphasized_matrix + adjusted_second_noise_matrix
    
    # Transform the adjusted emphasized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_emphasized_matrix
    
    return heuristics_matrix
```
