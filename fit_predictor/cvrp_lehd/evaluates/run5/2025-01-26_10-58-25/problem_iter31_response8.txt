```python
import torch
from torch.nn.functional import softplus, softmax

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = torch.where(demands > vehicle_capacity, 
                                (vehicle_capacity - demands) * 10, 
                                torch.zeros_like(demands))
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Non-linear transformation that penalizes heavily larger demand differences and small distances
    transformed_potential_matrix = softplus(potential_matrix / 2)
    
    # Apply a scaling to emphasize distance constraints relative to demand
    transformed_potential_matrix = transformed_potential_matrix * distance_penalty_matrix
    
    # Normalize the transformed potential matrix to ensure non-negativity
    normalized_emphasized_matrix = softmax(transformed_potential_matrix, dim=1)
    
    # Use distance penalty matrix as the second component in a weighted sum
    combined_matrix = 0.8 * normalized_emphasized_matrix + 0.2 * distance_penalty_matrix
    
    # Ensure the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
