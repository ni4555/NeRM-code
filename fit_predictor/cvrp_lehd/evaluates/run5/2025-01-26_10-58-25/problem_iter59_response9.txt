```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Introduce a blend factor to balance the penalties
    blend_factor = 0.3
    
    # Create a demand penalty matrix for constraint violations
    demand_penalty_matrix = blend_factor * torch.abs(demands - vehicle_capacity)
    
    # Create a normalized distance penalty matrix
    distance_penalty_matrix = (1 - blend_factor) * -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize the most constrained edges
    emphasized_matrix = torch.exp(-torch.pow(potential_matrix, 0.5))
    
    # Normalize the emphasized matrix to maintain a balance of scales
    normalized_emphasized_matrix = emphasized_matrix / (emphasized_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Integrate the normalized matrix with the original distances to maintain diversity
    combined_matrix = normalized_emphasized_matrix + distance_penalty_matrix
    
    # Blend the combined matrix with the demand penalties to encourage constraint satisfaction
    heuristics_matrix = (1 - blend_factor) * combined_matrix + blend_factor * demand_penalty_matrix
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -heuristics_matrix
    
    return heuristics_matrix
```
