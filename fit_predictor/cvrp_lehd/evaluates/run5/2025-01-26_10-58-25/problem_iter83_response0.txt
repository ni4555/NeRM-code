```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Normalize the potential matrix for scale balance
    normalized_potential_matrix = potential_matrix / potential_matrix.sum(dim=1, keepdim=True)
    
    # Introduce a controlled amount of randomness by adding Gaussian noise
    noise_matrix = torch.randn_like(normalized_potential_matrix) * 1e-1
    
    # Combine the original normalized potential matrix with noise
    combined_potential_matrix = normalized_potential_matrix + noise_matrix
    
    # Control randomness by capping the values to maintain diversity
    capped_combined_matrix = torch.clamp(combined_potential_matrix, min=-1.0, max=1.0)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(capped_combined_matrix))
    
    # Introduce a diversity mechanism by balancing with a random permutation
    diversity_factor = torch.rand_like(emphasized_matrix)
    balanced_diversity_matrix = emphasized_matrix + torch.randn_like(emphasized_matrix) * diversity_factor * 1e-2
    
    # Normalize the balanced diversity matrix
    normalized_balanced_matrix = balanced_diversity_matrix / balanced_diversity_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized balanced matrix with the distance penalty matrix
    combined_matrix = normalized_balanced_matrix + 0.5 * distance_penalty_matrix
    
    # Apply a small mutation by adding a controlled random perturbation
    mutation_factor = torch.rand_like(combined_matrix)
    mutated_combined_matrix = combined_matrix + torch.randn_like(combined_matrix) * 1e-3 * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
