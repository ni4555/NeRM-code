```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(potential_matrix) * 1e-2
    
    # Control randomness by limiting the noise range
    noise_matrix = torch.clamp(noise_matrix, min=-0.1, max=0.1)
    
    # Combine the original potential matrix with controlled noise
    combined_potential_matrix = potential_matrix + noise_matrix
    
    # Emphasize constraints by applying a logarithmic transformation to the potential matrix
    emphasized_matrix = torch.log(1 + combined_potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Balance diversity by adding a small random perturbation with a controlled factor
    perturbation_factor = torch.rand_like(normalized_emphasized_matrix)
    perturbation = torch.randn_like(normalized_emphasized_matrix) * 1e-4 * perturbation_factor
    balanced_matrix = normalized_emphasized_matrix + perturbation
    
    # Introduce mutation by adding a small random perturbation to the matrix
    mutation_factor = torch.rand_like(balanced_matrix)
    mutated_matrix = balanced_matrix + torch.randn_like(balanced_matrix) * 1e-3 * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_matrix
    
    return heuristics_matrix
```
