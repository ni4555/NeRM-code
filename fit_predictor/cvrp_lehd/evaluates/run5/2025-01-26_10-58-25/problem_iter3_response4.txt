```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = 1.0
    
    # Create a matrix with negative infinity for edges where demand is greater than vehicle capacity
    demand_matrix = -torch.clamp(torch.cumsum(demands, dim=0) / vehicle_capacity, max=0)
    
    # Adjust the matrix for edges where the demand is exactly zero
    demand_matrix[torch.where(demands == 0)] = 0
    
    # Calculate the sum of the first row of the demand matrix to adjust the distance matrix
    demand_sum_first_row = demand_matrix[0].sum()
    
    # Add the demand penalty to the distance matrix
    distance_matrix += demand_matrix + demand_sum_first_row
    
    # Normalize the distance matrix by dividing with the sum of the demand matrix
    # This balances the impact of distance and demand
    normalized_distance_matrix = distance_matrix / demands.sum()
    
    # Softmax over each row to ensure the sum of each row is 1 (probability distribution)
    softmax_matrix = F.softmax(normalized_distance_matrix, dim=1)
    
    # Subtract from 1 to promote the selection of edges with lower potential and higher distances
    # This will result in negative values for undesirable edges and positive values for promising ones
    heuristics_matrix = 1 - softmax_matrix
    
    return heuristics_matrix
```
