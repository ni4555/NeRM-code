```python
import torch
from torch.nn.functional import log_softmax

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints using ReLU
    emphasized_matrix = torch.relu(potential_matrix)
    
    # Use a scaled inverse of the emphasized matrix to avoid dominance and normalize
    with torch.no_grad():
        emphasized_matrix /= emphasized_matrix.sum(dim=1, keepdim=True)
    normalized_emphasized_matrix = (emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)).clamp(min=1e-6)
    
    # Combine the scaled inverse emphasized matrix with the distance penalty matrix
    combined_matrix = (1 - 0.5) * normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Normalize the combined matrix using log-softmax
    normalized_combined_matrix = log_softmax(combined_matrix, dim=1)
    
    # Transform the normalized combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_combined_matrix
    
    return heuristics_matrix
```
