```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the distance-based penalty
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Calculate the normalized demand difference from the vehicle capacity
    normalized_demand_diff = (demands - vehicle_capacity) / (vehicle_capacity + 1e-6)
    
    # Apply a quadratic function to the normalized demand difference to emphasize large deviations
    quadratic_demand_penalty = torch.pow(normalized_demand_diff, 2)
    
    # Combine the distance and quadratic demand penalties into a single potential matrix
    potential_matrix = distance_penalty_matrix + quadratic_demand_penalty
    
    # Apply a sigmoid function to scale the potential matrix between 0 and 1
    scaled_potential_matrix = torch.sigmoid(potential_matrix)
    
    # Normalize the scaled potential matrix to ensure non-negativity and balance
    normalized_scaled_potential_matrix = F.softmax(scaled_potential_matrix, dim=1)
    
    # Apply a logarithmic transformation to ensure that all values are positive
    log_normalized_scaled_potential_matrix = torch.log(normalized_scaled_potential_matrix)
    
    # Adjust the log normalized scaled potential matrix to ensure values are not too close to zero
    adjusted_log_normalized_scaled_potential_matrix = log_normalized_scaled_potential_matrix - torch.min(log_normalized_scaled_potential_matrix)
    
    # Combine the adjusted log normalized scaled potential matrix with the distance penalty matrix
    combined_matrix = (1 - 0.7) * adjusted_log_normalized_scaled_potential_matrix + 0.7 * distance_penalty_matrix
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
