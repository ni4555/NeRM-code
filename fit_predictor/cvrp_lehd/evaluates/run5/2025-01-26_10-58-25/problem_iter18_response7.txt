```python
import torch
from torch import nn, F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Non-linearly transform demand penalties using the hyperbolic tangent
    demand_penalty_matrix = torch.tanh((demands / vehicle_capacity) - 1)
    
    # Apply log-softmax to distance matrix to ensure non-negative values and promote diversity
    distance_penalty_matrix = F.log_softmax(-torch.log(distance_matrix + 1e-6), dim=1)
    
    # Combine the transformed demand and distance penalties
    potential_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Normalize the potential matrix to a range between 0 and 1, emphasizing larger penalties
    normalized_potential_matrix = F.softmax(potential_matrix, dim=1)
    
    # Adjust to ensure contrast between desirable and undesirable edges
    min_value = torch.min(normalized_potential_matrix)
    adjusted_matrix = normalized_potential_matrix - min_value
    
    # Convert the normalized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -2 * (1 - adjusted_matrix)
    
    return heuristics_matrix
```
