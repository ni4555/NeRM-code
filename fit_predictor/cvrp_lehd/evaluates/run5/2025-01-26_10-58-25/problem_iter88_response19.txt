```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(distance_penalty_matrix) * 1e-2
    
    # Combine the penalty matrices with noise to balance demand and distance considerations
    combined_penalty_matrix = penalty_matrix + distance_penalty_matrix + noise_matrix
    
    # Normalize the combined penalty matrix to ensure non-negativity and scale balance
    normalized_combined_penalty_matrix = combined_penalty_matrix / (combined_penalty_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Introduce a small random perturbation for mutation
    mutation_matrix = torch.randn_like(normalized_combined_penalty_matrix) * 1e-3
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_combined_penalty_matrix + mutation_matrix
    
    return heuristics_matrix
```
