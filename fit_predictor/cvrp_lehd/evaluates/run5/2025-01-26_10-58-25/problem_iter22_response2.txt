```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()

    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)

    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)

    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix

    # Apply a non-linear transformation to emphasize constraints
    # Use ReLU to emphasize larger penalties and smooth out smaller penalties
    emphasized_matrix = torch.relu(potential_matrix)

    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)

    # Adjust the normalized matrix to ensure that the values are not too close to zero
    # This helps in distinguishing between promising and undesirable edges
    adjusted_normalized_matrix = normalized_emphasized_matrix - torch.min(normalized_emphasized_matrix)

    # Use the distance penalty matrix to balance the scales of the heuristics
    balanced_matrix = adjusted_normalized_matrix * distance_penalty_matrix

    # Transform the balanced matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -balanced_matrix

    # Adjust heuristics for the depot node (index 0) by considering only outward edges
    outward_edges = torch.diag(adjusted_normalized_matrix)
    heuristics_matrix[:, 0] = outward_edges - 1
    heuristics_matrix[0, :] = outward_edges - 1

    return heuristics_matrix
```
