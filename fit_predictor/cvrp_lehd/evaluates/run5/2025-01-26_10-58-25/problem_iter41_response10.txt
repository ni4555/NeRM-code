```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Apply non-linear scaling to the demands and distance matrix
    scaled_demands = 1 / (1 + torch.abs(demands - vehicle_capacity))
    scaled_distance_matrix = 1 / (1 + torch.log(distance_matrix + 1e-6))
    
    # Combine scaled demands and distances using a weighted sum to emphasize constraints
    combined_matrix = 0.6 * scaled_demands + 0.4 * scaled_distance_matrix
    
    # Normalize the combined matrix to maintain consistency
    normalized_combined_matrix = F.softmax(combined_matrix, dim=1)
    
    # Scale the normalized matrix to ensure values are not too small
    scaled_normalized_matrix = normalized_combined_matrix * (torch.max(normalized_combined_matrix) / 0.1)
    
    # Subtract the scaled normalized matrix from the maximum to ensure negative values for undesirable edges
    heuristics_matrix = -torch.max(scaled_normalized_matrix) + scaled_normalized_matrix
    
    return heuristics_matrix
```
