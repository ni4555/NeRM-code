```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the penalty matrix by its maximum value to ensure all penalties are in a similar range
    penalty_matrix_normalized = penalty_matrix / torch.max(penalty_matrix)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Normalize the distance penalty matrix by its maximum value to ensure all penalties are in a similar range
    distance_penalty_matrix_normalized = distance_penalty_matrix / torch.max(distance_penalty_matrix)
    
    # Combine the normalized penalty and distance penalty matrices
    combined_matrix = penalty_matrix_normalized + distance_penalty_matrix_normalized
    
    # Use a non-linear transformation to emphasize constraints, which helps to balance the penalties
    emphasized_matrix = torch.relu(combined_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Ensure the matrix is still based on the distance information to guide the path selection
    distance_factor = distance_matrix / torch.max(distance_matrix)
    
    # Combine the normalized emphasized matrix with the distance factor to balance the scales
    combined_matrix = (1 - 0.3) * normalized_emphasized_matrix + 0.3 * distance_factor
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
