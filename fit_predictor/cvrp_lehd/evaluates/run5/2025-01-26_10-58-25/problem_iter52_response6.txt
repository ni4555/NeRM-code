```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations using linear penalties
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the penalty matrix to ensure non-negativity
    normalized_penalty_matrix = F.softmax(penalty_matrix, dim=1)
    
    # Normalize the distance penalty matrix to ensure it has similar scale to normalized_penalty_matrix
    normalized_distance_matrix = F.softmax(distance_penalty_matrix, dim=1)
    
    # Combine the normalized penalty matrix with the normalized distance penalty matrix
    combined_matrix = (1 - 0.5) * normalized_penalty_matrix + 0.5 * normalized_distance_matrix
    
    # Apply a soft threshold to enforce that promising edges are emphasized while not overly dominating
    soft_threshold_matrix = torch.clamp(combined_matrix, min=0.5)
    
    # Transform the soft thresholded matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -torch.sigmoid(soft_threshold_matrix - 1)
    
    # Normalize the heuristics matrix to ensure it sums to 1 over each row
    heuristics_matrix /= heuristics_matrix.sum(dim=1, keepdim=True)
    
    return heuristics_matrix
```
