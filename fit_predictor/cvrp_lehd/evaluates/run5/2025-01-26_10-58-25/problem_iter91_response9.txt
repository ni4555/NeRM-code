```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Use a more nuanced distance-based penalty matrix, considering a power-law
    distance_penalty_matrix = -torch.pow(distance_matrix + 1e-6, 1.5)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(potential_matrix) * 1e-2
    
    # Combine the original potential matrix with noise
    combined_potential_matrix = potential_matrix + noise_matrix
    
    # Apply a non-linear transformation that emphasizes constraints
    # Using a logarithmic transformation for a smooth transition
    emphasized_matrix = torch.log(1 + combined_potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Introduce a second level of non-linear transformation to the normalized matrix
    # Using a softplus transformation to ensure positive values
    second_emphasized_matrix = torch.nn.functional.softplus(normalized_emphasized_matrix)
    
    # Combine the second emphasized matrix with the distance penalty matrix
    combined_matrix = second_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Introduce a third noise term for further randomness
    third_noise_matrix = torch.randn_like(combined_matrix) * 1e-2
    
    # Adjust the combined matrix to account for additional randomness
    adjusted_combined_matrix = combined_matrix + third_noise_matrix
    
    # Apply a final non-linear transformation to emphasize the most promising edges
    final_emphasized_matrix = torch.exp(-torch.abs(adjusted_combined_matrix))
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -final_emphasized_matrix
    
    return heuristics_matrix
```
