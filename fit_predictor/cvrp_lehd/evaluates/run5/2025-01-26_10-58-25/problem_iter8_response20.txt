```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = 1.0
    
    # Calculate the absolute difference in demand between each pair of customers
    demand_diff = torch.abs(demands[:, None] - demands[None, :])
    
    # Apply a penalty to the demand difference if it exceeds the vehicle capacity
    penalty = torch.clamp(demand_diff, max=vehicle_capacity)
    
    # Combine the penalty with the distance matrix
    combined_matrix = distance_matrix + penalty
    
    # Normalize the combined matrix to ensure the sum of each row is 1 by using softmax
    softmax_matrix = F.softmax(combined_matrix, dim=1)
    
    # Subtract from 1 to promote the selection of edges with lower combined cost
    heuristics_matrix = 1 - softmax_matrix
    
    return heuristics_matrix
```
