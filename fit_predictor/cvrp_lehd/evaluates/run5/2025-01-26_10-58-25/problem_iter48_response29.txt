```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Use adaptive weighting for demand and distance, considering the relative importance
    demand_weight = 0.7
    distance_weight = 0.3
    combined_matrix = demand_weight * normalized_emphasized_matrix + distance_weight * distance_penalty_matrix
    
    # Apply a non-linear transformation to further emphasize the constraints
    heuristics_matrix = torch.relu(combined_matrix)
    
    # Scale the heuristics matrix to ensure non-negativity and balance
    min_val = heuristics_matrix.min()
    max_val = heuristics_matrix.max()
    scaled_heuristics_matrix = (heuristics_matrix - min_val) / (max_val - min_val)
    
    return scaled_heuristics_matrix
```
