```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate a penalty for each node that exceeds the vehicle capacity
    capacity_penalty = torch.clamp(demands - vehicle_capacity, min=0)
    
    # Calculate a distance penalty matrix to balance with demand penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine the capacity penalty and distance penalty into a single matrix
    combined_penalty_matrix = capacity_penalty + distance_penalty_matrix
    
    # Normalize the combined penalty matrix to give consistent scale
    normalized_penalty_matrix = combined_penalty_matrix / combined_penalty_matrix.sum()
    
    # Use a non-linear transformation to emphasize the penalties
    emphasized_normalized_penalty_matrix = torch.exp(-combined_penalty_matrix)
    
    # Normalize the emphasized matrix to maintain a non-negative scale
    normalized_emphasized_matrix = F.softmax(emphasized_normalized_penalty_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the original distance penalty matrix
    combined_matrix = (1 - 0.5) * normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Apply a final non-linear transformation to ensure desirable edges have positive values
    heuristics_matrix = torch.clamp(combined_matrix, min=0)
    
    return heuristics_matrix
```
