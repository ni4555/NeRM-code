```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the penalty matrix to balance with distance
    normalized_penalty_matrix = penalty_matrix / (penalty_matrix + distance_matrix)
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = normalized_penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Use a temperature-based cooling schedule to simulate a simulated annealing process
    temperature = 1.0
    for _ in range(50):  # Simulated annealing loop
        for i in range(distance_matrix.size(0)):
            for j in range(distance_matrix.size(1)):
                if i != j:
                    # Accept worse solutions with a probability that decreases with temperature
                    new_potential = emphasized_matrix[j] / temperature
                    current_potential = potential_matrix[i, j]
                    if new_potential > current_potential:
                        emphasized_matrix[i, j] = new_potential
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Adjust the normalized emphasized matrix to balance the scales
    adjusted_combined_matrix = normalized_emphasized_matrix / normalized_emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
