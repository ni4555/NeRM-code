```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Introduce a diversity factor to blend penalties and distances
    diversity_factor = 0.2
    blended_potential_matrix = (1 - diversity_factor) * penalty_matrix + diversity_factor * distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints and blend
    emphasized_matrix = torch.exp(-torch.abs(blended_potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Ensure non-negativity by adding the minimum value to all elements
    non_negative_normalized_matrix = normalized_emphasized_matrix + torch.min(normalized_emphasized_matrix)
    
    # Invert the normalized combined matrix to represent heuristics effectively
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -non_negative_normalized_matrix
    
    return heuristics_matrix
```
