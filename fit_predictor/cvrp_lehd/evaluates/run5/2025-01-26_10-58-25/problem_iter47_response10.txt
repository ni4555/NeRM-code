```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Introduce a demand penalty based on the distance from the depot
    demand_penalty = torch.log(1 / (demands + 1e-6))  # Avoid log(0) by adding a small constant
    
    # Introduce a distance penalty based on the remaining capacity
    remaining_capacity = demands / vehicle_capacity
    distance_penalty = -torch.log(distance_matrix + 1e-6)  # Avoid log(0) by adding a small constant
    distance_penalty = distance_penalty * (1 - remaining_capacity)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = demand_penalty + distance_penalty
    
    # Apply a non-linear transformation to the potential matrix
    emphasized_matrix = torch.exp(-potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Scale the normalized emphasized matrix to ensure non-zero values
    scaled_normalized_matrix = normalized_emphasized_matrix * torch.sum(normalized_emphasized_matrix)
    
    # Transform the scaled normalized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_normalized_matrix
    
    return heuristics_matrix
```
