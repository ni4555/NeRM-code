```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    demand_penalty_matrix = torch.log(1 + (demands - vehicle_capacity) / (vehicle_capacity / demands.numel()))
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = torch.log(1 + distance_matrix / torch.max(distance_matrix, torch.zeros_like(distance_matrix)))
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = potential_matrix / potential_matrix.sum(dim=1, keepdim=True)
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(normalized_potential_matrix) * 1e-2
    
    # Combine the original normalized potential matrix with noise
    combined_matrix = normalized_potential_matrix + noise_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_matrix))
    
    # Introduce mutation by adding a small random perturbation to the matrix
    mutation_factor = torch.rand_like(emphasized_matrix)
    mutated_matrix = emphasized_matrix + torch.randn_like(emphasized_matrix) * 1e-3 * mutation_factor
    
    # Final transformation into a heuristics matrix
    heuristics_matrix = -mutated_matrix
    
    return heuristics_matrix
```
