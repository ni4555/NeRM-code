```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate penalties for demand violations and distance
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine penalties with a weighted sum to balance their influence
    combined_penalty_matrix = 0.6 * demand_penalty_matrix + 0.4 * distance_penalty_matrix
    
    # Introduce randomness with Gaussian noise
    noise_matrix = torch.randn_like(combined_penalty_matrix) * 1e-2
    
    # Add noise to the combined penalty matrix
    noisy_combined_penalty_matrix = combined_penalty_matrix + noise_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(noisy_combined_penalty_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / (emphasized_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Introduce a second noise term for further randomness
    second_noise_matrix = torch.randn_like(normalized_emphasized_matrix) * 1e-2
    
    # Add the second noise term to the normalized matrix
    combined_matrix = normalized_emphasized_matrix + second_noise_matrix
    
    # Apply mutation by adding a small random perturbation
    mutation_factor = torch.rand_like(combined_matrix)
    mutated_combined_matrix = combined_matrix + torch.randn_like(combined_matrix) * 1e-3 * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
