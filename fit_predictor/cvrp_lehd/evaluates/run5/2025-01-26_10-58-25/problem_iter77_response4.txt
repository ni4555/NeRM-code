```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce randomness through shuffled indices
    n = distance_matrix.size(0)
    shuffled_indices = torch.randperm(n)
    random_index_pairs = torch.stack((shuffled_indices[:-1], shuffled_indices[1:]), dim=1)
    distance_matrix_shuffled = torch.index_select(distance_matrix, 0, random_index_pairs[0]) + \
                               torch.index_select(distance_matrix, 0, random_index_pairs[1])
    
    # Introduce randomness by adding shuffled distance matrix with a small standard deviation
    noise_matrix = (distance_matrix_shuffled - distance_matrix) * 1e-2
    
    # Combine the original potential matrix with noise
    combined_potential_matrix = potential_matrix + noise_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Introduce mutation by adding a small random perturbation to the matrix
    mutation_factor = torch.rand_like(combined_matrix)
    mutated_combined_matrix = combined_matrix + torch.randn_like(combined_matrix) * 1e-3 * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
