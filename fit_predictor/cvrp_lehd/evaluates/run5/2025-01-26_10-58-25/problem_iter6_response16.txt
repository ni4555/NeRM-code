```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = len(demands)
    vehicle_capacity = 1.0
    demand_matrix = -torch.cumsum(demands, dim=0) / vehicle_capacity
    demand_matrix = torch.clamp(demand_matrix, min=float('-inf'))
    demand_matrix[torch.where(demands == 0)] = float('-inf')
    
    # Incorporate a scaling factor to balance the impact of demand and distance
    balance_factor = 0.5
    scaled_distance_demand = distance_matrix + balance_factor * demand_matrix
    
    # Use a temperature parameter for the softmax function to control the randomness
    temperature = 1.0
    softmax_matrix = F.softmax(scaled_distance_demand / temperature, dim=1)
    heuristics_matrix = 1 - softmax_matrix
    
    return heuristics_matrix
```
