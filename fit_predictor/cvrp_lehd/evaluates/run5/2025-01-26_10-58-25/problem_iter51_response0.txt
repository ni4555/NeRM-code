```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the demand-based penalty directly
    demand_penalty = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the demand penalty to maintain a consistent scale
    normalized_demand_penalty = demand_penalty / demand_penalty.sum()
    
    # Use a simple inverse distance heuristic for balancing distance and demand
    distance_heuristic = 1.0 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero
    
    # Combine demand and distance heuristics with a balancing factor
    combined_heuristic = normalized_demand_penalty * 0.5 + distance_heuristic * 0.5
    
    # Ensure the combined heuristic matrix is non-negative
    heuristics_matrix = torch.relu(combined_heuristic)
    
    return heuristics_matrix
```
