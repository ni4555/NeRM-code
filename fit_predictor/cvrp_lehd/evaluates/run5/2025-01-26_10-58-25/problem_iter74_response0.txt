```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the penalty matrix to ensure non-negativity
    normalized_penalty_matrix = penalty_matrix / penalty_matrix.sum(dim=1, keepdim=True)
    
    # Combine normalized demand penalty and distance penalty
    combined_penalty_matrix = normalized_penalty_matrix + 0.5 * distance_penalty_matrix
    
    # Introduce a small noise term for randomness
    noise_matrix = torch.randn_like(combined_penalty_matrix) * 1e-3
    
    # Combine the penalty matrix with noise
    combined_matrix = combined_penalty_matrix + noise_matrix
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
