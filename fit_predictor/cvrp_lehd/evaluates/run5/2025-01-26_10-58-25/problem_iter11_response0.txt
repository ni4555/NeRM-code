```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Introduce a non-linear demand penalty that emphasizes feasibility
    non_linear_demand_penalty = penalty_matrix ** 2
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = non_linear_demand_penalty + distance_penalty_matrix
    
    # Normalize the potential matrix to ensure that the values are within a certain range
    normalized_potential_matrix = potential_matrix / (potential_matrix.sum() + 1e-6)
    
    # Apply an exponential function to the normalized potential matrix to introduce non-linearities
    # This will help in giving more weight to edges that are more feasible and closer to the vehicle capacity
    exponential_matrix = torch.exp(normalized_potential_matrix)
    
    # Transform the exponential matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -exponential_matrix
    
    return heuristics_matrix
```
