```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.relu(potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the scaled emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = normalized_emphasized_matrix + (1 - 0.5) * distance_penalty_matrix
    
    # Scale the combined matrix to ensure values are not too small
    scaled_combined_matrix = combined_matrix / combined_matrix.max()
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_combined_matrix
    
    return heuristics_matrix
```
