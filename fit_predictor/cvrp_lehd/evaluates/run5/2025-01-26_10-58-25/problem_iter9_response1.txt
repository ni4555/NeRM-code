```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to the potential matrix to emphasize lower values
    # This helps in giving more weight to feasible and low-cost edges
    transformed_potential_matrix = torch.clamp(potential_matrix, min=0)
    transformed_potential_matrix = torch.exp(transformed_potential_matrix)
    
    # Normalize the transformed potential matrix to maintain the balance between different dimensions
    normalized_transformed_matrix = transformed_potential_matrix / transformed_potential_matrix.sum(dim=1, keepdim=True)
    
    # Invert the normalized matrix to get a heuristic matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_transformed_matrix
    
    return heuristics_matrix
```
