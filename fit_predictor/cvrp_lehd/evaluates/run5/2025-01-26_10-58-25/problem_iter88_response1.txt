```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine penalties early to emphasize constraints
    combined_potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(combined_potential_matrix) * 1e-2
    
    # Combine penalties and noise
    combined_potential_matrix += noise_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / (emphasized_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Introduce diversity with multiple randomness sources
    second_noise_matrix = torch.randn_like(normalized_emphasized_matrix) * 1e-2
    mutation_factor = torch.rand_like(normalized_emphasized_matrix)
    mutation_matrix = torch.randn_like(normalized_emphasized_matrix) * 1e-3 * mutation_factor
    
    # Combine the normalized emphasized matrix with additional randomness and mutation
    combined_matrix = normalized_emphasized_matrix + second_noise_matrix + mutation_matrix
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
