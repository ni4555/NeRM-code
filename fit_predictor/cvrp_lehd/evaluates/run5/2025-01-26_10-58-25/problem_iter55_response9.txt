```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the distance matrix to balance out the influence of shorter distances
    normalized_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Blend demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + normalized_distance_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.relu(potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Blend the normalized emphasized matrix with the original penalty matrix
    blended_matrix = (1 - 0.5) * normalized_emphasized_matrix + 0.5 * penalty_matrix
    
    # Adjust the blended matrix to maintain a balance between demand and distance
    adjusted_blended_matrix = blended_matrix - torch.min(blended_matrix)
    
    # Transform the adjusted blended matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = adjusted_blended_matrix
```
