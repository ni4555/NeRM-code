```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations with exponential penalty
    penalty_matrix = -torch.exp(torch.abs(demands - vehicle_capacity))
    
    # Create a distance-based penalty matrix with a logarithmic transformation
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce randomness by adding Gaussian noise with a slightly larger standard deviation
    noise_matrix = torch.randn_like(potential_matrix) * 2e-2
    
    # Combine the original potential matrix with noise
    combined_potential_matrix = potential_matrix + noise_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.clamp(combined_potential_matrix, min=0) ** 1.5
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / (emphasized_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Introduce a second normalization step to account for potential numerical issues
    second_normalized_emphasized_matrix = normalized_emphasized_matrix / (normalized_emphasized_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix
    combined_matrix = second_normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Introduce a third noise term for additional randomness
    third_noise_matrix = torch.randn_like(combined_matrix) * 1e-2
    
    # Adjust the combined matrix to account for additional randomness
    adjusted_combined_matrix = combined_matrix + third_noise_matrix
    
    # Introduce mutation by adding a small random perturbation to the matrix
    mutation_factor = torch.rand_like(adjusted_combined_matrix)
    mutated_combined_matrix = adjusted_combined_matrix + torch.randn_like(adjusted_combined_matrix) * 1e-4 * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
