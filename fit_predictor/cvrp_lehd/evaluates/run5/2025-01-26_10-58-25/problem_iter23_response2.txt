```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the distance-based heuristic values
    distance_heuristics = -torch.log(distance_matrix + 1e-6)
    
    # Create a demand-based penalty that is high if the demand exceeds vehicle capacity
    demand_penalty = torch.where(demands > vehicle_capacity, torch.ones_like(demands), torch.zeros_like(demands)) * -vehicle_capacity
    
    # Use the inverse demand to penalize edges leading to capacity overload
    demand_based_heuristics = 1.0 / (demand_penalty + 1e-6)
    
    # Normalize the distance heuristic values
    distance_normalized = F.softmax(distance_heuristics, dim=1)
    
    # Combine the distance and demand-based heuristics using a weighted sum
    combined_heuristics = (1 - 0.2) * distance_normalized + 0.2 * demand_based_heuristics
    
    # Apply a logarithmic transformation to enhance the difference between promising and undesirable edges
    heuristics_matrix = torch.log(combined_heuristics + 1e-6)
    
    # Transform the heuristic matrix to ensure non-negativity
    heuristics_matrix = heuristics_matrix - torch.max(heuristics_matrix)
    
    return heuristics_matrix
```
