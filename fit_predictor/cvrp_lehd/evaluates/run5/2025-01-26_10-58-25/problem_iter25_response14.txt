```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity) / vehicle_capacity
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6) / distance_penalty_matrix.clamp(min=1e-6)
    
    # Apply non-linear transformation (hyperbolic tangent) to balance demand and distance penalties
    combined_potential = torch.tanh(penalty_matrix + distance_penalty_matrix)
    
    # Create a distance-based penalty to discourage short distance penalties to encourage diverse tours
    distance_penalty_for_tour_diversity = 1 - distance_matrix / torch.max(distance_matrix, dim=1, keepdim=True)[0]
    
    # Combine the demand-penalty transformed matrix with the distance penalty for tour diversity
    combined_potential += distance_penalty_for_tour_diversity
    
    # Scale down the potential matrix to ensure non-zero values and improve interpretability
    scaled_combined_potential = combined_potential * torch.logsumexp(combined_potential, dim=1, keepdim=True) - combined_potential
    
    # Add the original distances to ensure that the heuristics are bounded below the real distances
    scaled_combined_potential += distance_matrix
    
    # Ensure non-negative values and scale to make the values more discriminative
    heuristics_matrix = F.relu(scaled_combined_potential) - torch.min(F.relu(scaled_combined_potential), dim=1, keepdim=True)[0]
    
    return heuristics_matrix
```
