```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Balance the scales between demand-based and distance-based penalties
    balanced_penalty_matrix = 0.5 * (normalized_emphasized_matrix + distance_penalty_matrix)
    
    # Adjust the balanced penalty matrix to ensure values are not too close to zero
    adjusted_balanced_penalty_matrix = balanced_penalty_matrix - torch.min(balanced_penalty_matrix)
    
    # Transform the adjusted balanced penalty matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_balanced_penalty_matrix
    
    return heuristics_matrix
```
