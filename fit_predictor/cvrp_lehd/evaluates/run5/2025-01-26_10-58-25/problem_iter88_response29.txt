```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create penalty matrices for demand and distance constraints
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the demand penalty matrix to maintain balance
    normalized_demand_penalty_matrix = demand_penalty_matrix / demand_penalty_matrix.sum(dim=1, keepdim=True)
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(normalized_demand_penalty_matrix) * 1e-2
    
    # Combine the normalized demand penalty matrix with noise
    combined_demand_penalty_matrix = normalized_demand_penalty_matrix + noise_matrix
    
    # Emphasize constraints by applying a non-linear transformation
    emphasized_combined_demand_penalty_matrix = torch.exp(-torch.abs(combined_demand_penalty_matrix))
    
    # Combine the emphasized demand penalty matrix with the distance penalty matrix
    combined_potential_matrix = emphasized_combined_demand_penalty_matrix + distance_penalty_matrix
    
    # Normalize the combined potential matrix to ensure non-negativity and scale balance
    normalized_combined_potential_matrix = combined_potential_matrix / combined_potential_matrix.sum(dim=1, keepdim=True)
    
    # Control noise by introducing a second noise term with a limited impact
    noise_limit = torch.clamp(1 - normalized_combined_potential_matrix.sum(dim=1, keepdim=True), min=0)
    second_noise_matrix = torch.randn_like(normalized_combined_potential_matrix) * 1e-2
    controlled_noise_matrix = second_noise_matrix * noise_limit
    
    # Combine the normalized combined potential matrix with the controlled noise
    final_potential_matrix = normalized_combined_potential_matrix + controlled_noise_matrix
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -final_potential_matrix
    
    return heuristics_matrix
```
