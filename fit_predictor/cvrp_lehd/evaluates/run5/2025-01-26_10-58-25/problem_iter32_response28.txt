```python
import torch
from torch.nn.functional import softmax, exp, relu

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = softmax(emphasized_matrix, dim=1)
    
    # Balance the scales between the normalized emphasized matrix and the distance penalty matrix
    balanced_matrix = (1 - 0.5) * normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Adjust the balanced matrix to ensure that the values are not too close to zero
    adjusted_balanced_matrix = balanced_matrix - torch.min(balanced_matrix)
    
    # Transform the adjusted balanced matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_balanced_matrix
    
    return heuristics_matrix
```
