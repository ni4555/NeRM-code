```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = 1.0
    
    # Calculate the absolute difference between each pair of demands
    demand_diff = torch.abs(demands[:, None] - demands[None, :])
    
    # Apply a penalty based on the vehicle capacity
    penalty_matrix = torch.clamp(demand_diff, max=vehicle_capacity)
    
    # Add the penalty to the distance matrix to create a potential matrix
    potential_matrix = distance_matrix + penalty_matrix
    
    # Normalize the potential matrix into a probability distribution using softmax
    softmax_matrix = F.softmax(potential_matrix, dim=1)
    
    # Invert the probabilities to get negative values for undesirable edges
    heuristics_matrix = -softmax_matrix
    
    return heuristics_matrix
```
