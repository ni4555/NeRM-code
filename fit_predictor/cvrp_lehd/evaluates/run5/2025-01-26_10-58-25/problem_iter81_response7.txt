```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Introduce randomness and balance demand penalties early
    randomness_factor = torch.rand_like(demands)
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity) + 0.1 * randomness_factor
    
    # Normalize for scale using the demands matrix
    normalized_demand_penalty_matrix = (demand_penalty_matrix - demand_penalty_matrix.mean()) / demand_penalty_matrix.std()
    
    # Emphasize constraints with non-linear transformations
    emphasis_factor = torch.exp(-torch.abs(demand_penalty_matrix))
    
    # Use the log of the distance to balance with the non-linear transformation
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine transformed demand and distance penalties
    combined_penalty_matrix = normalized_demand_penalty_matrix * emphasis_factor + distance_penalty_matrix
    
    # Control randomness by adding Gaussian noise with a standard deviation related to the scale of penalties
    noise_matrix = torch.randn_like(combined_penalty_matrix) * (combined_penalty_matrix.std() * 1e-2)
    
    # Introduce a second noise term for additional randomness
    second_noise_matrix = torch.randn_like(combined_penalty_matrix) * (combined_penalty_matrix.std() * 1e-2)
    
    # Combine the noise into the combined penalty matrix
    final_penalty_matrix = combined_penalty_matrix + noise_matrix + second_noise_matrix
    
    # Mutation through non-linear transformation
    mutated_final_penalty_matrix = torch.relu(final_penalty_matrix)
    
    # Normalize the matrix to ensure non-negativity and scale balance
    normalized_heuristics_matrix = mutated_final_penalty_matrix / mutated_final_penalty_matrix.sum(dim=1, keepdim=True)
    
    # Final transformation into a heuristics matrix
    heuristics_matrix = normalized_heuristics_matrix * demands.unsqueeze(0) + distance_matrix
    heuristics_matrix = heuristics_matrix - heuristics_matrix.max(dim=1)[0].unsqueeze(1)  # Ensure non-negative values
    
    return heuristics_matrix
```
