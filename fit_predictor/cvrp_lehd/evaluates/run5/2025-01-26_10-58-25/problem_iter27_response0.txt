```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Use a non-linear transformation to emphasize demand constraints more than distance
    emphasized_demand_matrix = torch.exp(-torch.abs(penalty_matrix))
    
    # Use a linear transformation for distance penalties
    linear_distance_penalty_matrix = distance_penalty_matrix
    
    # Combine the emphasized demand matrix and linear distance penalty matrix
    combined_matrix = emphasized_demand_matrix + linear_distance_penalty_matrix
    
    # Normalize the combined matrix to ensure non-negativity and scale balance
    normalized_combined_matrix = F.softmax(combined_matrix, dim=1)
    
    # Scale the normalized matrix to ensure that the values are not too close to zero
    scaled_combined_matrix = (normalized_combined_matrix - torch.min(normalized_combined_matrix)) / torch.max(normalized_combined_matrix)
    
    # Apply a penalty to the edges leading back to the depot to discourage them
    depot_penalty_matrix = -torch.ones_like(distance_matrix) * 1000
    scaled_combined_matrix = torch.min(scaled_combined_matrix, depot_penalty_matrix)
    
    # Transform the scaled combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_combined_matrix
    
    return heuristics_matrix
```
