```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Use non-linear scaling for feature weight, with a logarithmic function
    distance_log_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Invert the non-linear scale to convert penalties into heuristic values
    inverted_distance_heuristic = 1 / (distance_log_matrix + 1e-6)
    
    # Normalize the inverted distance heuristic to balance with demand penalties
    normalized_distance_heuristic = F.softmax(inverted_distance_heuristic, dim=1)
    
    # Normalize the demand penalty matrix to balance the scale with the distance heuristic
    normalized_demand_penalty = F.softmax(penalty_matrix, dim=1)
    
    # Combine the normalized heuristics to form a combined potential matrix
    combined_potential = (1 - 0.5) * normalized_distance_heuristic + 0.5 * normalized_demand_penalty
    
    # Dynamically adapt weights to ensure non-negative penalties
    combined_potential = torch.clamp(combined_potential, min=0)
    
    # Transform the combined potential matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_potential
    
    return heuristics_matrix
```
