```python
import torch
from torch.nn.functional import log_softmax, softmax, exp

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply max normalization before exponential transformation to emphasize larger penalties
    max_potential = torch.max(potential_matrix)
    emphasized_matrix = exp((potential_matrix - max_potential))
    
    # Normalize the emphasized matrix to ensure proper probability distribution
    normalized_emphasized_matrix = softmax(emphasized_matrix, dim=1)
    
    # Normalize to get a proper probability distribution
    normalized_emphasized_matrix /= normalized_emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Ensure the combined matrix has non-zero values
    combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
