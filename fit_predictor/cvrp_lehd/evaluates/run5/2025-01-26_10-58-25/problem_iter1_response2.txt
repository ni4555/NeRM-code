```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """A heuristic that considers the demand and distance to prioritize edges."""
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    # Calculate the cumulative distance from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix[0], dim=0)
    # Calculate the potential cost of including each edge, which is the product of distance and demand
    potential_costs = cumulative_distances * cumulative_demands
    # Normalize the potential costs by the maximum potential cost to get a relative measure
    normalized_costs = potential_costs / potential_costs.max()
    # The heuristic value is negative for undesirable edges and positive for promising ones
    # We use negative values to ensure that the heuristic can be used in algorithms like A* or simulated annealing
    heuristic_values = -normalized_costs
    return heuristic_values
```
