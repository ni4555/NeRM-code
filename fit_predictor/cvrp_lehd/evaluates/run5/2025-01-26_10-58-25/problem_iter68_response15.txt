```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Use a non-linear transformation to emphasize constraints, introduce diversity with noise
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix) + torch.randn(*potential_matrix.shape) * 0.1)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Introduce a secondary non-linear transformation to further emphasize constraints
    secondary_emphasized_matrix = torch.relu(combined_matrix - torch.max(combined_matrix, dim=1)[0].unsqueeze(1))
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Normalize the adjusted combined matrix to ensure non-negativity and scale balance
    normalized_adjusted_matrix = adjusted_combined_matrix / adjusted_combined_matrix.sum(dim=1, keepdim=True)
    
    # Introduce a diversity metric by incorporating the minimum distance to a customer
    min_distance_to_customer = torch.min(distance_matrix, dim=1)[0]
    diversity_metric = 1 / (1 + min_distance_to_customer)
    
    # Combine the normalized adjusted matrix with the diversity metric
    combined_with_diversity = normalized_adjusted_matrix + diversity_metric
    
    # Apply a final non-linear transformation to ensure the heuristics are non-negative
    heuristics_matrix = torch.relu(combined_with_diversity)
    
    return heuristics_matrix
```
