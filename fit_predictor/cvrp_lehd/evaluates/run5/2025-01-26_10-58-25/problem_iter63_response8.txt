```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize distances to a scale that is comparable to demand penalties
    normalized_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Create a diversity metric by penalizing highly connected nodes
    diversity_metric = torch.mean(normalized_distance_matrix, dim=1)
    
    # Combine the diversity metric and normalized distance to form a combined penalty
    combined_penalty = diversity_metric * normalized_distance_matrix
    
    # Combine demand penalties and combined penalties into a single potential matrix
    potential_matrix = penalty_matrix + combined_penalty
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the original distance matrix
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
