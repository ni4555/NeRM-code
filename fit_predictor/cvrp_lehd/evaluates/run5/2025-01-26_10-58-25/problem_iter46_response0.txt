```python
import torch

def softmax(x, dim):
    exp_x = torch.exp(x - torch.max(x, dim=dim)[0], dim=dim)
    return exp_x / exp_x.sum(dim=dim, keepdim=True)

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the difference from vehicle capacity to emphasize overdemanded edges
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = softmax(emphasized_matrix, dim=1)
    
    # Balance the normalized emphasized matrix with the distance penalty matrix
    balanced_matrix = normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Adjust the balanced matrix to ensure that the values are not too close to zero
    adjusted_balanced_matrix = balanced_matrix - torch.min(balanced_matrix)
    
    # Scale the adjusted balanced matrix to the range [0, 1]
    scaled_adjusted_balanced_matrix = adjusted_balanced_matrix / adjusted_balanced_matrix.sum(dim=1, keepdim=True)
    
    # Transform the scaled adjusted balanced matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_adjusted_balanced_matrix
    
    return heuristics_matrix
```
