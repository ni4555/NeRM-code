```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(potential_matrix) * 1e-2
    
    # Combine the original potential matrix with noise
    combined_potential_matrix = potential_matrix + noise_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(combined_potential_matrix))
    
    # Normalize the emphasized matrix to ensure that the values are within a reasonable range
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.max()
    
    # Introduce diversity by considering the inverse of the distance as a bonus
    diversity_bonus_matrix = (1 / (distance_matrix + 1e-6)) * normalized_emphasized_matrix
    
    # Introduce a second noise term with different scaling for further randomness
    second_noise_matrix = torch.randn_like(diversity_bonus_matrix) * 1e-3
    
    # Combine the diversity bonus matrix with the second noise term
    combined_matrix = diversity_bonus_matrix + second_noise_matrix
    
    # Introduce a third noise term for additional randomness
    third_noise_matrix = torch.randn_like(combined_matrix) * 1e-2
    
    # Adjust the combined matrix to account for additional randomness
    adjusted_combined_matrix = combined_matrix + third_noise_matrix
    
    # Normalize the adjusted combined matrix to ensure non-negativity and scale balance
    normalized_adjusted_matrix = adjusted_combined_matrix / adjusted_combined_matrix.sum(dim=1, keepdim=True)
    
    # Transform the normalized adjusted matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_adjusted_matrix
    
    return heuristics_matrix
```
