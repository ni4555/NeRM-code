```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the penalty matrix to have a maximum value of 1
    normalized_penalty_matrix = penalty_matrix / torch.max(penalty_matrix)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the distance penalty matrix to have a maximum value of 1
    normalized_distance_penalty_matrix = distance_penalty_matrix / torch.max(distance_penalty_matrix)
    
    # Blend the normalized demand and distance penalties with a ratio of 0.6 and 0.4 respectively
    blended_potential_matrix = 0.6 * normalized_penalty_matrix + 0.4 * normalized_distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(blended_potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Adjust the normalized emphasized matrix to have a minimum value of 1e-4
    adjusted_combined_matrix = torch.clamp(normalized_emphasized_matrix, min=1e-4)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
