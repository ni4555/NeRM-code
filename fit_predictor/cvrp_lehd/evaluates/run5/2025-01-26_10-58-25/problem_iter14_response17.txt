```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the penalty for demand constraint violations
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Calculate the distance penalty
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine the demand and distance penalties
    combined_penalty_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Normalize the combined penalty matrix
    normalized_penalty_matrix = F.softmax(combined_penalty_matrix, dim=1)
    
    # Apply an exponential transformation to emphasize feasible and low-cost edges
    transformed_matrix = torch.exp(normalized_penalty_matrix)
    
    # Normalize the transformed matrix to a manageable range
    min_value = torch.min(transformed_matrix)
    max_value = torch.max(transformed_matrix)
    normalized_matrix = (transformed_matrix - min_value) / (max_value - min_value)
    
    # Introduce a dynamic weight to balance the influence of demand and distance
    weight = 1 / (vehicle_capacity / demands.sum())
    weighted_normalized_matrix = normalized_matrix * weight
    
    # Cap the maximum possible weight for each edge to a reasonable upper bound
    cap_upper_bound = 2
    capped_normalized_matrix = torch.clamp(weighted_normalized_matrix, min=0, max=cap_upper_bound)
    
    # Transform the capped normalized matrix into a heuristics matrix
    heuristics_matrix = -capped_normalized_matrix
    
    return heuristics_matrix
```
