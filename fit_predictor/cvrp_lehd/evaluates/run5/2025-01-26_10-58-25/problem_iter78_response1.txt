```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Introduce diversity by using a random shuffle to create a diversity matrix
    diversity_matrix = torch.rand_like(distance_matrix)
    
    # Scale the distance matrix to balance the impact of penalties
    scaled_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Combine penalties and scaled distances with a non-linear transformation
    combined_matrix = torch.exp(-torch.abs(penalty_matrix + scaled_distance_matrix))
    
    # Normalize the combined matrix to maintain scale balance
    normalized_combined_matrix = combined_matrix / combined_matrix.sum(dim=1, keepdim=True)
    
    # Introduce randomness through Gaussian noise with a standard deviation that scales with the distance
    noise_matrix = torch.randn_like(distance_matrix) * (scaled_distance_matrix * 1e-1)
    
    # Combine the normalized combined matrix with the noise matrix
    combined_with_noise = normalized_combined_matrix + noise_matrix
    
    # Normalize the combined matrix to ensure non-negativity
    normalized_combined_with_noise = combined_with_noise / (combined_with_noise.sum(dim=1, keepdim=True) + 1e-6)
    
    # Incorporate diversity by adding the diversity matrix to the normalized combined matrix
    final_matrix = normalized_combined_with_noise * diversity_matrix
    
    # Transform the final matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = final_matrix - final_matrix.mean(dim=1, keepdim=True)
    
    return heuristics_matrix
```
