```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = 1.0
    
    # Create a matrix with negative infinity for edges where demand is greater than vehicle capacity
    demand_matrix = torch.clamp(-torch.cumsum(demands, dim=0) / vehicle_capacity, min=float('-inf'))
    
    # Adjust the matrix for edges where the demand is exactly zero
    demand_matrix[torch.where(demands == 0)] = float('-inf')
    
    # Add the distance matrix to the demand matrix to create a potential matrix
    potential_matrix = distance_matrix + demand_matrix
    
    # Apply a non-linear transformation to the potential matrix
    transformed_potential_matrix = torch.pow(potential_matrix, 0.5)
    
    # Normalize the transformed potential matrix to have a range of 0 to 1
    normalized_potential_matrix = (transformed_potential_matrix - transformed_potential_matrix.min()) / (transformed_potential_matrix.max() - transformed_potential_matrix.min())
    
    # Apply a penalty to edges where the normalized potential is below a threshold
    penalty_threshold = 0.2
    penalty_matrix = torch.where(normalized_potential_matrix < penalty_threshold, -100.0, 0.0)
    
    # Combine the normalized potential with the penalty matrix
    combined_matrix = normalized_potential_matrix + penalty_matrix
    
    # Softmax over each row to ensure the sum of each row is 1 (probability distribution)
    softmax_matrix = torch.nn.functional.softmax(combined_matrix, dim=1)
    
    # Subtract from 1 to promote the selection of edges with lower potential and higher distances
    heuristics_matrix = 1 - softmax_matrix
    
    return heuristics_matrix
```
