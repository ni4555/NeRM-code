```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.relu(potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Calculate the maximum of each row to avoid dominant edges
    row_max = normalized_emphasized_matrix.max(dim=1)[0]
    
    # Scale the normalized matrix to balance demand and distance penalties
    scaled_emphasized_matrix = (normalized_emphasized_matrix / row_max) * (torch.abs(penalty_matrix) + 1e-6)
    
    # Transform the scaled emphasized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_emphasized_matrix
    
    return heuristics_matrix
```
