```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Emphasize constraints by applying a power transformation
    emphasized_matrix = torch.pow(potential_matrix, 0.75)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    # Instead of softmax, use min-max normalization to maintain a specific range
    max_val = emphasized_matrix.max()
    min_val = emphasized_matrix.min()
    normalized_emphasized_matrix = (emphasized_matrix - min_val) / (max_val - min_val)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix
    combined_matrix = normalized_emphasized_matrix + distance_penalty_matrix
    
    # Avoid small values that may lead to numerical issues
    combined_matrix = torch.clamp(combined_matrix, min=1e-8)
    
    # Use the absolute value of combined matrix to convert into heuristics matrix
    heuristics_matrix = torch.abs(combined_matrix)
    
    return heuristics_matrix
```
