```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = 1.0
    
    # Calculate the cumulative demand and penalize edges that exceed the vehicle capacity
    cumulative_demand = torch.cumsum(demands, dim=0)
    demand_excess = cumulative_demand > vehicle_capacity
    demand_matrix = -torch.where(demand_excess, cumulative_demand / vehicle_capacity, cumulative_demand)
    
    # Adjust the matrix for edges where the demand is exactly zero
    demand_matrix[torch.where(demands == 0)] = 0
    
    # Combine demand and distance to create a potential matrix
    potential_matrix = distance_matrix + demand_matrix
    
    # Normalize the potential matrix to create a probability distribution
    # We use log_softmax to avoid the issue of overflow in softmax
    log_probs = F.log_softmax(potential_matrix, dim=1)
    
    # Convert log probabilities to probabilities and then to heuristics
    # The negative sign promotes the selection of edges with lower potential and higher distances
    heuristics_matrix = -torch.exp(log_probs)
    
    return heuristics_matrix
```
