```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Invert the demand penalties to emphasize high demand
    demand_penalty_matrix = -torch.abs(demands / vehicle_capacity - 1)
    
    # Scale the distance matrix with the inverse of demands to balance the scale
    scaled_distance_matrix = distance_matrix / demands.unsqueeze(1)
    
    # Create a penalty matrix for high scaled distances
    distance_penalty_matrix = -torch.log(scaled_distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.relu(potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the scaled distance penalty matrix to balance the scales
    combined_matrix = (1 - 0.5) * normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Invert the combined matrix to convert penalties into heuristic values
    heuristics_matrix = -combined_matrix
    
    return heuristics_matrix
```
