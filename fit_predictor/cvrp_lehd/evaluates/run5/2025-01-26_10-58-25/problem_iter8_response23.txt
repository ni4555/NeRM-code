```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = 1.0
    
    # Create a matrix with negative infinity for edges where demand is greater than vehicle capacity
    demand_matrix = torch.clamp(-torch.cumsum(demands[1:], dim=0) / vehicle_capacity, min=float('-inf'))
    
    # Adjust the matrix for edges where the demand is exactly zero
    demand_matrix[torch.where(demands[1:] == 0)] = 0
    
    # Add the distance matrix to the demand matrix to create a potential function
    potential_matrix = distance_matrix + demand_matrix
    
    # Normalize the potential matrix using a sigmoid function to ensure values are between 0 and 1
    transformed_potential_matrix = torch.sigmoid(potential_matrix)
    
    # Normalize the transformed potential matrix to ensure the sum of each row is 1 (probability distribution)
    normalized_matrix = transformed_potential_matrix / transformed_potential_matrix.sum(dim=1, keepdim=True)
    
    # Subtract from 1 to promote the selection of edges with lower potential and higher distances
    # This will result in negative values for undesirable edges and positive values for promising ones
    heuristics_matrix = 1 - normalized_matrix
    
    # Set the diagonal to zero to avoid considering the depot as a customer in the heuristics
    torch.fill_diagonal_(heuristics_matrix, 0)
    
    return heuristics_matrix
```
