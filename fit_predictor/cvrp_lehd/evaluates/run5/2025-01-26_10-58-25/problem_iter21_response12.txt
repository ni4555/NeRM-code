```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity) ** 1.5  # Use higher power for more nuanced penalties
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Normalize the penalty matrix to account for varying capacities
    normalized_penalty_matrix = penalty_matrix / (torch.max(penalty_matrix) + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = normalized_penalty_matrix + distance_penalty_matrix
    
    # Apply a selective scaling by considering the distance penalty more heavily if close to depot
    selective_scaled_matrix = potential_matrix + (distance_penalty_matrix * torch.exp(-distance_matrix))
    
    # Normalize the selectively scaled matrix to ensure non-negativity
    normalized_selective_scaled_matrix = F.softmax(selective_scaled_matrix, dim=1)
    
    # Adjust the normalized matrix to avoid values close to zero
    adjusted_normalized_selective_scaled_matrix = adjusted_normalized_selective_scaled_matrix - torch.min(adjusted_normalized_selective_scaled_matrix)
    
    # Transform the adjusted matrix into a heuristics matrix
    heuristics_matrix = -adjusted_normalized_selective_scaled_matrix
    
    return heuristics_matrix
```
