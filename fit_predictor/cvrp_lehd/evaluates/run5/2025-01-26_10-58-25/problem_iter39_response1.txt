```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate a soft penalty based on the proximity of each demand to the vehicle capacity
    penalty_matrix = torch.log1p(torch.abs(demands - vehicle_capacity))
    
    # Adjust distance penalties based on their position relative to the vehicle capacity threshold
    distance_threshold = vehicle_capacity
    distance_penalty_matrix = torch.log1p(torch.min(distance_matrix + 1e-6, distance_threshold))
    
    # Combine the demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Non-linearly emphasize edges close to the depot
    depot proximity = distance_matrix[:, 0]
    emphasized_matrix = torch.exp(-depot proximity ** 2)
    
    # Scale the emphasized matrix with the potential matrix to balance penalties
    combined_matrix = emphasized_matrix * (potential_matrix / (potential_matrix + 1))
    
    # Normalize the combined matrix to ensure non-negativity and scale balance
    normalized_combined_matrix = F.softmax(combined_matrix, dim=1)
    
    # Transform the normalized combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_combined_matrix
    
    return heuristics_matrix
```
