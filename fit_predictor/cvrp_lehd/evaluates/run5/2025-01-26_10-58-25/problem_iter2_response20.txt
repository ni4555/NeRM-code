```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = len(demands)
    
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros(n, n, dtype=torch.float)
    
    # Calculate the distance from the depot to each customer
    min_depot_to_customer = torch.min(distance_matrix[0, 1:], dim=0).values
    
    # Calculate the distance from each customer to the depot
    min_customer_to_depot = torch.min(distance_matrix[1:, 0], dim=0).values
    
    # Calculate the initial heuristic for each edge
    heuristics[0, 1:] = distance_matrix[0, 1:] - min_depot_to_customer
    heuristics[1:, 0] = distance_matrix[1:, 0] - min_customer_to_depot
    
    # For each possible sequence of visits to customers starting at the depot
    for start in range(1, n):
        for end in range(start, n):
            # Calculate the heuristics value for the edge from start to end
            heuristics[start, end] = distance_matrix[start, end]
    
    # Incorporate the demand constraint
    for customer in range(1, n):
        demand = demands[customer]
        # If visiting this customer would exceed the vehicle's capacity, add a penalty
        for previous_customer in range(1, customer):
            if demands[previous_customer] + demand > 1.0:
                heuristics[previous_customer, customer] = -float('inf')
        # If starting from this customer would exceed the vehicle's capacity, add a penalty
        for next_customer in range(customer + 1, n):
            if demands[next_customer] + demand > 1.0:
                heuristics[customer, next_customer] = -float('inf')
    
    return heuristics
```
