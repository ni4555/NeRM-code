```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the penalty matrix to maintain a balance with the distance matrix
    normalized_penalty_matrix = penalty_matrix / penalty_matrix.max()
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = normalized_penalty_matrix + distance_penalty_matrix
    
    # Introduce controlled randomness by adding a small Gaussian noise
    noise_matrix = torch.randn_like(potential_matrix) * 1e-2
    
    # Introduce mutation by adding a small random perturbation to the matrix
    mutation_factor = torch.rand_like(potential_matrix)
    mutation_matrix = torch.randn_like(potential_matrix) * 1e-3 * mutation_factor
    
    # Combine the potential matrix with noise and mutation
    combined_matrix = potential_matrix + noise_matrix + mutation_matrix
    
    # Normalize the combined matrix to ensure non-negativity and scale balance
    normalized_combined_matrix = combined_matrix / combined_matrix.sum(dim=1, keepdim=True)
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_combined_matrix
    
    return heuristics_matrix
```
