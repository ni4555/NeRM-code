```python
def softmax(tensor, dim):
    exp_tensor = torch.exp(tensor - tensor.max(dim=dim, keepdim=True)[0])
    return exp_tensor / exp_tensor.sum(dim=dim, keepdim=True)

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = softmax(emphasized_matrix, dim=1)
    
    # Scale the normalized matrix to ensure the sum is equal to the vehicle capacity
    scale_factor = demands / demands.sum()
    scaled_normalized_emphasized_matrix = normalized_emphasized_matrix * scale_factor
    
    # Combine the scaled normalized emphasized matrix with the distance penalty matrix to balance the scales
    combined_matrix = scaled_normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Ensure the combined matrix has non-zero values
    combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Transform the combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -combined_matrix
    
    # Normalize the heuristics matrix to ensure it sums to 1 over each row
    heuristics_matrix /= heuristics_matrix.sum(dim=1, keepdim=True)
    
    return heuristics_matrix
```
