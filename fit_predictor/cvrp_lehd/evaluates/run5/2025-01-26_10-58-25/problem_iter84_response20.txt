```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Introduce noise early in the process
    noise_matrix = torch.randn_like(penalty_matrix) * 1e-1
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Balance penalties by combining demand and distance penalties into a single potential matrix
    potential_matrix = (penalty_matrix + distance_penalty_matrix + noise_matrix) / 3
    
    # Normalize for scale to prevent any one penalty from dominating
    potential_matrix /= potential_matrix.sum(dim=1, keepdim=True)
    
    # Emphasize constraints by applying a non-linear transformation
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Introduce mutation by adding a small random perturbation to the matrix
    mutation_factor = torch.rand_like(emphasized_matrix)
    mutated_combined_matrix = emphasized_matrix + torch.randn_like(emphasized_matrix) * 1e-3 * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
