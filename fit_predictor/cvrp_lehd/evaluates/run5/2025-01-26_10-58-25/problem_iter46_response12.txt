```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(penalty_matrix + distance_penalty_matrix))
    
    # Scale the emphasized matrix to prevent overflow
    emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Clamp the scaled emphasized matrix to maintain stability
    scaled_emphasized_matrix = torch.clamp(emphasized_matrix, min=1e-6)
    
    # Transform the scaled emphasized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_emphasized_matrix
    
    # Normalize the heuristics matrix to ensure it sums to 1 over each row
    heuristics_matrix /= heuristics_matrix.sum(dim=1, keepdim=True)
    
    return heuristics_matrix
```
