```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = 1.0
    
    # Create a matrix with negative infinity for edges where demand is greater than vehicle capacity
    demand_matrix = torch.clamp(-torch.cumsum(demands, dim=0) / vehicle_capacity, min=float('-inf'))
    
    # Adjust the matrix for edges where the demand is exactly zero
    demand_matrix[torch.where(demands == 0)] = float('-inf')
    
    # Combine the distance and demand penalties in a single matrix
    penalty_matrix = distance_matrix + demand_matrix
    
    # Normalize the penalty matrix to create a relative penalty scale
    penalty_matrix = penalty_matrix / torch.max(penalty_matrix)
    
    # Use a soft thresholding approach to balance the importance of distance and demand
    # Soft thresholding promotes edges with low penalty values
    soft_thresholded_matrix = torch.max(penalty_matrix, torch.zeros_like(penalty_matrix))
    
    # Subtract from 1 to promote the selection of edges with lower penalties
    # This will result in negative values for undesirable edges and positive values for promising ones
    heuristics_matrix = 1 - soft_thresholded_matrix
    
    return heuristics_matrix
```
