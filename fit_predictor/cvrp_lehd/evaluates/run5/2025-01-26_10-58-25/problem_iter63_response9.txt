```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = potential_matrix / (potential_matrix + 1e-6)
    
    # Emphasize the constraints by using a higher weight on demand penalties
    emphasized_potential_matrix = normalized_potential_matrix * (1 - torch.exp(-torch.abs(potential_matrix)))
    
    # Combine the emphasized potential matrix with the distance penalty matrix
    combined_matrix = emphasized_potential_matrix + 0.5 * distance_penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Apply a logarithmic transformation to the adjusted combined matrix to ensure non-negativity
    heuristics_matrix = torch.log(adjusted_combined_matrix + 1e-6)
    
    return heuristics_matrix
```
