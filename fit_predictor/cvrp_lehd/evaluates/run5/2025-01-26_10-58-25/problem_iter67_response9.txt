```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.pow(potential_matrix / torch.mean(potential_matrix), 2))
    
    # Introduce a diversity term by slightly modifying some edges' distances
    diversity_matrix = distance_matrix.clone()
    random_edges = torch.rand(*diversity_matrix.shape) < 0.05  # 5% chance to mutate an edge
    diversity_matrix[random_edges] *= torch.rand(*random_edges.shape) * 0.1  # 10% of distance change
    
    # Combine the emphasized matrix with the diversity term
    combined_matrix = emphasized_matrix + diversity_matrix
    
    # Normalize the combined matrix to ensure non-negativity and scale balance
    normalized_combined_matrix = combined_matrix / combined_matrix.sum(dim=1, keepdim=True)
    
    # Transform the normalized combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_combined_matrix
    
    return heuristics_matrix
```
