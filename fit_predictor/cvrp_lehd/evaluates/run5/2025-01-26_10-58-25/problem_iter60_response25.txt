```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Normalize the demands and distances early to reduce the influence of outliers
    normalized_demands = demands / vehicle_capacity
    normalized_distances = distance_matrix / distance_matrix.max()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(normalized_demands - 1)
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = -torch.log(normalized_distances + 1e-6)
    
    # Apply a blend ratio to control the impact of the penalty matrix
    blend_ratio = 0.8
    
    # Combine demand and distance penalties with a blend ratio
    combined_penalty_matrix = blend_ratio * penalty_matrix + (1 - blend_ratio) * distance_penalty_matrix
    
    # Normalize the combined penalty matrix to ensure non-negativity and scale balance
    normalized_combined_penalty_matrix = combined_penalty_matrix / combined_penalty_matrix.sum(dim=1, keepdim=True)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(normalized_combined_penalty_matrix))
    
    # Normalize the emphasized matrix to control the heuristic diversity
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix
    combined_matrix = normalized_emphasized_matrix + (1 - blend_ratio) * distance_penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
