```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    
    # Calculate minimum distance from the depot to all other nodes
    min_distance_to_depot = torch.min(distance_matrix[:, 1:], dim=1).values
    
    # Calculate minimum distance from all other nodes to the depot
    min_distance_to_all = torch.min(distance_matrix[1:, 1:], dim=0).values
    
    # Create the heuristics matrix
    heuristics = distance_matrix.copy()
    
    # Set the cost to the depot to 0 and adjust the heuristic based on minimum distances
    heuristics[:, 0] = 0
    heuristics[0, :] = 0
    
    heuristics[1:, :] -= min_distance_to_depot
    heuristics[1:, 0] += min_distance_to_depot[0]
    
    # Subtract the cost from all other edges based on the minimum distances to ensure they are non-negative
    heuristics -= min_distance_to_all[0, 1:]
    heuristics -= min_distance_to_all[1:, 0].unsqueeze(1)
    
    # Adjust the costs for the return trip to the depot to be equal to the total distance
    total_distance = min_distance_to_all.sum() + (n - 2) * total_demand
    heuristics += (total_distance - min_distance_to_all)
    
    # Scale heuristics to have non-negative values
    heuristics = heuristics - heuristics.min()
    
    return heuristics
```
