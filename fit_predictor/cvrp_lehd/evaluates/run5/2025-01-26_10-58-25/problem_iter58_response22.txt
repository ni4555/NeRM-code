```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Normalize demands
    normalized_demands = (demands - demands.min()) / (demands.max() - demands.min())
    
    # Normalize the distance matrix
    normalized_distance_matrix = (distance_matrix - distance_matrix.min()) / (distance_matrix.max() - distance_matrix.min())
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(normalized_demands - 1)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(normalized_distance_matrix + 1e-6)
    
    # Blend the demand penalty matrix with the distance penalty matrix
    blended_penalty_matrix = (penalty_matrix + distance_penalty_matrix) * 0.5
    
    # Normalize the combined penalty and distance matrix
    combined_matrix = blended_penalty_matrix + normalized_distance_matrix
    normalized_combined_matrix = combined_matrix / combined_matrix.sum(dim=1, keepdim=True)
    
    # Adjust the normalized combined matrix to ensure values are not too close to zero
    adjusted_combined_matrix = normalized_combined_matrix - torch.min(normalized_combined_matrix)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(adjusted_combined_matrix))
    
    # Transform the emphasized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -emphasized_matrix
    
    return heuristics_matrix
```
