```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate demand penalties with early constraints
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Calculate distance-based penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties
    combined_penalty_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Introduce randomness by adding Gaussian noise
    noise_matrix = torch.randn_like(combined_penalty_matrix) * 1e-2
    
    # Add noise to the combined penalties
    noisy_combined_penalty_matrix = combined_penalty_matrix + noise_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.relu(noisy_combined_penalty_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Introduce a second noise term for further randomness
    second_noise_matrix = torch.randn_like(combined_matrix) * 1e-2
    
    # Adjust the combined matrix to account for additional randomness
    adjusted_combined_matrix = combined_matrix + second_noise_matrix
    
    # Apply mutation by adding a small random perturbation
    mutation_factor = torch.rand_like(adjusted_combined_matrix)
    mutated_combined_matrix = adjusted_combined_matrix + torch.randn_like(adjusted_combined_matrix) * 1e-3 * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
