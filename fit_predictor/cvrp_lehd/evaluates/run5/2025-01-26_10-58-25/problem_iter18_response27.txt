```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Non-linear penalty for demand violations with a logarithmic transformation to emphasize larger violations
    penalty_matrix = torch.log1p(-torch.abs(demands - vehicle_capacity))
    
    # Non-linear transformation for distance penalty using a power function to emphasize larger distances
    distance_penalty_matrix = torch.pow(distance_matrix + 1e-6, -2)
    
    # Combine penalties into a potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Normalize the potential matrix to balance the scales of different penalties
    normalized_potential_matrix = potential_matrix / potential_matrix.sum(dim=1, keepdim=True)
    
    # Apply softmax to normalize and transform the potential matrix
    softmax_matrix = torch.softmax(normalized_potential_matrix, dim=1)
    
    # Scale down the softmax_matrix for edges with higher demand to further emphasize demand constraints
    softmax_matrix = softmax_matrix * (1 - demands)  # Scale down edges that violate demand constraints
    
    # Transform the softmax_matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -softmax_matrix
    
    return heuristics_matrix
```
