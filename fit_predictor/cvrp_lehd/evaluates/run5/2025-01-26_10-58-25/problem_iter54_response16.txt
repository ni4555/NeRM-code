```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Define weights for demand and distance penalties
    demand_weight = 0.5
    distance_weight = 0.5
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = demand_weight * torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = distance_weight * -torch.log(distance_matrix + 1e-6)
    
    # Combine the demand and distance penalties
    combined_penalty_matrix = penalty_matrix + distance_penalty_matrix
    
    # Amplify the penalty matrix using an exponential decay
    amplified_penalty_matrix = torch.exp(-combined_penalty_matrix)
    
    # Normalize the amplified penalty matrix
    normalized_penalty_matrix = F.softmax(amplified_penalty_matrix, dim=1)
    
    # Create a distance-based heuristic to attract vehicles to nodes
    distance_heuristic_matrix = torch.exp(-distance_penalty_matrix)
    
    # Combine the normalized penalties with the distance heuristic
    combined_matrix = normalized_penalty_matrix + distance_heuristic_matrix
    
    # Normalize the combined matrix to ensure non-negativity and balance the influence of demand and distance
    normalized_combined_matrix = F.softmax(combined_matrix, dim=1)
    
    # Scale the combined matrix to balance the attraction and repulsion
    scaled_combined_matrix = normalized_combined_matrix / (normalized_combined_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Transform the scaled combined matrix into a heuristics matrix
    heuristics_matrix = scaled_combined_matrix - torch.min(scaled_combined_matrix, dim=1)[0].unsqueeze(1)
    
    return heuristics_matrix
```
