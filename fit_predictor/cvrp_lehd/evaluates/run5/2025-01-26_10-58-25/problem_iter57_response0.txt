```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Normalize the demands and distance matrix
    normalized_demands = demands / demands.sum()
    normalized_distance_matrix = distance_matrix / distance_matrix.sum(dim=1, keepdim=True)
    
    # Apply a blend ratio to control the impact of penalties
    blend_ratio = 0.5
    demand_penalty = -torch.abs(normalized_demands - 1)
    distance_penalty = -torch.log(normalized_distance_matrix + 1e-6)
    
    # Combine demand and distance penalties using blend ratio
    combined_penalty = blend_ratio * demand_penalty + (1 - blend_ratio) * distance_penalty
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_penalty = torch.exp(-torch.abs(combined_penalty))
    
    # Normalize the emphasized penalty matrix
    normalized_emphasized_penalty = emphasized_penalty / emphasized_penalty.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized penalty with the distance penalty matrix
    combined_matrix = normalized_emphasized_penalty + (1 - blend_ratio) * distance_penalty
    
    # Adjust the combined matrix to ensure non-zero values
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
