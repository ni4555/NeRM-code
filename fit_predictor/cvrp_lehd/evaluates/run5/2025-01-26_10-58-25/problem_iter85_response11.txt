```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Introduce randomness from the start
    random_matrix = torch.randn_like(distance_matrix) * 1e-2
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Combine demand penalties with the random matrix to balance randomness and constraints
    balanced_penalty_matrix = penalty_matrix + random_matrix
    
    # Create a distance-based penalty matrix to balance with demand penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the distance penalty matrix to maintain balance
    normalized_distance_penalty_matrix = distance_penalty_matrix / distance_penalty_matrix.sum(dim=1, keepdim=True)
    
    # Combine the demand-based and distance-based penalties into a single potential matrix
    potential_matrix = balanced_penalty_matrix + normalized_distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Introduce a second normalization step to further balance the potential matrix
    second_normalized_emphasized_matrix = normalized_emphasized_matrix / normalized_emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Introduce a final noise term to maintain diversity
    final_noise_matrix = torch.randn_like(second_normalized_emphasized_matrix) * 1e-2
    
    # Combine the normalized matrix with the final noise to get the adjusted potential
    adjusted_potential_matrix = second_normalized_emphasized_matrix + final_noise_matrix
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_potential_matrix
    
    return heuristics_matrix
```
