```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the distance penalty matrix to ensure non-negativity
    normalized_distance_penalty_matrix = (distance_penalty_matrix - distance_penalty_matrix.min()) / (distance_penalty_matrix.max() - distance_penalty_matrix.min())
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + normalized_distance_penalty_matrix
    
    # Emphasize constraints by scaling the potential matrix with a non-linear function
    emphasized_matrix = torch.clamp(potential_matrix, min=0) * torch.exp(-potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Introduce a diversity factor by adding a small multiple of the inverse distance
    diversity_factor = 0.1 / (distance_matrix + 1e-6)
    diversity_matrix = normalized_emphasized_matrix + diversity_factor
    
    # Adjust the diversity matrix to ensure that the values are not too close to zero
    adjusted_diversity_matrix = diversity_matrix - diversity_matrix.min()
    
    # Transform the adjusted diversity matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_diversity_matrix
    
    return heuristics_matrix
```
