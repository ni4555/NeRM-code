```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Introduce diversity by blending penalties with a random factor
    random_factor = torch.randn_like(potential_matrix)
    blended_potential_matrix = potential_matrix + random_factor * 0.1
    
    # Normalize the blended potential matrix to ensure non-negativity and scale balance
    normalized_blended_potential_matrix = blended_potential_matrix / (blended_potential_matrix.abs().sum(dim=1, keepdim=True) + 1e-6)
    
    # Emphasize constraints using a non-linear transformation
    emphasized_matrix = torch.exp(-torch.abs(normalized_blended_potential_matrix))
    
    # Apply another layer of blending for a diverse solution space
    diversity_factor = torch.rand_like(emphasized_matrix)
    combined_emphasized_matrix = emphasized_matrix * diversity_factor
    
    # Normalize the combined emphasized matrix to balance scale
    normalized_combined_emphasized_matrix = combined_emphasized_matrix / (combined_emphasized_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = normalized_combined_emphasized_matrix - torch.min(normalized_combined_emphasized_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
