```python
import torch

def softmax(x: torch.Tensor, dim: int = -1) -> torch.Tensor:
    x_exp = torch.exp(x - torch.max(x, dim=dim, keepdim=True)[0])
    return x_exp / x_exp.sum(dim=dim, keepdim=True)

def normalize(x: torch.Tensor, p: int = 2, dim: int = -1) -> torch.Tensor:
    return x / x.norm(p=p, dim=dim, keepdim=True)

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.relu(potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = softmax(emphasized_matrix, dim=1)
    
    # Blend the normalized emphasized matrix with the distance penalty matrix using a weighted sum
    blending_factor = 0.7
    combined_matrix = blending_factor * normalized_emphasized_matrix + (1 - blending_factor) * distance_penalty_matrix
    
    # Normalize the combined matrix to ensure non-negativity and scale balance
    normalized_combined_matrix = normalize(combined_matrix, p=1, dim=1)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_combined_matrix
    
    return heuristics_matrix
```
