```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate penalties based on demand violation
    demand_penalty = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine penalties with different weights to balance demand and distance
    combined_potential_matrix = 0.5 * demand_penalty + 0.5 * distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.relu(combined_potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / (emphasized_matrix.sum() + 1e-6)
    
    # Transform the normalized matrix to ensure that undesirable edges have negative values
    heuristics_matrix = -normalized_emphasized_matrix
    
    return heuristics_matrix
```
