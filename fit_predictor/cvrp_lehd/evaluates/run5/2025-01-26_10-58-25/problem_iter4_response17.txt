```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = 1.0
    
    # Create a matrix with negative infinity for edges where demand is greater than vehicle capacity
    demand_matrix = torch.where(demands > vehicle_capacity, torch.full_like(demands, float('-inf')), 
                                -torch.cumsum(demands, dim=0) / vehicle_capacity)
    
    # Softmax over each row to ensure the sum of each row is 1 (probability distribution)
    # This promotes the selection of edges with lower potential and higher distances
    softmax_matrix = torch.nn.functional.softmax(distance_matrix + demand_matrix, dim=1)
    
    # Subtract from 1 to promote the selection of edges with lower potential and higher distances
    # This will result in negative values for undesirable edges and positive values for promising ones
    heuristics_matrix = 1 - softmax_matrix
    
    return heuristics_matrix
```
