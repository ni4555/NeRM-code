```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Instead of a single potential matrix, we apply a soft constraint to balance the penalties
    soft_constraint_matrix = F.sigmoid(penalty_matrix + distance_penalty_matrix)
    
    # Normalize the soft constraint matrix to maintain coherence and balance the scales
    normalized_soft_constraint_matrix = F.softmax(soft_constraint_matrix, dim=1)
    
    # Combine the normalized soft constraint matrix with the distance penalty matrix to balance the scales
    combined_matrix = (1 - 0.5) * normalized_soft_constraint_matrix + 0.5 * distance_penalty_matrix
    
    # Scale the combined matrix to emphasize the balance between demand and distance
    scaled_combined_matrix = combined_matrix * (1 / combined_matrix.max())
    
    # Transform the scaled combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_combined_matrix
    
    return heuristics_matrix
```
