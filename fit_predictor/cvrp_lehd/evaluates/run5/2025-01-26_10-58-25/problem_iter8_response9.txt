```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    demand_penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Use logarithmic transformation for distances
    distance_penalty_matrix = -torch.log(1 + distance_matrix)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = demand_penalty_matrix + distance_penalty_matrix
    
    # Apply softmax to normalize and transform the potential matrix
    # This will help in balancing edge selection based on potential and distance
    softmax_matrix = torch.nn.functional.softmax(potential_matrix, dim=1)
    
    # Transform the softmax matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -softmax_matrix
    
    return heuristics_matrix
```
