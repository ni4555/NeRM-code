```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate vehicle capacity as a fraction of total demand
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Initialize a penalty matrix for demand constraint violations
    penalty_matrix = torch.clamp(-torch.abs(demands - vehicle_capacity), min=-1e6)
    
    # Initialize a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = torch.clamp(-torch.log(distance_matrix + 1e-6), min=-1e6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Employ a non-linear transformation to emphasize constraints
    emphasized_matrix = F.relu(potential_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Scale the normalized matrix with the distance penalties to maintain balanced representation
    scaled_normalized_matrix = normalized_emphasized_matrix * distance_penalty_matrix
    
    # Normalize each row to have unit sum, creating the heuristics matrix
    heuristics_matrix = scaled_normalized_matrix / scaled_normalized_matrix.sum(dim=1, keepdim=True)
    
    return heuristics_matrix
```
