```python
import torch
from torch.nn.functional import softmax

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply selective scaling to the potential matrix to avoid vanishing gradients
    selective_scaling = torch.clamp(potential_matrix, min=1e-6, max=1)
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = softmax(selective_scaling, dim=1)
    
    # Normalize the normalized potential matrix to ensure it sums to 1 over each row
    normalized_potential_matrix /= normalized_potential_matrix.sum(dim=1, keepdim=True)
    
    return normalized_potential_matrix
```
