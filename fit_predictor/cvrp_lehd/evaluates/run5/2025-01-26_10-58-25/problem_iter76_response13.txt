```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Normalize the distance penalty matrix to ensure consistency with the penalty matrix
    normalized_distance_penalty_matrix = distance_penalty_matrix / torch.sum(distance_penalty_matrix, dim=1, keepdim=True)
    
    # Combine the normalized demand penalty matrix and the normalized distance penalty matrix
    combined_matrix = normalized_distance_penalty_matrix + penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints and distances
    emphasized_matrix = torch.exp(-torch.abs(combined_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Introduce diversity by adding a small random component
    random_matrix = torch.rand_like(normalized_emphasized_matrix)
    diversified_matrix = normalized_emphasized_matrix + random_matrix * 0.1
    
    # Transform the diversified matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -diversified_matrix
    
    return heuristics_matrix
```
