```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = torch.exp(potential_matrix - torch.max(potential_matrix, dim=1, keepdim=True).values)
    
    # Sum the columns of the normalized potential matrix to get the sum of probabilities for each node
    probabilities = normalized_potential_matrix.sum(dim=1, keepdim=True)
    
    # Normalize by the sum of probabilities to create a probability distribution
    probability_distribution = normalized_potential_matrix / probabilities
    
    # Apply a penalty to the edges leading back to the depot to discourage them
    depot_penalty_matrix = torch.zeros_like(distance_matrix)
    depot_penalty_matrix[torch.arange(len(distance_matrix)), 0] = 1000
    probability_distribution = torch.min(probability_distribution, depot_penalty_matrix)
    
    # Transform the probability distribution into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = probability_distribution - (1 - probability_distribution.sum(dim=1, keepdim=True))
    
    return heuristics_matrix
```
