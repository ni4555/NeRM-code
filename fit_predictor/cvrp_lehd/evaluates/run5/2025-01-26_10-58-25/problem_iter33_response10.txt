```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Invert demand penalties to make larger deviations penalize more
    inverted_demand_penalty_matrix = torch.abs(demands - vehicle_capacity) / vehicle_capacity
    
    # Normalize the inverted demand penalties to ensure all values are non-negative
    normalized_demand_penalty_matrix = F.relu(inverted_demand_penalty_matrix)
    
    # Use non-linear scaling for distance matrix to emphasize short distances
    distance_emphasis_matrix = torch.exp(-distance_matrix)
    
    # Normalize the distance emphasis matrix to maintain scale balance
    normalized_distance_emphasis_matrix = F.softmax(distance_emphasis_matrix, dim=1)
    
    # Combine normalized demand penalties and distance emphasis matrix
    combined_potential_matrix = (1 - 0.4) * normalized_demand_penalty_matrix + 0.4 * normalized_distance_emphasis_matrix
    
    # Dynamically adjust weights for demand and distance penalties based on capacity violations
    capacity_violation_mask = (inverted_demand_penalty_matrix > 1)
    adjusted_combined_potential_matrix = combined_potential_matrix.clone()
    adjusted_combined_potential_matrix[capacity_violation_mask] *= 1.5
    
    # Transform the adjusted combined potential matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_potential_matrix
    
    return heuristics_matrix
```
