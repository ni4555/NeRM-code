```python
def softmax(tensor, dim):
    e_tensor = torch.exp(tensor - tensor.max(dim=dim, keepdim=True)[0])
    return e_tensor / e_tensor.sum(dim=dim, keepdim=True)

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the sum of distances to each node from the depot, excluding the depot itself
    distances_from_depot = torch.sum(distance_matrix, dim=0, keepdim=True)
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = softmax(emphasized_matrix, dim=1)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Scale the combined matrix to ensure non-zero values
    combined_matrix = torch.clamp(combined_matrix, min=1e-6)
    
    # Normalize the combined matrix to the range [0, 1]
    scaled_combined_matrix = combined_matrix / combined_matrix.sum(dim=1, keepdim=True)
    
    # Apply a final transformation to create the heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -scaled_combined_matrix
    
    return heuristics_matrix
```
