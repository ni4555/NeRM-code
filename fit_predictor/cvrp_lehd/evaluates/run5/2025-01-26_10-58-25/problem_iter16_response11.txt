```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Calculate the penalty for each edge based on the sum of demands of the two nodes
    demand_penalty = torch.abs(demands[:, None] + demands[None, :]) - vehicle_capacity
    
    # Apply a non-linear transformation to the distance matrix to emphasize shorter distances
    distance_penalty = -torch.log(distance_matrix + 1e-6)
    
    # Combine the demand and distance penalties into a single potential matrix
    potential_matrix = demand_penalty + distance_penalty
    
    # Normalize the potential matrix to ensure non-negative values
    normalized_potential_matrix = torch.clamp(potential_matrix, min=0)
    
    # Scale the normalized potential matrix to a range between 0 and 1
    scaled_potential_matrix = normalized_potential_matrix / normalized_potential_matrix.max()
    
    # Convert the scaled potential matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = 2 * scaled_potential_matrix - 1
    
    return heuristics_matrix
```
