```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = torch.sqrt(distance_matrix + 1e-6)
    
    # Blend demand and distance penalties with a blend factor
    blend_factor = 0.5
    blended_penalty_matrix = blend_factor * penalty_matrix + (1 - blend_factor) * distance_penalty_matrix
    
    # Use a non-linear transformation to emphasize key factors
    emphasized_matrix = torch.relu(-blended_penalty_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity and balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Introduce diversity by adding a scaled random noise
    noise = torch.randn_like(emphasized_matrix)
    noise = (noise - noise.mean(dim=1, keepdim=True)) / noise.std(dim=1, keepdim=True)
    noisy_matrix = normalized_emphasized_matrix + 0.2 * noise
    
    # Combine the noisy matrix with the distance penalty matrix
    combined_matrix = noisy_matrix + 0.5 * distance_penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
