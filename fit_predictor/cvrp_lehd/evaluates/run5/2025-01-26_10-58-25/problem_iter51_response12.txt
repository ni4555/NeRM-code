```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the penalty matrix for scale
    normalized_penalty_matrix = penalty_matrix / torch.max(penalty_matrix)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = normalized_penalty_matrix + distance_penalty_matrix
    
    # Apply a linear transformation to balance demand and distance
    balanced_potential_matrix = potential_matrix / (torch.sum(potential_matrix, dim=1, keepdim=True) + 1e-6)
    
    # Ensure the potential matrix has positive values for proper heuristics computation
    positive_potential_matrix = torch.relu(balanced_potential_matrix)
    
    # Transform the potential matrix to ensure negative values represent undesirable edges
    heuristics_matrix = -positive_potential_matrix
    
    return heuristics_matrix
```
