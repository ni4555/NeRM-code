```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Normalize the distance penalty matrix to ensure non-negativity
    normalized_distance_penalty_matrix = F.normalize(distance_penalty_matrix, p=1, dim=1)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + normalized_distance_penalty_matrix
    
    # Apply a selective scaling by multiplying with a scaled factor
    scale_factor = torch.max(potential_matrix, dim=1)[0] * 0.1
    scaled_potential_matrix = potential_matrix * scale_factor.unsqueeze(1)
    
    # Normalize the scaled potential matrix to ensure non-negativity and scale balance
    normalized_scaled_potential_matrix = F.softmax(scaled_potential_matrix, dim=1)
    
    # Combine the normalized scaled potential matrix with the distance penalty matrix
    combined_matrix = normalized_scaled_potential_matrix + (1 - normalized_scaled_potential_matrix) * normalized_distance_penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -adjusted_combined_matrix
    
    return heuristics_matrix
```
