```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize the distance matrix to reduce the impact of large distances
    normalized_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(normalized_distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized emphasized matrix with the distance penalty matrix
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_penalty_matrix
    
    # Adjust the combined matrix to ensure that the values are not too close to zero
    adjusted_combined_matrix = combined_matrix - torch.min(combined_matrix)
    
    # Apply a small perturbation to ensure diversity and to prevent the algorithm from getting stuck in local optima
    perturbation = torch.rand_like(adjusted_combined_matrix)
    perturbation = (perturbation - 0.5) * 2  # Scale the perturbation to ensure non-negativity
    heuristics_matrix = adjusted_combined_matrix + perturbation
    
    # Transform the adjusted combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = heuristics_matrix - heuristics_matrix.min()
    
    return heuristics_matrix
```
