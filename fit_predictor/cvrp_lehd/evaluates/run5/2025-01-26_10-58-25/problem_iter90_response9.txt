```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Introduce randomness with Gaussian noise to encourage exploration
    noise_matrix = torch.randn_like(distance_matrix) * 1e-2
    
    # Use a non-linear transformation to emphasize the penalties
    emphasized_matrix = torch.sigmoid(penalty_matrix + noise_matrix)
    
    # Normalize the emphasized matrix to ensure non-negativity
    normalized_emphasized_matrix = emphasized_matrix / emphasized_matrix.sum(dim=1, keepdim=True)
    
    # Combine the normalized penalties with the original distance matrix
    combined_matrix = normalized_emphasized_matrix + 0.5 * distance_matrix
    
    # Introduce a second layer of randomness
    second_noise_matrix = torch.randn_like(combined_matrix) * 1e-2
    
    # Apply a small mutation to the combined matrix to promote diversity
    mutation_factor = torch.rand_like(combined_matrix)
    mutated_combined_matrix = combined_matrix + second_noise_matrix * mutation_factor
    
    # Final transformation into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -mutated_combined_matrix
    
    return heuristics_matrix
```
