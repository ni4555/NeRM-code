```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a series of transformations to emphasize constraints and differentiate
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    smoothed_matrix = F»ÌªØ(emphasized_matrix)
    scaled_matrix = smoothed_matrix * distance_penalty_matrix
    non_linear_matrix = torch.relu(scaled_matrix - distance_penalty_matrix)
    
    # Normalize the non-linear matrix to ensure non-negativity and scale balance
    normalized_non_linear_matrix = F.softmax(non_linear_matrix, dim=1)
    
    # Combine the normalized non-linear matrix with the distance penalty matrix
    combined_matrix = (1 - 0.5) * normalized_non_linear_matrix + 0.5 * distance_penalty_matrix
    
    # Introduce a final scaling to maintain a similar scale to the distance penalties
    final_scaled_matrix = combined_matrix / combined_matrix.sum(dim=1, keepdim=True)
    
    # Transform the final scaled matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -final_scaled_matrix
    
    return heuristics_matrix
```
