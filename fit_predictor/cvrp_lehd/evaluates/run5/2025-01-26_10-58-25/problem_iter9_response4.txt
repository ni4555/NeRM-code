```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Calculate the maximum possible sum of demands that can be carried by a single vehicle
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Apply a non-linear transformation to emphasize feasible and low-cost edges
    # Using the exponential to increase the importance of edges that are more feasible
    non_linear_matrix = torch.exp(potential_matrix)
    
    # Normalize the non-linear matrix to ensure that the values are in a manageable range
    # and to balance the impact of the demand and distance penalties
    normalized_matrix = (non_linear_matrix - torch.min(non_linear_matrix)) / \
                        (torch.max(non_linear_matrix) - torch.min(non_linear_matrix))
    
    # Transform the normalized matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -2 * normalized_matrix
    
    return heuristics_matrix
```
