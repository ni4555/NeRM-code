```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = torch.log1p(torch.exp(-torch.abs(demands - vehicle_capacity)))
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix
    
    # Normalize the potential matrix using softmax normalization to ensure positive values
    softmax_matrix = F.softmax(potential_matrix, dim=1)
    
    # Invert the softmax matrix to represent the heuristics
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -softmax_matrix
    
    return heuristics_matrix
```
