```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)
    
    # Introduce randomness by adding Gaussian noise with a small standard deviation
    noise_matrix = torch.randn_like(potential_matrix) * 1e-2
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = penalty_matrix + distance_penalty_matrix + noise_matrix
    
    # Normalize the potential matrix to ensure non-negativity and scale balance
    normalized_potential_matrix = potential_matrix / (potential_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(normalized_potential_matrix))
    
    # Introduce additional noise with different scaling for further randomness
    second_noise_matrix = torch.randn_like(emphasized_matrix) * 1e-3
    
    # Combine the emphasized matrix with the second noise term
    combined_matrix = emphasized_matrix + second_noise_matrix
    
    # Normalize the combined matrix to ensure non-negativity and scale balance
    normalized_combined_matrix = combined_matrix / (combined_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Apply a non-linear transformation to introduce diversity in the heuristics
    diverse_matrix = torch.relu(normalized_combined_matrix)
    
    # Introduce a third noise term for additional randomness
    third_noise_matrix = torch.randn_like(diverse_matrix) * 1e-2
    
    # Combine the diverse matrix with the third noise term
    combined_matrix = diverse_matrix + third_noise_matrix
    
    # Normalize the combined matrix to ensure non-negativity and scale balance
    normalized_combined_matrix = combined_matrix / (combined_matrix.sum(dim=1, keepdim=True) + 1e-6)
    
    # Transform the normalized combined matrix into a heuristics matrix
    # Negative values represent undesirable edges, positive values represent promising ones
    heuristics_matrix = -normalized_combined_matrix
    
    return heuristics_matrix
```
