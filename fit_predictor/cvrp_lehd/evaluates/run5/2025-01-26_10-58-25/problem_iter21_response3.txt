```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    
    vehicle_capacity = demands.sum() / demands.numel()
    
    # Create a penalty matrix for demand constraint violations
    penalty_matrix = -torch.abs(demands - vehicle_capacity)
    
    # Normalize demand penalty to make it more consistent with the scale of distances
    normalized_demand_penalty = penalty_matrix / vehicle_capacity
    
    # Create a distance-based penalty matrix to balance demand and distance penalties
    distance_penalty_matrix = -torch.log(distance_matrix + 1e-6)  # Adding a small constant to avoid log(0)
    
    # Use a scaling factor for both to keep the heuristic positive for small changes
    demand_penalty_scaled = (1.0 - 0.1) * normalized_demand_penalty + (0.1 / vehicle_capacity)
    distance_penalty_scaled = (0.5 - 0.05) * distance_penalty_matrix + (0.05)
    
    # Combine demand and distance penalties into a single potential matrix
    potential_matrix = demand_penalty_scaled + distance_penalty_scaled
    
    # Apply a non-linear transformation to emphasize constraints
    emphasized_matrix = torch.exp(-torch.abs(potential_matrix))
    
    # Normalize the emphasized matrix to ensure non-negativity and scale balance
    normalized_emphasized_matrix = F.softmax(emphasized_matrix, dim=1)
    
    # Apply selective scaling to emphasize the constraints over distances
    heuristics_matrix = (0.3 - 0.2) * normalized_emphasized_matrix + (0.2 / distance_matrix)
    
    return heuristics_matrix
```
