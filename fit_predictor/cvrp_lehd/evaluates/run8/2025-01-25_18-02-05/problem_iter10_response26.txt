```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Normalize the heuristic values to ensure they are within a certain range
    min_heuristic = torch.min(heuristic_matrix)
    max_heuristic = torch.max(heuristic_matrix)
    min_heuristic = min_heuristic if min_heuristic != max_heuristic else torch.tensor(1.0e-8)
    normalized_heuristic_matrix = (heuristic_matrix - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Apply thresholding to differentiate between promising and undesirable edges
    threshold = 0.5  # Example threshold, can be adjusted
    promising_mask = normalized_heuristic_matrix > threshold
    undesirable_mask = normalized_heuristic_matrix <= threshold
    
    # Set high heuristic values to positive values for promising edges
    promising_values = torch.clamp(normalized_heuristic_matrix[promising_mask], min=0, max=1)
    
    # Set low heuristic values to negative values for undesirable edges
    undesirable_values = -torch.clamp(normalized_heuristic_matrix[undesirable_mask], min=-1, max=0)
    
    # Combine the promising and undesirable values into the final heuristic matrix
    heuristic_matrix = torch.where(promising_mask, promising_values, undesirable_values)
    
    return heuristic_matrix
```
