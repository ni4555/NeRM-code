```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Apply a threshold to ensure all undesirable edges have negative values
    threshold = torch.min(demand_to_distance_ratio)
    
    # Convert the ratio into a heuristic matrix with negative values for undesirable edges
    heuristic_matrix = torch.where(demand_to_distance_ratio < threshold, -demand_to_distance_ratio, 0)
    
    return heuristic_matrix
```
