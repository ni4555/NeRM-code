```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Calculate the negative of this ratio to use as a heuristic
    # Negative values indicate undesirable edges (heuristic score is lower)
    heuristic_matrix = -demand_to_distance_ratio
    
    # Normalize the heuristic matrix by its maximum value to avoid overfitting
    normalized_heuristic_matrix = heuristic_matrix / torch.max(heuristic_matrix)
    
    # Use cumulative sums to add more weight to edges that, when visited early, can lead to better overall paths
    cumulative_sum_matrix = torch.cumsum(normalized_heuristic_matrix, dim=1)
    
    # Invert the cumulative sum matrix to favor paths that visit nodes in a way that leads to less backtracking
    inverted_cumulative_matrix = 1 - cumulative_sum_matrix
    
    # Calculate the threshold based on the inverted cumulative matrix
    threshold = torch.min(inverted_cumulative_matrix)
    
    # Apply the threshold to ensure all undesirable edges have negative values
    heuristic_matrix = torch.where(inverted_cumulative_matrix < threshold, inverted_cumulative_matrix, 0)
    
    return heuristic_matrix
```
