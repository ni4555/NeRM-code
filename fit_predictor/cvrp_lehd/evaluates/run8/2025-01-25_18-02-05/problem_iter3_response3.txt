```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Calculate the cumulative sum of the demand-to-distance ratio from the depot
    cumulative_demand_to_distance_ratio = torch.cumsum(demand_to_distance_ratio, dim=1)
    
    # Invert high scores by subtracting from 1
    inverted_scores = 1 - cumulative_demand_to_distance_ratio
    
    # Normalize the inverted scores to maintain the relative differences
    max_score = torch.max(inverted_scores)
    inverted_scores = inverted_scores / max_score
    
    # Use a threshold to remove undesirable edges
    threshold = torch.mean(inverted_scores)
    heuristic_matrix = torch.where(inverted_scores > threshold, inverted_scores, 0)
    
    return heuristic_matrix
```
