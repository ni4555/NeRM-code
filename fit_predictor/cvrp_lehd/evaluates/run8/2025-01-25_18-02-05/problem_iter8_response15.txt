```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Normalize the cumulative demands and distances to the range [0, 1]
    normalized_demands = cumulative_demands / torch.sum(cumulative_demands)
    normalized_distances = cumulative_distances / torch.sum(cumulative_distances)
    
    # Invert the normalized distances and apply a non-linear transformation (e.g., hyperbolic tangent)
    inverted_transformed_distances = torch.tanh(normalized_distances * -1)
    
    # Calculate the heuristic values based on the ratio of normalized demand to inverted and transformed distance
    heuristic_matrix = normalized_demands / inverted_transformed_distances
    
    # Apply a threshold to filter out less promising edges
    threshold = torch.max(heuristic_matrix)
    heuristic_matrix = torch.where(heuristic_matrix < threshold, -1 * threshold, heuristic_matrix)
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
