```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Calculate the cumulative demand up to each customer, excluding the depot
    cumulative_demands = torch.cumsum(demands[1:], dim=0) / torch.sum(demands[1:])
    
    # Calculate the combined heuristic which is a combination of the ratio and the cumulative demand
    combined_heuristic = demand_to_distance_ratio + cumulative_demands
    
    # Normalize the combined heuristic to ensure positive values
    min_value = torch.min(combined_heuristic)
    max_value = torch.max(combined_heuristic)
    normalized_heuristic = (combined_heuristic - min_value) / (max_value - min_value)
    
    return normalized_heuristic
```
