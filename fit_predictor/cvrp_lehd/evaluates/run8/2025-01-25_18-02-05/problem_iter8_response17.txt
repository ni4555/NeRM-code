```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize the demands and distances to the range [0, 1]
    demands_max = demands.max()
    demands_min = demands.min()
    distances_max = distance_matrix.max()
    distances_min = distance_matrix.min()
    
    normalized_demands = (demands - demands_min) / (demands_max - demands_min)
    normalized_distances = (distance_matrix - distances_min) / (distances_max - distances_min)
    
    # Invert the normalized distances to give a preference to shorter paths
    inverted_distances = 1 - normalized_distances
    
    # Combine demand and distance in a non-linear way
    combined_weight = normalized_demands * inverted_distances
    
    # Apply a dynamic threshold based on the combined weight
    threshold = combined_weight.mean()
    dynamic_threshold = torch.exp(combined_weight / threshold)
    
    # Use the dynamic threshold to filter the edges
    filtered_edges = dynamic_threshold > 1
    
    # Generate the heuristic matrix based on the filtered edges
    heuristic_matrix = torch.zeros_like(distance_matrix)
    heuristic_matrix[filtered_edges] = combined_weight[filtered_edges]
    
    # Scale the heuristic values to be within the range of [-1, 1]
    min_val = heuristic_matrix.min()
    max_val = heuristic_matrix.max()
    heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    # Ensure the heuristic values are within the desired range
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
