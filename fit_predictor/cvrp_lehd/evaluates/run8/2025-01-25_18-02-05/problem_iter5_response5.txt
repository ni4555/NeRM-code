```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Apply a non-linear transformation (e.g., sigmoid) to emphasize higher ratios
    # and add a penalty for larger distances to avoid long unnecessary detours
    # This introduces a threshold to ensure that the heuristic values are comparable
    threshold = torch.max(heuristic_matrix)
    transformed_matrix = torch.sigmoid(heuristic_matrix - threshold) + threshold
    
    # Normalize the transformed matrix to ensure all values are within the range [0, 1]
    max_transformed = torch.max(transformed_matrix)
    normalized_matrix = transformed_matrix / max_transformed
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(normalized_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
