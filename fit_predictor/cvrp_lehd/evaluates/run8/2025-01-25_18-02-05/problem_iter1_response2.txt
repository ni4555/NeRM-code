```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the Manhattan distance for each edge as a heuristic
    horizontal_distance = distance_matrix[:, 1:] - distance_matrix[:, :-1]
    vertical_distance = distance_matrix[1:, :] - distance_matrix[:-1, :]
    manhattan_distance = torch.abs(horizontal_distance) + torch.abs(vertical_distance)
    
    # Normalize the Manhattan distance by the demand to get a heuristic value
    heuristic_matrix = -manhattan_distance / demands[1:]
    
    # Set the depot's heuristic value to a high negative number to avoid choosing it
    depot_index = 0
    heuristic_matrix[depot_index, :] = -float('inf')
    heuristic_matrix[:, depot_index] = -float('inf')
    
    return heuristic_matrix
```
