```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Normalize the cumulative demand-to-distance ratio by the total vehicle capacity to avoid overfitting
    total_demand = demands.sum()
    normalized_cumulative_demand_to_distance = cumulative_demands / total_demand
    
    # Invert the normalized cumulative demand-to-distance ratio to prioritize sparsity
    inverted_normalized_demand_to_distance = 1 / (normalized_cumulative_demand_to_distance + 1e-10)  # Add a small constant to avoid division by zero
    
    # Calculate the heuristic values by combining the inverse normalized ratio with the original demands
    combined_heuristic = demands * inverted_normalized_demand_to_distance
    
    # Apply a non-linear transformation to emphasize longer distances and negative profits
    heuristic_matrix = torch.exp(-2 * combined_heuristic)
    
    # Set the edges with zero demand or zero distance to zero in the heuristic matrix
    heuristic_matrix = torch.where(torch.isnan(heuristic_matrix), 0, heuristic_matrix)
    
    return heuristic_matrix
```
