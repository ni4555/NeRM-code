```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the difference between the maximum and minimum demand
    demand_range = torch.max(demands) - torch.min(demands)
    
    # Create a matrix of the same shape as the distance matrix with the demand range
    demand_range_matrix = torch.full_like(distance_matrix, demand_range)
    
    # Calculate the heuristic as the difference between the demand range and the distance
    heuristic_matrix = demand_range_matrix - distance_matrix
    
    # Normalize the heuristic matrix by the sum of demands to ensure it's on a comparable scale
    # and to give more weight to edges with higher demands
    demand_sum = torch.sum(demands)
    normalized_heuristic_matrix = heuristic_matrix / demand_sum
    
    # Calculate the mean of the normalized heuristic matrix to use as a balance point
    mean_normalized_heuristic = torch.mean(normalized_heuristic_matrix)
    
    # Apply the balance point to transform the normalized heuristic into a range of [-1, 1]
    # with the balance point as the zero point
    heuristic_matrix = 2 * (normalized_heuristic_matrix - mean_normalized_heuristic) + 1
    
    # Apply a threshold to ensure all undesirable edges have negative values
    threshold = torch.min(heuristic_matrix)
    heuristic_matrix = torch.where(heuristic_matrix < threshold, heuristic_matrix, 0)
    
    return heuristic_matrix
```
