```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Calculate the cumulative sums of the demand-to-distance ratio
    cumulative_sums = torch.cumsum(demand_to_distance_ratio, dim=0)
    
    # Calculate the threshold as the maximum cumulative sum
    threshold = torch.max(cumulative_sums)
    
    # Apply the threshold to ensure all undesirable edges have negative values
    heuristic_matrix = torch.where(demand_to_distance_ratio < threshold, -cumulative_sums, 0)
    
    # Emphasize longer distances through a non-linear transformation
    heuristic_matrix = torch.exp(-heuristic_matrix)
    
    return heuristic_matrix
```
