```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Normalize the demand-to-distance ratio by the total vehicle capacity
    total_demand = demands.sum()
    normalized_demand_to_distance = demand_to_distance_ratio / total_demand
    
    # Invert the normalized demand-to-distance ratio to prioritize less traveled edges
    inverted_normalized_demand = 1 / (normalized_demand_to_distance + 1e-10)  # Add a small constant to avoid division by zero
    
    # Apply a non-linear transformation to emphasize longer distances and negative profits
    heuristic_matrix = torch.exp(-2 * inverted_normalized_demand)
    
    # Set the edges with zero demand or zero distance to zero in the heuristic matrix
    heuristic_matrix = torch.where(torch.isnan(heuristic_matrix) | torch.isinf(heuristic_matrix), 0, heuristic_matrix)
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
