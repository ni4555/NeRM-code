```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Apply a non-linear transformation to the heuristic values
    transformed_heuristic_matrix = torch.tanh(heuristic_matrix)
    
    # Normalize the transformed heuristic values
    max_transformed = torch.max(transformed_heuristic_matrix)
    min_transformed = torch.min(transformed_heuristic_matrix)
    normalized_heuristic_matrix = (transformed_heuristic_matrix - min_transformed) / (max_transformed - min_transformed)
    
    # Apply thresholding to differentiate between promising and undesirable edges
    threshold = 0.5  # Example threshold, can be adjusted
    promising_mask = normalized_heuristic_matrix > threshold
    undesirable_mask = normalized_heuristic_matrix <= threshold
    
    # Set high heuristic values to positive values for promising edges
    promising_values = 1.0 - threshold
    undesirable_values = -1.0
    
    # Assign heuristic values based on the mask
    heuristic_matrix = torch.where(promising_mask, promising_values * normalized_heuristic_matrix, undesirable_values * normalized_heuristic_matrix)
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
