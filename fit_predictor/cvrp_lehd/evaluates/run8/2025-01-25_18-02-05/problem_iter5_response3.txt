```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Apply a non-linear transformation to the heuristic values to emphasize the relative demand
    heuristic_matrix = torch.log(heuristic_matrix)
    
    # Thresholding to promote edges with higher demand-to-distance ratios
    threshold = torch.max(heuristic_matrix)
    heuristic_matrix = torch.where(heuristic_matrix < threshold, heuristic_matrix, -threshold)
    
    # Scale the values to ensure they are within the range of [-1, 1]
    min_val, max_val = heuristic_matrix.min(), heuristic_matrix.max()
    scaled_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    scaled_matrix = scaled_matrix * 2 - 1
    
    return scaled_matrix
```
