```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Apply a non-linear transformation to enhance differentiation
    transformed_matrix = torch.exp(heuristic_matrix)
    
    # Normalize the transformed matrix to maintain sparsity
    normalized_matrix = transformed_matrix / transformed_matrix.sum()
    
    # Apply thresholding to create a binary matrix where higher values are more promising
    threshold = torch.max(normalized_matrix)
    binary_matrix = torch.where(normalized_matrix < threshold, torch.tensor(0.0), torch.tensor(1.0))
    
    # Convert the binary matrix back to the original scale and clip to the range [-1, 1]
    scaled_matrix = (binary_matrix - 0.5) * 2
    heuristic_matrix = torch.clamp(scaled_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
