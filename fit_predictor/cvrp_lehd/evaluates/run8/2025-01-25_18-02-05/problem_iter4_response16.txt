```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand to normalize by
    total_demand = torch.sum(demands)
    
    # Normalize demands and distances
    normalized_demands = demands / total_demand
    normalized_distance_matrix = distance_matrix / total_demand
    
    # Calculate the heuristic values based on the difference between normalized demands and distances
    heuristic_matrix = normalized_demands - normalized_distance_matrix
    
    # Apply a weight to the heuristic matrix based on the demand variability
    # This is done by dividing by the sum of the normalized demands, which acts as a scaling factor
    demand_weight_matrix = 1 / (torch.sum(normalized_demands) + 1e-6)  # Adding a small constant to avoid division by zero
    weighted_heuristic_matrix = heuristic_matrix * demand_weight_matrix
    
    # Convert the weighted heuristic into a range of [-1, 1] using a sigmoid function
    sigmoid_transform = torch.sigmoid(weighted_heuristic_matrix)
    
    # Threshold to convert some positive values into negative ones, effectively filtering out undesirable edges
    threshold = 0.5  # This threshold can be tuned
    heuristic_matrix = torch.where(sigmoid_transform < threshold, -1 * sigmoid_transform, sigmoid_transform)
    
    # Ensure the values are within the range [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
