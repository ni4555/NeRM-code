```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Use a non-linear transformation to increase the contrast of the heuristic values
    # The transformation is chosen to enhance sparsity by reducing the contribution of
    # edges with lower demand-to-distance ratios
    heuristic_matrix = torch.relu(heuristic_matrix)
    
    # Normalize the heuristic matrix to the range [0, 1]
    min_val = torch.min(heuristic_matrix)
    max_val = torch.max(heuristic_matrix)
    normalized_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    # Set high heuristic values to negative values by subtracting from the threshold
    threshold = 0.5  # Dynamic threshold set to 0.5 for example
    heuristic_matrix = torch.where(normalized_matrix < threshold, normalized_matrix, -normalized_matrix)
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
