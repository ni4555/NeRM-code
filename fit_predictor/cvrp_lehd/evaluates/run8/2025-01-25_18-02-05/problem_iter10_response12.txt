```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Calculate the cumulative sum of the demand-to-distance ratio for each row
    cumulative_demand_to_distance = torch.cumsum(demand_to_distance_ratio, dim=1)
    
    # Normalize the cumulative sum by the total vehicle capacity to avoid overfitting
    total_demand = demands.sum()
    normalized_cumulative_demand = cumulative_demand_to_distance / total_demand
    
    # Invert the normalized cumulative sum to prioritize sparsity
    inverted_normalized_demand = 1 / (normalized_cumulative_demand + 1e-10)  # Add a small constant to avoid division by zero
    
    # Calculate the product of the inverse normalized cumulative sum with the original demands
    combined_heuristic = demands * inverted_normalized_demand
    
    # Apply a non-linear transformation to emphasize longer distances and negative profits
    heuristic_matrix = torch.exp(-2 * combined_heuristic)
    
    # Set the edges with zero demand or zero distance to zero in the heuristic matrix
    heuristic_matrix = torch.where(torch.isnan(heuristic_matrix), 0, heuristic_matrix)
    
    # Ensure that the heuristic matrix has negative values for undesirable edges
    # and positive values for promising ones
    min_val = heuristic_matrix.min()
    max_val = heuristic_matrix.max()
    heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    # Scale the heuristic matrix to ensure it is within the range [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
