```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand along each path
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative distance along each path
    cumulative_distance = torch.cumsum(distance_matrix, dim=0)
    
    # Normalize the cumulative demand and distance
    normalized_demand = cumulative_demand / cumulative_demand[-1]
    normalized_distance = cumulative_distance / cumulative_distance[-1]
    
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = normalized_demand / normalized_distance
    
    # Invert the ratio to use as a heuristic
    heuristic_matrix = -torch.log(1 + demand_to_distance_ratio)
    
    # Calculate the variance of the ratio
    ratio_variance = torch.var(demand_to_distance_ratio)
    
    # Normalize the variance by the total vehicle capacity
    normalized_variance = ratio_variance / demands.sum()
    
    # Combine the heuristic with the demand variance-based heuristic
    combined_heuristic = heuristic_matrix + normalized_variance
    
    # Apply a non-linear transformation to emphasize longer distances
    heuristic_matrix = torch.exp(-combined_heuristic)
    
    # Calculate the minimum value of the heuristic matrix for thresholding
    min_value = torch.min(heuristic_matrix)
    
    # Apply the threshold to ensure all undesirable edges have negative values
    heuristic_matrix = torch.where(heuristic_matrix < min_value, heuristic_matrix, 0)
    
    # Set a minimum positive value to avoid zero heuristic values
    heuristic_matrix = torch.clamp(heuristic_matrix, min=1e-8)
    
    return heuristic_matrix
```
