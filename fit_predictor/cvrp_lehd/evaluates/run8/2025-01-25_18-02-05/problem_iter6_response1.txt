```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Invert the heuristic matrix to make negative values more promising
    heuristic_matrix = -heuristic_matrix
    
    # Apply a non-linear transformation using the hyperbolic tangent function
    # This helps to compress the values into a smaller range, emphasizing differences
    heuristic_matrix = torch.tanh(heuristic_matrix)
    
    # Normalize the values to be within the range [-1, 1]
    normalized_matrix = (heuristic_matrix + 1) / 2
    
    return normalized_matrix
```
