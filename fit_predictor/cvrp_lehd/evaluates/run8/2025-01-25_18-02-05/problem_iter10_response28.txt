```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the ratio of demand to distance for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Normalize the ratio by the maximum ratio to avoid overfitting
    normalized_ratio = demand_to_distance_ratio / torch.max(demand_to_distance_ratio)
    
    # Invert the normalized ratio to prioritize less visited edges
    inverted_normalized_ratio = 1 / (normalized_ratio + 1e-10)  # Add a small constant to avoid division by zero
    
    # Calculate a weighted sum of the original demands and the inverted normalized ratio
    combined_heuristic = demands * inverted_normalized_ratio
    
    # Apply a non-linear transformation to emphasize important features
    heuristic_matrix = torch.relu(-2 * combined_heuristic)
    
    # Set the edges with zero demand or zero distance to zero in the heuristic matrix
    heuristic_matrix = torch.where(torch.isnan(heuristic_matrix), 0, heuristic_matrix)
    
    # Normalize the resulting heuristic matrix to be between 0 and 1
    max_heuristic = torch.max(heuristic_matrix)
    min_heuristic = torch.min(heuristic_matrix)
    normalized_heuristic_matrix = (heuristic_matrix - min_heuristic) / (max_heuristic - min_heuristic)
    
    # Apply thresholding to highlight potential solutions
    threshold = torch.mean(normalized_heuristic_matrix)
    heuristic_matrix = torch.where(normalized_heuristic_matrix > threshold, normalized_heuristic_matrix, -threshold)
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
