```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Apply a non-linear transformation to the ratio of cumulative demand to cumulative distance
    # Here, we use a logarithmic transformation to emphasize the importance of edges with
    # smaller cumulative distances and larger cumulative demands
    heuristic_matrix = torch.log(cumulative_demands / safe_distances)
    
    # Introduce a dynamic threshold based on the sparsity of the distance matrix
    # We use the average of the logarithmic heuristic values to set the threshold
    threshold = torch.mean(heuristic_matrix)
    
    # Assign negative values to edges that are less promising than the threshold
    heuristic_matrix = torch.where(heuristic_matrix < threshold, -heuristic_matrix, heuristic_matrix)
    
    # Apply the same clipping as in the previous heuristic to ensure the values are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
