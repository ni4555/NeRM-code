```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand to normalize by
    total_demand = torch.sum(demands)
    
    # Normalize demands and distances
    normalized_demands = demands / total_demand
    normalized_distance_matrix = distance_matrix / total_demand
    
    # Calculate the heuristic values based on the demand to distance ratio
    heuristic_matrix = normalized_demands / normalized_distance_matrix
    
    # Emphasize variability in demand by dividing the heuristic values by the standard deviation of demands
    std_demand = torch.std(demands)
    heuristic_matrix /= std_demand
    
    # Apply a non-linear transformation to the heuristic matrix to ensure a range of [-1, 1]
    heuristic_matrix = torch.tanh(heuristic_matrix) * 2 - 1
    
    # Introduce a threshold to penalize edges with heuristic values close to 0, favoring diversity in solution
    threshold = 0.1
    heuristic_matrix = torch.where(heuristic_matrix < threshold, -heuristic_matrix, heuristic_matrix)
    
    return heuristic_matrix
```
