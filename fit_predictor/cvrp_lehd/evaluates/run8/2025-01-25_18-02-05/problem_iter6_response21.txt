```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Calculate the negative of this ratio to use as a heuristic
    # Negative values indicate undesirable edges (heuristic score is lower)
    heuristic_matrix = -demand_to_distance_ratio
    
    # Apply a threshold based on the maximum ratio observed
    max_ratio = torch.max(demand_to_distance_ratio)
    threshold = -max_ratio
    
    # Set the heuristic values for undesirable edges
    heuristic_matrix = torch.where(demand_to_distance_ratio < threshold, heuristic_matrix, torch.zeros_like(heuristic_matrix))
    
    return heuristic_matrix
```
