```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Incorporate non-linear transformation (e.g., logarithm) to emphasize larger ratios
    # and apply thresholding to ensure high demand-to-distance ratios are penalized
    log_transformed = torch.log(heuristic_matrix)
    threshold = torch.max(log_transformed)
    transformed_matrix = torch.where(log_transformed < threshold, log_transformed, -threshold)
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    transformed_matrix = torch.clamp(transformed_matrix, min=-1, max=1)
    
    # Adjust for capacity by adding the inverse of the cumulative capacity
    # This introduces a balance between demand and vehicle capacity
    cumulative_capacity = torch.cumsum(torch.ones_like(demands), dim=0)
    adjusted_matrix = transformed_matrix + (1 / cumulative_capacity)
    
    return adjusted_matrix
```
