```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Calculate the negative of this ratio to use as a heuristic
    # Negative values indicate undesirable edges (heuristic score is lower)
    heuristic_matrix = -demand_to_distance_ratio
    
    # Instead of a simple threshold, calculate cumulative sums of the heuristic values
    # and use the maximum cumulative sum as a threshold
    cumulative_sums = torch.cumsum(heuristic_matrix, dim=0)
    threshold = torch.max(cumulative_sums)
    
    # Apply the threshold to ensure all undesirable edges have negative values
    heuristic_matrix = torch.where(heuristic_matrix < threshold, heuristic_matrix, 0)
    
    return heuristic_matrix
```
