```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Normalize demands and distances by total capacity
    normalized_demands = demands / demands.sum()
    normalized_distances = distance_matrix / distance_matrix.sum()
    
    # Invert the normalized distances to prioritize shorter distances
    inverted_distances = 1 / (normalized_distances + 1e-8)
    
    # Apply a non-linear transformation to emphasize relative differences
    transformed_distances = torch.log(inverted_distances)
    
    # Calculate the cumulative sum of transformed distances and demands
    cumulative_transformed_distances = torch.cumsum(transformed_distances, dim=0)
    cumulative_demands = torch.cumsum(normalized_demands, dim=0)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative transformed distance
    heuristic_matrix = cumulative_demands / cumulative_transformed_distances
    
    # Use thresholds to filter and emphasize relative differences
    threshold = torch.max(heuristic_matrix)
    heuristic_matrix = torch.where(heuristic_matrix < threshold, heuristic_matrix, -threshold)
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
