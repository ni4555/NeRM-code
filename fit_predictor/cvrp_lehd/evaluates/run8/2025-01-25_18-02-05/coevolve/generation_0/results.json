{
  "generation": 0,
  "description": "Assisting in solving Capacitated Vehicle Routing Problem (CVRP) with some prior heuristics. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the demand-to-distance ratio for each edge\n    demand_to_distance_ratio = demands / distance_matrix\n    \n    # Calculate the negative of this ratio to use as a heuristic\n    # Negative values indicate undesirable edges (heuristic score is lower)\n    heuristic_matrix = -demand_to_distance_ratio\n    \n    # To ensure that we have a proper heuristic with negative values for undesirable edges,\n    # we can set a threshold. This threshold can be chosen based on empirical evidence or\n    # some heuristic.\n    threshold = torch.min(heuristic_matrix)\n    \n    # Apply the threshold to ensure all undesirable edges have negative values\n    heuristic_matrix = torch.where(heuristic_matrix < threshold, heuristic_matrix, 0)\n    \n    return heuristic_matrix",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_9.txt",
      "code_file": "coevolve\\generation_0\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # The number of nodes (including the depot)\n    num_nodes = distance_matrix.shape[0]\n    \n    # Normalize demands by the total vehicle capacity for simplicity\n    # Assuming that the total vehicle capacity is 1 for normalization\n    total_demand = demands.sum()\n    normalized_demands = demands / total_demand\n    \n    # Initialize the heuristics matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n    \n    # Iterate over all edges (i, j) except for the diagonal\n    for i in range(num_nodes):\n        for j in range(num_nodes):\n            if i != j:\n                # Calculate the heuristic value\n                # We assume that the more demanding the customer, the higher the heuristic\n                # This is a simple heuristic where we add the normalized demand\n                heuristics[i, j] = normalized_demands[j]\n                \n    return heuristics",
      "fitness": 21.478605270385742,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_3.txt",
      "code_file": "coevolve\\generation_0\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands to the range [0, 1] by dividing by the sum of demands\n    normalized_demands = demands / demands.sum()\n    \n    # Create a matrix where the element at (i, j) is the normalized demand of node j from node i\n    # The diagonal elements are set to 0 as they represent the demand of the node itself\n    demand_matrix = torch.zeros_like(distance_matrix)\n    demand_matrix.fill_diagonal_(0)\n    demand_matrix = demand_matrix * normalized_demands\n    \n    # Calculate the cumulative sum of demands along the rows (from the depot to each customer)\n    cumulative_demand = demand_matrix.sum(dim=1)\n    \n    # Calculate the cumulative sum of demands along the columns (from each customer to the depot)\n    cumulative_demand_transposed = demand_matrix.sum(dim=0)\n    \n    # Calculate the minimum cumulative demand along each path (from the depot to a customer and back)\n    min_cumulative_demand = torch.min(cumulative_demand, cumulative_demand_transposed)\n    \n    # The heuristic value for each edge is the difference between the total distance and the minimum\n    # cumulative demand. We subtract this from the total distance to get negative values for\n    # undesirable edges and positive values for promising ones.\n    heuristics = distance_matrix - min_cumulative_demand\n    \n    return heuristics",
      "fitness": 21.57149314880371,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_11.txt",
      "code_file": "coevolve\\generation_0\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the sum of the demands to normalize\n    total_demand = demands.sum()\n    \n    # Normalize the demands to the range [0, 1] based on the total vehicle capacity\n    normalized_demands = demands / total_demand\n    \n    # Create a matrix of all ones\n    ones_matrix = torch.ones_like(distance_matrix)\n    \n    # Calculate the cost of not visiting a customer, which is the demand of the customer\n    non_visit_cost = normalized_demands * demands\n    \n    # Calculate the cost of visiting a customer, which is the distance from the depot\n    visit_cost = distance_matrix\n    \n    # Combine the non-visit and visit costs into a single matrix\n    combined_costs = non_visit_cost - visit_cost\n    \n    # Add a small positive constant to avoid division by zero\n    epsilon = 1e-8\n    combined_costs = combined_costs / (combined_costs.abs() + epsilon)\n    \n    # Apply a threshold to the combined costs to create the heuristics matrix\n    heuristics_matrix = torch.clamp(combined_costs, min=epsilon)\n    \n    return heuristics_matrix",
      "fitness": 21.657936096191406,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_1.txt",
      "code_file": "coevolve\\generation_0\\code_1.py"
    }
  ]
}