{
  "generations": [
    {
      "generation": 0,
      "description": "Assisting in solving Capacitated Vehicle Routing Problem (CVRP) with some prior heuristics. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.",
      "best_fitness": 21.410755157470703,
      "best_code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the demand-to-distance ratio for each edge\n    demand_to_distance_ratio = demands / distance_matrix\n    \n    # Calculate the negative of this ratio to use as a heuristic\n    # Negative values indicate undesirable edges (heuristic score is lower)\n    heuristic_matrix = -demand_to_distance_ratio\n    \n    # To ensure that we have a proper heuristic with negative values for undesirable edges,\n    # we can set a threshold. This threshold can be chosen based on empirical evidence or\n    # some heuristic.\n    threshold = torch.min(heuristic_matrix)\n    \n    # Apply the threshold to ensure all undesirable edges have negative values\n    heuristic_matrix = torch.where(heuristic_matrix < threshold, heuristic_matrix, 0)\n    \n    return heuristic_matrix"
    }
  ]
}