```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize demands and distances by the total capacity
    normalized_demands = demands / demands.sum()
    normalized_distances = distance_matrix / distance_matrix.sum()

    # Invert the normalized distances to prioritize shorter paths
    inverted_distances = 1 - normalized_distances

    # Apply a non-linear transformation to emphasize relative differences
    transformed_distances = torch.pow(inverted_distances, 2)

    # Calculate cumulative sum of transformed distances and normalized demands
    cumulative_transformed_distances = torch.cumsum(transformed_distances, dim=0)
    cumulative_normalized_demands = torch.cumsum(normalized_demands, dim=0)

    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_transformed_distances == 0, torch.tensor(1.0e-8), cumulative_transformed_distances)

    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative transformed distance
    heuristic_matrix = cumulative_normalized_demands / safe_distances

    # Use thresholds to filter and emphasize relative differences
    threshold = torch.max(heuristic_matrix)
    heuristic_matrix = torch.where(heuristic_matrix < threshold, heuristic_matrix, -threshold)

    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)

    return heuristic_matrix
```
