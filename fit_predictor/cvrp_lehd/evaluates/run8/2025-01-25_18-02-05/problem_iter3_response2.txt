```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Calculate the cumulative sum of the demand-to-distance ratio for each row
    cumulative_demand_to_distance = torch.cumsum(demand_to_distance_ratio, dim=1)
    
    # Normalize the cumulative sum by the total vehicle capacity to avoid overfitting
    normalized_cumulative_demand = cumulative_demand_to_distance / demands.sum()
    
    # Invert the high scores to promote less traveled edges
    inverted_scores = 1 / (normalized_cumulative_demand + 1e-10)  # Add a small constant to avoid division by zero
    
    # Calculate the threshold as the minimum inverted score
    threshold = torch.min(inverted_scores)
    
    # Apply the threshold to ensure all undesirable edges have negative values
    heuristic_matrix = torch.where(inverted_scores < threshold, -inverted_scores, 0)
    
    return heuristic_matrix
```
