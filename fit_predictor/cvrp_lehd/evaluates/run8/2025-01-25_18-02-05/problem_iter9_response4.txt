```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Non-linear transformation of the heuristic values using a sigmoid function
    heuristic_matrix = torch.sigmoid(heuristic_matrix)
    
    # Normalize the heuristic values to a range of [0, 1]
    heuristic_matrix = heuristic_matrix / torch.max(heuristic_matrix)
    
    # Apply a thresholding technique to differentiate between high and low values
    threshold = torch.mean(heuristic_matrix)
    heuristic_matrix = torch.where(heuristic_matrix < threshold, heuristic_matrix, torch.tensor(1.0))
    
    # Clip the values to be within the desired range to ensure they are within [0, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=0, max=1)
    
    return heuristic_matrix
```
