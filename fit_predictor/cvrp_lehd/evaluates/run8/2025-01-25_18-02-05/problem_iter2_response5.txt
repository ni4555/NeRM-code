```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand range, which is the difference between the maximum and minimum demand
    demand_range = torch.max(demands) - torch.min(demands)
    
    # Create a matrix of the same shape as the distance matrix with the demand range
    demand_range_matrix = torch.full_like(distance_matrix, demand_range)
    
    # Calculate the heuristic as the difference between the demand range and the distance
    heuristic_matrix = demand_range_matrix - distance_matrix
    
    # Normalize the heuristic matrix by the sum of demands to ensure it's on a comparable scale
    # and to give more weight to edges with higher demands
    demand_sum = torch.sum(demands)
    normalized_heuristic_matrix = heuristic_matrix / demand_sum
    
    # Calculate the mean of the normalized heuristic matrix
    mean_normalized_heuristic = torch.mean(normalized_heuristic_matrix)
    
    # Create a threshold below which the heuristic values are considered undesirable
    threshold = mean_normalized_heuristic - demand_range
    
    # Apply the threshold to ensure all undesirable edges have negative values
    heuristic_matrix = torch.where(normalized_heuristic_matrix < threshold, normalized_heuristic_matrix, -1)
    
    # To ensure that the heuristic values are within the range [-1, 1], we can bound the values
    # However, since we are using -1 to represent undesirable edges, we only need to ensure the
    # positive values are bounded. We do this by taking the minimum of the threshold and the
    # normalized heuristic matrix.
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
