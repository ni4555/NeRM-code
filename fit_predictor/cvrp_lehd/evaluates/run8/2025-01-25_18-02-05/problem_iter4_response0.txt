```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / cumulative_distances
    
    # Apply a non-linear transformation to emphasize longer distances and reduce the impact of shorter ones
    # Use a negative exponent to ensure the transformation is non-increasing with distance
    large_value = torch.max(cumulative_distances) + 1
    heuristic_matrix = torch.exp(-heuristic_matrix * (large_value / cumulative_distances))
    
    # Subtract the heuristic matrix from a large value to ensure negative values for undesirable edges
    min_threshold = torch.min(heuristic_matrix)
    heuristic_matrix = -torch.exp(min_threshold)
    
    # Normalize the heuristic values to be in the range of [-1, 1]
    max_heuristic = torch.max(-heuristic_matrix)
    heuristic_matrix = (heuristic_matrix - min_threshold) / (max_heuristic - min_threshold) * 2 - 1
    
    return heuristic_matrix
```
