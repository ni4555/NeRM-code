```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Calculate the cumulative demand-to-distance ratio as we move along each edge
    heuristic_matrix = cumulative_demands / cumulative_distances
    
    # Define a large number to set as the threshold for desirable heuristic values
    threshold = torch.max(heuristic_matrix)
    
    # Subtract the threshold from the heuristic values to get negative values for high heuristic scores
    heuristic_matrix = -heuristic_matrix + threshold
    
    # Set a minimum threshold for the heuristic values to ensure they are negative
    min_threshold = torch.min(heuristic_matrix)
    
    # Apply the minimum threshold to ensure all heuristic values are negative
    heuristic_matrix = torch.where(heuristic_matrix < min_threshold, heuristic_matrix, -min_threshold)
    
    return heuristic_matrix
```
