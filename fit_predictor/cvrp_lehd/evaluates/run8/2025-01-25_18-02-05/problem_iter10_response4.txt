```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Apply a non-linear transformation to emphasize differences in heuristic values
    transformed_matrix = torch.tanh(heuristic_matrix)
    
    # Normalize the transformed matrix to enhance sparsity
    max_val = torch.max(transformed_matrix)
    normalized_matrix = transformed_matrix / max_val
    
    # Apply thresholding to enhance differentiation
    threshold = 0.1
    threshold_matrix = torch.where(normalized_matrix > threshold, normalized_matrix, 0)
    
    # Limit output range to maintain feasibility
    heuristic_matrix = torch.clamp(threshold_matrix, min=0, max=1)
    
    return heuristic_matrix
```
