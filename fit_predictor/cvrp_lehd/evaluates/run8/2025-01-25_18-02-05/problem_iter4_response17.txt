```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize the distance matrix
    distance_matrix_min = torch.min(distance_matrix)
    normalized_distance_matrix = (distance_matrix - distance_matrix_min) / (torch.max(distance_matrix) - distance_matrix_min)
    
    # Calculate the inverse of the normalized distance matrix
    distance_matrix_inv = 1 / (normalized_distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Calculate the product of demand and inverse distance for each edge
    demand_distance_product = demands * distance_matrix_inv
    
    # Normalize the product by the total vehicle capacity to get a demand-based heuristic
    normalized_demand = demands / demands.sum()
    demand_based_heuristic = demand_distance_product * normalized_demand
    
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distance = torch.cumsum(normalized_distance_matrix, dim=0)
    
    # Calculate the cumulative demand-to-distance ratio as we move along each edge
    cumulative_ratio = cumulative_demand / cumulative_distance
    
    # Calculate the inverse cumulative ratio to penalize longer paths
    inverse_cumulative_ratio = 1 / (cumulative_ratio + 1e-8)
    
    # Calculate the average demand range
    demand_range = torch.abs(torch.diff(demands)).mean()
    
    # Create a matrix of the same shape as the distance matrix with the demand range
    demand_range_matrix = torch.full_like(distance_matrix, demand_range)
    
    # Combine all heuristics
    heuristic_matrix = (demand_based_heuristic * 0.5 +
                        inverse_cumulative_ratio * 0.5 +
                        demand_range_matrix * 0.1)
    
    # Normalize the heuristic matrix by the sum of demands to ensure it's on a comparable scale
    demand_sum = demands.sum()
    normalized_heuristic_matrix = heuristic_matrix / demand_sum
    
    # Set thresholds to filter out bad edges based on a fraction of the maximum value
    threshold_fraction = 0.8
    threshold = torch.max(normalized_heuristic_matrix) * threshold_fraction
    
    # Apply the threshold to ensure all undesirable edges have negative values
    heuristic_matrix = torch.where(normalized_heuristic_matrix < threshold, normalized_heuristic_matrix, 0)
    
    return heuristic_matrix
```
