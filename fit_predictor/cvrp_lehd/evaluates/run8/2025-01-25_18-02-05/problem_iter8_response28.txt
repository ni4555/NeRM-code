```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Define a function to compute the heuristic value
    def compute_heuristic(cumulative_demand, cumulative_distance):
        # Avoid division by zero
        safe_distance = torch.clamp(cumulative_distance, min=1e-8)
        # Compute the heuristic based on the ratio of cumulative demand to cumulative distance
        heuristic = cumulative_demand / safe_distance
        # Apply logarithmic transformation to emphasize larger ratios
        heuristic = torch.log(heuristic)
        # Add a penalty for larger distances
        heuristic -= torch.log(safe_distance)
        # Normalize the heuristic value to be within the range [0, 1]
        return heuristic / (torch.log(torch.clamp(torch.max(heuristic), min=1e-8)) - torch.log(1e-8))
    
    # Iterate over the nodes to compute the heuristic values
    for i in range(1, len(demands)):
        cumulative_demand = torch.cumsum(demands[:i+1], dim=0)
        cumulative_distance = torch.cumsum(distance_matrix[:i+1], dim=0)
        heuristic_values = compute_heuristic(cumulative_demand, cumulative_distance)
        # Assign the computed heuristic values to the appropriate positions in the matrix
        heuristic_matrix[0:i+1, i+1:] = heuristic_values
        heuristic_matrix[i+1:, 0:i+1] = heuristic_values
    
    # Scale the heuristic matrix to ensure it has negative values for undesirable edges
    # and positive values for promising ones
    min_val = heuristic_matrix.min()
    max_val = heuristic_matrix.max()
    heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
