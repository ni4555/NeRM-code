```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Set a threshold for the ratio. The threshold can be chosen based on the problem's characteristics
    # For example, a threshold of 1 means that any ratio higher than 1 is considered undesirable
    threshold = 1.0
    
    # Create a mask for edges that are undesirable based on the threshold
    undesirable_edges_mask = demand_to_distance_ratio > threshold
    
    # Assign a negative value to undesirable edges
    heuristic_matrix = -torch.ones_like(demand_to_distance_ratio)
    heuristic_matrix[~undesirable_edges_mask] = demand_to_distance_ratio[~undesirable_edges_mask]
    
    return heuristic_matrix
```
