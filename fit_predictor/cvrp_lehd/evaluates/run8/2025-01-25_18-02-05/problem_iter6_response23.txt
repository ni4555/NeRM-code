```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand range, which is the difference between the maximum and minimum demand
    demand_range = torch.max(demands) - torch.min(demands)
    
    # Initialize a matrix with negative values for all edges to ensure they are considered undesirable by default
    heuristic_matrix = -torch.ones_like(distance_matrix)
    
    # Precompute cumulative demand for rows (except for the depot node)
    cumulative_demand = torch.cumsum(demands, dim=0)[1:]
    
    # Calculate the potential profit for each edge
    potential_profit = demand_range - distance_matrix
    
    # Normalize potential profit by the sum of demands
    demand_sum = torch.sum(demands)
    normalized_profit = potential_profit / demand_sum
    
    # Calculate the heuristic values
    heuristic_matrix[1:] = normalized_profit
    
    # Adjust for the depot node
    heuristic_matrix[0] = -torch.ones_like(demands)
    
    # Apply thresholding to set a lower bound for the heuristic values
    threshold = torch.max(torch.abs(normalized_profit))
    heuristic_matrix = torch.where(torch.abs(normalized_profit) < threshold, normalized_profit, -threshold)
    
    # Bound the values to ensure they are within the range [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1.0, max=1.0)
    
    return heuristic_matrix
```
