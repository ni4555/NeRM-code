```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Normalize demands relative to the total capacity to balance demand
    normalized_demands = demands / torch.sum(demands)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Invert distances to prioritize shorter distances
    inverted_distances = 1.0 / (cumulative_distances + 1e-8)  # Add a small constant to avoid division by zero
    
    # Apply a non-linear transformation to emphasize differences in distances
    transformed_distances = torch.sin(inverted_distances)
    
    # Calculate the heuristic values based on the product of normalized demand and transformed distance
    heuristic_matrix = normalized_demands * transformed_distances
    
    # Use thresholds to filter and emphasize relative differences
    threshold = torch.max(heuristic_matrix)
    heuristic_matrix = torch.where(heuristic_matrix < threshold, heuristic_matrix, -threshold)
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
