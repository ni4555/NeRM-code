```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Apply a non-linear transformation to enhance differentiation
    non_linear_transform = torch.log1p(heuristic_matrix)
    
    # Normalize the transformed values to ensure sparsity and differentiation
    max_non_linear = torch.max(non_linear_transform)
    normalized_matrix = (non_linear_transform - max_non_linear) / (torch.exp(max_non_linear) - 1)
    
    # Apply thresholding to ensure that high heuristic values are negative
    threshold = torch.max(normalized_matrix)
    heuristic_matrix = torch.where(normalized_matrix < threshold, normalized_matrix, -threshold)
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
