```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Calculate the cumulative sum of the negative ratio to determine thresholds
    cumulative_negative_ratio = -torch.cumsum(demand_to_distance_ratio, dim=0)
    
    # Create a binary matrix where edges below the threshold are set to 1 and others to 0
    # This is equivalent to the heuristic value being 1 for promising edges and 0 for others
    heuristic_matrix = torch.where(cumulative_negative_ratio <= 0, 1, 0)
    
    return heuristic_matrix
```
