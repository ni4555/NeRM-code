```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of the normalized demand-to-distance ratio for each row
    normalized_demand = demands / demands.sum()
    demand_to_distance_ratio = normalized_demand / distance_matrix
    cumulative_demand_to_distance = torch.cumsum(demand_to_distance_ratio, dim=1)
    
    # Invert the normalized cumulative sum to prioritize less traveled edges
    inverted_normalized_demand = 1 / (cumulative_demand_to_distance + 1e-10)  # Add a small constant to avoid division by zero
    
    # Apply a non-linear transformation to emphasize longer distances and negative effects
    heuristic_matrix = torch.exp(-2 * inverted_normalized_demand)
    
    # Ensure the heuristic values are within the desired range
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
