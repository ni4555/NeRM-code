```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands from the depot to each node
    cumulative_demands = torch.cumsum(demands, dim=0)
    
    # Calculate the cumulative sum of distances from the depot to each node
    cumulative_distances = torch.cumsum(distance_matrix, dim=0)
    
    # Avoid division by zero in cases where cumulative_distances might be zero
    with torch.no_grad():
        safe_distances = torch.where(cumulative_distances == 0, torch.tensor(1.0e-8), cumulative_distances)
    
    # Calculate the heuristic values based on the ratio of cumulative demand to cumulative distance
    heuristic_matrix = cumulative_demands / safe_distances
    
    # Apply a non-linear transformation to the heuristic values
    # Use an exponential transformation to emphasize higher ratios
    heuristic_matrix = torch.exp(heuristic_matrix)
    
    # Set a dynamic threshold based on the average of the heuristic values
    threshold = torch.mean(heuristic_matrix)
    
    # Use sparsity to reduce the weight of less promising edges
    # Introduce a sparsity factor to penalize dense edges
    sparsity_factor = 1.0 / torch.sum(heuristic_matrix)
    
    # Adjust the heuristic values to balance between problem semantics and computational efficiency
    heuristic_matrix = (heuristic_matrix - threshold) * sparsity_factor
    
    # Clip the values to be within the desired range to ensure they are within [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)
    
    return heuristic_matrix
```
