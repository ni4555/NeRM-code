```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the distance from each customer to the depot
    distance_to_depot = distance_matrix[:, 0]
    
    # Calculate the potential profit from visiting each customer
    potential_profit = distance_to_depot - demands
    
    # Apply a discount factor to prioritize closer customers
    discount_factor = 1 - distance_to_depot / torch.max(distance_to_depot)
    
    # Calculate the weighted potential profit for each customer
    weighted_potential_profit = potential_profit * discount_factor
    
    # Calculate the heuristic values by normalizing the weighted potential profit
    # using the maximum profit
    max_profit = torch.max(weighted_potential_profit)
    
    # Create the heuristic matrix
    heuristic_matrix = weighted_potential_profit / max_profit
    
    return heuristic_matrix
```
