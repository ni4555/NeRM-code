```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand-to-distance ratio for each edge
    demand_to_distance_ratio = demands / distance_matrix
    
    # Calculate the negative of this ratio to use as a heuristic
    # Negative values indicate undesirable edges (heuristic score is lower)
    heuristic_matrix = -demand_to_distance_ratio
    
    # Find a suitable threshold that separates desirable from undesirable edges
    # This can be done by finding the point where the heuristic ratio crosses zero
    threshold = torch.max(heuristic_matrix[heuristic_matrix > 0])
    
    # Apply the threshold to ensure all undesirable edges have negative values
    heuristic_matrix = torch.where(heuristic_matrix < threshold, heuristic_matrix, 0)
    
    return heuristic_matrix
```
