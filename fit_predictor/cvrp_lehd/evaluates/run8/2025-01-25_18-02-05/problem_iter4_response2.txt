```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand range, which is the difference between the maximum and minimum demand
    demand_range = torch.max(demands) - torch.min(demands)
    
    # Initialize a matrix with negative values for all edges to ensure they are considered undesirable by default
    heuristic_matrix = -torch.ones_like(distance_matrix)
    
    # Iterate through the rows and columns of the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Check if the edge is from the depot (i == 0) and calculate the cumulative demand
            if i == 0:
                cumulative_demand = demands[j]
            else:
                cumulative_demand = demands[j] + (cumulative_demand if j < i else 0)
            
            # If the cumulative demand exceeds the vehicle capacity, add a large negative value to the heuristic
            if cumulative_demand > 1.0:
                heuristic_matrix[i][j] = -float('inf')
            else:
                # Calculate the potential profit for the edge by subtracting the distance from the demand range
                potential_profit = demand_range - distance_matrix[i][j]
                
                # Normalize the potential profit by the sum of demands and add it to the heuristic matrix
                demand_sum = torch.sum(demands)
                normalized_profit = potential_profit / demand_sum
                heuristic_matrix[i][j] = normalized_profit
                
    # Bound the values to ensure they are within the range [-1, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1.0, max=1.0)
    
    return heuristic_matrix
```
