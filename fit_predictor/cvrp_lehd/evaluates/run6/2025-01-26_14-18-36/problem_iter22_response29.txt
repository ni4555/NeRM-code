```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Introduce a demand-based penalty for infeasible edges
    demand_penalty = (scaled_demands > 1.0).float() * 1000.0

    # Introduce a distance-based penalty to favor edges closer to the depot
    distance_penalty = distance_matrix[:, 0] * 0.1

    # Dampen the demand penalty to prevent excessive penalty for nodes that are close to exceeding capacity
    dampened_demand_penalty = torch.clamp(demand_penalty, min=0.0, max=100.0)

    # Dampen the distance penalty to prevent dominance of short distances
    dampened_distance_penalty = torch.clamp(distance_penalty, min=0.0, max=100.0)

    # Adjust the heuristics to balance demand and distance penalties
    heuristics = heuristics - 0.5 * (dampened_demand_penalty + dampened_distance_penalty)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
