```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    demand_sum = demands.sum()
    max_demand = demands.max()
    max_demand_index = demands.argmax()
    
    # Initialize heuristics matrix with negative infinity for the depot to depot edge
    heuristics = torch.full_like(distance_matrix, -float('inf'))
    heuristics[depot, depot] = 0
    
    # Calculate cumulative demand along the diagonal for each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # For each node, calculate the potential heuristics based on cumulative demand and distance
    for i in range(1, n):
        for j in range(i, n):
            # Calculate the cost from node i to node j
            cost = distance_matrix[i, j]
            # Calculate the total demand if node j is visited
            total_demand = cumulative_demand[j] - demands[j]
            # Check if visiting node j is within the capacity constraint
            if total_demand <= 1:
                # Reward for visiting node j
                reward = -cost
            else:
                # Punish for exceeding capacity
                reward = float('inf')
            # Update heuristics matrix
            heuristics[i, j] = reward
            heuristics[j, i] = reward
    
    return heuristics
```
