```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize heuristic matrix with positive values
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Dampen penalties
    dampening_factor = 0.5

    # Normalize the heuristic values to the range [0, 1] using min-max scaling
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Penalize for edges where the destination node exceeds capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty * dampening_factor

    # Penalize edges that return to the depot (index 0)
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty * dampening_factor

    # Apply distance-based penalties for edges further from the depot
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 50
    heuristics += torch.clamp(distance_penalty, min=0.0) * dampening_factor

    # Adjust heuristic variance for better exploration of diverse paths
    variance_adjustment = torch.var(heuristics) * 0.2
    heuristics += variance_adjustment

    # Ensure all heuristic values are within [0, 1] range
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
