```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Normalize early
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)
    remaining_capacity = total_capacity - cumulative_demand

    # Foster diversity by ensuring that nodes with similar demands are not preferred
    demand_similarity = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs()
    diversity_bonus = (1 / (demand_similarity + 1e-8))  # Adding a small epsilon to avoid division by zero

    # Use a non-linear scaling of distance to foster diversity
    distance_diversity = distance_matrix / distance_matrix.mean()

    # Dampen extremes to avoid premature convergence to local optima
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity
    heuristics *= diversity_bonus * distance_diversity

    # Introduce a penalty for edges that lead to a node with demand greater than vehicle capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty

    # Introduce a dampened penalty for edges leading back to the depot (index 0)
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty

    # Normalize the heuristic values to the range [0, 1] using min-max scaling
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Apply a non-linear transformation to the heuristic values to avoid local optima
    heuristics = torch.sigmoid(heuristics)

    # Balance penalties and normalize early to ensure a uniform distribution of heuristic values
    balanced_heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())
    balanced_heuristics = balanced_heuristics * (1 - 0.5) + 0.5  # Adding a dampening factor

    return balanced_heuristics
```
