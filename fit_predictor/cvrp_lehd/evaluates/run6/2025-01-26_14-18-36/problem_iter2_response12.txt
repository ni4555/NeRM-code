```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    total_demand = demands.sum()
    average_demand = total_demand / (n - 1)  # Exclude the depot demand

    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)

    # Calculate the heuristic for each edge
    for i in range(1, n):
        for j in range(i, n):
            if j == depot:
                continue

            # Calculate the benefit of visiting node j from node i
            benefit = average_demand - demands[j]
            # Calculate the cost of visiting node j from node i
            cost = distance_matrix[i, j]
            # The heuristic value is the benefit minus the cost
            heuristic_matrix[i, j] = benefit - cost
            heuristic_matrix[j, i] = benefit - cost

    return heuristic_matrix
```
