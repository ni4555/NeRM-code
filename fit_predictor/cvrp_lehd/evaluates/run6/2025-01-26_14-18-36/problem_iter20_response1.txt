```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Introduce a dampening factor to make the heuristic more adaptable over time
    dampening_factor = 0.5
    heuristics *= dampening_factor

    # Introduce a normalization factor to ensure consistency across different instances
    normalization_factor = heuristics.abs().max()
    heuristics /= normalization_factor

    # Add a penalty for edges that lead to a node with demand greater than vehicle capacity
    penalty = (scaled_demands > 1.0).float() * 1000.0
    heuristics -= penalty

    # Introduce a local preference for edges close to the depot
    local_preference = (distance_matrix[:, 0] < distance_matrix[:, 0].mean()).float() * 100
    heuristics += local_preference

    # Introduce a multi-scale penalty that considers both local and global scale
    global_scale = distance_matrix[:, 0].mean()
    scale_penalty = torch.abs(distance_matrix[:, 0] - global_scale) * 50
    heuristics += scale_penalty

    # Combine the heuristic values with the penalties, ensuring that the penalties dominate for infeasible edges
    combined_penalties = torch.max(penalty, scale_penalty)
    heuristics = torch.where(combined_penalties > 0, combined_penalties, heuristics)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    return heuristics
```
