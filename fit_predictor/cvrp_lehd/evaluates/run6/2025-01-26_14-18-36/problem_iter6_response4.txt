```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_sorted_indices = torch.argsort(-demands)
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Initialize the first node as a starting point
    current_demand = demands[demand_sorted_indices[0]]
    total_demand -= current_demand
    for i in range(1, n):
        if total_demand + demands[demand_sorted_indices[i]] <= 1.0:
            # Update total demand and calculate heuristic value
            total_demand += demands[demand_sorted_indices[i]]
            heuristic_matrix[demand_sorted_indices[i-1], demand_sorted_indices[i]] = -distance_matrix[demand_sorted_indices[i-1], demand_sorted_indices[i]]
        else:
            # Calculate the cost of traveling back to the depot
            distance_to_depot = distance_matrix[demand_sorted_indices[i-1], 0]
            heuristic_matrix[demand_sorted_indices[i-1], demand_sorted_indices[i]] = -distance_to_depot

    # Add penalty for nodes with high demand
    high_demand_penalty = (demands > 0.1).float() * -1000.0
    heuristic_matrix += high_demand_penalty
    
    return heuristic_matrix
```
