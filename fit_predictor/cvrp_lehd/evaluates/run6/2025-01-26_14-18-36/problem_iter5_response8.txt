```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = torch.sum(demands)
    
    # Normalize the demand vector by the total vehicle capacity
    demands_normalized = demands / total_demand
    
    # Initialize the heuristic matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Incorporate demand patterns
    heuristics += demands_normalized
    
    # Incorporate distance patterns
    heuristics -= distance_matrix
    
    # Balance global and local
    # Add a negative penalty for edges with high demand
    heuristics += -torch.abs(demands)
    
    # Add a positive incentive for shorter distances
    # To prevent the heuristics from becoming too large, cap the values
    max_distance = torch.max(distance_matrix)
    heuristics += (max_distance - distance_matrix)
    
    # Ensure that all values are within the range of the heuristic values (e.g., [-1, 1])
    heuristics = torch.clamp(heuristics, min=-1, max=1)
    
    return heuristics
```
