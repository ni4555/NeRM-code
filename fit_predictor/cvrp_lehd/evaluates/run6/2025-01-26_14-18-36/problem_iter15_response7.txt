```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Apply diverse penalties to favor balance between load distribution
    load_penalty = ((scaled_demands - scaled_demands.mean()).pow(2)).sum()
    heuristics -= load_penalty * 0.01  # Sensitive parameter

    # Add a dampened penalty for edges leading back to the depot
    penalty = torch.zeros_like(distance_matrix)
    penalty[torch.arange(distance_matrix.shape[0]), 0] = -5.0  # Larger penalty than in heuristics_v1
    dampened_penalty = (penalty - penalty.mean()).sign() * penalty.abs()
    heuristics += dampened_penalty

    # Introduce a global effect penalty for edges that are too far from the depot
    global_distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()).abs()
    heuristics += global_distance_penalty * 10  # Sensitive parameter

    # Ensure penalties are not too strong compared to heuristic values
    heuristics = torch.clamp(heuristics, min=0)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
