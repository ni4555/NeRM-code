```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize the heuristics matrix
    heuristics = torch.zeros_like(distance_matrix)

    # Add a heuristics value based on the difference in scaled demand
    heuristics += (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs()

    # Add a heuristics value based on the remaining capacity
    heuristics += remaining_capacity.unsqueeze(1) * remaining_capacity.unsqueeze(0)

    # Introduce a local preference for edges close to the depot
    local_preference = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()).clamp(min=0)
    heuristics += local_preference.unsqueeze(1) * local_preference.unsqueeze(0)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
