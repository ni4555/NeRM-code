```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize the heuristic matrix
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate heuristic value based on scaled demand and remaining capacity
    heuristics += (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Introduce a dampening factor for high penalties
    dampening_factor = 0.5

    # Apply penalties for edges with capacity exceeding and for returning to the depot
    heuristics -= torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0) * dampening_factor
    heuristics -= dampening_factor * torch.zeros_like(distance_matrix)[:, 0]

    # Normalize heuristic values
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Promote diversity and balance distance and capacity
    diversity_factor = torch.rand(n, n)
    distance_and_capacity_factor = torch.clamp((distance_matrix[:, 0] - distance_matrix[:, 0].mean()) / 100.0, min=0.0, max=1.0)

    heuristics = 0.7 * heuristics + 0.3 * diversity_factor + 0.5 * distance_and_capacity_factor

    # Final normalization to maintain a balanced heuristic range
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
