```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """
    A heuristic function that uses a modified greedy approach and the demand vector to calculate edge attractiveness.
    """
    n = distance_matrix.shape[0]
    # Initialize the matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    # Initialize the total demand
    total_demand = demands.sum()
    # Iterate over the nodes
    for i in range(1, n):
        # Get the demand of the current node
        current_demand = demands[i]
        # Calculate the potential of the edge
        potential = total_demand - current_demand
        # Set the potential on the heuristic matrix
        heuristic_matrix[i, 0] = -potential
        for j in range(1, n):
            # Get the demand of the next node
            next_demand = demands[j]
            # Calculate the potential of the edge
            potential = total_demand - next_demand
            # Set the potential on the heuristic matrix
            heuristic_matrix[i, j] = potential
    return heuristic_matrix
```
