```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Normalize demand differences to encourage diversity
    demand_diff = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs()

    # Calculate heuristic value using normalized demand differences and remaining capacity
    heuristics = demand_diff * remaining_capacity

    # Introduce randomness with a dampened effect
    exploration_noise = torch.randn_like(heuristics) * 0.005
    heuristics += exploration_noise

    # Normalize heuristic values to encourage exploration with less emphasis on scale
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Use a logarithmic transformation to dampen high penalties and encourage balance
    heuristics = torch.log(heuristics + 1)  # Adding 1 to avoid log(0)

    # Introduce a penalty for nodes with demands exceeding capacity, but apply it with less weight
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 100.0, min=0.0)
    heuristics -= capacity_penalty * 0.1

    # Introduce a penalty for edges leading back to the depot, slightly reduced
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -0.5
    heuristics += depot_penalty * 0.1

    # Introduce a local preference for edges closer to the depot, with reduced weight
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 5
    heuristics += torch.clamp(distance_penalty, min=0.0) * 0.1

    # Clamp the heuristic values to ensure a balanced heuristic distribution
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
