```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands = demands.to(torch.float32)
    distance_matrix = distance_matrix.to(torch.float32)
    
    # Calculate the sum of demands
    total_demand = demands.sum()
    # Calculate the average demand per customer
    average_demand = total_demand / len(demands)
    
    # Calculate the distance to the nearest demand for each node
    nearest_demand_distance = torch.min(distance_matrix, dim=1, keepdim=True)[0]
    
    # Calculate the heuristic value based on the difference between average demand and customer demand
    heuristic_values = (average_demand - demands) * nearest_demand_distance
    
    # Calculate a penalty for edges that lead to a node with demand greater than vehicle capacity
    penalty = (demands > 1.0).float() * 1000.0
    
    # Combine the heuristic values with the penalty
    heuristics = heuristic_values - penalty
    
    return heuristics
```
