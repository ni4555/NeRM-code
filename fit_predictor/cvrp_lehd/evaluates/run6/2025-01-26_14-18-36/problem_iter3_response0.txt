```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    demand_scale = (demands / total_demand).unsqueeze(1)
    cost_weight = 0.5  # Balance between cost and demand
    capacity_weight = 0.5  # Balance between capacity and cost

    cost_component = cost_weight * distance_matrix
    demand_component = -capacity_weight * (demands.unsqueeze(1) - demands.unsqueeze(0))

    # Calculate total heuristic value for each edge
    heuristic_values = cost_component + demand_component

    # Normalize by the maximum absolute value to ensure all values are within a bounded range
    max_abs_value = torch.max(torch.abs(heuristic_values))
    heuristic_values = heuristic_values / max_abs_value

    return heuristic_values
```
