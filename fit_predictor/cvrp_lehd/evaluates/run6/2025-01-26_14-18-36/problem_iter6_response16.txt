```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    average_demand = total_demand / (n - 1)  # Exclude the depot node
    distances_from_depot = distance_matrix[0, 1:]  # Distance from depot to customers
    distances_to_customers = distance_matrix[1:, 0]  # Distance from customers to depot
    demand_diff = demands[1:] - average_demand  # Demand difference from average demand for customers
    
    # Calculate the potential of each edge based on the product of distances and the absolute difference in demand
    heuristic_values = -torch.abs(demand_diff) * distances_from_depot * distances_to_customers
    
    # Calculate a penalty for edges that would exceed the vehicle capacity
    capacity_exceed_penalty = (demands[1:] > 1.0).float() * -1000.0
    
    # Combine the heuristic values and penalties
    combined_values = heuristic_values + capacity_exceed_penalty
    
    # Since the depot node can also be visited to form a feasible solution, add its heuristic values
    # for both the outward and return edges to the depot
    depot_heuristic_values = torch.abs(average_demand) * torch.cat([distances_from_depot, distances_to_customers], dim=0)
    
    # Update the heuristic matrix
    heuristic_matrix = torch.zeros_like(distance_matrix)
    heuristic_matrix[0, 1:] = combined_values
    heuristic_matrix[1:, 0] = combined_values
    heuristic_matrix[0, 0] = -depot_heuristic_values.sum()
    heuristic_matrix[0, 0] = heuristic_matrix[0, 0] - torch.max(combined_values)
    
    return heuristic_matrix
```
