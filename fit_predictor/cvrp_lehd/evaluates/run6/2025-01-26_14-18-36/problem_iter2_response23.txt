```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    average_demand = total_demand / (n - 1)  # Exclude the depot node

    # Create a matrix to store the sum of demands for each edge
    demand_sum = torch.zeros_like(distance_matrix)

    # Calculate the sum of demands for each edge
    for i in range(n):
        for j in range(1, n):  # Exclude the depot node
            demand_sum[i, j] = demands[i] + demands[j]

    # Create a matrix to store the distance to the nearest customer for each node
    nearest_distance = torch.zeros_like(distance_matrix)

    # For each node, find the minimum distance to a customer node
    for i in range(1, n):
        distances = distance_matrix[i, 1:]  # Exclude the depot node
        nearest_distance[i, 1:] = torch.min(distances)

    # Calculate the heuristic values
    heuristic_values = (average_demand - demand_sum) * nearest_distance

    # Add a penalty for edges leading to a node with demand greater than vehicle capacity
    penalty = (demands > 1.0).float() * 1000.0

    # Combine the heuristic values with the penalty
    heuristics = heuristic_values - penalty

    return heuristics
```
