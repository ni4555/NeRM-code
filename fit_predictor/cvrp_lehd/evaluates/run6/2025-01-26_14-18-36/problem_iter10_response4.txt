```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    visited = torch.zeros(n, dtype=torch.bool)
    visited[0] = True
    current_demand = demands[0]
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Iterate over the demands
    for i in range(1, n):
        if visited[i]:
            continue

        # Calculate the minimum distance to an unvisited node
        unvisited_mask = ~visited
        min_distance_indices = torch.where(unvisited_mask, distance_matrix[unvisited_mask, i], torch.full_like(distance_matrix, float('inf')))
        min_distance, edge_index = torch.min(min_distance_indices, dim=0)
        
        # Check if the node's demand exceeds the remaining capacity
        if demands[i] > 1.0 - current_demand:
            min_distance -= 1000.0  # Apply a penalty

        # Update the heuristic value
        heuristic_matrix[edge_index, i] = min_distance
        
        # Update visited nodes and current demand
        visited[i] = True
        current_demand += demands[i]
        
        # If the vehicle is full, return to the depot
        if current_demand >= 1.0:
            return_to_depot_index = (i, 0)
            min_distance = heuristic_matrix[edge_index, i]
            min_distance = min(min_distance, distance_matrix[return_to_depot_index[0], return_to_depot_index[1]])
            heuristic_matrix[return_to_depot_index] = min_distance
            break  # All nodes have been visited or the vehicle is full

    # Normalize the heuristic values to the range [0, 1]
    min_heuristic = heuristic_matrix.min()
    max_heuristic = heuristic_matrix.max()
    if max_heuristic != min_heuristic:
        heuristic_matrix = (heuristic_matrix - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristic_matrix = torch.ones_like(heuristic_matrix)
    
    return heuristic_matrix
```
