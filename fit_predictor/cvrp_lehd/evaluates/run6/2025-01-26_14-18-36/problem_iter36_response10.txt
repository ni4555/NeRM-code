```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristic value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Add a penalty for edges that lead to a node with demand greater than vehicle capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty

    # Add a penalty for edges leading back to the depot (index 0)
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(distance_matrix.shape[0]), 0] = -1
    heuristics += depot_penalty

    # Introduce a local preference for edges based on cumulative demand
    local_preference = cumulative_demand.unsqueeze(1) - cumulative_demand.unsqueeze(0)
    local_preference = torch.clamp(local_preference, min=0.0)
    heuristics += local_preference

    # Introduce a penalty for edges too far from the depot (local preference)
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100
    heuristics += torch.clamp(distance_penalty, min=0.0)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Normalize early to avoid large numerical ranges
    heuristics = heuristics.clamp(min=0.0)

    # Dampen penalties to balance global and local preferences
    penalty_dampening = 0.5
    heuristics *= penalty_dampening

    # Introduce dampening factors for global preference
    demand_dampening = 0.3
    distance_dampening = 0.2
    heuristics *= demand_dampening

    # Add dampening factor to avoid local optima
    dampening_factor = 0.8
    heuristics *= dampening_factor

    return heuristics
```
