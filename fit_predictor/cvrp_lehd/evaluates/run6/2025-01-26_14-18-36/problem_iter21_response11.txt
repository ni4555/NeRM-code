```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristic value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Adjust the heuristic to account for capacity constraint violations
    heuristics -= (scaled_demands > 1.0).float() * 1000.0

    # Include a dampening factor to prevent the algorithm from oscillating around solutions
    dampening_factor = 0.5
    heuristics = dampening_factor * heuristics + (1 - dampening_factor) * (heuristics.mean())

    # Introduce a local preference for edges closer to the depot
    distance_to_depot = distance_matrix[:, 0]
    local_preference = distance_to_depot * 10.0
    heuristics -= local_preference

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    return heuristics
```
