```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Introduce a penalty for edges that lead to a node with demand greater than vehicle capacity
    demand_penalty = (scaled_demands > 1.0).float() * 1000.0
    heuristics -= demand_penalty

    # Introduce a penalty for edges leading back to the depot (index 0)
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(distance_matrix.shape[0]), 0] = -1
    heuristics += depot_penalty

    # Introduce a penalty for edges that are too far from the depot (local preference)
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100
    heuristics += distance_penalty

    # Apply a dampening factor to balance the penalties and heuristics
    dampening_factor = 0.1
    heuristics = dampening_factor * heuristics

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    # Introduce a non-linear adjustment to emphasize local preferences
    non_linear_adjustment = (1 - (distance_matrix ** 2) / (distance_matrix[:, 0] ** 2)).unsqueeze(1)
    heuristics = heuristics * non_linear_adjustment

    return heuristics
```
