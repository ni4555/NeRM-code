```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize heuristics matrix with demand differences scaled by remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Add penalty for capacity violation
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty

    # Introduce randomness for exploration
    random_noise = torch.rand_like(heuristics) * 0.05
    heuristics += random_noise

    # Add penalty for edges leading back to the depot
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty

    # Apply min-max scaling for normalization
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Introduce a penalty for edges too far from the depot
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 20
    heuristics += torch.clamp(distance_penalty, min=0.0)

    # Non-linear transformation to promote exploration and prevent local optima
    heuristics = torch.tanh(heuristics)

    # Apply dampening to ensure a stable heuristic distribution
    dampening_factor = torch.sigmoid(0.1 * (max_heuristic - heuristics))
    heuristics *= dampening_factor

    # Final adjustments to ensure a balanced heuristic distribution
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
