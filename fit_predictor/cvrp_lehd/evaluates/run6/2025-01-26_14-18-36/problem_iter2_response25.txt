```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """
    An improved heuristic function for the CVRP that considers edge potential based on local and global demands,
    as well as distance and clustering.
    """
    n = distance_matrix.shape[0]
    # Initialize the matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    # Calculate the total demand
    total_demand = demands.sum()
    # Calculate the average demand per node
    average_demand = total_demand / n
    
    # Iterate over the nodes
    for i in range(1, n):
        # Get the demand of the current node
        current_demand = demands[i]
        # Local potential based on difference from average demand
        local_potential = current_demand - average_demand
        
        # Iterate over the edges from the current node
        for j in range(n):
            # Skip the edge to the same node
            if i == j:
                continue
            # Calculate the distance to the next node
            distance = distance_matrix[i, j]
            # Global potential based on total demand
            global_potential = total_demand - current_demand - demands[j]
            # Combine local and global potential
            potential = local_potential + global_potential - distance
            # Set the potential on the heuristic matrix
            heuristic_matrix[i, j] = potential
            
    return heuristic_matrix
```
