```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = torch.clamp(demands / total_capacity, max=1.0)

    # Calculate cumulative demand from the depot
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)
    # Calculate remaining capacity from the depot
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize heuristics
    heuristics = torch.zeros_like(distance_matrix)

    # Add penalty for exceeding capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty

    # Add preference for edges close to the depot
    distance_to_depot = distance_matrix[:, 0]
    distance_preference = distance_to_depot - distance_to_depot.mean()
    heuristics += torch.clamp(distance_preference, min=0.0)

    # Add heuristic for remaining capacity
    heuristics += remaining_capacity * (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs()

    # Apply non-linear transformation
    heuristics = torch.sigmoid(heuristics)

    # Ensure heuristics are within [0, 1]
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
