```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Introduce randomness for diversity
    random_factor = torch.randn_like(remaining_capacity) * 0.05

    # Calculate heuristic value based on distance and remaining capacity
    heuristics = (distance_matrix * remaining_capacity).squeeze()

    # Adjust heuristic values by penalties for exceeding capacity, returning to the depot, and being too far from the depot
    capacity_penalty = (scaled_demands > 1.0).float() * -1000.0
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    distance_from_depot = distance_matrix[:, 0]
    distance_penalty = torch.clamp(distance_from_depot - distance_from_depot.mean(), min=0) * -5

    # Combine penalties with heuristic values
    heuristics = heuristics - (capacity_penalty * remaining_capacity) + random_factor

    # Adjust penalties
    heuristics += (capacity_penalty + depot_penalty + distance_penalty) * 0.1

    # Sigmoid transformation to dampen extreme heuristic values
    heuristics = torch.sigmoid(heuristics)

    # Ensure the heuristic values are balanced
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
