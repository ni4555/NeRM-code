```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    average_demand = total_demand / (n - 1)  # Exclude the depot node
    demand_diff = demands[1:] - average_demand  # Demand difference from average demand for customers
    
    # Calculate the initial heuristic based on demand difference and distance
    heuristic_values = -torch.abs(demand_diff) * distance_matrix[0, 1:] * distance_matrix[1:, 0]
    
    # Dampening factors for distance and demand
    dampening_factor_distance = 0.5
    dampening_factor_demand = 0.3
    dampened_distance = dampening_factor_distance * (distance_matrix[0, 1:] + distance_matrix[1:, 0])
    dampened_demand = dampening_factor_demand * torch.abs(demand_diff)
    
    # Combine dampened values
    combined_dampened_values = dampened_distance * dampened_demand
    
    # Calculate penalties for infeasibilities
    infeasibility_penalty = torch.zeros_like(demand_diff)
    infeasibility_penalty[distance_matrix[0, 1:] + distance_matrix[1:, 0] > 1] = -1000  # Exceeding vehicle capacity
    infeasibility_penalty[demand_diff.abs() > average_demand * 2] = -1000  # High demand difference
    
    # Combine heuristic values and penalties
    combined_heuristic_values = heuristic_values + combined_dampened_values + infeasibility_penalty
    
    # Normalize the combined heuristic values to maintain balance and stability
    max_heuristic = combined_heuristic_values.max()
    min_heuristic = combined_heuristic_values.min()
    if max_heuristic != min_heuristic:
        combined_heuristic_values = (combined_heuristic_values - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        combined_heuristic_values = torch.ones_like(combined_heuristic_values)
    
    # Create the heuristic matrix
    heuristic_matrix = torch.zeros_like(distance_matrix)
    heuristic_matrix[0, 1:] = combined_heuristic_values
    heuristic_matrix[1:, 0] = combined_heuristic_values
    heuristic_matrix[0, 0] = combined_heuristic_values.sum()  # Set the depot heuristic value to the sum of customer heuristics
    
    return heuristic_matrix
```
