```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)

    # Define dampening factors
    demand_dampening_factor = 0.8
    depot_dampening_factor = 0.7
    distance_dampening_factor = 0.7
    feasible_dampening_factor = 0.8

    # Calculate heuristic values for each edge based on demand
    heuristics += (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Apply penalties
    # Demand-based penalty
    demand_penalty = (scaled_demands > 1.0).float() * 1000.0
    heuristics -= demand_penalty * demand_dampening_factor

    # Depot-based penalty
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -100
    heuristics += depot_penalty * depot_dampening_factor

    # Distance-based penalty
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100
    heuristics += torch.clamp(distance_penalty, min=0.0) * distance_dampening_factor

    # Feasibility-based penalty
    feasible_penalty = (remaining_capacity <= 0).float() * -1000
    heuristics += feasible_penalty * feasible_dampening_factor

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    return heuristics
```
