```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristic value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Add a penalty for edges that lead to a node with demand greater than vehicle capacity
    capacity_penalty = (scaled_demands > 1.0).float() * 1000.0
    heuristics -= capacity_penalty

    # Dampen the heuristic for edges leading back to the depot (index 0) to encourage exploration
    dampen_penalty = torch.zeros_like(distance_matrix)
    dampen_penalty[torch.arange(distance_matrix.shape[0]), 0] = -0.5
    heuristics += dampen_penalty

    # Introduce a blend of penalties: a local preference penalty and a global preference penalty
    local_distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100
    global_distance_penalty = torch.abs(distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 50
    blend_penalty = 0.5 * local_distance_penalty + 0.5 * global_distance_penalty

    # Combine the heuristic values with the penalties, ensuring that the penalties dominate for infeasible edges
    combined_penalties = torch.max(capacity_penalty, blend_penalty)
    heuristics = torch.where(combined_penalties > 0, combined_penalties, heuristics)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
