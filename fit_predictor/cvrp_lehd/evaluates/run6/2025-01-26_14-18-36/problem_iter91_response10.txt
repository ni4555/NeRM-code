```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Normalize demand differences to encourage diversity
    demand_diff = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs()

    # Introduce exploration through noise while keeping balance between exploitation and exploration
    exploration_noise = torch.randn_like(demand_diff) * 0.01
    exploration_factor = torch.clamp(torch.tanh(demand_diff * 0.1), -1.0, 1.0)
    demand_diff = (demand_diff + exploration_noise) * exploration_factor

    # Encourage exploitation by using a non-linear function to dampen high penalties
    heuristics = torch.exp(-demand_diff / remaining_capacity)

    # Apply penalties for infeasibility due to capacity and edges back to the depot
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics -= (capacity_penalty + depot_penalty) * 0.5

    # Normalize heuristic values to encourage exploration
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Introduce diversity by ensuring a balanced heuristic distribution
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
