```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Normalize demand differences to encourage diversity
    demand_diff = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs()

    # Introduce a dampened penalty for exceeding capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0) * 0.5

    # Introduce a dampened penalty for edges leading back to the depot
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    depot_penalty = depot_penalty * 0.5

    # Use a sigmoid function to dampen high penalties and encourage balance
    heuristics = (demand_diff * remaining_capacity - capacity_penalty - depot_penalty)
    heuristics = torch.sigmoid(heuristics)

    # Add a penalty for distance, favoring shorter distances
    distance_penalty = distance_matrix[:, 0].mean()
    distance_term = (distance_matrix - distance_penalty) / (distance_penalty + 1)
    heuristics -= torch.clamp(distance_term, min=0.0) * 0.5

    # Introduce randomness for exploration, without excessive randomness
    exploration_noise = torch.randn_like(heuristics) * 0.01
    heuristics += exploration_noise

    # Normalize the heuristic values to encourage exploration
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
