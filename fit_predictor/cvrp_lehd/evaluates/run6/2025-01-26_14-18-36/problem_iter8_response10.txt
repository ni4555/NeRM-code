```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = torch.sum(demands)
    demand_scale = (demands / total_demand).unsqueeze(1)
    
    # Define weights for cost and demand
    cost_weight = 0.7  # Cost weight
    demand_weight = 0.3  # Demand weight
    
    # Compute cost and demand components
    cost_component = cost_weight * distance_matrix
    demand_component = demand_weight * (demand_scale - demand_scale.transpose(0, 1))
    
    # Calculate total heuristic value for each edge
    heuristic_values = cost_component + demand_component
    
    # Normalize by the maximum absolute value to ensure all values are within a bounded range
    max_abs_value = torch.max(torch.abs(heuristic_values))
    heuristic_values = heuristic_values / max_abs_value
    
    # Apply penalties for edges
    penalty_capacity_excess = (demands > 1.0).float() * -1000.0
    penalty_depot = torch.zeros_like(distance_matrix)
    penalty_depot[torch.arange(n), 0] = -1
    
    # Combine penalties with heuristic values
    heuristics = heuristic_values + penalty_capacity_excess + penalty_depot
    
    return heuristics
```
