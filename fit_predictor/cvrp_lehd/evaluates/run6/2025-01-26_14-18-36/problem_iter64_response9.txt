```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize the heuristic matrix
    heuristics = torch.zeros_like(distance_matrix)

    # Penalty for edges leading to a node with demand greater than vehicle capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics += capacity_penalty

    # Penalty for edges leading back to the depot
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty

    # Diversity penalty to encourage a spread of nodes to visit
    diversity_penalty = torch.sum(remaining_capacity < 0.1)
    diversity_penalty = torch.clamp(diversity_penalty * 100.0, min=0.0)
    heuristics -= diversity_penalty

    # Variance penalty to encourage balanced load distribution
    variance_penalty = torch.var(remaining_capacity, dim=0)
    variance_penalty = torch.clamp(variance_penalty, min=0.0)
    heuristics -= variance_penalty

    # Penalty for high cumulative demand
    cumulative_demand_penalty = torch.clamp(cumulative_demand / total_capacity, min=0.0)
    heuristics -= cumulative_demand_penalty

    # Distance penalty to favor closer nodes
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 50
    heuristics += torch.clamp(distance_penalty, min=0.0)

    # Normalize heuristics to be in the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Randomness to avoid local optima
    random_factor = torch.rand_like(heuristics)
    heuristics *= (1 - 0.1) + 0.1 * random_factor

    # Non-linear transformation to avoid local optima
    heuristics = torch.log(1 + heuristics)

    # Balancing the heuristic values to ensure a uniform distribution across all edges
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
