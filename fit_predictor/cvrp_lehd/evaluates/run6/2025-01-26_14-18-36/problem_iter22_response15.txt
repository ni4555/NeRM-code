```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the demand-based heuristic
    demand_heuristic = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Calculate the distance-based heuristic
    distance_heuristic = (distance_matrix[:, 0] / distance_matrix[:, 0].max() - 0.5) * 100

    # Calculate penalties for specific issues
    penalty_depot = torch.zeros_like(distance_matrix)
    penalty_depot[torch.arange(distance_matrix.shape[0]), 0] = -1000

    penalty_capacity_violation = (scaled_demands > 1.0).float() * 1000.0

    # Combine the heuristic components and penalties
    heuristics = demand_heuristic + distance_heuristic - penalty_depot - penalty_capacity_violation

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    return heuristics
```
