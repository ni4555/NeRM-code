```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Introduce diversity factors for the edges
    diversity_factors = (torch.rand_like(distance_matrix) - 0.5) * 2.0

    # Combine capacity and distance factors, normalize, and adjust penalties
    combined_penalties = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity * diversity_factors

    # Dampen the penalties to allow for feasible solutions
    dampening_factor = 0.3

    # Introduce a dynamic penalty for edges that exceed the vehicle capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    combined_penalties -= capacity_penalty * dampening_factor

    # Introduce a penalty for edges leading back to the depot
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    combined_penalties += depot_penalty * dampening_factor

    # Normalize the heuristic values to the range [0, 1] using min-max scaling
    max_combined_penalty = combined_penalties.max()
    min_combined_penalty = combined_penalties.min()
    combined_penalties = (combined_penalties - min_combined_penalty) / (max_combined_penalty - min_combined_penalty)

    # Apply a non-linear transformation to the heuristic values to avoid local optima
    combined_penalties = torch.sigmoid(combined_penalties)

    # Fine-tune dampening for stability
    combined_penalties = torch.clamp(combined_penalties, min=0.0, max=1.0)

    return combined_penalties
```
