```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    average_demand = total_demand / (n - 1)  # Exclude the depot demand
    demand_scale = (demands / total_demand).unsqueeze(1)
    distance_scale = distance_matrix / distance_matrix.max()

    # Initialize the heuristic matrix with the product of demand and distance scales
    heuristic_matrix = demand_scale * distance_scale

    # Add a small penalty for edges leading back to the depot (index 0)
    depot_penalty = -average_demand
    heuristic_matrix[torch.arange(n), 0] += depot_penalty
    heuristic_matrix[0, torch.arange(n)] += depot_penalty

    # Scale to [0, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=0) / heuristic_matrix.max()
    
    return heuristic_matrix
```
