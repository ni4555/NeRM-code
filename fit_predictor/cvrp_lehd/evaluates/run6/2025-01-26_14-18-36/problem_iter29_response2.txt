```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize the heuristic matrix
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the base heuristic value based on distance and demand
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * distance_matrix

    # Introduce a balance factor to dampen the influence of demand over distance
    balance_factor = torch.exp(-torch.arange(n).float() / n)
    heuristics *= balance_factor

    # Normalize the heuristic values to maintain a uniform scale
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Apply global insights by adjusting the heuristic for edges to the depot
    global_insight = torch.exp(-distance_matrix[:, 0] / (distance_matrix[:, 0].max()))
    heuristics[:, 0] *= global_insight

    # Apply local preference by penalizing edges leading back to the depot
    local_preference = torch.exp(-distance_matrix[torch.arange(n), 0])
    heuristics[torch.arange(n), 0] *= local_preference

    # Introduce a dampening effect to ensure the heuristic doesn't grow too large
    dampening_effect = torch.exp(-torch.arange(n).float() / 10)
    heuristics *= dampening_effect

    return heuristics
```
