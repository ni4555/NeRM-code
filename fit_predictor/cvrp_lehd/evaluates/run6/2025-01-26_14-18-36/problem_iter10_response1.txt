```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    average_demand = (total_demand - demands[0]) / (n - 1)  # Exclude the depot demand
    demand_scale = (demands / total_demand).unsqueeze(1)
    distance_scale = distance_matrix / distance_matrix.max()
    combined_scale = -distance_scale * demand_scale
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the heuristic for each edge using vectorized operations
    heuristic_matrix = combined_scale * distance_matrix
    
    # Add the penalty for the depot to return to the route
    return_penalty = average_demand
    heuristic_matrix[:, 0] += return_penalty
    heuristic_matrix[0, :] += return_penalty
    
    # Introduce penalties for infeasible edges (demand greater than vehicle capacity)
    infeasible_penalty = (demands > 1.0).float() * 1000.0
    heuristic_matrix += infeasible_penalty
    
    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristic_matrix.max()
    min_heuristic = heuristic_matrix.min()
    if max_heuristic != min_heuristic:
        heuristic_matrix = (heuristic_matrix - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristic_matrix = torch.ones_like(heuristic_matrix)
    
    return heuristic_matrix
```
