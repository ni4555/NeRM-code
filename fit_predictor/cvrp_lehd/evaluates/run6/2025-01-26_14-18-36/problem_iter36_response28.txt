```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristic value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Introduce dampening effect to avoid local optima
    dampening_factor = 0.75

    # Apply dampening factor to heuristics
    heuristics *= dampening_factor

    # Add a penalty for edges that lead to a node with demand greater than vehicle capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 500.0, min=0.0)
    heuristics -= capacity_penalty

    # Introduce a balanced penalty for distance, balancing between local and global search
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 25
    heuristics += torch.clamp(distance_penalty, min=0.0)

    # Introduce a balanced normalization for demand utilization and capacity left
    demand_normalization = torch.clamp(scaled_demands / torch.max(scaled_demands), min=0.1)
    capacity_normalization = torch.clamp(remaining_capacity / torch.max(remaining_capacity), min=0.1)
    normalization_factor = (demand_normalization + capacity_normalization) * 0.5
    heuristics *= normalization_factor

    # Add a penalty for edges leading back to the depot (index 0)
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(distance_matrix.shape[0]), 0] = -0.5
    heuristics += depot_penalty

    # Clamp negative heuristic values to 0 to avoid invalid solutions
    heuristics = torch.clamp(heuristics, min=0.0)

    return heuristics
```
