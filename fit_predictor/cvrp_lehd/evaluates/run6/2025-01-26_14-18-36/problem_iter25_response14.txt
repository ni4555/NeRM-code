```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristic value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Introduce penalties for undesirable edges but avoid negative values
    capacity_penalty = (scaled_demands > 1.0).float() * 1000.0
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(distance_matrix.shape[0]), 0] = -1
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100

    # Apply the penalties to heuristics
    heuristics = heuristics + capacity_penalty - depot_penalty + distance_penalty

    # Normalize the heuristic values to the range [0, 1], excluding the depot penalty
    max_heuristic = heuristics[1:].max()
    min_heuristic = heuristics[1:].min()
    normalized_heuristics = (heuristics[1:] - min_heuristic) / (max_heuristic - min_heuristic)

    # Handle the depot penalty by scaling it according to the normalized range
    depot_penalty_normalized = (-depot_penalty + 1) / (max_heuristic - min_heuristic)
    normalized_heuristics = torch.cat((depot_penalty_normalized, normalized_heuristics), dim=1)

    return normalized_heuristics
```
