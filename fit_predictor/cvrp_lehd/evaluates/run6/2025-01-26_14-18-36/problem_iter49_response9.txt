```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize the heuristic matrix
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate the heuristic value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Introduce a dampening factor to reduce the impact of high penalties
    dampening_factor = 0.5

    # Add a penalty for edges that lead to a node with demand greater than vehicle capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty * dampening_factor

    # Add a dampened penalty for edges leading back to the depot (index 0)
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty * dampening_factor

    # Introduce a normalization factor for heuristic values to maintain balance
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Add a distance preference term, with more preference given to shorter distances
    distance_preference = distance_matrix[:, 0]
    heuristics += (1.0 - (distance_matrix.min(dim=1)[0] / distance_preference)) * 0.3

    # Balance the importance of capacity with distance
    balance_factor = 0.6 * (scaled_demands.abs() / total_capacity) + 0.4 * distance_preference

    # Apply the balance factor to heuristics, promoting diversity in the solution
    heuristics *= balance_factor

    # Ensure all values in the heuristic matrix are between 0 and 1
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
