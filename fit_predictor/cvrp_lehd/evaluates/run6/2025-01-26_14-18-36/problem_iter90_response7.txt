```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    cumulative_demand = torch.cumsum(scaled_demands, dim=0)
    remaining_capacity = total_capacity - cumulative_demand

    demand_diff = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs()
    heuristics = demand_diff * remaining_capacity

    exploration_noise = torch.randn_like(heuristics) * 0.01
    heuristics += exploration_noise

    # Normalize and dampen the heuristics using a sigmoid function for better balance
    normalized_heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())
    dampened_heuristics = torch.sigmoid(normalized_heuristics)

    # Introduce a linear penalty for demands exceeding capacity to avoid overloading
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 500.0, min=0.0)
    dampened_heuristics -= capacity_penalty

    # Introduce a smaller penalty for edges leading back to the depot
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -0.5
    dampened_heuristics += depot_penalty

    # Introduce a small preference for edges closer to the depot, without over-penalizing longer ones
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 5
    dampened_heuristics += torch.clamp(distance_penalty, min=0.0) * 0.1

    # Ensure the heuristics are within a feasible range
    dampened_heuristics = torch.clamp(dampened_heuristics, min=0.0, max=1.0)

    return dampened_heuristics
```
