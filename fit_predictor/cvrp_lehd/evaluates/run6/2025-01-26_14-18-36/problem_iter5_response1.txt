```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demand_vector = demands / total_capacity
    heuristics = -torch.sum(demand_vector * distance_matrix, dim=1)
    
    # Adjust for vehicle capacity constraint
    vehicle_capacity = demands[0]  # Assuming the depot capacity is the total vehicle capacity
    for i in range(1, n):
        if demands[i] > vehicle_capacity:
            heuristics[i] += (demands[i] - vehicle_capacity) * distance_matrix[i, 0]
    
    return heuristics
```
