```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    cumulative_demand = torch.cumsum(scaled_demands, dim=0)
    remaining_capacity = total_capacity - cumulative_demand

    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    dampening_factor = 0.5
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty * dampening_factor

    diversity_factors = torch.abs(torch.rand_like(distance_matrix))
    heuristics *= diversity_factors

    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty * dampening_factor

    dampened_penalties = (capacity_penalty + depot_penalty) * dampening_factor
    feasible_heuristics = torch.clamp(heuristics, min=0.0)
    balance_adjustment = (feasible_heuristics - feasible_heuristics.mean()) * 0.1
    heuristics -= balance_adjustment

    heuristics = torch.tanh(heuristics)  # Using tanh to avoid local optima
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
