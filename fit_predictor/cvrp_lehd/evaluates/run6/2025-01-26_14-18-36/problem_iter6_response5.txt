```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristic_matrix = torch.zeros_like(distance_matrix)
    total_capacity = demands.sum()

    for i in range(1, n):
        for j in range(1, n):
            if demands[i] + demands[j] <= 1:
                heuristic_matrix[i, j] = distance_matrix[i, j]
                heuristic_matrix[j, i] = distance_matrix[j, i]
            else:
                # Calculate the penalty based on the excess demand
                excess_demand = demands[i] + demands[j] - 1
                penalty = -torch.exp(-excess_demand / total_capacity)
                # Apply the penalty to the heuristic value
                heuristic_matrix[i, j] = penalty * distance_matrix[i, j]
                heuristic_matrix[j, i] = penalty * distance_matrix[j, i]

    # Add the penalty for the depot to return to the route
    return_penalty = -torch.exp(-demands.sum() / total_capacity)
    heuristic_matrix[:, 0] = heuristic_matrix[:, 0] + return_penalty
    heuristic_matrix[0, :] = heuristic_matrix[0, :] + return_penalty

    return heuristic_matrix
```
