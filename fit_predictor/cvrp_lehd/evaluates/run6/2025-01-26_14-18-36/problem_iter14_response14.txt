```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Demand-driven sorting
    sorted_indices = torch.argsort(scaled_demands)
    sorted_distance_matrix = distance_matrix[sorted_indices, :][:, sorted_indices]
    sorted_demands = scaled_demands[sorted_indices]

    # Precompute remaining capacity for all nodes
    cumulative_demand = torch.cumsum(sorted_demands, dim=0)
    remaining_capacity = total_capacity - cumulative_demand

    # Normalize demand and remaining capacity for vectorized comparison
    normalized_demand = sorted_demands.unsqueeze(1) - sorted_demands.unsqueeze(0)
    normalized_capacity = remaining_capacity.unsqueeze(0)

    # Vectorized heuristic calculation, favoring edges with low demand and remaining capacity
    heuristics = (normalized_demand.abs() * normalized_capacity).neg()

    # Penalties for edges leading to overflow in capacity
    capacity_overflow_penalty = (scaled_demands > 1.0).float() * -1000.0

    # Local preference for edges closer to the depot
    distance_to_depot = distance_matrix[:, 0]
    distance_preference = (distance_to_depot - distance_to_depot.mean()).neg() * 100

    # Avoid sending a vehicle back to the depot unnecessarily
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1

    # Combine the heuristic values and penalties
    combined_heuristics = heuristics - torch.max(capacity_overflow_penalty, distance_preference)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = combined_heuristics.max()
    min_heuristic = combined_heuristics.min()
    heuristics_normalized = (combined_heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Avoid division by zero in normalization
    heuristics_normalized = torch.where(max_heuristic != min_heuristic, heuristics_normalized, torch.ones_like(heuristics_normalized))

    # Update the heuristic matrix
    heuristic_matrix = torch.zeros_like(distance_matrix)
    heuristic_matrix[sorted_indices, sorted_indices] = heuristics_normalized
    return heuristic_matrix
```
