```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_scale = demands / demands.sum()
    distance_scale = distance_matrix / distance_matrix.max()
    # Using a linear combination of demand and distance scales
    combined_scale = -demand_scale.unsqueeze(1) * demand_scale.unsqueeze(0) * distance_scale
    # Adding a penalty for exceeding capacity
    capacity_penalty = (demands.unsqueeze(1) * demands.unsqueeze(0) > 1.0).float() * -1000
    # Adjusting the scale with the penalty
    heuristics = combined_scale + capacity_penalty
    return heuristics
```
