```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_scale = 1 / total_demand
    
    # Calculate the cost of each edge
    edge_costs = distance_matrix * demands
    
    # Calculate the reward for each edge based on the total demand
    edge_rewards = (1 - demand_scale) * edge_costs
    
    # Calculate the heuristic as a combination of cost and reward
    heuristics = edge_costs - edge_rewards
    
    # Normalize the heuristics to balance cost and reward
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    
    return heuristics
```
