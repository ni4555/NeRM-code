```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    demand_scale = (demands / total_capacity).unsqueeze(1)

    # Normalize distances to the depot
    distance_scale = distance_matrix / distance_matrix[:, 0][:, None]

    # Combine demand and distance scales
    heuristic_matrix = demand_scale * distance_scale

    # Add a penalty for the depot to return to the route
    depot_penalty = (demands[0] - demands.mean()) * (n - 1)
    heuristic_matrix[torch.arange(n), 0] += depot_penalty
    heuristic_matrix[0, torch.arange(n)] += depot_penalty

    # Ensure non-negative values and scale to [0, 1]
    heuristic_matrix = torch.clamp(heuristic_matrix, min=0) / heuristic_matrix.max()

    return heuristic_matrix
```
