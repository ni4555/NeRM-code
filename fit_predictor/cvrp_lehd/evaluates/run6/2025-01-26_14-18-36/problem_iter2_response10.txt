```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands = demands.to(torch.float32)
    distance_matrix = distance_matrix.to(torch.float32)
    
    # Calculate the distance to the nearest neighbor for each node
    nearest_neighbor_distance = torch.min(distance_matrix, dim=1, keepdim=True)[0]
    
    # Calculate the balance score for each node, which is the difference between the maximum and minimum demands
    demand_balance = torch.max(demands) - torch.min(demands)
    
    # Calculate the potential of the edge based on the distance to the nearest neighbor and demand balance
    potential = nearest_neighbor_distance - demand_balance
    
    # Initialize the heuristic matrix with the potential values
    heuristic_matrix = potential.clone()
    
    # Iterate over the nodes to adjust the heuristic values
    for i in range(1, n):
        for j in range(i, n):
            # Get the demands of the current and next nodes
            current_demand = demands[i]
            next_demand = demands[j]
            # Check if the combined demand exceeds the vehicle capacity
            if current_demand + next_demand > 1.0:
                # Apply a penalty if the capacity constraint is violated
                heuristic_matrix[i, j] = -1000.0
                heuristic_matrix[j, i] = -1000.0
            else:
                # Update the heuristic value for the edge
                heuristic_matrix[i, j] = potential[i] + potential[j]
                heuristic_matrix[j, i] = potential[j] + potential[i]
    
    # Since the heuristic matrix is symmetric, we need to set the upper triangle equal to the lower triangle
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.t()) / 2
    
    return heuristic_matrix
```
