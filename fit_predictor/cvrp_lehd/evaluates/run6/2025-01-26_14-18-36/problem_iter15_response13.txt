```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Introduce a penalty for high-demand nodes that are too distant from the current position
    distance_penalty = distance_matrix[:, 0] - distance_matrix[:, 0].mean()
    heuristics += distance_penalty.clamp(min=-0.5, max=0)

    # Introduce a penalty for nodes that are at the depot with a penalty factor
    penalty_depot = torch.zeros_like(distance_matrix)
    penalty_depot[torch.arange(n), 0] = -1.5
    heuristics += penalty_depot

    # Add a dampened global effect penalty to promote more uniform solutions
    global_penalty = -torch.log((cumulative_demand / total_capacity).clamp(min=0.001, max=1))
    heuristics += global_penalty * 0.1

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
