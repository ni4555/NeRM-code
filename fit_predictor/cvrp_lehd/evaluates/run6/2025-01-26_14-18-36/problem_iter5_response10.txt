```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand
    total_demand = demands.sum()
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the heuristic for each edge
    heuristic_matrix[distance_matrix != 0] = -distance_matrix[distance_matrix != 0] * demands[distance_matrix != 0]
    
    # Normalize the heuristic matrix based on the total demand
    heuristic_matrix /= total_demand
    
    # Incorporate the constraint that the total demand of a vehicle cannot exceed its capacity
    # This is done by adding a penalty for edges that would cause the vehicle to exceed capacity
    for i in range(len(demands)):
        for j in range(len(demands)):
            if i != j and demands[j] > 0:
                # Check if adding this customer would exceed the vehicle capacity
                if (demands[i] + demands[j]) > 1:
                    # Add a penalty to the heuristic
                    heuristic_matrix[i, j] += (demands[i] + demands[j] - 1) * 1000
    
    return heuristic_matrix
```
