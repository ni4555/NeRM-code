```python
def sigmoid(x):
    return 1 / (1 + torch.exp(-x))

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    cumulative_demand = torch.cumsum(scaled_demands, dim=0)
    remaining_capacity = total_capacity - cumulative_demand

    distance_weighted_demand_diff = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * distance_matrix

    heuristic = distance_weighted_demand_diff / (remaining_capacity + 1e-6)

    heuristics = sigmoid(heuristic)

    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty

    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics[torch.arange(n), 0] = 0.0
    heuristics += depot_penalty

    distance_bonus = distance_matrix[:, 0].unsqueeze(1)
    heuristics += torch.clamp(distance_bonus * 0.01, min=0.0)

    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
