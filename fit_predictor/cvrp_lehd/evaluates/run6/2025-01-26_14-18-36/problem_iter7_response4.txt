```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    average_demand = total_demand / (n - 1)  # Exclude the depot node
    distances_from_depot = distance_matrix[0, 1:]  # Distance from depot to customers
    distances_to_customers = distance_matrix[1:, 0]  # Distance from customers to depot
    demand_diff = demands[1:] - average_demand  # Demand difference from average demand for customers
    feasibility_penalty = demands > average_demand  # Flag for edges where demand exceeds average
    
    # Calculate the potential of each edge based on the product of distances and the absolute difference in demand
    heuristic_values = -torch.abs(demand_diff) * distances_from_depot * distances_to_customers
    
    # Incorporate penalties for infeasibility and for edges far from the depot
    penalty_for_infeasibility = (feasibility_penalty * 1000).unsqueeze(1) * (feasibility_penalty.unsqueeze(0))
    depot_penalty = (distances_from_depot + distances_to_customers) * -1000
    
    # Combine penalties and heuristic values
    combined_penalty = penalty_for_infeasibility + depot_penalty
    
    # Adjust heuristic values to be non-negative
    adjusted_heuristic_values = heuristic_values + combined_penalty
    adjusted_heuristic_values[adjusted_heuristic_values < 0] = 0
    
    # Update the heuristic matrix
    heuristic_matrix = torch.zeros_like(distance_matrix)
    heuristic_matrix[0, 1:] = adjusted_heuristic_values
    heuristic_matrix[1:, 0] = adjusted_heuristic_values
    depot_heuristic = torch.abs(average_demand) * (distances_from_depot + distances_to_customers)
    heuristic_matrix[0, 0] = depot_heuristic.sum()
    
    return heuristic_matrix
```
