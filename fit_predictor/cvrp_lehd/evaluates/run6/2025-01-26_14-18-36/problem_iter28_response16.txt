```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristic value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Combine penalties for capacity overflow and depot return using min() for efficiency
    capacity_penalty = torch.min((scaled_demands > 1.0).float() * 1000.0, torch.zeros_like(remaining_capacity))
    depot_penalty = (distance_matrix[torch.arange(n), 0] > 0).float() * 1000.0
    combined_penalty = torch.min(capacity_penalty, depot_penalty)

    # Subtract combined penalties from heuristic values
    heuristics -= combined_penalty

    # Introduce a distance penalty for edges leading back to the depot (local preference)
    distance_penalty = torch.clamp((distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100, min=0.0)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    return heuristics
```
