```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Introduce a capacity-aware penalty for edges that would exceed capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)

    # Normalize demand differences to encourage diversity
    demand_diff = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs()

    # Calculate heuristic value using normalized demand differences and remaining capacity
    remaining_capacity = total_capacity - cumulative_demand
    heuristics = demand_diff * remaining_capacity

    # Introduce a penalty for edges leading back to the depot
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1

    # Introduce a local preference for edges closer to the depot
    distance_preference = distance_matrix[:, 0] / distance_matrix[:, 0].max()

    # Use sigmoid for smoothness and dampen high penalties
    heuristics = torch.sigmoid(heuristics)

    # Combine all penalties and preferences
    heuristics -= (capacity_penalty + demand_diff) * 0.5
    heuristics += depot_penalty * 0.5
    heuristics += distance_preference * 0.5

    # Clamp the heuristic values to ensure a balanced heuristic distribution
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
