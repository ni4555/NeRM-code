```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    cumulative_demand = torch.cumsum(scaled_demands, dim=0)
    remaining_capacity = total_capacity - cumulative_demand

    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    dampening_factor = 0.5

    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty * dampening_factor

    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty * dampening_factor

    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 50
    heuristics += torch.clamp(distance_penalty, min=0.0) * dampening_factor

    # Using sigmoid to normalize heuristic values
    normalized_heuristics = torch.sigmoid(heuristics)

    # Using weighted sums to combine demand and distance components
    demand_weight = torch.sigmoid(torch.sum(scaled_demands, dim=0))
    distance_weight = torch.sigmoid(torch.sum(distance_matrix[:, 0] - distance_matrix[:, 0].mean()))

    final_heuristics = demand_weight * normalized_heuristics + distance_weight * distance_penalty

    # Balancing the final heuristic values
    final_heuristics = torch.clamp(final_heuristics, min=0.0, max=1.0)

    return final_heuristics
```
