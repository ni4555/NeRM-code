```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Add a penalty for edges that lead to a node with demand greater than vehicle capacity
    penalty = (scaled_demands > 1.0).float() * 1000.0
    heuristics -= penalty

    # Introduce a dampened penalty for distance
    dampening_factor = 0.5
    distance_penalty = distance_matrix * dampening_factor

    # Introduce a dampened penalty for infeasibility of exceeding vehicle capacity
    demand_penalty = (scaled_demands > 1.0).float() * (1.0 - dampening_factor)
    demand_penalty = torch.max(torch.zeros_like(demand_penalty), demand_penalty)

    # Combine the heuristic values with the penalties, ensuring that the penalties dominate for infeasible edges
    combined_penalties = torch.max(torch.stack([distance_penalty, demand_penalty], dim=1), dim=1)[0]
    heuristics = torch.where(combined_penalties > 0, combined_penalties, heuristics)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
