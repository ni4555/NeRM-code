```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize the heuristic matrix
    heuristic_matrix = torch.zeros_like(distance_matrix)

    # Calculate the heuristic for each edge
    for i in range(1, n):
        # Find the next node where the cumulative demand is less than the vehicle capacity
        next_node = torch.argmax(remaining_capacity)
        # If the demand of the current node is too high, apply a large penalty
        if scaled_demands[i] > 1.0:
            heuristic_matrix[i] = torch.full_like(distance_matrix[i], -1000.0)
        else:
            # Add distance-based heuristic and scale with the remaining capacity
            heuristic_matrix[i] = (distance_matrix[i, next_node] + 1) / (remaining_capacity[i] + 1)
    
    # Introduce a distance-based heuristic where closer nodes are favored
    distance_heuristic = 1 / (distance_matrix[:, 0] + 1)  # Add 1 to avoid division by zero
    # Combine the heuristics with the distance-based heuristic
    heuristic_matrix = heuristic_matrix + distance_heuristic

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristic_matrix.max()
    min_heuristic = heuristic_matrix.min()
    if max_heuristic != min_heuristic:
        heuristic_matrix = (heuristic_matrix - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristic_matrix = torch.ones_like(heuristic_matrix)

    return heuristic_matrix
```
