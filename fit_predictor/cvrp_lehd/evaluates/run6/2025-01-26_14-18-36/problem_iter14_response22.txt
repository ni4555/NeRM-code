```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    
    # Demand constraints
    demand_penalty = (demands > total_demand / n).float() * -1000.0
    
    # Capacity constraints
    capacity_excess = (demands > 1.0).float() * -1000.0
    
    # Distance pattern
    distance_pattern = (distance_matrix > distance_matrix.mean()).float() * -10.0
    
    # Demand pattern
    demand_pattern = (demands < 0.2 * total_demand).float() * 10.0
    
    # Combine the patterns
    combined_pattern = demand_pattern + distance_pattern + demand_penalty + capacity_excess
    
    # Apply decaying functions
    distance_decay = torch.exp(-distance_matrix / distance_matrix.mean())
    demand_decay = torch.exp(-demands / total_demand)
    
    # Combine the decays with the pattern
    combined_decay = distance_decay * demand_decay
    
    # Apply the decay to the pattern
    heuristics = combined_pattern * combined_decay
    
    # Scale heuristics to ensure non-negative values
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
