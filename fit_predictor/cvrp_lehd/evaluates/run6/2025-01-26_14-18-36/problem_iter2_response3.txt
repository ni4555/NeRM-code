```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands = demands.to(torch.float32)
    distance_matrix = distance_matrix.to(torch.float32)
    
    # Calculate the sum of demands
    total_demand = demands.sum()
    # Calculate the average demand per customer
    average_demand = total_demand / len(demands)
    
    # Create a heuristic matrix based on the distance to the nearest demand
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # For each node, find the minimum distance to a customer node
    min_distances = torch.min(distance_matrix[:, 1:], dim=1)[0]  # Exclude the depot node
    
    # Calculate the heuristic value
    heuristic_values = (average_demand - demands) * min_distances
    
    # Update the heuristic matrix
    heuristic_matrix[:, 1:] = heuristic_values
    
    return heuristic_matrix
```
