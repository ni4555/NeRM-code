```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    cumulative_demand = torch.cumsum(scaled_demands, dim=0)
    remaining_capacity = total_capacity - cumulative_demand

    # Use absolute differences for scaled demands
    absolute_demand_diff = torch.abs(scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0))

    # Subtract penalties for capacity overflow
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)

    # Include a dampening factor for penalties
    dampening_factor = 0.5
    heuristics = -absolute_demand_diff * remaining_capacity * dampening_factor
    heuristics += capacity_penalty * dampening_factor

    # Add penalty for edges back to the depot
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty * dampening_factor

    # Normalize heuristics for bounded comparison
    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())

    # Add a penalty for edges too far from the depot (local preference)
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 30
    heuristics += torch.clamp(distance_penalty, min=0.0) * dampening_factor

    # Apply non-linear transformations to avoid local optima
    heuristics = torch.relu(heuristics)

    # Balance penalties for better heuristic distribution
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    # Adaptively adjust penalties based on node capacities
    capacity_diff_penalty = 0.1
    capacity_diff = remaining_capacity.unsqueeze(1) - remaining_capacity.unsqueeze(0)
    capacity_diff = torch.clamp(capacity_diff, min=0.0)
    heuristics = heuristics - (capacity_diff_penalty * (capacity_diff > 0.1).float() * capacity_diff)

    return heuristics
```
