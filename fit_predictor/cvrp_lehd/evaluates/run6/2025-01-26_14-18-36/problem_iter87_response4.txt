```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Normalize demand differences to encourage diversity
    demand_diff = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs()

    # Use a combination of demand difference and remaining capacity to form heuristic
    base_heuristics = demand_diff * remaining_capacity

    # Introduce exploration and exploitation through adaptive penalties
    # For edges close to the capacity limit
    capacity_penalty = torch.where(scaled_demands > 0.95, base_heuristics * 10, base_heuristics)
    # For edges that lead to the depot
    depot_penalty = torch.where(distance_matrix[:, 0] < distance_matrix[:, 1:].min(), -base_heuristics, base_heuristics)
    # For edges far from the depot
    distance_penalty = torch.where(distance_matrix[:, 0] > distance_matrix[:, 1:].mean(), base_heuristics * 0.5, base_heuristics)

    # Combine the penalties into the final heuristic
    heuristics = capacity_penalty + depot_penalty + distance_penalty

    # Add random noise for diversity
    exploration_noise = torch.randn_like(heuristics) * 0.01
    heuristics += exploration_noise

    # Sigmoid normalization to encourage exploration and dampen extreme values
    heuristics = torch.sigmoid(heuristics)

    # Ensure heuristic values are within a balanced range
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
