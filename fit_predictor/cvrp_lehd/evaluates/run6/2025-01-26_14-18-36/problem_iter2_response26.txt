```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    average_demand = total_demand / len(demands)
    
    # Calculate the distance to the nearest demand for each node
    nearest_demand_distance = torch.min(distance_matrix[:, 1:], dim=1)[0]  # Exclude the depot node
    
    # Calculate the heuristic value for each edge
    heuristic_values = (average_demand - demands) * nearest_demand_distance
    
    # Normalize the heuristic values to have a range between 0 and 1
    max_value = torch.max(heuristic_values)
    min_value = torch.min(heuristic_values)
    normalized_values = (heuristic_values - min_value) / (max_value - min_value)
    
    return normalized_values
```
