```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristic value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Introduce a balance factor to avoid overly penalizing certain edges
    balance_factor = 0.5 * (heuristics.max() + heuristics.min())
    heuristics = heuristics - balance_factor

    # Normalize the heuristic values to the range [0, 1]
    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())

    # Introduce a dampening factor to prevent the algorithm from getting stuck in local optima
    dampening_factor = 0.9
    heuristics = dampening_factor * heuristics

    # Add a penalty for edges that lead to a node with demand greater than vehicle capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty

    # Add a penalty for edges leading back to the depot (index 0)
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(distance_matrix.shape[0]), 0] = -1
    heuristics += depot_penalty

    # Introduce a penalty for edges too far from the depot (local preference)
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100
    heuristics += torch.clamp(distance_penalty, min=0.0)

    return heuristics
```
