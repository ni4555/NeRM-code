```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Normalize the remaining capacity and demand to the range [0, 1]
    normalized_demand = scaled_demands / scaled_demands.max()
    normalized_capacity = remaining_capacity / remaining_capacity.max()

    # Calculate the heuristic value for each edge based on normalized demand and capacity
    heuristics = (normalized_demand.unsqueeze(1) - normalized_demand.unsqueeze(0)).abs() * normalized_capacity

    # Add a penalty for edges that lead to a node with demand greater than vehicle capacity
    penalty = (scaled_demands > 1.0).float() * 1000.0
    heuristics -= penalty

    # Add a penalty for edges leading back to the depot (index 0)
    penalty = torch.zeros_like(distance_matrix)
    penalty[torch.arange(distance_matrix.shape[0]), 0] = -1
    heuristics += penalty

    # Use a dampening factor to balance global view with local demand and distance
    dampening_factor = 0.1
    distance_heuristic = distance_matrix[:, 0] * dampening_factor
    heuristics += distance_heuristic

    # Combine the heuristic values with the penalties, ensuring that the penalties dominate for infeasible edges
    combined_penalties = torch.max(penalty, distance_heuristic)
    heuristics = torch.where(combined_penalties > 0, combined_penalties, heuristics)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
