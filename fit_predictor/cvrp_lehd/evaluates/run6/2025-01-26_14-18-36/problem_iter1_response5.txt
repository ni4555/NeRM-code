```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An enhanced heuristic implementation using the Savings Algorithm."""
    n = distance_matrix.shape[0]
    savings = torch.zeros(n)
    
    # Calculate the savings for each node
    for i in range(1, n):
        for j in range(1, n):
            savings[i] += savings[j] = demands[i] + demands[j] - distance_matrix[i][j]
    
    # Normalize the savings and create the heuristic matrix
    max_savings = savings.max()
    heuristic_matrix = (savings - max_savings) / (max_savings - savings) if max_savings > 0 else torch.zeros_like(savings)
    
    return heuristic_matrix
```
