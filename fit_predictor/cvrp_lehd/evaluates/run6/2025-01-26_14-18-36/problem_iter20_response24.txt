```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize the heuristic matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)

    # Add a penalty for edges that lead to a node with demand greater than vehicle capacity
    penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics = heuristics - penalty

    # Add a dampened penalty for edges leading back to the depot (index 0)
    penalty = torch.zeros_like(distance_matrix)
    penalty[torch.arange(distance_matrix.shape[0]), 0] = -1
    heuristics = heuristics - penalty

    # Introduce a dampened distance penalty for edges too far from the depot (local preference)
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100
    distance_penalty = torch.clamp(distance_penalty, min=0.0)
    heuristics = heuristics - distance_penalty

    # Promote edges with similar demand (local clustering)
    for i in range(1, n):
        for j in range(i + 1, n):
            if abs(scaled_demands[i] - scaled_demands[j]) < 0.5 * total_capacity:
                heuristics[i, j] += 10.0
                heuristics[j, i] += 10.0

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
