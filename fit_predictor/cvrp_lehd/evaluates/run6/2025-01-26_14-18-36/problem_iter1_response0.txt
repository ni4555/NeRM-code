```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    max_demand = demands.max()
    min_demand = demands.min()
    
    # Create a matrix with the same shape as distance_matrix
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Loop through all edges except the one from the depot to itself
    for i in range(1, n):
        for j in range(i, n):
            if j == depot:
                continue
            
            # Calculate the potential benefit of visiting node j from node i
            potential_benefit = demands[i] + demands[j]
            
            # Calculate the penalty if this edge is included in the route
            if potential_benefit > 1:
                penalty = (potential_benefit - 1) * (distance_matrix[i, j] / distance_matrix[depot, i])
            else:
                penalty = 0
            
            # Calculate the heuristic value
            heuristic_value = distance_matrix[i, j] - penalty
            
            # Assign the heuristic value to the corresponding position in the heuristic_matrix
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
