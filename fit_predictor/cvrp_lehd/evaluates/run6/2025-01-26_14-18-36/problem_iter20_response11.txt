```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Add a strong penalty for edges that lead to a node with demand greater than vehicle capacity
    penalty = (scaled_demands > 1.0).float() * 1000.0
    heuristics -= penalty

    # Add a small penalty for edges leading back to the depot (index 0)
    penalty = torch.zeros_like(distance_matrix)
    penalty[torch.arange(distance_matrix.shape[0]), 0] = -1
    heuristics += penalty

    # Introduce a strong penalty for edges that are too far from the depot
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 1000.0
    heuristics += distance_penalty

    # Cap the maximum heuristic value to avoid extremely high values
    max_heuristic = heuristics.max()
    heuristics = torch.clamp(heuristics, min=-max_heuristic, max=max_heuristic)

    # Scale the heuristic values to the range [0, 1] without causing division by zero
    if max_heuristic != 0:
        heuristics = heuristics / max_heuristic
    else:
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
