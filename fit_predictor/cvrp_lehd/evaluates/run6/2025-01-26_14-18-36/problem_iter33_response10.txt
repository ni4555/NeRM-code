```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize the heuristic matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)

    # Calculate heuristic values for edges where the demand is met or exceeded
    heuristics = torch.where(scaled_demands.unsqueeze(1) >= scaled_demands.unsqueeze(0), -1000.0, heuristics)

    # Add a dampening factor to the edges that do not exceed the demand
    dampen_factor = 1.0 - (1.0 / (1.0 + remaining_capacity))
    heuristics = torch.where(scaled_demands.unsqueeze(1) < scaled_demands.unsqueeze(0), dampen_factor * distance_matrix, heuristics)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.max() - heuristics.min()  # Assuming min is subtracted from max
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    return heuristics
```
