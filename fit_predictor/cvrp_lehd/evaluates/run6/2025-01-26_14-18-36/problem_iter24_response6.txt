```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    cumulative_demand = torch.cumsum(scaled_demands, dim=0)
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristic value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Penalties for exceeding capacity and dampening factor for local optima
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    dampening_factor = torch.clamp(1.0 - (cumulative_demand / total_capacity), min=0.0)

    # Adjust the heuristic based on penalties and dampening factor
    heuristics -= capacity_penalty
    heuristics *= dampening_factor

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Ensure the heuristic values are within the [0, 1] range
    heuristics = torch.clamp(heuristics, min=0.0)
    return heuristics
```
