```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    total_demand = demands.sum()
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    for i in range(1, n):
        for j in range(i, n):
            if j == depot:
                continue
            # Calculate the total potential gain of visiting node j from node i
            potential_gain = demands[i] + demands[j]
            # Calculate the penalty if the edge is included
            if potential_gain > 1:
                penalty = (potential_gain - 1) * (distance_matrix[i, j] / distance_matrix[depot, i])
            else:
                penalty = 0
            # Calculate the heuristic value
            heuristic_value = potential_gain - penalty
            # Assign the heuristic value to the corresponding positions
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
