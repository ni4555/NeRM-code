```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Calculate penalties
    infeasibility_penalty = (scaled_demands > 1.0).float() * 1000.0
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(distance_matrix.shape[0]), 0] = -0.5
    local_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 0.5

    # Apply penalties, making them dominate when the condition is met
    penalties = torch.maximum(torch.stack([infeasibility_penalty, depot_penalty, local_penalty]), 0)

    # Combine penalties and heuristic values
    heuristics -= penalties

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = torch.clamp((heuristics - min_heuristic) / (max_heuristic - min_heuristic), min=0)

    return heuristics
```
