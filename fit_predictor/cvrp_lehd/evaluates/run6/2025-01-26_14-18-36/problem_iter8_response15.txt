```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    
    # Normalize demand to be relative to the total demand
    normalized_demand = demands / total_demand
    
    # Calculate the negative distance for local heuristic
    local_heuristic = -distance_matrix
    
    # Create global heuristic that captures total demand relative to capacity
    global_heuristic = demands * (demands / total_demand)
    
    # Combine local and global heuristics
    combined_heuristic = local_heuristic + global_heuristic
    
    # Incorporate global demand information by penalizing high variability
    demand_variability_penalty = (demands - normalized_demand).abs() * 10
    
    # Incorporate distance decay by penalizing edges that are far from the depot
    distance_decay = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100
    
    # Combine all factors, adding penalties for capacity and demand variability
    heuristics = combined_heuristic - demand_variability_penalty - distance_decay
    
    # Scale by the inverse of the sum of demands per node to account for capacity constraints
    heuristics = heuristics / (1 + torch.sum(demands.unsqueeze(0), dim=1))
    
    # Use exponential to dampen the effect of negative values and to ensure non-negative heuristics
    heuristics = torch.exp(heuristics)
    heuristics = torch.clamp(heuristics, min=0)
    
    # Normalize the heuristics to ensure non-negative values and scale the values for better interpretation
    heuristics /= heuristics.max()
    
    return heuristics
```
