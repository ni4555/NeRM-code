```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Blend multi-scale penalties for better adaptability
    penalty近距离 = (distance_matrix < distance_matrix[:, 0].mean() + 0.1).float() * -500
    penalty远距离 = (distance_matrix > distance_matrix[:, 0].mean() + 0.5).float() * -1000
    penalty需求过载 = (scaled_demands > 1.0).float() * -1000
    penalty回车 = torch.zeros_like(distance_matrix)
    penalty回车[torch.arange(distance_matrix.shape[0]), 0] = -1

    # Apply dampening factors to control the strength of penalties
    dampen近距离 = 0.7
    dampen远距离 = 0.7
    dampen需求过载 = 1.0
    dampen回车 = 1.0

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Combine the penalties and dampen them
    combined_penalties = dampen近距离 * penalty近距离 + dampen远距离 * penalty远距离 + dampen需求过载 * penalty需求过载 + dampen回车 * penalty回车
    heuristics -= combined_penalties

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
