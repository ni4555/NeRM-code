```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands = demands.to(torch.float32)
    distance_matrix = distance_matrix.to(torch.float32)
    
    # Calculate the distance to the nearest neighbor for each node
    nearest_neighbor_distance = torch.min(distance_matrix, dim=1, keepdim=True)[0]
    
    # Calculate the balance score for each node, which is the difference between the maximum and minimum demands
    demand_balance = torch.max(demands) - torch.min(demands)
    
    # Calculate the local potential based on distance to the nearest neighbor
    local_potential = nearest_neighbor_distance
    
    # Calculate the global potential based on the difference from the total demand
    global_potential = demands[:, None] + demands - demands
    
    # Calculate the heuristic value for each edge, considering both local and global potential
    heuristic_values = local_potential + global_potential
    
    # Normalize the heuristic values to a range that can be used for comparison
    heuristic_values /= heuristic_values.max()
    
    # Introduce a diversification strategy by adding a random perturbation to the heuristic values
    random_perturbation = torch.randn_like(heuristic_values) * 0.1
    heuristic_values += random_perturbation
    
    # Calculate a penalty for edges leading to a node with demand greater than vehicle capacity
    penalty = (demands > 1.0).float() * 1000.0
    
    # Combine the heuristic values with the penalty, ensuring that the penalty dominates for infeasible edges
    heuristics = torch.where(demands > 1.0, penalty, heuristic_values)
    
    return heuristics
```
