```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Add a penalty for edges that lead to a node with demand greater than vehicle capacity
    penalty_excess_demand = (scaled_demands > 1.0).float() * 1000.0
    heuristics -= penalty_excess_demand

    # Add a small penalty for edges leading back to the depot (index 0)
    penalty_depot = torch.zeros_like(distance_matrix)
    penalty_depot[torch.arange(distance_matrix.shape[0]), 0] = -1
    heuristics += penalty_depot

    # Introduce a distance-based heuristic, rewarding edges that are closer to the depot
    distance_heuristic = (distance_matrix[:, 0] / distance_matrix[:, 0].max() - 0.5) * 100

    # Calculate the distance penalty for edges that are too far from the depot
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100

    # Introduce a trade-off between the two penalties with a weight that considers the distance
    trade_off_weight = torch.exp(-distance_matrix[:, 0] / distance_matrix[:, 0].mean())
    combined_penalties = trade_off_weight * penalty_excess_demand + (1 - trade_off_weight) * distance_penalty
    heuristics = torch.where(combined_penalties > 0, combined_penalties, heuristics)

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
