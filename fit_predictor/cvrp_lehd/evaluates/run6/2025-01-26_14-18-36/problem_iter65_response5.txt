```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize the heuristic matrix
    heuristics = torch.zeros_like(distance_matrix)

    # Use a probability-based selection of edges
    random_factor = torch.rand_like(remaining_capacity)
    probability = remaining_capacity / remaining_capacity.sum()

    # Select edges based on both demand and remaining capacity, with a randomness factor
    selected_edges = (scaled_demands.unsqueeze(1) * scaled_demands.unsqueeze(0) *
                      probability * (1 + random_factor * 0.1)).abs()

    # Introduce a penalty for edges that lead to a node with demand greater than vehicle capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    selected_edges -= capacity_penalty

    # Add a dampened penalty for edges leading back to the depot (index 0)
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    selected_edges += depot_penalty

    # Normalize the heuristic values to the range [0, 1] using min-max scaling
    max_heuristic = selected_edges.max()
    min_heuristic = selected_edges.min()
    heuristics = (selected_edges - min_heuristic) / (max_heuristic - min_heuristic)

    # Introduce a penalty for edges too far from the depot (local preference)
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 30
    heuristics += torch.clamp(distance_penalty, min=0.0)

    # Apply a non-linear transformation to the heuristic values to avoid local optima
    heuristics = torch.sigmoid(heuristics)

    # Further balancing of penalties to promote a better heuristic distribution
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
