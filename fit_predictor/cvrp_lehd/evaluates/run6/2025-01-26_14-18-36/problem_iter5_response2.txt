```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Incorporate demand constraints: higher demand should encourage earlier return
    demand_penalty = (demands - demands.mean()) * -1000

    # Incorporate distance: closer edges should be more promising
    distance_incentive = (distance_matrix - distance_matrix.mean()) * 100

    # Balance global & local: penalize edges that are far from the depot
    local_incentive = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100

    # Combine all factors
    heuristics = demand_penalty + distance_incentive + local_incentive
    heuristics = torch.clamp(heuristics, min=-10000, max=10000)  # Clamp to avoid overflow
    return heuristics
```
