```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    average_demand = total_demand / (n - 1)  # Exclude the depot node
    distances_from_depot = distance_matrix[0, 1:]  # Distance from depot to customers
    distances_to_customers = distance_matrix[1:, 0]  # Distance from customers to depot
    demand_diff = demands[1:] - average_demand  # Demand difference from average demand for customers
    
    # Calculate the potential of each edge
    heuristic_values = -torch.abs(demand_diff) * distances_from_depot * distances_to_customers
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Set the heuristic values on the matrix
    heuristic_matrix[0, 1:] = -heuristic_values  # From depot to customers
    heuristic_matrix[1:, 0] = -heuristic_values  # From customers to depot
    
    return heuristic_matrix
```
