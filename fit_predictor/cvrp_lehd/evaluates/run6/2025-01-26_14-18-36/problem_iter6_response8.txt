```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands = demands.to(torch.float32)
    distance_matrix = distance_matrix.to(torch.float32)
    
    # Calculate the distance to the nearest neighbor for each node
    nearest_neighbor_distance = torch.min(distance_matrix, dim=1, keepdim=True)[0]
    
    # Calculate the balance score for each node, which is the difference between the maximum and minimum demands
    demand_balance = torch.max(demands) - torch.min(demands)
    
    # Calculate the local neighborhood influence, using the minimum distance to a neighbor as a measure
    local_neighborhood_influence = torch.min(distance_matrix, dim=0, keepdim=True)[0]
    
    # Calculate the heuristic value for each edge
    heuristic_values = nearest_neighbor_distance + demand_balance + local_neighborhood_influence
    
    # Add a penalty for edges leading to a node with demand greater than vehicle capacity
    penalty = (demands > 1.0).float() * 1000.0
    
    # Adjust the heuristic values to balance demand and distance, while also considering local neighborhood influence
    heuristic_values *= 0.6
    
    # Combine the heuristic values with the penalty
    heuristics = heuristic_values - penalty
    
    # Normalize the heuristics to ensure non-negative values
    heuristics = torch.clamp(heuristics, min=0)
    
    return heuristics
```
