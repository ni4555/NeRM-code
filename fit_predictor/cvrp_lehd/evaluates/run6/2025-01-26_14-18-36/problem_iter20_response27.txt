```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()

    # Define penalties for high demands and capacity excess
    demand_penalty = (demands > 0.7 * total_demand / n).float() * -1000.0
    capacity_excess_penalty = (demands > 1.0).float() * -1000.0

    # Identify edges with longer than average distance and penalize
    distance_penalty = (distance_matrix > distance_matrix.mean()).float() * -10.0

    # Define a pattern to promote grouping of customers with similar demands
    demand_pattern = (demands < 0.5 * total_demand).float() * 10.0

    # Combine the penalties and patterns
    combined = demand_penalty + capacity_excess_penalty + distance_penalty + demand_pattern

    # Apply a decay function to reduce the relevance of distant or low-demand edges
    distance_decay = torch.exp(-distance_matrix / distance_matrix.mean())
    demand_decay = torch.exp(-demands / total_demand)

    # Combine the decays with the combined pattern
    combined_decay = distance_decay * demand_decay * combined

    # Normalize the combined decay to ensure all values sum to 1
    combined_decay /= combined_decay.sum()

    return combined_decay
```
