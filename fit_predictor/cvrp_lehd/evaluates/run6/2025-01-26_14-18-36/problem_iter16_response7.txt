```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Introduce a preference for edges that lead to a node with lower demand
    demand_preference = (1 - scaled_demands) * 100

    # Introduce a preference for edges leading back to the depot (index 0)
    depot_preference = torch.zeros_like(distance_matrix)
    depot_preference[torch.arange(distance_matrix.shape[0]), 0] = 1

    # Introduce a preference for edges that are close to the depot
    distance_preference = (distance_matrix[:, 0] / distance_matrix[:, 0].max()) * 100

    # Combine the heuristic values with the preferences
    heuristics += demand_preference + depot_preference + distance_preference

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
