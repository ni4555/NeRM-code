```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize heuristics based on distance
    heuristics = -distance_matrix.clone()

    # Apply a dampening factor for scaling
    dampening_factor = 0.2

    # Promote edges with lower remaining demand and higher remaining capacity
    demand_scale = (1.0 - scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).clamp(min=0.0)
    capacity_scale = remaining_capacity.unsqueeze(1)
    heuristics += demand_scale * capacity_scale * dampening_factor

    # Introduce a penalty for edges that exceed the vehicle capacity
    capacity_penalty = torch.clamp(scaled_demands > 1.0, min=0.0) * 1000.0
    heuristics -= capacity_penalty * dampening_factor

    # Promote edges leading to the depot but with a smaller boost to avoid premature return
    depot_scale = torch.clamp(torch.ones_like(distance_matrix) - scaled_demands, min=0.0)
    heuristics[torch.arange(n), 0] += depot_scale * dampening_factor

    # Normalize the heuristic values to the range [0, 1] using min-max scaling
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Introduce a preference for edges closer to the depot
    distance_prefer = (distance_matrix[:, 0] - distance_matrix[:, 0].mean())
    heuristics += torch.clamp(distance_prefer * -0.5, min=0.0) * dampening_factor

    # Balance capacity vs. distance and maintain diversity in solution by slightly favoring distance
    heuristics = 0.6 * heuristics + 0.4 * (distance_matrix[:, 0] - distance_matrix[:, 0].mean())

    # Ensure the heuristics are within the range [0, 1]
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
