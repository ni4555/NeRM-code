```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristics that considers demand, distance, and is vectorized."""
    # Normalize the demands by the total capacity for consistency
    total_capacity = demands.sum()
    demands = demands / total_capacity

    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)

    # Calculate the sum of demands for each possible node visitation path
    for i in range(1, distance_matrix.shape[0]):
        for j in range(1, distance_matrix.shape[0]):
            demand_sum = demands[i].sum()
            if demand_sum > 1.0:
                heuristic_matrix[i, j] = (1 - demand_sum) * distance_matrix[i, j]

    return heuristic_matrix
```
