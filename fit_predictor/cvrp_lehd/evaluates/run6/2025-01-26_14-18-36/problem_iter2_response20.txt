```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initialize the matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    # Initialize the total demand
    total_demand = demands.sum()
    # Iterate over the nodes
    for i in range(1, n):
        # Calculate the potential of the edge from the current node to the depot
        potential_to_depot = -total_demand + demands[i]
        # Set the potential on the heuristic matrix
        heuristic_matrix[i, 0] = potential_to_depot
        for j in range(1, n):
            # Calculate the potential of the edge from the current node to the next node
            potential = -total_demand + demands[j]
            # Apply demand-based penalties
            penalty = (demands > demands[i]).float() * -1000
            # Combine the potential and penalty
            heuristic_matrix[i, j] = potential + penalty
    return heuristic_matrix
```
