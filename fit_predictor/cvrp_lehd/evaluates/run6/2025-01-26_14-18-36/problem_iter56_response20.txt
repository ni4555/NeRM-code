```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    cumulative_demand = torch.cumsum(scaled_demands, dim=0)
    remaining_capacity = total_capacity - cumulative_demand

    # Heuristics based on remaining capacity and scaled demand
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    dampening_factor = 0.5

    # Penalty for edges that exceed vehicle capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty * dampening_factor

    # Penalty for edges leading back to the depot
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty * dampening_factor

    # Min-max scale heuristic values to ensure a consistent range
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Penalty for edges too far from the depot (local preference)
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 50
    heuristics += torch.clamp(distance_penalty, min=0.0) * dampening_factor

    # Introduce a variance penalty to encourage diversity
    variance_penalty = torch.var(heuristics, dim=0)
    heuristics -= variance_penalty * dampening_factor

    # Balance capacity and diversity
    capacity_balance = 0.8
    diversity_balance = 0.2
    balanced_heuristics = capacity_balance * heuristics + diversity_balance * variance_penalty

    # Ensure heuristic values are within the range [0, 1]
    heuristics = torch.clamp(balanced_heuristics, min=0.0, max=1.0)

    return heuristics
```
