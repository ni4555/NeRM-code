```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands = demands.to(torch.float32)
    distance_matrix = distance_matrix.to(torch.float32)
    
    # Normalize the demand vector by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    
    # Calculate the distance to the nearest neighbor for each node
    nearest_neighbor_distance = torch.min(distance_matrix, dim=1, keepdim=True)[0]
    
    # Calculate the heuristic value for each edge, considering both distance and demand
    heuristic_values = -nearest_neighbor_distance + normalized_demands.unsqueeze(1) * normalized_demands.unsqueeze(0) * distance_matrix
    
    # Normalize the heuristic values to a range that can be used for comparison
    heuristic_values /= heuristic_values.abs().max()
    
    # Introduce randomness for diversification
    random_perturbation = torch.randn_like(heuristic_values) * 0.1
    heuristic_values += random_perturbation
    
    # Introduce penalties for edges leading to a node with demand greater than vehicle capacity
    penalty = (demands > 1.0).float() * 1000.0
    
    # Introduce a penalty for edges that are too far from the depot (local preference)
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100
    
    # Combine the heuristic values with the penalties, ensuring that the penalties dominate for infeasible edges
    combined_penalties = torch.max(penalty, distance_penalty)
    heuristics = torch.where(combined_penalties > 0, combined_penalties, heuristic_values)
    
    return heuristics
```
