```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Calculate the total demand
    total_demand = demands.sum()
    
    # Incorporate demand constraints
    demand_excess = (demands > total_demand / n).float()
    
    # Incorporate distance patterns
    distance_excess = (distance_matrix > distance_matrix.mean()).float()
    
    # Combine demand and distance patterns
    combined_pattern = (demand_excess * distance_excess).neg()
    
    # Normalize the heuristics matrix
    heuristics = combined_pattern / combined_pattern.sum()
    
    return heuristics
```
