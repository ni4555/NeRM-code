```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Introduce a dampening factor to avoid local optima
    dampening_factor = 0.9

    # Calculate the heuristic value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * dampening_factor * remaining_capacity

    # Adjust heuristics based on the balance of distance and cumulative demand
    distance_weight = 0.1
    heuristics += distance_weight * (distance_matrix * dampening_factor)

    # Avoid nodes with demand exceeding vehicle capacity by introducing a high penalty
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty

    # Avoid returning to the depot by adding a penalty
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(distance_matrix.shape[0]), 0] = -1
    heuristics += depot_penalty

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    return heuristics
```
