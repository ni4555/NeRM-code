```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_sorted_indices = torch.argsort(demands)  # Sort nodes by demand in descending order
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Initialize total demand and visited nodes
    visited = torch.zeros_like(demands, dtype=torch.bool)
    visited[0] = True  # Depot is always visited first
    remaining_capacity = 1.0  # Start with full capacity
    
    for i in range(1, n):
        current_node = demand_sorted_indices[i]
        if not visited[current_node] and demands[current_node] <= remaining_capacity:
            # Calculate the heuristic value if adding this node does not exceed capacity
            heuristic_value = -distance_matrix[demand_sorted_indices[i-1], current_node]
            heuristic_matrix[demand_sorted_indices[i-1], current_node] = heuristic_value
            visited[current_node] = True
            remaining_capacity -= demands[current_node]
        elif current_node != 0 and not visited[0]:  # If not visiting the depot, go back to it
            heuristic_value = -distance_matrix[demand_sorted_indices[i-1], 0]
            heuristic_matrix[demand_sorted_indices[i-1], 0] = heuristic_value
            visited[0] = True
            remaining_capacity = 1.0  # Reset capacity after returning to depot
    
    # Introduce penalties for high demand and unnecessary depot visits
    high_demand_penalty = (demands > 0.1).float() * -1000.0
    unnecessary_depot_visit_penalty = (visited[1:]).float() * -1.0  # Penalty for unnecessary depot visit
    
    # Apply penalties to the heuristic matrix
    heuristic_matrix += high_demand_penalty + unnecessary_depot_visit_penalty
    
    return heuristic_matrix
```
