```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    total_capacity = demands.sum()
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Loop through all edges except the one from the depot to itself
    for i in range(1, n):
        for j in range(i, n):
            if j == depot:
                continue
            
            # Calculate the total demand of nodes i and j
            total_demand = demands[i] + demands[j]
            
            # If the total demand is greater than the capacity, calculate the penalty
            penalty = (total_demand - total_capacity) * distance_matrix[i, j]
            if penalty != 0:
                penalty = -penalty
            
            # Calculate the heuristic value
            heuristic_value = distance_matrix[i, j] - penalty
            
            # Assign the heuristic value to the corresponding position in the heuristic_matrix
            heuristic_matrix[i, j] = heuristic_value
            heuristic_matrix[j, i] = heuristic_value
    
    return heuristic_matrix
```
