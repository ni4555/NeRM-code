```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demands = demands.to(torch.float32)
    distance_matrix = distance_matrix.to(torch.float32)

    # Normalize the demand vector by the total vehicle capacity
    normalized_demands = demands / demands.sum()

    # Calculate the distance to the nearest neighbor for each node
    nearest_neighbor_distance = torch.min(distance_matrix, dim=1, keepdim=True)[0]

    # Calculate the demand relevance score for each node
    relevance_score = demands / demands.sum()

    # Calculate the heuristic value for each edge
    heuristic_values = (nearest_neighbor_distance - (distance_matrix.mean(dim=1) - distance_matrix)) * relevance_score

    # Normalize the heuristic values to the range [0, 1]
    heuristic_values = (heuristic_values - heuristic_values.min()) / (heuristic_values.max() - heuristic_values.min())

    # Add diversity by penalizing edges that are too similar to the shortest path
    diversity_penalty = (heuristic_values - heuristic_values.mean()).abs() * 10

    # Add demand variability by penalizing edges leading to nodes with high demand variability
    demand_variability_penalty = (demands - normalized_demands).abs() * 10

    # Add distance decay by penalizing edges that are far from the depot
    distance_decay = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 100

    # Combine all factors
    heuristics = heuristic_values - diversity_penalty - demand_variability_penalty - distance_decay

    # Add a penalty for edges leading to a node with demand greater than vehicle capacity
    penalty = (demands > 1.0).float() * 1000.0

    # Combine the heuristic values with the penalty
    heuristics = heuristics - penalty

    return heuristics
```
