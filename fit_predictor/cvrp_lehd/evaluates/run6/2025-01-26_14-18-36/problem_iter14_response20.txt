```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Apply a large penalty for edges leading to overflow in vehicle capacity
    capacity_penalty = (scaled_demands > 1.0).float() * 1000.0
    heuristics -= capacity_penalty

    # Apply penalties for edges leading back to the depot and for distant nodes
    penalties = torch.cat([torch.zeros_like(distance_matrix), 
                            (distance_matrix[:, 0] - distance_matrix[:, 0].min()) * 50, 
                            (distance_matrix - distance_matrix[:, 0, None].min(axis=1)) * 100], dim=1)
    heuristics -= penalties

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
