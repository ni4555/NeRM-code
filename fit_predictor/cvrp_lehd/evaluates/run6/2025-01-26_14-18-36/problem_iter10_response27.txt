```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    average_demand = total_demand / (n - 1)  # Exclude the depot demand
    demand_scale = (demands / total_demand).unsqueeze(1)
    distance_scale = distance_matrix / distance_matrix.max()
    combined_scale = -distance_scale * demand_scale

    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)

    # Calculate the heuristic for each edge
    heuristic_matrix = combined_scale * distance_matrix

    # Add the penalty for the depot to return to the route
    return_penalty = average_demand - demands[0]
    heuristic_matrix[torch.arange(1, n), 0] += return_penalty
    heuristic_matrix[0, torch.arange(1, n)] += return_penalty

    # Normalize the heuristic matrix
    heuristic_matrix /= (heuristic_matrix.max() + heuristic_matrix.min())

    # Dampen the heuristics to maintain balance and stability
    dampening_factor = 0.9
    heuristic_matrix = dampening_factor * heuristic_matrix

    return heuristic_matrix
```
