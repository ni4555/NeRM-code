```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristics value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Introduce a penalty for infeasible edges (demand greater than vehicle capacity)
    penalty = (scaled_demands > 1.0).float() * 1000.0
    heuristics -= penalty

    # Introduce a dampening factor to balance global view with local demand and distance
    dampening_factor = 0.5
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * dampening_factor

    # Normalize the distance penalty to maintain balance and stability
    max_distance_penalty = distance_penalty.max()
    min_distance_penalty = distance_penalty.min()
    normalized_distance_penalty = (distance_penalty - min_distance_penalty) / (max_distance_penalty - min_distance_penalty)

    # Combine the heuristic values with the normalized distance penalty
    heuristics = heuristics + normalized_distance_penalty

    # Normalize the heuristic values to the range [0, 1]
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    if max_heuristic != min_heuristic:
        heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        # Avoid division by zero
        heuristics = torch.ones_like(heuristics)

    return heuristics
```
