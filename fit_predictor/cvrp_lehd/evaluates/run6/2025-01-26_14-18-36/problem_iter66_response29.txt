```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize the heuristic matrix
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Apply penalties to edges
    heuristics -= torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics += torch.clamp((distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 30, min=0.0)
    
    # Dampen penalties to the depot (index 0) to promote exiting the depot
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty

    # Apply non-linear transformation to heuristics
    heuristics = torch.tanh(heuristics)

    # Add diversity with small random perturbations to prevent local optima
    random_perturbation = torch.randn_like(heuristics) * 0.01
    heuristics += random_perturbation

    # Balance the heuristics to ensure they sum to 1
    heuristics = heuristics / heuristics.sum()

    return heuristics
```
