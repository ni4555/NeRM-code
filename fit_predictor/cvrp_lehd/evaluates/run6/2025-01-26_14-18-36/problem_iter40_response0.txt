```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Calculate the heuristic value for each edge based on scaled demand and remaining capacity
    heuristics = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs() * remaining_capacity

    # Dampen the influence of edges with high demand differences
    dampening_factor = torch.clamp((scaled_demands.abs() > 0.5).float(), min=0.1, max=0.9)
    heuristics *= dampening_factor

    # Dampen the influence of edges that are too far from the depot
    distance_dampening_factor = torch.clamp((distance_matrix.mean() - distance_matrix) > 0.5, min=0.1, max=0.9)
    heuristics *= distance_dampening_factor

    # Add a dampened penalty for edges that lead to a node with demand greater than vehicle capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty * 0.5

    # Add a dampened penalty for edges leading back to the depot (index 0)
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty * 0.5

    # Introduce a dampened penalty for edges too far from the depot (local preference)
    distance_penalty = (distance_matrix[:, 0] - distance_matrix[:, 0].mean()) * 50
    heuristics += torch.clamp(distance_penalty, min=0.0) * 0.5

    # Introduce a penalty for edges that are likely to cause a route to deviate significantly from the optimal path
    deviation_penalty = (distance_matrix - distance_matrix[:, 0].unsqueeze(1)).abs() * 20
    heuristics += torch.clamp(deviation_penalty, min=0.0) * 0.5

    # Normalize the heuristic values to the range [0, 1] using min-max scaling
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Further balancing of penalties to ensure diversity in the heuristic values
    diversity_penalty = torch.clamp((heuristics.mean() - heuristics) * 10, min=0.0)
    heuristics -= diversity_penalty

    # Final tuning of penalties to ensure the heuristic values are balanced and not overly penalized
    heuristics = torch.clamp(heuristics, min=0.0, max=1)

    return heuristics
```
