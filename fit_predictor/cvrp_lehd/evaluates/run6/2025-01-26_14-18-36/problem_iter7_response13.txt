```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    average_demand = total_demand / (n - 1)  # Exclude the depot node
    distances_from_depot = distance_matrix[0, 1:]  # Distance from depot to customers
    distances_to_customers = distance_matrix[1:, 0]  # Distance from customers to depot
    demand_diff = demands[1:] - average_demand  # Demand difference from average demand for customers
    
    # Calculate the potential of each edge based on the product of distances and the absolute difference in demand
    heuristic_values = -torch.abs(demand_diff) * distances_from_depot * distances_to_customers
    
    # Incorporate a penalty for edges that are far from the depot
    depot_penalty = (distances_from_depot + distances_to_customers) * -1000
    
    # Combine the heuristic values and the penalty
    combined_heuristic_values = heuristic_values + depot_penalty
    
    # Prioritize high-demand edges
    high_demand_penalty = (demands[1:] > average_demand).float() * -1000
    
    # Add penalties for infeasibility and to avoid loops
    infeasibility_penalty = (demands[1:] > 1).float() * -5000
    loop_penalty = (torch.abs(demand_diff) > 0).float() * -1000
    
    # Combine all penalties and update the heuristic values
    combined_penalties = high_demand_penalty + infeasibility_penalty + loop_penalty
    final_heuristic_values = combined_heuristic_values + combined_penalties
    
    # Update the heuristic matrix
    heuristic_matrix = torch.zeros_like(distance_matrix)
    heuristic_matrix[0, 1:] = final_heuristic_values
    heuristic_matrix[1:, 0] = final_heuristic_values
    # Since the depot node can also be visited to form a feasible solution, add its heuristic values
    # for both the outward and return edges to the depot
    depot_heuristic_values = torch.abs(average_demand) * torch.cat([distances_from_depot, distances_to_customers], dim=0)
    heuristic_matrix[0, 0] = -depot_heuristic_values.sum()
    
    return heuristic_matrix
```
