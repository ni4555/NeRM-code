```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    heuristic_matrix = torch.zeros_like(distance_matrix)
    total_demand = demands.sum()
    
    # Sort the demands in descending order to prioritize high-demand nodes
    sorted_indices = torch.argsort(-demands)
    
    # Initialize the total demand for the first vehicle
    current_demand = demands[sorted_indices[0]]
    total_demand -= current_demand
    
    # Calculate the initial heuristic values for the first edge
    heuristic_matrix[sorted_indices[0], sorted_indices[1]] = -distance_matrix[sorted_indices[0], sorted_indices[1]]
    
    # Iterate over the sorted demands
    for i in range(1, n):
        current_demand = demands[sorted_indices[i]]
        # Check if adding the current node exceeds the capacity
        if total_demand + current_demand <= 1:
            total_demand += current_demand
            # Calculate the heuristic value for the edge
            heuristic_value = -distance_matrix[sorted_indices[i-1], sorted_indices[i]]
            heuristic_matrix[sorted_indices[i-1], sorted_indices[i]] = heuristic_value
            # Add penalty if the node's demand is greater than vehicle capacity
            if current_demand > 1:
                heuristic_matrix[sorted_indices[i-1], sorted_indices[i]] -= 1000.0
    
    # Apply a penalty for returning to the depot (index 0)
    penalty_depot = torch.zeros_like(distance_matrix)
    penalty_depot[torch.arange(n), 0] = -1
    heuristic_matrix += penalty_depot
    
    return heuristic_matrix
```
