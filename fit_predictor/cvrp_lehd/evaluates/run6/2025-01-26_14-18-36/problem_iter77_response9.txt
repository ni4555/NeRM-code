```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Normalize demand differences to encourage diversity
    demand_diff = (scaled_demands.unsqueeze(1) - scaled_demands.unsqueeze(0)).abs()

    # Calculate heuristic value using normalized demand differences and remaining capacity
    heuristics = demand_diff * remaining_capacity

    # Introduce dampened randomness to explore diverse solutions
    exploration_noise = torch.randn_like(heuristics) * 0.02
    heuristics += exploration_noise

    # Introduce a balance penalty for high and low demand
    demand_balance_penalty = torch.clamp((scaled_demands > 0.5) * (scaled_demands < 0.5).float() * 10.0, min=0.0)
    heuristics -= demand_balance_penalty

    # Normalize heuristic values for consistency
    heuristics = heuristics / heuristics.sum()

    # Use a non-linear transformation to dampen high penalties and encourage balance
    heuristics = torch.log(heuristics + 1e-6)

    # Introduce a penalty for nodes with demands exceeding capacity
    capacity_penalty = torch.clamp((scaled_demands > 1.0).float() * 1000.0, min=0.0)
    heuristics -= capacity_penalty * 0.3

    # Introduce a penalty for edges leading back to the depot
    depot_penalty = torch.zeros_like(distance_matrix)
    depot_penalty[torch.arange(n), 0] = -1
    heuristics += depot_penalty * 0.5

    # Introduce a distance-based heuristic for edges closer to the depot
    distance_heuristic = distance_matrix[:, 0] - distance_matrix[:, 0].mean()
    heuristics -= torch.abs(distance_heuristic) * 0.1

    # Clamp the heuristic values to ensure a balanced heuristic distribution
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
