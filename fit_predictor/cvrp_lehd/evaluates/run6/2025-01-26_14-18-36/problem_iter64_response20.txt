```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    scaled_demands = demands / total_capacity

    # Calculate cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(scaled_demands, dim=0)

    # Calculate remaining capacity at each node
    remaining_capacity = total_capacity - cumulative_demand

    # Initialize the heuristic matrix
    heuristics = torch.zeros_like(distance_matrix)

    # Introduce a capacity-based heuristic that encourages visiting nodes with lower demand first
    capacity_heuristic = torch.clamp((scaled_demands / remaining_capacity).abs(), min=0.0)
    heuristics += capacity_heuristic

    # Introduce a distance-based heuristic that favors closer nodes (local preference)
    distance_heuristic = torch.clamp(distance_matrix[:, 0] - distance_matrix[:, 0].mean(), min=0.0)
    heuristics -= distance_heuristic

    # Introduce a diversity heuristic to encourage a spread of nodes to visit
    diversity_heuristic = torch.clamp(torch.sum(remaining_capacity < 0.1), min=0.0)
    heuristics -= diversity_heuristic

    # Introduce a variance heuristic to encourage balanced load distribution
    variance_heuristic = torch.clamp(torch.var(remaining_capacity, dim=0), min=0.0)
    heuristics -= variance_heuristic

    # Introduce a dampening factor to reduce the impact of high penalties
    dampening_factor = 0.5

    # Normalize the heuristic values to the range [0, 1] using min-max scaling
    max_heuristic = heuristics.max()
    min_heuristic = heuristics.min()
    heuristics = (heuristics - min_heuristic) / (max_heuristic - min_heuristic)

    # Apply a non-linear transformation to the heuristic values to avoid local optima
    heuristics = torch.tanh(heuristics)  # Using tanh instead of sigmoid to have a more balanced range

    # Introduce randomness and diversity by adding a small random noise to the heuristics
    diversity_noise = torch.randn_like(heuristics) * 0.1
    heuristics += diversity_noise

    # Further balancing of penalties to promote a better heuristic distribution
    heuristics = torch.clamp(heuristics, min=0.0, max=1.0)

    return heuristics
```
