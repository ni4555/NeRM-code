```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_sorted_indices = torch.argsort(-demands)
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    current_demand = demands[demand_sorted_indices[0]]
    total_demand -= current_demand
    for i in range(1, n):
        if total_demand + demands[demand_sorted_indices[i]] <= 1.0:
            total_demand += demands[demand_sorted_indices[i]]
            heuristic_matrix[demand_sorted_indices[i-1], demand_sorted_indices[i]] = -distance_matrix[demand_sorted_indices[i-1], demand_sorted_indices[i]]
        else:
            distance_to_depot = distance_matrix[demand_sorted_indices[i-1], 0]
            heuristic_matrix[demand_sorted_indices[i-1], demand_sorted_indices[i]] = -distance_to_depot
        
        # Apply a demand-driven penalty for high demand nodes
        if demands[demand_sorted_indices[i]] > 0.5:
            heuristic_matrix[demand_sorted_indices[i-1], demand_sorted_indices[i]] -= 100.0
    
    # Normalize the heuristic values to ensure non-negative values
    heuristic_values = heuristic_matrix - heuristic_matrix.min()
    
    return heuristic_values
```
