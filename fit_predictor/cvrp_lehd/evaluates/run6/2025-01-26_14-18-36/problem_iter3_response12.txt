```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative sum of demands to determine the sum of demands up to each node
    cumulative_d demands = demands.cumsum(0)
    
    # Initialize the heuristic matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Iterate over all nodes (excluding the depot)
    for i in range(1, len(demands)):
        # For each node, find the next node with the lowest cumulative demand that does not exceed the vehicle capacity
        for j in range(i + 1, len(demands)):
            if cumulative_d[j] - cumulative_d[i] <= demands[0]:  # Check if the vehicle capacity is not exceeded
                heuristics[i, j] = distance_matrix[i, j] - cumulative_d[j] + cumulative_d[i]
    
    return heuristics
```
