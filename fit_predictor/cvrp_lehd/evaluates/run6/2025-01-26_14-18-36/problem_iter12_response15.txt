```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    average_demand = total_demand / (n - 1)  # Exclude the depot node
    demand_diff = demands[1:] - average_demand  # Demand difference from average demand for customers
    distances_from_depot = distance_matrix[0, 1:]  # Distance from depot to customers
    distances_to_customers = distance_matrix[1:, 0]  # Distance from customers to depot
    
    # Calculate the potential of each edge based on the product of distances and the absolute difference in demand
    heuristic_values = -torch.abs(demand_diff) * distances_from_depot * distances_to_customers
    
    # Apply penalties for infeasibility (demand difference too large)
    infeasibility_penalty = (torch.abs(demand_diff) > average_demand) * -2000.0
    heuristic_values = torch.maximum(heuristic_values, infeasibility_penalty)
    
    # Apply penalties for loop edges (large distance from depot)
    loop_penalty = (distances_from_depot + distances_to_customers > 100) * -1000.0
    heuristic_values = torch.minimum(heuristic_values, loop_penalty)
    
    # Since the depot node can also be visited to form a feasible solution, add its heuristic values
    # for both the outward and return edges to the depot
    depot_heuristic_values = torch.abs(average_demand) * (distances_from_depot + distances_to_customers)
    
    # Update the heuristic matrix
    heuristic_matrix = torch.zeros_like(distance_matrix)
    heuristic_matrix[0, 1:] = heuristic_values
    heuristic_matrix[1:, 0] = heuristic_values
    heuristic_matrix[0, 0] = -depot_heuristic_values.sum()
    
    return heuristic_matrix
```
