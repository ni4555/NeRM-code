```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    demand_scale = 1 / total_demand
    demand_scaled = demands * demand_scale
    
    # Initialize the heuristics matrix with negative values
    heuristics = -torch.ones_like(distance_matrix)
    
    # Calculate the sum of demands for all nodes
    sum_of_demands = demands.sum()
    
    # Calculate the average distance to the nearest customer for each node
    nearest_customer_distance = distance_matrix.min(dim=1)[0]
    
    # Calculate the heuristics based on the scaled demand and nearest customer distance
    heuristics = (demand_scaled * nearest_customer_distance - sum_of_demands) / sum_of_demands
    
    return heuristics
```
