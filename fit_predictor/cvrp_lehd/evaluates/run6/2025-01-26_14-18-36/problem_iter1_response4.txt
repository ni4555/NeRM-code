```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the sum of demands
    total_demand = demands.sum()
    # Calculate the average demand per customer
    average_demand = total_demand / len(demands)
    # Create a heuristic matrix based on the distance to the nearest demand
    heuristic_matrix = torch.zeros_like(distance_matrix)
    # For each node, find the minimum distance to a customer node
    for i in range(len(demands)):
        distances = distance_matrix[i, 1:]  # Exclude the depot node
        min_distance = torch.min(distances)
        # Calculate the heuristic value
        heuristic_value = (average_demand - demands[i]) * min_distance
        # Update the heuristic matrix
        heuristic_matrix[i, 1:] = heuristic_value
    return heuristic_matrix
```
