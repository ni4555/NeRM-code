```python
import torch
import torch.nn.functional as F

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    # Calculate the sum of distances from the depot to all nodes
    depot_distances = distance_matrix[depot, :].unsqueeze(1)
    # Calculate the sum of distances from the depot to all nodes except the depot
    sum_depot_distances = depot_distances - distance_matrix.sum(axis=1, keepdim=True)
    # Incorporate a penalty for edges that exceed the vehicle's capacity
    heuristics = sum_depot_distances - demands.unsqueeze(0)
    # Ensure that the heuristics are non-negative by clamping
    heuristics = torch.clamp(heuristics, min=0)
    # Normalize the heuristics by the total demand
    total_demand = demands.sum()
    heuristics /= total_demand
    # Apply a non-linear transformation using a sigmoid function for a smooth transition
    heuristics = F.sigmoid(heuristics)
    return heuristics
```
