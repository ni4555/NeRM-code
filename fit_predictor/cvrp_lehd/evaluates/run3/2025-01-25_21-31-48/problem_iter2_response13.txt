```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_demand = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    max_customers_per_vehicle = (cumulative_demand / total_demand).ceil().long()
    
    # Create an initial heuristic matrix where all values are negative
    heuristic_matrix = -distance_matrix
    
    # Calculate the sum of the last `k` demands where `k` is the number of customers per vehicle
    for k in range(1, max_customers_per_vehicle.max().item() + 1):
        # Check which edges contribute to the sum of the last `k` demands
        mask = cumulative_demand - k <= total_demand - demands[-1]
        heuristic_matrix = heuristic_matrix * mask.float()
    
    # Normalize the heuristic matrix to ensure all values are within the range of the problem (0 to 1)
    max_val = heuristic_matrix.max()
    min_val = heuristic_matrix.min()
    heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    
    return heuristic_matrix
```
