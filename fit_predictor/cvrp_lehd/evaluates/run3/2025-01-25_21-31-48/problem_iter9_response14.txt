```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_sum = torch.sum(demands)
    demand_mean = demand_sum / n
    demand_balance = (demands - demand_mean).abs()
    
    # Normalize the demand balance by the total demand and apply a weight to the balance
    demand_balance = demand_balance * 0.5 / demand_sum
    
    # Invert the balance to favor balanced demands
    demand_balance = 1 - demand_balance
    
    # Incorporate distance into the heuristic with a dynamic scaling factor
    max_distance = torch.max(distance_matrix)
    distance_heuristic = distance_matrix / (max_distance + 1e-8)  # Adding a small constant to avoid division by zero
    distance_weight = 0.3  # Example weight for distance heuristic
    
    # Combine heuristics with weighted sum
    combined_heuristic = demand_balance * distance_weight + distance_heuristic * (1 - distance_weight)
    
    # Calculate a dynamic penalty based on the difference from the demand mean
    penalty = (demands - demand_mean).abs() * 0.1
    
    # Apply penalty to edges that are out of balance
    penalty_mask = demand_balance < 0.5
    combined_heuristic[penalty_mask] += penalty[penalty_mask]
    
    # Cap the heuristics to ensure that they are positive and not too high
    cap = torch.max(combined_heuristic)
    combined_heuristic = torch.clamp(combined_heuristic, min=0, max=cap)
    
    return combined_heuristic
```
