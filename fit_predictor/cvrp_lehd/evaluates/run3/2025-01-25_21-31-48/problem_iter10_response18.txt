```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_sum = torch.sum(demands)
    demand_mean = demand_sum / n
    demand_balance = (demands - demand_mean).abs() / demand_sum

    # Normalize the distance matrix
    distance_normalized = distance_matrix / (torch.max(distance_matrix) + 1e-8)

    # Combine demand balance and normalized distance into a heuristic
    combined_heuristic = demand_balance * distance_normalized

    # Apply a dynamic penalty for potential capacity violations
    penalties = torch.zeros(n)
    for i in range(1, n):
        cumulative_demand = torch.cumsum(demands[1:i+1])
        capacity_violation_indices = cumulative_demand > 1
        penalties[capacity_violation_indices] = -torch.max(combined_heuristic[capacity_violation_indices]) * (cumulative_demand - 1)
        combined_heuristic[capacity_violation_indices] += penalties[capacity_violation_indices]

    # Cap the heuristics to ensure they are positive
    cap = torch.max(combined_heuristic)
    combined_heuristic = torch.clamp(combined_heuristic, min=0, max=cap)

    return combined_heuristic
```
