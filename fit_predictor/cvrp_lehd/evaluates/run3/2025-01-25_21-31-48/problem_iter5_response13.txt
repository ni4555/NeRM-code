```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize the demands to account for vehicle capacity
    normalized_demands = demands / demands.sum()

    # Invert the distance matrix to prioritize shorter distances
    inverse_distance_matrix = 1.0 / (distance_matrix + 1e-10)  # Add a small value to avoid division by zero

    # Calculate the balance between distance and demand
    distance_demand_balance = (inverse_distance_matrix * normalized_demands).sum(dim=1)

    # Return a matrix of heuristic values where positive values indicate promising edges
    return distance_demand_balance.unsqueeze(1) - distance_demand_balance.unsqueeze(0)
```
