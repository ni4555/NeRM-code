```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_sum = torch.sum(demands)
    demand_mean = demand_sum / n
    demand_balance = (demands - demand_mean).abs()
    
    # Normalize the demand balance by the total demand
    demand_balance = demand_balance / demand_sum
    
    # Invert the balance to favor balanced demands
    demand_balance = 1 - demand_balance
    
    # Incorporate distance into the heuristic
    distance_heuristic = distance_matrix / torch.max(distance_matrix)
    
    # Combine heuristics
    combined_heuristic = demand_balance * distance_heuristic
    
    # Invert the heuristic to give negative values to undesirable edges
    combined_heuristic = 1 - combined_heuristic
    
    return combined_heuristic
```
