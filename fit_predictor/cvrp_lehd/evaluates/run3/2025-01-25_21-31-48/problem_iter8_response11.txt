```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize the distance matrix by the maximum distance
    normalized_distance = distance_matrix / torch.max(distance_matrix)
    
    # Normalize the demands by the total vehicle capacity
    normalized_demand = demands / torch.sum(demands)
    
    # Use distance inverses to give higher weight to shorter distances
    inverse_distance = 1 / (normalized_distance + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Calculate the balance between distance and demand
    distance_demand_balance = inverse_distance * normalized_demand
    
    # Define a demand threshold that is a fraction of the maximum demand
    demand_threshold = torch.max(demands) * 0.5  # Example threshold
    
    # Create a mask for nodes that meet or exceed the demand threshold
    demand_mask = (demands >= demand_threshold)
    
    # Use a weighted sum to calculate the heuristic values
    # Edges with higher demand and lower distance should have higher heuristic values
    heuristic_matrix = distance_demand_balance * demand_mask
    
    # Add a small constant to avoid division by zero and ensure that all values are positive
    heuristic_matrix = heuristic_matrix + 1e-10
    
    return heuristic_matrix
```
