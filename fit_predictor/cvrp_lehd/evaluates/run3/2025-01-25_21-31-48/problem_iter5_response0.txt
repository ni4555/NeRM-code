```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize distance matrix
    normalized_distance = distance_matrix / torch.max(distance_matrix)
    
    # Inverse of the normalized distance matrix
    distance_inverse = 1 - normalized_distance
    
    # Normalize the demand
    normalized_demand = demands / demands.sum()
    
    # Use a weighted sum of inverse distances and normalized demands
    # Weights for inverse distance and demand can be adjusted for tuning
    weights_inverse_distance = 0.7
    weights_demand = 0.3
    heuristic_matrix = (weights_inverse_distance * distance_inverse) + (weights_demand * normalized_demand)
    
    # Subtract the demand to make higher demand nodes less promising
    heuristic_matrix = heuristic_matrix - demands.unsqueeze(0)
    
    return heuristic_matrix
```
