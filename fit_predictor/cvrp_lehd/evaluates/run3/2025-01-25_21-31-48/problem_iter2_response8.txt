```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic that considers the actual overflow and prioritizes closer nodes."""
    # Compute the total demand for each vehicle if the corresponding edge is included
    total_demand = distance_matrix + demands
    # Normalize the total demand by the vehicle capacity to get the overflow
    overflow = (total_demand > 1).float() * (total_demand - 1)
    # Calculate the heuristic value by subtracting the overflow from the distance to penalize longer routes
    heuristic_values = distance_matrix - overflow
    return heuristic_values
```
