```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands[1:].sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate the contribution of including this edge in the solution
                contribution = distance_matrix[i][j] - demands[j]
                # Normalize the contribution based on the total demand
                contribution_normalized = contribution / total_demand
                # Invert the distance to promote shorter paths
                distance_weight = 1 / (distance_matrix[i][j] + 1e-10)
                # Normalize demand to give higher weight to more demanding customers
                demand_weight = demands[j] / (demands[1:].sum() + 1e-10)
                # Use exponential decay for smoother transitions
                decay = torch.exp(-distance_matrix[i][j] / distance_matrix.max())
                # Combine the weights to create the heuristic
                heuristics[i][j] = contribution_normalized * distance_weight * demand_weight * decay
    
    return heuristics
```
