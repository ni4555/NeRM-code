```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    import torch

    # Normalize distances by their inverse (smaller distances become larger in value)
    normalized_distances = distance_matrix / (distance_matrix.min() + 1e-10)
    
    # Balance distance and demand using the inverse of demand (higher demands become larger in value)
    balanced_values = normalized_distances * (1 / (demands + 1e-10))
    
    # Normalize balanced values by their max to ensure all values are comparable
    max_value = balanced_values.max()
    normalized_balanced_values = balanced_values / max_value
    
    # The resulting matrix contains values that reflect the potential of each edge,
    # with higher values indicating more promising edges
    return normalized_balanced_values
```
