```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An improved heuristic incorporating domain knowledge, balancing distance and demand, and using vectorized operations."""
    # Normalize the demands by the total capacity for the same scale as distances
    normalized_demands = demands / demands.sum()
    
    # Use inverse distance to weight closer nodes more
    inverse_distances = 1 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero
    
    # Combine the inverse distance with normalized demands to balance distance and demand
    combined_weight = inverse_distances * normalized_demands
    
    # Adjust the combined weight by the demand to ensure that heavily demanded nodes are visited earlier
    adjusted_weight = combined_weight * demands
    
    # Incorporate negative values for edges that are not desirable, depending on their adjusted weight
    edge_weight = -torch.abs(adjusted_weight)
    
    return edge_weight
```
