```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic for CVRP using distance and demand."""
    # Calculate the difference in demand from each node to the depot
    demand_diff = demands - demands[0]
    
    # Calculate the weighted distance based on the difference in demand
    # The weight is a trade-off factor between distance and demand difference
    # A higher weight implies that nodes with a higher demand difference are more promising
    weight = 1.0
    weighted_distance = distance_matrix * (demand_diff * weight)
    
    # Add a term that penalizes high demands relative to vehicle capacity
    demand_penalty = (demands - demands.min()).clamp(min=0)
    penalty_factor = 1.0
    penalty = demand_penalty * penalty_factor
    
    # Combine the weighted distance and demand penalty
    heuristic_values = weighted_distance - penalty
    
    # Normalize the heuristic values to have a range between -1 and 1
    max_value = heuristic_values.max()
    min_value = heuristic_values.min()
    normalized_values = (heuristic_values - min_value) / (max_value - min_value)
    
    # Add a small constant to avoid division by zero
    normalized_values += 1e-6
    
    # Ensure that the values are within the range of -1 to 1
    normalized_values = torch.clamp(normalized_values, min=-1.0, max=1.0)
    
    return normalized_values
```
