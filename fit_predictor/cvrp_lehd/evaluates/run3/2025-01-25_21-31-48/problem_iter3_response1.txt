```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the sum of distance and demand for each edge
    combined = torch.abs(distance_matrix) + demands
    
    # Normalize the combined value by the total vehicle capacity
    # Assuming demands are normalized by the total vehicle capacity
    normalized_combined = combined / demands.sum()
    
    # Calculate the minimum normalized demand for each node
    min_demand = demands.min()
    
    # Calculate a penalty for edges with a normalized demand less than the minimum demand
    penalty = torch.where(normalized_combined < min_demand, 1, 0)
    
    # The heuristic value is the normalized combined value minus the penalty
    heuristic_values = normalized_combined - penalty
    
    return heuristic_values
```
