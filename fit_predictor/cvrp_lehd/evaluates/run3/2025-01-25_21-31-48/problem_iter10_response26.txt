```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_sum = torch.sum(demands)
    demand_mean = demand_sum / n
    demand_variance = torch.var(demands)
    demand_balance = (demands - demand_mean).abs() / demand_mean
    
    # Normalize demand variance by the mean to scale it properly
    demand_variance = demand_variance / demand_mean
    
    # Invert the variance and balance to make higher variance and imbalance more penalized
    demand_variance = 1 - demand_variance
    demand_balance = 1 - demand_balance
    
    # Incorporate distance into the heuristic, normalize by max distance to ensure consistency
    distance_heuristic = distance_matrix / (torch.max(distance_matrix) + 1e-8)
    
    # Combine heuristics with weighted demand, variance, and balance
    combined_heuristic = demands * distance_heuristic * demand_variance * demand_balance
    
    # Apply a penalty for edges that would lead to capacity violation
    penalty_mask = demands > 1
    penalty = -torch.max(combined_heuristic[penalty_mask]) * penalty_mask
    
    # Subtract penalty from promising edges
    combined_heuristic -= penalty
    
    # Cap the heuristics to ensure that they are positive and not too high
    cap = torch.max(combined_heuristic)
    combined_heuristic = torch.clamp(combined_heuristic, min=0, max=cap)
    
    return combined_heuristic
```
