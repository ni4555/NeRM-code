```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize distance matrix
    normalized_distance = distance_matrix / distance_matrix.max()
    
    # Normalize demands
    normalized_demand = demands / demands.sum()
    
    # Inverse of distance as a feature
    inverse_distance = 1.0 / (normalized_distance + 1e-8)  # Add a small constant to avoid division by zero
    
    # Balance distance and demand by combining features
    balanced_features = inverse_distance * normalized_demand
    
    # Use a sigmoid function to transform the features into a range between 0 and 1
    sigmoid_features = torch.sigmoid(balanced_features)
    
    return sigmoid_features
```
