```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    demand_sum = torch.sum(demands)
    demand_mean = demand_sum / n
    demand_balance = (demands - demand_mean).abs()
    
    # Normalize the demand balance by the total demand and apply a non-linear transformation to reduce outliers' influence
    demand_balance = torch.exp(-demand_balance / (0.1 * demand_sum))
    
    # Incorporate distance into the heuristic
    distance_heuristic = distance_matrix / (torch.max(distance_matrix) + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Use a weighted sum to combine heuristics
    alpha = 0.6  # A hyperparameter to control the weight of the distance heuristic
    combined_heuristic = alpha * demand_balance + (1 - alpha) * distance_heuristic
    
    # Introduce a feature that penalizes larger demand variations
    outlier_penalty = (demand_balance - demand_mean).abs() * (1 - alpha)
    
    # Apply penalties for edges that would lead to capacity violation
    penalty_mask = demands > 1
    penalty = -torch.max(combined_heuristic[penalty_mask]) * penalty_mask
    
    # Subtract penalties and outlier penalty from promising edges
    combined_heuristic -= (penalty + outlier_penalty)
    
    # Cap the heuristics to ensure that they are positive and not too high
    cap = torch.max(combined_heuristic)
    combined_heuristic = torch.clamp(combined_heuristic, min=0, max=cap)
    
    return combined_heuristic
```
