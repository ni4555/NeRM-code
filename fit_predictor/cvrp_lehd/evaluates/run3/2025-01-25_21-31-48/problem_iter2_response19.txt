```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic based on reflection, considering distance, demand, and proximity."""
    # Calculate the inverse of the distance matrix to emphasize shorter distances
    distance_matrix_inv = 1 / (distance_matrix + 1e-10)
    
    # Create a weight for the demand to emphasize higher demand nodes
    demand_weight = demands * (1 / (demands + 1e-10))
    
    # Add the demand weight to the inverse distance matrix
    weighted_distance_matrix = distance_matrix_inv * demand_weight
    
    # Create a proximity weight based on the distance from the depot
    # Nodes closer to the depot will have higher proximity weight
    proximity_weight = 1 / (distance_matrix + 1e-10)
    
    # Combine the weighted distances and proximity to get a heuristic value
    heuristic_values = weighted_distance_matrix + proximity_weight
    
    # Normalize the matrix to ensure all values are within a certain range
    max_value = heuristic_values.max()
    min_value = heuristic_values.min()
    normalized_heuristic_values = (heuristic_values - min_value) / (max_value - min_value)
    
    return normalized_heuristic_values
```
