```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)

    # Precompute the demand normalization vector
    demand_normalization = 1.0 / (1.0 - demands)

    # Iterate only over non-depot nodes and non-self edges
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                contribution = distance_matrix[i][j] - demands[j]
                # Apply demand normalization
                heuristics[i][j] = contribution * demand_normalization[j]

    # Set the edge from the depot to the first customer as positive
    heuristics[0][1] = 1.0 / total_demand

    # Clip the heuristics to avoid issues with log-sum-exp and to avoid negative values
    heuristics = torch.clamp(heuristics, min=1e-8)

    return heuristics
```
