```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the demand per unit distance
    demand_per_distance = demands / distance_matrix
    
    # Incorporate domain knowledge: lower demand per unit distance is better
    # We use negative values to indicate better edges
    heuristic_matrix = -demand_per_distance
    
    # Incorporate the distance matrix to the heuristic values
    # This adds the distance to the cost of the edge
    heuristic_matrix = heuristic_matrix + distance_matrix
    
    # Ensure that the heuristic matrix is within a specified range
    # Here we cap the minimum and maximum values of the heuristic matrix
    min_value = -1.0
    max_value = 1.0
    heuristic_matrix = torch.clamp(heuristic_matrix, min=min_value, max=max_value)
    
    return heuristic_matrix
```
