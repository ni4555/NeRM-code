```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic function combining distance and demand, with vectorization."""
    # Calculate the sum of demands to determine the average demand per node
    total_demand = demands.sum()
    average_demand = total_demand / demands.size(0)
    
    # Calculate the sum of distances from the depot to each node
    distance_sum = distance_matrix.sum(axis=1)
    
    # Calculate the heuristic values based on the average demand and the sum of distances
    # The heuristic value is the negative sum of distances divided by the average demand
    # This heuristic assumes that nodes with higher demand and closer distance are more promising
    heuristic_values = -distance_sum / average_demand
    
    # Ensure that the heuristic values are within a certain range
    # This step is to avoid having too large or too small values which may not be meaningful
    min_value, max_value = heuristic_values.min(), heuristic_values.max()
    normalized_heuristic_values = (heuristic_values - min_value) / (max_value - min_value)
    
    return normalized_heuristic_values
```
