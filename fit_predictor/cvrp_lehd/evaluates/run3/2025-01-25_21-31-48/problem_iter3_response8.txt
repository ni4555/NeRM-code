```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand per edge (from node i to node j)
    edge_demand = demands[:, None] + demands[None, :]
    
    # Calculate the "potential" score for each edge, which is the negative of the sum of demand and distance
    potential_scores = -edge_demand + distance_matrix
    
    # Normalize the potential scores by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_scores = potential_scores / total_capacity
    
    # Invert the scores to have negative values for undesirable edges and positive for promising ones
    inverted_scores = 1 - normalized_scores
    
    return inverted_scores
```
