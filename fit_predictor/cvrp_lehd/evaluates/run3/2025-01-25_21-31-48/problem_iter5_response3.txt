```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize the distance matrix
    normalized_distance = distance_matrix / torch.max(distance_matrix)
    
    # Invert the distances for a more intuitive inverse relationship
    inverted_distance = 1 - normalized_distance
    
    # Normalize the demands
    normalized_demand = demands / torch.sum(demands)
    
    # Combine inverted distance and normalized demand
    heuristic_values = inverted_distance * normalized_demand
    
    # Add some randomness to break symmetry
    random_noise = torch.rand_like(heuristic_values)
    
    # Final heuristic value, balancing distance and demand with some randomness
    final_heuristic_values = heuristic_values + random_noise
    
    return final_heuristic_values
```
