```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the potential benefit as the inverse of the distance, adjusted for demand
    # Negative distance to reflect the fact that longer distances are less beneficial
    potential_benefit = -torch.clamp(distance_matrix, min=0.01) * (1 / demands)
    
    # Normalize the potential benefit to ensure all values are within the same scale
    min_benefit = torch.min(potential_benefit)
    max_benefit = torch.max(potential_benefit)
    normalized_benefit = (potential_benefit - min_benefit) / (max_benefit - min_benefit)
    
    return normalized_benefit
```
