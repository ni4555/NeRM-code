```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    epsilon = 1e-10
    
    # Invert distances to give higher priority to shorter paths
    distance_matrix_inv = 1 / (distance_matrix + epsilon)
    
    # Weight demands inversely to emphasize high demand nodes
    demand_weight = 1 / (demands + epsilon)
    
    # Calculate the distance from each node to the depot and invert it
    depot_distance_inv = 1 / (distance_matrix[:, 0] + epsilon)
    
    # Combine the weighted distances, demand weights, and proximity bonuses
    combined_heuristic = distance_matrix_inv * demand_weight + depot_distance_inv
    
    # Normalize the heuristic values
    max_value = combined_heuristic.max()
    min_value = combined_heuristic.min()
    normalized_heuristic = (combined_heuristic - min_value) / (max_value - min_value)
    
    # Apply a negative penalty for edges with zero demand
    zero_demand_penalty = -1e10 * (demands == 0)
    normalized_heuristic += zero_demand_penalty
    
    return normalized_heuristic
```
