```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_sum = torch.sum(demands)
    demand_mean = demand_sum / n
    demand_balance = (demands - demand_mean).abs()
    demand_balance = demand_balance / demand_sum
    demand_balance = 1 - demand_balance
    
    distance_heuristic = distance_matrix / (torch.max(distance_matrix) + 1e-8)
    
    normalized_demand_balance = demand_balance * (distance_heuristic / (torch.max(distance_heuristic) + 1e-8))
    
    penalty_mask = demands > 1
    capacity_penalty = -torch.max(normalized_demand_balance[penalty_mask]) * penalty_mask
    
    combined_heuristic = normalized_demand_balance - capacity_penalty
    
    cap = torch.max(combined_heuristic)
    combined_heuristic = torch.clamp(combined_heuristic, min=0, max=cap)
    
    return combined_heuristic
```
