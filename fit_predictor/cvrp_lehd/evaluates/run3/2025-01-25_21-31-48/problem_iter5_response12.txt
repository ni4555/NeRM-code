```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize features
    normalized_distance = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Use distance inverses
    inverse_distance = 1 - normalized_distance
    
    # Balance distance and demand
    distance_demand_ratio = inverse_distance * demands
    
    # Incorporate domain knowledge
    # Assuming that nodes with high demand and low distance are more promising
    demand_weighted_distance = distance_demand_ratio * (demands / demands.sum())
    
    # Optimize computations for heuristic design
    # Using element-wise operations to avoid loops
    heuristic_matrix = -demand_weighted_distance
    
    return heuristic_matrix
```
