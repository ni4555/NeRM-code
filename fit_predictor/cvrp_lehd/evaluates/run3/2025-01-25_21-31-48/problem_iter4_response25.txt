```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    total_demand = demands[1:].sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Iterate over all possible edges except the one to the depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate the contribution to the solution, considering the demand and distance
                contribution = distance_matrix[i][j] - demands[j]
                # Normalize the contribution based on the total demand
                contribution_normalized = contribution / total_demand
                # Incentivize low distance and high contribution
                heuristics[i][j] = contribution_normalized * (1 - distance_matrix[i][j] / distance_matrix.max())
                # Apply a smooth decay to avoid sharp transitions
                heuristics[i][j] *= (1 - torch.exp(-distance_matrix[i][j] / distance_matrix.max()))
    
    return heuristics
```
