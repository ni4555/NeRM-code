```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_demand = demands.sum()
    cumulative_demand = torch.cumsum(demands, dim=0)
    max_customers_per_vehicle = (cumulative_demand / total_demand).ceil()
    
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # Iterate over all possible edges except the one to the depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate the potential contribution of this edge to the solution
                contribution = distance_matrix[i][j] - demands[j]
                # Check if the edge contributes to the solution for the current vehicle
                if demands[j] <= total_demand:
                    # Calculate the number of vehicles that can visit this customer
                    vehicles_visiting = (cumulative_demand[i] / total_demand).ceil()
                    # Increase the heuristic value based on the number of vehicles that visit this customer
                    heuristics[i][j] = contribution * vehicles_visiting
    
    # Normalize the heuristic matrix to ensure all values are within the range of the problem (0 to 1)
    max_val = heuristics.max()
    min_val = heuristics.min()
    heuristics = (heuristics - min_val) / (max_val - min_val)
    
    return heuristics
```
