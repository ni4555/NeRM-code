```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic considering demand-based features and distance-related information."""
    # Calculate the sum of all demands
    total_demand = demands.sum()
    # Calculate the relative demand of each node
    relative_demand = demands / total_demand
    # Calculate the sum of distances to each node from the depot
    distances_to_depot = distance_matrix.sum(axis=1)
    # Calculate the negative sum of distances from the depot to each node
    distances_from_depot = -distance_matrix.sum(axis=0)
    # Calculate the square of the distances
    distances_squared = distance_matrix**2
    # Combine the features in a non-linear fashion
    heuristic_values = (relative_demand.unsqueeze(1) * distances_to_depot +
                        (1 - relative_demand.unsqueeze(1)) * distances_from_depot +
                        (relative_demand.unsqueeze(1) * distances_squared))
    return heuristic_values
```
