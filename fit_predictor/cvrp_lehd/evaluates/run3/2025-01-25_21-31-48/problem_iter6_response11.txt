```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize features and use distance inverses
    normalized_distance = 1 / (distance_matrix + 1e-8)  # Adding a small constant to avoid division by zero
    
    # Emphasize larger demands
    demand_normalized = (demands / demands.sum()) ** 2
    
    # Combine normalized distance and demand
    combined = normalized_distance * demand_normalized
    
    # Incorporate a penalty for edges that would lead to capacity violation
    penalty_mask = demands > 1
    penalty = -torch.max(combined[penalty_mask]) * penalty_mask
    
    # Subtract penalty from promising edges
    combined -= penalty
    
    # Cap the heuristics to ensure that they are positive and not too high
    cap = torch.max(combined)
    combined = torch.clamp(combined, min=0, max=cap)
    
    return combined
```
