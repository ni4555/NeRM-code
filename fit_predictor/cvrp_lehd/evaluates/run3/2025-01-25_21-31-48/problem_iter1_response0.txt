```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the cumulative demand from the depot to each node
    cumulative_demand = torch.cumsum(demands, dim=0)
    # Calculate the cumulative distance from the depot to each node
    cumulative_distance = torch.cumsum(distance_matrix[0], dim=0)
    # Calculate the cost of visiting each node from the depot
    cost_to_visit = cumulative_demand * cumulative_distance
    # Normalize the cost by the total vehicle capacity
    normalized_cost = cost_to_visit / demands.sum()
    # Create a matrix where the values are the negative of the normalized cost
    # This will give us a matrix with negative values for promising edges
    return -normalized_cost
```
