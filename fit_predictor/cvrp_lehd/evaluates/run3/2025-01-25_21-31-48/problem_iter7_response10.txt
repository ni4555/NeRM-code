```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the distance to the depot for each customer
    distance_to_depot = distance_matrix[:, 0]
    
    # Calculate the total demand of the nodes
    total_demand = demands.sum()
    
    # Normalize the distance matrix by the total demand to balance the importance of distance
    normalized_distance = distance_matrix / total_demand
    
    # Invert the normalized distance matrix to prioritize shorter distances
    inverted_distance = 1 - normalized_distance
    
    # Incorporate the demand into the heuristic
    demand_weighted_distance = inverted_distance * demands
    
    # Normalize the demand-weighted distance to ensure positive values
    max_demand_weighted_distance = demand_weighted_distance.max()
    normalized_demand_weighted_distance = demand_weighted_distance / max_demand_weighted_distance
    
    # Return the heuristic matrix
    return normalized_demand_weighted_distance
```
