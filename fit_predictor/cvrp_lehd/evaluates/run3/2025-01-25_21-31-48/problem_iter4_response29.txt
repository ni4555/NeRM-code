```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize the demand by dividing with the maximum demand to scale the demand values
    normalized_demands = demands / demands.max()
    
    # Use the sum of distance and demand to create a combined heuristic value
    combined_heuristic = distance_matrix + normalized_demands
    
    # Scale the combined heuristic values to be between 0 and 1
    min_combined_heuristic = combined_heuristic.min()
    max_combined_heuristic = combined_heuristic.max()
    scaled_combined_heuristic = (combined_heuristic - min_combined_heuristic) / (max_combined_heuristic - min_combined_heuristic)
    
    # Invert the scaled heuristic values to have negative values for undesirable edges and positive values for promising ones
    heuristics = 1 - scaled_combined_heuristic
    
    return heuristics
```
