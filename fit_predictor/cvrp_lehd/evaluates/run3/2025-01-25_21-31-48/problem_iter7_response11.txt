```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_threshold = demands.sum() / n  # Average demand to normalize demand for each customer
    
    # Incorporate demand
    demand_term = torch.clamp(-demands * demand_threshold, min=-1.0)
    
    # Balance distance by using the reciprocal of the distance
    distance_balance = 1.0 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero
    
    # Normalize the heuristics by the total demand to encourage balanced loading
    normalized_term = demand_term * distance_balance
    
    # Invert the distances for edges, to encourage shorter routes
    inverted_distance = 1.0 / (distance_matrix + 1e-6)
    
    # Combine the terms to create a promising heuristic
    combined_heuristic = normalized_term + inverted_distance
    
    return combined_heuristic
```
