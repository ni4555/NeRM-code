```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate a combined heuristic value that is a function of distance and demand
    combined_heuristic = distance_matrix * (1 - demands) + demands
    
    # Adjust the values to ensure that the higher the combined heuristic, the more promising the edge
    max_combined_heuristic = combined_heuristic.max()
    min_combined_heuristic = combined_heuristic.min()
    adjusted_combined_heuristic = (combined_heuristic - min_combined_heuristic) / (max_combined_heuristic - min_combined_heuristic)
    
    # Invert the values to have negative values for undesirable edges and positive values for promising ones
    heuristics = 1 - adjusted_combined_heuristic
    
    return heuristics
```
