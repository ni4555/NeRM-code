```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """Improved heuristic by combining demand and distance."""
    # Calculate the sum of demands and the sum of distances from the depot
    total_demand = demands.sum()
    sum_distances = distance_matrix.sum(dim=1)
    
    # Normalize the sum of distances by the total demand
    normalized_distances = sum_distances / total_demand
    
    # Calculate the potential utility of each edge
    # Promising edges will have lower normalized distance and lower demand
    utility = -normalized_distances - demands
    
    # Ensure that all values are in the range of the input matrix
    return torch.clamp(utility, min=-torch.max(distance_matrix), max=torch.max(distance_matrix))
```
