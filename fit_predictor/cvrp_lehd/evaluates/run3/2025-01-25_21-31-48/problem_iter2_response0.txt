```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """A heuristic that uses both demand-based penalties and distance-based incentives."""
    total_demand = demands.sum()
    weights = demands / total_demand
    demand_penalties = -demands * (1 - weights)
    distance_incentives = distance_matrix - distance_matrix.sum(axis=1).unsqueeze(1) * weights
    heuristics = demand_penalties + distance_incentives
    return heuristics
```
