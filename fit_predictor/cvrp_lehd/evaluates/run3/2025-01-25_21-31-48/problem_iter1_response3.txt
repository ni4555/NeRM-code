```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the maximum demand that can be carried by a vehicle
    max_demand = demands.max()
    
    # Calculate the cumulative demand along each edge
    cumulative_demand = torch.cumsum(demands, dim=0)
    
    # Calculate the difference between the cumulative demand and the vehicle capacity
    demand_excess = cumulative_demand - max_demand
    
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    
    # For each edge, if the demand excess is zero or negative, it's a promising edge
    # Otherwise, it's an undesirable edge
    heuristics = torch.where(demand_excess <= 0, -demand_excess, torch.zeros_like(demand_excess))
    
    return heuristics
```
