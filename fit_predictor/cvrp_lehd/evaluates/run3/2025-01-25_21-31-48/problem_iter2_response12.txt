```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """An improved heuristic based on the sum of the distance, weighted demand, and a penalty for high demands."""
    total_demand = demands.sum()
    weights = demands / total_demand
    # Calculate the weighted demand
    weighted_demand = distance_matrix * weights
    # Calculate the penalty for high demands
    demand_penalty = (demands - total_demand / len(demands)) * (demands > 0)
    # Combine the weighted demand and the penalty into the heuristic
    heuristic_values = weighted_demand + demand_penalty
    return heuristic_values
```
