```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    total_demand = demands[1:].sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    # Normalize demands to account for total vehicle capacity
    normalized_demands = demands / total_demand
    
    # Iterate over all possible edges except the one to the depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate the contribution to the solution, considering the demand and distance
                contribution = distance_matrix[i][j] - demands[j]
                # Normalize the contribution based on the total demand
                contribution_normalized = contribution / total_demand
                # Incentivize demand balance
                demand_balance = normalized_demands[j]
                # Incentivize distance synergy
                distance_synergy = 1 - distance_matrix[i][j] / distance_matrix.max()
                # Apply a smoothing function to avoid abrupt changes
                smooth_decay = torch.exp(-distance_matrix[i][j] / distance_matrix.max())
                # Combine the factors with appropriate weights
                heuristics[i][j] = contribution_normalized * demand_balance * distance_synergy * smooth_decay
    
    return heuristics
```
