```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    total_demand = demands.sum()
    heuristics = torch.zeros_like(distance_matrix)
    distance_matrix_inv = 1 / (distance_matrix + 1e-10)
    distance_to_depot = distance_matrix_inv[:, depot]
    # Normalize demands by total demand to make the scale of demands consistent with distances
    normalized_demands = demands / total_demand
    # Calculate the potential heuristic value as a combination of inverse distance, normalized demand, and normalized distance to depot
    heuristics = distance_matrix_inv - normalized_demands * distance_to_depot
    return heuristics
```
