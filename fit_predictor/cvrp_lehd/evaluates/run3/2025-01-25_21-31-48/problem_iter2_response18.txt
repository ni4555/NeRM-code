```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    # Calculate the sum of demands for all nodes
    total_demand = demands.sum()
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    # Calculate the total distance from the depot to all other nodes
    distances_from_depot = distance_matrix[depot, :]
    # Calculate the total demand from the depot to all other nodes
    demands_from_depot = demands[1:]
    # Calculate the potential contribution of each edge
    contributions = distances_from_depot - demands_from_depot
    # Normalize the contributions based on the total demand
    heuristics[1:, :] = contributions / total_demand
    heuristics[:, 1:] = heuristics[1:, :]
    return heuristics
```
