```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    total_demand = demands[1:].sum()
    heuristics = torch.zeros_like(distance_matrix)
    
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                contribution = distance_matrix[i][j] - demands[j]
                contribution_normalized = contribution / total_demand
                distance_weight = 1 - distance_matrix[i][j] / distance_matrix.max()
                demand_weight = (demands[j] / total_demand) ** 2
                smooth_decay = torch.exp(-distance_matrix[i][j] / distance_matrix.max())
                weight = contribution_normalized * distance_weight * demand_weight * smooth_decay
                heuristics[i][j] = weight
                heuristics[j][i] = weight
    
    return heuristics
```
