```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    demand_sum = torch.sum(demands)
    demand_mean = demand_sum / n
    demand_balance = (demands - demand_mean).abs()
    
    # Normalize the demand balance by the total demand and invert it
    demand_balance = demand_balance / demand_sum
    demand_balance = 1 - demand_balance
    
    # Incorporate distance into the heuristic
    distance_heuristic = distance_matrix / (torch.max(distance_matrix) + 1e-8)
    
    # Combine heuristics and adapt dynamically
    combined_heuristic = demand_balance * distance_heuristic * torch.sqrt(demands)  # Adaptation factor: square root of demands
    
    # Calculate potential capacity violations and apply a dynamic penalty
    current_capacity = torch.zeros(n)
    penalties = torch.zeros(n)
    for i in range(1, n):
        for j in range(1, n):
            if demands[j] + current_capacity[j] <= 1:  # No capacity violation
                current_capacity[j] += demands[j]
            else:
                penalties[i] = -torch.max(combined_heuristic[i])  # Apply penalty
                current_capacity[j] = 0  # Reset current capacity for node j
    combined_heuristic -= penalties
    
    # Cap the heuristics to ensure they are positive
    cap = torch.max(combined_heuristic)
    combined_heuristic = torch.clamp(combined_heuristic, min=0, max=cap)
    
    # Add the penalty for exceeding capacity as a negative value for those edges
    combined_heuristic += penalties * (-1)
    
    return combined_heuristic
```
