```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    # Calculate the sum of demands for all nodes
    total_demand = demands.sum()
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    # Calculate the inverse of the distance matrix to emphasize shorter distances
    distance_matrix_inv = 1 / (distance_matrix + 1e-10)  # Add a small value to avoid division by zero
    # Calculate the distance from each node to the depot
    distance_to_depot = distance_matrix_inv[:, depot]
    # Calculate the potential contribution of each edge to the solution
    contribution = distance_matrix - demands
    # Normalize the contribution based on the total demand and distance to depot
    heuristics = contribution / (total_demand * distance_to_depot)
    return heuristics
```
