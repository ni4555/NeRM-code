```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand excluding the depot
    total_demand = demands.sum()
    # Normalize the demand by the total vehicle capacity
    normalized_demand = demands / total_demand
    # Calculate the difference between the demand and the normalized demand
    demand_diff = demands - normalized_demand
    # Incorporate distance with an exponential decay
    distance_decay = torch.exp(-distance_matrix)
    # Apply a non-linear transformation using the Huber loss to balance demand and distance
    heuristics = torch.clamp(demand_diff * distance_decay, min=-1, max=1)
    return heuristics
```
