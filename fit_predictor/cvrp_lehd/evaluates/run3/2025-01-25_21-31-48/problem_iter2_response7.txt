```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Extract the distance to the depot and the demand for the depot
    depot_distance = distance_matrix[:, 0]
    depot_demand = demands[0]
    # Calculate the total demand excluding the depot
    total_demand = demands.sum() - depot_demand
    # Initialize the heuristics matrix with zeros
    heuristics = torch.zeros_like(distance_matrix)
    # Iterate over all possible edges except the one to the depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate the difference in demand from the current node to the target node
                demand_diff = demands[j] - demands[i]
                # Calculate the potential contribution of this edge to the solution
                contribution = distance_matrix[i][j] - demand_diff
                # Normalize the contribution based on the total demand
                heuristics[i][j] = contribution / total_demand
                # Subtract the distance to the depot and the demand at the target node
                heuristics[i][j] -= (depot_distance[j] - depot_demand)
    return heuristics
```
