```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    depot = 0
    # Calculate the sum of demands for all nodes
    total_demand = demands.sum()
    # Calculate the distance from the depot to all nodes
    depot_distances = distance_matrix[depot, :].unsqueeze(1)
    # Calculate the sum of distances from the depot to all nodes except the depot
    sum_depot_distances = depot_distances - distance_matrix.sum(axis=1, keepdim=True)
    # Calculate the heuristics based on the sum of distances and demands
    heuristics = sum_depot_distances - demands.unsqueeze(0)
    # Normalize the heuristics by the total demand
    heuristics /= total_demand
    return heuristics
```
