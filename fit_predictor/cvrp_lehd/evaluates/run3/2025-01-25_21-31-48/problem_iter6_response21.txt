```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Calculate the total demand excluding the depot
    total_demand = demands.sum()
    # Normalize the demand by the total vehicle capacity
    normalized_demand = demands / total_demand
    # Calculate the absolute difference between the demand and the normalized demand
    demand_diff = torch.abs(demands - normalized_demand)
    # Incorporate distance with an exponential decay
    distance_decay = torch.exp(-distance_matrix)
    # Use a logarithmic transformation for non-linear effect and to handle zero distances
    log_distance = torch.log(distance_decay)
    # Apply a non-linear transformation using a sigmoid function for a smooth transition
    heuristics = torch.sigmoid(2 * demand_diff * log_distance)
    return heuristics
```
