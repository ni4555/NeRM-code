```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize distances
    min_distance = distance_matrix.min()
    normalized_distances = distance_matrix / (min_distance + 1e-10)
    
    # Inverse normalize to enhance the importance of shorter distances
    normalized_distances = 1 / normalized_distances
    
    # Inverse demand to enhance the importance of higher demands
    inverse_demands = 1 / (demands + 1e-10)
    
    # Combine the distance and demand inverses to form the heuristic
    heuristic_values = normalized_distances * inverse_demands
    
    # Normalize the heuristic values by their maximum to ensure they are comparable
    max_heuristic = heuristic_values.max()
    normalized_heuristic_values = heuristic_values / max_heuristic
    
    return normalized_heuristic_values
```
