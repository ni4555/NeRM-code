```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    n = distance_matrix.shape[0]
    demand_sum = torch.sum(demands)
    demand_mean = demand_sum / n
    demand_balance = (demands - demand_mean).abs()
    
    # Normalize the demand balance by the total demand
    demand_balance = demand_balance / demand_sum
    
    # Invert the balance to favor balanced demands
    demand_balance = 1 - demand_balance
    
    # Incorporate distance into the heuristic, penalize long distances
    distance_heuristic = 1 / (distance_matrix / (torch.max(distance_matrix) + 1e-8))  # Adding a small constant to avoid division by zero
    
    # Combine heuristics, weight demand balance more than distance
    combined_heuristic = demand_balance * 2 + distance_heuristic
    
    # Dynamic penalty based on the demand deviation
    penalty = -torch.max(combined_heuristic[torch.abs(demands - demand_mean) > 0.1]) * (torch.abs(demands - demand_mean) > 0.1)
    
    # Subtract penalty from promising edges
    combined_heuristic -= penalty
    
    # Cap the heuristics to ensure that they are positive and not too high
    cap = torch.max(combined_heuristic)
    combined_heuristic = torch.clamp(combined_heuristic, min=0, max=cap)
    
    return combined_heuristic
```
