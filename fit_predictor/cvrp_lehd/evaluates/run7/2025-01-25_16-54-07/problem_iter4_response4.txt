```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    # Demand normalization
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Evaluate edges based on cumulative demand and additional criteria
    # Here, we consider the distance and the additional demand impact
    edge_evaluation = distance_matrix + (cumulative_demand * 0.1)  # 0.1 is a weight factor
    
    # 4. Optimization Strategies
    # Use a dynamic threshold based on the 90th percentile of the edge evaluation
    edge_evaluation_percentile = torch.quantile(edge_evaluation, 0.9)
    dynamic_threshold = edge_evaluation_percentile * 0.8  # Threshold is set to 80% of the 90th percentile
    
    # Determine the promise of each edge based on the dynamic threshold
    edge_promise = torch.where(edge_evaluation < dynamic_threshold, -1.0, 1.0)
    
    return edge_promise
```
