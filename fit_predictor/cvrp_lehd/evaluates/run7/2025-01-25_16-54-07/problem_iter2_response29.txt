```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Define a clear and objective evaluation method for edges
    edge_evaluation = (1 / (1 + edge_capacity_impact)) * distance_matrix
    
    # 4. Optimization Strategies
    # Introduce a gradient ascent-like approach to enhance promising edges
    gradient_ascent = torch.where(edge_evaluation > 0, edge_evaluation, 0.0)
    edge_evaluation += gradient_ascent
    
    # Introduce a long-distance penalty
    long_distance_penalty = torch.where(distance_matrix > 100, -2.0, 0.0)
    edge_evaluation += long_distance_penalty
    
    # Normalize the evaluation to ensure a balanced approach
    edge_evaluation = torch.clamp(edge_evaluation, min=0)  # Ensure no negative values
    edge_promise = edge_evaluation / edge_evaluation.max()
    
    return edge_promise
```
