```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * normalized_demands
    
    # 3. Clear Edge Evaluation
    # Evaluate edges based on the direct impact on capacity
    edge_evaluation = -edge_capacity_impact
    
    # 4. Optimization Strategies
    # Introduce a demand-based threshold to prioritize feasible edges
    demand_threshold = demands.mean()
    edge_promise = torch.where(edge_evaluation < demand_threshold, 1.0, -1.0)
    
    return edge_promise
```
