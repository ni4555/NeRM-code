```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Modify the evaluation to take into account the cumulative demand but also the direct distance
    edge_evaluation = distance_matrix * (1 - cumulative_demand)
    
    # 4. Optimization Strategies
    # Adjust the threshold based on the cumulative demand and balance between distance and load
    threshold = (1 / (1 + total_demand))  # Adjust threshold based on problem specifics
    edge_promise = torch.where(edge_evaluation < threshold, -1.0, 1.0)
    
    # Further refine the promise by increasing the weight of edges with lower cumulative demand
    edge_promise *= (1 + (cumulative_demand / (1 + cumulative_demand)))
    
    return edge_promise
```
