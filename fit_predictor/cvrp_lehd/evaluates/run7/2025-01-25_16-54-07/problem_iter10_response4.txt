```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use a weighted sum of distance and normalized demand
    edge_evaluation = distance_matrix + cumulative_demand
    
    # 4. Optimization Strategies
    # Integrate cumulative demand directly and dynamically adapt thresholds
    max_cumulative_demand = cumulative_demand.max()
    edge_promise = torch.where(edge_evaluation < max_cumulative_demand, -1.0, 1.0)
    
    # Further refine the promise by applying a capacity-based adjustment
    capacity_adjustment = 1 - (edge_capacity_impact / (distance_matrix + 1))
    edge_promise *= capacity_adjustment
    
    # Balance between the evaluation and the demand by scaling the cumulative demand
    edge_promise *= (1 + (cumulative_demand / (cumulative_demand + 1)))
    
    return edge_promise
```
