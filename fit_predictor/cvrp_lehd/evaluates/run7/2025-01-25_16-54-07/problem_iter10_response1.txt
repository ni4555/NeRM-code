```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use a combination of distance and demand impact with a penalty for high cumulative demand
    edge_evaluation = distance_matrix + (edge_capacity_impact / (1 + edge_capacity_impact))
    edge_evaluation = torch.where(edge_capacity_impact > 1, edge_evaluation * 0.9, edge_evaluation)
    
    # 4. Optimization Strategies
    # Dynamic threshold based on edge evaluation to prioritize
    dynamic_threshold = edge_evaluation.mean()
    
    # Apply thresholds to differentiate between promising and undesirable edges
    edge_promise = torch.where(edge_evaluation < dynamic_threshold, -1.0, 1.0)
    
    # Apply additional penalties
    penalty_for_high_demand = torch.where(edge_capacity_impact > 1.1, edge_promise * 0.8, edge_promise)
    penalty_for_high_capacity = torch.where(edge_capacity_impact > 1, penalty_for_high_demand * 0.9, penalty_for_high_demand)
    
    # Further refine the promise by reducing the impact of higher distances
    edge_promise *= (1 - (distance_matrix * (1 - penalty_for_high_capacity)) / (1 + distance_matrix * (1 - penalty_for_high_capacity)))
    
    return edge_promise
```
