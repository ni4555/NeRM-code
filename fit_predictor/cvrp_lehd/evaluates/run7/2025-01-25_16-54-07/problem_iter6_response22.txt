```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use a combination of distance and demand impact with a penalty for high cumulative demand
    edge_evaluation = distance_matrix + (edge_capacity_impact / (1 + edge_capacity_impact))
    edge_evaluation = torch.where(edge_capacity_impact > 1, edge_evaluation * 0.9, edge_evaluation)
    
    # 4. Optimization Strategies
    # Dynamic threshold based on edge evaluation to prioritize
    dynamic_threshold = edge_evaluation.mean()
    
    # Mutation: Introduce a demand and capacity balancing factor
    balancing_factor = (demands / total_demand).unsqueeze(1) * cumulative_demand.unsqueeze(0)
    
    # Mutation: Further optimize the threshold based on the balancing factor
    dynamic_threshold = torch.clamp(dynamic_threshold - torch.max(balancing_factor), min=0.1)
    
    # Mutation: Adjust the evaluation based on the dynamic threshold and balancing factor
    edge_promise = torch.where(edge_evaluation < dynamic_threshold, -1.0, 1.0)
    edge_promise = edge_promise - torch.abs(balancing_factor)
    
    # Mutation: Optimize demand integration
    edge_promise *= (1 - cumulative_demand)
    
    # Mutation: Ensure the promise has a more pronounced difference between desirable and undesirable edges
    edge_promise = torch.clamp(edge_promise, min=-1.0, max=1.0)
    
    return edge_promise
```
