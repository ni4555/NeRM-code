```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    # Demand normalization
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Incorporate demand-centric metrics in edge evaluation
    # Non-linear distance measure reflecting demand intensity
    edge_evaluation = torch.sqrt((distance_matrix ** 2) + (cumulative_demand ** 2))
    edge_evaluation = torch.pow(edge_evaluation, 0.5)  # Square root to make it a non-linear measure
    
    # 4. Optimization Strategies
    # Dynamic threshold based on problem-specific characteristics
    # Use edge evaluation values to determine edge promise
    threshold = edge_evaluation.mean()  # Use the mean as a dynamic threshold
    edge_promise = torch.where(edge_evaluation < threshold, edge_evaluation, -edge_evaluation)
    
    return edge_promise
```
