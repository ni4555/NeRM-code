```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use cumulative demand as the evaluation criterion directly
    edge_evaluation = edge_capacity_impact
    
    # 4. Optimization Strategies
    # Dynamic thresholding based on vehicle capacity and cumulative demand
    vehicle_capacity = demands.sum()  # Assuming that the vehicle capacity equals the total demand
    dynamic_threshold = vehicle_capacity * 0.5  # Threshold is half of the vehicle capacity
    edge_promise = torch.where(edge_evaluation < dynamic_threshold, -1.0, 1.0)
    
    # Further refine the promise by reducing the impact of higher demands
    edge_promise *= (1 - edge_capacity_impact / (1 + edge_capacity_impact))
    
    # Additional optimization: Reward lightly loaded edges
    light_load_bonus = torch.where(edge_capacity_impact < 0.2, 1.5, 0.0)
    edge_promise += light_load_bonus
    
    # Additional optimization: Penalize heavily loaded edges
    heavy_load_penalty = torch.where(edge_capacity_impact > 0.8, -2.0, 0.0)
    edge_promise += heavy_load_penalty
    
    return edge_promise
```
