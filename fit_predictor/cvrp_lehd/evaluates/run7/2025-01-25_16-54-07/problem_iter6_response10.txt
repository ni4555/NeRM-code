```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use a combination of distance and demand impact with a penalty for high cumulative demand
    edge_evaluation = distance_matrix + (edge_capacity_impact / (1 + edge_capacity_impact))
    edge_evaluation = torch.where(edge_capacity_impact > 1, edge_evaluation * 0.9, edge_evaluation)
    
    # 4. Optimization Strategies
    # Dynamic threshold based on edge evaluation to prioritize
    dynamic_threshold = edge_evaluation.mean()
    
    # Balance demand with capacity; apply penalties and rewards intuitively
    # Prioritize edges that are closer to the dynamic threshold
    edge_promise = torch.relu(edge_evaluation - dynamic_threshold) / (1.0 + torch.abs(dynamic_threshold))
    
    # Apply a penalty for complexity by reducing the value of edges with high cumulative demand
    edge_promise = edge_promise - torch.where(cumulative_demand > 1, cumulative_demand - 1, 0)
    
    return edge_promise
```
