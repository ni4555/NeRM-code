{
  "generation": 0,
  "description": "Assisting in solving Capacitated Vehicle Routing Problem (CVRP) with some prior heuristics. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Assuming the total vehicle capacity is normalized to 1 in the demand vector\n    # Compute the cumulative demand\n    cumulative_demand = torch.cumsum(demands, dim=0)\n    \n    # Create a mask where a value is positive if the cumulative demand at that node\n    # is less than the vehicle capacity, and negative otherwise\n    mask = cumulative_demand < 1\n    \n    # Use the mask to create a new distance matrix where we subtract the distance\n    # if the edge is promising (cumulative demand is less than capacity), and add\n    # a large negative value if it's undesirable (cumulative demand is greater than\n    # capacity). The subtraction and addition of a large negative value helps to\n    # prioritize edges that are within the capacity constraint.\n    heuristics_matrix = torch.where(mask, -distance_matrix, torch.full_like(distance_matrix, -1e6))\n    \n    return heuristics_matrix",
      "fitness": 21.401277542114258,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_7.txt",
      "code_file": "coevolve\\generation_0\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total demand\n    total_demand = demands.sum()\n\n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / total_demand\n\n    # Calculate the potential cost of each edge\n    # The heuristic will be negative for edges that are not promising\n    # and positive for edges that are promising\n    heuristics = -distance_matrix * normalized_demands.expand_as(distance_matrix)\n    \n    # Add a small constant to avoid division by zero\n    epsilon = 1e-8\n    heuristics = heuristics / (heuristics.abs() + epsilon)\n\n    return heuristics",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_5.txt",
      "code_file": "coevolve\\generation_0\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure that the distance matrix and demands are on the same device\n    demands = demands.to(distance_matrix.device)\n    \n    # The cost matrix initialized with a large negative value for undesirable edges\n    cost_matrix = torch.full_like(distance_matrix, fill_value=-float('inf'))\n    \n    # The cost for an edge (i, j) is the sum of the distance and the demands of the two nodes\n    cost_matrix = distance_matrix + demands + demands[:, None]\n    \n    # We use a small value to represent the capacity of the vehicle (for comparison)\n    vehicle_capacity = demands.sum()\n    \n    # Find the edges where the total demand does not exceed the vehicle capacity\n    valid_edges = (cost_matrix < vehicle_capacity)\n    \n    # We can also introduce a small penalty for edges that go to the depot to prioritize leaving the depot\n    depot_penalty = torch.full_like(distance_matrix, fill_value=-0.1)\n    cost_matrix = cost_matrix + depot_penalty\n    \n    # Set the cost for valid edges to 0\n    cost_matrix[valid_edges] = 0\n    \n    return cost_matrix",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_9.txt",
      "code_file": "coevolve\\generation_0\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Initialize a tensor with zeros to hold the heuristic values\n    heuristics = torch.zeros_like(distance_matrix)\n\n    # Normalize demands to be within the range [0, 1]\n    demands_normalized = demands / demands.sum()\n\n    # Calculate the negative of the sum of demands for each edge\n    negative_demand_sum = 1 - demands_normalized\n\n    # Add the negative demand sum to the heuristic values for each edge\n    heuristics += negative_demand_sum\n\n    # Adjust the heuristic values based on the distance matrix\n    # The idea here is to add a larger negative value for larger distances\n    # which makes longer distances less promising.\n    heuristics -= distance_matrix\n\n    return heuristics",
      "fitness": 21.591846466064453,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_11.txt",
      "code_file": "coevolve\\generation_0\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Add a small positive value to demands to avoid division by zero\n    epsilon = torch.finfo(torch.float32).eps\n    adjusted_demands = demands + epsilon\n    \n    # Calculate the heuristic values, which are inversely proportional to the demand\n    # Here we use a simple inverse demand heuristic (1 / demand)\n    # We also subtract the distance to ensure the heuristic is positive for short edges\n    heuristics = 1 / adjusted_demands - distance_matrix\n    \n    # Replace negative values with zero, as we want only positive scores\n    heuristics = torch.clamp(heuristics, min=0)\n    \n    return heuristics",
      "fitness": 21.617759704589844,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_10.txt",
      "code_file": "coevolve\\generation_0\\code_10.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure the demands vector is broadcastable to the shape of distance_matrix\n    demands = demands.view(-1, 1)\n    \n    # Calculate the cumulative demand along each row (from the start node)\n    cumulative_demand = torch.cumsum(demands, dim=1)\n    \n    # Calculate the cumulative demand along each column (to the start node)\n    cumulative_demand_t = torch.cumsum(demands, dim=0).transpose(0, 1)\n    \n    # Calculate the remaining capacity for each vehicle along each edge\n    remaining_capacity = (1 - cumulative_demand) * (1 - cumulative_demand_t)\n    \n    # Assign a heuristic value to each edge based on the remaining capacity\n    # We use a positive heuristic for promising edges and negative for undesirable ones\n    # Promising edges have high remaining capacity, undesirable edges have low or negative remaining capacity\n    heuristics = remaining_capacity - 1  # Shift the scale to be positive for promising edges\n    \n    # Handle the diagonal elements (edges to and from the start node) by setting them to a very low value\n    # This prevents the start node from being included in the solution\n    heuristics.diag().fill_(float('-inf'))\n    \n    return heuristics",
      "fitness": 108.8589096069336,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_0\\stdout_1.txt",
      "code_file": "coevolve\\generation_0\\code_1.py"
    }
  ]
}