{
  "generation": 2,
  "description": "The problem addresses a refined variant of the Capacitated Vehicle Routing Problem, known as the Adaptive Real-Time Enhanced Capacitated Vehicle Routing Problem (ARTeCVRP). This variant requires a robust solution approach for optimizing the allocation of a fleet of vehicles across a diverse set of customers with fluctuating demands. The solution must incorporate an advanced combination of heuristic and metaheuristic techniques, including a dynamic greedy algorithm for initial routing, followed by a hybrid evolutionary algorithm with genetic and differential evolution components for iterative improvement. The focus is on real-time adaptation through a real-time feedback loop that continuously evaluates and adjusts vehicle assignments and routes based on evolving customer demands and vehicle capacities, ensuring optimal performance while managing computational complexity.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Create a matrix of negative values for all edges\n    heuristics_matrix = -torch.ones_like(distance_matrix)\n    \n    # Calculate the potential value for each edge\n    # Potential value = distance to customer * demand ratio\n    potential_values = distance_matrix * normalized_demands\n    \n    # Set the potential values into the heuristics matrix\n    heuristics_matrix += potential_values\n    \n    return heuristics_matrix",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_0.txt",
      "code_file": "coevolve\\generation_2\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the cost for each edge based on distance and demand\n    edge_costs = distance_matrix * normalized_demands\n\n    # Apply a simple heuristic: the lower the cost, the more promising the edge\n    # We use a negative value for undesirable edges to ensure they are less likely to be selected\n    heuristics = -edge_costs\n\n    return heuristics",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_9.txt",
      "code_file": "coevolve\\generation_2\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    demands_sum = demands.sum()\n    normalized_demands = demands / demands_sum\n    cost_matrix = distance_matrix.clone()\n    \n    # Add a large penalty for edges with demand of zero after normalization\n    penalty = 1e5 * (1 - normalized_demands)\n    cost_matrix[penalty == 1] = torch.inf\n    \n    # Calculate the heuristic based on the normalized demands\n    heuristics = cost_matrix * normalized_demands\n    \n    return heuristics",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_11.txt",
      "code_file": "coevolve\\generation_2\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total demand\n    total_demand = demands.sum().item()\n    \n    # Normalize the demand vector by the total vehicle capacity\n    normalized_demands = demands / total_demand\n    \n    # Compute the sum of products of normalized demands and distance matrix\n    heuristics = normalized_demands.view(-1, 1) * distance_matrix\n    \n    # Add negative values to make undesirable edges less promising\n    undesirable_edges = distance_matrix < 0\n    heuristics[undesirable_edges] = -1 * torch.abs(heuristics[undesirable_edges])\n    \n    return heuristics",
      "fitness": 21.473827362060547,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_3.txt",
      "code_file": "coevolve\\generation_2\\code_3.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the normalized demands\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the potential of each edge based on demand and distance\n    # We use a simple heuristic where the potential is inversely proportional to the distance\n    # and also takes into account the normalized demand of the destination node.\n    # Negative values are assigned to edges with higher distance or lower demand.\n    potential = -distance_matrix + normalized_demands.unsqueeze(1) * distance_matrix\n    \n    return potential",
      "fitness": 21.58147621154785,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_1.txt",
      "code_file": "coevolve\\generation_2\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the maximum distance in the matrix to use as a reference for normalization\n    max_distance = torch.max(distance_matrix)\n    \n    # Normalize the distance matrix based on the maximum distance\n    normalized_distance_matrix = distance_matrix / max_distance\n    \n    # Calculate the sum of normalized demands to use for further normalization\n    sum_normalized_demands = torch.sum(demands)\n    \n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / sum_normalized_demands\n    \n    # Calculate the potential utility of each edge as a combination of distance and demand\n    # Here we use a simple heuristic that gives higher utility to edges with lower distance\n    # and lower normalized demand.\n    # Negative values are used for undesirable edges, and positive values for promising ones.\n    utility_matrix = -normalized_distance_matrix + normalized_demands\n    \n    # Optionally, you can add more sophisticated heuristics here\n    # For example, you could consider vehicle capacity constraints by adding a term\n    # that penalizes edges that would violate the capacity constraint, but this\n    # depends on the specifics of the problem.\n\n    return utility_matrix",
      "fitness": 21.589853286743164,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_4.txt",
      "code_file": "coevolve\\generation_2\\code_4.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    demand_threshold = (demands / total_capacity).sum() / 2  # A simple heuristic for the threshold\n    \n    # Calculate the heuristics\n    heuristics = -distance_matrix + demands * demand_threshold\n    \n    # Normalize the heuristics to ensure that all values are between -1 and 1\n    min_val = heuristics.min()\n    max_val = heuristics.max()\n    heuristics = (heuristics - min_val) / (max_val - min_val)\n    \n    return heuristics",
      "fitness": 21.603618621826172,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_2\\stdout_6.txt",
      "code_file": "coevolve\\generation_2\\code_6.py"
    }
  ]
}