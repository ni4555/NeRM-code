```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use a combination of distance and demand impact with penalties for high cumulative demand
    edge_evaluation = distance_matrix + (edge_capacity_impact / (1 + edge_capacity_impact))
    edge_evaluation = torch.where(edge_capacity_impact > 1, edge_evaluation * 0.9, edge_evaluation)
    edge_evaluation = torch.where(cumulative_demand > 1, edge_evaluation * 0.5, edge_evaluation)
    
    # 4. Optimization Strategies
    # Dynamic threshold based on edge evaluation to prioritize
    dynamic_threshold = edge_evaluation.mean()
    edge_promise = torch.where(edge_evaluation < dynamic_threshold, -1.0, 1.0)
    
    # Mutation for improved balance between distance and demand
    edge_promise *= (1 - edge_promise) * 0.1
    
    # Mutation for improved balance between high demand impact and distance
    edge_promise = torch.where(edge_evaluation < 0.5, edge_promise * 0.5, edge_promise)
    
    # Introduce a demand-based penalty for nodes with high demand
    demand_penalty = normalized_demands * 0.1
    edge_promise -= demand_penalty
    
    # Introduce a capacity-based prioritization that rewards lower capacity impact
    capacity_reward = 1 - (edge_capacity_impact / (edge_capacity_impact + 1))
    edge_promise += capacity_reward
    
    # Normalize the edge promise to ensure a balanced approach
    edge_promise = torch.clamp(edge_promise, min=-2.0, max=2.0)
    
    return edge_promise
```
