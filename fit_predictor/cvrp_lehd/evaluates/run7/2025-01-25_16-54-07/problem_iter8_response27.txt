```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use a combination of distance and demand impact with a penalty for high cumulative demand
    edge_evaluation = distance_matrix + (edge_capacity_impact / (1 + edge_capacity_impact))
    
    # 4. Optimization Strategies
    # Dynamic threshold based on edge evaluation to prioritize
    dynamic_threshold = edge_evaluation.mean()
    
    # Adjust penalties dynamically based on edge evaluation and cumulative demand
    long_distance_penalty = torch.clamp((distance_matrix - dynamic_threshold) / dynamic_threshold, min=-1.0, max=0.0)
    high_demand_penalty = torch.clamp((cumulative_demand - dynamic_threshold) / dynamic_threshold, min=-1.0, max=0.0)
    
    # Calculate the total penalty to be applied
    total_penalty = long_distance_penalty + high_demand_penalty
    
    # Apply the penalty to the edge evaluation
    edge_evaluation -= total_penalty
    
    # Normalize the evaluation to ensure a balanced approach
    edge_promise = torch.clamp(edge_evaluation, min=-2.0, max=2.0)
    
    return edge_promise
```
