```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use a combination of distance and demand impact with a penalty for high cumulative demand
    edge_evaluation = distance_matrix + (edge_capacity_impact / (1 + edge_capacity_impact))
    edge_evaluation = torch.where(edge_capacity_impact > 1, edge_evaluation * 0.9, edge_evaluation)
    
    # 4. Optimization Strategies
    # Introduce a demand-driven threshold that adjusts based on the average edge evaluation
    mean_evaluation = edge_evaluation.mean()
    std_evaluation = edge_evaluation.std()
    demand_adjusted_threshold = mean_evaluation + std_evaluation * 0.1
    
    # Apply a threshold-based promise value to balance evaluations
    edge_promise = torch.where(edge_evaluation < demand_adjusted_threshold, -1.0, 1.0)
    
    # Normalize the promise values to ensure a balanced approach
    edge_promise = torch.sigmoid(edge_promise) * 2 - 1
    
    return edge_promise
```
