```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use a combination of distance and demand impact with a penalty for high cumulative demand
    edge_evaluation = distance_matrix + (edge_capacity_impact / (1 + edge_capacity_impact))
    edge_evaluation = torch.where(edge_capacity_impact > 1, edge_evaluation * 0.9, edge_evaluation)
    
    # 4. Optimization Strategies
    # Introduce a demand-based threshold that adjusts based on the statistical analysis
    mean_demand = demands.mean()
    std_demand = demands.std()
    demand_adjusted_threshold = (edge_evaluation - mean_demand) / std_demand
    
    edge_promise = torch.where(edge_evaluation < demand_adjusted_threshold, -1.0, 1.0)
    
    # Further refine the heuristic by penalizing excessively long routes
    max_distance = edge_evaluation.max()
    edge_promise = torch.where(edge_evaluation > max_distance, edge_promise * 0.8, edge_promise)
    
    # Optimize demand integration by reducing the promise as cumulative demand increases
    edge_promise *= (1 - cumulative_demand)
    
    return edge_promise
```
