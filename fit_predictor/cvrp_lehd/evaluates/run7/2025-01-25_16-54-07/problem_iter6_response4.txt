```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use cumulative demand as the evaluation criterion directly
    edge_evaluation = edge_capacity_impact
    
    # 4. Optimization Strategies
    # Apply a simple threshold to differentiate between promising and undesirable edges
    # Introduce a demand-to-capacity ratio penalty and balance with distance
    capacity = 1.0  # Example capacity value
    demand_to_capacity_ratio = cumulative_demand / capacity
    edge_evaluation = (1 / (1 + edge_evaluation)) * (1 / (1 + demand_to_capacity_ratio))
    
    # Normalize the evaluation to ensure all values are within the range of -1 to 1
    edge_evaluation = 2 * (edge_evaluation - edge_evaluation.min()) / (edge_evaluation.max() - edge_evaluation.min()) - 1
    
    return edge_evaluation
```
