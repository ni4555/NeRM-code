```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use a combination of distance and demand impact with a penalty for high cumulative demand
    edge_evaluation = distance_matrix + (edge_capacity_impact / (1 + edge_capacity_impact))
    
    # Apply a dynamic penalty for high cumulative demand
    penalty_factor = torch.where(edge_capacity_impact > 1, edge_evaluation * 0.9, edge_evaluation)
    
    # 4. Optimization Strategies
    # Normalize the evaluation
    max_edge_eval = penalty_factor.max()
    edge_promise = (penalty_factor / max_edge_eval)
    
    # Apply a dynamic threshold for edge prioritization
    dynamic_threshold = edge_promise.mean()
    edge_promise = torch.where(edge_promise < dynamic_threshold, -1.0, 1.0)
    
    # Adjust the promise to have a more pronounced difference between desirable and undesirable edges
    edge_promise = torch.clamp(edge_promise, min=-1.0, max=1.0)
    
    return edge_promise
```
