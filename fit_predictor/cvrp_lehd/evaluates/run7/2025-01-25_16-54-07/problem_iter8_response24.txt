```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    edge_evaluation = distance_matrix + edge_capacity_impact
    
    # 4. Optimization Strategies
    # Normalize the edge evaluation to range between -1 and 1
    max_demand = torch.max(cumulative_demand)
    min_demand = torch.min(cumulative_demand)
    edge_evaluation = (edge_evaluation - min_demand) / (max_demand - min_demand)
    
    # Create a binary mask where edges above the mean are considered promising
    mean_demand = edge_evaluation.mean()
    edge_promise = torch.where(edge_evaluation > mean_demand, 1.0, -1.0)
    
    return edge_promise
```
