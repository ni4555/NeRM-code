```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use a combination of distance, demand impact, and a penalty for high cumulative demand
    edge_evaluation = distance_matrix + (edge_capacity_impact / (1 + edge_capacity_impact))
    # Introduce a penalty for edges that exceed the vehicle capacity by more than a factor of 2
    edge_evaluation = torch.where(edge_capacity_impact > 2, edge_evaluation * 0.8, edge_evaluation)
    
    # 4. Optimization Strategies
    # Dynamic threshold based on edge evaluation to prioritize
    # Adjust threshold based on the average of edge evaluations that do not exceed capacity
    edge_evaluation = torch.where(edge_capacity_impact <= 1, edge_evaluation, torch.full_like(edge_evaluation, -float('inf')))
    dynamic_threshold = edge_evaluation.mean()
    edge_promise = torch.where(edge_evaluation < dynamic_threshold, -1.0, 1.0)
    
    # Further refine the promise by reducing the impact of higher demands
    edge_promise *= (1 - edge_capacity_impact / (1 + edge_capacity_impact))
    
    return edge_promise
```
