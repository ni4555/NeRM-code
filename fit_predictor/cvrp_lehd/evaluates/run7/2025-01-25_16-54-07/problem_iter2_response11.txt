```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Define a clear and objective evaluation method for edges
    # Weighted metrics to account for both distance and demand
    distance_weight = 0.5  # This can be adjusted based on problem specifics
    demand_weight = 0.5   # This can be adjusted based on problem specifics
    edge_evaluation = (distance_weight * (1 / (distance_matrix + 1e-5))) + \
                       (demand_weight * edge_capacity_impact)
    
    # 4. Optimization Strategies
    # Refine thresholds adaptively to improve the quality of the solution
    min_capacity = demands.min() / n  # Estimate the minimum feasible load per vehicle
    threshold = min_capacity * n      # This threshold can be adjusted based on the problem specifics
    
    # Calculate edge promise based on the weighted evaluation
    edge_promise = torch.where(edge_evaluation < threshold, edge_evaluation, -edge_evaluation)
    
    return edge_promise
```
