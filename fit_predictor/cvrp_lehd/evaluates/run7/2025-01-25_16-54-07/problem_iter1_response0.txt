```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # 2. Capacity Constraint Prioritization
    edge_capacity_impact = distance_matrix * normalized_demands
    
    # 3. Clear Edge Evaluation
    # Here we introduce a new heuristic: using a modified Dijkstra's algorithm
    # to calculate the shortest path to the next node based on cumulative demand
    edge_evaluation = edge_capacity_impact.sum(dim=1)
    
    # 4. Optimization Strategies
    # We use a more sophisticated thresholding based on both distance and demand
    threshold = (distance_matrix.sum() * 0.01) + (total_demand * 0.01)
    edge_promise = torch.where(edge_evaluation < threshold, -1.0, 1.0)
    
    return edge_promise
```
