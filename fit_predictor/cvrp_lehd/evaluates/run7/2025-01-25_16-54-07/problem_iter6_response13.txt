```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask using cumulative demand as the load impact
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 3. Clear Edge Evaluation
    # Evaluate edges using a combination of distance and cumulative demand
    edge_evaluation = distance_matrix + cumulative_demand
    
    # 4. Optimization Strategies
    # Use a simple threshold to differentiate between promising and undesirable edges
    threshold = torch.max(edge_evaluation) / 2  # Dynamic threshold based on max edge evaluation
    edge_promise = torch.where(edge_evaluation < threshold, -1.0, 1.0)
    
    return edge_promise
```
