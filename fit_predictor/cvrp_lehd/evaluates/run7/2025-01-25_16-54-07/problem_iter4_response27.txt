```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Define a clear and objective evaluation method for edges
    # Use a combination of distance and demand impact
    balance_factor = 0.5  # Balance factor to weigh distance and demand
    edge_evaluation = (1 / (1 + edge_capacity_impact)) * distance_matrix * balance_factor + normalized_demands * (1 - balance_factor)
    
    # 4. Optimization Strategies
    # Introduce penalties for long or high-demand edges
    long_distance_penalty = torch.where(distance_matrix > 100, -2.0, 0.0)
    high_demand_penalty = torch.where(normalized_demands > 0.1, -1.0, 0.0)  # Adjust the threshold for high demand
    
    # Calculate the total penalty to be applied
    total_penalty = long_distance_penalty + high_demand_penalty
    
    # Apply the penalty to the edge evaluation
    edge_evaluation -= total_penalty
    
    # Normalize the evaluation to ensure a balanced approach
    edge_promise = torch.clamp(edge_evaluation, min=-2.0, max=1.0)  # Ensuring the range is within [-2.0, 1.0]
    
    return edge_promise
```
