```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Define a clear and objective evaluation method for edges
    # Use a combination of distance and demand impact with a penalty for high cumulative demand
    edge_evaluation = distance_matrix + (edge_capacity_impact / (1 + edge_capacity_impact))
    edge_evaluation = torch.where(edge_capacity_impact > 1, edge_evaluation * 0.8, edge_evaluation)
    
    # Introduce a balance factor to avoid heavily loaded edges
    balance_factor = 0.1
    edge_evaluation = torch.clamp(edge_evaluation, min=1 - balance_factor, max=1 + balance_factor)
    
    # 4. Optimization Strategies
    # Introduce a demand-based prioritization factor to adjust the evaluation
    demand_prioritization_factor = 0.2
    edge_evaluation *= (1 + demand_prioritization_factor * (cumulative_demand - 1))
    
    # Dynamic threshold based on edge evaluation to prioritize
    dynamic_threshold = edge_evaluation.mean()
    edge_promise = torch.where(edge_evaluation < dynamic_threshold, -1.0, 1.0)
    
    return edge_promise
```
