```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # 2. Capacity Constraint Prioritization
    edge_capacity_impact = distance_matrix * normalized_demands
    
    # 3. Clear Edge Evaluation
    # We use a weighted sum of distance and demand impact
    # Increase the weight on capacity impact to prioritize capacity constraints
    weight_distance = 0.5
    weight_demand = 0.5
    edge_evaluation = (distance_matrix * weight_distance) + (edge_capacity_impact * weight_demand)
    
    # 4. Optimization Strategies
    # Dynamically adjust the threshold based on the maximum edge evaluation
    max_evaluation = edge_evaluation.max()
    dynamic_threshold = max_evaluation * 0.8  # Threshold is set to 80% of the maximum
    
    # Determine the promise of each edge based on the dynamic threshold
    edge_promise = torch.where(edge_evaluation < dynamic_threshold, -1.0, 1.0)
    
    return edge_promise
```
