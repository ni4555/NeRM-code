```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # We combine the distance with the cumulative demand impact using logarithmic scale
    edge_evaluation = distance_matrix + torch.log1p(edge_capacity_impact)
    # Introduce a penalty for high cumulative demand
    edge_evaluation = torch.where(edge_capacity_impact > 1, edge_evaluation * 0.9, edge_evaluation)
    
    # 4. Optimization Strategies
    # Dynamic threshold based on edge evaluation to prioritize
    max_edge_eval = edge_evaluation.max()
    dynamic_threshold = max_edge_eval * 0.9  # Adjust the threshold to be more conservative
    
    # Introduce penalties for overcapacity risk
    edge_promise = torch.where(edge_capacity_impact > 1.1, edge_promise * 0.8, edge_promise)
    
    # Final decision on edge promise based on dynamic threshold
    edge_promise = torch.where(edge_evaluation < dynamic_threshold, -1.0, 1.0)
    
    return edge_promise
```
