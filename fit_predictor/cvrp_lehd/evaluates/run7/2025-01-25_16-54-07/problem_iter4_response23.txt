```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Define a clear and objective evaluation method for edges
    # We use the distance as a penalty and cumulative demand as a benefit
    edge_evaluation = (1 / (distance_matrix + 1e-5)) - edge_capacity_impact
    
    # 4. Optimization Strategies
    # We balance the distance penalty with the cumulative demand benefit to find the best edges
    # Negative values for edges that are not favorable (due to high distance or high cumulative demand),
    # Positive values for edges that are favorable
    # We use a linear combination of the distance penalty and cumulative demand to create a single scalar value for each edge
    # Setting a threshold based on the median of the edge evaluations to decide whether an edge is favorable or not
    median_edge_evaluation = edge_evaluation.median()
    edge_promise = edge_evaluation - median_edge_evaluation
    
    return edge_promise
```
