```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    
    # 1. Precise Demand Handling
    total_demand = demands.sum()
    normalized_demands = demands / total_demand
    
    # Cumulative demand mask
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    
    # 2. Capacity Constraint Prioritization
    # Edge feasibility mask
    edge_capacity_impact = distance_matrix * cumulative_demand
    
    # 3. Clear Edge Evaluation
    # Use cumulative demand as the evaluation criterion directly
    edge_evaluation = edge_capacity_impact
    
    # 4. Optimization Strategies
    # Apply a dynamic threshold based on the cumulative demand
    dynamic_threshold = torch.clamp(cumulative_demand, 0, 1)  # Ensuring the threshold is within [0, 1]
    
    # Differentiate between promising and undesirable edges using the dynamic threshold
    edge_promise = torch.where(edge_evaluation > dynamic_threshold, 1.0, -1.0)
    
    # Further refine the promise by reducing the impact of higher demands and considering distance
    edge_promise *= (1 - (edge_capacity_impact * distance_matrix) / (1 + edge_capacity_impact * distance_matrix))
    
    return edge_promise
```
