```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Normalize the distance matrix to account for variation in distances
    max_distance = distance_matrix.max()
    normalized_distance_matrix = distance_matrix / max_distance

    # Calculate the heuristic based on a combination of normalized demand and distance
    # with a focus on balancing the load across the routes and minimizing the distance
    # differences. The heuristic is designed to be negatively correlated with distance
    # and positively correlated with demand to encourage visiting high-demand nodes.
    distance_scaled = distance_matrix / max_distance
    demand_scaled = normalized_demands

    # Combine the scaled distance and demand into the heuristic matrix
    heuristic_matrix = torch.add(demand_scaled, distance_scaled)

    # Normalize the heuristic matrix to ensure all values are within a specific range
    min_val, max_val = heuristic_matrix.min(), heuristic_matrix.max()
    scaled_heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(scaled_heuristic_matrix, min=-threshold, max=threshold)

    # Cap the positive values to encourage early return to the depot if capacity is exceeded
    positive_cap = torch.tensor(0.5, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-positive_cap, max=positive_cap)

    return heuristic_matrix
```
