```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of factors
    # We prioritize edges with lower demand, shorter distance, and lower demand variance.
    # We also consider the balance of demand distribution among nodes.

    # Calculate the mean distance to the depot
    mean_distance_to_depot = distance_matrix[0].mean()

    # Calculate the demand variance to penalize large variations
    demand_variance = demands.var()

    # Calculate the balance of demand distribution
    max_demand = demands.max()
    min_demand = demands.min()
    demand_balance = torch.abs(max_demand - min_demand)

    # Initialize the heuristic matrix with a base value
    heuristic_matrix = -normalized_demands

    # Add a distance penalty proportional to the distance from the depot
    heuristic_matrix += distance_matrix / mean_distance_to_depot

    # Add a penalty for demand variance
    heuristic_matrix -= demand_variance * 0.2

    # Add a reward for more balanced demand distribution
    heuristic_matrix += demand_balance * 0.1

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
