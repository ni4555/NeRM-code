```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Weights for the different components of the heuristic
    demand_weight = 0.5
    distance_weight = 0.3

    # Calculate the heuristic based on a combination of demand and distance
    heuristic_matrix = torch.mul(normalized_demands, distance_matrix)

    # Normalize the heuristic to balance the weights
    normalized_heuristic = heuristic_matrix * (demand_weight + distance_weight)

    # Apply penalties for high demand and outliers
    high_demand_threshold = demands.max() * 1.1
    outlier_threshold = demands.std() * 0.5

    high_demand_penalty = torch.where(demands > high_demand_threshold, torch.tensor(-1.0, dtype=distance_matrix.dtype), torch.tensor(0.0, dtype=distance_matrix.dtype))
    outlier_penalty = torch.where(demands > outlier_threshold, torch.tensor(-1.0, dtype=distance_matrix.dtype), torch.tensor(0.0, dtype=distance_matrix.dtype))

    # Combine the weights and penalties
    heuristic_matrix = normalized_heuristic + high_demand_penalty + outlier_penalty

    # Apply a threshold to ensure all heuristics are within a specific range
    min_threshold = torch.tensor(-0.1, dtype=distance_matrix.dtype)
    max_threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=min_threshold, max=max_threshold)

    return heuristic_matrix
```
