```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # where edges with lower demand and closer distance are more promising.
    # Additionally, we incorporate a balancing factor that reduces the weight of
    # edges with very high demands to encourage more evenly distributed vehicle loads.
    # We also use a normalization factor to scale the heuristic values and ensure
    # that they remain within a meaningful range.
    max_demand = demands.max()
    demand_factor = torch.where(normalized_demands > 0.5, 0.5 / normalized_demands, 1)
    normalization_factor = torch.tensor(1.0 / (distance_matrix.max() + 1), dtype=distance_matrix.dtype)
    
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        demand_factor
    )

    # Normalize the heuristic matrix to prevent values from becoming too large
    heuristic_matrix = torch.mul(heuristic_matrix, normalization_factor)

    # Apply a penalty for edges that exceed a certain distance threshold
    distance_threshold = torch.tensor(1.5, dtype=distance_matrix.dtype)
    penalty_factor = torch.where(distance_matrix > distance_threshold, -distance_threshold, 0)
    heuristic_matrix = torch.add(heuristic_matrix, penalty_factor)

    return heuristic_matrix
```
