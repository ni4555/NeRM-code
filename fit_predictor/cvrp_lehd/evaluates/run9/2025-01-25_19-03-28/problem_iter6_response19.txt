```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate cumulative demand and capacity
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    capacity = torch.full_like(cumulative_demand, total_capacity)

    # Calculate the heuristic based on a combination of demand, distance, and cumulative demand
    # where edges with lower demand, closer distance, and lower cumulative demand are more promising.
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        (cumulative_demand - capacity)
    )

    # Normalize and smooth the heuristic matrix to penalize outliers
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1.0, max=1.0)
    heuristic_matrix = heuristic_matrix / (heuristic_matrix.abs() + 1e-8)

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
