```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic for each edge as the negative of the sum of the normalized demand
    # and the distance (to simulate a heuristic where shorter distances with lower demands
    # are more promising).
    # Additionally, add a penalty for edges leading to nodes with high demands.
    heuristic_matrix = -torch.add(normalized_demands, (demands > 0.5 * total_capacity) * 1000)

    return heuristic_matrix
```
