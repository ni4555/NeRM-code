```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic for each edge as a combination of normalized demand,
    # distance, and the inverse of the demand.
    # The heuristic includes a term that increases with the distance and decreases with the demand.
    distance_squared = distance_matrix ** 2
    demand_inverse = 1 / (normalized_demands + 1e-8)  # Adding a small constant to avoid division by zero
    heuristic_matrix = -torch.mul(distance_squared, demand_inverse) - normalized_demands

    return heuristic_matrix
```
