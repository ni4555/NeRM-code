```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # with dynamic weights to enforce stability and avoid overfitting.
    # Weigh factors for demand and distance can be adjusted according to specific requirements.
    demand_weight = torch.tensor(0.5, dtype=distance_matrix.dtype)
    distance_weight = torch.tensor(0.5, dtype=distance_matrix.dtype)

    # Normalize distances for better scaling
    max_distance = distance_matrix.max()
    normalized_distances = distance_matrix / max_distance

    # Consider the difference between the maximum and minimum normalized demand
    # to apply selective penalties for load balancing
    max_demand = normalized_demands.max()
    min_demand = normalized_demands.min()
    demand_diff = max_demand - min_demand

    # Construct the heuristic matrix
    heuristic_matrix = -torch.mul(
        torch.mul(
            torch.mul(normalized_demands, normalized_distances),
            demand_weight
        ),
        torch.mul(distance_weight, demand_diff)
    )

    # Apply a threshold to cap penalties and avoid negative heuristics
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
