```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Normalize distances by the maximum distance in the matrix to reduce scale variation
    max_distance = distance_matrix.max()
    normalized_distances = distance_matrix / max_distance

    # Introduce a demand variance factor to penalize edges with high variance in demand
    max_demand = demands.max()
    min_demand = demands.min()
    demand_diff = max_demand - min_demand
    demand_variance = (max_demand + min_demand) / 2

    # Calculate the heuristic matrix
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, normalized_distances),
        demand_variance
    )

    # Cap the heuristic values to avoid overfitting and ensure a stable heuristic
    cap = torch.tensor(1.0, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-cap, max=cap)

    # Apply a selective penalty to promote load balancing by reducing penalties on high-load edges
    for i in range(heuristic_matrix.shape[0]):
        for j in range(heuristic_matrix.shape[1]):
            if i == 0 and j > 0:
                # Apply penalties to edges leading from the depot
                if heuristic_matrix[i, j] > 0:
                    heuristic_matrix[i, j] *= 0.9
                else:
                    heuristic_matrix[i, j] *= 1.1

    return heuristic_matrix
```
