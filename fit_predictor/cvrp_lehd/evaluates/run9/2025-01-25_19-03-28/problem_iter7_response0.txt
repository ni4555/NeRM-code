```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Integrate demand variance into the heuristic by using a weighted combination
    # where demand variance is normalized and added to the heuristic.
    demand_variance = (demands - normalized_demands).pow(2).mean()
    variance_weight = torch.tensor(0.5, dtype=distance_matrix.dtype)
    demand_variance = variance_weight * demand_variance

    # Normalize distances for all edges before integrating them into the heuristic.
    distance_normalized = distance_matrix / distance_matrix.sum(0, keepdim=True)

    # Calculate the heuristic based on a combination of normalized demand,
    # normalized distance, and demand variance, capped by a small positive value
    # to avoid very small or negative values which might lead to overfitting.
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_normalized),
        demand_variance
    )

    # Enforce stability by avoiding extremely high or low heuristic values.
    cap_value = torch.tensor(1.0, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-cap_value, max=cap_value)

    return heuristic_matrix
```
