```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize the demands by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)

    # Iterate over each customer node (excluding the depot)
    for i in range(1, len(demands)):
        # Calculate the cumulative demand from the depot to each customer node
        cumulative_demand = torch.cumsum(normalized_demands[:i+1], dim=0)
        
        # Iterate over the previous customer nodes
        for j in range(i):
            # Calculate the distance from node j to node i
            distance = distance_matrix[j, i]
            
            # Calculate the heuristic value for the edge (j, i)
            # This value is negative if the cumulative demand is less than the capacity
            # and positive if the cumulative demand is greater than the capacity
            heuristic_value = (cumulative_demand[j] * distance if cumulative_demand[j] < 1 else
                               (1 - cumulative_demand[j]) * distance)
            
            # Update the heuristic matrix for the edge (j, i)
            heuristic_matrix[j, i] = heuristic_value

    return heuristic_matrix
```
