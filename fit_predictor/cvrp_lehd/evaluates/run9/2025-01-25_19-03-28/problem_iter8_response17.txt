```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Weights for the different components of the heuristic
    demand_weight = 0.5
    distance_weight = 0.3

    # Calculate the heuristic based on the normalized demand and distance
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        (demand_weight + distance_weight)
    )

    # Apply penalties for high demand and outliers
    high_demand_penalty = torch.where(demands > 1.1 * demands.mean(), torch.tensor(1.0, dtype=distance_matrix.dtype), torch.tensor(0.0, dtype=distance_matrix.dtype))
    outlier_penalty = torch.where(demands > 1.5 * demands.mean() or demands < 0.5 * demands.mean(), torch.tensor(1.0, dtype=distance_matrix.dtype), torch.tensor(0.0, dtype=distance_matrix.dtype))

    # Combine the penalties
    heuristic_matrix = torch.mul(
        heuristic_matrix,
        (1 - high_demand_penalty) + outlier_penalty
    )

    # Normalize the heuristic to ensure all values are within a specific range
    min_val, max_val = heuristic_matrix.min(), heuristic_matrix.max()
    scaled_heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(scaled_heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
