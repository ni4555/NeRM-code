```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate cumulative demand from the starting node ( depot )
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)

    # Define a function to dynamically adjust weights
    def dynamic_weight(x):
        return torch.exp(-x)

    # Apply weighted demand and distance, considering cumulative demand
    weight_factor = dynamic_weight(torch.abs(cumulative_demand - total_capacity / 2))
    heuristic_matrix = -torch.mul(
        torch.mul(weight_factor, normalized_demands),
        distance_matrix
    )

    # Balance diversity and demand variance
    diversity_factor = (cumulative_demand - demands.mean()) ** 2
    variance_factor = demands.var()
    balanced_factor = torch.exp(-torch.sqrt(variance_factor / diversity_factor))
    heuristic_matrix = torch.mul(heuristic_matrix, balanced_factor)

    # Normalize and apply threshold constraints
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
