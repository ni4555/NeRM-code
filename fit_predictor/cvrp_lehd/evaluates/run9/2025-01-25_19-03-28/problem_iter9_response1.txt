```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # while incorporating a dynamic penalty that is proportional to the
    # variance of demands. We use a squared difference to capture the variance.
    max_demand = demands.max()
    min_demand = demands.min()
    variance = ((demands - normalized_demands) ** 2).mean()

    # We use the mean distance as a reference to scale the penalties
    mean_distance = distance_matrix.mean()

    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        torch.clamp(variance, min=0) / mean_distance
    )

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
