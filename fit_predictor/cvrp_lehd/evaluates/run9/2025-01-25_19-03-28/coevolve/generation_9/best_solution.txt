Fitness: 21.410755157470703

Description:
Develop a heuristic algorithm for the Capacitated Vehicle Routing Problem (CVRP) that prioritizes shortest travel distance while accommodating diverse customer demands and adhering strictly to vehicle capacity limits. Utilize a normalized demand-based approach and integrate a negative weighted distance strategy to streamline the solution process. The algorithm should be designed to simplify the mathematical complexity, ensuring a clear and concise heuristic structure. Emphasize optimization techniques such as dynamic load balancing and proximity-based route planning to enhance operational efficiency. The heuristic must be robust, adaptable, and capable of delivering significant performance improvements with minimal complexity, avoiding the integration of complex multi-objective evolutionary algorithms.

Code:
import torch
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity
    
    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)
    
    # Calculate the negative weighted distance for each edge
    negative_weighted_distance = -distance_matrix
    
    # Apply normalized demand to the negative weighted distance
    for i in range(n):
        for j in range(n):
            if i != j:  # Exclude the depot from the calculation
                # Update the heuristic value for each edge
                heuristic_matrix[i, j] = negative_weighted_distance[i, j] * normalized_demands[i]
    
    return heuristic_matrix