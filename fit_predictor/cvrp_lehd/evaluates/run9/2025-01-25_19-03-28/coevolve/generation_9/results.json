{
  "generation": 9,
  "description": "Develop a heuristic algorithm for the Capacitated Vehicle Routing Problem (CVRP) that prioritizes shortest travel distance while accommodating diverse customer demands and adhering strictly to vehicle capacity limits. Utilize a normalized demand-based approach and integrate a negative weighted distance strategy to streamline the solution process. The algorithm should be designed to simplify the mathematical complexity, ensuring a clear and concise heuristic structure. Emphasize optimization techniques such as dynamic load balancing and proximity-based route planning to enhance operational efficiency. The heuristic must be robust, adaptable, and capable of delivering significant performance improvements with minimal complexity, avoiding the integration of complex multi-objective evolutionary algorithms.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = torch.zeros_like(distance_matrix)\n    \n    # Calculate the negative weighted distance for each edge\n    negative_weighted_distance = -distance_matrix\n    \n    # Apply normalized demand to the negative weighted distance\n    for i in range(n):\n        for j in range(n):\n            if i != j:  # Exclude the depot from the calculation\n                # Update the heuristic value for each edge\n                heuristic_matrix[i, j] = negative_weighted_distance[i, j] * normalized_demands[i]\n    \n    return heuristic_matrix",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_7.txt",
      "code_file": "coevolve\\generation_9\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Create a matrix of negative distances\n    negative_distance_matrix = -distance_matrix\n    \n    # Add normalized demands to the negative distance matrix\n    heuristics_matrix = negative_distance_matrix + normalized_demands\n    \n    # Apply dynamic load balancing by prioritizing edges with lower load\n    # We do this by multiplying each row by the demand of the corresponding node\n    heuristics_matrix = heuristics_matrix * demands.unsqueeze(1)\n    \n    # Apply proximity-based route planning by prioritizing edges with shorter distance\n    # This is already incorporated in the negative_distance_matrix\n    \n    return heuristics_matrix",
      "fitness": 21.452342987060547,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_1.txt",
      "code_file": "coevolve\\generation_9\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the distance matrix to ensure that the shortest distance is 0\n    distance_matrix = distance_matrix - distance_matrix.min()\n    \n    # Normalize the demands by the total vehicle capacity to ensure that\n    # the demand is between 0 and 1\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the negative weighted distance based on the normalized demand\n    # We use negative values to prioritize edges with lower demand\n    negative_weighted_distance = -distance_matrix * normalized_demands\n    \n    # Apply dynamic load balancing by adjusting weights based on the proximity\n    # to the depot. This encourages routes that start from the depot.\n    depot_index = 0\n    distance_to_depot = distance_matrix[depot_index]\n    distance_to_depot[distance_to_depot == float('inf')] = 0  # Replace inf with 0 for calculation\n    dynamic_load_balancing = negative_weighted_distance * (1 / (distance_to_depot + 1e-6))  # Add a small constant to avoid division by zero\n    \n    # Combine all the factors to get the final heuristic values\n    heuristic_values = dynamic_load_balancing\n    \n    return heuristic_values",
      "fitness": 21.465118408203125,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_9.txt",
      "code_file": "coevolve\\generation_9\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the negative weighted distance matrix\n    # We use negative values to indicate shorter distances as more promising\n    negative_weighted_distance = -distance_matrix\n\n    # Integrate the normalized demand into the negative weighted distance\n    # Higher demand should be more negative to indicate higher priority\n    weighted_distance_matrix = negative_weighted_distance + normalized_demands.unsqueeze(1) * distance_matrix\n\n    # Apply a threshold to filter out edges with very low weights (undesirable edges)\n    # This threshold is a heuristic parameter that can be adjusted\n    threshold = torch.min(weighted_distance_matrix) * 0.1\n    promising_edges = weighted_distance_matrix > threshold\n\n    # Convert boolean mask to a float tensor with the same values as the threshold\n    # This will create negative values for undesirable edges and positive values for promising ones\n    heuristics_matrix = torch.where(promising_edges, threshold, 0.0)\n\n    return heuristics_matrix",
      "fitness": 21.493392944335938,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_11.txt",
      "code_file": "coevolve\\generation_9\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    \n    # Calculate normalized distance matrix (using a small constant to avoid division by zero)\n    norm_distance_matrix = distance_matrix.clone()\n    min_distance = torch.min(distance_matrix, dim=1, keepdim=True)[0]\n    norm_distance_matrix = (norm_distance_matrix - min_distance) / (torch.sum(distance_matrix, dim=1) - min_distance)\n    \n    # Calculate demand-based priority matrix (negative demands to give priority to lower demand)\n    demand_priority_matrix = -demands / torch.sum(demands)\n    \n    # Combine the two matrices, giving higher priority to lower distances and demand\n    combined_priority_matrix = norm_distance_matrix + demand_priority_matrix\n    \n    # Add a small constant to avoid issues with division by zero\n    combined_priority_matrix += 1e-6\n    \n    # Normalize the combined priority matrix to ensure it is within the range [0, 1]\n    max_priority = torch.max(combined_priority_matrix)\n    min_priority = torch.min(combined_priority_matrix)\n    priority_matrix = (combined_priority_matrix - min_priority) / (max_priority - min_priority)\n    \n    return priority_matrix",
      "fitness": 21.602977752685547,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_0.txt",
      "code_file": "coevolve\\generation_9\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the negative weighted distance matrix\n    negative_weighted_distance = -distance_matrix\n    \n    # Normalize the negative weighted distance matrix by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_distance_matrix = negative_weighted_distance / total_capacity\n    \n    # Calculate the demand-based heuristic\n    demand_heuristic = demands.unsqueeze(1) * demands.unsqueeze(0)\n    \n    # Combine the normalized distance and demand-based heuristic\n    combined_heuristic = normalized_distance_matrix + demand_heuristic\n    \n    # Apply dynamic load balancing by prioritizing edges with lower combined heuristic values\n    # This is a simple approach to simulate dynamic load balancing without complex calculations\n    combined_heuristic = combined_heuristic.clamp(min=0)  # Ensure non-negative values\n    \n    return combined_heuristic",
      "fitness": 31.005840301513672,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_9\\stdout_6.txt",
      "code_file": "coevolve\\generation_9\\code_6.py"
    }
  ]
}