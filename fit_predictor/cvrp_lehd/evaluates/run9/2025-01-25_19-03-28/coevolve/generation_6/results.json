{
  "generation": 6,
  "description": "Integrate a predictive routing subsystem with high-accuracy real-time demand projections into an advanced algorithmic framework for the Capacitated Vehicle Routing Problem (CVRP). Utilize a hybrid approach that synergizes genetic algorithms for broad-scale exploration and constraint-based local search for precise solution optimization. Emphasize the use of multi-objective evolutionary strategies to harmonize objectives such as reduced travel distance, even vehicle load distribution, and minimized service time. This comprehensive methodology aims to achieve a balanced allocation of resources, optimizing operational efficiency and cost-effectiveness while ensuring resilient and adaptive service delivery.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands vector to the range [0, 1]\n    demands_normalized = demands / demands.sum()\n\n    # Calculate the maximum demand as a baseline for comparison\n    max_demand = demands.max()\n\n    # Compute the heuristics as the product of normalized demands and distance matrix\n    heuristics = demands_normalized * distance_matrix\n\n    # Subtract the maximum demand from the heuristics to make the values negative for undesirable edges\n    heuristics -= max_demand\n\n    # Add a small constant to avoid zero values which can cause numerical instability\n    heuristics += 1e-10\n\n    return heuristics",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_6\\stdout_0.txt",
      "code_file": "coevolve\\generation_6\\code_0.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    total_capacity = demands.sum()\n    \n    # Normalize demands to represent the fraction of vehicle capacity needed by each customer\n    normalized_demands = demands / total_capacity\n    \n    # Initialize the heuristics matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n    \n    # Calculate the negative cost for each edge based on the normalized demand\n    heuristics = -normalized_demands.unsqueeze(1) * distance_matrix\n    \n    # Add a small positive value to the diagonal to avoid selecting the depot as a customer\n    heuristics += 1e-5 * torch.eye(distance_matrix.shape[0], device=distance_matrix.device)\n    \n    return heuristics",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_6\\stdout_2.txt",
      "code_file": "coevolve\\generation_6\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    vehicle_capacity = demands.sum()\n    \n    # Calculate the normalized demand for each customer\n    normalized_demands = demands / vehicle_capacity\n    \n    # Calculate the sum of normalized demands for each edge\n    edge_normalized_demand_sum = (distance_matrix * normalized_demands.unsqueeze(1)).sum(0)\n    \n    # Calculate the heuristics values\n    heuristics = distance_matrix - edge_normalized_demand_sum\n    \n    # Ensure the heuristics contain negative values for undesirable edges\n    heuristics = heuristics.clamp(min=-1e-6)\n    \n    return heuristics",
      "fitness": 21.410770416259766,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_6\\stdout_7.txt",
      "code_file": "coevolve\\generation_6\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Assuming the demands vector is already normalized by the total vehicle capacity\n    # We calculate the maximum demand for normalization purposes\n    max_demand = demands.max()\n    \n    # Initialize the heuristics matrix with zeros\n    heuristics = torch.zeros_like(distance_matrix)\n    \n    # Calculate the Euclidean distance heuristic\n    heuristics += distance_matrix\n    \n    # Calculate the demand-based heuristic (promising edges have lower demand)\n    heuristics -= demands\n    \n    # Apply a normalization to ensure non-negative values\n    heuristics = (heuristics - heuristics.min()) / (heuristics.max() - heuristics.min())\n    \n    # Cap the heuristics at a maximum positive value to avoid negative values\n    heuristics = torch.clamp(heuristics, min=0)\n    \n    return heuristics",
      "fitness": 21.48031234741211,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_6\\stdout_1.txt",
      "code_file": "coevolve\\generation_6\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure demands are normalized by the total vehicle capacity\n    total_capacity = demands.sum()\n    if total_capacity == 0:\n        raise ValueError(\"Total vehicle capacity must be greater than zero.\")\n    normalized_demands = demands / total_capacity\n\n    # Calculate a simple heuristic based on distance and normalized demand\n    # Negative values indicate undesirable edges, positive values indicate promising ones\n    heuristics = distance_matrix - normalized_demands\n\n    # Adjust heuristics to ensure all values are non-negative (promising)\n    heuristics = torch.clamp(heuristics, min=0)\n\n    return heuristics",
      "fitness": 21.56332015991211,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_6\\stdout_5.txt",
      "code_file": "coevolve\\generation_6\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the total vehicle capacity\n    vehicle_capacity = demands.sum()\n    \n    # Normalize customer demands to the total vehicle capacity\n    normalized_demands = demands / vehicle_capacity\n    \n    # Initialize the heuristics matrix with zeros\n    heuristics_matrix = torch.zeros_like(distance_matrix)\n    \n    # Calculate the potential cost of visiting each customer\n    # This is a simplistic heuristic where we assume the cost is inversely proportional to the demand\n    cost_potential = 1 / (normalized_demands + 1e-10)  # Add a small value to avoid division by zero\n    \n    # Apply the cost potential to the distance matrix\n    heuristics_matrix = cost_potential * distance_matrix\n    \n    return heuristics_matrix",
      "fitness": 182.93417358398438,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_6\\stdout_9.txt",
      "code_file": "coevolve\\generation_6\\code_9.py"
    }
  ]
}