{
  "generation": 8,
  "description": "Develop a hybrid heuristic algorithm to address the Capacitated Vehicle Routing Problem (CVRP) by integrating a demand forecasting model with genetic algorithm-based global search and constraint-based local search. The goal is to optimize a multi-objective evolutionary algorithm that minimizes travel distance, ensures balanced vehicle loads, and reduces service time, with a focus on enhancing resource allocation, operational efficiency, and cost-effectiveness while ensuring adaptable service delivery.",
  "solutions": [
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the demands to be between 0 and 1\n    normalized_demands = demands / demands.sum()\n    \n    # Compute the heuristic values for each edge\n    # The heuristic is a combination of the demand and the distance, adjusted by a penalty for high demands\n    # Here, we use a simple heuristic: demand * distance\n    # We can adjust the heuristic function to better suit the problem's specifics\n    \n    # The heuristic is negative for undesirable edges and positive for promising ones\n    # The idea is to encourage routes with lower demand and shorter distances\n    heuristic_values = distance_matrix * normalized_demands\n    \n    return heuristic_values",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_2.txt",
      "code_file": "coevolve\\generation_8\\code_2.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure demands are normalized by the total vehicle capacity\n    total_capacity = demands.sum()\n    normalized_demands = demands / total_capacity\n\n    # Calculate the heuristic values based on distance and normalized demand\n    # We use a simple heuristic where the more distant the customer, the less promising the edge\n    # and the higher the demand, the more promising the edge\n    heuristics = distance_matrix * normalized_demands\n\n    # Subtract the maximum heuristic value to ensure non-negative values\n    max_heuristic = heuristics.max()\n    heuristics -= max_heuristic\n\n    return heuristics",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_7.txt",
      "code_file": "coevolve\\generation_8\\code_7.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the sum of demands to normalize\n    total_demand = demands.sum()\n    \n    # Normalize demands by the total vehicle capacity\n    normalized_demands = demands / total_demand\n    \n    # Calculate the heuristic value for each edge\n    # Here we use a simple heuristic that considers the normalized demand and distance\n    # A more complex heuristic could be designed here\n    heuristics = normalized_demands * distance_matrix\n    \n    return heuristics",
      "fitness": 21.410755157470703,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_9.txt",
      "code_file": "coevolve\\generation_8\\code_9.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the heuristic values based on the ratio of demand to distance\n    # This heuristic assumes that closer nodes with higher demand are more promising\n    heuristics = demands / distance_matrix\n    \n    # Normalize the heuristic values to ensure they are between -1 and 1\n    max_demand = demands.max()\n    min_demand = demands.min()\n    normalized_demand = (demands - min_demand) / (max_demand - min_demand)\n    \n    # Calculate the heuristic values based on the normalized demand\n    normalized_heuristics = normalized_demand / distance_matrix\n    \n    # Convert to a range between -1 and 1\n    max_distance = distance_matrix.max()\n    min_distance = distance_matrix.min()\n    normalized_distance = (distance_matrix - min_distance) / (max_distance - min_distance)\n    \n    # Create the final heuristics matrix\n    heuristics_matrix = normalized_demand * normalized_distance\n    \n    # Apply a simple penalty for edges leading back to the depot (which should be avoided)\n    penalty = torch.zeros_like(distance_matrix)\n    penalty[torch.arange(distance_matrix.shape[0]), torch.arange(distance_matrix.shape[0])] = -1\n    heuristics_matrix += penalty\n    \n    return heuristics_matrix",
      "fitness": 21.530963897705078,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_10.txt",
      "code_file": "coevolve\\generation_8\\code_10.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Ensure the demands are normalized by the total vehicle capacity\n    vehicle_capacity = demands.sum()\n    demands = demands / vehicle_capacity\n\n    # Calculate the heuristic values using the formula:\n    # heuristic = distance + demand_weight * (1 - load_factor)\n    # where load_factor = demand / vehicle_capacity\n    load_factor = demands / vehicle_capacity\n    heuristic = distance_matrix + demands * (1 - load_factor)\n\n    return heuristic",
      "fitness": 21.57149314880371,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_11.txt",
      "code_file": "coevolve\\generation_8\\code_11.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Calculate the sum of demands to normalize them\n    total_capacity = demands.sum()\n    \n    # Normalize the demands by the total vehicle capacity\n    normalized_demands = demands / total_capacity\n    \n    # Calculate the potential negative impact of each edge (high demand or high distance)\n    negative_impact = -torch.abs(normalized_demands) - distance_matrix\n    \n    # Calculate the potential positive impact of each edge (low demand and low distance)\n    positive_impact = torch.min(normalized_demands, 1 - normalized_demands) - distance_matrix\n    \n    # Combine the negative and positive impacts to form the heuristic values\n    heuristic_values = negative_impact + positive_impact\n    \n    # Ensure that the heuristic values are within the range [-1, 1] for better performance\n    heuristic_values = torch.clamp(heuristic_values, min=-1, max=1)\n    \n    return heuristic_values",
      "fitness": 21.594816207885742,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_5.txt",
      "code_file": "coevolve\\generation_8\\code_5.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    n = distance_matrix.shape[0]\n    \n    # Calculate the sum of demands to normalize\n    sum_of_demands = demands.sum()\n    \n    # Normalize demands to get the ratio of demand to vehicle capacity\n    normalized_demands = demands / sum_of_demands\n    \n    # Calculate a heuristic based on the distance and demand ratio\n    # For example, we can use the negative distance to penalize longer routes\n    # and the negative demand ratio to penalize routes with higher demand relative to capacity\n    heuristic = -distance_matrix + normalized_demands\n    \n    return heuristic",
      "fitness": 21.60292625427246,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_1.txt",
      "code_file": "coevolve\\generation_8\\code_1.py"
    },
    {
      "code": "import torch\nimport torch\n\ndef heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:\n    # Normalize the distance matrix to avoid overflow issues\n    distance_matrix = distance_matrix / distance_matrix.max()\n    \n    # Calculate the cumulative sum of demands to determine the load at each node\n    cumulative_demand = torch.cumsum(demands, dim=0)\n    \n    # Compute a heuristic based on the load difference at each node\n    load_diff = torch.abs(cumulative_demand - demands)\n    \n    # Use a simple heuristic that encourages paths that balance the load\n    # We subtract the load difference from the distance to give a heuristic value\n    heuristics = distance_matrix - load_diff\n    \n    # Add a small constant to ensure that all heuristics are positive\n    heuristics = heuristics + 1e-6\n    \n    return heuristics",
      "fitness": 95.93446350097656,
      "execution_success": true,
      "error": null,
      "stdout_file": "coevolve\\generation_8\\stdout_8.txt",
      "code_file": "coevolve\\generation_8\\code_8.py"
    }
  ]
}