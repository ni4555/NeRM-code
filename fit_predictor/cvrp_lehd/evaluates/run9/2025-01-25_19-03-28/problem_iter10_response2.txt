```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Normalize distances for better scaling
    max_distance = distance_matrix.max()
    normalized_distances = distance_matrix / max_distance

    # Use demand variance as a penalty and demand difference for load balancing
    demand_variance = torch.var(normalized_demands)
    demand_diff = (normalized_demands.max() - normalized_demands.min())

    # Apply dynamic weights to emphasize demand variance and demand difference
    demand_weight = torch.tensor(0.6, dtype=distance_matrix.dtype)  # Weight for demand
    distance_weight = torch.tensor(0.4, dtype=distance_matrix.dtype)  # Weight for distance

    # Combine weighted demand variance, demand difference, and normalized distances
    heuristic_matrix = torch.mul(
        torch.mul(
            demand_weight,
            torch.add(
                demand_variance,
                demand_diff
            )
        ),
        torch.mul(
            normalized_distances,
            distance_weight
        )
    )

    # Apply a threshold to cap penalties and ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
