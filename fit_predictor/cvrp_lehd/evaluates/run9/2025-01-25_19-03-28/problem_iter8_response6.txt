```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    penalty_threshold = torch.tensor(1.0, dtype=distance_matrix.dtype)
    penalty = torch.clamp(torch.abs(cumulative_demand - penalty_threshold), min=0, max=1)

    global_stats = torch.mean(distance_matrix[1:, 1:])  # Exclude the diagonal
    adjusted_weights = distance_matrix / global_stats

    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, adjusted_weights),
        penalty
    )

    # Use a smooth activation function (tanh) to ensure values are within -1 and 1
    heuristic_matrix = torch.tanh(heuristic_matrix)

    # Enforce stability through clamping
    stable_heuristic_matrix = torch.clamp(heuristic_matrix, min=-1.0, max=1.0)

    return stable_heuristic_matrix
```
