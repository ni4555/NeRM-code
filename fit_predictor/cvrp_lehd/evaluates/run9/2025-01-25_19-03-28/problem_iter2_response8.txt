```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic for each edge based on a combination of
    # the normalized demand and a weighted sum of distance and demand.
    # Here, we use a trade-off between the distance and demand, where
    # lower distances with higher demands are more promising.
    # We also consider the average distance and normalized demand to balance the trade-off.
    distance_weight = torch.mean(distance_matrix)
    demand_weight = torch.mean(normalized_demands)

    # Calculate the heuristic by multiplying the normalized demand by the distance
    # and demand, and then adding the weighted average of these products.
    heuristic_matrix = (normalized_demands * distance_matrix +
                        normalized_demands * demands) * (distance_weight + demand_weight)

    return heuristic_matrix
```
