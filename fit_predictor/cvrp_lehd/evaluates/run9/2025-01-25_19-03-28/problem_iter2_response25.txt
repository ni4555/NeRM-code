```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # where edges with lower demand and closer distance are more promising.
    # We also consider the diversity of demand to penalize uneven distribution
    # and introduce a weight based on distance.
    demand_diversity = torch.var(normalized_demands)
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        demand_diversity
    )

    # Apply a threshold to normalize heuristic values
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
