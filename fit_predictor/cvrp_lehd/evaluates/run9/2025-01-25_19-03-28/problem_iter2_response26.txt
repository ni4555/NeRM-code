```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic for each edge as a combination of the normalized demand,
    # the inverse of the distance (to prioritize closer nodes), and a term that increases
    # with the demand (to prioritize nodes with higher demands).
    # Use vectorized operations to optimize performance.
    heuristic_matrix = -torch.mul(normalized_demands, distance_matrix)
    heuristic_matrix += torch.clamp(distance_matrix, min=1e-6) ** -2
    heuristic_matrix += normalized_demands * 1000

    # Incorporate demand inverses for demand-based prioritization and ensure no division by zero
    demand_inverse = 1 / (normalized_demands + 1e-8)

    # Adjust the heuristic based on the priority of higher demand
    heuristic_matrix += demand_inverse

    return heuristic_matrix
```
