```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # where edges with lower demand and closer distance are more promising.
    # We also consider the difference between the maximum and minimum demand
    # to penalize large variations in customer demand.
    max_demand = demands.max()
    min_demand = demands.min()
    demand_diff = max_demand - min_demand

    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        demand_diff
    )

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
