```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the variance and standard deviation of the demand
    demand_variance = (demands - normalized_demands.mean()).pow(2).mean()
    demand_stddev = demand_variance ** 0.5

    # Calculate the heuristic based on a combination of demand and distance
    # Edges with lower demand and closer distance are more promising.
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        demand_variance
    )

    # Apply dynamic penalties for demand outliers
    high_demand_penalty = torch.where(demands > 1.1 * normalized_demands.mean(), -1.0, 0.0)
    outlier_penalty = torch.where(demand_variance > 1.5 * demand_stddev, -1.0, 0.0)

    # Combine the heuristic with penalties
    adjusted_heuristic_matrix = heuristic_matrix + high_demand_penalty + outlier_penalty

    # Normalize and threshold the heuristic matrix for consistency
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(adjusted_heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
