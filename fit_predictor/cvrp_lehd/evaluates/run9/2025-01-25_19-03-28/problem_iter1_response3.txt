```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic for each edge as a weighted sum of the negative demand
    # and the distance, where the weight is inversely proportional to the demand
    # to encourage visiting customers with lower demands first.
    weights = 1 / (normalized_demands + 1e-6)  # Add a small value to avoid division by zero
    heuristic_matrix = torch.mul(weights, -torch.mul(normalized_demands, distance_matrix))

    return heuristic_matrix
```
