```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # where edges with lower demand and closer distance are more promising.
    # We also incorporate penalties for high demand and outliers by considering
    # the standard deviation of the demands, which measures the variation in demand.
    demand_std = demands.std()
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        demand_std
    )

    # Normalize the heuristic matrix to ensure all values are within a specific range
    max_heuristic = heuristic_matrix.max()
    min_heuristic = heuristic_matrix.min()
    heuristic_range = max_heuristic - min_heuristic
    normalized_heuristic_matrix = (heuristic_matrix - min_heuristic) / heuristic_range

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(normalized_heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
