```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic as a negative linear combination of the normalized demand and distance
    # This heuristic rewards short distances and higher demand nodes, with an inverse demand penalty.
    heuristic_matrix = -torch.mul(distance_matrix, normalized_demands)
    heuristic_matrix = torch.add(heuristic_matrix, torch.log(normalized_demands + 1e-8))  # To ensure positive values and avoid zero

    return heuristic_matrix
```
