```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    max_demand = demands.max()
    min_demand = demands.min()
    demand_diff = max_demand - min_demand

    # Calculate the standard deviation of the demands
    mean_demand = demands.mean()
    std_demand = demands.std()

    # Dynamic penalty for variance and outliers using a Z-score normalization
    z_scores = (demands - mean_demand) / std_demand
    variance_penalty = -torch.clamp(z_scores ** 2, min=-1, max=0)

    # Calculate the heuristic based on the normalized demand, distance, and variance penalty
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        torch.mul(demand_diff, variance_penalty)
    )

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
