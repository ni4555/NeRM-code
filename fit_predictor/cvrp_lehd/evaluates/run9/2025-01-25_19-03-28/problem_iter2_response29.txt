```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic for each edge as a combination of the normalized demand,
    # the inverse of the distance (to prioritize closer nodes), and a term that increases
    # with the inverse of the demand (to encourage visiting nodes with high demand earlier).
    # The heuristic is a weighted sum of these factors, with a bias towards lower distance
    # and higher demand.
    distance_squared = distance_matrix ** 2
    demand_inverse = 1 / (normalized_demands + 1e-8)  # Adding a small constant to avoid division by zero
    heuristic_matrix = torch.mul(
        torch.add(
            torch.mul(normalized_demands, distance_squared),
            demand_inverse
        ),
        torch.clamp(demands, min=0)  # Ignore negative demands
    )

    return heuristic_matrix
```
