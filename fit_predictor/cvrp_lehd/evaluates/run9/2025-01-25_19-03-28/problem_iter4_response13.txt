```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # We prioritize edges with lower demand, closer distance, and lower demand variance.
    # We use the mean distance to the depot as a reference for the distance component.
    mean_distance_to_depot = distance_matrix[0].mean()
    heuristic_matrix = -normalized_demands * (distance_matrix / mean_distance_to_depot)
    
    # Calculate the variance in demand to penalize large variations
    demand_variance = demands.var()
    
    # Adjust the heuristic to penalize higher variance
    heuristic_matrix -= demand_variance * 0.1

    # Normalize the heuristic matrix to ensure values are within a specific range
    min_val = heuristic_matrix.min()
    max_val = heuristic_matrix.max()
    normalized_heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(normalized_heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
