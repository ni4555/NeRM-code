```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Normalize distances to the depot (node 0) to weigh them equally
    normalized_distances = distance_matrix[:, 0] / distance_matrix[:, 0].max()

    # Calculate the heuristic based on a combination of normalized demand,
    # normalized distance, and the inverse of the demand variance.
    # This encourages vehicles to visit nodes with similar demands.
    max_demand = demands.max()
    min_demand = demands.min()
    demand_variance = (demands - normalized_demands).pow(2).mean()
    demand_variance_inverse = 1 / (demand_variance + 1e-6)  # Avoid division by zero

    heuristic_matrix = torch.mul(
        torch.mul(normalized_demands, normalized_distances),
        demand_variance_inverse
    )

    # Apply selective penalties for edges with high demand variance
    penalty_factor = torch.where(demand_variance > 1, torch.tensor(0.9, dtype=distance_matrix.dtype), torch.tensor(1.0, dtype=distance_matrix.dtype))
    heuristic_matrix = torch.mul(heuristic_matrix, penalty_factor)

    # Cap penalties to ensure they do not dominate the heuristics
    max_penalty = torch.tensor(1.0, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-max_penalty, max=max_penalty)

    return heuristic_matrix
```
