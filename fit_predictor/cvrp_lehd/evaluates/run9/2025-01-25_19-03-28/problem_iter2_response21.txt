```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic for each edge as the negative of the sum of the normalized demand
    # and the negative of the distance. This heuristic gives higher scores to edges with lower
    # demands and shorter distances.
    heuristic_matrix = -torch.mul(normalized_demands, distance_matrix)

    # Add a penalty for edges leading to nodes with higher normalized demands to discourage
    # loading up the vehicle with large demands. The penalty is proportional to the excess demand
    # above the normalized capacity.
    penalty = torch.relu(normalized_demands - 1)
    heuristic_matrix = torch.add(heuristic_matrix, penalty)

    return heuristic_matrix
```
