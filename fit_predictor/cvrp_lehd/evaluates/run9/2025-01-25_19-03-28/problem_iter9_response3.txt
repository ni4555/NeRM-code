```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # while also considering the z-score to penalize outliers in customer demand.
    z_scores = (demands - normalized_demands.mean()) / normalized_demands.std()
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        z_scores
    )

    # Apply a dynamic penalty that balances the variance in demands.
    variance_penalty = (demands.std() / total_capacity) ** 2
    heuristic_matrix += variance_penalty * distance_matrix

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
