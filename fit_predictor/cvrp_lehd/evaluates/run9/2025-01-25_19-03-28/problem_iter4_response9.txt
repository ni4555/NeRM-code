```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the maximum demand and create a penalty for outliers
    max_demand = demands.max()
    outliers_penalty = (demands > max_demand * 1.5).float()

    # Apply penalty to the demands to favor balancing the vehicle load
    demand_weight = normalized_demands - outliers_penalty

    # Normalize the distances to reduce the impact of longer distances
    distance_matrix_normalized = distance_matrix / distance_matrix.mean()

    # Combine demand and normalized distance to calculate the heuristic
    heuristic_matrix = -torch.mul(demand_weight, distance_matrix_normalized)

    # Apply smoothing to prevent large fluctuations and ensure all values are positive
    smoothing_factor = torch.tensor(0.05, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.relu(heuristic_matrix + smoothing_factor)

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
