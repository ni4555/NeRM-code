```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # where edges with lower demand and closer distance are more promising.
    # Introduce a dynamic penalty that balances variance and outliers by
    # using the interquartile range (IQR) of the demand distribution.
    Q1 = torch.quantile(demands, 0.25)
    Q3 = torch.quantile(demands, 0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    within_bounds = (demands >= lower_bound) & (demands <= upper_bound)
    penalty = torch.where(within_bounds, torch.zeros_like(demands), torch.ones_like(demands))

    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        penalty
    )

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
