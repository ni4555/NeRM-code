```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate cumulative demand and apply non-linear penalties
    cumulative_demand = torch.cumsum(normalized_demands, dim=0)
    non_linear_penalty = 1 / (1 + cumulative_demand)  # Example: inverse function

    # Calculate the heuristic based on a combination of demand, distance, and cumulative demand
    heuristic_matrix = torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        non_linear_penalty
    )

    # Balance diversity and demand variance with a normalization step
    demand_variance = torch.var(normalized_demands, dim=0)
    diversity_factor = 1 / (1 + demand_variance)
    heuristic_matrix = torch.mul(heuristic_matrix, diversity_factor)

    # Apply threshold constraints
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    # Incorporate cumulative demand and capacity, balancing with edge penalties
    edge_penalties = torch.abs(cumulative_demand - total_capacity / (distance_matrix.shape[0] - 1))
    heuristic_matrix = torch.mul(heuristic_matrix, 1 - edge_penalties)

    # Normalize, smooth, and penalize outliers, enforcing limits for heuristic stability
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)  # Enforce limits
    smoothed_matrix = torch.nn.functional∆Ωª¨≤„(heuristic_matrix)  # Placeholder for smoothing

    return smoothed_matrix
```
