```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Normalize demands by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Create a penalty matrix for high demand and outliers
    demand_penalty = torch.clamp(torch.abs(normalized_demands - 0.5), min=0.1)
    
    # Create a penalty matrix for high distance
    distance_penalty = distance_matrix / distance_matrix.max()

    # Combine the penalties and normalize the heuristic matrix
    heuristic_matrix = -torch.add(
        torch.mul(normalized_demands, distance_matrix),
        torch.mul(demand_penalty, distance_penalty)
    )
    heuristic_matrix /= heuristic_matrix.max()

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
