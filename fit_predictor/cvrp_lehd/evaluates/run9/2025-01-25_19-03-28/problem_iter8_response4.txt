```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # with nuanced penalties and normalization.
    # The heuristic includes a penalty for high demand and outlier detection.
    # We also consider the distance function and normalize the heuristic matrix.
    distance_squared = distance_matrix ** 2
    demand_inverse = 1 / (normalized_demands + 1e-8)

    demand_penalty = torch.relu(normalized_demands - 0.5)  # Penalize outliers
    outlier_penalty = torch.relu(normalized_demands - 0.5) * torch.relu(normalized_demands - 0.5)  # Square penalty for outliers

    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_squared),
        demand_penalty + outlier_penalty + demand_inverse
    )

    # Normalize the distance matrix to reduce the influence of large distances
    distance_matrix_normalized = distance_matrix / distance_matrix.max()

    # Combine the normalized heuristic with the normalized distance matrix
    combined_heuristic = heuristic_matrix * distance_matrix_normalized

    # Normalize the combined heuristic matrix to ensure all values are within a specific range
    min_val, max_val = combined_heuristic.min(), combined_heuristic.max()
    scaled_combined_heuristic = (combined_heuristic - min_val) / (max_val - min_val)

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(scaled_combined_heuristic, min=-threshold, max=threshold)

    return heuristic_matrix
```
