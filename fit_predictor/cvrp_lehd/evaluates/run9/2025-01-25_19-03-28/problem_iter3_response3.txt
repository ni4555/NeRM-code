```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # where edges with lower demand and closer distance are more promising.
    # We balance the demand by considering the distance as a multiplier and
    # normalize the demand to account for vehicle capacity.
    # We also incorporate a penalty for high demand and outliers by using
    # a normalized demand difference.
    max_demand = demands.max()
    min_demand = demands.min()
    demand_diff_normalized = (max_demand - min_demand) / total_capacity

    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        demand_diff_normalized
    )

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
