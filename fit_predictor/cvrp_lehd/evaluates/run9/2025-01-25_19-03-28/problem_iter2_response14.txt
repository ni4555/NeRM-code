```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize demands by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the global weights for distance and demand
    distance_weight = torch.mean(distance_matrix)
    demand_weight = torch.mean(normalized_demands)

    # Compute the heuristic based on the weighted sum of distance and normalized demand
    heuristic_matrix = (torch.mul(normalized_demands, distance_matrix) * distance_weight +
                        torch.mul(normalized_demands, demands) * demand_weight)

    return heuristic_matrix
```
