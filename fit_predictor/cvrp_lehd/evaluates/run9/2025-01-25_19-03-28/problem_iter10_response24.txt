```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    demand_variance = (demands - normalized_demands.mean()).pow(2).mean()
    penalty_factor = demand_variance

    z_scores = (demands - normalized_demands.mean()) / normalized_demands.std()
    outlier_penalty = torch.where(z_scores.abs() > 2, torch.tensor(10.0, dtype=distance_matrix.dtype), torch.tensor(1.0, dtype=distance_matrix.dtype))

    # Adjust the heuristic by considering both distance and demand, with a dynamic penalty
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        penalty_factor * outlier_penalty
    )

    # Clamp the heuristics to a range to ensure consistency
    min_threshold = torch.tensor(-1.0, dtype=distance_matrix.dtype)
    max_threshold = torch.tensor(1.0, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=min_threshold, max=max_threshold)

    return heuristic_matrix
```
