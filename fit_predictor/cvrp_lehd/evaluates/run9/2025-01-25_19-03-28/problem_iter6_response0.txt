```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the mean and standard deviation of the normalized demands
    mean_demand = normalized_demands.mean()
    std_demand = normalized_demands.std()

    # Normalize the distance matrix to reduce the influence of large distances
    distance_matrix = distance_matrix / distance_matrix.max()

    # Calculate the heuristic based on a combination of demand and distance
    # The heuristic is positive for promising edges and negative for undesirable ones
    heuristic_matrix = torch.mul(
        normalized_demands,
        distance_matrix
    ) - (normalized_demands - mean_demand)**2 / (2 * std_demand**2)

    # Cap the heuristic values to ensure a range that is not too large
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1, max=1)

    return heuristic_matrix
```
