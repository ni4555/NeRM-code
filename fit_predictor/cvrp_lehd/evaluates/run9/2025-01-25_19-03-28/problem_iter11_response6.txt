```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # while balancing the variance of the demands and scaling the heuristics
    demand_variance = (demands - normalized_demands.mean()).pow(2).mean()
    scale_factor = torch.sqrt(1 / demand_variance)

    # Introduce a dynamic weight for distance that decreases as the variance increases
    distance_weight = 1 - demand_variance

    # Use the Z-score to identify outliers and increase the penalty for these nodes
    z_scores = (demands - normalized_demands.mean()) / normalized_demands.std()
    outlier_penalty = torch.where(z_scores.abs() > 2, torch.tensor(10.0, dtype=distance_matrix.dtype), torch.tensor(1.0, dtype=distance_matrix.dtype))

    # Combine the demand and distance with the penalties
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        penalty_factor * outlier_penalty
    )

    # Scale the heuristics to maintain balance and invariance to scale changes
    heuristic_matrix = heuristic_matrix * scale_factor * distance_weight

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
