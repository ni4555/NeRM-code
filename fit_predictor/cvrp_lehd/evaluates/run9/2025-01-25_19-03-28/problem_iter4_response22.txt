```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Normalize the demands by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Initialize the heuristic matrix with zeros
    heuristic_matrix = torch.zeros_like(distance_matrix)

    # Iterate over each customer node (excluding the depot)
    for i in range(1, len(demands)):
        # Calculate the cumulative demand from the depot to each customer node
        cumulative_demand = torch.cumsum(normalized_demands[:i+1], dim=0)
        
        # Calculate the distance from the depot to each customer node
        distance_to_depot = distance_matrix[:, 0]
        
        # Update the heuristic matrix for the edge from the depot to each customer node
        heuristic_matrix[:, i] = -torch.min(torch.clamp(distance_to_depot, min=0) * (cumulative_demand - 1), 0)

        # Calculate the distance from each customer node to node i
        distance_to_i = distance_matrix[i, :]
        
        # Update the heuristic matrix for the edges between customer nodes
        # We use a mask to ignore edges with cumulative demand greater than the capacity
        mask = cumulative_demand < 1
        heuristic_matrix[i, :] = (distance_to_i * (cumulative_demand[1:] - cumulative_demand[:-1])) * mask

    return heuristic_matrix
```
