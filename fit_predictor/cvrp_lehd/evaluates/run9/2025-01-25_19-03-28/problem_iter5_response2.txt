```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # with a dynamic weight adjustment for the distance component
    # and a non-linear penalty for high demand variance.
    max_demand = demands.max()
    min_demand = demands.min()
    demand_diff = max_demand - min_demand

    # Normalize the demand variance and add it to the heuristic
    demand_variance = demand_diff / demands.std()
    variance_component = -torch.pow(demand_variance, 2)

    # Normalize and smooth the distance component using a Gaussian function
    gaussian_smoothing = torch.exp(-torch.pow(distance_matrix, 2) / (2 * torch.pow(0.5, 2)))

    # Combine the components into the heuristic matrix
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, gaussian_smoothing),
        variance_component
    )

    # Normalize the heuristic matrix to ensure all values are within a specific range
    max_heuristic = heuristic_matrix.max()
    min_heuristic = heuristic_matrix.min()
    range_heuristic = max_heuristic - min_heuristic
    if range_heuristic != 0:
        heuristic_matrix = (heuristic_matrix - min_heuristic) / range_heuristic

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
