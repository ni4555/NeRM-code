```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic for each edge as a combination of factors:
    # - The normalized demand, which encourages visiting customers with lower demands first.
    # - The squared distance, which encourages visiting closer customers first.
    # - The inverse of the normalized demand, which encourages visiting nodes with high demand earlier.
    # - The variance of the demand, which introduces diversity by penalizing edges that lead to nodes with similar demands.
    distance_squared = distance_matrix ** 2
    demand_variance = torch.var(normalized_demands)
    demand_inverse = 1 / (normalized_demands + 1e-8)  # Adding a small constant to avoid division by zero
    heuristic_matrix = -torch.mul(torch.add(torch.mul(normalized_demands, distance_squared),
                                           demand_inverse),
                                  torch.add(demand_variance, torch.clamp(demands, min=0)))  # Ignore negative demands

    return heuristic_matrix
```
