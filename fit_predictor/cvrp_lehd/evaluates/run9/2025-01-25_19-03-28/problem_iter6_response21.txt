```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on the product of normalized demand and distance
    # We use the absolute difference in demand to penalize large variations
    max_demand = demands.max()
    min_demand = demands.min()
    demand_diff = max_demand - min_demand

    heuristic_matrix = -torch.mul(normalized_demands, distance_matrix)
    heuristic_matrix += torch.mul(heuristic_matrix, demand_diff.abs())

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
