```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand, distance, and variance of demands.
    # This will promote diversity in the selection of customers to visit, and will penalize heavily
    # the edges with high variance in demands, which may indicate an imbalance in the load distribution.
    demand_variance = torch.var(normalized_demands)
    heuristic_matrix = -torch.mul(
        torch.mul(normalized_demands, distance_matrix),
        demand_variance
    )

    # Normalize the heuristic matrix to ensure it is within a specific range, while
    # avoiding the introduction of a bias towards edges with lower or higher demands.
    max_demand = demands.max()
    min_demand = demands.min()
    heuristic_matrix = (heuristic_matrix - min_demand) / (max_demand - min_demand)

    # Apply a small threshold to avoid zero division and ensure the values are within a finite range
    threshold = 1e-10
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-1.0, max=1.0)

    return heuristic_matrix
```
