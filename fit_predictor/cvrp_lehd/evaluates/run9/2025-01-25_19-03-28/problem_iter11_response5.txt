```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:

    # Ensure that the demands are normalized by the total vehicle capacity
    total_capacity = demands.sum()
    normalized_demands = demands / total_capacity

    # Calculate the heuristic based on a combination of demand and distance
    # where edges with lower demand and closer distance are more promising.
    # Introduce a dynamic penalty that increases with the variance of the demands.
    demand_variance = (demands - normalized_demands.mean()).pow(2).mean()
    penalty_factor = demand_variance / (demands.max() - demands.min())

    # Use the Z-score to identify outliers and increase the penalty for these nodes
    z_scores = (demands - normalized_demands.mean()) / normalized_demands.std()
    outlier_penalty = torch.where(z_scores.abs() > 2, torch.tensor(10.0, dtype=distance_matrix.dtype), torch.tensor(1.0, dtype=distance_matrix.dtype))

    # Normalize the heuristic values to ensure scale invariance
    min_demand = demands.min()
    max_demand = demands.max()
    demand_normalization = 2 * (demands - min_demand) / (max_demand - min_demand)

    # Combine the demand normalization, distance, penalty, and outlier factors
    heuristic_matrix = torch.mul(
        torch.mul(demand_normalization, distance_matrix),
        penalty_factor * outlier_penalty
    )

    # Apply a threshold to ensure all heuristics are within a specific range
    threshold = torch.tensor(0.1, dtype=distance_matrix.dtype)
    heuristic_matrix = torch.clamp(heuristic_matrix, min=-threshold, max=threshold)

    return heuristic_matrix
```
