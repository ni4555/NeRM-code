import torch
import torch

def heuristics_v1(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.shape[0]
    # Initial route generation using nearest neighbor heuristic
    visited = torch.zeros(n).bool()
    heuristics = torch.zeros_like(distance_matrix)
    
    for i in range(1, n):
        if not visited[i]:
            visited[i] = True
            j = 0
            min_distance = distance_matrix[i, j]
            for k in range(1, n):
                if not visited[k]:
                    current_distance = distance_matrix[i, k]
                    if current_distance < min_distance:
                        min_distance = current_distance
                        j = k
            heuristics[i, j] = -min_distance
    
    # Savings-based and savings-improvement techniques
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = demands[i] + demands[j] - distance_matrix[i, j]
            heuristics[i, j] = max(heuristics[i, j], savings)
            heuristics[j, i] = max(heuristics[j, i], savings)
    
    return heuristics